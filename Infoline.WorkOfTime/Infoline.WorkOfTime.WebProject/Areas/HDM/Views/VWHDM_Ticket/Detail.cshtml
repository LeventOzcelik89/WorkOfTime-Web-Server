@model Infoline.WorkOfTime.BusinessAccess.VMHDM_TicketModel
@{
    ViewBag.Title = "Yardım Talebi Detayı";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var ticketStatusEnums = Infoline.Helper.EnumsProperties.EnumToArrayGeneric<Infoline.WorkOfTime.BusinessAccess.EnumHDM_TicketStatus>();
    var ticketPriorityEnums = Infoline.Helper.EnumsProperties.EnumToArrayGeneric<Infoline.WorkOfTime.BusinessAccess.EnumHDM_TicketPriority>();

    var statusEnum = ticketStatusEnums.Where(a => a.Key == Model.status.ToString()).FirstOrDefault();
    var priorityEnum = ticketPriorityEnums.Where(a => a.Key == Model.priority.ToString()).FirstOrDefault();

    var userStatus = (PageSecurity)Session["userStatus"];

    var isManager = userStatus.AuthorizedRoles.Contains(new Guid(SHRoles.YardimMasaYonetim));
    var isPersonel = userStatus.AuthorizedRoles.Contains(new Guid(SHRoles.YardimMasaPersonel));
    var isRequester = userStatus.AuthorizedRoles.Contains(new Guid(SHRoles.YardimMasaTalep));

    var isSystemManager = userStatus.AuthorizedRoles.Contains(new Guid(SHRoles.SistemYonetici));

    var inProgressAction = Model.Actions.Where(a => a.type == (int)EnumHDM_TicketActionType.IsBaslangic).OrderByDescending(a => a.created).FirstOrDefault();
    var doneAction = Model.Actions.Where(a => a.type == (int)EnumHDM_TicketActionType.CozumSaglandi).OrderByDescending(a => a.created).FirstOrDefault();
    var closedAction = Model.Actions.Where(a => a.type == (int)EnumHDM_TicketActionType.Kapatildi).OrderByDescending(a => a.created).FirstOrDefault();
    var cancelledAction = Model.Actions.Where(a => a.type == (int)EnumHDM_TicketActionType.Vazgec).OrderByDescending(a => a.created).FirstOrDefault();

    var gecensure = Model.GetPassingTime(doneAction != null ? doneAction.created : DateTime.Now);

}

<style type="text/css">
    .list-group-item img.img-circle {
        width: 36px;
        height: 36px;
    }

    #statusField .k-dropdown .k-state-default {
        border-color: #d3d3d3 !important;
    }

    .selectedvalue {
        display: inline-grid;
        width: 25px;
    }

    .pulseicon {
        display: inline-block;
        -moz-animation: pulse 2s infinite linear;
        -o-animation: pulse 2s infinite linear;
        -webkit-animation: pulse 2s infinite linear;
        animation: pulse 2s infinite linear;
    }

    @@-webkit-keyframes pulse {
        0% {
            opacity: 1;
        }

        50% {
            opacity: 0;
        }

        100% {
            opacity: 1;
        }
    }

    @@-moz-keyframes pulse {
        0% {
            opacity: 1;
        }

        50% {
            opacity: 0;
        }

        100% {
            opacity: 1;
        }
    }

    @@-o-keyframes pulse {
        0% {
            opacity: 1;
        }

        50% {
            opacity: 0;
        }

        100% {
            opacity: 1;
        }
    }

    @@-ms-keyframes pulse {
        0% {
            opacity: 1;
        }

        50% {
            opacity: 0;
        }

        100% {
            opacity: 1;
        }
    }

    @@keyframes pulse {
        0% {
            opacity: 1;
        }

        50% {
            opacity: 0;
        }

        100% {
            opacity: 1;
        }
    }


    #timeline-wrap {
        margin: 10% 10%;
        position: relative;
    }

    #timeline {
        height: 1px;
        width: 100%;
        background-color: #aabbc4;
        position: relative;
    }

    .marker {
        color: #fff;
        width: 50px;
        height: 50px;
        line-height: 50px;
        font-size: 1.4em;
        text-align: center;
        position: absolute;
        margin-left: -25px;
        background-color: #999999;
        border-radius: 50%;
    }

        .marker:hover {
            -moz-transform: scale(1.2);
            -webkit-transform: scale(1.2);
            -o-transform: scale(1.2);
            -ms-transform: scale(1.2);
            transform: scale(1.2);
            -webkit-transition: all 300ms ease;
            -moz-transition: all 300ms ease;
            -ms-transition: all 300ms ease;
            -o-transition: all 300ms ease;
            transition: all 300ms ease;
        }

    .mfirst {
        top: -25px;
    }

    .m2 {
        top: -25px;
        left: 33%
    }

    .m3 {
        top: -25px;
        left: 67%
    }


    .mlast {
        top: -25px;
        left: 100%
    }

    .timeline-panel {
        margin-top: 20%;
        width: 500px;
        height: 200px;
        background-color: #cbd0df;
        border-radius: 2px;
        position: relative;
        text-align: left;
        padding: 10px;
        font-size: 20px;
        font-weight: bold;
        line-height: 20px;
        float: left;
    }

        .timeline-panel:after {
            content: '';
            position: absolute;
            margin-top: -12%;
            left: 10%;
            width: 0;
            height: 0;
            border: 12px solid transparent;
            border-bottom: 15px solid #cbd0df;
        }

    #evaluation .fa-star {
        color: #ffcc00 !important;
    }

    #evaluation .fa-star-o {
        color: #ffcc00 !important;
    }
</style>

<script src="~/Content/Plugins/ckeditor/ckeditor.js" data-selector="modalContainer"></script>
<script type="text/javascript">

    $(document)
        .on("ready", function () {

            CKEDITOR.config.entities_latin = !0;
            CKEDITOR.config.entities_latin = false;
            CKEDITOR.config.extraAllowedContent = false;

            ticketDetail.fnc.loadEditor("replyContent");
            ticketDetail.fnc.loadEditor("forwardContent");
            ticketDetail.fnc.loadEditor("noteContent");
            ticketDetail.fnc.loadTagifies("cc");
            ticketDetail.fnc.loadTagifies("bcc");
            ticketDetail.fnc.loadTagifies("to");

            if ($('#actionButtons').find('button').length == 0) {
                $('#actionButtons').addClass("hide");
            }

            if (ticketDetail.dfn.model.evaluation && ticketDetail.dfn.model.evaluation != null) {
                ticketDetail.fnc.fillStar(ticketDetail.dfn.model.evaluation);
            }

            var isRequester = @Json.Encode(isRequester);
            if (isRequester) {
                var managers = $.Enumerable.From(ticketDetail.dfn.model.IssueManagers).Select(a => a.email).ToArray();
                if ($('#replyBCC').data("tagify") != undefined)
                {
                    $('#replyBCC').data("tagify").addTags(managers);
                }
            }

            var fileUploadContainers = $("#VWHDM_TicketMessages .fileupload-container");

            $.each(fileUploadContainers, function (i, elem) {
                $(elem).addClass("hide");
                var files = $(elem).find(".file-item");
                if (files.length > 0) {
                    var button = $('<button class="btn btn-primary btn-xs"><i class="fa fa-eye"></i> Dosyaları Göster</button>')
                        .on("click", function (e) {
                            var hideFilesButton = $('<button class="btn btn-danger btn-xs"><i class="fa fa-eye-slash"></i>Dosyaları Gizle</button>')
                                .on('click', function (e) {
                                    $(elem).addClass("hide");
                                    $(this).addClass("hide");
                                    $(button).removeClass('hide');
                                })
                            $(elem).parent().append(hideFilesButton);
                            $(elem).removeClass("hide");
                            $(this).addClass("hide");
                        });

                    $(elem).parent().append(button);
                }
            })
        })
        .on("success", "#VWHDM_TicketUpdateForm", function (e, res) {
            setTimeout(function () {
                location.reload();
            }, 250);
        })
        .on("mouseenter", '[data-type="hover"]', function (e) {
            var value = $(this).attr("data-evaluate");
            ticketDetail.fnc.fillStar(value);
        })
        .on("mouseleave", '[data-type="hover"]', function (e) {
            ticketDetail.fnc.fillStar(ticketDetail.dfn.model.evaluation);
        })
        .on("click", '[data-type="hover"]', function (e) {
            var value = $(this).attr("data-evaluate");
            ticketDetail.dfn.model.evaluation = value;
            ticketDetail.fnc.fillStar(ticketDetail.dfn.model.evaluation);
        })

    var ticketDetail = {
        dfn: {
            model: @(Html.Raw(Infoline.Helper.Json.Serialize(Model))),
            emails: $.ajax({
                url: '/General/DataSourceEmailsCompanyAndUsers',
                data: null,
                async: false
            }).responseJSON || [],
        },
        fnc: {
            loadTagifies: function (dataItem) {
                $.each($('[data-item="' + dataItem + '"]'), function (i, item) {
                    if ($(item).attr("type") == "text") {
                        $(item).tagify({
                            whitelist: ticketDetail.dfn.emails,
                            maxTags: 999,
                            dropdown: {
                                maxItems: 999,
                                enabled: 0,
                                closeOnSelect: false
                            }
                        });
                    }
                });
            },
            loadEditor: function (content) {

                if ($('#' + content).length == 0) {
                    return;
                }

                var form = $('#' + content).parents('.form-horizontal');
                var idElem = form.find('[name="id"]');

                var id = newGuid();

                if (idElem && idElem != null && idElem != "") {
                    id = idElem.val();
                }

                CKEDITOR.replace(content, {
                    extraPlugins: 'image2',
                    height: '120px',
                    removeButtons: 'CustomImageUploader',
                    filebrowserImageUploadUrl: '/HDM/VWHDM_TicketMessage/EditorUploadFile?id=' + id,
                    removePlugins: 'about'
                });
            },
            addAction: function (actionType, isFeedBack) {
                GetJsonDataFromUrl('/HDM/VWHDM_Ticket/UpdateCustom', { item: ticketDetail.dfn.model, actionType: actionType }, function (resp) {
                    if (resp.Result) {
                        if (isFeedBack) {
                            MesajSuccess(resp.FeedBack.message, "İşlem başarılı");
                        }
                        setTimeout(function () {
                            location.reload();
                        }, 500)
                    } else {
                        MesajWarning(resp.FeedBack.message, "İşlem eksik gerçekleşti.");
                    }
                })
            },
            openModalForAssign: function (actionType) {
                $message = $('<div class="clearfix">');
                $('<div class="form-group">')
                    .append('<div class="col-md-4"><label class="control-label req">Görevli Personel</label></div>')
                    .append('<div class="col-md-8"><input id="assignUserId" data-item="assignUserId" class="form-control"></div>')
                    .appendTo($message);

                BootstrapDialog.show({
                    size: 'size-wide',
                    type: 'type-info',
                    title: "Personele Atama",
                    message: function (dialog) {
                        return $message;
                    },
                    onshow: function (dialog) {
                        dialog.$modalContent.find('[data-item="assignUserId"]').kendoDropDownList({
                            optionLabel: "Lütfen görevlendirilecek personeli seçiniz.",
                            dataTextField: "FullName",
                            dataValueField: "id",
                            dataSource: {
                                type: "aspnetmvc-ajax",
                                transport: {
                                    read: {
                                        dataType: "json",
                                        url: '@Url.Action("DataSourceDropDown", "VWSH_User", new {area = "SH"})'
                                    },
                                },
                                serverFiltering: true,
                                serverPaging: true,
                                pageSize: 50,
                                page: 1,
                                total: 0,
                                serverSorting: true,
                            },
                            filter: 'contains',
                            template: kendo.template($("#userTemplate").html()),
                        });
                    },
                    buttons: [
                        {
                            label: 'Vazgeç',
                            cssClass: 'btn-danger',
                            action: function (dialog) {
                                dialog.close();
                            }
                        },
                        {
                            label: 'Kaydet',
                            cssClass: 'btn-info',
                            action: function (dialog) {
                                var assignUserId = $('#assignUserId').data("kendoDropDownList").value();
                                ticketDetail.dfn.model.assignUserId = assignUserId;
                                ticketDetail.fnc.addAction(actionType, true);
                            }
                        }
                    ]
                })
            },
            fillStar: function (value) {
                $('[data-evaluate]').addClass("fa-star-o");
                for (var i = 1; i <= value; i++) {
                    $('[data-evaluate="' + i + '"]').removeClass("fa-star-o").addClass("fa-star");
                }
            }
        },
        events: {
            newAction: function (_this, actionType) {

                if (actionType == @((int)EnumHDM_TicketActionType.BaskaPersonelAta) || actionType == @((int)EnumHDM_TicketActionType.PersonelAtama)) {
                    ticketDetail.fnc.openModalForAssign(actionType);
                } else {
                    ticketDetail.fnc.addAction(actionType, true);
                }
            },
            addMessage: function (_this, type) {
                var form = $(_this).parents('.form-horizontal');
                var formData = new FormData();
                var modelData = form.find('input:not([type="file"]),select,textarea').serializeArray();

                modelData.push({name: "type", value: parseInt(type) });
                modelData.push({name: "ticketId", value: '@(Model.id)' });

                var ccElem = form.find('[data-item="cc"][type="text"]');
                var bccElem = form.find('[data-item="bcc"][type="text"]');
                var toElem = form.find('[data-item="to"][type="text"]');
                var fileContent = form.find('.fileupload-container');
                var contentId = form.find('[data-item="content"]').attr("id");

                if (type == '@((int)EnumHDM_TicketMessageType.Forward)') {
                    var to = $('#forwardTO').val();

                    if (!to || to == null || to == "") {
                        MesajWarning("Gönderilecek mail adresi girilmedi");
                        return false;
                    }
                }

                if (contentId) {
                    var contentModelData = modelData.find(a => a.name == "content");
                    var ckData = CKEDITOR.instances[contentId];
                    var contentData = $('#' + contentId).val();

                    if (ckData && ckData != null && ckData != "") {
                        contentData = ckData.getData();
                    }

                    if (!contentData || contentData == null || contentData == "") {
                        MesajWarning("Mesaj alanı zorunludur.");
                        return false;
                    }

                    contentModelData.value = contentData;
                }

                if (ccElem.length > 0) {
                    var ccData = modelData.find(a => a.name == "cc");
                    ccData.value = $(ccElem).data("tagify").value.map(a => a.value).join(",");
                }

                if (bccElem.length > 0) {
                    var bccData = modelData.find(a => a.name == "bcc");
                    bccData.value = $(bccElem).data("tagify").value.map(a => a.value).join(",");
                }

                if (toElem.length > 0) {
                    var mailtoData = modelData.find(a => a.name == "mailto");
                    mailtoData.value = $(toElem).data("tagify").value.map(a => a.value).join(",");
                }

                $.each(modelData, function (key, input) {
                    formData.append(input.name, input.value);
                });

                var indexFile = 0;
                if (fileContent.length > 0) {
                    var table = $(fileContent).data("table");
                    var id = $(fileContent).data("id");
                    var group = $(fileContent).data("group");

                    $(fileContent).find('li.file-item').each(function (c) {
                        var file = $(this).data("file");
                        if (file) {
                            formData.append(table + '|' + group + '|' + id, file, file.name);
                            indexFile++;
                        }
                    })
                }

                var settings = {
                    url: "/HDM/VWHDM_TicketMessage/Insert",
                    type: "POST",
                    data: modelData,
                    beforeSend: function () {
                        $('body').loadingModal({ text: "İşlem gerçekleştiriliyor, lütfen bekleyiniz.", animation: 'rotatingPlane', backgroundColor: 'black' });
                    },
                    success: function (resp) {
                        if (resp.Result) {
                            MesajSuccess(resp.FeedBack.message, "İşlem başarılı");
                            setTimeout(function () {
                                location.reload();
                            }, 500)
                        } else {
                            MesajWarning(resp.FeedBack.message, "İşlem eksik gerçekleşti.");
                        }
                    },
                    complete: function (response) {
                        $('body').loadingModal('destroy');
                    }
                }

                if (indexFile > 0) {
                    settings["contentType"] = false;
                    settings["processData"] = false;
                    settings["data"] = formData;
                }

                $.ajax(settings);
            },
            evaluate: function (_this) {
                if (ticketDetail.dfn.model.evaluation && ticketDetail.dfn.model.evaluation != null) {
                    var ibox = $(_this).parents(".ibox");
                    ticketDetail.dfn.model.evaluateDescription = $(ibox).find('#evaluateDescription').val();
                    ticketDetail.fnc.addAction('@((int)EnumHDM_TicketActionType.Degerlendirme)', true);
                }
                else {
                    MesajWarning("Lütfen değerlendirme için seçim yapınız.");
                    return false;
                }
            }
        }
    }

</script>

<div class="row">
    <div class="col-md-9">
        <div class="ibox">
            <div class="ibox-title">
                <h5> <i class="fa fa-info-circle"></i> @(Model.title) </h5>
                <div class="ibox-tools">

                    @if (Model.status != (int)EnumHDM_TicketStatus.Done && Model.status != (int)EnumHDM_TicketStatus.Closed)
                    {
                        <a style="color: #ffffff;" class="btn btn-xs btn-warning" data-task="Insert" data-method="GET" data-show="single" data-href="/HDM/VWHDM_Ticket/Update?id=@Model.id">
                            <i class="fa fa-edit"></i> Talebi Düzenle
                        </a>
                    }

                    <a class="collapse-link">
                        <i class="fa fa-chevron-up"></i>
                    </a>
                </div>
            </div>
            <div class="ibox-content">
                <div class="row">
                    <div class="col-lg-6">
                        <ul class="list-group clear-list" style="margin-bottom: 0px !important;">
                            <li class="list-group-item fist-item">
                                <i class="icon-tag-1"></i> Konu :
                                <strong> @(Model.issueId_Title) </strong>
                            </li>
                            <li class="list-group-item fist-item">
                                <i class="icon-right-hand"></i> Talebin Geldiği Yer :
                                <strong> @(Model.channel_Title) </strong>
                            </li>
                            <li class="list-group-item fist-item">
                                <i class="icon-code-1"></i> Talep Kodu :
                                <strong> @(Model.code) </strong>
                            </li>
                        </ul>
                    </div>
                    <div class="col-lg-6" style="border-left: 1px solid #e7eaec;">
                        <ul class="list-group clear-list" style="margin-bottom: 0px !important;">
                            <li class="list-group-item fist-item">
                                <i class="icon-calendar"></i>  Talep Tarihi :
                                <strong>  @(Model.created) </strong>
                            </li>
                            <li class="list-group-item fist-item">
                                <i class="icon-bell-2"></i>  Öncelik Durumu :
                                <strong>
                                    <i class="fa fa-circle" style="color:#@(priorityEnum.Generic["color"])"></i> @(Model.priority_Title)
                                </strong>
                            </li>
                            <li class="list-group-item fist-item" id="statusField">
                                <i class="icon-question"></i>  Talebin Son Durumu :
                                <strong style="color:@(statusEnum.Generic["color"])">
                                    <i class="@(statusEnum.Generic["icon"])"></i> @statusEnum.Value
                                </strong>
                            </li>
                        </ul>
                    </div>
                </div>
                <hr />
                <strong> Detaylı Açıklama : </strong> @Html.Raw(Model.content)
            </div>
        </div>

        <section style="margin-bottom: 20px;">
            <div class="tabs-container">
                <ul class="nav nav-tabs">

                    @if (Model.Messages.Count() > 0)
                    {
                        <li class="active" data-href="@Url.Action("DataSource", "VWHDM_TicketMessage", new { area = "HDM" })" data-toggle="tooltip" data-placement="top" title="Tüm Aktiviteler">
                            <a data-toggle="tab" href="#VWHDM_TicketMessages" aria-expanded="true"><i class="icon-chat-empty text-success fa-2x"></i></a>
                        </li>
                    }

                    @if (Model.AssignUser != null)
                    {
                        <li class="@(Model.Messages.Count() > 0 ? "":"active")" data-href="@Url.Action("DataSource", "VWHDM_TicketMessage", new { area = "HDM" })" data-toggle="tooltip" data-placement="top" title="Mail ile Cevapla">
                            <a data-toggle="tab" href="#VWHDM_TicketMessage1" aria-expanded="true"><i class="icon-mail-3 text-success fa-2x"></i></a>
                        </li>
                    }

                    @if ((isPersonel || isManager || isSystemManager) && Model.AssignUser != null)
                    {
                        <li data-href="@Url.Action("DataSource", "VWHDM_TicketMessage", new { area = "HDM" })" data-toggle="tooltip" data-placement="top" title="Mail ile Başkasına İlet">
                            <a data-toggle="tab" href="#VWHDM_TicketMessage2" aria-expanded="true"><i class="icon-forward-3 text-success fa-2x"></i></a>
                        </li>
                    }

                    <li class="@(Model.AssignUser == null && Model.Messages.Count() == 0  ? "active":"")" data-href="@Url.Action("DataSource", "VWHDM_TicketMessage", new { area = "HDM" })" data-toggle="tooltip" data-placement="top" title="Not Ekle">
                        <a data-toggle="tab" href="#VWHDM_TicketMessage3" aria-expanded="true"><i class="icon-chat-5 text-success fa-2x"></i></a>
                    </li>

                    @if (isPersonel || isManager || isSystemManager)
                    {
                        <li data-href="@Url.Action("DataSource", "VWHDM_TicketAction", new { area = "HDM" })" data-toggle="tooltip" data-placement="top" title="Talep Geçmişi">
                            <a data-toggle="tab" href="#VWHDM_TicketActions" aria-expanded="false"><i class="icon-history text-success fa-2x" aria-hidden="true"></i></a>
                        </li>
                    }

                    <li data-toggle="tooltip" data-placement="top" title="Dosyalar">
                        <a data-toggle="tab" href="#VWHDM_TicketFiles" aria-expanded="true"><i class="icon-folder-open text-success fa-2x"></i></a>
                    </li>
                </ul>

                <div class="tab-content">
                    @if (Model.Messages.Count() > 0)
                    {
                        <div class="tab-pane active" id="VWHDM_TicketMessages" data-href="@Url.Action("DataSource", "VWHDM_TicketMessage", new { area = "HDM" })">
                            <h4><i class="icon-chat-empty text-success"></i> TÜM AKTİVİTELER </h4>
                            <div class="hr-line-dashed"></div>
                            <div class="feed-activity-list" style="padding-top: 15px;max-height: 400px;overflow:auto">
                                @foreach (var item in Model.Messages.OrderByDescending(a => a.created).ToArray())
                                {
                                    <div class="feed-element">
                                        <a href="#" class="pull-left">
                                            <img alt="image" data-toggle="tooltip" data-placement="top" data-original-title="@item.createdby_Photo" onerror="ImageError(this,'/Content/Custom/img/na.png')" class="img-circle" src="@(item.createdby_Photo != null ? item.createdby_Photo : "/Content/Custom/img/na.png")">
                                        </a>
                                        <div class="media-body">
                                            <small class="pull-right">@item.created</small>
                                            <p>
                                                <strong>@(item.createdby_Title != null ? item.createdby_Title : "") (@(item.type_Title))</strong>
                                            </p>
                                            @if (!String.IsNullOrEmpty(item.mailto))
                                            {
                                                <p>
                                                    <strong>Kime : </strong>
                                                    @foreach (var email in item.mailto.Split(','))
                                                    {
                                                        <span class="label">@email</span>
                                                    }
                                                </p>
                                            }

                                            @if (!String.IsNullOrEmpty(item.cc) && (isPersonel || isManager || isSystemManager))
                                            {
                                                <p>
                                                    <strong>CC : </strong>
                                                    @foreach (var email in item.cc.Split(','))
                                                    {
                                                        <span class="label label-warning">@email</span>
                                                    }
                                                </p>
                                            }

                                            @if (!String.IsNullOrEmpty(item.bcc) && (isPersonel || isManager || isSystemManager))
                                            {
                                                <p>
                                                    <strong>BCC : </strong>
                                                    @foreach (var email in item.bcc.Split(','))
                                                    {
                                                        <span class="label label-info">@email</span>
                                                    }
                                                </p>
                                            }

                                            @(Html.Raw(item.content))

                                            @(
                                                Html.Akilli().FileUpload()
                                                .DataTable("HDM_TicketMessage")
                                                .DataId(item.id)
                                                .DataKey(x => x.fileGroup == "Mesaj Ek Dosya")
                                                .PreviewMode(true)
                                            )
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    @if (Model.AssignUser != null)
                    {
                        <div class="tab-pane @(Model.Messages.Count() > 0 ? "":"active")" id="VWHDM_TicketMessage1" data-href="@Url.Action("DataSource", "VWHDM_TicketMessage", new { area = "HDM" })">
                            <h4><i class="icon-mail-3 text-success"></i> CEVAPLA </h4>

                            <div class="hr-line-dashed"></div>

                            <div class="form-horizontal clearfix">
                                @Html.AntiForgeryToken()
                                <input type="hidden" data-item="id" id="replyId" name="id" value="@(Guid.NewGuid())" />
                                <input type="hidden" data-item="to" id="replyTO" name="mailto" value="@(Model.requesterId == userStatus.user.id ? Model.AssignUser.email : Model.Requester.email)" />

                                <div class="form-group">
                                    <div class="col-md-3">
                                        <label class="control-label label-md" for="replyCC">Kime : </label>
                                    </div>
                                    <div class="col-md-9">
                                        <span class="badge badge-success"> @(Model.requesterId == userStatus.user.id ? Model.AssignUser.email : Model.Requester.email) </span>
                                    </div>
                                </div>

                                <div class="form-group @(isRequester && (!isSystemManager || !isManager) ? "hide" : "")">
                                    <div class="col-md-3">
                                        <label class="control-label label-md" for="replyCC">CC : </label>
                                    </div>
                                    <div class="col-md-9">
                                        <input type="text" data-item="cc" name="cc" id="replyCC" placeholder="Lütfen email adreslerini yazıp Enter tuşuna basınız." />
                                    </div>
                                </div>

                                <div class="form-group @(isRequester && (!isSystemManager || !isManager) ? "hide" : "")">
                                    <div class="col-md-3">
                                        <label class="control-label label-md" for="replyBCC">BCC : </label>
                                    </div>
                                    <div class="col-md-9">
                                        <input type="text" data-item="bcc" name="bcc" id="replyBCC" placeholder="Lütfen email adreslerini yazıp Enter tuşuna basınız." />
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-3">
                                        <label class="control-label label-md req" for="replyContent">Cevabınız :</label>
                                    </div>
                                    <div class="col-md-9">
                                        <textarea class="form-control" name="content" id="replyContent" data-item="content"></textarea>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-3">
                                        <label class="control-label label-md" for="attachments">Ek Dosyalar :</label>
                                    </div>
                                    <div class="col-md-9">
                                        @(
                                            Html.Akilli().FileUpload()
                                            .DataTable("HDM_TicketMessage")
                                            .DataId(Model.id)
                                            .DataKey(x => x.fileGroup == "Mesaj Ek Dosya")
                                        )
                                    </div>
                                </div>

                                <div class="buttons">
                                    <button class="btn btn-md btn-success pull-right" onclick="ticketDetail.events.addMessage(this, @((int)EnumHDM_TicketMessageType.Reply))" type="button">Cevapla</button>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane" id="VWHDM_TicketMessage2" data-href="@Url.Action("DataSource", "VWHDM_TicketMessage", new { area = "HDM" })">
                            <h4><i class="icon-forward-3 text-success"></i> MAİL İLE BAŞKASINA İLET </h4>
                            <div class="hr-line-dashed"></div>
                            <div class="form-horizontal clearfix">
                                @Html.AntiForgeryToken()

                                <div class="form-group">
                                    <div class="col-md-3">
                                        <label class="control-label label-md req" for="forwardTO">Kime : </label>
                                    </div>
                                    <div class="col-md-9">
                                        <input type="text" data-item="to" name="mailto" id="forwardTO" placeholder="Lütfen email adreslerini yazıp Enter tuşuna basınız." />
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-3">
                                        <label class="control-label label-md" for="forwardCC">CC : </label>
                                    </div>
                                    <div class="col-md-9">
                                        <input type="text" data-item="cc" name="cc" id="forwardCC" placeholder="Lütfen email adreslerini yazıp Enter tuşuna basınız." />
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-3">
                                        <label class="control-label label-md" for="forwardBCC">BCC : </label>
                                    </div>
                                    <div class="col-md-9">
                                        <input type="text" data-item="bcc" name="bcc" id="forwardBCC" placeholder="Lütfen email adreslerini yazıp Enter tuşuna basınız." />
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-3">
                                        <label class="control-label label-md req" for="forwardContent">İletilecek Mesaj :</label>
                                    </div>
                                    <div class="col-md-9">
                                        <textarea class="form-control" name="content" id="forwardContent" data-item="content"></textarea>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-3">
                                        <label class="control-label label-md" for="attachments">Ek Dosyalar :</label>
                                    </div>
                                    <div class="col-md-9">
                                        @(
                                            Html.Akilli().FileUpload()
                                            .DataTable("HDM_TicketMessage")
                                            .DataId(Model.id)
                                            .DataKey(x => x.fileGroup == "Mesaj Ek Dosya")
                                        )
                                    </div>
                                </div>

                                <div class="buttons">
                                    <button class="btn btn-md btn-success pull-right" onclick="ticketDetail.events.addMessage(this, @((int)EnumHDM_TicketMessageType.Forward))" type="button">Gönder</button>
                                </div>
                            </div>
                        </div>
                    }

                    <div class="tab-pane @(Model.AssignUser == null && Model.Messages.Count() == 0  ? "active":"")" id="VWHDM_TicketMessage3" data-href="@Url.Action("DataSource", "VWHDM_TicketMessage", new { area = "HDM" })">
                        <h4><i class="icon-chat-5 text-success"></i> NOT EKLE </h4>
                        <div class="hr-line-dashed"></div>
                        <div class="form-horizontal clearfix">
                            @Html.AntiForgeryToken()
                            <div class="form-group">
                                <div class="col-md-3">
                                    <label class="control-label label-md req" for="noteContent">Notunuz : </label>
                                </div>
                                <div class="col-md-9">
                                    <textarea class="form-control" name="content" id="noteContent" data-item="content"></textarea>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-3">
                                    <label class="control-label label-md" for="attachments">Ek Dosyalar : </label>
                                </div>
                                <div class="col-md-9">
                                    @(
                                        Html.Akilli().FileUpload()
                                        .DataTable("HDM_TicketMessage")
                                        .DataId(Model.id)
                                        .DataKey(x => x.fileGroup == "Mesaj Ek Dosya")
                                    )
                                </div>
                            </div>

                            <div class="buttons">
                                <button class="btn btn-md btn-success pull-right" onclick="ticketDetail.events.addMessage(this, @((int)EnumHDM_TicketMessageType.Note))" type="button">Notu Ekle</button>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane" data-href="@Url.Action("DataSource", "VWHDM_TicketAction", new { area = "HDM" })" id="VWHDM_TicketActions">
                        <h4><i class="icon-history text-success"></i> TALEP GEÇMİŞİ </h4>
                        <div class="hr-line-dashed"></div>
                        <div class="feed-activity-list" style="padding-top: 15px;max-height: 400px;overflow:auto">
                            @foreach (var item in Model.Actions.OrderByDescending(a => a.created).ToArray())
                            {
                                <div class="feed-element">
                                    <a href="#" class="pull-left">
                                        <img alt="image" data-toggle="tooltip" data-placement="top" data-original-title="@item.createdby_Photo" onerror="ImageError(this,'/Content/Custom/img/na.png')" class="img-circle" src="@(item.createdby_Photo != null ? item.createdby_Photo : "/Content/Custom/img/na.png")">
                                    </a>
                                    <div class="media-body ">
                                        <small class="pull-right">@item.created</small>
                                        <strong>@(item.createdby_Title != null ? item.createdby_Title : "")</strong> tarafından ' @(item.type_Title) '. <br>
                                        <small class="text-muted">@(Html.Raw(item.description))</small>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="tab-pane" id="VWHDM_TicketFiles">
                        <h4><i class="icon-folder-open text-success"></i> DOSYALAR </h4>
                        <div class="hr-line-dashed"></div>
                        @Html.Action("Index", "Files", new { area = "", DataId = Model.id, DataTable = "HDM_Ticket", FileGroup = "Yardım Talep Dosyası" })
                    </div>
                </div>
            </div>
        </section>
    </div>
    <div class="col-md-3">
        <div class="ibox">
            <div class="ibox-title">
                @if (Model.status != (int)EnumHDM_TicketStatus.Cancelled)
                {
                    <div style="font-size:18px;" class="text-center @(Model.status == (int)EnumHDM_TicketStatus.Open || Model.status == (int)EnumHDM_TicketStatus.InProgress ? "text-warning" :
                                                                  Model.status == (int)EnumHDM_TicketStatus.Done || Model.status == (int)EnumHDM_TicketStatus.Closed ? "text-success" : "text-danger")">
                        <i class="fa pulseicon @(statusEnum.Generic["icon"])"></i> @(statusEnum.Generic["description"])
                    </div>

                    <div id="timeline-wrap">
                        <div id="timeline"></div>
                        <div class="marker mfirst" data-html="true" data-original-title="@(Model.createdby != null ? string.Format("Talep oluşturuldu.  <br/> İşlem Yapan : {0}  <br/> Talep Eden : {2}  <br/>  {1:dd.MM.yyyy HH:mm}", Model.createdby_Title, Model.created, Model.requesterId_Title) : "İşlem yapılmadı.")" style="background-color:#1ab394;">
                            <i class="icon-pencil"></i>
                        </div>
                        <div class="marker m2" style="background-color:@(Model.status >= (int)EnumHDM_TicketStatus.InProgress ? "#1ab394" : "")"
                             data-html="true" data-original-title="@(Model.status >= (int)EnumHDM_TicketStatus.InProgress ? (inProgressAction != null ? string.Format("İşe başlandı.  <br/> {0:dd.MM.yyyy HH:mm}", inProgressAction.created) : "İşe başlandı.")  : "İşlem yapılmadı")">
                            <i class="icon-play-circled2-1"></i>
                        </div>
                        <div class="marker m3" style="background-color:@(Model.status >= (int)EnumHDM_TicketStatus.Done ? "#1ab394" : "")"
                             data-html="true" data-original-title="@(Model.status >= (int)EnumHDM_TicketStatus.Done ? (doneAction != null ? string.Format("İş tamamlandı.  <br/> {0:dd.MM.yyyy HH:mm}", doneAction.created) : "Tamamlandı") : "İşlem yapılmadı")">
                            <i class="icon-check"></i>
                        </div>
                        <div class="marker mlast" style="background-color:@(closedAction != null ? "#1ab394" : "")"
                             data-html="true" data-original-title="@(closedAction != null ? string.Format("İş kapatıldı.  <br/> İşlem Yapan : {0}  <br/>  {1:dd.MM.yyyy HH:mm}", closedAction.createdby_Title, closedAction.created) : "İşlem yapılmadı")">
                            <i class="icon-thumbs-up-alt"></i>
                        </div>
                    </div>
                    if (Model.status != (int)EnumHDM_TicketStatus.Done && Model.status != (int)EnumHDM_TicketStatus.Closed)
                    {
                        <div class="text-center"><strong>Geçen süre :</strong> @(gecensure) </div>
                        if (Model.dueDate.HasValue)
                        {
                            <p class="text-center"><strong>Planlanan Bitiş Tarihi</strong> @(Model.dueDate) </p>
                        }
                    }
                    else
                    {
                        <div class="text-center"><strong>Çözüm süresi :</strong> @(gecensure) </div>
                    }
                }
                else
                {
                    <div style="font-size:18px;" class="text-center text-danger">
                        <i class="fa pulseicon @(statusEnum.Generic["icon"])"></i> @(statusEnum.Generic["description"]) (@cancelledAction.createdby_Title tarafından)
                    </div>
                }
            </div>
        </div>

        @if (Model.status != (int)EnumHDM_TicketStatus.Closed)
        {
            <div class="ibox" id="actionButtons">
                <div class="ibox-title" style="text-align:center;">

                    @if ((isManager || isPersonel || isSystemManager) && Model.status == (int)EnumHDM_TicketStatus.Pending)
                    {
                        <button class="btn btn-md btn-warning m-xs" onclick="ticketDetail.events.newAction(this, @((int)EnumHDM_TicketActionType.IsBaslangic))">
                            <i class="icon-play-circled2-1"></i> İşe Devam Et
                        </button>
                    }

                    @if ((isManager || isPersonel || isSystemManager) && Model.status == (int)EnumHDM_TicketStatus.Open && userStatus.user.id == Model.assignUserId)
                    {
                        <button class="btn btn-md btn-warning m-xs" onclick="ticketDetail.events.newAction(this, @((int)EnumHDM_TicketActionType.IsBaslangic))">
                            <i class="icon-play-circled2-1"></i> İşe Başlandı
                        </button>
                    }

                    @if ((isManager || isPersonel || isSystemManager) && (Model.status != (int)EnumHDM_TicketStatus.Cancelled && Model.status != (int)EnumHDM_TicketStatus.Closed && Model.status != (int)EnumHDM_TicketStatus.Done))
                    {
                        <button class="btn btn-md btn-success m-xs" onclick="ticketDetail.events.newAction(this, @((int)EnumHDM_TicketActionType.CozumSaglandi))">
                            <i class="@(ticketStatusEnums.Where(a=>a.Key == ((int)EnumHDM_TicketStatus.Done).ToString()).Select(a=>a.Generic["icon"]).FirstOrDefault())"></i> Çözüm Sağlandı
                        </button>
                    }

                    @if ((isManager || isPersonel || isSystemManager) && Model.status != (int)EnumHDM_TicketStatus.Closed && Model.status != (int)EnumHDM_TicketStatus.Cancelled && Model.status != (int)EnumHDM_TicketStatus.Pending)
                    {
                        <button class="btn btn-md btn-warning m-xs" onclick="ticketDetail.events.newAction(this, @((int)EnumHDM_TicketActionType.Beklemede))">
                            <i class="@(ticketStatusEnums.Where(a=>a.Key == ((int)EnumHDM_TicketStatus.Pending).ToString()).Select(a=>a.Generic["icon"]).FirstOrDefault())"></i> Beklemeye Al
                        </button>
                    }

                    @if ((isManager || isSystemManager) && (Model.status != (int)EnumHDM_TicketStatus.Closed))
                    {
                        <button class="btn btn-md btn-primary m-xs" onclick="ticketDetail.events.newAction(this, @((int)EnumHDM_TicketActionType.Kapatildi))">
                            <i class="@(ticketStatusEnums.Where(a=>a.Key == ((int)EnumHDM_TicketStatus.Closed).ToString()).Select(a=>a.Generic["icon"]).FirstOrDefault())"></i> İşi Kapat
                        </button>
                    }

                    @if (isRequester && Model.status != (int)EnumHDM_TicketStatus.Closed && Model.status != (int)EnumHDM_TicketStatus.Cancelled)
                    {
                        <button class="btn btn-md btn-primary m-xs" onclick="ticketDetail.events.newAction(this, @((int)EnumHDM_TicketActionType.Onay))">
                            <i class="@(ticketStatusEnums.Where(a=>a.Key == ((int)EnumHDM_TicketStatus.Closed).ToString()).Select(a=>a.Generic["icon"]).FirstOrDefault())"></i> Sorunum Çözüldü
                        </button>
                    }

                    @if ((isManager || isSystemManager || isRequester) && (Model.status != (int)EnumHDM_TicketStatus.Closed && Model.status != (int)EnumHDM_TicketStatus.Done && Model.status != (int)EnumHDM_TicketStatus.Cancelled))
                    {
                        <button class="btn btn-md btn-danger m-xs" onclick="ticketDetail.events.newAction(this, @((int)EnumHDM_TicketActionType.Vazgec))">
                            <i class="@(ticketStatusEnums.Where(a=>a.Key == ((int)EnumHDM_TicketStatus.Cancelled).ToString()).Select(a=>a.Generic["icon"]).FirstOrDefault())"></i> Gereksize At
                        </button>
                    }


                    @if ((isManager || isSystemManager || isRequester) && (Model.status == (int)EnumHDM_TicketStatus.Done))
                    {
                        <button class="btn btn-md btn-danger m-xs" onclick="ticketDetail.events.newAction(this, @((int)EnumHDM_TicketActionType.Red))">
                            <i class="@(ticketStatusEnums.Where(a=>a.Key == ((int)EnumHDM_TicketStatus.Cancelled).ToString()).Select(a=>a.Generic["icon"]).FirstOrDefault())"></i> Çözümü Reddet
                        </button>
                    }
                </div>
            </div>

        }

        @if (Model.status == (int)EnumHDM_TicketStatus.Closed && !Model.evaluation.HasValue && isRequester)
        {
            <div class="ibox" id="evaluation">
                <div class="ibox-title">
                    <h5> <i class="fa fa-area-chart"></i> Değerlendirme Puanı </h5>
                    <div class="ibox-tools">
                        <span class="pull-right" data-original-title="Değerlendirme Puanı" data-placement="top" style="cursor:pointer">
                            <i data-type="hover" data-evaluate="1" class="fa fa-star-o" style="font-size:20px;"></i>
                            <i data-type="hover" data-evaluate="2" class="fa fa-star-o" style="font-size:20px;"></i>
                            <i data-type="hover" data-evaluate="3" class="fa fa-star-o" style="font-size:20px;"></i>
                            <i data-type="hover" data-evaluate="4" class="fa fa-star-o" style="font-size:20px;"></i>
                            <i data-type="hover" data-evaluate="5" class="fa fa-star-o" style="font-size:20px;"></i>
                        </span>
                    </div>
                </div>
                <div class="ibox-title">
                    <h5> <i class="fa fa-comment"></i> Açıklama </h5>
                    <div class="ibox-tools">
                        @Html.TextAreaFor(model => model.evaluateDescription, new Dictionary<string, object>()
                        {
                            {"class", "form-control"},
                            {"placeholder", "Lütfen Varsa Açıklama Giriniz.."}
                        })
                    </div>
                </div>
                <div class="ibox-title clearfix">
                    <div class="ibox-tools">
                        <button class="btn btn-md btn-success pull-right" type="button" onclick="ticketDetail.events.evaluate(this)">Gönder</button>
                    </div>
                </div>
            </div>
        }

        @if (Model.status == (int)EnumHDM_TicketStatus.Closed && Model.evaluation.HasValue)
        {
            <div class="ibox" id="evaluation">
                <div class="ibox-title">
                    <h5> <i class="fa fa-area-chart"></i> Değerlendirme Puanı </h5>
                    <div class="ibox-tools">
                        <span class="pull-right" data-original-title="Değerlendirme Puanı" data-placement="top" style="cursor:pointer">
                            <i data-evaluate="1" class="fa fa-star-o" style="font-size:20px;"></i>
                            <i data-evaluate="2" class="fa fa-star-o" style="font-size:20px;"></i>
                            <i data-evaluate="3" class="fa fa-star-o" style="font-size:20px;"></i>
                            <i data-evaluate="4" class="fa fa-star-o" style="font-size:20px;"></i>
                            <i data-evaluate="5" class="fa fa-star-o" style="font-size:20px;"></i>
                        </span>
                    </div>
                </div>
                <div class="ibox-title">
                    <h5> <i class="fa fa-comment"></i> Açıklama </h5>
                    <div class="ibox-tools">
                        @Html.TextAreaFor(model => model.evaluateDescription, new Dictionary<string, object>()
                        {
                            {"class", "form-control"},
                            {"readonly", "readonly"}
                        })
                    </div>
                </div>
            </div>
        }

        <div class="ibox">
            <div class="ibox-title">
                <h5> <i class="fa fa-user"></i> Talep Eden Bilgileri </h5>
            </div>
            <div class="ibox-content">
                <dl class="dl-horizontal">
                    <dt style="text-align:left;margin-top: 8px;">Ad Soyad:</dt>
                    <dd class="project-people">
                        <img alt="image" data-toggle="tooltip" data-placement="top" data-original-title="@Model.Requester.fullName" onerror="ImageError(this,'/Content/Custom/img/na.png')" class="img-circle" src="@(Model.requester_Photo != null ? Model.requester_Photo : "/Content/Custom/img/na.png")">
                        @Model.Requester.fullName
                    </dd>
                </dl>

                <dl class="dl-horizontal">
                    <dt style="text-align:left;margin-top: 8px;">Email:</dt>
                    <dd>
                        @Model.Requester.email
                    </dd>
                </dl>
                <dl class="dl-horizontal">
                    <dt style="text-align:left;margin-top: 8px;">Telefon:</dt>
                    <dd>
                        @Model.Requester.phone
                    </dd>
                </dl>
                <dl class="dl-horizontal" style="margin-bottom: 0px !important;">
                    <dt style="text-align:left;margin-top: 8px;">Firma:</dt>
                    <dd>
                        @Model.Requester.company
                    </dd>
                </dl>
            </div>
        </div>
        <div class="ibox">
            <div class="ibox-title">
                <h5> <i class="fa fa-users"></i> Personeller </h5>

                @if ((isManager || isPersonel || isSystemManager) && Model.status != (int)EnumHDM_TicketStatus.Cancelled && Model.status != (int)EnumHDM_TicketStatus.Closed)
                {
                    <div class="ibox-tools">
                        @if (Model.assignUserId.HasValue)
                        {
                            <button class="btn btn-xs btn-info m-l-xs pull-right" onclick="ticketDetail.events.newAction(this, @((int)EnumHDM_TicketActionType.BaskaPersonelAta))">
                                <i class="fa fa-user-secret"></i> Başka Personele Ata
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-xs btn-info pull-right" onclick="ticketDetail.events.newAction(this, @((int)EnumHDM_TicketActionType.PersonelAtama))">
                                <i class="fa fa-user-secret"></i> Personele Ata
                            </button>
                        }
                    </div>
                }
            </div>
            <div class="ibox-content">
                <dl class="dl-horizontal">
                    <dt style="text-align:left;margin-top: 8px;">Oluşturan:</dt>
                    <dd class="project-people">
                        <img alt="image" data-toggle="tooltip" data-placement="top" data-original-title="@Model.createdby_Title" onerror="ImageError(this,'/Content/Custom/img/na.png')" class="img-circle" src="@(Model.createdby_Photo != null ? Model.createdby_Photo : "/Content/Custom/img/na.png")">
                        @Model.createdby_Title
                    </dd>
                </dl>

                @if (Model.assignUserId.HasValue)
                {
                    <dl class="dl-horizontal" style="margin-bottom:0px !important;">
                        <dt style="text-align:left;margin-top: 8px;">Görevli:</dt>
                        <dd class="project-people">
                            <img alt="image" data-toggle="tooltip" data-placement="top" data-original-title="@Model.assignUserId_Title" onerror="ImageError(this,'/Content/Custom/img/na.png')" class="img-circle" src="@(Model.assignUser_Photo != null ? Model.assignUser_Photo : "/Content/Custom/img/na.png")">
                            @Model.assignUserId_Title
                        </dd>
                    </dl>
                }

            </div>
        </div>
    </div>
</div>