@model Infoline.WorkOfTime.BusinessData.VWCSM_Activity
@{
    ViewBag.Title = "Görüşme Güncelle";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var stageStatusses = Infoline.Helper.EnumsProperties.EnumToArrayGeneric<EnumCSM_StageStatus>();
}


<script type="text/javascript" data-selector="modalContainer">

    var stageStatusses = @Html.Raw(Infoline.Helper.Json.Serialize(stageStatusses));

    function onChangeStage(e) {
        var datetimepicker = $('#contactDate').data("kendoDateTimePicker");
        var dataItem = e.sender.dataItem();
        var statusIsContact = stageStatusses.find(a => a.EnumKey == "Randevu");

        datetimepicker.value(null);
        $('#contactDateContent').addClass("hide");

        if (statusIsContact && dataItem.status == statusIsContact.Key) {
            $('#contactDateContent').removeClass("hide");
            datetimepicker.value(new Date());
        }
    }
    function onBoundStage(e) {
        e.sender.trigger("change");
    }

    function onBoundStudent(c) {
        c.sender.trigger("change");
    }

    function onChangeStudent(c) {
        var student = c.sender.dataItem();
        $(".contact-box").hide();
        if (student.id != "") {

            student["departmentTarget"] = $.ajax({
                url: '/CSM/VWCSM_Student/GetDepartments',
                data: { studentId: student.id },
                type: "POST",
                async: false
            }).responseText;


            $(".contact-box").find("[data-selector]").each(function (cc) {
                var data = eval($(this).attr("data-selector"));
                if (data) {
                    $(this).text(data);
                }
            });
            $('.contact-box').find('[data-href]').attr("data-href", '/CSM/VWCSM_Student/Update/' + student.id);
            $(".contact-box").show();
        }
    }



</script>

@using (Html.BeginForm("Update", "VWCSM_Activity", FormMethod.Post, new Dictionary<string, object>() {
    { "class", "form-horizontal" },
    { "role", "form" },
    { "data-selector", "modalContainer" },
    { "data-formType", "Ajax" }
}))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.id)

    <div class="form-group @(Model.studentId.HasValue ? "hide" : "")">
        <div class="col-md-4">
            <label class="control-label label-md req" for="studentId">Öğrenci</label>
        </div>
        <div class="col-md-8">
            @(
                Html.Akilli()
                .DropDownListFor(model => model.studentId)
                .OptionLabel("Lütfen Öğrenci seçiniz..")
                .DataTextField("name")
                .DataValueField("id")
                .Action(b => b.Action("DataSourceDropDown", "VWCSM_Student", new { area = "CSM" }))
                .Sort(x => x.Add("name").Ascending())
                .BasicInsert(Url.Action("Insert", "VWCSM_Student", new { area = "CSM" }), "name", true)
                .Events(a=>a.Change("onChangeStudent").DataBound("onBoundStudent"))
                .Validate(Validations.Required)
                .Execute()
            )
        </div>
    </div>

    <div class="contact-box" style="background-color: rgb(252, 248, 227);border: 1px solid rgb(243, 233, 181);display:none;position:relative;">
        <div class="col-sm-2">
            <div class="text-center">
                <img alt="image" class="img-circle m-t-xs img-responsive" src="/Content/Custom/img/na.png">
            </div>
        </div>
        <div class="col-md-10">
            <h3><strong data-selector="student.name">-</strong></h3>
        </div>
        <div class="col-sm-5">
            <div data-original-title="Öğrenim gördüğü lise" data-placement="left"><i style="width: 25px !important;" class="fa fa-home"></i><span data-selector="student.schoolId_Title">bilinmiyor</span></div>
            <div data-original-title="Öğrenim gördüğü sınıf kademesi" data-placement="left"><i style="width: 25px !important;" class="fa fa-user"></i><span data-selector="student.grade_Title">bilinmiyor</span></div>
            <div data-original-title="Yaşadığı Yer" data-placement="left"><i style="width: 25px !important;" class="fa fa-map-marker"></i><span data-selector="student.locationId_Title">bilinmiyor</span></div>
        </div>
        <div class="col-sm-5">
            <div data-original-title="Öğrenim gördüğü bölüm" data-placement="left"><i style="width: 25px !important;" class="fa fa-desktop"></i><span data-selector="student.departmentCurrent">bilinmiyor</span></div>
            <div data-original-title="İlgilendiği bölüm" data-placement="left"><i style="width: 25px !important;" class="fa fa-info-circle"></i><span data-selector="student.departmentTarget">bilinmiyor</span></div>
        </div>
        <a data-task="Insert" style="position:absolute;right:10px;top:10px;color:blue;" data-modal="true" data-method="GET" data-href="@Url.Action("Update","VWCSM_Student",new {area="CSM",id=Model.studentId })"><i class="fa fa-edit"></i> Düzenle</a>
        <div class="clearfix"></div>
    </div>

    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md req" for="type">Görüşme Tipi</label>
        </div>
        <div class="col-md-8">
            @(Html.Akilli().RadioButtonGroupFor(a => a.type).Value(EnumCSM_ActivityType.Diger))
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md req" for="date">Görüşme Zamanı / Süresi(dk)</label>
        </div>
        <div class="col-md-6">
            @(
                Html.Akilli().
                DateTimePickerFor(model => model.date).
                Placeholder("Lütfen Görüşme Zamanı girin..").
                Format(Extensions.DateFormatFull()).
                Value(Model.date.HasValue ? Model.date.Value : DateTime.Now).
                Validate(Validations.Required)
            )
        </div>
        <div class="col-md-2">
            @(Html.Akilli().NumericTextBoxFor(model => model.duration).Min(0).Decimals(0).Format("N0").Placeholder("dk").Spinners(false))
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md req" for="stageId">Görüşme Aşaması</label>
        </div>
        <div class="col-md-8">
            @(
                Html.Akilli()
                .DropDownListFor(model => model.stageId)
                .OptionLabel("Lütfen Görüşme Aşaması seçiniz..")
                .DataTextField("name")
                .DataValueField("id")
                .Action(b => b.Action("DataSourceDropDown", "VWCSM_Stage", new { area = "CSM" }))
                .Filter<CSM_Stage>(a => a.id != new Guid("BB0559C5-0C40-420E-A81F-12485829E52C"))
                .Sort(x => x.Add("name").Ascending())
                .Events(e => { e.Change("onChangeStage").DataBound("onBoundStage"); })
                .Validate(Validations.Required)
                .Execute()
            )
        </div>
    </div>

    <div class="form-group hide" id="contactDateContent">
        <div class="col-md-4">
            <label class="control-label label-md" for="contactDate">Randevu Tarihi</label>
        </div>
        <div class="col-md-8">
            @(
                Html.Akilli().
                DateTimePickerFor(model => model.contactDate).
                Placeholder("Lütfen Randevu Tarihi girin..").
                Format(Extensions.DateFormatFull())
            )
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="description">Görüşme Notları</label>
        </div>
        <div class="col-md-8">
            @Html.TextAreaFor(model => model.description, new Dictionary<string, object>()
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen görüşme notlarını giriniz.."}
            })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="file">Görüşme Dosyası</label>
        </div>
        <div class="col-md-8">
            @(
                Html.Akilli().FileUpload()
                .DataTable("CSM_Activity")
                .DataId(Model.id)
                .DataKey(x => x.fileGroup == "Aktivite Dosyası")
                .PreviewMode(false)
            )
        </div>
    </div>

    <div class="buttons">
        <button class="btn btn-md btn-danger pull-left" data-task="modalClose">Geri</button>
        <button class="btn btn-md btn-success pull-right" type="submit">Kaydet</button>
    </div>

}
