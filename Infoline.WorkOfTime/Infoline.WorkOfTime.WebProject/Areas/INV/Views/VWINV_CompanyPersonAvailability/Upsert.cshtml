@using Infoline.WorkOfTime.WebProject.Areas.PRJ.Models
@model Infoline.WorkOfTime.BusinessData.VWINV_CompanyPersonAvailability[]
@{
    Layout = null;
    var Personel_Title = Model.GroupBy(x => x.Person_Title).Select(s => s.Key).OrderBy(a => a).ToList();
    var StartDateGroup = Model.Where(a => a.StartDate.HasValue).OrderBy(c => c.StartDate.Value).GroupBy(x => x.StartDate.Value.ToString("MM/yyyy")).ToList();
    var v = StartDateGroup;
}

<style type="text/css">
    #tableDiv {
        overflow-x: scroll;
        overflow-y: visible;
    }

    #costTable {
        border-spacing: 0;
    }

        #costTable tbody tr td:first-child, #costTable thead tr th:first-child {
            min-width: 180px;
            max-width: 200px;
            text-align: center;
        }

        #costTable td, #costTable th {
            vertical-align: middle;
            white-space: nowrap;
        }

        #costTable tbody tr td input {
            background-color: #f2f2f2;
            padding: 5px !important;
            font-family: 'Roboto', sans-serif;
            font-size: 13px;
            border-radius: 0 !important;
            box-shadow: none !important;
            border: 1px #0c0c0c solid;
            width: 100%;
        }

    ::-webkit-scrollbar {
        width: 0.7em;
        height: 0.7em;
    }

    ::-webkit-input-placeholder {
        color: black;
    }

    #costTable .redArea {
        background-color: #d00d0d !important;
    }

    #costTable .greenArea {
        background-color: #00ff00;
    }
</style>

<script type="text/javascript">

    (function ($) {

        $.fn.MinMaxControl = function () {
            return this.each(function () {
                $(this).on('change', function () {
                    var item = this,
                        value = parseFloat(item.value),
                        min = parseFloat(item.min),
                        max = parseFloat(item.max);
                    if (value >= min && value <= max) {
                        item.value = value;
                    }
                    else {
                        item.value = value < min ? min : max;
                    }

                    var colors = ["eef6ec", "d7ecd2", "b7ddb0", "99d18e", "7bc86c", "61bd4e", "5aac44", "519839", "49852e", "3f6f22", "3f6f22"];

                    var bckgrnd = colors[parseInt(item.value * 10)];
                    $(item).css("background-color", "#"+bckgrnd + "!important");
                    if ((255 - Math.round((item.value * 170))) < 145) {
                        $(item).css("color", "white");
                    }
                    else {
                        $(item).css("color", "black");
                    }
                });
            });
        };
    })(jQuery);


    var PersonelAvability = {
        Save: function (type) {
            var Element = $('[data-costType="' + type + '"]');
            var data = Element.find("input").serializeArray();
            GetJsonDataFromUrl("@Url.Action("Upsert", "VWINV_CompanyPersonAvailability", new {area="INV", IdProject = Model.Select(a=>a.IdProject).FirstOrDefault()})", data, function (resp) {
                feedback(resp.FeedBack);
            });
        },

        Calculate: function (type) {
            var Element = $('[data-costType="' + type + '"]');
            var data = Element.find("input").serializeArray();
            GetJsonDataFromUrl("@Url.Action("Calculate", "VWINV_CompanyPersonAvailability", new {area="INV", IdProject = Model.Select(a=>a.IdProject).FirstOrDefault()})", data, function (resp) {
                if (resp == null) {
                    MesajWarning("Hesaplama Gerçekleştirilemedi.");
                    return false;
                }
                var enumerable = $.Enumerable.From(resp);
                var tpl = enumerable.Sum("$.Salary");
                Element.find('[data-sum="all"]').text(kendo.toString((tpl == "NaN" ? 0 : tpl), "c2"));
                Element.find('[data-sum="person"]').each(function (e) {
                    var selector = $(this).attr("data-selector");
                    var salary = enumerable.Where(function (f) { return f.IdUser == selector });
                    $(this).text(kendo.toString(salary.Sum("$.Salary"), "c2"));
                });

                Element.find('[data-sum="date"]').each(function (e) {
                    var selector = $(this).attr("data-selector").split('"').join("");
                    var salary = enumerable.Where(function (e) { return e.StartDate == selector });
                    $(this).text(kendo.toString(salary.Sum("$.Salary"), "c2"));
                });
            });
        }
    };

    $(document).on("ready", function (e) {
        $(".myInput").MinMaxControl();
        $(".myInput").each(function () {
            $(this).trigger("change");
        });
        PersonelAvability.Calculate('@Model.Select(a => a.type).FirstOrDefault()');
    });
</script>


@if (Model.Count() == 0)
{
    <div class="alert alert-danger">Projeye Tanımlı Personel Yok</div>
}
else
{
    
    <div id="tableDiv">
        <table id="costTable" data-costType="@Model.Select(a=>a.type).FirstOrDefault()" style="width:100%;" class="table table-bordered">
            <thead>
                <tr>
                    <th>Adı</th>
                    @foreach (var item in StartDateGroup)
                    {
                        <th>@item.Key</th>
                    }
                </tr>
            </thead>
            <tbody>
                @{ var i = 0; }
                @foreach (var item in Personel_Title)
                {
                    var userInformation = Model.Where(a => a.Person_Title == item).FirstOrDefault() ?? new VMVWINV_CompanyPersonAvailability();

                    <tr>
                        <td>
                            @item
                        </td>
                        @foreach (var row in StartDateGroup)
                        {
                            var userDetail = row.Where(x => x.Person_Title == item && x.StartDate.Value.ToString("MM/yyyy") == row.Key).FirstOrDefault();

                            if (userDetail != null)
                            {
                                <td>

                                    <input type="hidden" name="pa[@i].type" value="@userDetail.type" />
                                    <input type="hidden" name="pa[@i].StartDate" value="@userDetail.StartDate" />
                                    <input type="hidden" name="pa[@i].EndDate" value="@userDetail.EndDate" />
                                    <input type="hidden" name="pa[@i].IdUser" value="@userDetail.IdUser" />
                                    <input type="hidden" name="pa[@i].isSalary" value="@userDetail.isSalary" />
                                    <input type="number" name="pa[@i].rate" class="myInput" min="0" max="1" step="0.1"
                                           value="@(userDetail.rate.HasValue ? userDetail.rate.Value.ToString().Replace(",", ".") : "0")" />
                                </td>
                                i++;
                            }
                            else
                            {
                                <td>-</td>
                            }
                        }

                        <td data-href="@Url.Action("Calculate", "VWINV_CompanyPersonAvailability", new { area = "INV" })" class="toplam" data-sum="person" data-selector="@userInformation.IdUser">Toplam : <strong>0 ₺</strong></td>
                    </tr>
                }
                <tr data-href="@Url.Action("Calculate", "VWINV_CompanyPersonAvailability", new { area = "INV" })">
                    <td class="null"></td>
                    @foreach (var row in StartDateGroup)
                    {
                        <td class="toplam">Toplam :<strong data-sum="date" data-selector="@row.Key">0 ₺</strong></td>
                    }
                    <td class="toplam">Genel Toplam : <strong data-sum="all">0 ₺</strong></td>
                </tr>
            </tbody>
        </table>
    </div>

    <div class="clearfix text-right">
        <button type="button" class="btn btn-warning btn-md" data-href="@Url.Action("Calculate", "VWINV_CompanyPersonAvailability", new { area = "INV" })" onclick="PersonelAvability.Calculate('@Model.Select(a => a.type).FirstOrDefault()');">Hesapla</button>
        <button type="button" class="btn btn-primary btn-md" onclick="PersonelAvability.Save('@Model.Select(a => a.type).FirstOrDefault()');">Kaydet</button>
    </div>

    <fieldset>
        <legend>Bilgilendirme</legend>

        <div class="form-group" id="infoSection">
            <div class="col-md-12">
                <p class="alert alert-info clearfix text-center" style="margin-bottom: 0px;">
                    <strong id="info1">Maliyetlerin doğru hesaplanabilmesi için personel maaş bilgileri girilmelidir. </strong>
                </p>
            </div>
        </div>
    </fieldset>

                    }
