@model Infoline.WorkOfTime.BusinessData.VWINV_CompanyDepartments
@{
    ViewBag.Title = Model.Type_Title + " Önizleme";
    Layout = Request.Url.LocalPath.IndexOf("Preview") > -1 ? "~/Views/Shared/_Layout.cshtml" : null;
}

<link href="~/Content/OrgChart/css/jquery.orgchart.min.css" rel="stylesheet" />
<link href="~/Content/OrgChart/css/style.css" rel="stylesheet" />

<style type="text/css">
    #chartContent {
        height: calc(100vh - 135px);
        position: relative;
        background: #fff;
        width: 100%;
        padding: 15px;
    }

    #chart {
        height: calc(100vh - 165px);
        width: 100%;
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        -khtml-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        background-image: linear-gradient(90deg,rgba(200,0,0,.15) 10%,rgba(0,0,0,0) 10%),linear-gradient(rgba(200,0,0,.15) 10%,rgba(0,0,0,0) 10%);
        background-size: 10px 10px;
        border: 1px solid rgba(200,0,0,.15);
        border-top-color: transparent;
        border-left-color: transparent;
    }

    .person {
        text-align: center !important;
        border: 1px solid #ccc;
        padding: 2px 5px;
        position: relative;
        margin-bottom: 1px;
    }

        .person i {
        }

    #buttons {
        position: absolute;
        right: 20px;
        top: 20px;
        width: 54px;
        z-index: 99;
        background: #fff;
        padding: 7px;
        border-radius: 27px;
    }

    .button {
        width: 40px;
        height: 40px;
        display: inline-block;
        text-align: center;
        line-height: 34px;
        border-radius: 20px;
        font-size: 15px;
        margin-bottom: 5px;
    }

        .button:focus {
            outline: none !important;
        }

    .orgchart .node.matched {
        background-color: red !important;
    }

#edit-panel {
    position: absolute;
    top: 20px;
    left: 20px;
    z-index: 99;
    box-shadow: 0px 0px 4px -2px #666;
}

  #edit-panel #key-word {
    font-size: 20px;
    width: 200px;
    display: inline-block;
    text-align: center;
    font-size: 15px;
    float: left;
}

    input#key-word {
        cursor: pointer;
    }
</style>

<div id="chartContent">
    <div id="chart"></div>
    <div id="edit-panel" class="view-state">
        <input type="text" id="key-word" class="form-control" tabindex="1">
        <button style="height: 42px;float: left;" class="btn btn-info" type="button" id="btn-filter-node"><i class="fa fa-search"></i></button>
    </div>
</div>

<script src="~/Content/OrgChart/js/jquery.min.js"></script>
<script>var $j = jQuery.noConflict(true);</script>
<script src="~/Content/OrgChart/js/jquery.orgchart.min.js"></script>

<script type="text/javascript">
    var oc = null;
    var data = null;
    var url = "@Url.Action("GetOrganization", "VWINV_CompanyDepartments", new {area="INV",id=Model.id })";
    $(document)
    $(function () {
        setInterval(function () {
            $(".orgchart .node.matched").fadeOut(1000).fadeIn(100);
        }, 1000)
    })

    .on('ready', function () {
        GetJsonDataFromUrl(url, null, function (resp) {
            data = resp;
            SetOrganizationShema();

        })
        $('#key-word').trigger('click')
    })

    function nodeCenter($this) {
        window.setTimeout(function () {
            var $chart = $this.closest('.orgchart');
            var newX = window.parseInt(($chart.outerWidth(true) / 2) - ($this.offset().left - $chart.offset().left) - ($this.outerWidth(true) / 2));
            var newY = window.parseInt(($chart.outerHeight(true) / 5) - ($this.offset().top - $chart.offset().top) - ($this.outerHeight(true) / 2));
            $chart.css('transform', 'matrix(1, 0, 0, 1, ' + (newX) + ', ' + (newY) + ')');
        }, 400);
    }

    function filterNodes(keyWord) {
        DrawOrganizationSchema();
        if (!keyWord.length) {
            return;
        } else {
            var $chart = $(".orgchart");
            $chart.addClass("noncollapsable");
            $chart
              .find(".node")
              .filter(function (index, node) {
                  return (
                    $(node)
                      .text()
                      .split("İ").join("i").toLocaleUpperCase()
                      .indexOf(keyWord.split("İ").join("i").toLocaleUpperCase()) > -1
                  );
              })
              .addClass("matched")
              .closest("table")
              .parents("table")
              .find("tr:first")
              .find(".node")
              .addClass("retained");
            // hide the unmatched nodes
            $chart.find(".matched,.retained").each(function (index, node) {
                $(node)
                  .removeClass("slide-up")
                  .closest(".nodes")
                  .removeClass("hidden")
                  .siblings(".lines")
                  .removeClass("hidden");
                var $unmatched = $(node)
                  .closest("table")
                  .parent()
                  .siblings()
                  .find(".node:first:not(.matched,.retained)")
                  .closest("table")
                  .parent()
                  .addClass("hidden");
                $unmatched
                  .parent()
                  .prev()
                  .children()
                  .slice(1, $unmatched.length * 2 + 1)
                  .addClass("hidden");
            });
            // hide the redundant descendant nodes of the matched nodes
            $chart.find(".matched").each(function (index, node) {
                if (
                  !$(node)
                    .closest("tr")
                    .siblings(":last")
                    .find(".matched").length
                ) {
                    $(node)
                      .closest("tr")
                      .siblings()
                      .addClass("hidden");
                }
            });
        }
    }

    function clearFilterResult() {
        //$(".orgchart")
        //  .removeClass("noncollapsable")
        //  .find(".node")
        //  .removeClass("matched retained")
        //  .end()
        //  .find(".hidden")
        //  .removeClass("hidden")
        //  .end()
        //  .find(".slide-up, .slide-left, .slide-right")
        //  .removeClass("slide-up slide-right slide-left");
        DrawOrganizationSchema();
    }

    function DrawOrganizationSchema() {

        $('#chart').empty();
        oc = $('#chart').orgchart({
            pan: true,
            data: data,
            nodeId: "id",
            zoom: false,
            depth: 3,
            nodeTemplate: function (data) {
                return `
                    <div class="title" data-id="${data.id}" style="background-color:${data.color}">${data.department}</div>
                    <div class="content" style="border-color:${data.color}">${data.personels}</div>
                  `;
            },
            createNode: function () {
                $("#chart .edge:not(.bottomEdge),#chart .fa.fa-users.symbol").remove();
            },
            initCompleted: function () {
                $("#chart .edge:not(.bottomEdge),#chart .fa.fa-users.symbol").remove();
                nodeCenter($("#" + data.id));

            }
        });

    }

    function SetOrganizationShema() {

        DrawOrganizationSchema();

        $("#btn-filter-node").on("click", function () {
            filterNodes($("#key-word").val());
        });

        $("#key-word").on("keyup", function (event) {
            if (event.which === 13) {
                filterNodes(this.value);
            } else if (event.which === 8 && this.value.length === 0) {
                clearFilterResult();
            }
        });

        oc.$chartContainer.on('click', '.node', function () {
            nodeCenter($(this));
        });

        oc.$chartContainer.on('toggle', '.node', function (e) {
            var $this = $j(e.target);
            $this.trigger("click");
        });
    }
</script>