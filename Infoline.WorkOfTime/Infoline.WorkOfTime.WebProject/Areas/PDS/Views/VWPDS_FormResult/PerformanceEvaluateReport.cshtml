@{
    ViewBag.Title = "Performans Değerlendirme Raporları";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="~/Content/Plugins/newHighCharts/highcharts.js"></script>
<script src="~/Content/Plugins/HighCharts/js/exporting.js"></script>

<style type="text/css">
    .widgetCustom {
         position: relative;
         height: 231px;
         background: #FFF;
         border-radius: 5px;
         box-shadow: 0 5px 25px rgba(0, 0, 0, .1);
         z-index: 1;
     }

         .widgetCustom > .cover {
             height: 90px;
             overflow: hidden;
         }

             .widgetCustom > .cover > img {
                 width: 100%;
                 max-width: 100%;
                 max-height: 100%;
                 border-radius: 4px 4px 0 0;
             }

         .widgetCustom > .photo {
             position: absolute;
             top: 40px;
             left: 50%;
             width: 100px;
             height: 100px;
             margin: 0 0 0 -55px;
             border: 5px solid #FFF;
             border-radius: 50%;
         }

         .widgetCustom > h1, .widgetCustom > h2, .widgetCustom > h3 {
             display: block;
             margin: 10px 0;
             text-align: center;
             font-family: 'Open Sans', sans-serif;
             font-size: 13px;
             font-weight: 300;
             color: #999;
         }

         .widgetCustom > h1 {
             margin: 55px 0 10px;
             font-size: 21px;
             color: #000;
         }

         .widgetCustom > h3 {
             font-size: 12px;
         }

         .widgetCustom > ul {
             position: absolute;
             top: 20px;
             left: 100%;
             background: #2CDFD3;
             border-radius: 0 3px 3px 0;
         }

             .widgetCustom > ul > li > a {
                 display: block;
                 padding: 5px 6px;
                 color: #FFF;
                 cursor: pointer;
                 text-align: center;
                 border-bottom: 1px solid #2CD5CA;
                 transition: background-color .3s;
             }

             .widgetCustom > ul > li:hover > a {
                 background-color: #2CD5CA;
             }

             .widgetCustom > ul > li:first-child > a {
                 border-radius: 0 3px 0 0;
             }

             .widgetCustom > ul > li:last-child > a {
                 border: none;
                 border-radius: 0 0 3px 0;
             }

     group + group {
         margin-top: 20px;
     }

     .inline-radio {
         display: flex;
         border-radius: 3px;
         overflow: hidden;
         border: 1px solid #b6b6b6;
     }

         .inline-radio div {
             position: relative;
             flex: 1;
         }

         .inline-radio input {
             width: 100%;
             height: 30px;
             opacity: 0;
             cursor: pointer;
         }

         .inline-radio label {
             position: absolute;
             top: 0;
             left: 0;
             color: #ffffff;
             width: 100%;
             height: 100%;
             background: #ed5565;
             display: flex;
             align-items: center;
             justify-content: center;
             pointer-events: none;
             border-right: 1px solid #b6b6b6;
         }

         .inline-radio div:last-child label {
             border-right: 0;
         }

         .inline-radio input:checked + label {
             font-weight: 800;
             color: #fff;
             background: #1ab394;
         }

     .card-counter {
         padding: 20px 10px;
         border-radius: 5px;
         transition: .3s linear all;
     }

         .card-counter.primary {
             background-color: #007bff;
             color: #FFF;
         }

         .card-counter.danger {
             background-color: #ef5350;
             color: #FFF;
         }

         .card-counter.success {
             background-color: #66bb6a;
             color: #FFF;
         }

         .card-counter.info {
             background-color: #26c6da;
             color: #FFF;
         }

         .card-counter i {
             font-size: 5em;
             opacity: 0.2;
         }

         .card-counter .count-numbers {
             position: absolute;
             right: 35px;
             top: 20px;
             font-size: 32px;
             display: block;
         }

         .card-counter .count-name {
             position: absolute;
             right: 35px;
             top: 65px;
             font-style: italic;
             display: block;
             font-size: 13px;
         }

     .card-form {
         padding: 7px 10px;
         height: 50px;
         transition: .3s linear all;
     }

         .card-form .form-name {
             position: relative;
             font-size: 14px;
         }

         .card-form.primary {
             background-color: #007bff;
             color: #FFF;
         }

         .card-form.danger {
             background-color: #f4f4f5;
             color: #383030;
         }

         .card-form.success {
             background-color: #66bb6a;
             color: #FFF;
         }

         .card-form.info {
             background-color: #777777;
             color: #FFF;
         }


     #personalReport .progress {
         background-color: #b5b5b5 !important;
     }
</style>

<script type="text/javascript">

    var page = {
        minValueInObjectArray: function (array, field) {
            return Math.min.apply(Math, array.map(function (o) { return o[field]; }));
        },
        maxValueInObjectArray: function (array, field) {
            return Math.max.apply(Math, array.map(function (o) { return o[field]; }));
        },
        filter: function (elem) {
            var formArray = $('#personalReport').serializeArray();
            var data = $.Enumerable.From(formArray).GroupBy(a=>a.name).ToArray();
            var obj = {};

            $.each(data, function (i, item) {
                var name = item.Key();

                if (name != "__RequestVerificationToken") {
                    var ids = [];
                    $.each(item.source, function (ind, elem) {
                        ids.push(elem.value);
                    })
                    obj[name] = ids;
                }
            })
            obj["filterType"] = "general";

            GetJsonDataFromUrl('/PDS/VWPDS_FormResult/PerformanceReportFilter', { item: obj }, function (res) {


                $('#graphs').removeClass("hide");

            });
        },

        createLineChart: function (container, data, title, subtitle, yAxisTitle) {
            Highcharts.chart(container, {
                chart: {
                    type: 'spline',
                    zoomType: 'x',
                },
                title: {
                    text: null
                },
                subtitle: {
                    text: subtitle
                },
                xAxis: {
                    type: 'datetime',
                    dateTimeLabelFormats: {
                        month: '%e. %b',
                        year: '%b'
                    },
                },
                yAxis: {
                    title: {
                        text: yAxisTitle
                    },
                    min: 0,
                    max: 100
                },
                plotOptions: {
                    series: {
                        cursor: 'pointer',
                        marker: {
                            enabled: false
                        },
                        point: {
                            events: {
                                mouseOver: function () {
                                   
                                }
                            }
                        }
                    }
                },
                tooltip: {
                    formatter: function () {
                        var s = [];
                        $.each(this.points, function (i, point) {
                            s.push('<b>' + this.series.name + '</b><br/>' + Highcharts.dateFormat('%e %b %Y', new Date(this.x)) +
                                        '<br/>Ortalama: ' + this.point.y.toFixed(1).replace(".", ",") + '<br/>Min: ' +
                                        this.point.min.toFixed(1).replace(".", ",") + '<br/>Max: ' + this.point.max.toFixed(1).replace(".", ","))
                        });
                        return s.join('<br/>');
                    },
                    shared: true
                },
                series: data
            });
        },
        createColumnChart: function (container, data, title, subtitle, yAxisTitle, height) {
            Highcharts.chart(container, {
                chart: {
                    type: 'column',
                    height: height,
                },
                title: {
                    text: null
                },
                subtitle: {
                    text: subtitle
                },
                xAxis: {
                    type: 'category',
                },
                yAxis: {
                    title: {
                        text: 'Puan'
                    },
                    min: 0,
                    max: 100
                },
                tooltip: {
                    pointFormat: 'Ortalama: <b>{point.y:.1f} Puan</b>'
                },
                legend: {
                    enabled: false
                },
                plotOptions: {
                    series: {
                        borderWidth: 0,
                        dataLabels: {
                            enabled: true,
                            format: '{point.y:.1f}'
                        }
                    }
                },
                series: data
            });
        },
        createPieChart: function (container, data, title, subtitle) {
            Highcharts.chart(container, {
                chart: {
                    type: 'pie',
                },
                title: {
                    text: null
                },
                subtitle: {
                    text: subtitle
                },
                plotOptions: {
                    pie: {
                        shadow: false,
                        center: ['50%', '50%'],
                        dataLabels: {
                            enabled: true,
                            format: '<b>{point.name}</b>: {point.percentage:.1f} %',
                            style: {
                                color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                            }
                        }
                    }
                },
                tooltip: {
                    valueSuffix: '%'
                },
                series: data,
            });
        },

        onChangeForm: function (e) {
            var value = e.sender.value();

            $('#taskandquestion').addClass("hide");

            var multi = $("#GroupNames").data("kendoMultiSelect");
            var taskSelect = $("#TaskIds").data("kendoMultiSelect");
            var questSelect = $('#Questions').data("kendoMultiSelect");

            questSelect.value([]);
            multi.value([]);

            taskSelect.dataSource.data([]);
            multi.dataSource.data([]);
            questSelect.dataSource.data([]);

            if (value.length == 1 && !e.clickAll && !e.removeAll) {
                $('#taskandquestion').removeClass("hide");

                var multiData = multi.dataSource.data();
                taskSelect.dataSource.read();

                GetJsonDataFromUrl('/PDS/VWPDS_FormResult/GetGroupNamesByFormId', { formId: value }, function (resp) {

                    $.each(resp, function (i, item) {
                        multiData.push({ text: item.Key, value: i });
                    })
                    multi.dataSource.data(multiData);
                })
            }
        },
        load: function () {
            Highcharts.setOptions({
                global: {
                    useUTC: false
                },
                lang: {
                    shortMonths: ['Ocak', 'Şub', 'Mart', 'Nis', 'May', 'Haz', 'Tem', 'Ağu', 'Eyl', 'Ekim', 'Kas', 'Ara'],
                    months: ['Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran', 'Temmuz', 'Ağustos', 'Eylül', 'Ekim', 'Kasım', 'Aralık'],
                    weekdays: ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi'],
                    downloadJPEG: 'JPEG Olarak Kaydet',
                    downloadPNG: 'PNG Olarak Kaydet',
                    downloadSVG: 'SVG Olarak Kaydet',
                    downloadPDF: 'PDF Olarak Kaydet',
                    printChart: 'Yazdır',
                    resetZoom: 'Zoom Kapat',
                    decimalPoint: ',',
                    thousandsSep: '.',
                },
                tooltip: {
                    valueDecimals: 2
                },
                credits: {
                    enabled: false
                },
            });
        },
    }

    $(document)
        .on("ready", function () {

            $('#filterButton').trigger("click");
            $('#EvaluatorIds').parent(".k-multiselect").find(".k-i-all").trigger("click");
            $('#EvaluatedIds').parent(".k-multiselect").find(".k-i-all").trigger("click");

            page.load();

        })

        .on("change", '[name="radioName"]', function (e) {
            var val = $('[name="radioName"]:checked').val();
            var start = $('#StartDate').data("kendoDatePicker");
            var end = $('#EndDate').data("kendoDatePicker");

            start.enable(false);
            end.enable(false);

            if (val == "0") {
                start.enable(true);
                end.enable(true);
            }
        })
        .on("click", '#formDiv .k-i-all', function (e) {
            e.preventDefault();
            $('#FormIds').data("kendoMultiSelect").trigger("change", { clickAll: 'clickAll' });
        })
        .on("click", '#formDiv .k-clear-value', function (e) {
            e.preventDefault();
            $('#FormIds').data("kendoMultiSelect").trigger("change", { removeAll: 'removeAll' });
        })
        .on("change", '[name="filterType"]', function (e) {
            var _this = $(this);
            var val = _this.val();

            $('#questionSelection').addClass("hide");
            $('#groupSelection').addClass("hide");
            $('#Questions').data("kendoMultiSelect").value([]);
            $('#GroupNames').data("kendoMultiSelect").value([]);

            if (val == 'question') {
                $('#questionSelection').removeClass("hide");
            }
            else {
                $('#groupSelection').removeClass("hide");
            }

        });


</script>

@using (Html.BeginForm("PerformanceEvaluateReport", "VWPDS_FormResult", FormMethod.Post, new Dictionary<string, object>() {
    { "class", "form-horizontal" },
    { "role", "form" },
    { "data-selector", "modalContainer" },
    { "data-formType", "Ajax" },
    { "id", "reportForm"}
}))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)


    <fieldset id="filterGroup">
        <legend>Filtre</legend>

        <div id="filterBy">

            <div class="form-group">
                <div class="col-md-6">
                    <group class="inline-radio">
                        <div><input name="Period" value="1" type="radio"><label>Bu Yıl</label></div>
                        <div><input name="Period" checked value="180" type="radio"><label>Son 6 Aylık</label></div>
                        <div><input name="Period" value="30" type="radio"><label>Son 1 Aylık</label></div>
                        <div><input name="Period" value="0" type="radio"><label>Tarih Seç</label></div>
                    </group>
                </div>
                <div class="col-md-3">
                    @(Html.Akilli().DatePicker("StartDate").
                                Placeholder("Başlangıç Tarihi").Enable(false).
                                Value(new DateTime(DateTime.Now.Year, 1, 1)).
                                Max(DateTime.Now).
                                MaxDateElement("EndDate").
                                Validate(Validations.Required)
                    )
                </div>
                <div class="col-md-3">
                    @(Html.Akilli().DatePicker("EndDate").
                                Placeholder("Bitiş Tarihi").Enable(false).
                                Value(DateTime.Now).
                                Max(DateTime.Now).
                                MinDateElement("StartDate").
                                Validate(Validations.Required)
                    )
                </div>
            </div>

            <div class="form-group">

                <div class="col-md-2">
                    <label class="control-label label-md">Form İsmi</label>
                </div>
                <div class="col-md-4" id="formDiv">
                    @(Html.Akilli()
                            .MultiSelect("FormIds")
                            .DataTextField("formName")
                            .DataValueField("id")
                            .Action(b => b.Action("DataSourceDropDown", "VWPDS_EvaluateForm", new { area = "PDS" }))
                            .Sort(x => x.Add("formName").Ascending())
                            .Events(e =>
                            {
                                e.Change("page.onChangeForm");
                            })
                            .Execute()
                    )
                </div>

                <div class="col-md-2">
                    <label class="control-label label-md">Değerlendiren Personel</label>
                </div>
                <div class="col-md-4">
                    @(
                    Html.Akilli()
                    .MultiSelect("EvaluatorIds")
                    .DataValueField("id")
                    .DataTextField("FullName")
                   .ItemTemplate("#=TemplateEngine('userTemplate',data)#")
                   .Action(b => b.Action("DataSourceDropDown", "VWSH_User", new { area = "SH" }))
                   .Filter<VWSH_User>(a=>a.type == (int)(EnumSH_UserType.MyPerson) && a.IsWorking == true)
                    .Sort(x => x.Add("FullName").Ascending())
                    .Filter("contains")
                    .Events(e =>
                    {
                        e.Change("page.onChangeEvaluator");
                    })
                    .Execute("id")
                    )
                </div>

            </div>

            <div class="form-group">
                <div class="col-md-2">
                    <label class="control-label label-md">Değerlendirilen Personel</label>
                </div>
                <div class="col-md-4">
                    @(
                    Html.Akilli()
                    .MultiSelect("EvaluatedIds")
                    .DataValueField("id")
                    .DataTextField("FullName")
                   .ItemTemplate("#=TemplateEngine('userTemplate',data)#")
                   .Action(b => b.Action("DataSourceDropDown", "VWSH_User", new { area = "SH" }))
                   .Filter<VWSH_User>(a=>a.type == (int)(EnumSH_UserType.MyPerson) && a.IsWorking == true)
                    .Sort(x => x.Add("FullName").Ascending())
                    .Filter("contains")
                    .Events(e =>
                    {
                        //e.Change("page.onChangeEvaluator");
                    })
                    .Execute("id")
                    )
                </div>
            </div>

            <div class="hide" id="taskandquestion">

                <div class="form-group">

                    <div class="col-md-3">
                        <div class="radio">
                            <label>
                                <input class="k-radio k-radio" name="filterType" id="groupRadio" type="radio" value="group" checked>
                                <label class="k-radio-label" for="groupRadio"></label> Gruba Göre
                            </label>
                            <label>
                                <input class="k-radio k-radio" name="filterType" id="questionRadio" type="radio" value="question">
                                <label class="k-radio-label" for="questionRadio"></label> Soruya Göre
                            </label>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div id="questionSelection" class="hide">

                            @(Html.Akilli().MultiSelect("Questions")
                                .DataValueField("question")
                                .Placeholder("Lütfen Soru Seçiniz.")
                                .DataTextField("question")
                                .Action(b => b.Action("DataSourceDropDown", "VWPDS_QuestionForm", new { area = "PDS" }))
                                .Filter("contains")
                                .CascadeFrom("FormIds")
                                .CascadeFromField("evaluateFormId")
                                .Execute("id")
                            )

                        </div>
                        <div id="groupSelection">

                            @(Html.Akilli().MultiSelect("GroupNames")
                                .DataTextField("text")
                                .DataValueField("text")
                                .TagMode(TagMode.Multiple)
                                .Placeholder("Lütfen Grup Seçiniz."))

                        </div>
                    </div>

                    <div class="col-md-2">
                        <label class="control-label label-md">Görev Seçimi</label>
                    </div>
                    <div class="col-md-4">
                        @(
                        Html.Akilli().MultiSelect("TaskIds")
                        .DataValueField("id")
                        .DataTextField("taskName")
                        .Action(b => b.Action("DataSourceDropDown", "VWPDS_FormPermitTask", new { area = "PDS" }))
                        .Filter("contains")
                        .CascadeFrom("FormIds")
                        .CascadeFromField("evaluateFormId")
                        .Execute("id")
                        )
                    </div>
                </div>
            </div>
        </div>


        <div class="clearfix">
            <button class="btn btn-md btn-success pull-right" id="filterButton" type="button" onclick="page.filter(this)">Filtreyi Uygula</button>
        </div>
    </fieldset>

    <div class="row m-b-xs hide" id="graphs">
        <div class="col-md-6">
            <fieldset>
                <legend>En Başarılı Personeller</legend>
                <div id="mostSuccessPersonels" data-highcharts-chart="3">
                </div>
            </fieldset>
        </div>
        <div class="col-md-6">
            <fieldset>
                <legend>En Çok Değerlendirme Yapan Personeller</legend>
                <div id="mostEvaluatorPersonels" data-highcharts-chart="3">
                </div>
            </fieldset>
        </div>
        <div class="col-md-6">
            <fieldset>
                <legend>En Çok Değerlendirilen Personeller</legend>
                <div id="mostEvaluationPersonels" data-highcharts-chart="3">
                </div>
            </fieldset>
        </div>
        <div class="col-md-6">
            <fieldset>
                <legend>En Çok Değerlendirilen Formlar</legend>
                <div id="mostEvaluationForm" data-highcharts-chart="3">
                </div>
            </fieldset>
        </div>
    </div>
}
