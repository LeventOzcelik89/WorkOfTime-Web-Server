@model Infoline.WorkOfTime.BusinessData.VWPRD_Inventory
@{
    ViewBag.Title = "Bakım Envanteri Ekle";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style type="text/css" data-selector="modalContainer">
    .tagify {
        max-height: 131px;
        overflow: auto;
    }
</style>

<script type="text/javascript" data-selector="modalContainer">
    $(document)
        .on('keydown', function (c) {
            if (c.ctrlKey == true) {
                navigator.clipboard.readText()
                .then(text => {
                    var textArea = $('<textarea/>').val(text);
                    navigator.clipboard.writeText(textArea.val());
                })
                .catch(err => {
                    // MesajWarning("Toplu serinumarası işlemleri için lütfen izin veriniz.","Bilgilendirme")
                });
            }
        })
        .on('before:submit', 'form', function (e) {
            $('[data-item="serialCode"]').each(function (c) {
                var data = $(this).data("tagify");
                if (data && data.value) {
                    $(this).val(data.value.map(a => a.value).join(","));
                }
            });
        });
    var events = {
        typeLoad: function () {
            var serialCodes = $('[data-item="serialCode"]');
            if (serialCodes.data('tagify')) {
                serialCodes.data('tagify').destroy();
                serialCodes.removeData("tagify");
            }
            serialCodes.tagify({
                placeholder: "Seri Numarasını yazın ve Enter'a basın",
                maxTags: 999,
                dropdown: {
                    maxItems: 999,           // <- mixumum allowed rendered suggestions
                    //classname: "tags-look", // <- custom classname for this dropdown, so it could be targeted
                    enabled: 0,             // <- show suggestions on focus
                    closeOnSelect: false    // <- do not hide the suggestions dropdown once an item has been selected
                }
            });
        }
    }



</script>

@using (Html.BeginForm("InsertMaintance", "VWPRD_Inventory", FormMethod.Post, new Dictionary<string, object>() {
    { "class", "form-horizontal" },
    { "role", "form" },
    { "id", "maintenanceInventoryForm"},
    { "data-selector", "modalContainer" },
    { "data-formType", "Ajax" }
}))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.id)
    @Html.HiddenFor(model => model.firstActionType)
    @Html.HiddenFor(model => model.lastActionType)

    if (Model.productId.HasValue)
    {
        @Html.HiddenFor(c => c.productId)
    }
    else
    {
        <div class="form-group">
            <div class="col-md-4">
                <label class="control-label label-md req" for="productId">Ürün</label>
            </div>
            <div class="col-md-8">
                @(
                    Html.Akilli()
                    .DropDownListFor(model => model.productId)
                    .OptionLabel("Lütfen Ürün Seçiniz..")
                    .Template("#=TemplateEngine('productTemplate',data)#")
                    .DataTextField("name")
                    .DataValueField("id")
                    .Action(b => b.Action("DataSourceDropDown", "VWPRD_Product", new { area = "PRD" }))
                    .Filter<PRD_Product>(a => a.stockType == (short)EnumPRD_ProductStockType.SeriNoluTakip)
                    .BasicInsert(Url.Action("Insert", "VWPRD_Product", new { area = "PRD", stockType = (short)EnumPRD_ProductStockType.SeriNoluTakip, type = (int)EnumPRD_ProductType.Diger }), "name", true)
                    .Sort(x => x.Add("name").Ascending())
                    .Validate(Validations.Required)
                    .Events(a => a.DataBound("events.typeLoad"))
                    .Execute()
                )
            </div>
        </div>
    }


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md req" for="serialcode">Envanter Seri Numara(ları)</label>
        </div>
        <div class="col-md-8" id="selected">
            @Html.TextBox("serialCode", Model.serialcode,
            new Dictionary<string, object> {
                { "data-role","tagify"},
                //{ "readonly", "readonly" },
                { "data-item", "serialCode" },
                { "data-value",Model.serialcode}
            })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md req" for="firstActionDataCompanyId">Envanterin Sahibi Olan İşletme</label>
        </div>
        <div class="col-md-8">
            @(
                Html.Akilli()
                .DropDownListFor(model => model.firstActionDataCompanyId)
                .OptionLabel("Lütfen Seçim Yapınız..")
                .Template("#=TemplateEngine('companyTemplate',data)#")
                .ValueTemplate("#=name# (#=code#)")
                .DataTextField("searchField")
                .DataValueField("id")
                .Action(b => b.Action("DataSourceDropDown", "VWCMP_Company", new { area = "CMP" }))
                .BasicInsert(Url.Action("Insert", "VWCMP_Company", new { area = "CMP" }), "name", true)
                .Sort(x => x.Add("type").Ascending())
                .Validate(Validations.Required)
                .Execute()
            )
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md req" for="firstActionDataId">Envanterin Bulunduğu Şube/Depo</label>
        </div>
        <div class="col-md-8">
            @(
                Html.Akilli()
                .DropDownListFor(model => model.firstActionDataId)
                .OptionLabel("Lütfen Seçim Yapınız..")
                .DataTextField("searchField")
                .DataValueField("id")
                .Template("#=TemplateEngine('storageTemplate',data)#")
                .ValueTemplate("#=companyId_Title# | #=name# (#=code#)")
                .Action(b => b.Action("DataSourceDropDown", "VWCMP_Storage", new { area = "CMP" }))
                .Sort(x => x.Add("fullName").Ascending())
                .BasicInsert(Url.Action("Insert", "VWCMP_Storage", new { area = "CMP" }), "name", true)
                .Validate(Validations.Required)
                .Execute()
            )
        </div>
    </div>

    <div class="buttons">
        <button class="btn btn-md btn-danger pull-left" data-task="modalClose">Geri</button>
        <button class="btn btn-md btn-success pull-right" type="submit">Kaydet</button>
    </div>
}
