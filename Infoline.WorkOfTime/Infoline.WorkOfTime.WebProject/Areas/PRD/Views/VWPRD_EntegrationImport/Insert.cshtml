@model Infoline.WorkOfTime.BusinessData.VWPRD_EntegrationImport
@{
    ViewBag.Title = "Kayıt Ekleme";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using(Html.BeginForm("Insert", "VWPRD_EntegrationImport", FormMethod.Post, new Dictionary<string, object>() {  
    { "class", "form-horizontal" },
    { "role", "form" },
    { "data-selector", "modalContainer" },
    { "data-formType", "Ajax" }
}))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.id)


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="customerName">customerName</label>
        </div>
        <div class="col-md-8">
            @Html.TextBoxFor(model => model.customerName, new Dictionary<string, object>() 
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen customerName Girin.."},
            }).Validate(Validations.Required)
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="customerCode">customerCode</label>
        </div>
        <div class="col-md-8">
            @Html.TextBoxFor(model => model.customerCode, new Dictionary<string, object>() 
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen customerCode Girin.."},
            }).Validate(Validations.Required)
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="productModel">productModel</label>
        </div>
        <div class="col-md-8">
            @Html.TextBoxFor(model => model.productModel, new Dictionary<string, object>() 
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen productModel Girin.."},
            }).Validate(Validations.Required)
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="distributorName">distributorName</label>
        </div>
        <div class="col-md-8">
            @Html.TextBoxFor(model => model.distributorName, new Dictionary<string, object>() 
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen distributorName Girin.."},
            }).Validate(Validations.Required)
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="distributorConfirmationDate">distributorConfirmationDate</label>
        </div>
        <div class="col-md-8">
          @(Html.Kendo().DatePickerFor(model => model.distributorConfirmationDate).HtmlAttributes(new Dictionary<string, object>() 
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen distributorConfirmationDate Girin.."},
            })
            .Format(Extensions.DateFormatShort())
            .Validate(Validations.Required)
            )
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="imei">imei</label>
        </div>
        <div class="col-md-8">
            @Html.TextBoxFor(model => model.imei, new Dictionary<string, object>() 
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen imei Girin.."},
            }).Validate(Validations.Required)
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="customerType">customerType</label>
        </div>
        <div class="col-md-8">
            @Html.TextBoxFor(model => model.customerType, new Dictionary<string, object>() 
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen customerType Girin.."},
            }).Validate(Validations.Required)
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="contractStartDate">contractStartDate</label>
        </div>
        <div class="col-md-8">
          @(Html.Kendo().DatePickerFor(model => model.contractStartDate).HtmlAttributes(new Dictionary<string, object>() 
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen contractStartDate Girin.."},
            })
            .Format(Extensions.DateFormatShort())
            .Validate(Validations.Required)
            )
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="contractEndDate">contractEndDate</label>
        </div>
        <div class="col-md-8">
          @(Html.Kendo().DatePickerFor(model => model.contractEndDate).HtmlAttributes(new Dictionary<string, object>() 
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen contractEndDate Girin.."},
            })
            .Format(Extensions.DateFormatShort())
            .Validate(Validations.Required)
            )
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="contractCode">contractCode</label>
        </div>
        <div class="col-md-8">
            @Html.TextBoxFor(model => model.contractCode, new Dictionary<string, object>() 
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen contractCode Girin.."},
            }).Validate(Validations.Required)
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="productGroup">productGroup</label>
        </div>
        <div class="col-md-8">
            @Html.TextBoxFor(model => model.productGroup, new Dictionary<string, object>() 
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen productGroup Girin.."},
            }).Validate(Validations.Required)
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="sellingChannelType">sellingChannelType</label>
        </div>
        <div class="col-md-8">
            @Html.TextBoxFor(model => model.sellingChannelType, new Dictionary<string, object>() 
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen sellingChannelType Girin.."},
            }).Validate(Validations.Required)
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="distributorCode">distributorCode</label>
        </div>
        <div class="col-md-8">
            @Html.TextBoxFor(model => model.distributorCode, new Dictionary<string, object>() 
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen distributorCode Girin.."},
            }).Validate(Validations.Required)
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="sellingQuantity">sellingQuantity</label>
        </div>
        <div class="col-md-8">
            @Html.TextBoxFor(model => model.sellingQuantity, new Dictionary<string, object>() 
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen sellingQuantity Girin.."},
            }).Validate(Validations.Required)
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="month">month</label>
        </div>
        <div class="col-md-8">
            @Html.TextBoxFor(model => model.month, new Dictionary<string, object>() 
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen month Girin.."},
            }).Validate(Validations.Required)
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="year">year</label>
        </div>
        <div class="col-md-8">
            @Html.TextBoxFor(model => model.year, new Dictionary<string, object>() 
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen year Girin.."},
            }).Validate(Validations.Required)
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="createdby_Title">createdby_Title</label>
        </div>
        <div class="col-md-8">
            @Html.TextBoxFor(model => model.createdby_Title, new Dictionary<string, object>() 
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen createdby_Title Girin.."},
            }).Validate(Validations.Required)
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="changedby_Title">changedby_Title</label>
        </div>
        <div class="col-md-8">
            @Html.TextBoxFor(model => model.changedby_Title, new Dictionary<string, object>() 
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen changedby_Title Girin.."},
            }).Validate(Validations.Required)
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="companyId_Title">companyId_Title</label>
        </div>
        <div class="col-md-8">
          @(Html.Kendo().DropDownListFor(model => model.companyId_Title).HtmlAttributes(new Dictionary<string, object>() 
            {
                {"style", "width:100%"},
                {"class", "form-control"},
            })
            .OptionLabel("Lütfen companyId_Title seçin")
            .Filter(FilterType.Contains)
            .DataTextField("Name")
            .DataValueField("Id")
            .DataSource(s =>
            {
                 s.Read(r =>
                 {
                     r.Action("", "General", new { area = string.Empty }); //General controllerının içine datasının oldugu metodu yaz ilk parametreye method ismini ver
                 });
             })
             .Validate(Validations.Required)
             )
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="inventoryId_Title">inventoryId_Title</label>
        </div>
        <div class="col-md-8">
          @(Html.Kendo().DropDownListFor(model => model.inventoryId_Title).HtmlAttributes(new Dictionary<string, object>() 
            {
                {"style", "width:100%"},
                {"class", "form-control"},
            })
            .OptionLabel("Lütfen inventoryId_Title seçin")
            .Filter(FilterType.Contains)
            .DataTextField("Name")
            .DataValueField("Id")
            .DataSource(s =>
            {
                 s.Read(r =>
                 {
                     r.Action("", "General", new { area = string.Empty }); //General controllerının içine datasının oldugu metodu yaz ilk parametreye method ismini ver
                 });
             })
             .Validate(Validations.Required)
             )
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="distributor_Title">distributor_Title</label>
        </div>
        <div class="col-md-8">
          @(Html.Kendo().DropDownListFor(model => model.distributor_Title).HtmlAttributes(new Dictionary<string, object>() 
            {
                {"style", "width:100%"},
                {"class", "form-control"},
            })
            .OptionLabel("Lütfen distributor_Title seçin")
            .Filter(FilterType.Contains)
            .DataTextField("Name")
            .DataValueField("Id")
            .DataSource(s =>
            {
                 s.Read(r =>
                 {
                     r.Action("", "General", new { area = string.Empty }); //General controllerının içine datasının oldugu metodu yaz ilk parametreye method ismini ver
                 });
             })
             .Validate(Validations.Required)
             )
        </div>
    </div>


    <div class="buttons">
        <button class="btn btn-md btn-danger pull-left" data-task="modalClose">Geri</button>
        <button class="btn btn-md btn-success pull-right" type="submit">Kaydet</button>
    </div>

}
