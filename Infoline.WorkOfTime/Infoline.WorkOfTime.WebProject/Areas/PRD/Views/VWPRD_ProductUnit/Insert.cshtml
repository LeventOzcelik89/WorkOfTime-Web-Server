@model Infoline.WorkOfTime.BusinessAccess.VWPRD_ProductUnitModel
@{
	ViewBag.Title = "Ürüne Birim Tanımla";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript" data-selector="modalContainer">
	function onChangeUnit(e) {
		var customer = e.sender.dataItem();
		if (customer.id != "") {
			$("#alternativeUnitId").html(customer.name)
		}
		else {
			$("#alternativeUnitId").html(null)
		}
	}
</script>

@using (Html.BeginForm("Insert", "VWPRD_ProductUnit", FormMethod.Post, new Dictionary<string, object>() {
	{ "class", "form-horizontal" },
	{ "role", "form" },
	{ "data-selector", "modalContainer" },
	{ "data-formType", "Ajax" }
}))
{
	@Html.AntiForgeryToken()
	@Html.HiddenFor(model => model.id)
	@Html.HiddenFor(model => model.isDefault)


	if (Model.productId.HasValue)
	{
		@Html.HiddenFor(model => model.productId)
	}
	else
	{
		<div class="form-group">
			<div class="col-md-4">
				<label class="control-label label-md req" for="productId">Ürün</label>
			</div>
			<div class="col-md-8">
				@(
                  Html.Akilli()
                  .DropDownListFor(model => model.productId)
                  .OptionLabel("Lütfen Ürün seçiniz..")
                  .DataTextField("name")
                  .DataValueField("id")
                  .Action(b => b.Action("DataSourceDropDown", "VWPRD_Product", new { area = "PRD" }))
                  .Template("#=TemplateEngine('productTemplate',data)#")
                  .Sort(x => x.Add("name").Ascending())
                    .Filter<PRD_Product>(x => x.stockType == (int)EnumPRD_ProductStockType.SeriNoluTakip)
                  .Validate(Validations.Required)
                  .Execute()
                )
			</div>
		</div>
	}


	<div class="form-group">
		<div class="col-md-4">
			<label class="control-label label-md req" for="companyId">Birim</label>
		</div>
		<div class="col-md-8">
			@(
		Html.Akilli()
		.DropDownListFor(model => model.unitId)
		.OptionLabel("Lütfen Birim seçiniz..")
		.DataValueField("id")
		.DataTextField("name")
		.Events(a=>a.Change("onChangeUnit"))
		.BasicInsert(Url.Action("Insert", "UT_Unit", new { area = "UT" }), "name", false)
		.Action(b => b.Action("DataSourceDropDown", "UT_Unit", new { area = "UT" }))
		.Sort(x => x.Add("name").Ascending())
		.Validate(Validations.Required)
		.Execute()
            )
		</div>

	</div>


	<div class="form-group">
		<div class="col-md-4">
			<label class="control-label label-md req" for="quantity">Miktar</label>
		</div>
		<div class="col-md-8">
			<div class="input-group">
				<span class="input-group-addon" id="defaultUnitId">@Model.productUnit.quantity  @Model.productUnit.unitId_Title</span>
				@(
					Html.Akilli()
					.NumericTextBoxFor(a => a.quantity)
					.Min(-10000000)
					)

				<span class="input-group-addon" id="alternativeUnitId"></span>
			</div>
		</div>
	</div>

	<div class="buttons">
		<button class="btn btn-md btn-danger pull-left" data-task="modalClose">Geri</button>
		<button class="btn btn-md btn-success pull-right" type="submit">Kaydet</button>
	</div>

}
