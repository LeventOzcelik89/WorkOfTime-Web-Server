@model VMPRD_ProductionModel
@{
    ViewBag.Title = "Üretim Emrini Güncelle";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var userStatus = (PageSecurity)Session["userStatus"];
}
<link href="~/Content/Custom/css/PRD_transaction.css" rel="stylesheet" data-selector="modalContainer" />


<script data-selector="modalContainer" type="text/javascript">
    page = {
        events: {
            onChangeProductionSchema: function (e) {
                var item = e.sender.dataItem();
                if (item.id != "") {
                    $("#productionSchemaIdButton").attr("href", "/PRD/VWPRD_ProductionSchema/Detail?id=" + item.id)
                    $("#productionSchemaIdButton").removeClass("hide");
                }
                else {
                    $("#productionSchemaIdButton").addClass("hide");
                }

                var productionSchema = e.sender.dataItem();
                if ((productionSchema != null || productionSchema != undefined) && productionSchema.name != null) {
                    $("#schemaTitle").val(productionSchema.name);
                }
            },
            onChangeProduct: function (e) {

                var product = e.sender.dataItem();
                $("#productionSchemaId").attr("data-inserturl", "/PRD/VWPRD_ProductionSchema/Insert?productId=" + product.id)
                var companyDropDown = $("#centerCompanyId").data("kendoDropDownList");
                var centercompanyDropDown = $("#centerStorageId").data("kendoDropDownList");
               

                if (e.sender.value() != "") {

                    companyDropDown.enable(true);
                    centercompanyDropDown.enable(true);
                }

                else {
                    companyDropDown.enable(false);
                    centercompanyDropDown.enable(false);
                }



                if (product == null || product.id == null || product.id == "") {
                    $("#productDetailButton").addClass("hide")
                    $("#stagesId").hide();
                    return;
                }
                if (product != null && product.id != null && product.id != "") {

                    $("#quantity").data("handler").enable(true);
                    var detail = $("#productDetailButton");
                    $(detail).attr("href", "/PRD/VWPRD_Product/Detail?id=" + product.id);
                    detail.removeClass("hide");
                }
                else {
                    $("#quantity").data("handler").enable(false);
                    $("#productDetailButton").addClass("hide")
                }
            },
            
        }
      

    }
</script>

@using (Html.BeginForm("Insert", "VWPRD_Production", FormMethod.Post, new Dictionary<string, object>() {
    { "class", "form-horizontal" },
    { "role", "form" },
    { "data-selector", "modalContainer" },
    { "data-formType", "Ajax" },
    { "id","VWPRD_ProductionInsertForm" }
}))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.id)
    @Html.HiddenFor(model => model.code)
    @Html.HiddenFor(model => model.schemaTitle)
    @Html.Hidden("materialString")
    <fieldset>
        <legend>ÜRETİM DETAYLARI</legend>
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">
                    <div class="col-md-5">
                        <label class="control-label label-md" for="code">Üretim Emir Kodu</label>
                    </div>
                    <div class="col-md-7">
                        @Html.TextBoxFor(a => a.code, new Dictionary<string, object>()
                                        {
                                            {"class", "form-control"},
                                            {"placeholder", "Lütfen Üretim Emri Kodu Giriniz." },
                                            {"readonly",true}
                                        }).Validate(Validations.TextTurkceSpace09(false, 0, 140))
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-5">
                        <label class="control-label label-md" for="productionOrderDate">Üretim Emir Tarihi</label>
                    </div>
                    <div class="col-md-7">
                        @(
        Html.Akilli().
        DateTimePickerFor(model => model.productionOrderDate).
        Format(Extensions.DateFormatFull())
        

            )
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-5">
                        <label class="control-label label-md" for="scheduledProductionDate">Üretim Başlama Tarihi</label>
                    </div>
                    <div class="col-md-7">
                        @(
        Html.Akilli().
        DateTimePickerFor(model => model.scheduledProductionDate).
        Format(Extensions.DateFormatFull())
       
            )
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-5">
                        <label class="control-label label-md" for="lastProductionDate">Hedef Bitiş Tarihi</label>
                    </div>
                    <div class="col-md-7">
                        @(
			Html.Akilli().
			DateTimePickerFor(model => model.lastProductionDate).
			Placeholder("Hedef Bitiş Tarihi").
			Format(Extensions.DateFormatFull())
			
            .MinDateElement("scheduledProductionDate")
				)
                    </div>
                </div>
                <div class="form-group noselector">
                    <div class="col-md-5">
                        <label class="control-label label-md req" id="productIds">Üretilecek Ürün</label>
                    </div>
                    <div class="col-md-7">
                        <div class="input-group">

                            @(Html.Akilli()
        .DropDownListFor(model=>model.productId)
        .OptionLabel("Lütfen Nihai Ürün Seçiniz..")
        .DataTextField("fullName")
        .DataValueField("id")
        .Action(b => b.Action("DataSourceDropDown", "VWPRD_Product", new { area = "PRD" }))
        .Sort(x => x.Add("fullName").Ascending())
        .Events(a => { a.Change("page.events.onChangeProduct"); a.DataBound("page.events.onChangeProduct"); })
        //.Template("#=TemplateEngine('inventoryTemplate',data)#")
        .Validate(Validations.Required)
        .Execute()
        .Readonly(true)
            )
                            <a class="btn m-r-sm btn btn-primary input-group-addon hide" data-original-title="Ürün Detayı" id="productDetailButton" target="_blank" href="/PRD/VWPRD_ProductionSchema/Detail"> <i class="fa fa-link"></i></a>

                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-5">
                        <label class="control-label label-md req" for="quantity">Üretilecek Adet</label>
                    </div>
                    <div class="col-md-7">
                        @(
                    Html.Akilli()
                    .NumericTextBoxFor(a => a.quantity)
                    .Min(0)
                    .Max(int.MaxValue)
					.Step(1)
					.Enable(false)
                    .Format("N0").Validate(Validations.Required)
                )
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-5">
                        <label class="control-label label-md" for="description">Üretim Açıklaması</label>
                    </div>
                    <div class="col-md-7">
                        @Html.TextAreaFor(a => a.description, new Dictionary<string, object>()
                        {
                            {"class", "form-control"},
                            {"placeholder", "Lütfen Açıklama Giriniz." }
                        }).Validate(Validations.TextTurkceSpace09(false, 0, 1000))
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="form-group">
                    <div class="col-md-5">
                        <label class="control-label label-md req" for="centerCompanyId">Merkez İşletme</label>
                    </div>
                    <div class="col-md-7">
                        @(
            Html.Akilli()
                .DropDownListFor(model => model.centerCompanyId)
                .OptionLabel("Lütfen Malzemelerin Alınacağı İşletmeyi Seçiniz..")
                .DataValueField("id")
                .DataTextField("fullName")
                .Template("#=TemplateEngine('companyTemplate',data)#")
                .Action(b => b.Action("DataSourceDropDown", "VWCMP_Company", new { area = "CMP" }))
                .Sort(x => x.Add("fullName").Ascending())
                .Validate(Validations.Required)
                .Execute()
                .Enable(false)


            )
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-5">
                        <label class="control-label label-md req" for="centerStorageId">Merkez Depo</label>
                        <i data-toggle="tooltip" data-placement="top" title="Üretim için gerekli malzemelerin alınacağı depodur" class="fa fa-info-circle"></i>
                    </div>
                    <div class="col-md-7">
                        @(
            Html.Akilli()
            .DropDownListFor(model => model.centerStorageId)
            .OptionLabel("Lütfen Malzemelerin Alınacağı Depoyu Seçiniz..")
            .DataTextField("fullName")
            .DataValueField("id")
            .Template("#=TemplateEngine('storageTemplate',data)#")
            .ValueTemplate("#=fullName#)")
            .Action(b => b.Action("DataSourceDropDown", "VWCMP_Storage", new { area = "CMP" }))
            .CascadeFrom("centerCompanyId")
            .CascadeFromField("companyId")
            .Sort(x => x.Add("fullName").Ascending())
            .Validate(Validations.Required)
           
            .Execute()
                )
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-5">
                        <label class="control-label label-md req" for="productionSchemaId">Üretilecek İşletme</label>
                    </div>
                    <div class="col-md-7">
                        @(
		Html.Akilli()
		.DropDownListFor(model => model.productionCompanyId)
		.OptionLabel("Lütfen Üretim İşletmesini Seçiniz..")
		.DataValueField("id")
		.DataTextField("fullName")
		.Template("#=TemplateEngine('companyTemplate',data)#")
		.Action(b => b.Action("DataSourceDropDown", "VWCMP_Company", new { area = "CMP" }))
		//.Events(a => { a.Change("onChangeCustomer"); a.DataBound("onChangeCustomer"); })
		.Sort(x => x.Add("fullName").Ascending())
		.Validate(Validations.Required)
		.Execute()
            )
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-5">
                        <label class="control-label label-md req" for="productionStorageId">Üretilecek Depo</label>
                        <i data-toggle="tooltip" data-placement="top" title="Üretilen ürünlerin girişinin yapılacağı depodur." class="fa fa-info-circle"></i>
                    </div>
                    <div class="col-md-7">
                        @(
			Html.Akilli()
			.DropDownListFor(model => model.productionStorageId)
			.OptionLabel("Lütfen Üretim Deposu Seçimi Yapınız..")
			.DataTextField("fullName")
			.DataValueField("id")
			.Template("#=TemplateEngine('storageTemplate',data)#")
			.ValueTemplate("#=fullName#)")
			.Action(b => b.Action("DataSourceDropDown", "VWCMP_Storage", new { area = "CMP" }))
			.CascadeFrom("productionCompanyId")
			.CascadeFromField("companyId")
			.Sort(x => x.Add("fullName").Ascending())
			.Validate(Validations.Required)
			.Execute()
                )
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-5">
                        <label class="control-label label-md req" for="productionSchemaId">Üretim Şeması</label>
                    </div>
                    <div class="col-md-7">
                        <div class="input-group" >
                            <div style=" pointer-events: none; cursor: default;">
                                @(
        Html.Akilli()
        .DropDownListFor(model => model.productionSchemaId)
        .OptionLabel("Lütfen Üretim Şeması Seçiniz..")
        .DataValueField("id")
        .DataTextField("name")
        .Action(b => b.Action("DataSourceDropDown", "VWPRD_ProductionSchema", new { area = "PRD" }))
        .Events(a => { a.Change("page.events.onChangeProductionSchema"); a.DataBound("page.events.onChangeProductionSchema"); })
        .Sort(x => x.Add("name").Ascending())
        .Validate(Validations.Required)
        .Readonly(true)
        .CascadeFrom("productId")
        .CascadeFromField("productId")
        .BasicInsert(Url.Action("Insert", "VWPRD_ProductionSchema", new { area = "PRD" }), "name",true)
        .Execute()

            )
                            </div>
                  
                            <a class="btn m-r-sm btn btn-primary input-group-addon hide" data-original-title="Ürün Şeması Detayı" id="productionSchemaIdButton" target="_blank" href="/PRD/VWPRD_ProductionSchema/Detail"> <i class="fa fa-link"></i></a>
                        </div>

                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-5">
                        <label class="control-label label-md" for="assignableUsers">Üretimde Görevli Personeller</label>
                    </div>
                    <div class="col-md-7">
                        @(
                      Html.Akilli()
                     .MultiSelectFor(a => a.assignableUsers)
                     .Placeholder("Lütfen Görevli Personel Seçiniz..")
                     .DataValueField("id")
		             .Filter<VWSH_User>(x=>x.RoleIds.Contains(SHRoles.UretimPersonel))
                     .DataTextField("FullName")
                     .ItemTemplate("#=TemplateEngine('userTemplate',data)#")
                     .Action(b => b.Action("DataSourceDropDown", "VWSH_User", new { area = "SH" }))
                     .Sort(x => x.Add("FullName").Ascending())
                     .Execute()

                    )
                    </div>
                </div>
            </div>
        </div>


    </fieldset>
  

    <div class="buttons">
        <button class="btn btn-md btn-danger pull-left" data-task="modalClose">Vazgeç</button>
        <button id="productionInsertButton" class="btn btn-md btn-success pull-right" type="submit">
            Üretim Emrini Düzenle
        </button>
    </div>
}
