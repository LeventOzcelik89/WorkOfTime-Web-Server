@model VMPRD_ProductionModel
@{
    ViewBag.Title = "Üretim Emri Planla";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var userStatus = (PageSecurity)Session["userStatus"];
}
<link href="~/Content/Custom/css/PRD_transaction.css" rel="stylesheet" data-selector="modalContainer" />
<style>
    .form-group {
        margin-bottom: 10px;
    }

    .modal-lg {
        width: 95%;
    }

    table.table-custom {
        table-layout: fixed;
    }

        table.table-custom thead {
            background-color: #d6d5d4;
            font-size: 11px;
        }

        table.table-custom tr {
            border-bottom: 1px #d6d5d4 solid;
        }

        table.table-custom tbody tr:last-child {
            border-bottom: none;
        }
        /*table.table.table-custom tbody td .k-dropdown-wrap.k-state-default, table.table.table-custom tbody td .k-dropdown-wrap.k-state-disabled {
        padding: 0px !important;
    }*/
        table.table-custom tbody td {
            padding: 6px !important;
        }

            table.table-custom tbody td > input {
                width: 100%;
                height: 100%;
                padding: 10px 5px !important;
            }

        table.table-custom .k-widget.k-numerictextbox {
            width: 100% !important;
        }

            table.table-custom .k-widget.k-numerictextbox.k-input {
                padding: 0px !important;
            }

        table.table-custom .k-numeric-wrap {
            border: 0px !important;
        }

            table.table-custom .k-numeric-wrap.k-state-focused, table.table-custom .k-numeric-wrap.k-state-hover {
                box-shadow: none !important;
            }

                table.table-custom .k-numeric-wrap.k-state-focused > input, table.table-custom .k-numeric-wrap.k-state-hover > input {
                    border-color: #1ab394 !important;
                }

        table.table-custom .k-item {
            font-weight: 400 !important;
        }

        table.table-custom input:read-only {
            background: #f3f1f0 !important;
        }

        table.table-custom .input-group-addon {
            padding: 0 5px !important;
            font-size: 11px;
        }

        table.table-custom .k-input {
            height: 30px !important;
        }

        table.table-custom .form-control .k-dropdown-wrap, table.table-custom .form-control .k-picker-wrap, table.table-custom .form-control .k-multiselect-wrap {
            padding: 0px 0px 0px 0px !important
        }

        table.table-custom .form-control.k-widget {
            padding: 0px !important;
        }

        table.table-custom .k-multiselect.k-state-disabled .k-multiselect-wrap {
            background: #fcfcfc !important;
        }

        table.table-custom tbody tr td {
            vertical-align: middle !important;
        }

    .input-group .k-widget {
        margin-top: 1px !important;
    }

    .tagify {
        max-height: 131px;
        overflow: auto;
    }

        .tagify[aria-readonly="true"] {
            background: #f3f3f3;
        }

    .k-autocomplete.k-state-disabled, .k-picker-wrap.k-state-disabled, .k-numeric-wrap.k-state-disabled, .k-numeric-wrap.k-state-disabled .k-input, .k-numeric-wrap.k-state-disabled .k-select, .k-dropdown-wrap.k-state-disabled, .k-multiselect.k-header.k-state-disabled {
        background-color: #f3f3f3;
    }

    .input-group {
        width: 100%;
    }
</style>
<script data-selector="modalContainer">
    var page = {
        Counter: 0,
        events: {
            deleteAllRow() {
                $('#RowContainer_Stages tr').remove();
            },
            addRow: function (data) {
                var stages = $($('#RowTempForStages').html());
                $('#RowContainer_Stages').append(stages);
                stages.find('[data-stages="metarialId"]')
                    .attr('name', 'productMaterials[' + page.Counter + '].materialId')
                    .attr('value', data.materialId)
                stages.find('[data-stages="metarialIdTitle"]')
                    .attr('name', 'productMaterials[' + page.Counter + '].materialId_Title')
                    .attr('value', data.materialId_Title)
                    .attr('readonly', '');
                stages.find('[data-stages="quantity"]')
                    .attr('name', 'productMaterials[' + page.Counter + '].quantity')
                    .kendoNumericTextBox({ "format": "N0", "culture": "tr-TR", "spinners": false, "value": (data.quantity) });
                stages.find('[data-stages="price"]')
                    .attr('name', 'productMaterials[' + page.Counter + '].price')
                    .kendoNumericTextBox({ "format": "N2", "culture": "tr-TR", "spinners": false, "value": (data.price) });
                stages.find('[data-stages="totalQuantity"]')
                    .attr('name', 'productMaterials[' + page.Counter + '].totalQuantity')
                    .kendoNumericTextBox({ "format": "N0", "culture": "tr-TR", "spinners": false, "value": (data.quantity) });
                stages.find('[data-stages="stockTotal"]')
                    .attr('name', 'productMaterials[' + page.Counter + '].stockTotal')
                    .kendoNumericTextBox({ "format": "N0", "culture": "tr-TR", "spinners": false, "value": (data.stockTotal) });
                page.Counter++;
            },
            updateRows: function (count) {
                $.each($('#RowContainer_Stages tr'), function (i, item) {
                    var quantity = $(item).find('[data-stages="quantity"]').data('handler').value();
                    var total = $(item).find('[data-stages="totalQuantity"]').data('handler');
                    total.value(quantity * count);
                });
            },
            onChangeProductionSchema: function (e) {
                var productionSchema = e.sender.dataItem();
                if ((productionSchema != null || productionSchema != undefined) && productionSchema.name != null) {
                    $("#schemaTitle").val(productionSchema.name);
                }
            },
            onChangeProduct: function (e) {
                var product = e.sender.dataItem();
                if (product == null || product.id == null || product.id == "") {
                    return;
                }
                if (product != null && product.id != null && product.id != "") {
                    $("#quantity").data("handler").enable(true);
                    var detail = $("#productDetailButton");
                    $(detail).attr("href", "/PRD/VWPRD_Product/Detail?id=" + product.id);
                    detail.removeClass("hide");
                    GetJsonDataFromUrl('/General/GetProductMaterials', { productId: product.id }, function (res) {
                        $("#stagesId").show();
                        page.events.deleteAllRow();
                        $.each(res, function (i, item) {
                            page.events.addRow(item, 1);
                        });
                        if (res.length <= 0) {
                            MesajWarning("Seçilen Ürünün Reçetesi Bulunmamaktadır.", "Bilgilendirme")
                            $("#productionInsertButton").addClass("hide")
                            $("#stagesId").hide();
                        }
                        else {
                            $("#productionInsertButton").removeClass("hide")
                        }
                    })
                }
                else {
                    $("#quantity").data("handler").enable(false);
                    $("#productDetailButton").addClass("hide")
                }
            },
            onChangeStorage: function (e) {
                var storage = e.sender.dataItem();
                if (storage.id != null && storage.id != "") {
                    var metarialIds = $('[data-stages="metarialId"]')
                    var getProductsId = $.Enumerable.From(metarialIds).Select(x => x.defaultValue).ToArray();
                    GetJsonDataFromUrl('/PRD/VWPRD_Production/GetProductStocksByProductIdsAndStorageId', { productIds: getProductsId, storageId: storage.id }, function (stockSummaries) {
                        if (stockSummaries.length > 0) {
                            $("#productionInsertButton").removeClass("hide");
                            $.each(stockSummaries, function (index, value) {
                                var stages = $("#RowContainer_Stages tr")
                                $.each(stages, function (i, item) {
                                    debugger;
                                    var findMetarialId = $(item).find('[data-stages="metarialId"]');
                                    var findMetarialIdVal = $(findMetarialId).val();
                                    if (findMetarialIdVal != "" && findMetarialIdVal == value.productId) {
                                        $($(item).find('[data-stages="stockTotal"]')).data('handler').value(value.quantity)
                                    }
                                });

                            });
                        }
                        else {
                            MesajWarning("Bu depoda, bu ürünlere ait stok yoktur!", "Depoda stok yok!");
                            var stocks = $('[data-stages="stockTotal"]');

                            $.each(stocks, function (i, item) {
                                $(item).data('handler').value(0);

                            });
                        }
                    });
                }
            },
            disableOnProductNotSelected: function () {
                $(document).on("change", "#productId", function () {
                    console.log("");

                })
            }
        }
    };
</script>
<script type="text/template" data-selector="modalContainer" id="RowTempForStages">
    <tr>
        <td hidden>
            <div class="input-group">
                <input data-stages="metarialId" class="k-input form-control" />
            </div>
        </td>
        <td>
            <div class="input-group">
                <input data-stages="metarialIdTitle" class="k-input form-control" />
            </div>
        </td>
        <td>
            <div class="input-group">
                <input data-stages="quantity" />
                <span class="input-group-addon"> Adet</span>
            </div>
        </td>
        <td>
            <div class="input-group">
                <input data-stages="price" />
                <span class="input-group-addon"> ₺</span>
            </div>
        </td>
        <td>
            <div class="input-group">
                <input data-stages="totalQuantity" />
                <span class="input-group-addon">Adet</span>
            </div>
        </td>
        <td>
            <div class="input-group">
                <input data-stages="stockTotal" />
                <span class="input-group-addon">Adet</span>
            </div>
        </td>
    </tr>
</script>
<script data-selector="modalContainer" type="text/javascript">
    $(document)
        .on("keyup", "#quantity", function (e, resp) {
            var val = $(this).val();
            if (val == '' || val == undefined) {
                page.events.updateRows(0);
                return;
            }
            page.events.updateRows(parseInt(val));
        })
        .on("change", '[name="type"][type="radio"]', function (c) {
            $('#location,#fixtureIds').prop("required", false);
            var type = $(this).val();
            if (type == 6 || type == 7 || type == 5) {
                $('#location').prop("required", true);
            } else {
                $("#fixtureIds").data("handler").value([]);
            }

        });
</script>
@using (Html.BeginForm("Insert", "VWPRD_Production", FormMethod.Post, new Dictionary<string, object>() {
    { "class", "form-horizontal" },
    { "role", "form" },
    { "data-selector", "modalContainer" },
    { "data-formType", "Ajax" },
    { "id","VWPRD_ProductionInsertForm" }
}))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.id)
    @Html.HiddenFor(model => model.code)
    @Html.HiddenFor(model => model.schemaTitle)
    @Html.Hidden("materialString")
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-5">
                    <label class="control-label label-md" for="code">Üretim Emir Kodu</label>
                </div>
                <div class="col-md-7">
                    @Html.TextBoxFor(a => a.code, new Dictionary<string, object>()
                                    {
                                        {"class", "form-control"},
                                        {"placeholder", "Lütfen Üretim Emri Kodu Giriniz." }
                                    }).Validate(Validations.TextTurkceSpace09(false, 0, 140))
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-5">
                    <label class="control-label label-md req" for="centerCompanyId">Merkez Şirket</label>
                </div>
                <div class="col-md-7">
                    @(
        Html.Akilli()
        .DropDownListFor(model => model.centerCompanyId)
        .OptionLabel("Lütfen Malzemelerin Alınacağı Şirketi Seçiniz..")
        .DataValueField("id")
        .DataTextField("fullName")
        .Template("#=TemplateEngine('companyTemplate',data)#")
        .Action(b => b.Action("DataSourceDropDown", "VWCMP_Company", new { area = "CMP" }))
        .Sort(x => x.Add("fullName").Ascending())
        .Validate(Validations.Required)
        .Execute()
         .Enable(false)
            )
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-5">
                    <label class="control-label label-md" for="productionOrderDate">Üretim Emir Tarihi</label>
                </div>
                <div class="col-md-7">
                    @(
        Html.Akilli().
        DateTimePickerFor(model => model.productionOrderDate).
        Format(Extensions.DateFormatFull()).
        Value(DateTime.Now)
            )
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-5">
                    <label class="control-label label-md req" for="centerStorageId">Merkez Depo</label>
                </div>
                <div class="col-md-7">
                    @(
            Html.Akilli()
            .DropDownListFor(model => model.centerStorageId)
            .OptionLabel("Lütfen Malzemelerin Alınacağı Depoyu Seçiniz..")
            .DataTextField("fullName")
            .DataValueField("id")
            .Template("#=TemplateEngine('storageTemplate',data)#")
            .ValueTemplate("#=fullName#)")
            .Action(b => b.Action("DataSourceDropDown", "VWCMP_Storage", new { area = "CMP" }))
            .CascadeFrom("centerCompanyId")
            .CascadeFromField("companyId")
            .Sort(x => x.Add("fullName").Ascending())
            .Validate(Validations.Required)
            .Events(a => { a.Change("page.events.onChangeStorage"); a.DataBound("page.events.onChangeStorage"); })
            .Execute()
            .Enable(false)
                )
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-5">
                    <label class="control-label label-md" for="scheduledProductionDate">Üretim Başlama Tarihi</label>
                </div>
                <div class="col-md-7">
                    @(
        Html.Akilli().
        DateTimePickerFor(model => model.scheduledProductionDate).
        Format(Extensions.DateFormatFull()).
        Value(DateTime.Now)
            )
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-5">
                    <label class="control-label label-md req" for="productionSchemaId">Üretilecek Şirket</label>
                </div>
                <div class="col-md-7">
                    @(
		Html.Akilli()
		.DropDownListFor(model => model.productionCompanyId)
		.OptionLabel("Lütfen Üretim Şirketi Seçiniz..")
		.DataValueField("id")
		.DataTextField("fullName")
		.Template("#=TemplateEngine('companyTemplate',data)#")
		.Action(b => b.Action("DataSourceDropDown", "VWCMP_Company", new { area = "CMP" }))
		//.Events(a => { a.Change("onChangeCustomer"); a.DataBound("onChangeCustomer"); })
		.Sort(x => x.Add("fullName").Ascending())
		.Validate(Validations.Required)
		.Execute()
       .Enable(false)
            )
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-5">
                    <label class="control-label label-md" for="lastProductionDate">Hedef Bitiş Tarihi</label>
                </div>
                <div class="col-md-7">
                    @(
			Html.Akilli().
			DateTimePickerFor(model => model.lastProductionDate).
			Placeholder("Hedef Bitiş Tarihi").
			Format(Extensions.DateFormatFull()).
			Value(DateTime.Now)
				)
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-5">
                    <label class="control-label label-md req" for="productionStorageId">Üretilecek Depo</label>
                </div>
                <div class="col-md-7">
                    @(
			Html.Akilli()
			.DropDownListFor(model => model.productionStorageId)
			.OptionLabel("Lütfen Üretim Deposu Seçimi Yapınız..")
			.DataTextField("fullName")
			.DataValueField("id")
			.Template("#=TemplateEngine('storageTemplate',data)#")
			.ValueTemplate("#=fullName#)")
			.Action(b => b.Action("DataSourceDropDown", "VWCMP_Storage", new { area = "CMP" }))
			.CascadeFrom("productionCompanyId")
			.CascadeFromField("companyId")
			.Sort(x => x.Add("fullName").Ascending())
			.Validate(Validations.Required)
			.Execute()
            .Enable(false)
                )
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group noselector">
                <div class="col-md-5">
                    <label class="control-label label-md req" id="productIds">Üretilecek Ürün</label>
                </div>
                <div class="col-md-5">
                    @(Html.Akilli()
		.DropDownListFor(model=>model.productId)
		.OptionLabel("Lütfen Nihai Ürün Seçiniz..")
		.DataTextField("fullName")
		.DataValueField("id")
		.Action(b => b.Action("DataSourceDropDown", "VWPRD_Product", new { area = "PRD" }))
		.Sort(x => x.Add("fullName").Ascending())
		.Events(a => { a.Change("page.events.onChangeProduct"); a.DataBound("page.events.onChangeProduct"); })
		//.Template("#=TemplateEngine('inventoryTemplate',data)#")
		.Validate(Validations.Required)
		.Execute()

            )
                </div>
                <div class="col-sm-2">
                    <a class="btn pull-right m-r-sm btn btn-primary hide" style="margin-top: 3px;" id="productDetailButton" target="_blank" href="/PRD/VWPRD_Product/Detail"> <i class="fa fa-info-circle"></i> Detay </a>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-5">
                    <label class="control-label label-md req" for="productionSchemaId">Üretim Şeması</label>
                </div>
                <div class="col-md-7">
                    @(
		Html.Akilli()
		.DropDownListFor(model => model.productionSchemaId)
		.OptionLabel("Lütfen Üretim Şeması Seçiniz..")
		.DataValueField("id")
		.DataTextField("name")
		//.Template("#=TemplateEngine('companyTemplate',data)#")
		.Action(b => b.Action("DataSourceDropDown", "VWPRD_ProductionSchema", new { area = "PRD" }))
		.Events(a => { a.Change("page.events.onChangeProductionSchema"); a.DataBound("page.events.onChangeProductionSchema"); })
		.Sort(x => x.Add("name").Ascending())
		.Validate(Validations.Required)
		.Execute()
        .Enable(false)
            )
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-5">
                    <label class="control-label label-md req" for="quantity">Üretilecek Adet</label>
                </div>
                <div class="col-md-7">
                    @(
                    Html.Akilli()
                    .NumericTextBoxFor(a => a.quantity)
                    .Min(0)
					.Step(1)
					.Enable(false)
                    .Format("N0").Validate(Validations.Required)
                )
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-5">
                    <label class="control-label label-md" for="assignableUsers">Üretimde Görevli Personeller</label>
                </div>
                <div class="col-md-7">
                    @(
                     Html.Akilli()
                     .MultiSelectFor(a => a.assignableUsers)
                     .Placeholder("Lütfen Görevli Personel Seçiniz..")
                     .DataValueField("id")
		             .Filter<VWSH_User>(x=>x.RoleIds.Contains(SHRoles.UretimPersonel))
                     .DataTextField("FullName")
                     .ItemTemplate("#=TemplateEngine('userTemplate',data)#")
                     .Action(b => b.Action("DataSourceDropDown", "VWSH_User", new { area = "SH" }))
                     .Sort(x => x.Add("FullName").Ascending())
                     .Execute()

                    )
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-5">
                    <label class="control-label label-md" for="description">Üretim Açıklaması</label>
                </div>
                <div class="col-md-7">
                    @Html.TextAreaFor(a => a.description, new Dictionary<string, object>()
                    {
                        {"class", "form-control"},
                        {"placeholder", "Lütfen Açıklama Giriniz." }
                    }).Validate(Validations.TextTurkceSpace09(false, 0, 1000))
                </div>
            </div>
        </div>
    </div>
    <div class="row" style="display:none" id="stagesId">
        <div class="col-sm-12">
            <div class="clearfix" id="productTableForStages">
                <table class="table table-custom" cellpadding="1" cellspacing="0">
                    <thead>
                        <tr>
                            <th hidden> Id</th>
                            <th>Ürün Adı</th>
                            <th>Birim Miktar (Adet) </th>
                            <th> Birim Fiyat</th>
                            <th>Toplam Miktar (Adet)</th>
                            <th>Toplam Stok Durumu (Adet)</th>
                        </tr>
                    </thead>
                    <tbody id="RowContainer_Stages">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="buttons">
        <button class="btn btn-md btn-danger pull-left" data-task="modalClose">Vazgeç</button>
        <button id="productionInsertButton" class="btn btn-md btn-success pull-right" type="submit">
            Üretim Emri Planla
        </button>
    </div>
}
