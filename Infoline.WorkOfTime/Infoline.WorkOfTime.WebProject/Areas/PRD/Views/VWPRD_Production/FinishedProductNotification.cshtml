@model VMPRD_ProductionModel
@{
        ViewBag.Title = "Biten Ürün Bildirimi";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var userStatus = (PageSecurity)Session["userStatus"];
    var types = Infoline.Helper.EnumsProperties.EnumToArrayGeneric<EnumPRD_TransactionType>();
    if (ViewBag.Direction == -1)
    {
        types = types.Where(a => Convert.ToInt32(a.Key) >= 10 && Convert.ToInt32(a.Key) < 20);
    }
    else if (ViewBag.Direction == 1)
    {
        types = types.Where(a => Convert.ToInt32(a.Key) >= 0 && Convert.ToInt32(a.Key) < 10);
    }
    var count = types.Count();
}
<link href="~/Content/Custom/css/PRD_transaction.css" rel="stylesheet" data-selector="modalContainer" />
<script type="text/x-kendo-template" id="productCustomTemplate" data-selector="modalContainer">
    <div class="clearfix" style="padding: 8px 0;">
        <img class="img-circle img-responsive pull-left" style="width: 40px;height: 40px;" src="#:(logo ? logo : '/Content/Custom/img/urun-bulunamadi.png')#" onerror="ImageError(this, '/Content/Custom/img/urun-bulunamadi.png' )" />
        <div style=" width: calc(100% - 50px); height: 40px; float: right;">
            <div class="template-item">
                <strong>#:name#</strong>
            </div>
            <div class="template-item">
                <small>
                    #:code !=null ? code+' | ' : ''#
                    #:barcode !=null ? barcode+' | ' : ''#
                    #:brandId_Title !=null ? brandId_Title+' | ' : ''#
                </small>
            </div>
        </div>
    </div>
</script>
<script type="text/template" data-selector="modalContainer" id="RowTemplate_Upsert">
    <tr>
        <td data-target="">
            <div class="input-group">
                <input type="hidden" data-item="id" />
                <input type="hidden" data-item="type" />
                <input data-item="productId" class="form-control" data-refresh="" />
                <input type="hidden" data-item="materialName" />
                <a data-item="metarialDetailText" class="btn m-r-sm btn btn-primary input-group-addon" data-original-title="Ürün Detayı" id="productGridDetailButton" target="_blank" href=""> <i class="fa fa-link"></i></a>
            </div>
        </td>
        <td hidden>
            <div class="input-group">
                <input data-item="unitPrice" />
                <span class="input-group-addon"> TL</span>
            </div>
        </td>
        <td>
            <div class="input-group">
                <input data-item="value" disabled />
                <span data-item="amount" class="input-group-addon"> </span>
            </div>
        </td>
        <td>
            <div class="input-group">
                <input data-item="quantity" />
                <span data-item="amount" class="input-group-addon"> </span>
            </div>
        </td>
        <td>
            <div class="input-group">
                <input data-item="stockLeft" readonly />
                <span data-item="amount" class="input-group-addon"> </span>
            </div>
        </td>
        <td>
            <input data-item="serialCodes" data-role="tagify" />
        </td>
        <td>
            <button data-item="islendi" class="btn btn-md btn-danger" data-original-title="Satırı Sil" type="button" onclick="page.events.removeRow(this)" style="height: 40px;"><i class="fa fa-close"></i></button>
        </td>
    </tr>
</script>
<script type="text/x-kendo-template" id="typeTemplate" data-selector="modalContainer">
	#var types = @Html.Raw(Infoline.Helper.Json.Serialize(types))#
	<div class="clearfix"><i style="margin-right:15px;" class="#:types.filter(function(a){return a.Key == Id}).map(a=>a.Generic['icon'])#"></i><strong>#=enumDescription#</strong></div>
</script>
<script data-selector="modalContainer">
     var page = {
        Model: @Html.Raw( Json.Encode(Model) ),
        status:'@Model.Transaction.status',
        stock: [],
        outputId: null,
        outputCompanyId: null,
        inputId: null,
        inputCompanyId: null,
        type: null,
        isNew: false,
        Counter: 0,
         events: {
            removeRow: function (item) {
                $(item).parents('tr').remove();
            },
            removeAllRows: function () {
                if (page.Counter == 1 || page.Counter == 0) {
                    return;
                }
                $("#productMetarial tbody tr").remove();
                page.Counter = 0;
            },
             addRow: function (data, isNew) {
                 page.isNew = isNew;
                var temp = $($('#RowTemplate_Upsert').html());
                $('#RowContainer_Upsert').append(temp);
                temp.find('[data-item="index"]').append(page.Counter);
                temp.find('[data-item="id"]')
                    .attr('name', 'productionProducts[' + page.Counter + '].id')
                     .attr('id', (data != undefined ? data.id : kendo.guid()));
                 temp.find('[data-item="materialName"]')
                     .attr('data-value', data.materialId_Title);
                 temp.find('[data-item="type"]')
                     .attr('data-value', (data != null ? data.type : 0));
                 temp.find('[data-item="amount"]').text(data != null ? data.unitId_Title : "-")
                 var metarialId = data != null ? data.materialId : "-";
                 temp.find('[data-item="metarialDetailText"]').attr("href", "/PRD/VWPRD_Product/Detail?id=" + metarialId);
                 temp.find('[data-item="stockLeft"]')
                     .attr("data-value", data != undefined ? data.stockLeft : 0)
                     .kendoNumericTextBox({ "format": "N0", "culture": "tr-TR", "spinners": false, "value": (data != null ? data.stockLeft : 0), "readonly": true });
                temp.find('[data-item="unitPrice"]')
                    .attr('name', 'productionProducts[' + page.Counter + '].unitPrice')
                    .kendoNumericTextBox({ "format": "N2", "culture": "tr-TR", "spinners": false, "value": (data != undefined ? data.unitPrice : null) });
                temp.find('[data-item="quantity"]')
                    .attr('name', 'productionProducts[' + page.Counter + '].quantity')
                    .attr("data-value", data != undefined ? data.quantity : 0)
                    .kendoNumericTextBox({ "format": "N0", "culture": "tr-TR", "spinners": false, "value": (data != undefined ? data.quantity : null) });
                temp.find('[data-item="value"]')
                    .attr('name', 'productionProducts[' + page.Counter + '].value')
                    .attr("value", data != undefined ? data.quantity : 0)
                    .kendoNumericTextBox({ "format": "N0", "culture": "tr-TR", "spinners": false, "value": (data != undefined ? data.quantity : null) });
                temp.find('[data-item="serialCodes"]')
                    .attr('name', 'productionProducts[' + page.Counter + '].serialCodes')
                    .tagify({ placeholder: "Seri Numaralı bir takip yapılmıyor." });
                temp.find('[data-item="productId"]')
                    .attr('name', 'productionProducts[' + page.Counter + '].productId')
                    .kendoDropDownList(
                        {
                            "value": (data != undefined ? data.materialId : null),
                            "change": page.events.productChange,
							"dataBound": page.events.productChange,
                            "dataSource": {
                                "type": "aspnetmvc-ajax",
								"transport": { "read": { "url": "/PRD/VWPRD_Product/DataSourceDropDownForInventory" } },
                                "pageSize": 100,
                                "page": 1,
                                "total": 0,
                                "serverPaging": true,
                                "serverSorting": true,
                                "serverFiltering": true,
                                "filter": [{ "field": "stockId", "operator": "eq", "value": '@Model.Transaction.inputId' }]
                            },
                            "dataTextField": "fullName",
                            "delay": 1000,
                            "filter": "contains",
                            "template": '#=TemplateEngine("productCustomTemplate",data)#',
                            "dataValueField": "id",
                            "optionLabel": "Lütfen Ürün Seçiniz..",
                        });
                if (page.status == '1') {
                    temp.find('[data-item="islendi"]').attr('disabled', 'disabled');
                }
                page.Counter++;
            },
            productChange: function (e) {
                var data = e.sender.dataItem(e.sender.selectedIndex);
                var tr = this.element.parents('tr');
                var serialCodes = tr.find('[data-item="serialCodes"]');
                var unitPrice = tr.find('[data-item="unitPrice"]').data("kendoNumericTextBox");
                var findProductName = tr.find('[data-item="materialName"]').attr("data-value");
                var quantity = tr.find('[data-item="quantity"]').data("kendoNumericTextBox");
                var priceProp = page.type < 10 ? "currentBuyingPrice" : "currentSellingPrice";
                if (serialCodes.data('tagify')) {
                    serialCodes.data('tagify').destroy();
                    serialCodes.removeData("tagify");
                }
                if (data.id == "") {
                    if (!page.isNew) {
                        swal("Stoklarda Yok!", findProductName + " stoklarda mevcut değildir.", "warning");
                        tr.remove();
                    }
                    page.isNew = false;
                } else {
                    tr.find('[data-selector="unit"]').text(data.unitId_Title || "Adet");
                    quantity.value((data.id == e.sender._initial ? (quantity.value() || 0) : 0));
                    unitPrice.enable(true);
                    unitPrice.value(data.id == e.sender._initial ? (unitPrice.value() || data[priceProp] || 0) : (data[priceProp] || 0));
                    serialCodes.prop("readonly", data.stockType == 2 ? false : true);
                    serialCodes.val(data.id == e.sender._initial ? (serialCodes.val() || "") : "");
                    if (data.stockType == 2) {
                        var values = data.id == e.sender._initial ? (serialCodes.val() || "") : "";
                        var valuesArr = [];
                        try {
                            valuesArr = JSON.parse(values).map(function (a) { return { value: a.value, readonly: page.status == 1 } });
                        } catch (e) {
                            valuesArr = (values).split(",").map(function (a) { return { value: a, readonly: page.status == 1 } });
                        }
                        try {
                           serialCodes.val(JSON.stringify(valuesArr));
                        } catch (e) {
                        }
                        var whitelist = $.ajax({
                            url: '/PRD/VWPRD_Transaction/DataSourceInventoryCodes',
                            data: { productId: data.id, lastActionDataId: page.Model.Transaction.inputId, lastActionDataCompanyId: page.Model.Transaction.inputCompanyId },
                            async: false,
                        }).responseJSON || [];
                        whitelist = whitelist.concat(valuesArr.map(a => a.value));
                        serialCodes
                            .tagify({
                                placeholder: "Seri Numarasını yazın ve Enter'a basınız.",
                                enforceWhitelist: true,
                                whitelist: whitelist,
                                //editTags: false,
                                maxTags: 999,
                                dropdown: {
                                    maxItems: 999,           // <- mixumum allowed rendered suggestions
                                    //classname: "tags-look", // <- custom classname for this dropdown, so it could be targeted
                                    enabled: 0,             // <- show suggestions on focus
                                    closeOnSelect: false    // <- do not hide the suggestions dropdown once an item has been selected
                                }
                            })
                            .off("add removetag invalid")
                            .on("add removetag", function (e) {
                                quantity.value(serialCodes.val().split("value").length - 1);
                            })
                            .on("dropdown:show", function (e) {
                            });
                    } else {
                        serialCodes.tagify({ placeholder:"Seri Numaralı bir takip yapılmıyor." });
                    }
                   
                }
            },
         },
         init: function () {
             page.events.removeAllRows();
                $.each(page.Model.productionProducts, function (i, item) {
                page.events.addRow(item, false);
            });
            if (page.Model.productionProducts.length == 0) {
                page.events.addRow();
            }
        }
    };
    $(document).off("change", '[name="expensReport"]', function () { });
    $(document).on("change", '[name="expensReport"]', function () {
        var getValue = $('[name="expensReport"]:checked').val();
        if (getValue == 1) {
            $("#infoBox").show();
            $("#tableHide").show()
            page.init();
        }
        else {
            $("#tableHide").hide();
            $("#infoBox").hide();
            page.events.removeAllRows();
        }
    }).on("change", '#amount', function () {
        
    })
      .on('before:submit', 'form', function (e) {
        $('[data-item="serialCodes"]').each(function (c) {
            var data = $(this).data("tagify");
            if (data && data.value) {
                $(this).val(data.value.map(a => a.value).join(","));
            }
            var counter = 0;
            $.each($("#RowContainer_Upsert tr"), function (i, item) {
                $(item).find('[data-item="id"]').attr('name', 'productionProducts[' + counter + '].id');
                $(item).find('[data-item="unitPrice"]').attr('name', 'productionProducts[' + counter + '].unitPrice');
                $(item).find('[data-item="quantity"]').attr('name', 'productionProducts[' + counter + '].quantity');
                $(item).find('[data-item="serialCodes"]').attr('name', 'productionProducts[' + counter + '].serialCodes');
                $(item).find('[data-item="productId"]').attr('name', 'productionProducts[' + counter + '].productId');
                counter++;
            });
        });
          var tag = $("#ProductSerialCodes").data("tagify");
          if (tag && tag.value) {
              $("#ProductSerialCodes").val(tag.value.map(a => a.value).join(","))
          }
    })  ;
</script>
<style>
    .widget {
        min-height: 0px !important;
    }
</style>
@using (Html.BeginForm("Upsert", "VWPRD_Production", FormMethod.Post, new Dictionary<string, object>() {
    { "class", "form-horizontal" },
    { "role", "form" },
    { "data-selector", "modalContainer" },
    {"id","VWPRD_ProductionUpsertForm" },
    { "data-formType", "Ajax" }
}))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.id, new { @Value = Model.id })
    @Html.HiddenFor(model => model.tenderIds)
    @Html.HiddenFor(model => model.Transaction.invoiceId)
    @Html.HiddenFor(model => model.Transaction.orderId)
    @Html.HiddenFor(m => m.Transaction.outputId);
    @Html.HiddenFor(m => m.Transaction.outputCompanyId);
    @Html.HiddenFor(m => m.Transaction.outputTable);
    @Html.HiddenFor(m => m.Transaction.inputId);
    @Html.HiddenFor(m => m.Transaction.inputCompanyId);
    @Html.HiddenFor(m => m.Transaction.inputTable);
    @Html.HiddenFor(m => m.Transaction.code);
    @Html.HiddenFor(m => m.Transaction.date);
    @Html.HiddenFor(m => m.Transaction.description);
    @Html.HiddenFor(m => m.Transaction.type)
    @Html.HiddenFor(m => m.code);
    @Html.HiddenFor(m => m.description);
    @Html.HiddenFor(m => m.ProductDetail.id)
    var left = "0";
    var hideSmall = false;
    if (Model.producedQuantity.HasValue)
    {
        var number = (Model.quantity - Model.producedQuantity).Value;
        if (number <= 0)
        {
            left = "Üretim Tamamlandı";
            hideSmall = true;
        }
        else
        {
            left = number.ToString("N2");
        }
    }
    var produced = "0";
    if (Model.producedQuantity.HasValue)
    {
        produced = Model.producedQuantity.Value.ToString("N2");
    }
    <fieldset>
        <legend>ÜRETİM BİLGİLERİ</legend>
        <div class="row">
            <div class="col-sm-12">
                <div class="widget blue-bg p-lg text-center" style="min-height:unset!important">
                    <div class="">
                        <i class="fa fa-inbox fa-2x"></i>
                        <h3 class="m-xs"> @Model.productId_Title</h3>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-4 ">
                <div class="widget lazur-bg p-lg text-center" style="min-height:70px!important">
                    <h3 class="m-xs"> @Model.quantity.Value.ToString("N2")  <small class="text-white">@Model.ProductDetail.unitId_Title</small></h3>
                    <h5 class="font-bold ">
                        Üretilmesi Gereken Ürün Adedi
                    </h5>
                </div>
            </div>
            <div class="col-sm-4">
                <div class="widget yellow-bg  p-lg text-center" style="min-height:70px!important">
                    <h3 class="m-xs">@produced <small class="text-white">@Model.ProductDetail.unitId_Title</small> </h3>
                    <h5 class="font-bold ">
                        Üretilen Ürün Adedi
                    </h5>
                </div>
            </div>
            <div class="col-sm-4">
                <div class="widget red-bg p-lg text-center" style="min-height:70px!important">
                    <h3 class="m-xs">
                        @left @if (hideSmall == false)
                        {<small class="text-white"> @Model.ProductDetail.unitId_Title </small>}
                    </h3>
                    <h5 class="font-bold ">
                        @if (hideSmall == false)
                        {
                            <span>Geriye Kalan Ürün Adedi</span>
                        }
                    </h5>
                </div>
            </div>
        </div>
    </fieldset>
    <fieldset>
        <legend>BİTEN ÜRÜN BİLGİLERİ</legend>
        @if (Model.ProductDetail.stockType != (short)EnumPRD_ProductStockType.SeriNoluTakip)
        {
            <div class="row " style="margin-top:15px">
                <div class="col-md-12">
                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="col-md-4">
                                <label class="control-label label-md req " for="type">Üretilen Adet</label>
                            </div>
                            <div class="col-md-8">
                                @Html.Akilli().NumericTextBoxFor(model => model.amount).Min(0).Format("N0")
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        @if (Model.ProductDetail.stockType == (short)EnumPRD_ProductStockType.SeriNoluTakip)
        {
            <div class="row">
                <div class="col-md-12" style="margin-top:15px">
                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="col-md-4">
                                <label class="control-label label-md req " for="type">Üretilen Adet</label>
                            </div>
                            <div class="col-md-4">
                                @Html.Akilli().NumericTextBoxFor(model => model.amount).Min(0).Format("N0")
                                <script type="text/javascript">
                                    var numerictextbox = $("#amount").data("kendoNumericTextBox");
                                    numerictextbox.readonly();
                                </script>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row" style="margin-top:15px">
                <div class="col-md-12">
                    <div class="col-md-12">
                        <div class="form-group">
                            <div class="col-md-2">
                                <label class="control-label label-md " for="type">Seri Numaraları</label>
                                <i data-original-title="Toplu seri numarası girişleri için excelden kopyalamayı veya seri numaralarını virgüllü bir şekilde kopyalamayı deneyebilirsiniz." class="fa fa-info-circle"></i>
                            </div>
                            <div class="col-md-10">
                                <input name="ProductSerialCodes" id="ProductSerialCodes" type="text" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <script data-selector="modalContainer">
                $('#ProductSerialCodes').tagify({
                    placeholder: "Seri Numarasını yazın ve Enter'a basınız"
                }).on("add removetag", function (e) {
                    let amount = $("#ProductSerialCodes").data("tagify").value;
                    if (amount.length == 0) {
                        $("#amount").data("kendoNumericTextBox").value(1)
                    }
                    else {
                        $("#amount").data("kendoNumericTextBox").value(amount.length)
                        $("#amount").trigger("change");
                    }
                });
            </script>
        }
        <div class="row">
            <div class="col-sm-12 " style="margin-top:15px">
                <div class="col-md-6">
                    <div class="form-group">
                        <div class="col-md-4">
                            <label class="control-label label-md " for="type">Harcamalar Otomatik İşletilsin mi ? </label>
                            <i data-original-title="Materyal harcamaları otomatik işletildiğinde, stoktan düşecektir." class="fa fa-info-circle"></i>
                        </div>
                        <div class="col-md-8">
                            <div class="radio akilliRadioGrup clearfix">
                                <input type="radio" name="expensReport" id="expensReport_0" value="1">
                                <label tabindex="0" class="radio-label" for="expensReport_0">
                                    Evet
                                </label>
                                <input type="radio" name="expensReport" id="expensReport_1" checked value="0">
                                <label tabindex="0" class="radio-label" for="expensReport_1">
                                    Hayır
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </fieldset>
    <fieldset id="tableHide" style="display:none;">
        <legend>HARCAMA BİLDİR</legend>
        <div class="clearfix " id="productTableForParts ">
            <table class="table table-custom" id="productMetarial" cellpadding="1" cellspacing="0">
                <thead>
                    <tr>
                        <th style="width:50%">ÜRÜN</th>
                        <th style="width:15%">ÜRETİLMESİ İÇİN GEREKEN MİKTAR</th>
                        <th style="width:10%">HARCANAN MİKTAR </th>
                        <th style="width:10%">STOK MİKTARI </th>
                        <th style="width:46%">SERİ NUMARALARI  <i data-original-title="Toplu seri numarası girişleri için excelden kopyalamayı veya seri numaralarını virgüllü bir şekilde kopyalamayı deneyebilirsiniz." class="fa fa-info-circle"></i></th>
                        <th style="width:3%"></th>
                    </tr>
                </thead>
                <tbody id="RowContainer_Upsert">
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="8"><button class="btn btn-info pull-right @(!string.IsNullOrEmpty(Model.tenderIds) ? "hide" : "")" type="button" @(Model.Transaction.status == (int)EnumPRD_TransactionStatus.islendi ? "disabled" : "") onclick="page.events.addRow(undefined,true)"><i class="fa fa-plus-circle"></i> Yeni Satır Ekle</button></td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </fieldset>
    <div class="buttons">
        <div class="hr-line-dashed"></div>
        <button class="btn btn-md btn-danger pull-left" data-task="modalClose">Geri</button>
        <button class="btn btn-md btn-success pull-right" id="formButton" formaction="@Url.Action("FinishedProductNotification","VWPRD_Production",new {area="PRD" })" name="status" value="@((int)EnumPRD_TransactionStatus.islendi)" type="submit">Bildir</button>
    </div>
}
