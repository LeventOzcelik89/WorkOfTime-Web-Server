@model Infoline.WorkOfTime.BusinessAccess.Business.Product.VMPRD_CompanyBasedPriceDetailModel
@{
    //ViewBag.Title = "Özel Fiyat Belirleme";
    ViewBag.Title = Model.companyBasedPriceId;
    Layout = "~/Views/Shared/_Layout.cshtml";

}
<style>
</style>
<script>
    var page = {};
    page = {
        defines: {
            isAllCompanies: 1,
            productTarget: 2,
            disabledInput: 0
        },
        functions: {
            setCompanyDropDownTitle: function (e) {
                if ($("#companyId") === "") {
                    $("#companyDropDown").find(".k-input").text("Tüm Şirketlere Uygula");
                    $("#companyDropDown").find(".k-dropdown-wrap").attr("style", "background-color:#ececec !important;");
                }
            },
            setProductDropDownTitle: function (e) {
                if ($("#productId") === "") {
                    $("#productDropDown").find(".k-input").text("Tüm Ürünlere Uygula");
                    $("#productDropDown").find(".k-dropdown-wrap").attr("style", "background-color:#ececec !important;");
                }
            },
            setSellingTypeCheckbox: function () {
                $(document).on("change", "[name='sellingType']", function () {
                    debugger;
                    let value = $("[name='sellingType']:checked").val();
                    var grid = $("#VWPRD_CompanyBasedPriceDetail").data("kendoGrid");
                    if (value == 0 || value == 1) {
                        grid.hideColumn("monthCount");
                    }
                    else {
                        if (value == 2) {
                            $("[data-field='monthCount']").find("a").last().text("Taksit Sayısı")
                        }
                        if (value == 3) {
                            $("[data-field='monthCount']").find("a").last().text("Vade Sayısı")
                        }
                        grid.showColumn("monthCount");
                    }
                });
            },
            setconditionTypeCheckbox: function () {
                $(document).on("change", "[name='conditionType']", function () {
                    debugger;
                    let value = $("[name='conditionType']:checked").val();
                    var grid = $("#VWPRD_CompanyBasedPriceDetail").data("kendoGrid");
                    if (value == 0) {
                        grid.hideColumn("minCondition");
                    }
                    else {
                        if (value == 1) {
                            $("[data-field='minCondition']").find("a").last().text("Minimum Satış Tutarı")
                        }
                        if (value == 2) {
                            $("[data-field='minCondition']").find("a").last().text("Minimum Birim")
                        }
                        grid.showColumn("minCondition");
                    }
                });
            },
            setGridDiscountOrPrice() {
                $(document).on("change", "[name='isPrice']", function () {
                    let value = $("[name='isPrice']:checked").val();
                    var grid = $("#VWPRD_CompanyBasedPriceDetail").data("kendoGrid");
                    if (value == 0) {
                        grid.hideColumn("discount");
                        grid.showColumn("price");
                    }
                    else {
                        grid.hideColumn("price");
                        grid.showColumn("discount");
                    }


                });
            },
            onChangeProduct(e) {
                var value = this;
                var grid = $("#VWPRD_CompanyBasedPriceDetail").data("kendoGrid");
                var dataitem = value.dataItem();
                var price = dataitem.currentSellingPrice;
                $("#basePrice").val(price);

            }
        }
    }

</script>

@using (Html.BeginForm("Update", "VWPRD_CompanyBasedPriceDetail", FormMethod.Post, new Dictionary<string, object>() {
    { "class", "form-horizontal" },
    { "id", "form" },
    { "role", "form" },
    { "data-selector", "modalContainer" },
    { "data-formType", "Ajax" }
}))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.id)
    @Html.HiddenFor(model => model.companyBasedPriceId)
<div id="options">
        <div class="form-group">
            <div class="col-md-5">
                <div class="radio akilliRadioGrup clearfix">
                    @(Html.Akilli().RadioButtonGroupFor(a => a.companyType).Readonly(true).Value(EnumPRD_CompanyBasedPriceCompanyType.AllCompanies))
                </div>
            </div>
            <div class="col-md-7" id="companyDropDown">
                @(Html.Akilli()
                .DropDownListFor(model => model.companyId)
                .OptionLabel("Lütfen Şirket Seçiniz..")
                .DataTextField("name")
                .DataValueField("id")
                .Action(b => b.Action("DataSourceDropDown", "VWCMP_Company", new { area = "CMP" }))
                .Sort(x => x.Add("name").Ascending())
                .Events(x => x.DataBound("page.functions.setCompanyDropDownTitle"))
                .Execute()
                .Readonly(true)
                )
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-5">
                @(Html.Akilli().RadioButtonGroupFor(a => a.productType).Readonly(true).Value(EnumPRD_CompanyBasedPriceProductType.AllProducts))
            </div>

            <div class="col-md-7" id="productDropDown">
                @(
            Html.Akilli()
            .DropDownListFor(model => model.productId)
            .OptionLabel("Tüm Ürünlere Uygula...")
            .DataTextField("fullName")
            .DataValueField("id")
            .Template("#=TemplateEngine('productTemplate',data)#")
            .Action(b => b.Action("DataSourceDropDown", "VWPRD_Product", new { area = "PRD" }))
            .Sort(x => x.Add("code").Ascending())
            .Events(x => x.DataBound("page.functions.setProductDropDownTitle"))
            .Readonly(true)
            .Execute()
            )
            </div>

            <div class="col-md-7" id="categoryDropDown" style="display:none;">
                @(
            Html.Akilli()
            .DropDownListFor(model => model.categoryId)
            .OptionLabel("Lütfen Kategori seçiniz..")
            .DataTextField("fullname")
            .DataValueField("id")
            .Action(b => b.Action("DataSourceDropDown", "VWPRD_Category", new { area = "PRD" }))
            .Sort(x => x.Add("fullname").Ascending())
            .Execute("id")
            .Readonly(true)
        )
            </div>

        </div>

        <div class="form-group">
            <div class="col-md-12">
                <div class="">
                    @(Html.Akilli().RadioButtonGroupFor(a => a.sellingType).Readonly(true).Value(EnumPRD_CompanyBasedPriceCompanyType.AllCompanies))

                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-12">
                <div class="">
                    @(Html.Akilli().RadioButtonGroupFor(a => a.conditionType).Readonly(true).Value(EnumPRD_CompanyBasedPriceConditionType.Genel))
                </div>
            </div>
        </div>
        <div class="form-group" id="priceorDiscountDiv" style="display:none">
            <div class="col-md-12">
                <div class="radio akilliRadioGrup clearfix">
                    <input type="radio" class="bg-focus" name="isPrice" checked id="priceDiscount0" value="0">
                    <label tabindex="0" class="radio-label bg-focus" for="priceDiscount0">
                        Fiyat
                    </label>
                    <input type="radio" name="isPrice" id="priceDiscount1" value="1">
                    <label tabindex="0" class="radio-label" for="priceDiscount1">
                        İskonto
                    </label>
                </div>
            </div>
        </div>

    </div>

    <div class="form-group">
        <div class="col-sm-12">
            @(Html.Kendo().Grid<Infoline.WorkOfTime.BusinessData.Specific.VWPRD_CompanyBasedPriceDetailDto>()
    .Name("VWPRD_CompanyBasedPriceDetail").Events(x=>x.DataBound("onDataGridBound"))
    .Columns(columns =>
    {
        columns.Bound(p => p.companyBasedPriceId).Hidden(true);
        columns.Bound(p => p.id).Hidden(true);
        columns.Bound(p => p.companyId).Hidden(true);
        columns.Bound(p => p.categoryId).Hidden(true);
        columns.Bound(p => p.sellingType).Hidden(true);
        columns.Bound(p => p.conditionType).Hidden(true);
        columns.Bound(p => p.productId).Hidden(true);
        columns.Bound(p => p.startDate).Format("{0:dd/MM/yyyy}").Title("Başlangıç Tarihi");
        columns.Bound(p => p.endDate).Format("{0:dd/MM/yyyy}").Title("Bitiş Tarihi");
        columns.Bound(p => p.monthCount).Title("Taksit Sayısı").Hidden(true);
        columns.Bound(p => p.minCondition).Title("Minimum Satış Adeti").Hidden(true);
        columns.Bound(p => p.discount).Title("Iskonto Oranı");
        columns.Bound(p => p.price).Title("Fiyat").Hidden(true);
        columns.Command(command => { command.Destroy().Text("Sil");command.Edit().Text("Düzenle"); }).Width(250);
    })
    .ToolBar(toolbar => toolbar.Create())
    .Editable(editable => editable.Mode(GridEditMode.InLine).ConfirmDelete("Continue to delete this record?").DisplayDeleteConfirmation("Continue to delete this record?"))
    .Pageable()
    .Sortable()
    .Scrollable()
    .HtmlAttributes(new { style = "height:550px;" })
    .DataSource(dataSource => dataSource
        .Ajax()
        .Events(events=>events.Error("error_handler").RequestEnd("onPush"))
        .PageSize(20)
        .Model(model => model.Id(p => p.companyBasedPriceId))
        .Create(update => update.Action("InsertInline", "VWPRD_CompanyBasedPriceDetail", new { id = Model.companyBasedPriceId }))
        .Read(read => read.Action("GetVWCompanyBasedPriceDetailByCompanyBasedPriceId", "VWPRD_CompanyBasedPriceDetail", new { id = Model.id }))
        .Update(update => update.Action("UpdateInline", "VWPRD_CompanyBasedPriceDetail"))
        .Destroy(update => update.Action("DeleteInline", "VWPRD_CompanyBasedPriceDetail"))
    )
)
        </div>
    </div>
    <div class="buttons">
        <button class="btn btn-md btn-danger pull-left" data-task="modalClose">Geri</button>
 
    </div>

}

<script type="text/javascript">
    $(document).ready(function () {

        page.functions.setCompanyDropDownTitle();

    })
    page.functions.setSellingTypeCheckbox();
    page.functions.setconditionTypeCheckbox();
   
    page.functions.setGridDiscountOrPrice();
    let model = [];

    $('#form').submit(function (eventObj) {
        var grid = $("#VWPRD_CompanyBasedPriceDetail").data("kendoGrid");
        var griddata = grid.dataSource.data();
        for (var i = 0; i < griddata.length; i++) {
            model.push(griddata[i])
        }
        $('<input />').attr('type', 'hidden')
            .attr('name', "_CompanyBasedPriceDetailModels")
            .attr('value', JSON.stringify(model))
            .appendTo('#form');
        return true;
    });

    function onDataGridBound(e) {
        var grid = $("#VWPRD_CompanyBasedPriceDetail").data("kendoGrid");
        var griddata = grid.dataSource.data();
        if (griddata.length != 0) {
            $("#options").attr("style", "pointer-events:none;")
        } else {
            $("#options").attr("style", "pointer-events:auto;")
        }
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
    function onPush(e) {
        console.log(e);
        if (e.response.Result != null || e.response.Result != undefined) {
            if (e.response?.Result == false) {
                e.preventDefault();
                MesajWarning(e.response.FeedBack.title, e.response.FeedBack.message);
            }
            else {
                MesajSuccess("Özel Fiyat Belirleme Kayıt Başarılı", "Kayıt Ekleme Başarılı");
            }
        }


    }

</script>



