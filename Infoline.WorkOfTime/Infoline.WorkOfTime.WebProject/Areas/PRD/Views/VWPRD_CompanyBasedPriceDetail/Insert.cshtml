@model Infoline.WorkOfTime.BusinessAccess.Business.Product.VMPRD_CompanyBasedPriceDetailModel
@{
    ViewBag.Title = "Özel Fiyat Belirleme";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
</style>
<script>

    function blockClick() {

    }


    $(document)
        .on("change", "[name='companyType']", function () {
            let value = $("[name='companyType']:checked").val();
            if (value == 0) { //Tüm Şirketlere
                $("#companyId").data("kendoDropDownList").value(-1);
                $("#companyId").data("kendoDropDownList").readonly()
                $("#companyDropDown").find(".k-input").text("Tüm Şirketlere Uygula");
                $("#companyDropDown").find(".k-dropdown-wrap").attr("style", "background-color:#ececec !important;");
            }
            else { //Seçili Şirkete
                $("#companyId").data("kendoDropDownList").readonly(false);
                $("#companyDropDown").find(".k-input").text("Lütfen Şirket Seçiniz");
                $("#companyDropDown").find(".k-dropdown-wrap").removeAttr("style");
            }
        })
        .on("change", "[name='productType']", function () {
            let value = $("[name='productType']:checked").val();
            if (value == 0) { //Tüm Ürünlere
                $("#productId").data("kendoDropDownList").value(-1);
                $("#categoryId").data("kendoDropDownList").value(-1);
                $("#productId").data("kendoDropDownList").readonly()
                $("#productDropDown").find(".k-input").text("Tüm Ürünlere Uygula");
                $("#productDropDown").find(".k-dropdown-wrap").attr("style", "background-color:#ececec !important;");
                $("#productDropDown").show();
                $("#categoryDropDown").hide();
                $("#priceorDiscountDiv").hide();
                $("[for=type_0]").trigger("click")
                $("#discountTypeDiv").show();
                $("[data-order=7]").hide();
                $("[data-order=8]").hide();
            }
            else if (value == 1) { //Seçili Kategoriye
                $("#productId").data("kendoDropDownList").value(-1);
                $("#categoryDropDown").show();
                $("#productDropDown").hide();
                $("#priceorDiscountDiv").hide();
                $("[for=type_0]").trigger("click")
                $("#discountTypeDiv").show();
                $("[data-order=7]").hide();
                $("[data-order=8]").hide();
            }
            else if (value == 2) { //Seçili Ürüne
                $("#productId").data("kendoDropDownList").value(-1);
                $("#categoryId").data("kendoDropDownList").value(-1);
                $("#productDropDown").find(".k-input").text("Lütfen Ürün Seçiniz..");
                $("#productDropDown").find(".k-dropdown-wrap").removeAttr("style");
                $("#productDropDown").show();
                $("#categoryDropDown").hide();
                $("#productId").data("kendoDropDownList").readonly(false);
                $("#priceorDiscountDiv").show();
                $("#priceDiscount0").prop("checked", true);
                $("#priceDiscount1").prop("checked", false);
                $("#discountTypeDiv").show();
                $("[data-order=7]").hide();
                $("[data-order=8]").hide();
            }
        })
        .on("change", "[name='sellingType']", function () {
            let value = $("[name='sellingType']:checked").val();
            if (value == 0 || value == 1) { //Genel veya Peşin
                $("[data-order=4]").hide();
            }
            else {
                if (value == 2) { //Taksitli
                    $($("[data-order=4]")[0]).text("Taksit Sayısı");
                }
                if (value == 3) { //Vadeli
                    $($("[data-order=4]")[0]).text("Vade Sayısı");
                }
                $("[data-order=4]").show();
            }
        })
        .on("change", "[name='conditionType']", function () {
            let value = $("[name='conditionType']:checked").val();
            if (value == 0) { //Genel
                $("[data-order=3]").hide();
            }
            else {
                if (value == 1) { //Minimum Satış Fiyatı
                    $($("[data-order=3]")[0]).text("Minimum Satış Tutarı");
                    $("[data-conditionCurr=minConditionCurrency]").hide();
                    $("[data-conditionCurr=minConditionMoneyCurrency]").show();
                }
                if (value == 2) { // Minimum Adet
                    $($("[data-order=3]")[0]).text("Minimum Birim");
                    $("[data-conditionCurr=minConditionMoneyCurrency]").hide();
                    $("[data-conditionCurr=minConditionCurrency]").show();
                }
                $("[data-order=3]").show();
            }
        })
        .on("change", "[name='type']", function () {
            let value = $("[name='type']:checked").val();
            var rowLength = $('[data-row]').length;
            if (value == 1) { //Fiyat girelecek
                $("[data-order=5]").hide();
                $("[data-order=6]").show();
                $("#discountTypeDiv").hide();

                if ($("[name='productType']:checked").val() == 2) { //seçili ürüne ise
                    for (var i = 0; i < rowLength; i++) {
                        var priceForRow = $($("td[data-order=6]")[i]).find("input").val();
                        $($("td[data-order=8]")[i]).find("input").val(priceForRow);
                    }
                }
            }
            else { //Oran Girilecek
                $("[data-order=6]").hide();
                $("[data-order=5]").show();
                $("#discountTypeDiv").show();
                if ($("[name='productType']:checked").val() == 2) { //seçili ürüne ise
                    if ($("#productId").data("kendoDropDownList").dataItem().currentSellingPrice != undefined) {//ürün currentSellingPrice null değilse
                        var currentPrice = $("#productId").data("kendoDropDownList").dataItem().currentSellingPrice;
                        for (var i = 0; i < rowLength; i++) {
                            var discountForRow = $($("td[data-order=5]")[i]).find("input").val();
                            var discountForRow = parseFloat(discountForRow);
                            var effectedRowPrice = $("[name='discountType']:checked").val() == 0 ? (currentPrice * ((100 - discountForRow) / 100)) : (currentPrice * ((100 + discountForRow) / 100));
                            effectedRowPrice = kendo.toString(effectedRowPrice, "N2");
                            effectedRowPrice = effectedRowPrice.replace(".", "");
                            effectedRowPrice = effectedRowPrice.replace(",", ".");
                            effectedRowPrice = parseFloat(effectedRowPrice);
                            $($("td[data-order=8]")[i]).find("input").val(effectedRowPrice);
                        }
                    } else {
                        $("td[data-order=8]").find("input").val("-");
                    }
                }
            }
        })
        .on("change", "[name='discountType']", function () {
            
            let value = $("[name='discountType']:checked").val();

            $("th[data-order=5]").text(value == 0 ? "İskonto Oranı" : "Fiyat Artış Oranı");

            let type = $("[name='type']:checked").val();
            let currentPrice = $("#productId").data("kendoDropDownList").dataItem().currentSellingPrice;
            if (currentPrice != undefined && type == 0) {
                if (value == 0) { //indirim
                    var length = $('[data-row]').length;
                    for (var i = 0; i < length; i++) {
                        var discountForRow = $($("td[data-order=5]")[i]).find("input").val();
                        var discountForRow = parseFloat(discountForRow);
                        var effectedRowPrice = currentPrice * ((100 - discountForRow) / 100);
                        effectedRowPrice = kendo.toString(effectedRowPrice, "N2");
                        effectedRowPrice = effectedRowPrice.replace(".", "");
                        effectedRowPrice = effectedRowPrice.replace(",", ".");
                        effectedRowPrice = parseFloat(effectedRowPrice);
                        $($("td[data-order=8]")[i]).find("input").val(effectedRowPrice);
                    }
                }
                else { //fiyat artışı
                    var length = $('[data-row]').length;
                    for (var i = 0; i < length; i++) {
                        var discountForRow = $($("td[data-order=5]")[i]).find("input").val();
                        var discountForRow = parseFloat(discountForRow);
                        var effectedRowPrice = currentPrice * ((100 + discountForRow) / 100);
                        effectedRowPrice = kendo.toString(effectedRowPrice, "N2");
                        effectedRowPrice = effectedRowPrice.replace(".", "");
                        effectedRowPrice = effectedRowPrice.replace(",", ".");
                        effectedRowPrice = parseFloat(effectedRowPrice);
                        $($("td[data-order=8]")[i]).find("input").val(effectedRowPrice);
                    }
                }
            }
        })
        .on("ready", function () {
            page.functions.AddRow(true);
        })
        .on("submit", "#submitButtonId", function (e) {
            $("#submitButtonId").attr("disabled", true)
        })

        .on("keyup", "[data-item=discount]", function () {
            var currentPrice = $("#productId").data("kendoDropDownList").dataItem().currentSellingPrice;
            if (currentPrice != undefined) {
                var discount = $(this).val();
                discount = parseFloat(discount);
                var effectedPrice = $("[name='discountType']:checked").val() == 0 ? (currentPrice * ((100 - discount) / 100)) : (currentPrice * ((100 + discount) / 100));
                effectedPrice = kendo.toString(effectedPrice, "N2");
                effectedPrice = effectedPrice.replace(".", "");
                effectedPrice = effectedPrice.replace(",", ".");
                effectedPrice = parseFloat(effectedPrice);
                $(this).closest("tr").find("[data-effectedPrice=true]").val(effectedPrice);
            }
        })
        .on("keyup", "[data-item=price]", function () {
            var price = $(this).val();
            $(this).closest("tr").find("[data-effectedPrice=true]").val(price);
        });

    function beforeFunc(e) {
        let productType = $("[name='productType']:checked").val();
        let companyType = $("[name='companyType']:checked").val();

        if (productType == 2 && $("#productId").data("kendoDropDownList").dataItem().id == "") {
            MesajWarning("Lütfen Ürün Seçiniz", "Ürün Seçimi Yapmadınız");

            return false;
        }
        if (productType == 1 && $("#categoryId").data("kendoDropDownList").dataItem().id == "") {
            MesajWarning("Lütfen Kategori Seçiniz", "Kategori Seçimi Yapmadınız");
            return false;
        }
        if (companyType == 1 && $("#companyId").data("kendoDropDownList").dataItem().id == "") {
            MesajWarning("Lütfen Şirket Seçiniz", "Şirket Seçimi Yapmadınız");
            return false;
        }

        $("#submitButtonId").attr("disabled", true)

        setTimeout(function () {
            $("#submitButtonId").removeAttr("disabled")
        }, 2500);
        

        return true;
    }
    var page = {};
    page = {
        defines: {
            isAllCompanies: 1,
            productTarget: 2,
            disabledInput: 0,
            isThereRecord: 0
        },
        functions: {
            AddRow: function (control) {
                var template = page.functions.GetRowTemplate();
                var length = $('#productsTable tbody tr:not(.table-row-2lines)').length;
                var ids = [];
                $(template).find("input").each(function (e) {
                    var id = $(this).attr("id");
                    if (id !== undefined) {
                        ids.push(id);
                        $(this).attr("id", id + length);
                    }
                });
                $(template).find("script").each(function () {
                    var _this = $(this);
                    var script = _this.html();
                    ids.forEach(function (id) {
                        if (script.includes('jQuery("#' + id + '")')) {
                            script = script.split('#' + id).join('#' + id + length);
                        }
                    });
                    _this.after($('<script/>').append(script));
                    _this.remove();
                });
                var dataItems = $(template).find('[data-item]');
                $.each(dataItems, function (i, item) {
                    var itemName = $(item).attr("data-item");
                    $(item).attr("name", "BasePriceDetailItems[" + length + "]." + itemName);
                    if (item.type == "number") {
                        $(item).attr("id", newGuid());
                    }
                })
                var rowId = newGuid();
                $(template).find('[data-row="BasePriceDetailItems"]').removeAttr("data-row").attr("data-row", rowId);
                $(template).find('[data-id="BasePriceDetailItems"]').removeAttr("data-id").attr("data-id", rowId);
                $(template).find('[data-item="itemOrder"]').val(length + 1);
                $('#productsTable').find("tbody").prepend($(template).html());
                $.each($('[type="number"]'), function (i, item) {
                    var id = $(item).attr("id");
                    if ($(item).attr("data-item") != "monthCount") {
                        if ($(item).attr("name") != undefined && $(item).attr("name").indexOf("price") > -1) {
                            $('#' + id).kendoNumericTextBox({
                                format: "N2",
                                min: 0,
                                value: 0,
                                step: 0.01,
                                decimals: 2,
                                spinners: false
                            });
                        } else {
                            $('#' + id).kendoNumericTextBox({
                                format: "N2",
                                min: 0,
                                value: 0,
                                step: 0.01,
                                spinners: false
                            });
                        }
                    } else {
                        $('#' + id).kendoNumericTextBox({
                            format: "N0",
                            min: 0,
                            value: 0,
                            step: 1,
                            spinners: false
                        });
                    }
                });

                //gizli - açık columların ayarlanması
                page.functions.ShowCols();

                //işaretlerin ayarlanması
                page.functions.SetCurrrency();

                //güncel fiyat ataması
                page.functions.SetPrice();

            },
            SetPrice: function () {
                if ($("#productId").data("kendoDropDownList").dataItem().id != "") {
                    $("[data-order=7]").show();
                    $("[data-order=8]").show();
                    var currentPrice = $("#productId").data("kendoDropDownList").dataItem().currentSellingPrice;
                    if (currentPrice == null) {
                        $("[data-currentPrice=true]").attr("type", "text");
                        $("[data-currentPrice=true]").val("-");

                        if ($("[name='type']:checked").val() == 0) {
                            $("[data-effectedPrice=true]").attr("type", "text");
                            $("[data-effectedPrice=true]").val("-");
                        }
                    } else {
                        $("[data-currentPrice=true]").val(currentPrice);

                        if ($("[name='type']:checked").val() == 0) {
                            var length = $('[data-row]').length;
                            for (var i = 0; i < length; i++) {
                                var discountForRow = $($("td[data-order=5]")[i]).find("input").val();
                                var discountForRow = parseFloat(discountForRow);
                                var effectedRowPrice = $("[name='discountType']:checked").val() == 0 ? (currentPrice * ((100 - discountForRow) / 100)) : (currentPrice * ((100 + discountForRow) / 100));
                                effectedRowPrice = kendo.toString(effectedRowPrice, "N2");
                                effectedRowPrice = effectedRowPrice.replace(".", "");
                                effectedRowPrice = effectedRowPrice.replace(",", ".");
                                effectedRowPrice = parseFloat(effectedRowPrice);
                                $($("td[data-order=8]")[i]).find("input").val(effectedRowPrice);
                            }
                        }
                    }
                }
            },
            ShowCols: function () {
                for (var i = 0; i <= 7; i++) {
                    if ($("th[data-order=" + i + "]").attr("style") == undefined || $("th[data-order=" + i + "]").attr("style") == '') {
                        $("[data-order=" + i + "]").show();
                    }
                }

                if ($("[name='productType']:checked").val() == 2) {
                    $("td[data-order=7]").find("input").val($("#productId").data("kendoDropDownList").dataItem().currentSellingPrice)
                    $("[data-order=7]").show()
                    $("[data-order=8]").show()
                }
            },
            SetCurrrency: function () {
                let typeValue = $("[name='type']:checked").val();
                let conditionValue = $("[name='conditionType']:checked").val();

                if (typeValue == 0) {
                    $("[data-order=6]").hide();
                    $("[data-order=5]").show();
                } else {
                    $("[data-order=5]").hide();
                    $("[data-order=6]").show();
                }


                if (conditionValue == 1) {
                    $("[data-conditionCurr=minConditionCurrency]").hide();
                    $("[data-conditionCurr=minConditionMoneyCurrency]").show();
                } else if (conditionValue == 2) {
                    $("[data-conditionCurr=minConditionMoneyCurrency]").hide();
                    $("[data-conditionCurr=minConditionCurrency]").show();
                }

            },
            GetRowTemplate: function () {
                var templateRow = $('#rowTemplate');
                var field = $(templateRow)[0].content.querySelector("tbody");
                var importNode = document.importNode(field, true);
                return $(importNode);
            },
            RowDelete: function (_this) {
                var length = $('[data-row]').length;
                if (length <= 1) {
                    MesajWarning("Kayıt İşleminde en az bir kayıt olmalıdır.", "Silme İşlemi Başarısız");
                    return false;
                }

                var row = $(_this).parents(".table-row");
                var rowId = $(row).attr("data-row");
                $('[data-id="' + rowId + '"]').remove();
                $(row).remove();
                $.each($('[data-row]'), function (i, mainRow) {
                    var subRow = $('[data-id="' + $(mainRow).attr("data-row") + '"]');
                    var names = $(mainRow).find('[name]');
                    var subRowNames = $(subRow).find('[name]');
                    $.each($(names), function (j, elem) {
                        var name = $(elem).attr("name");
                        var field = name.split('.')[1];
                        $(elem).attr("name", 'BasePriceDetailItems[' + i + '].' + field);
                        if (field == "itemOrder") {
                            $(elem).val(length - i);
                        }
                    });
                    $.each($(subRowNames), function (j, elem) {
                        var name = $(elem).attr("name");
                        var field = name.split('.')[1];
                        $(elem).attr("name", 'BasePriceDetailItems[' + i + '].' + field);
                    })
                })
            },
            setCompanyDropDownTitle: function (e) {
                $("#companyDropDown").find(".k-input").text("Tüm Şirketlere Uygula");
                $("#companyDropDown").find(".k-dropdown-wrap").attr("style", "background-color:#ececec !important;");
            },
            setProductDropDownTitle: function (e) {
                $("#productDropDown").find(".k-input").text("Tüm Ürünlere Uygula");
                $("#productDropDown").find(".k-dropdown-wrap").attr("style", "background-color:#ececec !important;");
            },
            onChangeProduct(e) {
                page.functions.SetPrice();
            }
        }
    }

</script>
@using (Html.BeginForm("Insert", "VWPRD_CompanyBasedPriceDetail", FormMethod.Post, new Dictionary<string, object>() {
    { "class", "form-horizontal" },
    { "id", "VWPRD_CompanyBasedPriceDetailForm" },
    { "role", "form" },
    { "data-selector", "modalContainer" },
    { "data-formType", "Ajax" },
    { "data-before", "beforeFunc" }
}))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.id)
    @Html.HiddenFor(model => model.companyBasedPriceId)
    <div id="options">
        <div class="form-group" id="companyOptions">
            <div class="col-md-5">
                <div class="radio akilliRadioGrup clearfix">
                    @(Html.Akilli().RadioButtonGroupFor(a => a.companyType).Value(EnumPRD_CompanyBasedPriceCompanyType.AllCompanies))
                </div>
            </div>
            <div class="col-md-7" id="companyDropDown">
                @(Html.Akilli()
                .DropDownListFor(model => model.companyId)
                .OptionLabel("Lütfen Şirket Seçiniz..")
                .DataTextField("name")
                .DataValueField("id")
                .Action(b => b.Action("DataSourceDropDown", "VWCMP_Company", new { area = "CMP" }))
                .Sort(x => x.Add("name").Ascending())
                .Events(x => x.DataBound("page.functions.setCompanyDropDownTitle"))
                .Readonly(true)
                .Execute()
                )
            </div>
        </div>
        <div class="form-group" id="productOptions">
            <div class="col-md-5">
                @(Html.Akilli().RadioButtonGroupFor(a => a.productType).Value(EnumPRD_CompanyBasedPriceProductType.AllProducts))
            </div>
            <div class="col-md-7" id="productDropDown">
                @(
            Html.Akilli()
            .DropDownListFor(model => model.productId)
            .OptionLabel("Lütfen Ürün seçiniz..")
            .DataTextField("fullName")
            .DataValueField("id")
            .Template("#=TemplateEngine('productTemplate',data)#")
            .Action(b => b.Action("DataSourceDropDown", "VWPRD_Product", new { area = "PRD" }))
            .Sort(x => x.Add("code").Ascending())
            .Events(x => x.DataBound("page.functions.setProductDropDownTitle").Change("page.functions.onChangeProduct"))
            .Readonly(true)
            .Execute()
            )
            </div>
            <div class="col-md-7" id="categoryDropDown" style="display:none;">
                @(
            Html.Akilli()
            .DropDownListFor(model => model.categoryId)
            .OptionLabel("Lütfen Kategori seçiniz..")
            .DataTextField("fullname")
            .DataValueField("id")
            .Action(b => b.Action("DataSourceDropDown", "VWPRD_Category", new { area = "PRD" }))
            .Sort(x => x.Add("fullname").Ascending())
            .Execute("id")
        )
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-12">
                <div class="">
                    @(Html.Akilli().RadioButtonGroupFor(a => a.sellingType).Value(EnumPRD_CompanyBasedPriceSellingType.Genel))
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-12">
                <div class="">
                    @(Html.Akilli().RadioButtonGroupFor(a => a.conditionType).Value(EnumPRD_CompanyBasedPriceConditionType.Genel))
                </div>
            </div>
        </div>
        <div class="form-group" id="priceorDiscountDiv" style="display:none;">
            <div class="col-md-12">
                <div class="">
                    @(Html.Akilli().RadioButtonGroupFor(a => a.type).Value(EnumPRD_CompanyBasedPriceType.Oran))
                </div>
            </div>
        </div>
        <div class="form-group" id="discountTypeDiv">
            <div class="col-sm-12">
                <div class="radio akilliRadioGrup clearfix">
                    <input type="radio" name="discountType" id="discountType_0" checked value="0">
                    <label tabindex="0" class="radio-label" for="discountType_0">
                        Fiyat İndirimi
                    </label>
                    <input type="radio" name="discountType" id="discountType_1" value="1">
                    <label tabindex="0" class="radio-label" for="discountType_1">
                        Fiyat Artışı
                    </label>
                </div>
            </div>
        </div>

    </div>
    <div class="form-group">
        <div class="col-sm-12">
            <table id="productsTable" class="table" style="background-color: #f8f8f8;">
                <thead class="table-header" style="background-color: #c5c4c2;">
                    <tr>
                        <th data-order="0"></th>
                        <th data-order="1">Başlangıç Tarihi</th>
                        <th data-order="2">Bitiş Tarihi</th>
                        <th data-order="3" style="display: none;">Minimum Adet / Fiyat</th>
                        <th data-order="4" style="display: none;">Takit / Vade Sayısı</th>
                        <th data-order="5">İskonto Oranı</th>
                        <th data-order="6" style="display: none;">Fiyat</th>
                        <th width="10%" data-order="7" style="display: none;">Liste Fiyat</th>
                        <th width="15%" data-order="8" style="display: none;">İşlem Sonrası Satış Fiyatı</th>
                        <th width="3%" data-order="9"></th>
                    </tr>
                </thead>
                <tbody class="table-body">
                    <tr class="table-row table-row-2lines">
                        <td colspan="11">
                            <button type="button" id="newProduct" class="btn btn-md btn-warning pull-right" onclick="page.functions.AddRow(true)"><i class="fa fa-plus"></i> YENİ KAYIT EKLE </button>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="buttons">
        <button class="btn btn-md btn-danger pull-left" data-task="modalClose">Geri</button>
        <button class="btn btn-md btn-success pull-right" onclick="blockClick()" id="submitButtonId" type="submit">Kaydet</button>
    </div>
}
<template id="rowTemplate" data-selector="modalContainer">
    <tbody>
        <tr class="table-row" data-row="BasePriceDetailItems">
            <td data-order="0">
                <input type="hidden" data-item="companyBasedPriceId" value="@Model.companyBasedPriceId">
            </td>
            <td data-order="1">
                @(Html.Akilli().DatePickerFor(model => model.startDate).HtmlAttributes(new Dictionary<string, object>()
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen Başlangıç Tarihi Girin.."},
            })
            .Format(Extensions.DateFormatShort())
            .HtmlAttributes(new Dictionary<string, object>() { { "data-item", "startDate" }, { "class", "form-control" } })
            .Validate(Validations.Required)
            .Value(Model.startDate != null ? Model.startDate : DateTime.Now)
            )
            </td>
            <td data-order="2">
                @(Html.Akilli().DatePickerFor(model => model.endDate).HtmlAttributes(new Dictionary<string, object>()
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen Bitiş Tarihi Girin.."},
            })
            .Format(Extensions.DateFormatShort())
            .HtmlAttributes(new Dictionary<string, object>() { { "data-item", "endDate" }, { "class", "form-control" } })
            .Validate(Validations.Required)
            .Value(Model.endDate != null ? Model.endDate : DateTime.Now)
            )
            </td>
            <td data-order="3" style="display:none;">
                <div class="input-group m-b">
                    <input class="form-control" type="number" data-item="minCondition" data-calculate="keyup" />
                    <span class="input-group-addon" data-cur="currency" data-conditionCurr="minConditionMoneyCurrency">₺</span>
                    <span class="input-group-addon" data-cur="currency" data-conditionCurr="minConditionCurrency" style="display:none;"><i class="icon-circle-empty"></i></span>
                </div>
                <input type="hidden" data-name="minCondition" value="0" />
            </td>
            <td data-order="4" style="display:none;">
                <div class="input-group m-b">
                    <input class="form-control" type="number" data-item="monthCount" data-calculate="keyup" />
                    <span class="input-group-addon" data-cur="currency"><i class="icon-money"></i></span>

                </div>
                <input type="hidden" data-name="monthCount" value="0" />
            </td>
            <td data-order="5">
                <div class="input-group m-b">
                    <input class="form-control" type="number" data-item="discount" data-calculate="keyup" />
                    <span class="input-group-addon" data-cur="currency">%</span>
                </div>
                <input type="hidden" data-name="discount" value="0" />
            </td>
            <td data-order="6" style="display:none;">
                <div class="input-group m-b">
                    <input class="form-control" type="number" data-item="price" data-calculate="keyup" />
                    <span class="input-group-addon" data-cur="currency">₺</span>
                </div>
                <input type="hidden" data-name="price" value="0" />
            </td>
            <td data-order="7" style="display:none;">
                <div class="input-group m-b">
                    <input class="form-control" type="text" name="currentprice" disabled data-currentPrice="true" />
                    <span class="input-group-addon" data-cur="currency">₺</span>
                </div>

            </td>
            <td data-order="8" style="display:none;">
                <div class="input-group m-b">
                    <input class="form-control" type="text" name="effectedprice" disabled data-effectedPrice="true" />
                    <span class="input-group-addon" data-cur="currency">₺</span>
                </div>

            </td>
            <td data-order="9">
                <button class="btn btn-md btn-danger" onclick="page.functions.RowDelete(this)" type="button"><i class="fa fa-times"></i></button>
            </td>
        </tr>
    </tbody>
</template>
