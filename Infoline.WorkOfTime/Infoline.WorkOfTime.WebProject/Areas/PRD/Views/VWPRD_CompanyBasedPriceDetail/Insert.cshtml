@model Infoline.WorkOfTime.BusinessAccess.Business.Product.VMPRD_CompanyBasedPriceDetailModel
@{
    ViewBag.Title = "Özel Fiyat Belirleme";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
</style>
<script>
    $(document)
        .on("change", "[name='companyType']", function () {
            let value = $("[name='companyType']:checked").val();
            if (value == 0) { //Tüm Şirketlere
                $("#companyId").data("kendoDropDownList").value(-1);
                $("#companyId").data("kendoDropDownList").readonly()
                $("#companyDropDown").find(".k-input").text("Tüm Şirketlere Uygula");
                $("#companyDropDown").find(".k-dropdown-wrap").attr("style", "background-color:#ececec !important;");
            }
            else { //Seçili Şirkete
                $("#companyId").data("kendoDropDownList").readonly(false);
                $("#companyDropDown").find(".k-input").text("Lütfen Şirket Seçiniz");
                $("#companyDropDown").find(".k-dropdown-wrap").removeAttr("style");
            }
        })
        .on("change", "[name='productType']", function () {
            let value = $("[name='productType']:checked").val();
            if (value == 0) { //Tüm Ürünlere
                $("#productId").data("kendoDropDownList").value(-1);
                $("#categoryId").data("kendoDropDownList").value(-1);
                $("#productId").data("kendoDropDownList").readonly()
                $("#productDropDown").find(".k-input").text("Tüm Ürünlere Uygula");
                $("#productDropDown").find(".k-dropdown-wrap").attr("style", "background-color:#ececec !important;");
                $("#productDropDown").show();
                $("#categoryDropDown").hide();
                $("#priceorDiscountDiv").hide();


            }
            else if (value == 1) { //Seçili Kategoriye
                $("#productId").data("kendoDropDownList").value(-1);
                $("#categoryDropDown").show();
                $("#productDropDown").hide();
                $("#priceorDiscountDiv").hide();


            }
            else if (value == 2) { //Seçili Ürüne
                $("#productId").data("kendoDropDownList").value(-1);
                $("#categoryId").data("kendoDropDownList").value(-1);
                $("#productDropDown").find(".k-input").text("Lütfen Ürün Seçiniz..");
                $("#productDropDown").find(".k-dropdown-wrap").removeAttr("style");
                $("#productDropDown").show();
                $("#categoryDropDown").hide();
                $("#productId").data("kendoDropDownList").readonly(false);
                $("#priceorDiscountDiv").show();
                $("#priceDiscount0").prop("checked", true);
                $("#priceDiscount1").prop("checked", false);

            }
        })
        .on("change", "[name='sellingType']", function () {
            let value = $("[name='sellingType']:checked").val();
            if (value == 0 || value == 1) { //Genel veya Peşin
                $("[data-order=4]").hide();
            }
            else {
                if (value == 2) { //Taksitli
                    $($("[data-order=4]")[0]).text("Taksit Sayısı");
                }
                if (value == 3) { //Vadeli
                    $($("[data-order=4]")[0]).text("Vade Sayısı");
                }
                $("[data-order=4]").show();
            }
        })
        .on("change", "[name='conditionType']", function () {
            let value = $("[name='conditionType']:checked").val();
            if (value == 0) { //Genel
                $("[data-order=3]").hide();
            }
            else {
                if (value == 1) { //Minimum Satış Fiyatı
                    $($("[data-order=3]")[0]).text("Minimum Satış Tutarı");
                    $("#minConditionCurrency").show();
                }
                if (value == 2) { // Minimum Adet
                    $($("[data-order=3]")[0]).text("Minimum Birim");
                    $("#minConditionCurrency").hide();
                }
                $("[data-order=3]").show();
            }
        })
        .on("change", "[name='isPrice']", function () {
            let value = $("[name='isPrice']:checked").val();
            if (value == 0) { //Fiyat girelecek data-order=5
                $("[data-order=5]").hide();
                $("[data-order=6]").show();
            }
            else { //Oran Girilecek
                $("[data-order=6]").hide();
                $("[data-order=5]").show();
            }
        })
        .on("ready", function () {
            page.functions.AddRow(true);
        })
        .on("before:submit", "#VWPRD_CompanyBasedPriceDetailForm", function () {
            var inputs = $("td[data-order]");
            for (var i = 0; i < inputs.length; i++) {
                if ($(inputs[i]).attr("style") == "display:none") {
                    $(inputs[i]).find("input").prop("disabled", true)
                }
            }
        });


    var page = {};
    page = {
        defines: {
            isAllCompanies: 1,
            productTarget: 2,
            disabledInput: 0,
            isThereRecord: 0
        },
        functions: {
            AddRow: function (control) {
                //if (control == true) {
                //    var row = $('[data-row]').first();
                //    var product = $(row).find('[data-item=productId]').data("kendoDropDownList");

                //    if (product && (!product.value() || product.value() == "" || product.value() == null)) {
                //        MesajWarning("Lütfen önce ürün seçiniz.");
                //        return false;
                //    }
                //}

                var template = page.functions.GetRowTemplate();
                var length = $('#productsTable tbody tr:not(.table-row-2lines)').length;

                var ids = [];
                $(template).find("input").each(function (e) {
                    var id = $(this).attr("id");
                    if (id !== undefined) {
                        ids.push(id);
                        $(this).attr("id", id + length);
                    }
                });

                $(template).find("script").each(function () {
                    var _this = $(this);
                    var script = _this.html();
                    ids.forEach(function (id) {
                        if (script.includes('jQuery("#' + id + '")')) {
                            script = script.split('#' + id).join('#' + id + length);
                        }
                    });
                    _this.after($('<script/>').append(script));
                    _this.remove();
                });

                var dataItems = $(template).find('[data-item]');

                $.each(dataItems, function (i, item) {
                    var itemName = $(item).attr("data-item");
                    $(item).attr("name", "BasePriceDetailItems[" + length + "]." + itemName);
                    if (item.type == "number") {
                        $(item).attr("id", newGuid());
                    }
                })

                var rowId = newGuid();
                $(template).find('[data-row="BasePriceDetailItems"]').removeAttr("data-row").attr("data-row", rowId);
                $(template).find('[data-id="BasePriceDetailItems"]').removeAttr("data-id").attr("data-id", rowId);

                $(template).find('[data-item="itemOrder"]').val(length + 1);

                $('#productsTable').find("tbody").prepend($(template).html());

                $.each($('[type="number"]'), function (i, item) {
                    var id = $(item).attr("id");
                    if ($(item).attr("data-item") != "monthCount") {
                        if ($(item).attr("name") != undefined && $(item).attr("name").indexOf("price") > -1) {
                            $('#' + id).kendoNumericTextBox({
                                format: "N2",
                                min: 0,
                                value: 0,
                                step: 0.01,
                                decimals: 2,
                                spinners: false
                            });
                        } else {
                            $('#' + id).kendoNumericTextBox({
                                format: "N2",
                                min: 0,
                                value: 0,
                                step: 0.01,
                                spinners: false
                            });

                        }
                    } else {
                        $('#' + id).kendoNumericTextBox({
                            format: "N0",
                            min: 0,
                            value: 0,
                            step: 1,
                            spinners: false
                        });
                    }

                });
            },
            GetRowTemplate: function () {
                var templateRow = $('#rowTemplate');
                var field = $(templateRow)[0].content.querySelector("tbody");
                var importNode = document.importNode(field, true);
                return $(importNode);
            },
            RowDelete: function (_this) {
                var row = $(_this).parents(".table-row");
                var rowId = $(row).attr("data-row");

                $('[data-id="' + rowId + '"]').remove();
                $(row).remove();

                var length = $('[data-row]').length;

                $.each($('[data-row]'), function (i, mainRow) {
                    var subRow = $('[data-id="' + $(mainRow).attr("data-row") + '"]');
                    var names = $(mainRow).find('[name]');
                    var subRowNames = $(subRow).find('[name]');

                    $.each($(names), function (j, elem) {
                        var name = $(elem).attr("name");
                        var field = name.split('.')[1];

                        $(elem).attr("name", 'BasePriceDetailItems[' + i + '].' + field);

                        if (field == "itemOrder") {
                            $(elem).val(length - i);
                        }
                    });

                    $.each($(subRowNames), function (j, elem) {
                        var name = $(elem).attr("name");
                        var field = name.split('.')[1];

                        $(elem).attr("name", 'BasePriceDetailItems[' + i + '].' + field);
                    })
                })

            },
            setCompanyDropDownTitle: function (e) {
                $("#companyDropDown").find(".k-input").text("Tüm Şirketlere Uygula");
                $("#companyDropDown").find(".k-dropdown-wrap").attr("style", "background-color:#ececec !important;");
            },
            setProductDropDownTitle: function (e) {
                $("#productDropDown").find(".k-input").text("Tüm Ürünlere Uygula");
                $("#productDropDown").find(".k-dropdown-wrap").attr("style", "background-color:#ececec !important;");
            },
            onChangeProduct(e) {
                var value = this
                var dataitem = value.dataItem();
                var price = dataitem.currentSellingPrice;
                $("#basePrice").val(price);
            }
        }
    }
</script>
@using (Html.BeginForm("Insert", "VWPRD_CompanyBasedPriceDetail", FormMethod.Post, new Dictionary<string, object>() {
    { "class", "form-horizontal" },
    { "id", "VWPRD_CompanyBasedPriceDetailForm" },
    { "role", "form" },
    { "data-selector", "modalContainer" },
    { "data-formType", "Ajax" }
}))
{
@Html.AntiForgeryToken()
@Html.ValidationSummary(true)
@Html.HiddenFor(model => model.id)
@Html.HiddenFor(model => model.companyBasedPriceId)
<div id="options">
    <div class="form-group" id="companyOptions">
        <div class="col-md-5">
            <div class="radio akilliRadioGrup clearfix">
                @(Html.Akilli().RadioButtonGroupFor(a => a.companyType).Value(EnumPRD_CompanyBasedPriceCompanyType.AllCompanies))
            </div>
        </div>
        <div class="col-md-7" id="companyDropDown">
            @(Html.Akilli()
                .DropDownListFor(model => model.companyId)
                .OptionLabel("Lütfen Şirket Seçiniz..")
                .DataTextField("name")
                .DataValueField("id")
                .Action(b => b.Action("DataSourceDropDown", "VWCMP_Company", new { area = "CMP" }))
                .Sort(x => x.Add("name").Ascending())
                .Events(x => x.DataBound("page.functions.setCompanyDropDownTitle"))
                .Readonly(true)
                .Execute()
                )
        </div>
    </div>
    <div class="form-group" id="productOptions">
        <div class="col-md-5">
            @(Html.Akilli().RadioButtonGroupFor(a => a.productType).Value(EnumPRD_CompanyBasedPriceProductType.AllProducts))
        </div>
        <div class="col-md-7" id="productDropDown">
            @(
            Html.Akilli()
            .DropDownListFor(model => model.productId)
            .OptionLabel("Lütfen Ürün seçiniz..")
            .DataTextField("fullName")
            .DataValueField("id")
            .Template("#=TemplateEngine('productTemplate',data)#")
            .Action(b => b.Action("DataSourceDropDown", "VWPRD_Product", new { area = "PRD" }))
            .Sort(x => x.Add("code").Ascending())
            .Events(x => x.DataBound("page.functions.setProductDropDownTitle").Change("page.functions.onChangeProduct"))
            .Readonly(true)
            .Execute()
            )
        </div>
        <div class="col-md-7" id="categoryDropDown" style="display:none;">
            @(
            Html.Akilli()
            .DropDownListFor(model => model.categoryId)
            .OptionLabel("Lütfen Kategori seçiniz..")
            .DataTextField("fullname")
            .DataValueField("id")
            .Action(b => b.Action("DataSourceDropDown", "VWPRD_Category", new { area = "PRD" }))
            .Sort(x => x.Add("fullname").Ascending())
            .Execute("id")
        )
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-12">
            <div class="">
                @(Html.Akilli().RadioButtonGroupFor(a => a.sellingType).Value(EnumPRD_CompanyBasedPriceSellingType.Genel))
            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-12">
            <div class="">
                @(Html.Akilli().RadioButtonGroupFor(a => a.conditionType).Value(EnumPRD_CompanyBasedPriceConditionType.Genel))
            </div>
        </div>
    </div>
    <div class="form-group" id="priceorDiscountDiv" style="display:none;">
        <div class="col-md-12">
            <div class="radio akilliRadioGrup clearfix">
                <input type="radio" class="bg-focus" name="isPrice" checked id="priceDiscount0" value="0">
                <label tabindex="0" class="radio-label bg-focus" for="priceDiscount0">
                    Fiyat
                </label>
                <input type="radio" name="isPrice" id="priceDiscount1" value="1">
                <label tabindex="0" class="radio-label" for="priceDiscount1">
                    İskonto
                </label>
            </div>
        </div>
    </div>
</div>
<div class="form-group">
    <div class="col-sm-12">

        <table id="productsTable" class="table" style="background-color: #f8f8f8;">
            <thead class="table-header" style="background-color: #c5c4c2;">
                <tr>
                    <th width="20" data-order="0"></th>
                    <th width="30%" data-order="1">Başlangıç Tarihi</th>
                    <th width="30%" data-order="2">Bitiş Tarihi</th>
                    <th width="13%" data-order="3" style="display: none;">Minimum Adet / Fiyat</th>
                    <th width="15%" data-order="4" style="display: none;">Takit / Vade Sayısı</th>
                    <th width="20%" data-order="5">İskonto Oranı</th>
                    <th width="13%" data-order="6" style="display: none;">Fiyat</th>
                    <th width="70" data-order="7"></th>
                </tr>
            </thead>
            <tbody class="table-body">
                <tr class="table-row table-row-2lines">
                    <td colspan="11">
                        <button type="button" id="newProduct" class="btn btn-md btn-warning pull-right" onclick="page.functions.AddRow(true)"><i class="fa fa-plus"></i> YENİ KAYIT EKLE </button>
                    </td>
                </tr>
            </tbody>
        </table>

    </div>
</div>
<div class="buttons">
    <button class="btn btn-md btn-danger pull-left" data-task="modalClose">Geri</button>
    <button class="btn btn-md btn-success pull-right" type="submit">Kaydet</button>
</div>
}

<template id="rowTemplate" data-selector="modalContainer">
    <tbody>
        <tr class="table-row" data-row="BasePriceDetailItems">
            <td data-order="0">
                <input type="hidden" data-item="companyBasedPriceId" value="@Model.companyBasedPriceId">
            </td>
            <td data-order="1">
                @(Html.Akilli().DatePickerFor(model => model.startDate).HtmlAttributes(new Dictionary<string, object>()
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen Başlangıç Tarihi Girin.."},
            })
            .Format(Extensions.DateFormatShort())
            .HtmlAttributes(new Dictionary<string, object>() { { "data-item", "startDate" }, { "class", "form-control" } })
            .Validate(Validations.Required)
            .Value(Model.startDate != null ? Model.startDate : DateTime.Now)
            )
            </td>
            <td data-order="2">
                @(Html.Akilli().DatePickerFor(model => model.endDate).HtmlAttributes(new Dictionary<string, object>()
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen Bitiş Tarihi Girin.."},
            })
            .Format(Extensions.DateFormatShort())
            .HtmlAttributes(new Dictionary<string, object>() { { "data-item", "endDate" }, { "class", "form-control" } })
            .Validate(Validations.Required)
            .Value(Model.endDate != null ? Model.endDate : DateTime.Now)
            )
            </td>
            <td data-order="3" style="display:none;">
                <div class="input-group m-b">
                    <input class="form-control" type="number" data-item="minCondition" data-calculate="keyup" />
                    <span class="input-group-addon" data-cur="currency" id="minConditionCurrency">₺</span>
                </div>
                <input type="hidden" data-name="minCondition" value="0" />
            </td>
            <td data-order="4" style="display:none;">
                <div class="input-group m-b">
                    <input class="form-control" type="number" data-item="monthCount" data-calculate="keyup" />
                </div>
                <input type="hidden" data-name="monthCount" value="0" />
            </td>
            <td data-order="5">
                <div class="input-group m-b">
                    <input class="form-control" type="number" data-item="discount" data-calculate="keyup" />
                    <span class="input-group-addon" data-cur="currency">%</span>

                </div>
                <input type="hidden" data-name="discount" value="0" />
            </td>
            <td data-order="6" style="display:none;">
                <div class="input-group m-b">
                    <input class="form-control" type="number" data-item="price" data-calculate="keyup" />
                    <span class="input-group-addon" data-cur="currency">₺</span>
                </div>
                <input type="hidden" data-name="price" value="0" />
            </td>
            <td data-order="7">
                <button class="btn btn-md btn-danger" onclick="page.functions.RowDelete(this)" type="button"><i class="fa fa-times"></i></button>
            </td>
        </tr>
    </tbody>
</template>

