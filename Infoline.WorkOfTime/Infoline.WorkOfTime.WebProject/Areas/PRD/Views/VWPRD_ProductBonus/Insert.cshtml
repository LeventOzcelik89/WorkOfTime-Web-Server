@model Infoline.WorkOfTime.BusinessAccess.VMPRD_ProductBonusModel
@{
    ViewBag.Title = "Ürüne Prim Tanımla";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var userStatus = (PageSecurity)Session["userStatus"];
}
<link href="~/Content/Areas/PRD/QueryBuilder/css/query-builder.default.css" rel="stylesheet" data-selector="modalContainer" />
<script src="~/Content/Areas/PRD/QueryBuilder/js/query-builder.standalone.js" data-selector="modalContainer"></script>
<script src="~/Content/Areas/PRD/QueryBuilder/i18n/query-builder.tr.js" data-selector="modalContainer"></script>
<script src="~/Content/Themes/js/plugins/bootstrap-datetimepicker/js/moment.js" data-selector="modalContainer"></script>
<script type="text/javascript" data-selector="modalContainer">
     var _model = @(Html.Raw(Infoline.Helper.Json.Serialize(Model)));
    var _user = @(Html.Raw(Infoline.Helper.Json.Serialize(userStatus.user)));
    var request = {
        dfn: {
            pageLoad: false,
            loadControl: {
                items: false,
                loaded: false,
                itemLength: 0,
            },
        },
        fnc: {
            GetRowTemplate: function () {
                var templateRow = $('#rowTemplate');
                var field = $(templateRow)[0].content.querySelector("tbody");
                var importNode = document.importNode(field, true);
                return $(importNode);
            },
            AddRowForProduct: function (control) {
                if (control == true) {
                    var row = $('[data-row]').last();
                    var product = $(row).find('[data-item=productId]').data("kendoDropDownList");

                    if (product && (!product.value() || product.value() == "" || product.value() == null)) {
                        MesajWarning("Lütfen önce ürün seçiniz.");
                        return false;
                    }
                }

                var template = request.fnc.GetRowTemplate();
                var length = $('#productsTable tbody tr:not(.table-row-2lines)').length;

                var ids = [];
                $(template).find("input,select").each(function (e) {
                    var id = $(this).attr("id");
                    if (id !== undefined) {
                        var guid = newGuid();
                        $(this).attr("id", id + guid);

                        $(template).find("script").each(function () {
                            var _this = $(this);
                            var script = _this.html();
                            if (script.indexOf(id) > -1) {
                                script = script.split('#' + id).join('#' + id + guid);
                                _this.after($('<script>').append(script));
                                _this.remove();
                            }
                        });
                    }
                });

                var dataItems = $(template).find('[data-item]');

                $.each(dataItems, function (i, item) {
                    var itemName = $(item).attr("data-item");
                    $(item).attr("name", "ProductItems[" + length + "]." + itemName);
                    if (item.type == "number") {
                        $(item).attr("id", newGuid());
                    }
                })

                var rowId = newGuid();
                $(template).find('[data-row="ProductItems"]').removeAttr("data-row").attr("data-row", rowId);
                $(template).find('[data-id="ProductItems"]').removeAttr("data-id").attr("data-id", rowId);

                $(template).find('[data-item="itemOrder"]').val(length + 1);

                $('#productsTable').find("tbody").prepend($(template).html());

                $.each($('[type="number"]'), function (i, item) {
                    var id = $(item).attr("id");

                    if ($(item).attr("data-item") == "unitPrice") {
                        $('#' + id).kendoNumericTextBox({
                            format: "N2",
                            min: 0,
                            value: 0,
                            step: 0.01,
                            spinners: false,
                        });
                    }
                    else {
                        $('#' + id).kendoNumericTextBox({
                            format: "N2",
                            min: 0,
                            value: 0,
                            step: 0.01,
                            spinners: false
                        });
                    }
                })
            },
            RowDelete: function (_this) {
                var row = $(_this).parents(".table-row");
                var rowId = $(row).attr("data-row");

                $('[data-id="' + rowId + '"]').remove();
                $(row).remove();

                var length = $('[data-row]').length;

                $.each($('[data-row]'), function (i, mainRow) {
                    var items = $(mainRow).find('[data-item]');

                    $.each($(items), function (j, elem) {
                        var name = $(elem).attr("name");
                        var field = name.split('.')[1];

                        $(elem).attr("name", 'ProductItems[' + i + '].' + field);

                        if (field == "itemOrder") {
                            $(elem).val(length - i);
                        }
                    })
                })
            },
            LoadProducts: function () {
                request.dfn.loadControl.loaded = true;

                $.each(_model.ProductItems, function (i, item) {
                    var mainRow = $('[name="ProductItems[' + i + '].productId"]').parents("tr");

                    var unitPriceDropDown = $(mainRow).find('[data-item="unitPrice"]').data("kendoNumericTextBox");
                    var productDropDown = $('[name="ProductItems[' + i + '].productId"]').data("kendoDropDownList");
                    var descriptionBox = $(mainRow).find('[data-item="description"]');

                    $('[name="ProductItems[' + i + '].id"]').val(item.id);

                    productDropDown.value(item.productId);
                    unitPriceDropDown.value(item.unitPrice);
                    descriptionBox.val(item.description);

                    $('[name="ProductItems[' + i + '].productId"]').data("kendoDropDownList").trigger("change");
                })

                $('#customerId').data("kendoDropDownList").trigger("change");
                $('form').validator("validate");
            },
            Init: function () {
                if (request.dfn.pageLoad == false) {
                    request.dfn.pageLoad = true;

                    request.fnc.AddRowForProduct(false);

                    if (_model.ProductItems && _model.ProductItems.length > 0) {
                        $.each(_model.ProductItems, function (i, item) {
                            if (_model.ProductItems.length - 1 != i) {
                                request.fnc.AddRowForProduct(false);
                            }
                        })
                    }
                }
            },
        },
        events: {
            onDataBoundProduct: function (e) {
                request.dfn.loadControl.itemLength++;
                if (_model.ProductItems && _model.ProductItems.length != 0 && request.dfn.loadControl.loaded == false) {
                    if (request.dfn.loadControl.itemLength == _model.ProductItems.length) {
                        setTimeout(function () {
                            request.fnc.LoadProducts();
                        }, 100)
                    }
                }
            },
            changeProduct: function (e) {
                var dropdown = e.sender;
                var row = $(dropdown.element).parents(".table-row");
            },
        },
    };
    var rules_basic = {
        condition: 'AND',
        rules: [{
            id: 'unitPrice',
            operator: 'between',
            value: [1,10]
        }, {
            condition: 'OR',
            rules: [{
                id: 'date',
                operator: 'between',
                value: ['04/01/2022', '05/01/2022']
            }]
        }]
    };
    $(document).ready(function () {
        $('#builder').queryBuilder({
            plugins: ['bt-tooltip-errors'],
            filters: [{
                id: 'productId',
                label: 'Ürünler',
                type: 'integer',
                input: 'select',
                values: _model.products,
            },{
                    id: 'companyId',
                    label: 'Bayiler',
                    type: 'integer',
                    input: 'select',
                    values: _model.companies,
            },{
                id: 'unitPrice',
                label: 'Adet',
                type: 'integer',
                validation: {
                    min: 0,
                }
            }, {
                id: 'date',
                label: 'Tarih',
                type: 'date',
                plugin: 'datepicker',
                plugin_config: {
                    todayBtn: 'linked',
                    todayHighlight: true,
                    autoclose: true
                },
             }],
            rules: rules_basic
        });

        $('#btn-reset').on('click', function () {
            $('#builder').queryBuilder('reset');
        });
        $('#btn-set').on('click', function () {
            $('#builder').queryBuilder('setRules', rules_basic);
        });
        $('#btn-get').on('click', function () {
            var result = $('#builder').queryBuilder('getRules');
            if (!$.isEmptyObject(result)) {
                alert(JSON.stringify(result, null, 2));
            }
        });
        request.fnc.AddRowForProduct(true);
    })
        .on("before:submit", "#VWPRD_ProductBonusForm", function (e, res) {
            var queries = $('#builder').data().queryBuilder;
            $("#query").val(queries.getSQL(false).sql);
        })
</script>
@using (Html.BeginForm("Insert", "VWPRD_ProductBonus", FormMethod.Post, new Dictionary<string, object>() {
    { "class", "form-horizontal" },
    { "role", "form" },
    { "data-selector", "modalContainer" },
    { "data-formType", "Ajax" },
    { "id", "VWPRD_ProductBonusForm" }
}))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.id)
    @Html.HiddenFor(model => model.query)
    <div class="form-group">
        <div class="col-md-6">
            <label class="control-label label-md req" for="companyId">Kural Kodu</label>
            @Html.TextBoxFor(a => a.code, new Dictionary<string, object>()
                    {
                        {"class", "form-control"},
                        {"placeholder", "Lütfen Kural Kodu Giriniz." }
                    }).Validate(Validations.TextTurkceSpace09(true, 0, 1000))
        </div>
        <div class="col-md-6">
            <label class="control-label label-md req" for="companyId">Kural Adı</label>
            @Html.TextBoxFor(a => a.ruleName, new Dictionary<string, object>()
                    {
                        {"class", "form-control"},
                        {"placeholder", "Lütfen Kural Adı Giriniz." }
                    }).Validate(Validations.TextTurkceSpace09(true, 0, 1000))
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-12">
            <label class="control-label label-md req" for="query">Query</label>
            <div id="builder"></div>
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-12">
            <label class="control-label label-md" for="companyId">Ek Prim</label>
            @Html.TextBoxFor(a => a.present, new Dictionary<string, object>()
                    {
                        {"class", "form-control"},
                        {"placeholder", "Lütfen Ek Prim Giriniz." }
                    }).Validate(Validations.TextTurkceSpace09(false, 0, 1000))
        </div>
    </div>
    <label class="control-label label-md" for="query">Ürün Birim Fiyat</label>
    <table id="productsTable" class="table" style="background-color: #f8f8f8;">
        <thead class="table-header" style="background-color: #c5c4c2;">
            <tr>
                <th width="60%">ÜRÜN</th>
                <th width="40%">BİRİM FİYATI</th>
                <th width="50"></th>
            </tr>
        </thead>
        <tbody class="table-body">
            <tr class="table-row table-row-2lines">
                <td colspan="11">
                    <button type="button" id="newProduct" class="btn btn-md btn-warning pull-right" onclick="request.fnc.AddRowForProduct(true)"><i class="fa fa-plus"></i> YENİ ÜRÜN EKLE </button>
                </td>
            </tr>
        </tbody>
    </table>


    <div class="buttons">
        <button class="btn btn-md btn-danger pull-left" data-task="modalClose">Geri</button>
        <button class="btn btn-md btn-success pull-right" type="submit">Kaydet</button>
    </div>

}
<template id="rowTemplate" data-selector="modalContainer">
    <tbody>
        <tr class="table-row" data-row="ProductItems">
            <td>
                @(Html.Akilli()
                    .DropDownListFor(a=>a.bonusProductId)
                    .OptionLabel("Lütfen Ürün Seçiniz..")
                    .DataTextField("name")
                    .DataValueField("id")
                    .Action(b => b.Action("DataSourceDropDown", "VWPRD_Product", new { area = "PRD" }))
                    .Filter<VWPRD_Product>(c => c.stockType == (int)EnumPRD_ProductStockType.SeriNoluTakip && c.type == (int)EnumPRD_ProductType.TicariMal)
                    .Template("#=TemplateEngine('productTemplate',data)#")
                    .Sort(x => x.Add("name").Ascending())
                    .Events(e => { e.DataBound("request.events.onDataBoundProduct"); e.Change("request.events.changeProduct"); })
                    .HtmlAttributes(new Dictionary<string, object>() { { "data-item", "productId" }, { "class", "form-control" } })
                    .Execute("id")
                )

                <input type="hidden" data-item="itemOrder">
                <input type="hidden" data-item="productBonusId" value="@Model.id">
                <input type="hidden" data-item="id">
            </td>

            <td>
                <div class="input-group m-b">
                    <input class="form-control" type="number" data-item="unitPrice" />
                    <span class="input-group-addon">TL</span>
                    <input type="hidden" data-item="unitId" />
                </div>
            </td>
            <td>
                <button class="btn btn-md btn-danger" onclick="request.fnc.RowDelete(this)" type="button"><i class="fa fa-times"></i></button>
            </td>
        </tr>
    </tbody>
</template>