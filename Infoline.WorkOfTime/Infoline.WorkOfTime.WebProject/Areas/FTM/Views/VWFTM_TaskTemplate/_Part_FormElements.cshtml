@model Infoline.WorkOfTime.BusinessAccess.TaskSchedulerModel
@{
    Layout = null;
}

<style type="text/css">
    #insertRadio.akilliRadioGrup i {
        font-size: 30px;
    }

        #insertRadio.akilliRadioGrup i.icon-shuffle {
            font-size: 18px !important;
        }

        #insertRadio.akilliRadioGrup i.icon-retweet-3 {
            font-size: 18px;
        }

    #insertRadio.akilliRadioGrup label {
        width: 8.4% !important;
        text-align: center;
        font-size: 12px;
        font-weight: bold;
        max-height: 80px;
        overflow: hidden;
    }

    .akilliRadioGrup > input:checked + label[for=priority_0] {
        background-color: #EF5352;
    }

    .akilliRadioGrup > input:checked + label[for=priority_1] {
        background-color: #F8AC59;
    }

    .akilliRadioGrup > input:checked + label[for=priority_2] {
        background-color: #1ab394;
    }
</style>

<script type="text/javascript">

    function onChangeCompany(e) {
        var companyId = this.value();
        var personElem = $('#TemplateModel_assignableUsers').data("kendoMultiSelect");
        var basefilter = personElem.options.dataSource.filter;
        personElem.dataSource.filter(kendo.filterAdd(basefilter, 'CompanyId', companyId, "eq"));
    }

    function onBoundPerson(e) {
        e.sender.trigger("change");
    }

    function onChangePerson(e) {
        $('#PersonAvaibles').empty();
        if (e.sender.value().length > 0) {
            $.each(e.sender.value(), function (i, item) {
                var res = $.ajax({
                    type: "POST",
                    url: '/FTM/VWFTM_Task/GetPermitUserAvailableStatus',
                    data: { userid: item },
                    async: false
                }).responseJSON;
                if (res.objects.permits.length > 0) {
                    $('#PersonAvaibles').removeClass('hide');

                    $.each(res.objects.permits, function (p, per) {
                        var startdate = kendo.toString(new Date().FromJson(per.StartDate), 'dd.MM.yyyy HH:mm');
                        var enddate = kendo.toString(new Date().FromJson(per.EndDate), 'dd.MM.yyyy HH:mm')
                        var txt = '<div><i class="fa fa-calendar"></i> ' + per.Person_Title + ':' + startdate + ' - ' + enddate + ' Tarihleri Arası İzinli </div>';
                        $('#PersonAvaibles').append(txt);

                    })

                }

                if (res.objects.taskCount > 0) {
                    $('#PersonAvaibles').removeClass('hide');
                    var txt2 = '<h5><i class="fa fa-tasks m-r-xs"></i> ' + res.objects.userName + ' Çözüm Bildirilmemiş İş Sayısı : ' + res.objects.taskCount + ' Adet</h5>';

                    $('#PersonAvaibles').append(txt2);
                }
            })
        }

        var values = e.sender.value();
        $('[data-selector="personSelection"]')[values.length == 0 ? "hide" : "show"]();
    }

    function onChangeCustomer(e) {
      
        var customer = e.sender.dataItem();
        if (this.value() != "") {
            var filter = ("(lastActionDataCompanyId~eq~'" + customer.id + "')");
            var filterJSON = kendo.filterParser(filter);
            $('#TemplateModel_PRD_Inventory_Ids').data("kendoMultiSelect").dataSource.filter(filterJSON);
            $("#TemplateModel_PRD_Inventory_Ids").data("handler").enable(true);
            $("#TemplateModel_location").val(customer.location);
            haritalar['TemplateModel_location'].feature.remove("DrawLayer", "DrawFeature");
            haritalar['TemplateModel_location'].feature.add("DrawLayer", "DrawFeature", customer.location);
        } else {
            $("#TemplateModel_PRD_Inventory_Ids").data("handler").enable(false);
            $("#TemplateModel_PRD_Inventory_Ids").data("handler").value([]);
        }
        if (customer.id != null && customer.id != '') {
          
            var tagifys = $("#sendedCustomer").data("tagify");
            var items = e.sender.dataItem();
            if (tagifys != null) {
                tagifys.removeAllTags();
            }

            var res = $.ajax({
                type: "POST",
                url: '/FTM/VWFTM_Task/GetCustomerMail',
                data: { userid: customer.id },
                async: false
            }).responseJSON || [];
            

            if (res[0] == null) {
                var ss = $('#sendedCustomer').data("tagify");
                ss.settings.whitelist = res;
            }
            else {
                var ss = $('#sendedCustomer').data("tagify");
                ss.settings.whitelist = res;
            }

        }
        else {
            $('#sendedCustomer').tagify({
                whitelist: [],
                placeholder: "Lütfen Mail Adresini yazın ve Enter'a basınız",
                dropdown: {
                    maxItems: 99999999999,           // <- mixumum allowed rendered suggestions
                    //classname: "tags-look", // <- custom classname for this dropdown, so it could be targeted
                    enabled: 0,             // <- show suggestions on focus
                    closeOnSelect: false    // <- do not hide the suggestions dropdown once an item has been selected
                }
            });
            var ss = $('#sendedCustomer').data("tagify");
                ss.removeAllTags();
                ss.settings.whitelist = [];   
        }
    }

    $(document)
        .on("change", '[name="TemplateModel.type"][type="radio"]', function (c) {
            $('#TemplateModel_location, #TemplateModel_PRD_Inventory_Ids').prop("required", false);
            var type = $(this).val();
            if (type == 6 || type == 7 || type == 5) {
                $('#TemplateModel_location').prop("required", true);
            } else {
                $("#TemplateModel_PRD_Inventory_Ids").data("handler").value([]);
            }
        })
        .on("change", '[name="TemplateModel.sendMailCustomer"]', function () {
            var getChecked = $('[name="TemplateModel.sendMailCustomer"]:checked').val();
            if (getChecked == 1) {
                $("#mailToCustomer").removeClass("hidden");
            }
            else {
                $("#mailToCustomer").addClass("hidden");
            }

        })
        .on("before:submit", "#MultipleForm", function () {
            var tags = $("#sendedCustomer").data("tagify");
            if (tags && tags.value) {
                $("#sendedCustomer").val(tags.value.map(a => a.value).join(","))
            }


        })

</script>

<div class="clearfix m-b-md usel">
    <div class="radio akilliRadioGrup clearfix" id="insertRadio">
        @foreach (var item in Infoline.Helper.EnumsProperties.EnumToArrayGeneric<EnumFTM_TaskType>().OrderBy(x => x.Generic["order"]))
        {
            @(Html.RadioButtonFor(model => model.TemplateModel.type, item.Key, new Dictionary<string, object> { { "id", "Type" + item.Key } }))
            <label for="Type@(item.Key)" tabindex="0" class="radio-label">
                <i class="@item.Generic["icon"]" data-toggle="tooltip" data-placement="bottom" data-original-title=" @item.Value"></i><br />
                @item.Value
            </label>
        }
    </div>
</div>

<div class="form-group" data-elem="TaskTemplateModel.name">
    <div class="col-md-4">
        <label class="control-label label-md req" for="name">Şablon Adı</label>
    </div>
    <div class="col-md-8">
        @(Html.TextBoxFor(a => a.TemplateModel.name, new Dictionary<string, object> {
        { "class", "form-control" },
        { "placeholder", "Şablon Adını Girin" },
    }).Validate(Validations.TextProduct(true))
    )
    </div>
</div>

<div class="form-group">
    <div class="col-md-4">
        <label class="control-label label-md req" for="customerId">Müşteri İşletme</label>
    </div>
    <div class="col-md-8">
        @(
        Html.Akilli()
        .DropDownListFor(model => model.TemplateModel.customerId)
        .OptionLabel("Lütfen Müşteri İşletmeyi Seçiniz..")
        .DataValueField("id")
        .DataTextField("fullName")
        .Template("#=TemplateEngine('companyTemplate',data)#")
        .Action(b => b.Action("DataSourceDropDown", "VWCMP_Company", new { area = "CMP" }))
        .BasicInsert(Url.Action("Insert", "VWCMP_Company", new { area = "CMP" }), "name", true)
        .Events(a => { a.Change("onChangeCustomer"); a.DataBound("onChangeCustomer"); })
        .Sort(x => x.Add("fullName").Ascending())
        .Validate(Validations.Required)
        .Execute()
        .Name("TemplateModel.customerId")
        .Id("TemplateModel_customerId")
            )
    </div>
</div>

<div class="form-group">
    <div class="col-md-4">
        <label class="control-label label-md " for="customerStorageId">Şube/Depo/Kısım</label>
    </div>
    <div class="col-md-8">
        @(
            Html.Akilli()
            .DropDownListFor(model => model.TemplateModel.customerStorageId)
            .OptionLabel("Lütfen Şube/Depo/Kısım Seçimi Yapınız..")
            .DataTextField("fullName")
            .DataValueField("id")
            .Template("#=TemplateEngine('storageTemplate',data)#")
            .ValueTemplate("#=fullName#)")
            .Action(b => b.Action("DataSourceDropDown", "VWCMP_Storage", new { area = "CMP" }))
            .CascadeFrom("TemplateModel_customerId")
            .CascadeFromField("companyId")
            .Sort(x => x.Add("fullName").Ascending())
            .Execute()
            .Name("TemplateModel.customerStorageId")
            .Id("TemplateModel_customerStorageId")
                )
    </div>
</div>

<div class="form-group">
    <div class="col-md-4">
        <label class="control-label label-md req" for="EstimatedTaskMinutes">Tahmini Görev Süresi</label>
    </div>
    <div class="col-md-8">


        <div class="input-group">

            @(
        Html.Akilli().NumericTextBoxFor(a => a.TemplateModel.estimatedTaskMinute)
        .Format("N0").Decimals(0).Min(0).Validate(Validations.Required)
        .Name("TemplateModel.estimatedTaskMinute")
        .Id("TemplateModel_estimatedTaskMinute")
    )

            <span class="input-group-addon">dakika</span>
        </div>


    </div>
</div>

<div class="form-group">
    <div class="col-md-4">
        <label class="control-label label-md req" for="priority">Görev Önceliği</label>
    </div>
    <div class="col-md-8">
        @(Html.Akilli().RadioButtonGroupFor(a => a.TemplateModel.priority).Value(EnumFTM_TaskPriority.Orta))
    </div>
</div>

<div class="form-group">
    <div class="col-md-4">
        <label class="control-label label-md" for="CMP_Types">Görev Konuları</label>
    </div>
    <div class="col-md-8">
        @(Html.Akilli()
     .MultiSelect("TemplateModel.FTM_TaskTemplateSubjectTypeIds")
     .Placeholder("Lütfen Görev Konusu Seçiniz..")
     .DataTextField("name")
     .DataValueField("id")
     .Action(b => b.Action("DataSourceDropDown", "FTM_TaskSubject", new { area = "FTM" }))
     .Sort(x => x.Add("name").Ascending())
     .BasicInsert(Url.Action("Insert", "FTM_TaskSubject", new { area = "FTM" }), "name")
     .Execute("id")
     .Id("TemplateModel_FTM_TaskTemplateSubjectTypeIds")
            )
    </div>
</div>

<div class="form-group" data-cascade="[type='radio'][name='TemplateModel.type']" data-show="5,6,7">
    <div class="col-md-4">
        <label class="control-label label-md req" id="locationLabel" for="location">Görev Konumu</label>
    </div>
    <div class="col-md-8">
        @(
        Html.Akilli().MapInputFor(a => a.TemplateModel.location).
        HelpText("Lütfen Lokasyon seçiniz.").
        HtmlAttributes(new Dictionary<string, object>()
        {
                    {"class", "form-control"},
                    {"placeholder", "Lütfen Lokasyon Giriniz.."},
                    { "id", "TemplateModel_location" }
        }).
        Opened(false).
        ZoomLevel(5).
        Navigation(false).
        Searchable(true).
        Validate(Validations.Required)
        .Name("TemplateModel.location")
            )
    </div>
</div>

<div class="form-group" data-cascade="[type='radio'][name='TemplateModel.type']" data-show="0,1,2,3,4,8,9,10">
    <div class="col-md-4">
        <label class="control-label label-md" id="fixtureLabel" for="PRD_Inventory_Ids">Görevlendirilecek Envanter(ler)</label>
    </div>
    <div class="col-md-8">
        @(Html.Akilli()
        .MultiSelect("TemplateModel.PRD_Inventory_Ids")
        .Id("TemplateModel_PRD_Inventory_Ids")
        .Placeholder("Lütfen Envanter Seçiniz..")
        .DataTextField("searchField")
        .DataValueField("id")
        .Action(b => b.Action("DataSourceDropDown", "VWPRD_Inventory", new { area = "PRD" }))
        .Sort(x => x.Add("fullName").Ascending())
        .ItemTemplate("#=TemplateEngine('inventoryTemplate', data)#")
        .Enable(false)
        .Value(Model.TemplateModel.taskTemplateInventories.Select(a => a.inventoryId).ToArray())
        .Execute()
            )
    </div>
</div>

<div class="form-group">
    <div class="col-md-4">
        <label class="control-label label-md" for="companyId">Görevli İşletmem</label>
    </div>
    <div class="col-md-8">
        @(
        Html.Akilli()
        .DropDownListFor(model => model.TemplateModel.companyId)
        .OptionLabel("Lütfen sorumlu işletmeyi seçiniz..")
        .DataValueField("id")
        .DataTextField("fullName")
        .Template("#=TemplateEngine('companyTemplate',data)#")
        .Action(b => b.Action("DataSourceDropDown", "VWCMP_Company", new { area = "CMP" }))
        .Filter<VWCMP_Company>(x => x.type == (int)EnumCMP_CompanyType.Benimisletmem)
        .Events(e => { e.Change("onChangeCompany"); })
        .Sort(x => x.Add("fullName").Ascending())
        .Execute()
        .Name("TemplateModel.companyId")
        .Id("TemplateModel_companyId")
            )
    </div>
</div>

<div class="form-group">
    <div class="col-md-4">
        <label class="control-label label-md" for="assignableUsers">Görevlendirilecek Personeller</label>
    </div>
    <div class="col-md-8">
        @(
        Html.Akilli()
        .MultiSelectFor(a => a.TemplateModel.assignableUsers)
        .Placeholder("Lütfen sorumlu personelleri seçiniz..")
        .DataValueField("id")
        .DataTextField("FullName")
        .ItemTemplate("#=TemplateEngine('userTemplate',data)#")
        .Action(b => b.Action("DataSourceDropDown", "VWSH_User", new { area = "SH" }))
        .Filter<VWSH_User>(a => a.type == (int)(EnumSH_UserType.MyPerson) && a.IsWorking == true && Model.TemplateModel.personUserIds.Contains(a.id))
        .Events(e => { e.Change("onChangePerson").Close("onChangePerson").DataBound("onBoundPerson"); })
        .Sort(x => x.Add("FullName").Ascending())
        .Execute()
        .Name("TemplateModel.assignableUsers")
        .Id("TemplateModel_assignableUsers")
            )
    </div>
</div>

<div class="hide alert warning" id="PersonAvaibles"></div>

<div class="form-group">
    <div class="col-md-4">
        <label class="control-label label-md" for="helperUsers">Yardımcı Personeller</label>
    </div>
    <div class="col-md-8">
        @(
        Html.Akilli()
        .MultiSelectFor(a => a.TemplateModel.helperUsers)
        .Placeholder("Lütfen yardımcı personelleri seçiniz..")
        .DataValueField("id")
        .DataTextField("FullName")
        .ItemTemplate("#=TemplateEngine('userTemplate',data)#")
        .Action(b => b.Action("DataSourceDropDown", "VWSH_User", new { area = "SH" }))
        .Filter<VWSH_User>(a => a.type == (int)(EnumSH_UserType.MyPerson) && a.IsWorking == true && Model.TemplateModel.personUserIds.Contains(a.id))
        .Sort(x => x.Add("FullName").Ascending())
        .Execute()
        .Name("TemplateModel.helperUsers")
        .Id("TemplateModel_helperUsers")
            )
    </div>
</div>

<div class="form-group">
    <div class="col-md-4">
        <label class="control-label label-md" for="companyCarId">Araç</label>
    </div>
    <div class="col-md-8">
        @(Html.Akilli()
     .DropDownListFor(model => model.TemplateModel.companyCarId)
     .OptionLabel("Lütfen Araç Seçiniz..")
     .DataTextField("plate")
     .DataValueField("id")
     .Action(b => b.Action("DataSourceDropDown", "VWCMP_CompanyCars", new { area = "CMP" }))
     .Sort(x => x.Add("name").Ascending())
     .BasicInsert(Url.Action("Insert", "VWCMP_CompanyCars", new { area = "CMP" }), "plate")
     .Execute("id")
     .Name("TemplateModel.companyCarId")
     .Id("TemplateModel_companyCarId")
            )
    </div>
</div>

<div class="form-group">
    <div class="col-md-4">
        <label class="control-label label-md" for="description">Görev Açıklaması</label>
    </div>
    <div class="col-md-8">
        @Html.TextAreaFor(a => a.TemplateModel.description, new Dictionary<string, object>()
        {
            {"class", "form-control"},
            {"placeholder", "Lütfen Açıklama Giriniz." }
        }).Validate(Validations.TextTurkceSpace09(false, 0, 1000))
    </div>
</div>
<div class="form-group">
    <div class="col-md-4">
        <label for="TemplateModel.sendMailCustomer">Tamamlandı Bildirimi Yapılsın Mı?</label>
    </div>
    <div class="col-md-8">
        <div class="clearfix m-b-md">
            <div class="radio akilliRadioGrup clearfix">
                @foreach (var item in Infoline.Helper.EnumsProperties.EnumToArrayGeneric<EnumFTM_TaskPersonSendMailCustomer>().OrderBy(x => x.Generic["order"]))
                {

                    @(Html.RadioButtonFor(model => model.TemplateModel.sendMailCustomer, item.Key, new Dictionary<string, object> { { "id", "TemplateModel.sendMailCustomer" + item.Key } } ))
                    <label for="TemplateModel.sendMailCustomer@(item.Key)" tabindex="0" class="radio-label">
                        @item.Value
                    </label>
                }
            </div>
        </div>
    </div>
</div>
<div class="form-group hidden" id="mailToCustomer">
    <div class="col-md-4">
        <label class="control-label label-md" for="sendedCustomer">Mail Atılacak Müşteriler</label>

    </div>
    <div class="col-md-8 ">
        <input name="TemplateModel.sendedCustomer" id="sendedCustomer" type="text" />
    </div>
</div>




<div style="display:none;" data-selector="personSelection">
    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="hasVerifyCode">Onay Kodu Doğrulaması?</label>
        </div>
        <div class="col-md-7 radio m-l-sm">
            <label class="checkbox-inline">@Html.Kendo().RadioButtonFor(model => model.TemplateModel.hasVerifyCode).Value(true).Checked(Model.TemplateModel.hasVerifyCode == true) <span> Evet</span></label>
            <label class="checkbox-inline">@Html.Kendo().RadioButtonFor(model => model.TemplateModel.hasVerifyCode).Value(false).Checked(Model.TemplateModel.hasVerifyCode == false) <span> Hayır</span></label>
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="hasVerifyCode">Mail Bilgilendirmesi?</label>
        </div>
        <div class="col-md-7 radio m-l-sm">
            <label class="checkbox-inline">@Html.Kendo().RadioButtonFor(model => model.TemplateModel.sendMail).Value(true).Checked(Model.TemplateModel.sendMail == true) <span> Evet</span></label>
            <label class="checkbox-inline">@Html.Kendo().RadioButtonFor(model => model.TemplateModel.sendMail).Value(false).Checked(Model.TemplateModel.sendMail == false) <span> Hayır</span></label>
        </div>
    </div>
</div>
