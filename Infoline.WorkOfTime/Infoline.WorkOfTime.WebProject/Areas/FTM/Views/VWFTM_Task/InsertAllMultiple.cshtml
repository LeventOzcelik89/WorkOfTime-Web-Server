@model VMFTM_TaskModel
@{
    ViewBag.Title = "Yeni Çoklu Görev Ekle";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var persons = Model.personUserIds.ToList();
}

<script type="text/x-kendo-template" id="taskUserTemplate" data-selector="modalContainer">
    <div style='position:relative'>
        <div class="clearfix" style="padding:8px 0;">
            <img class="img-circle img-responsive pull-left" style="width:60px;height:60px;" src="#:(ProfilePhoto ? ProfilePhoto : '/Content/Custom/img/na.png')#" onerror="ImageError(this, '/Content/Custom/img/na.png')" />
            <div style="width:calc(100% - 70px);height:60px;float:right;">
                <div class="template-item">#:FullName#</div>
                <div class="template-item"><small>#:(Company_Title ? Company_Title : '-')#</small></div>
                <a style='float: right;top: 15px;position: absolute;right: 15px;' class='btn btn-success xs' target="blank" href='/FTM/VWFTM_Task/PersonTasks?personId=#=id#'>Görevleri</a>
                <div class="template-item">
                    <small>#:(title ? title : '')#</small>
                    #if(IsWorking == false){#
                    <div class="pull-right"><span class="badge badge-danger" style="" data-original-title="#:JobLeavingDescription#"> İşten ayrıldı. </span></div>
                    #}#

                </div>

            </div>

        </div>
    </div>
</script>


<script data-selector="modalContainer" type="text/javascript">
    function onChangeCompany(e) {
        var companyId = this.value();
        var personElem = $('#assignableUsers').data("kendoMultiSelect");
        var basefilter = personElem.options.dataSource.filter;
        personElem.dataSource.filter(kendo.filterAdd(basefilter, 'CompanyId', companyId, "eq"));
    }

    function onBoundPerson(e) {
        e.sender.trigger("change");
    }

    function onChangePerson(e) {
        $('#PersonAvaibles').empty();
        if (e.sender.value().length > 0) {
            $.each(e.sender.value(), function (i, item) {
                var res = $.ajax({
                    type: "POST",
                    url: '/FTM/VWFTM_Task/GetPermitUserAvailableStatus',
                    data: { userid: item },
                    async: false
                }).responseJSON;
                if (res.objects.permits.length > 0) {
                    $('#PersonAvaibles').removeClass('hide');

                    $.each(res.objects.permits, function (p, per) {
                        var startdate = kendo.toString(new Date().FromJson(per.StartDate), 'dd.MM.yyyy HH:mm');
                        var enddate = kendo.toString(new Date().FromJson(per.EndDate), 'dd.MM.yyyy HH:mm')
                        var txt = '<div><i class="fa fa-calendar"></i> ' + per.Person_Title + ':' + startdate + ' - ' + enddate + ' Tarihleri Arası İzinli </div>';
                        $('#PersonAvaibles').append(txt);

                    })

                }

                if (res.objects.taskCount > 0) {
                    $('#PersonAvaibles').removeClass('hide');
                    var txt2 = '<h5><i class="fa fa-tasks m-r-xs"></i> ' + res.objects.userName + ' Çözüm Bildirilmemiş İş Sayısı : ' + res.objects.taskCount + ' Adet</h5>';

                    $('#PersonAvaibles').append(txt2);
                }
            })
        }

        var values = e.sender.value();
        $('[data-selector="personSelection"]')[values.length == 0 ? "hide" : "show"]();
    }

    function GetContinuingTask(userid) {
        var res = $.ajax({
            type: "POST",
            url: '/FTM/VWFTM_Task/GetContinuingTask',
            data: { userid: userid },
            async: false
        }).responseJSON;
        return res.objects;
    }

    function GetUserPermit(userid) {
        var res = $.ajax({
            type: "POST",
            url: '/FTM/VWFTM_Task/GetPermitUserAvailableStatus',
            data: { userid: userid },
            async: false
        }).responseJSON;
        var messageData = '';
        if (res.result) {
            return res.objects;
        }
        else {
            return res.objects;
        }
    }

    $(document)
        .on("change", '[name="type"][type="radio"]', function (c) {
            $('#location,#fixtureIds').prop("required", false);
            var type = $(this).val();
            if (type == 6 || type == 7 || type == 5) {
                $('#location').prop("required", true);
            } else {
                $("#fixtureIds").data("handler").value([]);
            }
        });
</script>



<script type="text/x-kendo-template" id="assignableUserTemplate" data-selector="modalContainer">
    <table class="table shoping-cart-table">
        <tbody>
            <tr>
                <td style="width:15%;text-align: center;">
                    <img class="img-circle img-responsive pull-left" style="width:60px;height:60px;" src="#:(ProfilePhoto ? ProfilePhoto : '/Content/Custom/img/na.png')#" onerror="ImageError(this, '/Content/Custom/img/na.png')" />
                </td>
                <td class="desc" style="width:40%;">
                    <div style="font-size:13px;">#=FullName#</div>
                    <div style="font-size:13px;">#=Company_Title#</div>
                    <div style="font-size:13px;">#=title#</div>
                </td>
                <td style="width:15%;vertical-align: middle;">
                    <h5 style="vertical-align: middle;" data-original-title="Çözüm Bildirilmemiş İş Sayısı" data-placement="right" class="m-b-xs">
                        <i class="fa fa-tasks   m-r-xs"></i>#:GetContinuingTask(id)# Adet
                    </h5>
                </td>
                <td style="width:35%;vertical-align: middle;">
                    #if(GetUserPermit(id).length > 0){#
                    #var data = GetUserPermit(id)#

                    #for (var i=0; i<data.length; i++){#
                                                  #var startdate=kendo.toString(new Date().FromJson(data[i].StartDate), 'dd.MM.yyyy HH:mm' )#
                                                  #var enddate=kendo.toString(new Date().FromJson(data[i].EndDate), 'dd.MM.yyyy HH:mm' )#

                    <div data-original-title="#:startdate# - #:enddate# Tarihleri Arası İzinli" data-placement="left" style="font-size:13px;vertical-align: middle;"><i class="fa fa-calendar"></i> İzin #:i+1# </div>
                    # } #
                    #}else{#
                   <div data-original-title="Bu ay içerisinde personelin herhangi bir izni bulunmamaktadır." data-placement="left" style="font-size:13px;vertical-align: middle;"><i class="fa fa-user"></i> Personel Müsait </div>
            #}#

                </td>
            </tr>
        </tbody>
    </table>
</script>

<style type="text/css" data-selector="modalContainer">
    #insertRadio.akilliRadioGrup i {
        font-size: 30px;
    }

        #insertRadio.akilliRadioGrup i.icon-shuffle {
            font-size: 18px;
        }

        #insertRadio.akilliRadioGrup i.icon-retweet-3 {
            font-size: 18px;
        }

    #insertRadio.akilliRadioGrup label {
        width: 8.4%;
        text-align: center;
        font-size: 12px;
        font-weight: bold;
        max-height: 80px;
        overflow: hidden;
    }

    .akilliRadioGrup > input:checked + label[for=priority_0] {
        background-color: #EF5352;
    }

    .akilliRadioGrup > input:checked + label[for=priority_1] {
        background-color: #F8AC59;
    }

    .akilliRadioGrup > input:checked + label[for=priority_2] {
        background-color: #1ab394;
    }
</style>



@using (Html.BeginForm("InsertAllMultiple", "VWFTM_Task", FormMethod.Post, new Dictionary<string, object>() {
    { "class", "form-horizontal" },
    { "role", "form" },
    { "data-selector", "modalContainer" },
    { "data-formType", "Ajax" },
    { "id","VWFTM_TaskInsertForm" }
}))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.id)
    @Html.HiddenFor(model => model.code)

    <div class="hide">
        @(Html.Akilli().MapInputFor(a => a.lastOperationLocation).Navigation(true))
    </div>

    <div class="clearfix m-b-md">
        <div class="radio akilliRadioGrup clearfix" id="insertRadio">
            @foreach (var item in Infoline.Helper.EnumsProperties.EnumToArrayGeneric<EnumFTM_TaskType>())
            {
                @(Html.RadioButtonFor(model => model.type, item.Key, new Dictionary<string, object> { { "id", "Type" + item.Key } }))
                <label for="Type@(item.Key)" tabindex="0" class="radio-label">
                    <i class="@item.Generic["icon"]" data-toggle="tooltip" data-placement="bottom" data-original-title=" @item.Value"></i><br />
                    @item.Value
                </label>
            }
        </div>
    </div>



    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md req" for="customerIds">Müşteri İşletmeler</label>
        </div>
        <div class="col-md-8">
            @(
                Html.Akilli()
                .MultiSelect("customerIds")
                .Placeholder("Lütfen Müşteri İşletmeleri Seçiniz..")
                .DataValueField("id")
                .DataTextField("fullName")
                .ItemTemplate("#=TemplateEngine('companyTemplate',data)#")
                .Action(b => b.Action("DataSourceDropDown", "VWCMP_Company", new { area = "CMP" }))
                .BasicInsert(Url.Action("Insert", "VWCMP_Company", new { area = "CMP" }), "name",true)
                .Sort(x => x.Add("fullName").Ascending())
                .Validate(Validations.Required)
                .Execute()
            )
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md " for="customerStorageIds">Şube/Depo/Kısım</label>
        </div>
        <div class="col-md-8">
            @(
                        Html.Akilli()
                        .MultiSelect("customerStorageIds")
                        .Placeholder("Lütfen Şube/Depo/Kısım Seçimi Yapınız..")
                        .DataTextField("fullName")
                        .DataValueField("id")
                        .ItemTemplate("#=TemplateEngine('storageTemplate',data)#")
                        .Enable(false)
                        .Action(b => b.Action("DataSourceDropDown", "VWCMP_Storage", new { area = "CMP" }))
                        .CascadeFrom("customerIds")
                        .CascadeFromField("companyId")
                        .Sort(x => x.Add("fullName").Ascending())
                        .Execute()
					)
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="created">Oluşturulma Tarihi</label>
        </div>
        <div class="col-md-8">
            @Html.TextBoxFor(model => model.created, "{0:dd.MM.yyyy HH:mm}", new Dictionary<string, object>()
            {
                {"class", "form-control"},
                {"readonly", "readonly"}
            })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="notificationDate">Bildirim Tarihi</label>
        </div>
        <div class="col-md-8">
            @(
                Html.Akilli().
                DateTimePickerFor(model => model.notificationDate).
                Placeholder("Bildirim Tarihi").
                Format(Extensions.DateFormatFull()).
                Value(DateTime.Now)
            )
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md req" for="planStartDate">Planlanan Başlangıç Tarihi</label>
        </div>
        <div class="col-md-8">
            @(
                Html.Akilli().
                DateTimePickerFor(model => model.planStartDate).
                Placeholder("Planlanan Başlangıç Tarihi").
                Format(Extensions.DateFormatFull()).
                Value(DateTime.Now).
                //Min(DateTime.Now).
                //MaxDateElement("dueDate").
                Validate(Validations.Required)
            )
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md req" for="dueDate">Planlanan Bitiş Tarihi</label>
        </div>
        <div class="col-md-8">
            @(
                Html.Akilli().
                DateTimePickerFor(model => model.dueDate).
                Placeholder("Planlanan Bitiş Tarihi").
                Format(Extensions.DateFormatFull()).
                Value(DateTime.Now.AddDays(+1)).
                MinDateElement("planStartDate").
                Validate(Validations.Required)
            )
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md req" for="priority">Görev Önceliği</label>
        </div>
        <div class="col-md-8">
            @(Html.Akilli().RadioButtonGroupFor(a => a.priority).Value(EnumFTM_TaskPriority.Orta))
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md req" for="CMP_Types">Görev Konuları</label>
        </div>
        <div class="col-md-8">
            @(Html.Akilli()
     .MultiSelect("FTM_TaskSubjectTypeIds")
     .Placeholder("Lütfen Görev Konusu Seçiniz..")
     .DataTextField("name")
     .DataValueField("id")
     .Action(b => b.Action("DataSourceDropDown", "FTM_TaskSubject", new { area = "FTM" }))
     .Sort(x => x.Add("name").Ascending())
     //.BasicInsert(Url.Action("Insert", "FTM_TaskSubject", new { area = "FTM" }), "name")
	 //.Validate(Validations.Required)
     .Execute("id")
            )
        </div>
    </div>

    <div class="form-group" data-cascade="[type='radio'][name='type']" data-show="5,6,7">
        <div class="col-md-4">
            <label class="control-label label-md req" id="locationLabel" for="location">Görev Konumu</label>
        </div>
        <div class="col-md-8">
            @(
                Html.Akilli().MapInputFor(a => a.location).
                HelpText("Lütfen Lokasyon seçiniz.").
                HtmlAttributes(new Dictionary<string, object>()
                {
                    {"class", "form-control"},
                    {"placeholder", "Lütfen Lokasyon Giriniz.."}
                }).
                Opened(false).
                ZoomLevel(5).
                Navigation(false).
                Searchable(true).
                Validate(Validations.Required)
            )
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="companyId">Görevli İşletmem</label>
        </div>
        <div class="col-md-8">
            @(
                Html.Akilli()
                .DropDownListFor(model => model.companyId)
                .OptionLabel("Lütfen sorumlu işletmeyi seçiniz..")
                .DataValueField("id")
                .DataTextField("fullName")
                .Template("#=TemplateEngine('companyTemplate',data)#")
                .Action(b => b.Action("DataSourceDropDown", "VWCMP_Company", new { area = "CMP" }))
                .Filter<VWCMP_Company>(x => x.type == (int)EnumCMP_CompanyType.Benimisletmem)
                .Events(e => { e.Change("onChangeCompany"); })
                .Sort(x => x.Add("fullName").Ascending())
                .Execute()
            )
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="assignableUsers">Görevlendirilecek Personeller</label>
        </div>
        <div class="col-md-8">
            @(
                Html.Akilli()
                .MultiSelectFor(a => a.assignableUsers)
                .Placeholder("Lütfen sorumlu personelleri seçiniz..")
                .DataValueField("id")
                .DataTextField("FullName")
                .ItemTemplate("#=TemplateEngine('taskUserTemplate',data)#")
                .Action(b => b.Action("DataSourceDropDown", "VWSH_User", new { area = "SH" }))
                .Filter<VWSH_User>(a => a.type == (int)(EnumSH_UserType.MyPerson) && a.IsWorking == true && persons.Contains(a.id))
                .Events(e => { e.Change("onChangePerson").Close("onChangePerson").DataBound("onBoundPerson"); })
                .Sort(x => x.Add("FullName").Ascending())
                .Execute()
            )
        </div>
    </div>

    <div class="hide alert warning" id="PersonAvaibles"></div>

    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="helperUsers">Yardımcı Personeller</label>
        </div>
        <div class="col-md-8">
            @(
                Html.Akilli()
                .MultiSelectFor(a => a.helperUsers)
                .Placeholder("Lütfen yardımcı personelleri seçiniz..")
                .DataValueField("id")
                .DataTextField("FullName")
                .ItemTemplate("#=TemplateEngine('taskUserTemplate',data)#")
                .Action(b => b.Action("DataSourceDropDown", "VWSH_User", new { area = "SH" }))
                .Filter<VWSH_User>(a => a.type == (int)(EnumSH_UserType.MyPerson) && a.IsWorking == true && persons.Contains(a.id))
                .Sort(x => x.Add("FullName").Ascending())
                .Execute()
            )
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="companyCarId">Araç</label>
        </div>
        <div class="col-md-8">
            @(Html.Akilli()
             .DropDownListFor(model => model.companyCarId)
             .OptionLabel("Lütfen Araç Seçiniz..")
             .DataTextField("plate")
             .DataValueField("id")
             .Action(b => b.Action("DataSourceDropDown", "VWCMP_CompanyCars", new { area = "CMP" }))
             .Sort(x => x.Add("name").Ascending())
             .BasicInsert(Url.Action("Insert", "VWCMP_CompanyCars", new { area = "CMP" }), "plate")
             .Execute("id")
            )
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="description">Görev Açıklaması</label>
        </div>
        <div class="col-md-8">
            @Html.TextAreaFor(a => a.description, new Dictionary<string, object>()
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen Açıklama Giriniz." }
            }).Validate(Validations.TextTurkceSpace09(false, 0, 1000))
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="Dosya"> <i class="fa fa-folder-open"></i> Görev Dosyası</label>
        </div>
        <div class="col-md-8">
            @(Html.Akilli().FileUpload()
                            .DataTable("FTM_TaskOperation")
                            .DataId(Model.id)
                            .DataKey(x => x.fileGroup == "Görev Dosyası")
                        )
        </div>
    </div>

    <div style="display:none;" data-selector="personSelection">
        <div class="form-group">
            <div class="col-md-4">
                <label class="control-label label-md" for="hasVerifyCode">Onay Kodu Doğrulaması?</label>
            </div>
            <div class="col-md-7 radio m-l-sm">
                <label class="checkbox-inline">@Html.Kendo().RadioButtonFor(model => model.hasVerifyCode).Value(true).Checked(false) <span> Evet</span></label>
                <label class="checkbox-inline">@Html.Kendo().RadioButtonFor(model => model.hasVerifyCode).Value(false).Checked(true) <span> Hayır</span></label>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-4">
                <label class="control-label label-md" for="hasVerifyCode">Mail Bilgilendirmesi?</label>
            </div>
            <div class="col-md-7 radio m-l-sm">
                <label class="checkbox-inline">@Html.Kendo().RadioButtonFor(model => model.sendMail).Value(true).Checked(false) <span> Evet</span></label>
                <label class="checkbox-inline">@Html.Kendo().RadioButtonFor(model => model.sendMail).Value(false).Checked(true) <span> Hayır</span></label>
            </div>
        </div>
    </div>







    <div class="buttons">
        <button class="btn btn-md btn-danger pull-left" data-task="modalClose">Vazgeç</button>
        <button class="btn btn-md btn-success pull-right" type="submit">Görev Oluştur</button>
    </div>

}


