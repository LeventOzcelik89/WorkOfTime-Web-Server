@model VMFTM_TaskModel
@{
    ViewBag.Title = "Yeni Görev Ekle";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var persons = Model.personUserIds.ToList();
}
<script type="text/javascript">
    function FilterDate() {
        var ids = '@Html.Raw(String.Join(",", Model))';
        if (ids != '') {
            var grid = $('#VWFTM_Task').data('kendoGrid');
            var filter = grid.dataSource.filter();
            filter.logic = 'or';
            filter.filters = ids.split(',').map(function (item) { return { field: "id", operator: "equal", value: item } });
            grid.dataSource.filter(filter);
        }
    }
    $(document)
        .on('ready', function () {
            FilterDate();

        })
        ;
</script>
<script data-selector="modalContainer" type="text/javascript">
    var insertAll = {
        filter: function (e) {
            debugger;

        },
        makeTagify: function () {
            var whitelist = $.ajax({
                url: '/General/DataSourceEmailsCompanyAndUsers',
                async: false,
            }).responseJSON || [];
            $('#userMails').tagify({
                whitelist: whitelist,
                placeholder: "Lütfen Mail Adresini yazın ve Enter'a basınız",
                dropdown: {
                    maxItems: 99999999999,           // <- mixumum allowed rendered suggestions
                    //classname: "tags-look", // <- custom classname for this dropdown, so it could be targeted
                    enabled: 0,             // <- show suggestions on focus
                    closeOnSelect: false    // <- do not hide the suggestions dropdown once an item has been selected
                }
            }).on("add removetag", function (e) {
            });
        },
        kendoDropDownChange: function (e) {
            var tagify = $("#userMails").data("tagify");
            var item = e.sender.dataItem();
            tagify.removeAllTags();
            tagify.addTags(item.email, true, true);
        }
    }
    function onChangeCompany(e) {
        var companyId = this.value();
        var personElem = $('#assignableUsers').data("kendoMultiSelect");
        var basefilter = personElem.options.dataSource.filter;
        personElem.dataSource.filter(kendo.filterAdd(basefilter, 'CompanyId', companyId, "eq"));
    }
    function onBoundPerson(e) {
        e.sender.trigger("change");
    }
    function onChangePerson(e) {
        $('#PersonAvaibles').empty();
        if (e.sender.value().length > 0) {
            $.each(e.sender.value(), function (i, item) {
                var res = $.ajax({
                    type: "POST",
                    url: '/FTM/VWFTM_Task/GetPermitUserAvailableStatus',
                    data: { userid: item },
                    async: false
                }).responseJSON;
                if (res.objects.permits.length > 0) {
                    $('#PersonAvaibles').removeClass('hide');
                    $.each(res.objects.permits, function (p, per) {
                        var startdate = kendo.toString(new Date().FromJson(per.StartDate), 'dd.MM.yyyy HH:mm');
                        var enddate = kendo.toString(new Date().FromJson(per.EndDate), 'dd.MM.yyyy HH:mm')
                        var txt = '<div><i class="fa fa-calendar"></i> ' + per.Person_Title + ':' + startdate + ' - ' + enddate + ' Tarihleri Arası İzinli </div>';
                        $('#PersonAvaibles').append(txt);
                    })
                }
                if (res.objects.taskCount > 0) {
                    $('#PersonAvaibles').removeClass('hide');
                    var txt2 = '<h5><i class="fa fa-tasks m-r-xs"></i> ' + res.objects.userName + ' Çözüm Bildirilmemiş İş Sayısı : ' + res.objects.taskCount + ' Adet</h5>';
                    $('#PersonAvaibles').append(txt2);
                }
            })
        }
        var values = e.sender.value();
        $('[data-selector="personSelection"]')[values.length == 0 ? "hide" : "show"]();
    }
    function onChangeCustomer(e) {
        var customer = e.sender.dataItem();


        if (this.value() != "") {
            $("#customerStorageModal").removeAttr("disabled");
            $("#customerStorageModal").attr("data-href", "/CMP/VWCMP_Storage/GetTreeView?customerId=" + customer.id)


            var filter = ("(lastActionDataCompanyId~eq~'" + customer.id + "')");
            var filterJSON = kendo.filterParser(filter);
            $('#fixtureIds').data("kendoMultiSelect").dataSource.filter(filterJSON);
            $("#fixtureIds").data("handler").enable(true);
            $("#location").val(customer.location);
            haritalar['location'].feature.remove("DrawLayer", "DrawFeature");
            haritalar['location'].feature.add("DrawLayer", "DrawFeature", customer.location);
        } else {
            $("#fixtureIds").data("handler").enable(false);
            $("#fixtureIds").data("handler").value([]);
        }

    }
    $(document)
        .on("change", '[name="type"][type="radio"]', function (c) {
            $('#location,#fixtureIds').prop("required", false);
            var type = $(this).val();
            if (type == 6 || type == 7 || type == 5) {
                $('#location').prop("required", true);
            } else {
                $("#fixtureIds").data("handler").value([]);
            }
        }).on("change", '[name="isSendDocuments"]', function () {
            var getChecked = $('[name="isSendDocuments"]:checked').val();
            if (getChecked == 1) {
                $("#mailTo").removeClass("hidden");
            }
            else {
                $("#mailTo").addClass("hidden");
            }

        }).on("before:submit", "#VWFTM_TaskInsertForm", function () {
            var tag = $("#userMails").data("tagify");
            if (tag && tag.value) {
                $("#userMails").val(tag.value.map(a => a.value).join(","))
            }


        }).on("click", ".clearDropdown", function () {
         
            var customer = $("#customerId").data("kendoDropDownList").dataItem().id;
            var filter = ("(companyId~equals~'" + customer + "'')");
            var filterJSON = kendo.filterParser(filter);
            $('#customerStorageId').data("kendoDropDownList").dataSource.filter([])
            $('#customerStorageId').data("kendoDropDownList").dataSource.filter(filterJSON)

        });

    insertAll.makeTagify();
</script>
<script type="text/x-kendo-template" id="assignableUserTemplate" data-selector="modalContainer">
    <table class="table shoping-cart-table">
        <tbody>
            <tr>
                <td style="width:15%;text-align: center;">
                    <img class="img-circle img-responsive pull-left" style="width:60px;height:60px;" src="#:(ProfilePhoto ? ProfilePhoto : '/Content/Custom/img/na.png')#" onerror="ImageError(this, '/Content/Custom/img/na.png')" />
                </td>
                <td class="desc" style="width:40%;">
                    <div style="font-size:13px;">#=FullName#</div>
                    <div style="font-size:13px;">#=Company_Title#</div>
                    <div style="font-size:13px;">#=title#</div>
                </td>
            </tr>
        </tbody>
    </table>
</script>
<script type="text/x-kendo-template" id="taskUserTemplate" data-selector="modalContainer">
    <div style='position:relative'>
        <div class="clearfix" style="padding:8px 0;">
            <img class="img-circle img-responsive pull-left" style="width:60px;height:60px;" src="#:(ProfilePhoto ? ProfilePhoto : '/Content/Custom/img/na.png')#" onerror="ImageError(this, '/Content/Custom/img/na.png')" />
            <div style="width:calc(100% - 70px);height:60px;float:right;">
                <div class="template-item">#:FullName#</div>
                <div class="template-item"><small>#:(Company_Title ? Company_Title : '-')#</small></div>
                <a style='float: right;top: 15px;position: absolute;right: 15px;' class= 'btn btn-success xs' target="blank" href='/FTM/VWFTM_Task/PersonTasks?personId=#=id#'>Görevleri</a>
                <div class="template-item">
                    <small>#:(title ? title : '')#</small>
                    #if(IsWorking == false){#
                    <div class="pull-right"><span class="badge badge-danger" style="" data-original-title="#:JobLeavingDescription#"> İşten ayrıldı. </span></div>
                    #}#
                </div>
            </div>
        </div>
    </div>
</script>
<style type="text/css" data-selector="modalContainer">
    .noselector .k-i-all {
        display: none !important;
        visibility: hidden;
    }

    .noselector .k-clear-value {
        right: 10px !important;
    }

    #insertRadio.akilliRadioGrup i {
        font-size: 27px;
    }

        #insertRadio.akilliRadioGrup i.icon-shuffle {
            font-size: 16px;
        }

        #insertRadio.akilliRadioGrup i.icon-retweet-3 {
            font-size: 16px;
        }

    #insertRadio.akilliRadioGrup label {
        width: 8.4%;
        text-align: center;
        font-size: 12px;
        font-weight: bold;
        max-height: 80px;
        overflow: hidden;
    }

    .akilliRadioGrup > input:checked + label[for=priority_0] {
        background-color: #EF5352;
    }

    .akilliRadioGrup > input:checked + label[for=priority_1] {
        background-color: #F8AC59;
    }

    .akilliRadioGrup > input:checked + label[for=priority_2] {
        background-color: #1ab394;
    }
</style>
@using (Html.BeginForm("InsertAll", "VWFTM_Task", FormMethod.Post, new Dictionary<string, object>() {
    { "class", "form-horizontal" },
    { "role", "form" },
    { "data-selector", "modalContainer" },
    { "data-formType", "Ajax" },
    { "id","VWFTM_TaskInsertForm" }
}))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.id)
    @Html.HiddenFor(model => model.code)
    <div class="hide">
        @(Html.Akilli().MapInputFor(a => a.lastOperationLocation).Navigation(true))
    </div>
    <div class="clearfix m-b-md">
        <div class="radio akilliRadioGrup clearfix" id="insertRadio">
            @foreach (var item in Infoline.Helper.EnumsProperties.EnumToArrayGeneric<EnumFTM_TaskType>().OrderBy(x => x.Generic["order"]))
            {
                @(Html.RadioButtonFor(model => model.type, item.Key, new Dictionary<string, object> { { "id", "Type" + item.Key } }))
                <label for="Type@(item.Key)" tabindex="0" class="radio-label">
                    <i class="@item.Generic["icon"]" data-toggle="tooltip" data-placement="bottom" data-original-title=" @item.Value"></i><br />
                    @item.Value
                </label>
            }
        </div>
    </div>
    <b>Oluşturma Tarihi : </b> @Model.created
    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md req" for="customerId">Müşteri İşletme</label>
        </div>
        <div class="col-md-8">
            @(
        Html.Akilli()
        .DropDownListFor(model => model.customerId)
        .OptionLabel("Lütfen Müşteri İşletmeyi Seçiniz..")
        .DataValueField("id")
        .DataTextField("fullName")
        .Template("#=TemplateEngine('companyTemplate',data)#")
        .Action(b => b.Action("DataSourceDropDown", "VWCMP_Company", new { area = "CMP" }))
        .BasicInsert(Url.Action("Insert", "VWCMP_Company", new { area = "CMP" }), "name", true)
        .Events(a => { a.Change("onChangeCustomer"); a.DataBound("onChangeCustomer"); })
        .Sort(x => x.Add("fullName").Ascending())
        .Validate(Validations.Required)
        .Execute()
            )
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md " for="customerStorageId">Şube/Depo/Kısım</label>
        </div>
        <div class="col-md-8">
            <div class="input-group m-b">
                @(
            Html.Akilli()
            .DropDownListFor(model => model.customerStorageId)
            .OptionLabel("Lütfen Şube/Depo/Kısım Seçimi Yapınız..")
            .DataTextField("fullName")
            .DataValueField("id")
            .Template("#=TemplateEngine('storageTemplate',data)#")
            .ValueTemplate("#=fullName#)")
            .Action(b => b.Action("DataSourceDropDown", "VWCMP_Storage", new { area = "CMP" }))
            .CascadeFrom("customerId")
            .CascadeFromField("companyId")
            .Sort(x => x.Add("fullName").Ascending())
            .Events(x=>x.Select("insertAll.kendoDropDownChange").Filtering("insertAll.filter"))
           
            .Execute()
                )
                <span class="input-group-addon"><a disabled id="customerStorageModal" data-task="Insert"  data-show="single" data-modal="true" data-method="get" data-href=""  class="btn btn-primary"><i class="fa fa-code-fork"></i></a></span>
            </div>
           
       
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="notificationDate">Bildirim Tarihi</label>
        </div>
        <div class="col-md-8">
            @(
        Html.Akilli().
        DateTimePickerFor(model => model.notificationDate).
        Placeholder("Bildirim Tarihi").
        Format(Extensions.DateFormatFull()).
        Value(DateTime.Now)
            )
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md req" for="planStartDate">Planlanan Başlangıç Tarihi</label>
        </div>
        <div class="col-md-8">
            @(
        Html.Akilli().
        DateTimePickerFor(model => model.planStartDate).
        Placeholder("Planlanan Başlangıç Tarihi").
        Format(Extensions.DateFormatFull()).
        Value(DateTime.Now).
        //Min(DateTime.Now).
        //MaxDateElement("dueDate").
        Validate(Validations.Required)
            )
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md req" for="dueDate">Planlanan Bitiş Tarihi</label>
        </div>
        <div class="col-md-8">
            @(
        Html.Akilli().
        DateTimePickerFor(model => model.dueDate).
        Placeholder("Planlanan Bitiş Tarihi").
        Format(Extensions.DateFormatFull()).
        Value(DateTime.Now).
        MinDateElement("planStartDate").
        Validate(Validations.Required)
            )
        </div>
    </div>
    <div class="form-group" style="margin-bottom: 1px;">
        <div class="col-md-4">
            <label class="control-label label-md req" for="planLater">Daha Sonra Planlansın Mı? <i class="icon-info-4" data-toggle="tooltip" data-placement="top" title="Çağrı oluşturduktan veya Görev üstlenildikten sonra sonra Planlanmış Başlangıç ve Bitiş Tarihlerini yeniden planlayabilmeniz için gerekli alan."></i></label>
        </div>
        <div class="col-md-8">
            <div class="clearfix m-b-md">
                <div class="radio akilliRadioGrup clearfix">
                    @foreach (var item in Infoline.Helper.EnumsProperties.EnumToArrayGeneric<EnumFTM_TaskPlanLater>().OrderBy(x => x.Generic["order"]))
                    {
                        @(Html.RadioButtonFor(model => model.planLater, item.Key, new Dictionary<string, object> { { "id", "planLater" + item.Key } }))
                        <label for="planLater@(item.Key)" tabindex="0" class="radio-label">
                            @item.Value
                        </label>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md req" for="priority">Görev Önceliği</label>
        </div>
        <div class="col-md-8">
            @(Html.Akilli().RadioButtonGroupFor(a => a.priority).Value(EnumFTM_TaskPriority.Orta))
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md req" for="CMP_Types">Görev Konuları</label>
        </div>
        <div class="col-md-8">
            @(Html.Akilli()
     .MultiSelect("FTM_TaskSubjectTypeIds")
     .Placeholder("Lütfen Görev Alt Tipi Seçiniz..")
     .DataTextField("name")
     .DataValueField("id")
     .Action(b => b.Action("DataSourceDropDown", "FTM_TaskSubject", new { area = "FTM" }))
     .Sort(x => x.Add("name").Ascending())
     //.BasicInsert(Url.Action("Insert", "FTM_TaskSubject", new { area = "FTM" }), "name")
	 //.Validate(Validations.Required)
     .Execute("id")
            )
        </div>
    </div>
    <div class="form-group" data-cascade="[type='radio'][name='type']" data-show="5,6,7">
        <div class="col-md-4">
            <label class="control-label label-md req" id="locationLabel" for="location">Görev Konumu</label>
        </div>
        <div class="col-md-8">
            @(
        Html.Akilli().MapInputFor(a => a.location).
        HelpText("Lütfen Lokasyon seçiniz.").
        HtmlAttributes(new Dictionary<string, object>()
        {
                    {"class", "form-control"},
                    {"placeholder", "Lütfen Lokasyon Giriniz.."}
        }).
        Opened(false).
        ZoomLevel(5).
        Navigation(false).
        Searchable(true).
        Validate(Validations.Required)
            )
        </div>
    </div>
    <div class="form-group noselector" data-cascade="[type='radio'][name='type']" data-show="0,1,2,3,4,8,9,10">
        <div class="col-md-4">
            <label class="control-label label-md" id="fixtureLabel" for="fixtureIds">Görevlendirilecek Envanter(ler)</label>
        </div>
        <div class="col-md-8">
            @(Html.Akilli()
        .MultiSelect("fixtureIds")
        .Placeholder("Lütfen Envanter Seçiniz..")
        .DataTextField("searchField")
        .DataValueField("id")
        .Action(b => b.Action("DataSourceDropDown", "VWPRD_Inventory", new { area = "PRD" }))
        .Sort(x => x.Add("fullName").Ascending())
        .ItemTemplate("#=TemplateEngine('inventoryTemplate',data)#")
        .Enable(false)
        .Execute()
            )
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="companyId">Görevli İşletmem</label>
        </div>
        <div class="col-md-8">
            @(
        Html.Akilli()
        .DropDownListFor(model => model.companyId)
        .OptionLabel("Lütfen sorumlu işletmeyi seçiniz..")
        .DataValueField("id")
        .DataTextField("fullName")
        .Template("#=TemplateEngine('companyTemplate',data)#")
        .Action(b => b.Action("DataSourceDropDown", "VWCMP_Company", new { area = "CMP" }))
        .Filter<VWCMP_Company>(x => x.type == (int)EnumCMP_CompanyType.Benimisletmem)
        .Events(e => { e.Change("onChangeCompany"); })
        .Sort(x => x.Add("fullName").Ascending())
        .Execute()
            )
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="assignableUsers">Görevlendirilecek Personeller</label>
        </div>
        <div class="col-md-8">
            @(
        Html.Akilli()
        .MultiSelectFor(a => a.assignableUsers)
        .Placeholder("Lütfen sorumlu personelleri seçiniz..")
        .DataValueField("id")
        .DataTextField("FullName")
        .ItemTemplate("#=TemplateEngine('taskUserTemplate',data)#")
        .Action(b => b.Action("DataSourceDropDown", "VWSH_User", new { area = "SH" }))
        .Filter<VWSH_User>(a => persons.Contains(a.id))
        .Events(e => { e.Change("onChangePerson").Close("onChangePerson").DataBound("onBoundPerson"); })
        .Sort(x => x.Add("FullName").Ascending())
       
        .Execute()
            )
        </div>
    </div>
    <div class="hide alert warning" id="PersonAvaibles"></div>
    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="helperUsers">Yardımcı Personeller</label>
        </div>
        <div class="col-md-8">
            @(
        Html.Akilli()
        .MultiSelectFor(a => a.helperUsers)
        .Placeholder("Lütfen yardımcı personelleri seçiniz..")
        .DataValueField("id")
        .DataTextField("FullName")
        .ItemTemplate("#=TemplateEngine('taskUserTemplate',data)#")
        .Action(b => b.Action("DataSourceDropDown", "VWSH_User", new { area = "SH" }))
        .Filter<VWSH_User>(a => a.type == (int)(EnumSH_UserType.MyPerson) && a.IsWorking == true && persons.Contains(a.id))
        .Sort(x => x.Add("FullName").Ascending())
        .Execute()
            )
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="helperUsers">Takip Edecek Kişiler</label>
        </div>
        <div class="col-md-8">
            @(
        Html.Akilli()
        .MultiSelectFor(a => a.followUpUsers)
        .Placeholder("Lütfen takip edecek kişileri seçiniz..")
        .DataValueField("id")
        .DataTextField("FullName")
        .ItemTemplate("#=TemplateEngine('taskUserTemplate',data)#")
        .Action(b => b.Action("DataSourceDropDown", "VWSH_User", new { area = "SH" }))
        .Filter<VWSH_User>(a => a.type == (int)(EnumSH_UserType.MyPerson) && a.IsWorking == true)
        .Sort(x => x.Add("FullName").Ascending())
        .Execute()
            )
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="companyCarId">Araç</label>
        </div>
        <div class="col-md-8">
            @(Html.Akilli()
     .DropDownListFor(model => model.companyCarId)
     .OptionLabel("Lütfen Araç Seçiniz..")
     .DataTextField("plate")
     .DataValueField("id")
     .Action(b => b.Action("DataSourceDropDown", "VWCMP_CompanyCars", new { area = "CMP" }))
     .Sort(x => x.Add("name").Ascending())
     .BasicInsert(Url.Action("Insert", "VWCMP_CompanyCars", new { area = "CMP" }), "plate")
     .Execute("id")
            )
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="description">Görev Açıklaması</label>
        </div>
        <div class="col-md-8">
            @Html.TextAreaFor(a => a.description, new Dictionary<string, object>()
            {
                {"class", "form-control"},
                {"placeholder", "Lütfen Açıklama Giriniz." }
            }).Validate(Validations.TextTurkceSpace09(false, 0, 1000))
        </div>
    </div>
    <div class="form-group" style="margin-bottom: 1px;">
        <div class="col-md-4">
            <label class="control-label label-md req" for="isSendDocuments">Evraklar Mail İle Gönderilsin Mi? <i class="icon-info-4" data-toggle="tooltip" data-placement="top" title="Çağrıda görevli personellerin özlük dosyaları mail olarak müşteriye gönderilsin mi."></i></label>
        </div>
        <div class="col-md-8">
            <div class="clearfix m-b-md">
                <div class="radio akilliRadioGrup clearfix">
                    @foreach (var item in Infoline.Helper.EnumsProperties.EnumToArrayGeneric<EnumFTM_TaskPersonIsSendDocuments>().OrderBy(x => x.Generic["order"]))
                    {
                        @(Html.RadioButtonFor(model => model.isSendDocuments, item.Key, new Dictionary<string, object> { { "id", "isSendDocuments" + item.Key } }))
                        <label for="isSendDocuments@(item.Key)" tabindex="0" class="radio-label">
                            @item.Value
                        </label>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="form-group hidden" id="mailTo">
        <div class="col-md-4">
            <label class="control-label label-md" for="sendedUser">Mail İle Gönderilecek Kullanıcılar</label>

        </div>
        <div class="col-md-8 ">
            <input name="userMails" id="userMails" type="text" />
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-4">
            <label class="control-label label-md" for="Dosya"> <i class="fa fa-folder-open"></i> Görev Dosyası</label>
        </div>
        <div class="col-md-8">
            @(Html.Akilli().FileUpload()
                            .DataTable("FTM_TaskOperation")
                            .DataId(Model.id)
                            .DataKey(x => x.fileGroup == "Görev Dosyası")
                        )
        </div>
    </div>
    <div style="display:none;" data-selector="personSelection">
        <div class="form-group">
            <div class="col-md-4">
                <label class="control-label label-md" for="hasVerifyCode">Onay Kodu Doğrulaması?</label>
            </div>
            <div class="col-md-7 radio m-l-sm">
                <label class="checkbox-inline">@Html.Kendo().RadioButtonFor(model => model.hasVerifyCode).Value(true).Checked(false) <span> Evet</span></label>
                <label class="checkbox-inline">@Html.Kendo().RadioButtonFor(model => model.hasVerifyCode).Value(false).Checked(true) <span> Hayır</span></label>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-4">
                <label class="control-label label-md" for="hasVerifyCode">Mail Bilgilendirmesi?</label>
            </div>
            <div class="col-md-7 radio m-l-sm">
                <label class="checkbox-inline">@Html.Kendo().RadioButtonFor(model => model.sendMail).Value(true).Checked(false) <span> Evet</span></label>
                <label class="checkbox-inline">@Html.Kendo().RadioButtonFor(model => model.sendMail).Value(false).Checked(true) <span> Hayır</span></label>
            </div>
        </div>

    </div>
    <div class="buttons">
        <button class="btn btn-md btn-danger pull-left" data-task="modalClose">Vazgeç</button>
        <button class="btn btn-md btn-success pull-right" type="submit">
            Görev Oluştur
        </button>
    </div>
    <script>
        
        $(document).on("click", "#treeStorage", function () {

            console.log("yes")

        });


    </script>
}
