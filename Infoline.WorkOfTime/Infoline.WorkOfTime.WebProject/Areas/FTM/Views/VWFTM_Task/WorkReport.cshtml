
@{
	ViewBag.Title = "İş Raporu";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript">
	$(document)
		.on('click', '#scheduler .k-event', function () {
			var uid = $(this).attr('data-uid');
			var elem = $('#scheduler').data('kendoScheduler');
			var dataItem = elem.occurrenceByUid(uid);
			Kendo_GetRequest('/FTM/VWFTM_TaskPlan/CalendarDetail?id=' + dataItem.taskId, null, $('<a data-method="GET" />'), 'type-info');
		})
</script>


<div class="row">
	<div class="col-md-12">
		<div class="ibox m-b-none">
			<div class="ibox-title">
				<div class="col-md-6">
					<h5>Görev Havuzu</h5>
				</div>
				<div class="col-md-6">
					<div class="btn-group pull-right" style="margin-top: -5px;">
					</div>
				</div>
			</div>
			<div class="ibox-content">
				<div id="TaskGrid"></div>
			</div>
		</div>

		<div class="ibox m-b-none" style="margin-top: 25px;">
			<div class="ibox-title">
				<div class="col-md-9">
					<span class="pull-left" style="margin-right:10px; color:black; font-size:12px;" data-selector="priority">
						<i style="color:#23c6c8" class="fa fa-circle"></i><span style="margin-left:1px;"> Görev Üstlenilmeyi Bekleniyor</span>
					</span>
					<span class="pull-left" style="margin-right:10px; color:black; font-size:12px;" data-selector="priority">
						<i style="color:#1c84c6" class="fa fa-circle"></i><span style="margin-left:1px;"> Görev Üstlenildi</span>
					</span>
					<span class="pull-left" style="margin-right:10px; color:black; font-size:12px;" data-selector="priority">
						<i style="color:#f8ac59" class="fa fa-circle"></i><span style="margin-left:1px;"> Görev Devam Etmekte</span>
					</span>
					@*<span class="pull-left" style="margin-right:10px; color:black; font-size:12px;" data-selector="priority">
						<i style="color:#1ab394" class="fa fa-circle"></i><span style="margin-left:1px;"> Çözüm Bildirildi</span>
					</span>*@
					@*<span class="pull-left" style="margin-right:10px; color:black; font-size:12px;" data-selector="priority">
						<i style="color:#22e93f" class="fa fa-circle"></i><span style="margin-left:1px;"> Çözümlenmiş Görevler</span>
					</span>*@
					@*<span class="pull-left" style="margin-right:10px; color:black; font-size:12px;" data-selector="priority">
						<i style="color:#ff0000" class="fa fa-circle"></i><span style="margin-left:1px;"> Görev Planlanmış Başlangıç ve Bitişin Atamasını Bekleyen Görevler</span>
					</span>*@
				</div>
				<div class="col-md-3">
					<div class="btn-group pull-right">
						<a class="btn pull-right m-r-sm btn-sm btn-success" style="margin-top: -5px;margin-right: -7px;" data-modal="true" data-task="Insert" data-href="/FTM/VWFTM_Task/Insert"> <i class="fa fa-plus-circle"></i> Yeni Görev </a>
					</div>
				</div>
			</div>
			<div class="ibox-content">
				<div id="scheduler"></div>

			</div>
		</div>
	</div>
</div>


<script id="eventTemplate2" type="text/x-kendo-template">

	<div class="k-event-template #= (IsTemplate == true ? 'event-scheduled' : '') #">

	#=GetPriority(priority)#

	#=GetType(type)#

	#= (IsTemplate == true ? '' : GetOperation(lastOperationStatus)) #

	#:title#

	</div>

</script>



<script type="text/x-kendo-template" id="FTM_TaskTemplate" data-selector="modalContainer">
    #var types = @Html.Raw(Infoline.Helper.Json.Serialize(Infoline.Helper.EnumsProperties.EnumToArrayGeneric<Infoline.WorkOfTime.BusinessAccess.EnumFTM_TaskType>()))#
    #var priorityType = @Html.Raw(Infoline.Helper.Json.Serialize(Infoline.Helper.EnumsProperties.EnumToArrayGeneric<Infoline.WorkOfTime.BusinessAccess.EnumFTM_TaskPriority>()))#
    #var color ="text-primary"#

    #if(priority==0)
	{#
    #color = "text-danger"#
    #}
	else if(priority==1)
	{#
    #color = "text-warning"#
    #}
	else if(priority==2){#
    #color = "text-primary"#
    #}#

    #var slaStatus = @Html.Raw(Infoline.Helper.Json.Serialize(Infoline.Helper.EnumsProperties.EnumToArrayGeneric<Infoline.WorkOfTime.BusinessAccess.EnumFTM_TaskSLAStatus>()));#

    <table class="table shoping-cart-table">
        <tbody>
            <tr>
                <td style="width:3%;text-align: center;vertical-align: inherit;">
                    <span>
                        #if((assignUserId!=null && isComplete=='0') && lastOperationStatus!='30' && lastOperationStatus!='26'){#
                        <i style="font-size: 25px;" class="icon-clock #:color#" st></i><br />
                        #}

                        else if((assignUserId==null && assignableUserIds!=null) && isComplete==0){#
                        <i style="font-size: 25px;" class="icon-users #:color#"></i><br />
                        #}

                        else if((assignUserId==null && assignableUserIds==null) && isComplete=='0'){#
                        <i style="font-size: 25px;" class="icon-user-add #:color#"></i><br />
                        #}

                        else if(isComplete=='0' && lastOperationStatus=='26'){#
                        <i style="font-size: 25px;" class="icon-pause #:color#"></i><br />
                        #}

                        else if(isComplete=='0' && lastOperationStatus=='30' ){#
                        <i style="font-size: 25px;" class="icon-arrows-cw #:color#"></i><br />
                        #}

                        else if(isComplete='1'){#
                        <i style="font-size: 25px;" class="fa fa-check #:color#"></i><br />
                        #}#


                    </span>
                </td>

                <td class="desc" style="width:55%;">
                    #if(taskPlanId_Title!=null){#
                    <div style="font-size:13px;"><strong>Bakım Planı : </strong>#=taskPlanId_Title#</div>
                    #}#
                    #if(type_Title != null){#
                    <div style="font-size:13px;"><strong>Görev Tipi  : <a style="font-size: 15px;" class="#:types.filter(function(e){return e.Key == type}).map(a=>a.Generic['icon'])#"></a></strong>#=type_Title#</div>
                    #}#

                    #if(description!=null){#
                    #if(description.length >= 25){#
                    <div style="font-size:13px;"><strong>Görev Açıklaması : </strong>#=description.substring(0,50)#...</div>
                    #}
                    else
                    {#
                    <div style="font-size:13px;"><strong>Görev Açıklaması : </strong>#=description#</div>
                    #}#
                    #}#

                    #if(code!=null){#
                    <div style="font-size:13px;"><strong>Görev Kodu : </strong>#=code#</div>
                    #}#

                    #if(customer_Title!=null){#
                    <div style="font-size:13px;"><strong>Müşteri İşletme : </strong>#=customer_Title#</div>
                    #}#

                    #if(customerStorage_Title!=null){#
                    <div style="font-size:13px;"><strong>Şube/Depo/Kısım : </strong>#=customerStorage_Title#</div>
                    #}#

                    #if(fixture_Title!=null){#
                    <div style="font-size:13px;"><strong>Görevli Envanter : </strong>#=' ( ' +fixture_Title + ' ) '#</div>
                    #}#

                    <div style="font-size:13px;"><strong>Planlanan Başlangıç/Bitiş Tarihi : </strong>#:(planStartDate != null ?  kendo.toString(kendo.parseDate(planStartDate), "dd.MM.yyyy HH:mm") : '-')# / #:(dueDate != null ?  kendo.toString(kendo.parseDate(dueDate), "dd.MM.yyyy HH:mm") : '-')#</div>

                    #if(lastOperationStatus_Title!=null){#
                    <div style="font-size:13px;"><strong>Son İşlem : </strong>#=lastOperationStatus_Title#</div>
                    #}#



                    #if(penaltyStartDate!=null){#
                    <div style="font-size:13px"><strong>SLA Başlangıç Tarihi  :</strong><span style="color:red;font-weight:bold"> #=kendo.toString(penaltyStartDate,"dd.MM.yyyy HH:mm")#  #=(SLAText ? ' | '+SLAText : '')# </span></div>
                    <div style="font-size:13px"><strong>SLA Ceza Tutarı  :</strong><span style="color:red;font-weight:bold"> #=amercementTotal#  ₺ </span> </div>
                    #}#

                    #if((assignUserId==null && assignableUserIds!=null) && isComplete==0){#
                    <div style="font-size:13px;"><strong>Üstlenebilecek Personeller : </strong> #=assignableUserTitles# </div>
                    #}#



                    #if(taskSubjectType_Title != null){#
                    <span style="font-size:13px;"><strong>Görev Konuları : </strong>#=(SplitDataReturnBadge(taskSubjectType_Title ?? ''))#</span>
                    #}#
                   </td>
	               <td style="width:5%;vertical-align: inherit;">
	               #if(transactionCount > 0){#

	                <a href="/PA/VWPA_Transaction/IndexAllRequest?id=#:id#" target="_blank" class="btn btn-xs btn-success"> <i class="fa fa-money"></i> Görev Masrafları</a>

	                #}#

	                #if(planLater == @((int)EnumFTM_TaskPlanLater.Evet)){#
                     <span>
                        <i style="font-size: 28px;margin-right: 64px;" class="icon-clock text-success" data-toggle="tooltip" data-placement="top" title="Görev Planlanmış Başlangıç ve Bitişin Atamasını Bekliyor." st=""></i><br>
                    </span>
	                #}#


	            </td>
                <td style="width:10%;vertical-align: inherit;">
                     <span>
                        <a data-task="Insert" data-href="/FTM/VWFTM_Task/Update?id=#=id#"><i style="font-size: 42px;margin-right: 64px;" class="fa fa-arrow-right" data-toggle="tooltip" data-placement="top" title="Göreve Atama Yap" st=""></i></a><br>
                    </span>
                </td>
            </tr>
        </tbody>
    </table>

</script>

<script type="text/javascript">

    var _Grid = {
        elem: null,
        data: {
            types: @Html.Raw(Infoline.Helper.Json.Serialize(Infoline.Helper.EnumsProperties.EnumToArrayGeneric<Infoline.WorkOfTime.BusinessAccess.EnumFTM_TaskType>())),
            taskOperation: @Html.Raw(Infoline.Helper.Json.Serialize(Infoline.Helper.EnumsProperties.EnumToArrayGeneric<Infoline.WorkOfTime.BusinessAccess.EnumFTM_TaskOperationStatus>())),
            priority: @Html.Raw(Infoline.Helper.Json.Serialize(Infoline.Helper.EnumsProperties.EnumToArrayGeneric<Infoline.WorkOfTime.BusinessAccess.EnumFTM_TaskPriority>()))
        },
        init: function () {


			this.GetTasks();

            this.elem = $('#TaskGrid').data('kendoGrid');
        },
        GetTasks: function () {

            ReadData('/FTM/VWFTM_TaskPlan/CalendarNewDataSource', {}, function (res) {

				var columns = [
					{
						field: "type_Title",
						title: " ",
						template: kendo.template($("#FTM_TaskTemplate").html()),
						filterable: false
					}
				]

				opts = {
					Data: res,
					Column: columns,
					Filtreable: false,
					selectable: "single, row"
				};

				GridRender(opts, $('#TaskGrid'));

            });

        },
        ShowTask: function (uid) {

            var dataItem = _Grid.elem.occurrenceByUid(uid);

            if (dataItem.IsTemplate == true) {
                Kendo_GetRequest('/FTM/VWFTM_TaskPlan/InsertMultiple?id=' + dataItem.taskPlanId, null, $('<a data-method="GET" />'), 'type-info');
            } else {
                Kendo_GetRequest('/FTM/VWFTM_TaskPlan/CalendarDetail?id=' + dataItem._id, null, $('<a data-method="GET" />'), 'type-info');
            }

        }
    };

    function GetType(_key) {

        var item = $.Enumerable.From(_Grid.data.types).Where(a => { return a.Key == _key; }).FirstOrDefault();

        if (item == null) {
            return '';
        }

        return '<span data-toggle="tooltip" title="' + item.Value + '" class="type"><i class="' + item.Generic.icon + '"></i></span>';

    }

    function GetPriority(_key) {

        var item = $.Enumerable.From(_Grid.data.priority).Where(a => { return a.Key == _key; }).FirstOrDefault();

        if (item == null) {
            return '';
        }

        return '<span data-toggle="tooltip" title="' + item.Value + '" class="priority" style="background-color: #' + item.Generic.color + '">' + '!' + '</span>';

    }

    function GetOperation(_key) {

        var item = $.Enumerable.From(_Grid.data.taskOperation).Where(a => { return a.Key == _key; }).FirstOrDefault();

        if (item == null) {
            return '';
        }

        return '<span data-toggle="tooltip" title="' + item.Value + '" class="operation">' + '<i style="color: #' + item.Generic.color + '" class="' + item.Generic.icon + '"></i>' + '</span>';

    }

    $(document)

        .on('click', '#TaskGrid .k-event', function () {

            var uid = $(this).attr('data-uid');

            _Grid.ShowTask(uid);

        })

        .on('shown:modal', function (e, dialog) {


        })

        .on('ready', function () {

            _Grid.init();
			createScheduler(null, null);
		})
        .on('success', '#MultipleForm', function (e,res) {

            if (res.Result == true) {

                setTimeout(function () {

                    _Grid.GetTasks();

                }, 200);

            }

        })

        ;

</script>


<script>
	$("#DashBoardFilter").click(function () {

		var userIds = $("#userIds").val();
		var customer = $("#customerDataId").val();
		var customerStorage = $("#customerStorageDataId").val();
		var startDate = $('#startDate').data('kendoDatePicker').value();
		var scheduler = $("#scheduler").data("kendoScheduler");

		GetJsonDataFromUrl('/FTM/VWFTM_Task/DailyUserNewReport', { start: startDate, userIds: userIds, customer: customer, customerStorage: customerStorage }, function (res) {

			if (startDate == null) {
				startDate = new Date();
			}


			var starttime = kendo.toString(startDate, "yyyy/MM/dd 00:00:00");

			$("#scheduler").html(null);
			$("#scheduler").removeAttr("data-role")
			$("#scheduler").removeAttr("class")
			$("#scheduler").removeAttr("role")
			$("#scheduler").removeAttr("style")


			createScheduler(startDate, userIds, customer, customerStorage);

			//if (res != null) {
			//	var resObjects = $.Enumerable.From(res).SelectMany(a => { return a.dataSource; }).ToArray();
			//	var datasource = new kendo.data.SchedulerDataSource({
			//		data: resObjects
			//	});


			//	scheduler.date(new Date(starttime));
			//	scheduler.setDataSource(datasource);
			//}
		})
	})

	function onChangeGroup(e) {
		if (this.value() == undefined) {
			return;
		}
		var users = $.ajax({
			type: "GET",
			url: '/General/GetGroupUsers?id=' + this.value(),
			success: function (response) {
			},
			async: false
		}).responseJSON;
		if (users.length > 0) {
			$('#userIds').data('kendoMultiSelect').value($.Enumerable.From(users).Select(x => x.userId).ToArray())
		}
	}

	function createScheduler(startDate, userIds, customer, customerStorage) {

		if (startDate != null) {
			startDate = kendo.toString(startDate, "yyyy/MM/dd 00:00:00");
		}

		GetJsonDataFromUrl('/FTM/VWFTM_Task/DailyUserNewReport', { start: startDate, userIds: userIds, customer: customer, customerStorage: customerStorage }, function (res) {

			if (startDate == null) {
				startDate = new Date();
			}

			var starttime = kendo.toString(startDate, "yyyy/MM/dd 00:00:00").replace("00:00:00", "00:00:00");
			var endtime = kendo.toString(startDate, "yyyy/MM/dd 23:59:59").replace("00:00:00", "23:59:59");

			if (res != null) {
				var resObjects = $.Enumerable.From(res).SelectMany(a => { return a.dataSource; }).ToArray();

				//var enBuyuk = $.Enumerable.From(resObjects).Select(x => x.start).OrderByDescending(a => a.start).FirstOrDefault();
				//var enKucuk = $.Enumerable.From(resObjects).Select(x => x.start).OrderBy(a => a.start).FirstOrDefault();

				$("#scheduler").kendoScheduler({
					date: new Date(starttime),
					startTime: new Date(starttime),
					endTime: new Date(endtime),
					height: 700,
					eventHeight: 10,
					//majorTick: 60,
					localization: "tr-TR",
					views: ["timeline"],
					scroll: true,
					eventTemplate: $("#event-template").html(),
					dataSource: resObjects,
					editable: {
						create: true,
						move: false,
						resize: false
					},
					add: function (e) {
						Kendo_GetRequest('/FTM/VWFTM_Task/Insert?assignableUsers=' + e.event.attendees, { planStartDate: kendo.toString(e.event.start, 'yyyy-MM-dd HH:mm:00'), dueDate: kendo.toString(e.event.end, 'yyyy-MM-dd HH:mm:00') }, $('<a data-method="GET" />'), 'type-info');

						e.preventDefault();
						return false;

					},
					edit: function (e) {
						var buttonsContainer = e.container.find(".k-edit-buttons");
						var cancelButton = buttonsContainer.find(".k-scheduler-update");
						var removeButtonContainer = buttonsContainer.find(".k-icon k-si-close");
						removeButtonContainer.remove();
						cancelButton.text("");
						buttonsContainer.text("");
					},
					group: {
						resources: ["Attendees"],
						orientation: "vertical"
					},
					resources: [
						{
							field: "attendees",
							name: "Attendees",
							dataSource: res,
							multiple: true,
							title: "Attendees"
						}
					]
				});

				$("[class='k-link k-scheduler-refresh']").remove()
			}
		})


	}

</script>

<script id="event-template" type="text/x-kendo-template">
	<p style="font-size: 8px;margin-top: 5px;" data-toggle="tooltip" data-placement="bottom" title="#=taskStatus_Title#"><span class="k-scheduler-mark" style="background-color:#=color#;margin-top: -4.3px;margin-left: 5px;"></span> #: customer # - #: kendo.toString(new Date(start), "HH:mm") # - #: kendo.toString(new Date(end), "HH:mm") #</p>
</script>

<style>
	.k-scheduler-table .k-today, .k-today > .k-scheduler-datecolumn, .k-today > .k-scheduler-groupcolumn {
		background-color: rgb(255 255 255 / 15%);
	}

	.k-scheduler-edit-form .k-edit-field {
		width: 67%;
	}

	.k-textbox {
		width: 315px;
	}

	.k-input {
		width: 315px;
	}


	.k-event-actions {
		visibility: hidden;
	}


	.ibox-custom {
		clear: both;
		margin-top: 0;
		padding: 0;
	}

	.k-edit-buttons {
		visibility: hidden;
	}

	::-webkit-scrollbar {
		width: 8px;
		height: 15px;
	}
</style>