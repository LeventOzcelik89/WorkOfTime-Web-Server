@{
	ViewBag.Title = "Görevler ve Planlanmış Görevler Yönetimi";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript">
	function onChangeGroup(e) {
		if (this.value() == undefined) {
			return;
		}
		var users = $.ajax({
			type: "GET",
			url: '/General/GetGroupUsers?id=' + this.value(),
			success: function (response) {
			},
			async: false
		}).responseJSON;
		if (users.length > 0) {
			$('#userIds').data('kendoMultiSelect').value($.Enumerable.From(users).Select(x => x.userId).ToArray())
		}
	}
	function onChangeGroups(e) {
		debugger;
		if (this.value() == undefined) {
			return;
		}
		var users = $.ajax({
			type: "GET",
			url: '/General/GetGroupUsers?id=' + this.value(),
			success: function (response) {
			},
			async: false
		}).responseJSON;
		if (users.length > 0) {
			$('#assignableUsers').data('kendoMultiSelect').value($.Enumerable.From(users).Select(x => x.userId).ToArray())
		}
	}
</script>




<div class="row clearfix">
	<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
		<div class="ibox-custom ">
			<div class="ibox-content" style="border-bottom:1px #e7eaec solid;">

				<div class="row">
					<div class="col-md-4">
						<div class="form-group">
							@(
                                       Html.Akilli()
                                       .DropDownList("group")
                                       .OptionLabel("Lütfen Grub/Ekip Seçiniz..")
                                       .DataValueField("id")
                                       .DataTextField("name")
                                       .Action(b => b.Action("DataSourceDropDown", "SH_Group", new { area = "SH" }))
                                       .Events(x=> x.Change("onChangeGroup"))
                                       .Sort(x => x.Add("name").Ascending())
                                       .Execute()
                                   )
						</div>
					</div>

					<div class="col-md-5">
						<div class="form-group">
							@(
                                       Html.Akilli()
                                       .MultiSelect("userIds")
                                       .Placeholder("Lütfen Personel Seçiniz..")
                                       .DataValueField("id")
                                       .DataTextField("FullName")
                                       .ItemTemplate("#=TemplateEngine('userTemplate',data)#")
                                       .Action(b => b.Action("DataSourceDropDown", "VWSH_User", new { area = "SH" }))
                                       .Filter<VWSH_User>(a => a.type == (int)(EnumSH_UserType.MyPerson) && a.IsWorking == true && a.RoleIds.Contains(SHRoles.SahaGorevPersonel))
                                       .Sort(x => x.Add("FullName").Ascending())
                                       .Execute()
                                   )
						</div>
					</div>

					<div class="col-md-3 pull-right">
						<button class="btn btn-md btn-block btn-success" type="submit" id="DashBoardFilter" style="line-height: 27px">Sorgula</button>
					</div>
				</div>

			</div>

			<br />
		</div>
	</div>
</div>

<div class="ibox m-b-none" style="margin-top: 25px;">
	<div class="ibox-title">
		<div class="col-md-9">
			<span class="pull-left" style="margin-right:10px; color:black; font-size:12px;" data-selector="priority">
				<i style="color: #e2f818" class="fa fa-circle"></i><span style="margin-left:1px;"> Personel Ataması Bekleniyor</span>
			</span>
			<span class="pull-left" style="margin-right:10px; color:black; font-size:12px;" data-selector="priority">
				<i style="color: #23c6c8" class="fa fa-circle"></i><span style="margin-left:1px;"> Görev Üstlenilmeyi Bekleniyor</span>
			</span>
			<span class="pull-left" style="margin-right:10px; color:black; font-size:12px;" data-selector="priority">
				<i style="color: #66df8b" class="fa fa-circle"></i><span style="margin-left:1px;"> Görev Başlandı</span>
			</span>
			<span class="pull-left" style="margin-right:10px; color:black; font-size:12px;" data-selector="priority">
				<i style="color: #453cd1" class="fa fa-circle"></i><span style="margin-left:1px;"> Görev Devam Etmekte</span>
			</span>
			<span class="pull-left" style="margin-right:10px; color:black; font-size:12px;" data-selector="priority">
				<i style="color: #04ffb2" class="fa fa-circle"></i><span style="margin-left:1px;"> Görev Yeniden Başlatıldı</span>
			</span>
			<span class="pull-left" style="margin-right:10px; color:black; font-size:12px;" data-selector="priority">
				<i style="color: #ffbc00" class="fa fa-circle"></i><span style="margin-left:1px;"> Çözüm Bildirildi</span>
			</span>
			<span class="pull-left" style="margin-right:10px; color:black; font-size:12px;" data-selector="priority">
				<i style="color: #25ef0c" class="fa fa-circle"></i><span style="margin-left:1px;"> Çözüm Onaylandı</span>
			</span>
		</div>
		<div class="col-md-3">

		</div>
	</div>
	<div class="ibox-content">
		<div id="TaskCalendar"></div>

	</div>
</div>


<script id="eventTemplate2" type="text/x-kendo-template">

	<div class="k-event-template #= (IsTemplate == true ? 'event-scheduled' : '') #">

	#=GetStatusColor(lastOperationStatus)#

	#=GetPriority(priority)#

	#=GetType(type)#

	#= (IsTemplate == true ? '' : GetOperation(lastOperationStatus)) #

	#:title#

	</div>

</script>

<style type="text/css">

	.event-scheduled {
		background-color: #f08080;
		height: 100%;
	}


	.k-event {
		cursor: pointer;
	}
</style>

<script type="text/javascript">

    var _calendar = {
        elem: null,
        data: {
            types: @Html.Raw(Infoline.Helper.Json.Serialize(Infoline.Helper.EnumsProperties.EnumToArrayGeneric<Infoline.WorkOfTime.BusinessAccess.EnumFTM_TaskType>())),
            taskOperation: @Html.Raw(Infoline.Helper.Json.Serialize(Infoline.Helper.EnumsProperties.EnumToArrayGeneric<Infoline.WorkOfTime.BusinessAccess.EnumFTM_TaskOperationStatus>())),
            priority: @Html.Raw(Infoline.Helper.Json.Serialize(Infoline.Helper.EnumsProperties.EnumToArrayGeneric<Infoline.WorkOfTime.BusinessAccess.EnumFTM_TaskPriority>()))
        },
        init: function () {
            _calendar.CreateScheduler();
            this.elem = $('#TaskCalendar').data('kendoScheduler');
            this.GetTasks();
        },
		onChangeUser: function (e) {
			debugger;
			var item = this.dataItem();

			if (item != null && item.id != "") {
				$("#assignStaffButton").removeClass("hide");
			}
			else {
				$("#assignStaffButton").addClass("hide");
			}
		},
        CreateScheduler: function () {

			$('#TaskCalendar').kendoScheduler({
				date: new Date(),
				localization: 'tr-TR',
				editable: {
					create: true,
					move: false,
					resize: false
				},
				add: function (e) {
					Kendo_GetRequest('/FTM/VWFTM_Task/Insert', { planStartDate: kendo.toString(e.event.start, 'yyyy-MM-dd HH:mm:00'), dueDate: kendo.toString(e.event.end, 'yyyy-MM-dd HH:mm:00') }, $('<a data-method="GET" />'), 'type-info');
					e.preventDefault();
					return false;
				},
				eventTemplate: $("#eventTemplate2").html(),
				views: [
					{ type: 'day' },
					{ type: 'week', selected: true },
					{ type: 'month' }
				]
			});
        },
        GetTasks: function () {

            var userIds = $("#userIds").val();

			ReadData('/FTM/VWFTM_TaskPlan/CalendarDataSource', { userIds: userIds}, function (res) {

                _calendar.elem.setDataSource(new kendo.data.SchedulerDataSource({
                    data: res
                }));

            });

        },
        ShowTask: function (uid) {

            var dataItem = _calendar.elem.occurrenceByUid(uid);

            if (dataItem.IsTemplate == true) {
                Kendo_GetRequest('/FTM/VWFTM_TaskPlan/InsertMultiple?id=' + dataItem.taskPlanId, null, $('<a data-method="GET" />'), 'type-info');
            } else {
                Kendo_GetRequest('/FTM/VWFTM_TaskPlan/CalendarDetail?id=' + dataItem._id, null, $('<a data-method="GET" />'), 'type-info');
            }

        }
    };

    function GetType(_key) {

        var item = $.Enumerable.From(_calendar.data.types).Where(a => { return a.Key == _key; }).FirstOrDefault();

        if (item == null) {
            return '';
        }

        return '<span data-toggle="tooltip" title="' + item.Value + '" class="type"><i class="' + item.Generic.icon + '"></i></span>';

	}

	function GetStatusColor(_key) {

		var color = "";
		var text = "";

		if (_key < '@((int)EnumFTM_TaskOperationStatus.PersonelAtamaYapildi)') {
			color = "#e2f818";
			text = "Personel Ataması Bekleniyor";
		}
		else if (_key <= '@((int)EnumFTM_TaskOperationStatus.DogrulamaKoduGonderildi)' ) {

			color = "#23c6c8";
			text = "Görev Üstlenilmeyi Bekliyor";
		}
		else if (_key >= '@((int)EnumFTM_TaskOperationStatus.GorevBaslandi)' && _key < '@((int)EnumFTM_TaskOperationStatus.UrunDegisimi)') {
			color = "#66df8b";
			text = "Göreve Başlandı";
		}
		else if (_key == '@((int)EnumFTM_TaskOperationStatus.GorevDurduruldu)') {
			color = "#bd5050";
			text = "Görev Durduruldu";
		}
		else if (_key == '@((int)EnumFTM_TaskOperationStatus.GorevYenidenBaslatildi)') {
			color = "#453cd1";
			text = "Görev Yeniden Başlatıldı";
		}
		else if (_key == '@((int)EnumFTM_TaskOperationStatus.CozumBildirildi)') {
			color = "#ffbc00";
			text = "Çözüm Bildirildi";
		}
		else if (_key == '@((int)EnumFTM_TaskOperationStatus.CozumOnaylandi)') {
			color = "#25ef0c";
			text = "Çözüm Onaylandı";
		}
		else {
			color = "#0818d9";
			text = "Görev Devam Ediyor";
		}

		return '<span data-toggle="tooltip" title="' + text + '" class="k-scheduler-mark" style="background-color: ' + color + ';font-size: 10px;margin-top: -7px;" data-original-title="' + text + '"></span>'
	}

    function GetPriority(_key) {

        var item = $.Enumerable.From(_calendar.data.priority).Where(a => { return a.Key == _key; }).FirstOrDefault();

        if (item == null) {
            return '';
        }

        return '<span data-toggle="tooltip" title="' + item.Value + '" class="priority" style="background-color: #' + item.Generic.color + '">' + '!' + '</span>';

    }

    function GetOperation(_key) {

        var item = $.Enumerable.From(_calendar.data.taskOperation).Where(a => { return a.Key == _key; }).FirstOrDefault();

        if (item == null) {
            return '';
        }

        return '<span data-toggle="tooltip" title="' + item.Value + '" class="operation">' + '<i style="color: #' + item.Generic.color + '" class="' + item.Generic.icon + '"></i>' + '</span>';

    }

    $(document)

        .on('click', '#TaskCalendar .k-event', function () {

            var uid = $(this).attr('data-uid');

            _calendar.ShowTask(uid);

        })

        .on('shown:modal', function (e, dialog) {


        })

        .on('ready', function () {

            _calendar.init();

        })

        .on('success', '#MultipleForm', function (e,res) {

            if (res.Result == true) {

                setTimeout(function () {

                    _calendar.GetTasks();

                }, 200);

            }

        })

        ;

	$("#DashBoardFilter").click(function () {
		debugger;
		var userIds = $("#userIds").val();

		GetJsonDataFromUrl('/FTM/VWFTM_TaskPlan/CalendarDataSource', { userIds: userIds }, function (res) {
			_calendar.elem.setDataSource(new kendo.data.SchedulerDataSource({
				data: res
			}));
		});
	});




</script>

