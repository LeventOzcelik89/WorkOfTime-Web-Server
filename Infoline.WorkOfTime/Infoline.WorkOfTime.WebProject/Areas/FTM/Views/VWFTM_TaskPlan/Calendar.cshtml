@model string
@{
	ViewBag.Title = "Görevler ve Planlanmış Görevler Yönetimi";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript">
	function onChangeGroup(e) {
		if (this.value() == undefined) {
			return;
		}
		var users = $.ajax({
			type: "GET",
			url: '/General/GetGroupUsers?id=' + this.value(),
			success: function (response) {
			},
			async: false
		}).responseJSON;
		if (users.length > 0) {
			$('#userIds').data('kendoMultiSelect').value($.Enumerable.From(users).Select(x => x.userId).ToArray())
		}
	}


	$(document)
		.on('success', '#VWFTM_TaskInsertForm', '#VWFTM_TaskUpdateForm', function (event, res) {
			if (res.Result) {
				_calendar.GetTasks();
			}
		})
		.on("change", '[name="type"][type="radio"]', function (c) {
			debugger;
			var type = $(this).val();

			$("#type").val(type);

			//if (type == "0") {
			//	$("#planLater0").prop('checked', true);
			//	$("#planLater1").prop('checked', false);

			//}
			//else {
			//	$("#planLater0").prop('checked', false);
			//	$("#planLater1").prop('checked', true);
			//}


		})
		
</script>

<style type="text/css">

	#CalendarContainer .calendar-header {
		display: none;
	}

	.withTabs .customTabs:before {
		content: 'YIL :';
	}

	.legendTable tr td {
		padding: 4px;
	}

	.tab-content {
		border: none !important;
	}

	.withTabs .tab-content .tab-pane {
		padding: 0px;
	}

	.calendar {
		padding: 0px !important;
		margin: 20px 0px;
	}

	.popover {
		max-width: 360px !important;
		z-index: 2001;
	}

	.popover-content {
		width: 320px;
	}

	.capt {
		text-decoration: underline;
		margin-bottom: 10px;
		margin-top: 10px;
	}

	.popover .btn-group {
		width: 100%;
		margin-top: 10px;
		border-top: 1px solid #ccc;
		padding-top: 10px;
		margin-left: -15px;
		width: calc(30px + 100%);
		padding-left: 15px;
		padding-right: 15px;
	}

		.popover .btn-group .btn {
			float: right;
		}

	.popover-content h3 {
		color: #f00;
	}

	[class^="levelLegend"] {
		width: 30px;
		height: 18px;
		display: inline-block;
		float: left;
		margin-right: 6px;
		margin-left: 6px;
	}

	.levelLegend1 {
		background: #00dcff85;
		margin-left: 0px !important;
	}

	.levelLegend2 {
		background-color: #e2f818;
	}

	.levelLegend3 {
		background-color: #23c6c8;
	}

	.levelLegend4 {
		background-color: #453cd1;
	}

	.levelLegend5 {
		background-color: #d52525;
	}

	.levelLegend6 {
		background-color: #04ffb2;
	}

	.levelLegend7 {
		background-color: #ffbc00;
	}

	.levelLegend8 {
		background-color: #25ef0c;
	}

	.levelLegend9 {
		background-color: #99b2b5;
	}

	.legendTable {
		margin-bottom: 4px;
		clear: none;
		border: 1px solid #EBEBEB;
	}

	.calPopover .close {
		margin-top: -12px;
		margin-right: -8px;
	}

	[data-target="type_Title"] .badge > i {
		margin-right: 4px;
	}

	.detailList li > i, .detailList li > strong {
		float: left;
	}

	.detailList li > i {
		margin-right: 5px;
	}

	.detailList li {
		text-align: right;
	}

	#insertRadio.akilliRadioGrup label {
		width: 8.4% !important;
	}

	.k-event, .k-task-complete {
		border-color: #ffffff !important;
		/*		background: #ffffff 0 -257px none repeat-x !important;
	*/ color: #fff;
	}
</style>

@Html.Hidden("type");
<div class="ibox m-b-none">
	<div class="ibox-title" style="padding: 22px 15px 43px !important;">

		<div class="col-md-8" style="margin-top: -11px;margin-left: 331px;">
			<div class="col-md-12">
				<div class="col-md-4">
					<div class="form-group">
						@(
                                       Html.Akilli()
                                       .DropDownList("group")
                                       .OptionLabel("Lütfen Grub/Ekip Seçiniz..")
                                       .DataValueField("id")
                                       .DataTextField("name")
                                       .Action(b => b.Action("DataSourceDropDown", "SH_Group", new { area = "SH" }))
                                       .Events(x=> x.Change("onChangeGroup"))
                                       .Sort(x => x.Add("name").Ascending())
                                       .Execute()
                                   )
					</div>
				</div>
				<div class="col-md-4">
					<div class="form-group">
						@(
                                       Html.Akilli()
                                       .MultiSelect("userIds")
                                       .Placeholder("Lütfen Personel Seçiniz..")
                                       .DataValueField("id")
                                       .DataTextField("FullName")
                                       .ItemTemplate("#=TemplateEngine('userTemplate',data)#")
                                       .Action(b => b.Action("DataSourceDropDown", "VWSH_User", new { area = "SH" }))
                                       .Filter<VWSH_User>(a => a.type == (int)(EnumSH_UserType.MyPerson) && a.IsWorking == true && a.RoleIds.Contains(SHRoles.SahaGorevPersonel))
                                       .Sort(x => x.Add("FullName").Ascending())
                                       .Execute()
                                   )
					</div>
				</div>

				<div class="col-md-2">
					<div class="form-group">
								<div class="radio akilliRadioGrup clearfix" style="margin-top: 5px;margin-left: 18px;">
									<input checked="checked" data-val="true" data-val-number="The field planLater must be a number." id="planLater0" name="type" type="radio" value="0" autocomplete="off">						
									<label for="planLater0" tabindex="0" class="radio-label">
										Görev
									</label>
									<input id="planLater1" name="type" type="radio" value="1" autocomplete="off">						
									<label for="planLater1" tabindex="0" class="radio-label">
										Plan
									</label>
								</div>
					</div>
				</div>
				<div class="col-md-2">
					<button class="btn btn-md btn-success" type="submit" id="DashBoardFilter" style="line-height: 27px">Sorgula</button>
				</div>
			</div>

		</div>
		<div class="col-md-6" style="margin-top: -11px;">

		</div>
	</div>

	<div class="ibox-content">
		<fieldset class="withTabs" id="CalendarContainer">
			<legend>GÖREV TAKVİMİ</legend>

			<div id="TaskCalendar"></div>
			<br />
			<table class="legendTable">
				<tbody>
					<tr>
						<td>Planlanmış <b>Görev</b> <i class="fa fa-info-circle" data-toggle="tooltip" data-placement="top" title="" data-original-title="Planlanmış ve görevi açılmamışlar"></i> <span class="levelLegend9"></span></td>
						<td>Plana Bağlı <b>Görev</b> <i class="fa fa-info-circle" data-toggle="tooltip" data-placement="top" title="" data-original-title="Planlanmış ve görevi açılmış olanlar"></i><span class="levelLegend1"></span></td>
						<td>Personel Ataması <b>Bekleniyor</b> <span class="levelLegend2"></span></td>
						<td>Görev Üstlenilmeyi <b>Bekleniyor</b> <span class="levelLegend3"></span></td>
						<td>Görev <b>Devam Ediyor</b> <span class="levelLegend4"></span></td>
						<td>Görev <b>Durduruldu</b> <span class="levelLegend5"></span></td>
						<td>Görev <b>Çözüm Bildirildi</b> <span class="levelLegend7"></span></td>
						<td>Görev <b>Çözümü Onaylandı</b> <span class="levelLegend8"></span></td>
					</tr>
				</tbody>
			</table>
		</fieldset>
	</div>
</div>


<script id="eventTemplate2" type="text/x-kendo-template">

	#if(taskPlanId != null && lastOperationStatus != 999){#
	<div class="k-event-template #= (IsTemplate == true ? 'event-scheduled' : '') #" style="background-color:#=returnColor()#">
	#}
	else
	{#
	<div class="k-event-template #= (IsTemplate == true ? 'event-scheduled' : '') #" style="background-color:#=GetColor(lastOperationStatus)#">
	#}#

	#=GetPriority(priority)#
	#=GetType(type)#
	#= (IsTemplate == true ? '' : GetOperation(lastOperationStatus)) #
	#:title#
	</div>
</script>

<style type="text/css">
	.event-scheduled {
		background-color: #f08080;
		height: 100%;
	}

	.k-event {
		cursor: pointer;
	}
</style>

<script type="text/javascript">

    var _calendar = {
        elem: null,
        data: {
            types: @Html.Raw(Infoline.Helper.Json.Serialize(Infoline.Helper.EnumsProperties.EnumToArrayGeneric<Infoline.WorkOfTime.BusinessAccess.EnumFTM_TaskType>())),
            taskOperation: @Html.Raw(Infoline.Helper.Json.Serialize(Infoline.Helper.EnumsProperties.EnumToArrayGeneric<Infoline.WorkOfTime.BusinessAccess.EnumFTM_TaskOperationStatus>())),
            priority: @Html.Raw(Infoline.Helper.Json.Serialize(Infoline.Helper.EnumsProperties.EnumToArrayGeneric<Infoline.WorkOfTime.BusinessAccess.EnumFTM_TaskPriority>()))
        },
        init: function () {
            _calendar.CreateScheduler();
            this.elem = $('#TaskCalendar').data('kendoScheduler');
			this.GetTasks();
        },
		onChangeUserClose: function (e) {
			var userIds = $("#assignableUsersIds").data("kendoMultiSelect");
			var taskId = $('[data-taskId]')[0].dataset.taskid

			if (userIds == undefined) {
				userIds = null;
			}

				$("#assignableUserListId").html(null);

				$.ajax({
					type: "POST",
					url: '/FTM/VWFTM_Task/UpdateStaff',
					data: { id: taskId, assignableUsers: userIds.value() },
					success: function (response) {
						if (response.Result) {
							MesajSuccess(response.FeedBack.message, "Personel Ataması Başarılı")
							$.ajax({
								type: "GET",
								url: '/FTM/VWFTM_Task/TaskLoad?id=' + taskId,
								success: function (result) {


									if (result.Object != null && result.Object.length > 0) {
										$.each(result.Object, function (index, value) {
											$("#assignStaffDivId").addClass("hide");
											$("#assignableUserDivId").removeClass("hide");
											$("#assignableUserListDivId").removeClass("hide");
											$("#assignableUserListId").append("<a href='#'> <img alt='image' data-toggle='tooltip' data-placement='top' data-original-title='" + value.userId_Title + "' onerror='ImageError(this,'/Content/Custom/img/na.png')' class='img-circle' src='" + (value.photo != null ? value.photo : '/Content/Custom/img/na.png') + "'> </a>");
										});
									}
									else {
										$("#assignableUserListDivId").addClass("hide")
									}
								},
								async: false
							}).responseJSON;
						}
						else {
							MesajWarning(response.FeedBack.message, "Personel Atama İşlemi Başarısız")
						}
					},
					async: false
				}).responseJSON;



		},
        CreateScheduler: function () {



			$('#TaskCalendar').kendoScheduler({
				date: new Date(),
				localization: 'tr-TR',
				scroll: true,
				eventTemplate: $("#event-template").html(),
				editable: {
					create: true,
					move: true,
					resize: true,
					confirmation: false
				},
				eventTemplate: $("#eventTemplate2").html(),
				add: function (e) {
					Kendo_GetRequest('/FTM/VWFTM_Task/Insert', { planStartDate: kendo.toString(e.event.start, 'yyyy-MM-dd HH:mm:00'), dueDate: kendo.toString(e.event.end, 'yyyy-MM-dd HH:mm:00') }, $('<a data-method="GET" />'), 'type-info');
					e.preventDefault();
					return false;
				},
				edit: function (e) {
					var buttonsContainer = e.container.find(".k-edit-buttons");
					var cancelButton = buttonsContainer.find(".k-scheduler-update");
					var removeButtonContainer = buttonsContainer.find(".k-icon k-si-close");
					removeButtonContainer.remove();
					cancelButton.text("");
					buttonsContainer.text("");
				},
				moveEnd: function (e) {
					e.preventDefault();
					_calendar.UpdateTask(e.event, e.slot);
					return false;
				},
				resizeEnd: function (e) {
					e.preventDefault();

					if (e.event.lastOperationStatus == 999) {
						MesajWarning("Planlanmış ve açılmamış bir görev güncellenemez.", "İşlem Başarısız")
						return;
					}


					if (e.event.lastOperationStatus >= '@((int)EnumFTM_TaskOperationStatus.GorevBaslandi)')
					{
				     MesajWarning("Devam eden görevin Plan tarihlerini güncelleyemezsiniz.", "İşlem Başarısız")
				     return;
					}

		            	$.ajax({
		            		type: "POST",
							url: '/FTM/VWFTM_Task/UpdateTaskCalendar',
							data: { id: e.event._id, planStartDate: kendo.toString(e.start, 'yyyy-MM-dd HH:mm:00'), dueDate: kendo.toString(e.end.addMinutes(-1), 'yyyy-MM-dd HH:mm:00') },
		            		success: function (response) {
		            			 _calendar.GetTasks();
		            			MesajSuccess("Görevin Planlanan Başlangıç ve Bitiş Tarihleri Güncellenmiştir", "İşlem Başarılı")
		            		},
		            		async: false
		            	}).responseJSON;

					return false;
				},
				views: [
					{ type: 'day' },
					{ type: 'week'},
					{ type: 'month', selected: true }
				]
			});

			this.elem = $('#TaskCalendar').data('kendoScheduler');

        },
        GetTasks: function () {

            var userIds = $("#userIds").val();

			ReadData('/FTM/VWFTM_TaskPlan/CalendarDataSource', { userIds: userIds}, function (res) {
                _calendar.elem.setDataSource(new kendo.data.SchedulerDataSource({
                    data: res
                }));
            });
		},
		UpdateTask: function (event, slot) {

			if (event.lastOperationStatus == 999) {
				MesajWarning("Planlanmış ve açılmamış bir görev güncellenemez.", "İşlem Başarısız")
				return;
			}

			if (event.lastOperationStatus >= '@((int)EnumFTM_TaskOperationStatus.GorevBaslandi)') {
				MesajWarning("Devam eden görevin Plan tarihlerini güncelleyemezsiniz.", "İşlem Başarısız")
				return;
			}

			$.ajax({
				type: "POST",
				url: '/FTM/VWFTM_Task/UpdateTaskCalendar',
				data: { id: event._id, planStartDate: kendo.toString(slot.start, 'yyyy-MM-dd HH:mm:00'), dueDate: kendo.toString(slot.end, 'yyyy-MM-dd 18:00:00') },
				success: function (response) {
					//$("#TaskCalendar").html(null)
					//_calendar.init();
					 _calendar.GetTasks();
					MesajSuccess("Görevin Planlanan Başlangıç ve Bitiş Tarihleri Güncellenmiştir", "İşlem Başarılı")
				},
				async: false
			}).responseJSON;
		},
		ResizeTask: function (event, slot) {

			if (event.lastOperationStatus >= '@((int)EnumFTM_TaskOperationStatus.GorevBaslandi)') {
				MesajWarning("Devam eden görevin Plan tarihlerini güncelleyemezsiniz.", "İşlem Başarısız")
				return;
			}

			$.ajax({
				type: "POST",
				url: '/FTM/VWFTM_Task/Update',
				data: { id: event._id, planStartDate: kendo.toString(slot.start, 'yyyy-MM-dd HH:mm:00'), dueDate: kendo.toString(slot.end, 'yyyy-MM-dd 18:00:00') },
				success: function (response) {
					 _calendar.GetTasks();
					MesajSuccess("Görevin Planlanan Başlangıç ve Bitiş Tarihleri Güncellenmiştir", "İşlem Başarılı")
				},
				async: false
			}).responseJSON;
		},

        ShowTask: function (uid) {

			var dataItem = _calendar.elem.occurrenceByUid(uid);
			debugger;

			if (!dataItem.isTask) {
				Kendo_GetRequest('/FTM/VWFTM_TaskPlan/CalendarPlanDetail?id=' + dataItem.taskPlanId + '&planStartDate=' + kendo.toString(dataItem.planStartDate, 'yyyy-MM-dd HH:mm:00') + '&dueDate=' + kendo.toString(dataItem.dueDate, 'yyyy-MM-dd HH:mm:00'), null, $('<a data-method="GET" />'), 'type-info');
				return;
			}

            if (dataItem.IsTemplate == true) {
                Kendo_GetRequest('/FTM/VWFTM_TaskPlan/InsertMultiple?id=' + dataItem.taskPlanId, null, $('<a data-method="GET" />'), 'type-info');
            } else {
                Kendo_GetRequest('/FTM/VWFTM_TaskPlan/CalendarDetail?id=' + dataItem._id, null, $('<a data-method="GET" />'), 'type-info');
            }

        }
    };

    function GetType(_key) {

        var item = $.Enumerable.From(_calendar.data.types).Where(a => { return a.Key == _key; }).FirstOrDefault();

        if (item == null) {
            return '';
        }

        return '<span data-toggle="tooltip" title="' + item.Value + '" class="type"><i class="' + item.Generic.icon + '"></i></span>';

	}

	function GetStatusColor(_key) {

		var color = "";
		var text = "";

		if (_key < '@((int)EnumFTM_TaskOperationStatus.PersonelAtamaYapildi)') {
			color = "#e2f818";
			text = "Personel Ataması Bekleniyor";
		}
		else if (_key <= '@((int)EnumFTM_TaskOperationStatus.DogrulamaKoduGonderildi)' ) {

			color = "#23c6c8";
			text = "Görev Üstlenilmeyi Bekliyor";
		}
		else if (_key == '@((int)EnumFTM_TaskOperationStatus.GorevYenidenBaslatildi)') {
			color = "#453cd1";
			text = "Görev Yeniden Başlatıldı";
		}
		else if (_key >= '@((int)EnumFTM_TaskOperationStatus.GorevBaslandi)' && _key < '@((int)EnumFTM_TaskOperationStatus.UrunDegisimi)') {
			color = "#0818d9";
			text = "Göreve Başlandı";
		}
		else if (_key == '@((int)EnumFTM_TaskOperationStatus.GorevDurduruldu)') {
			color = "#bd5050";
			text = "Görev Durduruldu";
		}

		else if (_key == '@((int)EnumFTM_TaskOperationStatus.CozumBildirildi)') {
			color = "#ffbc00";
			text = "Çözüm Bildirildi";
		}
		else if (_key == '@((int)EnumFTM_TaskOperationStatus.CozumOnaylandi)') {
			color = "#25ef0c";
			text = "Çözüm Onaylandı";
		}
		else {
			color = "#0818d9";
			text = "Görev Devam Ediyor";
		}

		return '<span data-toggle="tooltip" title="' + text + '" class="k-scheduler-mark" style="background-color: ' + color + ';font-size: 10px;margin-top: -7px;" data-original-title="' + text + '"></span>'
	}

	function GetColor(_key) {

		var color = "";

		if (_key < '@((int)EnumFTM_TaskOperationStatus.PersonelAtamaYapildi)') {
			color = "#e2f818";
		}
		else if (_key <= '@((int)EnumFTM_TaskOperationStatus.DogrulamaKoduGonderildi)' ) {
			color = "#23c6c8";
		}
		else if (_key == '@((int)EnumFTM_TaskOperationStatus.GorevYenidenBaslatildi)') {
			color = "#453cd1";
		}
		else if (_key >= '@((int)EnumFTM_TaskOperationStatus.GorevBaslandi)' && _key < '@((int)EnumFTM_TaskOperationStatus.UrunDegisimi)') {
			color = "#0818d9";
		}
		else if (_key == '@((int)EnumFTM_TaskOperationStatus.GorevDurduruldu)') {
			color = "#bd5050";
		}
		else if (_key == '@((int)EnumFTM_TaskOperationStatus.CozumBildirildi)') {
			color = "#ffbc00";
		}
		else if (_key == '@((int)EnumFTM_TaskOperationStatus.CozumOnaylandi)') {
			color = "#25ef0c";
		}
		else if (_key == 999) {
			color = "#99b2b5";
		}
		else {
			color = "#0818d9";
		}

		$('[class="k-icon k-si-close"]').remove()

		return color;
	}


	function returnColor() {
		var color = "";
		color = "#00dcff85";
		return color;
	}

    function GetPriority(_key) {

        var item = $.Enumerable.From(_calendar.data.priority).Where(a => { return a.Key == _key; }).FirstOrDefault();

        if (item == null) {
            return '';
        }

		return '<span data-toggle="tooltip" title="' + item.Value + '" class="priority" style="background-color: #' + item.Generic.color + '">' + 'ⓘ' + '</span>';

    }

	function GetOperation(_key) {
		debugger;
        var item = $.Enumerable.From(_calendar.data.taskOperation).Where(a => { return a.Key == _key; }).FirstOrDefault();


		if (item == null && _key != 999) {
            return '';
		}

		if (_key == 999) {
			return '<span data-toggle="tooltip" title="Planlanmış Görev" class="operation">' + '<i style="color: #f9f9f9" class="fa fa-tasks"></i>' + '</span>';
		}

        return '<span data-toggle="tooltip" title="' + item.Value + '" class="operation">' + '<i style="color: #' + item.Generic.color + '" class="' + item.Generic.icon + '"></i>' + '</span>';

    }

	$(document)

		.on('click', '#TaskCalendar .k-event', function () {

			var uid = $(this).attr('data-uid');

			_calendar.ShowTask(uid);

		})

		.on('shown:modal', function (e, dialog) {
		})

		.on('ready', function () {
			_calendar.init();
		})

		.on('success', '#MultipleForm', function (e, res) {

			if (res.Result == true) {
				setTimeout(function () {
					_calendar.GetTasks();
				}, 200);
			}
		})
		.on("click", '[data-event="clear"]', function () {
			_calendar.onChangeUserClose();
		})
		.on("click", '[class="k-icon k-i-close"]', function () {
			_calendar.onChangeUserClose();
		});



	$("#DashBoardFilter").click(function () {
		var userIds = $("#userIds").val();
		var type = $("#type").val();
		GetJsonDataFromUrl('/FTM/VWFTM_TaskPlan/CalendarDataSource', { userIds: userIds, type : type }, function (res) {
			$("#TaskCalendar").html(null)
			_calendar.CreateScheduler();
			_calendar.elem.setDataSource(new kendo.data.SchedulerDataSource({
				data: res.objects
			}));
		});
	});

</script>

<style type="text/css">
	.k-scheduler-table .k-today, .k-today > .k-scheduler-datecolumn, .k-today > .k-scheduler-groupcolumn {
		background-color: rgb(255 255 255 / 15%);
	}

	.k-scheduler-edit-form .k-edit-field {
		width: 67%;
	}

	.k-textbox {
		width: 315px;
	}

	.k-input {
		width: 315px;
	}


	.k-event-actions {
		visibility: hidden;
	}


	.ibox-custom {
		clear: both;
		margin-top: 0;
		padding: 0;
	}

	.k-edit-buttons {
		visibility: hidden;
	}

	::-webkit-scrollbar {
		width: 8px;
		height: 15px;
	}
</style>