@model Infoline.WorkOfTime.BusinessData.VWCMP_Storage
@{
	ViewBag.Title = "İşletme Şube/Depo/Kısım Alan Güncelle";
	Layout = "~/Views/Shared/_Layout.cshtml";
}


<script type="text/javascript" data-selector="modalContainer">
	$(document)
		.on('change', '#location', function () {
			var location = $('#location').val()
			if (location != "") {
				GetJsonDataFromUrl('/General/GetVWUT_LocationByLocationInterSect', { location: location }, function (resp) {
					if (resp) {
						DropDownSetValue($("#locationId").data("kendoDropDownList"), resp.id);
						$('#address').val(resp.pid_Title);
					}
				})
			}
		})

	function onChangeCompany(e) {
		var company = e.sender.dataItem();
		if (this.value() != "") {
			var filter = ("((type~eq~'0'~or~companyId~eq~'" + company.id + "')~and~IsWorking~eq~'1')");
			var filterJSON = kendo.filterParser(filter);
			$('#supervisorId').data("kendoDropDownList").dataSource.filter(filterJSON);
			$("#supervisorId").data("handler").enable(true);

		} else {
			$("#supervisorId").data("handler").enable(false);
			$("#supervisorId").data("handler").value([]);
		}
	}
</script>

@using (Html.BeginForm("Update", "VWCMP_Storage", FormMethod.Post, new Dictionary<string, object>() {
	{ "class", "form-horizontal" },
	{ "role", "form" },
	{ "data-selector", "modalContainer" },
	{ "data-formType", "Ajax" }
}))
{
	@Html.AntiForgeryToken()
	@Html.HiddenFor(model => model.id)
	@Html.HiddenFor(model => model.companyId)
	@Html.HiddenFor(model => model.locationType)


	<div class="form-group">
		<div class="col-md-4">
			<label class="control-label label-md" for="companyId_Title">İşletme</label>
		</div>
		<div class="col-md-8">
			@Html.TextBoxFor(model => model.companyId_Title, new Dictionary<string, object>()
			 {
				 {"class", "form-control"},
				 {"readonly","readonly" }
			 })
		</div>
	</div>
	<div class="form-group">
		<div class="col-md-4">
			<label class="control-label label-md" for="code">Bağlı Depo/Şube/Kısım</label>
		</div>
		<div class="col-md-8">
			@(
                    Html.Akilli()
                    .DropDownListFor(model => model.pid)
                    .OptionLabel("Lütfen Depo/Şube/Kısım Seçiniz")
                    .DataTextField("name")
                    .DataValueField("id")
                    .Action(b => b.Action("DataSourceDropDown", "VWCMP_Storage", new { area = "CMP" }))
                    .Filter<CMP_Storage>(a => a.companyId== Model.companyId)
                    .Sort(x => x.Add("name").Ascending())
                    .Execute()
                )
		</div>
	</div>
	<div class="form-group">
		<div class="col-md-4">
			<label class="control-label label-md req" for="code">Kodu</label>
		</div>
		<div class="col-md-8">
			@Html.TextBoxFor(model => model.code, new Dictionary<string, object>()
			 {
				 {"class", "form-control"},
				 {"placeholder", "Lütfen Kodu giriniz.."}
			 }).Validate(Validations.TextEverywhere(true, 0, 50))
		</div>
	</div>

	<div class="form-group">
		<div class="col-md-4">
			<label class="control-label label-md req" for="name">İsmi</label>
		</div>
		<div class="col-md-8">
			@Html.TextBoxFor(model => model.name, new Dictionary<string, object>()
			 {
				 {"class", "form-control"},
				 {"placeholder", "Lütfen İsmi giriniz.."}
			 }).Validate(Validations.TextEverywhere(true, 0, 250))
		</div>
	</div>

	<div class="form-group">
		<div class="col-md-4">
			<label class="control-label label-md" for="Telefon">Telefon</label>
		</div>
		<div class="col-md-8">
			@Html.TextBoxFor(model => model.phone, new Dictionary<string, object>()
						{
							{"class", "form-control"},
							{"placeholder", "Lütfen Telefon giriniz.."}
						}).Validate(Validations.TelefonNo(false))
		</div>
	</div>

	<div class="form-group">
		<div class="col-md-4">
			<label class="control-label label-md" for="Email">Email</label>
		</div>
		<div class="col-md-8">
			@Html.TextBoxFor(model => model.email, new Dictionary<string, object>()
						{
							{"class", "form-control"},
							{"placeholder", "Lütfen Email giriniz.."}
						}).Validate(Validations.EMail(false))
		</div>
	</div>

	if (Model.companyId.HasValue)
	{
		<div class="form-group">
			<div class="col-md-4">
				<label class="control-label label-md" for="İşletme">Şube/Depo/Kısım Sorumlusu</label>
			</div>
			<div class="col-md-8">

				@(Html.Akilli()
                .DropDownListFor(model => model.supervisorId)
                .OptionLabel("Lütfen Görevli Personel Seçiniz..")
                .DataTextField("FullName")
                .DataValueField("id")
                .Template("#=TemplateEngine('userTemplate',data)#")
                .Filter<Infoline.WorkOfTime.BusinessData.VWSH_User>(a => (a.type == (int)EnumSH_UserType.MyPerson || a.CompanyId == Model.companyId) && a.IsWorking == true)
                .Action(b => b.Action("DataSourceDropDown", "VWSH_User", new { area = "SH" }))
                .Sort(x => x.Add("FullName").Ascending())
                .CascadeFrom("companyId")
                .CascadeFromField("companyId")
                .Execute("id")
                )

			</div>
		</div>
	}
	else
	{
		<div class="form-group">
			<div class="col-md-4">
				<label class="control-label label-md" for="İşletme">Şube/Depo/Kısım Sorumlusu</label>
			</div>
			<div class="col-md-8">

				@(Html.Akilli()
                .DropDownListFor(model => model.supervisorId)
                .OptionLabel("Lütfen Görevli Personel Seçiniz..")
                .DataTextField("FullName")
                .DataValueField("id")
                .Template("#=TemplateEngine('userTemplate',data)#")
                .Filter<Infoline.WorkOfTime.BusinessData.VWSH_User>(a =>a.IsWorking == true)
                .Action(b => b.Action("DataSourceDropDown", "VWSH_User", new { area = "SH" }))
                .Sort(x => x.Add("FullName").Ascending())
                .CascadeFrom("companyId")
                .CascadeFromField("companyId")
                .Execute("id")
            )

			</div>
		</div>
	}

	<div class="form-group">
		<div class="col-md-4">
			<label class="control-label req label-md" for="location">Alan</label>
		</div>
		<div class="col-md-8">
			@(
				Html.Akilli().MapInputFor(a => a.location).
				Name("locationArea").
				HelpText("Lütfen Lokasyon seçiniz.").
				HtmlAttributes(new Dictionary<string, object>()
				{
					{"class", "form-control"},
					{"placeholder", "Lütfen Lokasyon Seçiniz.."}
				}).
				Validate(Validations.Required).
				DrawMode(MapInput.DrawMode.Polygon).
				ZoomLevel(5).
				Navigation(false).
				Searchable(true)
            )
		</div>
	</div>

	<div class="form-group">
		<div class="col-md-4">
			<label class="control-label label-md" for="locationId">Ülke,İl,İlçe</label>
		</div>
		<div class="col-md-8">
			@(
                      Html.Akilli()
                      .DropDownListFor(model => model.locationId)
                      .OptionLabel("Lütfen Ülke,İl,İlçe seçiniz..")
                      .DataTextField("pid_Title")
                      .DataValueField("id")
                      .Action(b => b.Action("DataSourceDropDown", "VWUT_Location", new { area = "UT" }))
                      .Filter<VWUT_Location>(a => (a.code == "TR" && (a.type == (int)EnumUT_LocationType.İlce)) || (a.code != "TR" && a.type == (int)EnumUT_LocationType.Sehir))
                      .Sort(x => x.Add("pid_Title").Ascending())
                      .Execute()
            )
		</div>
	</div>

	<div class="buttons">
		<button class="btn btn-md btn-danger pull-left" data-task="modalClose">Geri</button>
		<button class="btn btn-md btn-success pull-right" type="submit">Kaydet</button>
	</div>

}
