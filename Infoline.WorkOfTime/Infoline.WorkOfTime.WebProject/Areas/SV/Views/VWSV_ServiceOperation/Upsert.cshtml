@model VMSV_ServiceOperationModel
@{
    var title = "";
    if (Model.Transaction.type == (int)EnumPRD_TransactionType.HarcamaBildirimi)
    {
        title = "Harcanacak Ürünler";
        ViewBag.Title = "Harcama Bildirimi";
    }
    else if (Model.Transaction.type == (int)EnumPRD_TransactionType.FireFisi)
    {
        title = "Fire Bildirimi Yapılıcak Ürünler";
        ViewBag.Title = "Fire Bildirimi";
    }
    Layout = "~/Views/Shared/_Layout.cshtml";
    var userStatus = (PageSecurity)Session["userStatus"];
    var types = Infoline.Helper.EnumsProperties.EnumToArrayGeneric<EnumPRD_TransactionType>();

    var count = types.Count();
}
<link href="~/Content/Custom/css/PRD_transaction.css" rel="stylesheet" data-selector="modalContainer" />

<script type="text/javascript" data-selector="modalContainer">
    $(document).off("change", "#amount");
    var pageTrans = {
        Model: @Html.Raw( Json.Encode(Model) ),
        status:'@Model.Transaction.status',
        stock: [],
        outputId: null,
        outputCompanyId: null,
        inputId: null,
        inputCompanyId: null,
        type: null,
        Counter: 0,
        isNew:false,
        events: {
            removeRow: function (item) {
                $(item).parents('tr').remove();
            },
            removeAllRows: function () {
                if (pageTrans.Counter == 1 || pageTrans.Counter == 0) {
                    $("tbody tr").remove();
                    return;
                }
                $("tbody tr").remove();
            },
            addRow: function (data, isNew) {
                pageTrans.isNew = isNew;
                var temp = $($('#RowTemplate_Upsert').html());
                $('#RowContainer_Upsert').append(temp);
                temp.find('[data-item="id"]')
                    .attr('name', 'expens[' + pageTrans.Counter + '].id')
                    .attr('id', 'expens[' + pageTrans.Counter + '].id')
                temp.find('[data-item="amount"]').text(data != null ? data.unitId_Title : "-");
                var metarialId = data != null ? data.materialId : "-";
                temp.find('[data-item="metarialDetailText"]').attr("href", "/PRD/VWPRD_Product/Detail?id=" + metarialId);
                temp.find('[data-item="quantity"]')
                    .attr('name', 'expens[' + pageTrans.Counter + '].quantity')
                    .attr('id', 'expens[' + pageTrans.Counter + '].quantity')
                    .attr("data-value", data != undefined ? data.quantity : 1)
                    .kendoNumericTextBox({ "format": "N0", "culture": "tr-TR", "spinners": false, "value": (1) });
                temp.find('[data-item="stockLeft"]')
                    .attr("data-value", data != undefined ? data.stockLeft : 0)
                    .kendoNumericTextBox({ "format": "N0", "culture": "tr-TR", "spinners": false, "value": (data != null ? data.stockLeft : 0), "readonly": true });
                temp.find('[data-item="unitPrice"]')
                    .attr("data-value", data != undefined ? data.unitPrice : 0)
                    .kendoNumericTextBox({ "format": "N0", "culture": "tr-TR", "spinners": false, "value": (data != null ? data.unitPrice : 0), "readonly": true});
                temp.find('[data-item="serialCodes"]')
                    .attr('name', 'expens[' + pageTrans.Counter + '].serialCodes')
                    .attr('value', data != null ? data.serialCodes : '')
                    .tagify({ placeholder: "Seri Numaralı bir takip yapılmıyor." });
                var newFilter = {
                    filters: [
                        { field: "stockId", operator: "eq", value: pageTrans.outputId },
                    ]
                };
                temp.find('[data-item="productId"]')
                    .attr('name', 'expens[' + pageTrans.Counter + '].productId')
                    .attr('id', 'expens[' + pageTrans.Counter + '].productId')
                    .kendoDropDownList(
                        {
                            "change": pageTrans.events.productChange,
							"dataBound": pageTrans.events.productChange,
                            "dataSource": {
                                "type": "aspnetmvc-ajax",
                                "transport": { "read": { "url": "/PRD/VWPRD_StockSummary/DataSourceDropDown" } },
                                "pageSize": 100,
                                "pageTrans": 1,
                                "total": 0,
                                "serverPaging": true,
                                "serverSorting": true,
                                "serverFiltering": true,

                                "filter": newFilter
                            },
                            "dataTextField": "productId_Title",
                            "delay": 1000,
                            "filter": 'contains',
                            "dataValueField": "productId",
                            "optionLabel": "Lütfen Ürün Seçiniz..",
                        });
                pageTrans.Counter++;
            },
            productChange: function (e) {
                var data = e.sender.dataItem(e.sender.selectedIndex);
                var tr = this.element.parents('tr');
                var serialCodes = tr.find('[data-item="serialCodes"]');

                var quantity = tr.find('[data-item="quantity"]').data("kendoNumericTextBox");
                var stockLeft = tr.find('[data-item="stockLeft"]').data("kendoNumericTextBox");
                var productPrice = tr.find('[data-item="unitPrice"]').data("kendoNumericTextBox")
                var link = tr.find('[data-item="metarialDetailText"]');
                var amount = tr.find('[data-item="amount"]');
                amount.each(function (i, item) {
                    if (data.unitId_Title!=null) {
                        $(item).text(data.unitId_Title);
                    }


                })
                serialCodes.prop("required", false);
                if (serialCodes.data('tagify')) {
                    serialCodes.data('tagify').destroy();
                    serialCodes.removeData("tagify");
                }
                if (data.id == "") {
                    if (!pageTrans.isNew) {
                        tr.remove();
                       /* swal("Stoklarda Yok!", findProductName + " stoklarda mevcut değildir.", "warning");*/
                    }
                    pageTrans.isNew = false;

                } else {
                    link.attr("href","/PRD/VWPRD_Product/Detail?id="+data.productId)
                    tr.find('[data-selector="unit"]').text(data.unitId_Title || "Adet");
                    stockLeft.value(data.quantity ?? 0);
                    productPrice.value(data.servicePrice??0);
                    serialCodes.prop("readonly", data.stockType == 2 ? false : true);
                    serialCodes.val(data.id == e.sender._initial ? (serialCodes.val() || "") : "");
                    if (data.stockType == 2) {
                        quantity.readonly(true);
                        var values = data.id == e.sender._initial ? (serialCodes.val() || "") : "";
                        var valuesArr = [];
                        try {
                            valuesArr = JSON.parse(values).map(function (a) { return { value: a.value, readonly: pageTrans.status == 1 } });
                        } catch (e) {
                            valuesArr = (values).split(",").map(function (a) { return { value: a, readonly: pageTrans.status == 1 } });
                        }
                        try {
                            serialCodes.val(JSON.stringify(valuesArr));
                        } catch (e) {
                        }
                        var whitelist = $.ajax({
                            url: '/PRD/VWPRD_Transaction/DataSourceInventoryCodes',
                            data: { productId: data.productId, lastActionDataId: pageTrans.Model.Transaction.outputId, lastActionDataCompanyId: pageTrans.Model.Transaction.outputCompanyId },
                            async: false,
                        }).responseJSON || [];
                        whitelist = whitelist.concat(valuesArr.map(a => a.value));
                        serialCodes
                            .tagify({
                                placeholder: "Seri Numarasını yazın ve Enter'a basınız.",
                                enforceWhitelist: true,
                                whitelist: whitelist,
                                //editTags: false,
                                maxTags: 999999999,
                                dropdown: {
                                    maxItems: 25,           // <- mixumum allowed rendered suggestions
                                    //classname: "tags-look", // <- custom classname for this dropdown, so it could be targeted
                                    enabled: 0,             // <- show suggestions on focus
                                    closeOnSelect: false    // <- do not hide the suggestions dropdown once an item has been selected
                                }
                            })
                            //  .off("add removetag invalid")
                            .on("invalid", function () {
                                MesajWarning("Geçersiz seri numarası girişi yaptınız..", "Bilgilendirme");
                            })
                            .on("add removetag", function (e) {
                                quantity.value(serialCodes.val().split("value").length - 1);
                            })
                            ;
                    } else {
                        serialCodes.tagify({ placeholder: "Seri Numaralı bir takip yapılmıyor."});
                    }
                    //e.sender._initial = null;
                   
                }
            },
            openedProduct: function (value) {
                $("#productTable")[value ? "slideDown" : "slideUp"]();
                $("#productTable").find('[data-item="productId"]').each(function (c) {
                    var product = $(this).data("kendoDropDownList");
                    product.enable(true);
                    product.one("dataBound", function (e) {
                        product.trigger("change");
                        if (pageTrans.status == 1) {
                            product.readonly(true);
                        }
                    });
                    product.dataSource.read();
                });
            }

        },
        hizmet: {
            
            counter: 0,
            removeRow: function (item) {
                $(item).parents('tr').remove();
            },
            addRow: function (data) {

                var temp = $($('#RowTemplate_Hizmet').html());
                $('#RowContainer_Hizmet').append(temp);
                temp.find('[data-item="quantity"]')
                    .attr('name', 'ServiceNotifications[' + pageTrans.hizmet.counter + '].quantity')
                    .attr("data-value", data != undefined ? data.quantity : 1)
                    .kendoNumericTextBox({ "format": "N0", "culture": "tr-TR", "spinners": false, "value": (1) });
                temp.find('[data-item="id"]')
                    .attr('name', 'ServiceNotifications[' + pageTrans.hizmet.counter + '].id')
                    .kendoDropDownList(
                        {
                            "change": pageTrans.hizmet.productChange,
                            "dataBound": pageTrans.hizmet.productChange,
                            "value": (data != null ? data.materialId : null),
                            "dataSource": {
                                "type": "aspnetmvc-ajax",
                                "transport": { "read": { "url": "/PRD/VWPRD_Product/DataSourceDropDown" } },
                                "pageSize": 100,
                                "filter": { field: "type", operator: "eq", value: 0 }
                            },
                            "dataTextField": "fullName",
                            "delay": 1000,
                            "filter": 'contains',
                            "template": '#=TemplateEngine("productCustomTemplate",data)#',
                            "dataValueField": "id",
                            "optionLabel": "Lütfen Hizmet Seçiniz..",
                        });
                pageTrans.hizmet.counter++;
            },
            productChange: function (e) {
                if (e == null) {
                    return;
                }
                debugger;
            }
        },
        inputs: {
            companyChange: function (e) {
                pageTrans.outputId = e.sender.dataItem().id;
                pageTrans.events.removeAllRows();
                pageTrans.events.addRow(null, false);
                if (e.sender.dataItem().id!=null) {
                    $("#field").slideDown();
                }
                else {
                    $("#field").slideUp();
                }
                //$.each(pageTrans.Model.TreeProduct, function (i, item) {
                //    pageTrans.events.addRow(item, false);
                //});
            }
        }
    };
    if (pageTrans.Model.tenderIds != null)
    {
        $('[data-item="islendi"]').addClass('hide');
    }
    $(document)
        .on('before:submit', 'form', function (e) {
            $('[data-item="serialCodes"]').each(function (c) {
                var data = $(this).data("tagify");
                if (data && data.value) {
                    $(this).val(data.value.map(a => a.value).join(","));
                }
            });
            var counter = 0;
            $.each($("#RowContainer_Upsert tr"), function (i, item) {
                $(item).find('[data-item="id"]').attr('name', 'expens[' + counter + '].id');
                $(item).find('[data-item="unitPrice"]').attr('name', 'expens[' + counter + '].unitPrice');
                $(item).find('[data-item="quantity"]').attr('name', 'expens[' + counter + '].quantity');
                $(item).find('[data-item="serialCodes"]').attr('name', 'expens[' + counter + '].serialCodes');
                $(item).find('[data-item="productId"]').attr('name', 'expens[' + counter + '].productId');
                counter++;
            });
            var counter1 = 0;
            $.each($("#RowContainer_Hizmet tr"), function (i, item) {
                $(item).find('[data-item="id"]').attr('name', 'ServiceNotifications[' + counter1 + '].id');
                $(item).find('[data-item="quantity"]').attr('name', 'ServiceNotifications[' + counter1 + '].quantity');
                counter++;
            });
        })
        .on('keydown', function (c) {
            if (c.ctrlKey == true) {
                navigator.clipboard.readText()
                    .then(text => {
                        var textArea = $('<textarea/>').val(text);
                        navigator.clipboard.writeText(textArea.val());
                    })
                    .catch(err => {
                 /*      MesajWarning("Toplu serinumarası işlemleri için lütfen izin veriniz.","Bilgilendirme")*/
                    });
            }
        })
        .on("change", "#amount", function () {
            pageTrans.events.pushData();
        })

</script>
<script type="text/x-kendo-template" id="productCustomTemplate" data-selector="modalContainer">
    <div class="clearfix" style="padding: 8px 0;">
        <img class="img-circle img-responsive pull-left" style="width: 40px;height: 40px;" src="#:(logo ? logo : '/Content/Custom/img/urun-bulunamadi.png')#" onerror="ImageError(this, '/Content/Custom/img/urun-bulunamadi.png' )" />
        <div style=" width: calc(100% - 50px); height: 40px; float: right;">
            <div class="template-item">
                <strong>#:name#</strong>
            </div>
            <div class="template-item">
                <small>
                    #:code !=null ? code+' | ' : ''#
                    #:barcode !=null ? barcode+' | ' : ''#
                    #:brandId_Title !=null ? brandId_Title+' | ' : ''#
                </small>
            </div>
        </div>
    </div>
</script>
<script type="text/x-kendo-template" id="typeTemplate" data-selector="modalContainer">
	#var types = @Html.Raw(Infoline.Helper.Json.Serialize(types))#
	<div class="clearfix"><i style="margin-right:15px;" class="#:types.filter(function(a){return a.Key == Id}).map(a=>a.Generic['icon'])#"></i><strong>#=enumDescription#</strong></div>
</script>
<script type="text/template" data-selector="modalContainer" id="RowTemplate_Upsert">
    <tr>
        <td data-target="">
            <div class="form-group">
                <div class="input-group">

                    <input data-item="productId" required class="form-control" data-refresh="" />
                    <a data-item="metarialDetailText" class="btn m-r-sm btn btn-primary input-group-addon" data-original-title="Ürün Detayı" id="productGridDetailButton" target="_blank" href=""> <i class="fa fa-link"></i></a>
                </div>
            </div>
        </td>

        <td>
            <div class="form-group">
                <div class="input-group">
                    <input data-item="quantity" required min="1" />
                    <span data-item="amount" class="input-group-addon"> </span>
                </div>
            </div>
        </td>

        <td>
            <div class="form-group">
                <div class="input-group">
                    <input data-item="stockLeft" readonly />
                    <span data-item="amount" class="input-group-addon"> </span>
                </div>
            </div>
        </td>
        <td>
            <div class="form-group">
                <div class="input-group">
                    <input data-item="unitPrice" readonly min="0" />
                    <span class="input-group-addon"> TL</span>
                </div>
            </div>
        </td>
        <td>
            <div class="form-group">
                <input data-item="serialCodes" data-role="tagify" />
            </div>
        </td>
        <td>
            <div class="form-group">
                <button data-item="islendi" class="btn btn-md btn-danger" data-original-title="Satırı Sil" type="button" onclick="pageTrans.events.removeRow(this)" style="height: 40px;"><i class="fa fa-close"></i></button>
            </div>
        </td>
    </tr>
</script>
<script type="text/template" data-selector="modalContainer" id="RowTemplate_Hizmet">
    <tr>
        <td data-target="">
            <div class="form-group">
                <div class="input-group">
                    <input class="form-control" data-refresh="" data-item="id" />
                    <a data-item="metarialDetailText" class="btn m-r-sm btn btn-primary input-group-addon" data-original-title="Ürün Detayı" id="productGridDetailButton" target="_blank" href=""> <i class="fa fa-link"></i></a>
                </div>
            </div>

        </td>

        <td>
            <div class="form-group">
                <div class="input-group">
                    <input data-item="quantity" min="1" />
                    <span data-item="amount" class="input-group-addon">Adet</span>
                </div>
            </div>
        </td>
        <td>
            <div class="form-group">
                <div class="input-group">
                    <input data-item="unitPrice" readonly min="0" />
                    <span class="input-group-addon"> TL</span>
                </div>
            </div>
        </td>
        <td>
            <button class="btn btn-md btn-danger" data-original-title="Satırı Sil" type="button" onclick="pageTrans.hizmet.removeRow(this)" style="height: 40px;"><i class="fa fa-close"></i></button>
        </td>
    </tr>
</script>
@using (Html.BeginForm("Upsert", "VWSV_ServiceOperation", FormMethod.Post, new Dictionary<string, object>() {
    { "class", "form-horizontal" },
    { "role", "form" },
    { "data-selector", "modalContainer" },
    { "id","VWPRD_ProductionUpsertOperationForm"},
    { "data-formType", "Ajax" }
}))
{
    <style>
        .form-group {
            margin-right: 0px !important;
            margin-left: 0px !important;
        }

        .form-horizontal .form-group {
            margin-right: 0px !important;
            margin-left: 0px !important;
        }
    </style>
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.id)
    @Html.HiddenFor(model => model.serviceId)
    @Html.HiddenFor(model => model.Transaction.type)
    <fieldset>
        <legend>
            Stokların Düşüleceği Depo
        </legend>
        <div class="row">
            <div class="col-md-12">
                <div class="alert alert-warning text-center">
                    <b>Ürünler seçilen depodan temin edilecektir. Depo içerisinde olmayan ürünler için @ViewBag.Title yapamazsınız.</b>
                </div>
            </div>
        </div>
        <div class="form-group" data-cascade="#customerType" data-show="1" data-animation="fast">
            <div class="col-sm-12">
                <label class="control-label label-md req w3-margin-bottom" for="companyId">Stokların Düşüleceği Depo</label>
                @(Html.Akilli()
          .DropDownListFor(x => x.storageId)
          .OptionLabel("Stokların Düşüleceği Depo Seçiniz")
          .DataTextField("fullName")
          .DataValueField("id")
          .Template("#=TemplateEngine('storageTemplate',data)#")
          .Action(b => b.Action("DataSourceDropDown", "VWCMP_Storage", new { area = "CMP" }))
          .Sort(x => x.Add("name").Ascending())
          .Filter<CMP_Storage>(x=>x.companyId==userStatus.user.CompanyId.Value)
          .Events(x=>x.Change("pageTrans.inputs.companyChange"))
          .Execute("id"))
            </div>
        </div>
    </fieldset>
    <div style="display:none" id="field">
        <fieldset>
            <legend>@title</legend>
            <div class="clearfix" id="productTable">
                <table class="table table-custom" cellpadding="1" cellspacing="0">
                    <thead>
                        <tr>
                            <th style="width:40%">ÜRÜN</th>
                            <th style="width:10%">HARCANAN MİKTAR</th>
                            <th style="width:10%">STOK MİKTARI </th>
                            <th style="width:10%">FİYAT </th>
                            <th style="width:46%">SERİ NUMARALARI  <i data-original-title="Toplu seri numarası girişleri için excelden kopyalamayı veya seri numaralarını virgüllü bir şekilde kopyalamayı deneyebilirsiniz." class="fa fa-info-circle"></i></th>
                            <th style="width:3%"><button class="btn btn-info pull-right " type="button" onclick="pageTrans.events.addRow(null, true)"><i class="fa fa-plus"></i></button></th>
                        </tr>
                    </thead>
                    <tbody id="RowContainer_Upsert">
                    </tbody>

                </table>
            </div>
        </fieldset>
        @if (Model.Transaction.type == (int)EnumPRD_TransactionType.HarcamaBildirimi)
        {
            <fieldset>
                <legend>Hizmet Bildir</legend>
                <div class="clearfix" id="hizmetTable">
                    <table class="table table-custom" cellpadding="1" cellspacing="0">
                        <thead>
                            <tr>
                                <th style="width:75%">HİZMET</th>
                                <th style="width:22%">HARCANAN MİKTAR</th>
                                <th style="width:22%">BİRİM FİYAT</th>
                                <th style="width:3%"><button class="btn btn-info pull-right " type="button" onclick="pageTrans.hizmet.addRow(null)"><i class="fa fa-plus"></i></button></th>
                            </tr>
                        </thead>
                        <tbody id="RowContainer_Hizmet">
                        </tbody>

                    </table>
                </div>
            </fieldset>

        }

        <div class="buttons">
            <div class="hr-line-dashed"></div>
            <button class="btn btn-md btn-danger pull-left" data-task="modalClose">Geri</button>
            <button class="btn btn-md btn-primary pull-right " name="status" value="@((int)EnumPRD_TransactionStatus.islendi)" type="submit"><i class="icon-ok-2"></i>Kaydet ve Stokları Güncelle</button>
        </div>
    </div>


}
