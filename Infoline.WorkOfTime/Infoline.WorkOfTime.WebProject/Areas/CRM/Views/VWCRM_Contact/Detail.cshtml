@model VMCRM_ContactModel
@{
    ViewBag.Title = "Aktivite/Randevu Detayı";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var contactAction = Model.contactActions.OrderByDescending(a => a.created).FirstOrDefault();
    var company = ViewBag.Company;
}


<script type="text/x-kendo-template" id="VWCRM_ContactActionTemplate">

    <div class="vertical-timeline-block">
        <div class="vertical-timeline-icon navy-bg">
            <i class="fa fa-history"></i>
        </div>
        <div class="vertical-timeline-content navy-bg">
            <strong>#:description#</strong><br /><br />
            <div>
       <div class="pull-left">
    <span><a id="personsBring" class="btn btn-md btn-warning pull-left" onclick="transactionLocationBring('#:location#', '#:id#','#:description#')"><i class="fa fa-eye" data-toggle="tooltip" title="İşlem Konumunu Göster"></i></a></span>
    <span><a id="personsBringHide" style="display: none;" class="btn btn-md btn-dangers pull-left" onclick="transactionLocationHide('#:location#',this,'#:id#','#:description#')"><i class="fa fa-eye" data-toggle="tooltip" title="İşlem Konumunu Gizle"></i></a></span>
    </div>
      <div class="pull-right">
        <span><a id="goLocation" style="display: none;" class="btn btn-md btn-dangers pull-left"  onclick="locationGoTo('#:id#')"><i class="fa fa-location-arrow" data-toggle="tooltip" title="Konuma Git"></i></a></span>

        <span><a id="personLocationTrackingBring" style="display: none; margin-left: 4px;" class="btn btn-md btn-dangers pull-left" onclick="personsBring('#:createdby#','#:created#', '#:location#', '#:id#','#:description#')"><i class="fa fa-eye" data-toggle="tooltip" title="Aksiyon konumunu izle"></i></a></span>

        <span><a id="personLocationTrackingHide" style="display: none;  margin-left: 4px;" class="btn btn-md btn-reds pull-left"  onclick="personsBringHide('#:createdby#','#:created#','#:location#',this,  '#:id#')"><i class="fa fa-eye" data-toggle="tooltip" title="Aksiyon konumunu gizle"></i></a></span>
       </div>
    </div>
</script>

<style type="text/css">

    .btn-dangers {
        background-color: #ebebeb !important;
        border-color: #ebebeb !important;
        color: #e4a100 !important;
    }
    .btn-blues {
        background-color: #151d94 !important;
        border-color: #151d94 !important;
        color: #fff !important;
    }
    .btn-reds {
        background-color: #607D8B !important;
        border-color: #607D8B !important;
        color: #fff !important;
    }

    #VWCRM_ContactAction {
        border: 0px !important;
    }

        #VWCRM_ContactAction .k-grid-header {
            border-color: #fff !important;
        }

        #VWCRM_ContactAction td {
            border-color: #fff !important;
        }

        #VWCRM_ContactAction .k-header.k-grid-toolbar.k-grid-top {
            display: none;
        }

        #VWCRM_ContactAction .k-pager-wrap.k-grid-pager.k-widget.k-floatwrap {
            display: none;
        }

        #VWCRM_ContactAction .k-grid-header-wrap {
            display: none;
        }

    #vertical-timeline::before {
        left: 37px;
    }
</style>

<div class="row">
    <div class="col-lg-3">
        <div class="ibox ">
            <div class="p-md text-center myCompanyBg" style="background:url('/Content/Custom/img/Company-Background.png');color: #ffffff;padding-bottom:10px !important;">
                <div class="m-b-md">
                    <h2 class="font-bold no-margins">
                        @company.name
                    </h2>
                    <small> <i class="fa fa-location-arrow"></i> @(company.openAddressLocationId_Title != null ? company.openAddressLocationId_Title : "Lokasyon bulunamadı")</small>
                </div>
                <img src="@(company.logo != null ? company.logo : "")" alt="image" class="img-circle m-t-xs img-responsive" style="height: 103px;margin: auto; border: 2px solid #fff;" onerror="ImageError(this,'/Content/Custom/img/company.png')">

                <div style="margin-top: 15px;">
                    <a class="btn btn-xs btn-primary" href="mailto:@company.email"> <i class="fa fa-envelope"></i> Mail Gönder </a>
                    <a class="btn btn-xs btn-primary" href="tel:@company.phone"> <i class="fa fa-phone"></i> Ara </a>
                    <a class="btn btn-xs btn-primary" data-href="/CMP/VWCMP_Company/Update?id=@Model.CustomerCompanyId" data-modal="true" data-task="Insert"> <i class="fa fa-edit"></i> Müşteri Düzenle </a>
                    <a href="/CMP/VWCMP_Company/Detail?id=@Model.CustomerCompanyId" target="_blank" class="btn btn-xs btn-primary"><i data-original-title="Müşteri Detayı" class="fa fa-info-circle"></i>Müşteri Detayı</a>
                </div>
            </div>
            <div class="widget-text-box" style="padding:0px !important;">

                <ul class="list-group">

                    <li class="list-group-item">
                        <span class="badge badge-white">@Html.Raw(Model.CustomerCompanyId_Title != null ? Model.CustomerCompanyId_Title : "-")</span>
                        Müşteri :
                    </li>

                    <li class="list-group-item">
                        <span class="badge badge-white">

                            @Html.Raw(ViewBag.participant_Title != null ? ViewBag.participant_Title : "-")
                        </span>
                        Katılımcılar :
                    </li>

                    <li class="list-group-item">
                        <span class="badge badge-white">@Html.Raw(Model.PresentationStageId_Title)</span>
                        Aşama :
                    </li>

                    <li class="list-group-item">
                        <span class="badge badge-white">@string.Format(Extensions.DateFormatFull(true), Model.ContactStartDate) </span>
                        Başlangıç Tarihi :
                    </li>

                    <li class="list-group-item">
                        <span class="badge badge-white">@string.Format(Extensions.DateFormatFull(true), Model.ContactEndDate)</span>
                        Bitiş Tarihi :
                    </li>

                    <li class="list-group-item">
                        <span class="badge badge-white">@Html.Raw(Model.ContactType_Title)</span>
                        Aktivite/Randevu Tipi :
                    </li>
                    <li class="list-group-item">
                        <span class="badge badge-white">@Html.Raw(Model.ContactStatus_Title)</span>
                        Aktivite/Randevu Durumu :
                    </li>
                    <li class="list-group-item">
                        <span class="badge badge-white">@Html.Raw(Model.Description)</span>
                        Açıklama :
                    </li>
                </ul>
            </div>
        </div>
    </div>

    <div class="col-lg-9">
        <div class="row">
            <div class="colmd3Cards col-xs-12 col-sm-12 col-md-6">
                <div class="widget style1 yellow-bg">
                    <div class="row">
                        <div class="col-xs-2 hidden-md wHeader">
                            <i class="icon-adult fa-4x"></i>
                        </div>
                        <div class="col-xs-10 text-right wInformation">
                            <span>Katılımcı Sayısı</span>
                            <h2><span>@string.Format("{0}", Model.TotalContactPerson)</span></h2>
                        </div>
                    </div>
                </div>
            </div>
            <div class="colmd3Cards col-xs-12 col-sm-12 col-md-6">
                <div class="widget style1 lazur-bg">
                    <div class="row">
                        <div class="col-xs-2 hidden-md wHeader">
                            <i class="fa fa-history  fa-4x"></i>
                        </div>
                        <div class="col-xs-10 text-right wInformation">
                            <span>İletişim Süresi</span>
                            <h2><span>@string.Format("{0:n2}", Model.ContactTime_Title) </span></h2>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <section style="margin-bottom: 20px;">
            <div class="tabs-container">
                <ul class="nav nav-tabs">


                    <li class="active" data-href="@Url.Action("DataSourceForContactAction", "VWCRM_Contact", new { area = "CRM" })" data-toggle="tooltip" data-placement="top" title="Aktivite Haritası">
                        <a data-toggle="tab" href="#VWCRM_ContactActions" aria-expanded="false"><i class="icon-adult text-success fa-2x" aria-hidden="true"></i></a>
                    </li>

                    <li data-toggle="tooltip" data-placement="top" title="Aktivite/Randevu Dosyaları">
                        <a data-toggle="tab" href="#CRM_ContactFiles" aria-expanded="false"><i class="icon-docs text-success fa-2x" aria-hidden="true"></i></a>
                    </li>

                </ul>
                <div class="tab-content">
                    <div class="tab-pane active" data-href="@Url.Action("DataSourceForContactAction", "VWCRM_ContactAction", new { area = "CRM" })" id="VWCRM_ContactActions">

                        <div class="row" id="defaults">
                            <div class="col-md-4" >
                                @(Html.Akilli()
                      .Grid<Infoline.WorkOfTime.BusinessData.VWCRM_ContactAction>("VWCRM_ContactAction")
                      .DataSource(x => x.Ajax().Read(r => r.Action("DataSourceForContactAction", "VWCRM_Contact", new { area = "CRM" })).PageSize(500).Filter(a => a.ContactId == Model.id).Sort(a => a.Add("created").Descending()))
                      .Columns(x =>
                      {
                          x.Bound(y => y.description).GridSelector(GridSelectorType.Checkbox).Title("Açıklama").ClientTemplate("#=TemplateEngine('VWCRM_ContactActionTemplate',data)#");

                      })
                      .Selectable(a => a.Enabled(false))
                      .Scrollable(x => x.Height(431))
                      )
                            </div>

                            <div class="col-md-8">

                                <div id="contactActionMaps">
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane" id="CRM_ContactFiles">
                        <h4><i class="text-success icon-docs"></i> AKTİVİTE/RANDEVU DOSYALARI </h4>
                        @Html.Action("Preview", "Files", new { area = "", DataId = Model.id, DataTable = "CRM_Contact" })
                    </div>
                </div>
            </div>
        </section>

    </div>

</div>


<link href="/Content/UserLocationMap/map.css" rel="stylesheet" />

<script type="text/javascript">
        var control = false;
        var selectedFeature = null;
        var page = {
            popup: null,
        defines: {
            data: [],
            filteredData: [],
            filteredDataLocationTracking: [],
            locationsData: [],
            locationsDontChangeData: [],
            locationsIds: [],
            customerLocation: [],
            },
        dfn: {
            harita: new AkilliHarita('contactActionMaps', {
                  zoom: 7,
                  minZoom: 0,
                  altlik: "Default1",
                  uiAltlik: false,
                  uiDefault: true,
                  uiSearch: false,
                  uiMinimap: false,
                  uiScaleLine: false,
                  uiMousePosition: false,
                  uiMesurement: false,
                  uiInfo: false
                }),
            },
        fn: {
        zoomIns: function (e) {
           $('.ol-zoom-in').trigger("click");
                },
        zoomOut: function (e) {
            $('.ol-zoom-out').trigger("click");
                },
        zoomMove: function (e) {
            $(e).toggleClass("active");
        if ($(e).hasClass("active")) {
            $('[data-tool="DragZoom"]').trigger("click");
                    } else {
            $('[data-tool="DragPan"]').trigger("click");
                    }
                },
        homes: function (e) {
            $('[data-tool="Home"]').trigger("click");
                },
        fullScreen: function (e) {
            $(e).toggleClass("active");
        $('.ol-full-screen-false').trigger("click");
                },
        layersSwip: function (e) {
            $(e).toggleClass("active");
        $('[data-tool="Swipe"]').trigger("click");
                },
        slideTab: function (elem, target) {

                    var hasActive = $(elem).hasClass("active");
        $(elem).parent().find("button").removeClass("active");

        if (hasActive) {
            $(".btn-bar.right").animate({ right: -430 }, 200);
                    } else {
            $(elem).addClass("active");
        $(".btn-bar.right").animate({right: -430 }, 200, function () {
            $('.pan-container').find('.pan-content').hide();
        $('.pan-container').find("#" + target).show();
        $(".btn-bar.right").animate({right: 15 }, 200);
                        });
                    }
                },
        colorSelect: function (e) {
                    if ($('#ColorBox').hasClass("hide")) {
            $('#ColorBox').removeClass("hide");
                    } else {
            $('#ColorBox').addClass("hide");
                    }
                },
        colorInfoSelect: function (e) {
                    if ($('#ColorInfo').hasClass("hide")) {
            $('#ColorInfo').removeClass("hide");
                    } else {
            $('#ColorInfo').addClass("hide");
                    }
                },
        searchSelect: function (e) {
                    if ($('.search-content')[0].style.display == "none") {
            $('[data-target=".search-content"]').trigger("click");
                    } else {
            $('.search-content')[0].style.display = "none";
                    }
                }
            },
        changePresId: "",
        data: null,
        init: function () {

            $('[data-original-title]').tooltip();


  

        svg = '<svg id="Capa_1" data-name="Capa 1" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="64px" height="64px" viewBox="0 0 512 512"><path fill="#757575" d="M256,0A160,160,0,0,0,96,160a158.2,158.2,0,0,0,15.7,69.1C112.2,230.3,256,512,256,512L398.6,232.6A160,160,0,0,0,256,0Zm0,256a96,96,0,1,1,96-96A96,96,0,0,1,256,256Z" /><circle fill="#ededed" cx="256" cy="160" r="96" /><path transform="rotate(180, 0, 0)  translate(-322,-200) scale(0.12)" fill="#f8ac59" d="M1070-88q0-21-2-63h-1067q0 10 0 31t-1 32q0 30 1 37 12 49 64 85t112 53 125 47 97 65q17 22 17 38 0 22-11 73-4 21-10 37t-16 33-16 31q-15 35-33 132-6 38-6 75 0 105 54 168t157 63 158-63 53-168q0-31-7-75-14-89-32-132-6-14-15-31t-16-33-11-37q-11-51-11-73 0-18 17-38 31-36 97-65t125-47 111-53 64-85q2-8 2-37z" /></svg>';

        var actionLocation = new ol.style.Style({
        image: new ol.style.Icon({
        opacity: 1,
        src: '/Content/Custom/img/marker_user.png',
        scale: 1.0,
        anchor: [0.5, 64],
        anchorXUnits: 'fraction',
        anchorYUnits: 'pixels',
                    })
        });

        svg = '<svg id="Capa_1" data-name="Capa 1" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="64px" height="64px" viewBox="0 0 512 512"><path fill="#1A237E" d="M256,0A160,160,0,0,0,96,160a158.2,158.2,0,0,0,15.7,69.1C112.2,230.3,256,512,256,512L398.6,232.6A160,160,0,0,0,256,0Zm0,256a96,96,0,1,1,96-96A96,96,0,0,1,256,256Z" /><circle fill="#f8ac59" cx="256" cy="160" r="96" /><path transform="rotate(180, 0, 0)  translate(-322,-200) scale(0.12)" fill="#ededed" d="M1070-88q0-21-2-63h-1067q0 10 0 31t-1 32q0 30 1 37 12 49 64 85t112 53 125 47 97 65q17 22 17 38 0 22-11 73-4 21-10 37t-16 33-16 31q-15 35-33 132-6 38-6 75 0 105 54 168t157 63 158-63 53-168q0-31-7-75-14-89-32-132-6-14-15-31t-16-33-11-37q-11-51-11-73 0-18 17-38 31-36 97-65t125-47 111-53 64-85q2-8 2-37z" /></svg>';

        var customerLocation = new ol.style.Style({
                image: new ol.style.Icon({
                    opacity: 1,
                    src: '/Content/Custom/img/marker-company.png',
                    scale: 1,
                    anchor: [0.5, 64],
                    anchorXUnits: 'fraction',
                    anchorYUnits: 'pixels',
                })
        });
           
        page.dfn.harita.style.addCustom("actionLocationStyle", actionLocation);
        page.dfn.harita.style.addCustom("customerLocationStyle", customerLocation);
        page.dfn.harita.layer.addVector("Aksiyon Konum", "ActionLocation", "actionLocationStyle", "actionLocationStyle", "actionLocationStyle")
        page.dfn.harita.layer.addVector("Müşteri Konum", "CustomerLocation", "customerLocationStyle", "customerLocationStyle", "customerLocationStyle")
        page.dfn.harita.layer.addVector("Action", "Action");

        page.dfn.harita.feature.events(function (feature, layer) { return true; }, function (feature, layer) { return true; }, function (event, object) { });

            },
        locateFeatureToMap: function (locations,id,description) {
            var points = [];
            var pointsLocation = [];
            if (page.defines.locationsData != undefined) {

                if (locations != null) {
                    var feature = page.dfn.harita.feature.add("ActionLocation", id, locations, description);
                    if (feature) {
                        if (locations != null) {
                            feature.set("properties", locations);
                            feature.set("description", description);
                        }
                    }
                }
            }
            if (page.defines.customerLocation != undefined && page.defines.customerLocation != []) {

                var customerLocationData = page.defines.customerLocation;
                var locationIds = newGuid();
                if (customerLocationData != null) {
                    var featured = page.dfn.harita.feature.add("CustomerLocation", locationIds, customerLocationData);
                    if (featured) {
                        featured.set("properties", customerLocationData);
                    }
                }
            }
            if (page.defines.filteredData != undefined) {


                svg = '<svg id="Capa_1" data-name="Capa 1" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="64px" height="64px" viewBox="0 0 512 512"><path fill="#ff0202" d="M256,0C115.39,0,0,115.39,0,256s115.39,256,256,256s256-115.39,256-256S396.61,0,256,0z" /></svg>';
                var locations = new ol.style.Style({
                    image: new ol.style.Icon({
                        opacity: 1,
                        src: 'data:image/svg+xml,' + escape(svg),
                        scale: 0.18,
                        anchor: [0.5, 64],
                        anchorXUnits: 'fraction',
                        anchorYUnits: 'pixels',
                    })
                });
                page.dfn.harita.style.addCustom("locationsStyle", locations);
                page.dfn.harita.layer.addVector("Konumlar", id, "locationsStyle", "locationsStyle", "locationsStyle");

                var z = id + 's'
                var y = id + 'y';
                page.dfn.harita.layer.addVector("Actions", z);

               var trackingDatas = page.defines.filteredData.LocationTrackings;
                if (trackingDatas != null) {

                    page.defines.filteredDataLocationTracking.push(trackingDatas,id);

                     if (trackingDatas.length > 0) {
                         $.each($.Enumerable.From(trackingDatas).OrderBy(x => x.timeStamp).ToArray(), function (i, data) {
                             if (data.location != null) {
                                  var features = page.dfn.harita.feature.add(id, data.id, data.location);
                                  if (features) {
                                      features.set("properties", data);
                                      var coords = page.dfn.harita.helper.SQLtoGeometry(data.location);
                                       if (coords != null) {
                                       points.push(data.location.replace('POINT (', '').replace(')', ''));
                                       }
                                  }
                             }
                         });
                         var line = "LINESTRING(" + points.join(", ") + ")";
                         page.dfn.harita.feature.add(z, y, line);
                     }
                }
             
            }
      },
        applyFilter: function (locations, id, description) {
         page.locateFeatureToMap(locations, id, description);

         if ($('#searchButton').hasClass("active")) {
            $('#searchButton').trigger("click");
         }

        },
        goLocation: function (_this) {
                var featureId = $(_this).attr("data-personId");

        if (featureId && featureId != null && featureId != "") {
                    var feature = page.dfn.harita.feature.get(featureId)[featureId];
        if (feature) {
            page.dfn.harita.helper.PanTo(feature.getGeometry().getExtent());
            page.dfn.harita.map.getView().setZoom(12);

            $("#contactActionMaps").trigger("select:feature", {type: "add", element: feature });

        $(".btn-bar.right").animate({right: -800 }, 200);
                    }
        else {
            MesajWarning("Konum bulunamadı.", "Uyarı");
                    }
                }
        else {
            MesajWarning("Konum bulunamadı.", "Uyarı");
                }
            },
        search: function (_this) {
                var type = $(_this).attr("data-content");
        var key = $(_this).val();

        page.loadPanelData(type, key);
            },
            getPersonDetailForHover: function (data, propDescription) {
                if (data.location != undefined) {
                    var person = page.defines.filteredData;
                    var locations = data.location.split('(')[1].replace(')', "");
                    var latitude = locations.split(" ")[1].replace(".", ",").substr(0, 7);
                    var longitude = locations.split(" ")[0].replace(".", ",").substr(0, 7);
                    var text = '<div class="item" style="height: 100% !important;width: 240px!important; font-size:10px; padding: 1px 20px;">                                                                                  ' +
                        '  <div class="head text-center clearfix">                                                                  ' +
                        '          <div class="col-xs-12">Konum Bilgileri</div>                                                     ' +
                        '  </div>                                                                                                   ' +
                        '   <ul class="list-group clear-list" style="margin-top: 5px;">                                                                  ' +
                        '        <li class="list-group-item fist-item" style="padding: 6px 0;">                                                             ' +
                        '            <span class="pull-right listGroupValue">                                                       ' +
                        page.parseTimeStamps(data.takenDate) +
                        '            </span>                                                                                        ' +
                        '            Konumun Alındığı Tarih :                                                                       ' +
                        '        </li>                                                                                              ' +
                        '        <li class="list-group-item fist-item" style="padding: 6px 0;">                                                             ' +
                        '            <span class="pull-right listGroupValue">                                                       ' +
                        longitude + " " + latitude +
                        '            </span>                                                                                        ' +
                        '            Konum Bilgisi :                                                                                ' +
                        '        </li>                                                                                              ' +
                        '        <li class="list-group-item fist-item" style="padding: 6px 0;">                                                             ' +
                        '            <span class="pull-right listGroupValue">                                                       ' +
                        (data.deviceId != null ? data.deviceId : "Cihaz bilgisi bulunamadı.") +
                        '            </span>                                                                                        ' +
                        '            Cihaz Bilgisi :                                                                                ' +
                        '        </li>                                                                                              ' +
                        '    </ul>                                                                                                  ' +
                        '</div>';

                    return text;
                }
                else if (data == page.defines.customerLocation)
                {
                    var customerCompanyId_Title = '@Model.CustomerCompanyId_Title';
                    var text = '<div class="item" style="height: 100%;width: 125px; font-size:9px;">                                                                                  ' +
                        '  <div class="head text-center clearfix">                                                                  ' +
                        '          <div style="    color: black;font-weight: bold;"> ' + customerCompanyId_Title +' Limited </div>                                                     ' +
                        '  </div>                                                                                                   ' +
                        '</div>';

                    return text;
                }
                else {
                    var locations = data.split('(')[1].replace(')', "");
                    var latitude = locations.split(" ")[1].replace(".", ",").substr(0, 7);
                    var longitude = locations.split(" ")[0].replace(".", ",").substr(0, 7);
                    var text = '<div class="item" style="height: 100% !important;width: 251px!important; font-size:10px; padding: 1px 20px;">                                                                                  ' +
                        '  <div class="head text-center clearfix">                                                                  ' +
                        '          <div class="col-xs-12">İşlem Konumu</div>                                                     ' +
                        '  </div>                                                                                                   ' +
                        '   <ul class="list-group clear-list" style="margin-top: 5px;">                                                                  ' +
                        '        <li class="list-group-item fist-item" style="padding: 6px 0; margin-bottom: 10px;">                                                             ' +
                        '            <span class="pull-right listGroupValue" style="width: 136px;height: 100%; padding-left: 29px;">                                                       ' +
                        propDescription +
                        '            </span>                                                                                        ' +
                        '           İşlem Açıklaması :                                                                                ' +
                        '        </li>                                                                                              ' +
                        '        <li class="list-group-item fist-item" style="padding: 6px 0;">                                                             ' +
                        '            <span class="pull-right listGroupValue">                                                       ' +
                        longitude + " " + latitude +
                        '            </span>                                                                                        ' +
                        '            İşlem Konumu :                                                                                ' +
                        '        </li>                                                                                              ' +

                        '    </ul>                                                                                                  ' +
                        '</div>';
                    return text;
                }
            },
            parseTimeStamps: function (takenDate) {
                return takenDate.replace('T', ' ');
            }
    }
    function getContactDataAndApplys(userId, startDateTime, endDateTime, locations, id, description) {
        GetJsonDataFromUrl('/SH/SH_UserLocationTracking/GetMapData', { startDate: kendo.toString(startDateTime, 'yyyy-MM-dd HH:mm'), endDate: kendo.toString(endDateTime, 'yyyy-MM-dd HH:mm'), userId: userId }, function (res) {
            if (res.LocationTrackings != null) {
                page.defines.filteredData = res;
                page.applyFilter(locations, id, description);
                page.dfn.harita.map.updateSize();
            }
            else {

                if (page.defines.locationsData != undefined && page.defines.locationsData != "" || locations != null) {
                    page.applyFilter();
                }
               else if (locations == null)
                {
                    page.applyFilter();
                }
                else {

                }
                page.dfn.harita.map.updateSize();
            }
        }, "Veriler Yükleniyor...");
    }
    function transactionLocationBring(locations, id,description) {

        page.locateFeatureToMap(locations, id, description);
        if (page.defines.filteredDataLocationTracking != null && page.defines.filteredDataLocationTracking != []) {
            for (var i = 0; i < page.defines.filteredDataLocationTracking.length; i++) {

                if (page.defines.filteredDataLocationTracking[i] == id) {
                    $.each(page.defines.filteredDataLocationTracking[i - 1], function (e, item) {
                        page.dfn.harita.feature.remove(id, item.id);
                    })
                }

            }
        }
        var z = id + 's';
        var y = id + 'y';
        page.dfn.harita.feature.remove(z, y);
        page.dfn.harita.layer.panTo("ActionLocation",id);
        page.dfn.harita.map.getView().setZoom(12);
        page.dfn.harita.map.updateSize();

        $('.k-state-focused').first().find('#personsBring').hide();
        $('.k-state-focused').first().find('#personsBringHide').show();
        $('.k-state-focused').first().find('#goLocation').show();
        $('.k-state-focused').first().find('#personLocationTrackingBring').show();
    };
    function transactionLocationHide(locations, e, id, description) {
        if (page.defines.filteredDataLocationTracking != null && page.defines.filteredDataLocationTracking != []) {
            for (var i = 0; i < page.defines.filteredDataLocationTracking.length; i++) {

                if (page.defines.filteredDataLocationTracking[i] == id) {
                    $.each(page.defines.filteredDataLocationTracking[i - 1], function (e, item) {
                        page.dfn.harita.feature.remove(id, item.id);
                    })
                }
            }
        }
        var z = id + 's';
        var y = id + 'y';
        page.dfn.harita.feature.remove(z, y);
        page.dfn.harita.feature.remove("ActionLocation", id);
        page.dfn.harita.map.updateSize();
        $('.k-state-focused').first().find('#personsBring').show();
        $('.k-state-focused').first().find('#personsBringHide').hide();
        $('.k-state-focused').first().find('#goLocation').hide();
        $('.k-state-focused').first().find('#personLocationTrackingBring').hide();
        $('.k-state-focused').first().find('#personLocationTrackingHide').hide();
    };
    function personsBring(createdby, created, locations, id, description) {

        let usersId = createdby;
        let contactEndDateTime = new Date(created).addDays(-22).addHours(1);
        let contactStartDateTime = new Date(created).addDays(-22).addHours(-1);
        if (usersId != undefined && usersId != "") {
            getContactDataAndApplys(usersId, contactStartDateTime, contactEndDateTime, locations, id, description);
        };
        page.dfn.harita.layer.panTo("ActionLocation", id);
        page.dfn.harita.map.getView().setZoom(12);
        page.dfn.harita.map.updateSize();
        $('.k-state-focused').first().find('#personLocationTrackingBring').hide();
        $('.k-state-focused').first().find('#personLocationTrackingHide').show();

    };
    function personsBringHide(createdby, created, locations, e, id) {
        for (var i = 0; i < page.defines.filteredDataLocationTracking.length; i++) {
               
            if (page.defines.filteredDataLocationTracking[i] == id) {
                $.each(page.defines.filteredDataLocationTracking[i-1], function (e, item) {
                    page.dfn.harita.feature.remove(id, item.id);
                })
            }       
        }
        var z = id + 's';
        var y = id + 'y';
        page.dfn.harita.feature.remove(z, y);
        page.dfn.harita.map.updateSize();
        $('.k-state-focused').first().find('#personLocationTrackingBring').show();
        $('.k-state-focused').first().find('#personLocationTrackingHide').hide();
    }
    function locationGoTo(id) {
        page.dfn.harita.feature.panTo(id);
        page.dfn.harita.map.getView().setZoom(12);
        page.dfn.harita.map.updateSize();
    };

    page.init();
    $('[data-filter ="contains"]').parent().parent().hide();

    $(document)
        .on("load:grid", "#VWCRM_ContactAction", function (e, resp) {

            if (resp == undefined) {
                $('#VWCRM_ContactAction').hide();
                $("#defaults").append("<h2 style='position:absolute;margin-top:200px; padding-left:10px; padding-top: 218px;font-size: 15px !important; ' class='font-bold no-margins'>Aktivite üzerinde herhangi bir işlem bulunmamaktadır.</h2>")
            }
            page.defines.customerLocation = '@Model.CustomerCompanyLocation';
            page.locateFeatureToMap();
            page.defines.locationsDontChangeData = [];

            $("#contactActionMaps").css("height", "496px");
            $("#contactActionMaps").css("width", "100%");
            page.dfn.harita.layer.panTo("CustomerLocation");
            page.dfn.harita.map.getView().setZoom(12);
            page.dfn.harita.map.updateSize();

        })
        .on("hover:feature", "#contactActionMaps", function (e, resp) {
            page.dfn.harita.overlay.remove('slider-station');
            if (resp.type == "add") {
                var elem = resp.element;
                var prop = elem.get("properties");
                var propDescription = elem.get("description");

                if (prop) {
                    text = page.getPersonDetailForHover(prop, propDescription);
                    var geometry = resp.element.getGeometry();
                    var coordinate = geometry.getCoordinates();
                    var pixel = page.dfn.harita.map.getPixelFromCoordinate(coordinate);

                    var tooltiplocation = "";

                    if (pixel[1] < 400)
                        tooltiplocation = "top-right";
                    else if (screen.height - pixel[1] < 400)
                        tooltiplocation = "bottom-right";
                    else
                        tooltiplocation = "center-right";

                    page.dfn.harita.overlay.add('slider-station', text, '', tooltiplocation, elem.getGeometry().getCoordinates(), [-10, -30]);
                    page.dfn.harita.map.updateSize();
                }
            }
        })
</script>

<script type="text/javascript" data-selector="modalContainer">

    var _contact = {
        @*Model: @Html.Raw(Json.Encode(Model)),*@
        Model: '@Model',
        init: function (users) {

            $.each($('[data-readurl]'), function (i, item) {

                $(item)
                    .kendoMultiSelect({

                        value: users,
                        autoClose: false,
                        dataTextField: 'Name',
                        dataValueField: 'Id',
                        optionLabel: $(item).attr('placeholder'),
                        filter: 'contains',
                        dataSource: new kendo.data.DataSource({
                            transport: {
                                read: {
                                    url: $(item).attr('data-readurl'),
                                    dataType: "json"
                                }
                            }
                        }),
                        dataBound: _contact.Events.onDataBound,
                        select: _contact.Events.onSelect,
                        template: _contact.Events.Template,
                        tagTemplate: function(dataItem){

                            if(dataItem.type == 0){
                                _cls = 'warning';
                                _txt = 'İşletmemiz';
                            }
                            else if(dataItem.type == 1){
                                _cls = 'info';
                                _txt = 'Kanal';
                            }else if(dataItem.type == 2){
                                _cls = 'success';
                                _txt = 'Müşteri';
                            } else if(dataItem.type == 3){
                                _cls = 'primary';
                                _txt = 'Çözüm Ortağı';
                            }

                            return '<span class="label label-xs label-' + _cls + '">' + '' + _txt + '</span> ' + dataItem.Name;

                        }
                    });

            });

        },
        Events: {
            onDataBound: function () {

                var $this = this;

                var ds = $this.dataSource;
                var newEntry = $.Enumerable.From($this.dataSource.data()).Where(function (a) { return a.Name == $this._prev }).FirstOrDefault();

                if (newEntry == null && $this._prev.length > 2) {

                    var items = $.Enumerable.From($this.dataSource.data()).Where(function (a) { return a.newItem != true; }).ToArray();
                    if (items.length != $this.dataSource.data().length) {
                        $this.dataSource.data(items);
                        return;
                    }

                    ds.add({ Name: $this._prev, Id: newGuid(), newItem: true, type: 1 });   //  Kanal Personeli
                    ds.add({ Name: $this._prev, Id: newGuid(), newItem: true, type: 2 });   //  Müşteri Personeli
                    ds.add({ Name: $this._prev, Id: newGuid(), newItem: true, type: 3 });   //  Çözüm Ortağı Personeli
                    this.open();
                }

            },
            onSelect: function (e) {

                if (e.item == null) { return; }

                var elem = this.dataSource.view()[e.item.index()];

                if (elem.newItem == true) {

                    $.ajax({
                        type: "POST",
                        url: '/CRM/VWCRM_ContactUser/InstantInsert',
                        data: { contactType: elem.type, name: elem.Name, id: elem.Id, ContactId: _contact.Model.id, PresentationId: _contact.Model.PresentationId  },
                        success: function (response) {
                            if (response.result) {
                                elem.newItem = false;
                            }
                        }
                    });

                }
            },
            Template: function (dataItem) {

                var _cls = '';
                var _txt = '';

                if(dataItem.type == 0){
                    _cls = 'warning';
                    _txt = 'İşletmemiz';
                }
                else if(dataItem.type == 1){
                    _cls = 'info';
                    _txt = 'Kanal';
                }else if(dataItem.type == 2){
                    _cls = 'success';
                    _txt = 'Müşteri';
                } else if(dataItem.type == 3){
                    _cls = 'primary';
                    _txt = 'Çözüm Ortağı';
                }

                return '<span class="label label-xs label-' + _cls + '">' + (dataItem.newItem == true ? 'Yeni Ekle ' : '') + '( ' + _txt + ' )</span> ' + dataItem.Name;

            }
        },
    };

    _contact.init(@Html.Raw(Json.Encode(ViewBag.IdUsers)));

</script>
