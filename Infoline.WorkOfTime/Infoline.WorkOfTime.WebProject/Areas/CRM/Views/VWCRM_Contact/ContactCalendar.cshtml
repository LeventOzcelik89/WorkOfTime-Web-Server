@model Infoline.WorkOfTime.BusinessAccess.VM_TaskTemplatePlanList
@{
    ViewBag.Title = "Toplantı Takvimi";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style type="text/css">

    #CalendarContainer .calendar-header {
        display: none;
    }

    .withTabs .customTabs:before {
        content: 'YIL :';
    }

    .legendTable tr td {
        padding: 4px;
    }

    .tab-content {
        border: none !important;
    }

    .withTabs .tab-content .tab-pane {
        padding: 0px;
    }

    .calendar {
        padding: 0px !important;
        margin: 20px 0px;
    }

    .popover {
        max-width: 360px !important;
        z-index: 2001;
    }

    .popover-content {
        width: 320px;
    }

    .capt {
        text-decoration: underline;
        margin-bottom: 10px;
        margin-top: 10px;
    }

    .popover .btn-group {
        width: 100%;
        margin-top: 10px;
        border-top: 1px solid #ccc;
        padding-top: 10px;
        margin-left: -15px;
        width: calc(30px + 100%);
        padding-left: 15px;
        padding-right: 15px;
    }

        .popover .btn-group .btn {
            float: right;
        }

    .popover-content h3 {
        color: #f00;
    }

    [class^="levelLegend"] {
        width: 30px;
        height: 18px;
        display: inline-block;
        float: left;
        margin-right: 6px;
        margin-left: 6px;
    }

    .levelLegend1 {
        background: #bc0101;
        margin-left: 0px !important;
    }

    .levelLegend2 {
        background-color: #ec7c1e;
    }

    .levelLegend3 {
        background-color: #13a261;
    }

    .levelLegend4 {
        background-color: #ffcc16;
    }

    .levelLegend5 {
        background-color: #afafaf;
    }

    .legendTable {
        margin-bottom: 4px;
        clear: none;
        border: 1px solid #EBEBEB;
    }

    .calPopover .close {
        margin-top: -12px;
        margin-right: -8px;
    }

    [data-target="type_Title"] .badge > i {
        margin-right: 4px;
    }

    .detailList li > i, .detailList li > strong {
        float: left;
    }

    .detailList li > i {
        margin-right: 5px;
    }

    .detailList li {
        text-align: right;
    }
</style>

<link href="~/Content/YearCalendar/css/bootstrap-year-calendar.css" rel="stylesheet" />
<link href="~/Content/YearCalendar/css/custom-year-calendar.css" rel="stylesheet" />
<script src="~/Content/YearCalendar/js/custom-year-calendar.js"></script>

<script type="text/javascript">

    var _contactCalendar = {
        Model: @Html.Raw(Infoline.Helper.Json.Serialize(Model)),
        StatusList: [
            { Key: 'Göreve Başlanmadı', Codes: [0, 1, 2, 10, 11, 12], Color: '#bc0101', ColorNextDays: 'rgba(188, 1, 1, 60%)' },
        ],
        GetStatus: function (items) {

            var its = $.Enumerable.From(items)
                .GroupBy(a => { return a.id; })
                .Select(a => {

                    var _val = a.Key();

                    return _contactCalendar.StatusList[0];

                }).ToArray();

            var group = $.Enumerable.From(its).GroupBy(a => { return a.Key; });
            var max = group.OrderByDescending(a => { return a.Count(); }).FirstOrDefault();

            if (group.Count() > 1) {
                return _contactCalendar.StatusList[0];   //  diğer
            } else {
                return max.source[0];
            }
        },
        Calendar: {
            activeYear: null,
            POP: {
                list: [],
                HasValue: function (_date) {
                    return $.Enumerable.From(_contactCalendar.Calendar.POP.list).Any(a => { return a.date == kendo.toString(_date, 'yyyy-MM-dd') });

                },
                Hide: function (_date, _elem) {
                    debugger;
                    var item = { date: _date, elem: _elem };
                    item.date = kendo.toString(item.date, 'yyyy-MM-dd');

                    _contactCalendar.Calendar.POP.list = $.Enumerable.From(_contactCalendar.Calendar.POP.list).Where(a => { return a.date != item.date; }).ToArray();
                    $(item.elem).popover('hide');

                },
                HideAll: function () {

                    $.each(_contactCalendar.Calendar.POP.list, function (i, item) {

                        $(item.elem).popover('hide');

                    });

                    _contactCalendar.Calendar.POP.list = [];

                },
                Toggle: function (_date, _elem) {

                    var item = { date: _date, elem: _elem };
                    item.date = kendo.toString(item.date, 'yyyy-MM-dd');
                    debugger;
                    var _it = $.Enumerable.From(_contactCalendar.Calendar.POP.list).Where(a => { return a.date == item.date }).FirstOrDefault();

                    if (_it == null) {
                        _contactCalendar.Calendar.POP.list.push(item);
                    } else {
                        _contactCalendar.Calendar.POP.list = $.Enumerable.From(_contactCalendar.Calendar.POP.list).Where(a => { return a.date != item.date; }).ToArray();
                    }

                }
            },
            Years: null,
            init: function () {
                ReadData('/CRM/VWCRM_Contact/GetContactCalendarData', null, function (res) {
                    _contactCalendar.Calendar.Years = res;

                    $.Enumerable.From(_contactCalendar.Calendar.Years)
                        .SelectMany(a => { return a.Data; })
                        .GroupBy(a => { return a.id; })
                        .Select(a => {

                            $('.customList [data-plan="' + a.Key() + '"]').find('[data-target="count"]').html(kendo.toString(a.Count(), 'N0'));

                        }).ToArray()

                    $.each(_contactCalendar.Calendar.Years, function (i, item) {
                        $.each(item.Data, function (id, data) {
                            if (data.ContactEndDate == null) { return; }
                            var k = kendo.toString(new Date(data.ContactEndDate), 'yyyy-MM-dd 00:00:00');
                            debugger;
                            data.start = data.ContactEndDate;
                            data.end = data.ContactEndDate;
                            data.startDate = new Date(k);
                            data.endDate = new Date(k);
                            data.status = _contactCalendar.StatusList[0];

                            var rest = $.Enumerable.From(_contactCalendar.Calendar.Years).Where(x => x.Year == new Date(data.ContactEndDate).getFullYear()).Select(x => x.Data).FirstOrDefault();
                            var color = "";
                            var aa = $.Enumerable.From(rest).Where(x => kendo.toString(x.ContactStartDate, 'yyyy-MM-dd') == kendo.toString(data.ContactStartDate, 'yyyy-MM-dd'))
                                .GroupBy(a => { return kendo.toString(a.ContactStartDate, 'yyyy-MM-dd'); })
                                .Select(a => {
                                    if (a.source.length == 0) {
                                        return color = "#afafaf";
                                    }
                                    else if (a.source.length <= 3) {
                                        return color = "#ec7c1e";
                                    }
                                    else {
                                        return color = "#13a261";
                                    }


                                }).FirstOrDefault();
                            data.color = color;
                        });
                    });
                    _contactCalendar.Calendar.renderCalendars();
                });

            },
            renderCalendars: function () {
                $('#CalendarContainer .nav-tabs').html(null);
                $('#CalendarContainer .tab-content').html(null);

                $.each(_contactCalendar.Calendar.Years, function (i, item) {


                    if (_contactCalendar.customerId != null && _contactCalendar.customerId != "") {
                        item.Data = $.Enumerable.From(item.Data).Where(x => x.customerId == _contactCalendar.customerId).ToArray();
                    }

                    $.Enumerable.From(item.Data)
                        .GroupBy(a => { return kendo.toString(a.ContactStartDate, 'yyyy-MM-dd'); })
                        .Select(a => {
                            if (a.source.length == 0)
                            {
                                item.color = "#afafaf";
                            }
                            else if (a.source.length <= 3)
                            {
                                item.color = "#ec7c1e";
                            }
                            else
                            {
                                item.color = "#13a261";
                            }


                        }).ToArray();

                    if (_contactCalendar.Calendar.activeYear == null && item.Year == new Date().getFullYear()) {
                        _contactCalendar.Calendar.activeYear = item.Year;
                    }
                    _contactCalendar.Calendar.initCalendar(
                        item.Year,
                        $.Enumerable.From(item.Data).ToArray()
                    );

                });

                if ($('#CalendarContainer .nav-tabs li.active').length == 0) {
                    $('#CalendarContainer .nav-tabs li:first-child a').trigger('click')
                }

            },
            initCalendar: function (year, data) {

                var _id = 'tab_' + newGuid().substring(0, 8);
                var _idCalendar = 'calendar_' + newGuid().substring(0, 8);
                var cls = (year == _contactCalendar.Calendar.activeYear ? 'active' : '');

                var itemNav = '<li class="' + cls + '"><a data-toggle="tab" href="#' + _id + '" data-year="' + year + '">' + year + '</a></li>';
                var elemNav = $('<div id="' + _id + '" class="tab-pane ' + cls + '"><div id="' + _idCalendar + '"></div></div>')

                $('#CalendarContainer .nav-tabs').append(itemNav);
                $('#CalendarContainer .tab-content').append(elemNav);

                $('#' + _idCalendar).calendar({
                    startYear: year,
                    style: 'background',
                    dataSource: data,
                    language: "tr",
                    minDate: new Date(year, 0, 1),
                    maxDate: new Date(year, 11, 31),
                    toolbar: ["pdf"],
                    renderEnd: function (e) {
                        //Doldurulacak
                    },
                    mouseOnDay: function (e) {
                        if (e.events.length > 0 && !_contactCalendar.Calendar.POP.HasValue(e.date)) {

                            var items = $.Enumerable.From(e.events);

                            var temp = $($('#temp').html());
                            temp.find('[data-target="taskCount"]').html(items.Count());
                            temp.find('[data-target="detail"]').attr('href', temp.find('[data-target="detail"]').attr('href') + items.Select(a => { return a.id; }).ToArray().join(','));

                            if (items.Count(a => { return a.lastOperationStatus == null; }) == items.Count()) {
                                temp.find('[data-target="detail"]').attr('href', '#').attr('disabled', 'disabled').removeAttr('target');
                            }

                            temp.find('.close').on('click', function () {
                                _contactCalendar.Calendar.POP.Hide(e.date, e.element);
                            });

                            items
                                .GroupBy(a => { return a.CustomerCompanyId_Title; })
                                .Select(a => {

                                    var el = $($('#temp_Customer').html());
                                    el.html(a.Key());
                                    el.attr('href', el.attr('href') + a.Max(b => { return b.CustomerCompanyId; }));
                                    el.appendTo(temp.find('[data-target="customers"]'));

                                })
                                .ToArray();

                            items
                                .GroupBy(a => { return a.Presentation_Title; })
                                .Select(a => {

                                    var el = $($('#temp_Presentation').html());
                                    el.html(a.Key());
                                    el.attr('href', el.attr('href') + a.Max(b => { return b.PresentationId; }));
                                    el.appendTo(temp.find('[data-target="presentationTitle"]'));

                                })
                                .ToArray();

                            //items
                            //    .GroupBy(a => { return a.status.Key; })
                            //    .Select(a => {

                            //        var el = $('<div class="block"><span class="badge badge-white" style="color: ' + a.source[0].status.Color + '; border: 1px solid; ">' + a.source.length + ' ' + a.Key() + '</span></div>');
                            //        el.appendTo(temp.find('[data-target="KeyStatus"]'));

                            //    })
                            //    .ToArray();

                            $(e.element).popover({
                                trigger: 'manual',
                                container: 'body',
                                html: true,
                                content: temp,
                                placement: 'top'
                            });

                            $(e.element).popover('show');

                        }
                        else {

                            if (!_contactCalendar.Calendar.POP.HasValue(e.date)) {
                                $(e.element).popover('hide');
                            }

                        }
                    },
                    clickDay: function (e) {

                        _contactCalendar.Calendar.POP.Toggle(e.date, e.element);

                    },
                    mouseOutDay: function (e) {
                        if (e.events.length > 0) {
                            if (!_contactCalendar.Calendar.POP.HasValue(e.date)) {
                                $(e.element).popover('hide');
                            }
                        }
                    },
                });

            }
        }
    };

    $(document)
        .on('ready', function () {

            _contactCalendar.Calendar.init();

        })

        .on('click', '[data-toggle="tab"]', function () {

            _contactCalendar.Calendar.POP.HideAll();

        })

        .on('shown.bs.tab', 'a[href="#GridTasks"]', function (e) {

            $("#VWFTM_Task").data("kendoGrid").refresh();

        })

        .on('shown.bs.tab', '#CalendarContainer .nav li', function () {

            _contactCalendar.Calendar.activeYear = parseInt($(this).find('a').attr('data-year'));

        })

        .on('success', '#MultipleForm', function (e, res) {

            if (res.Result) {

                setTimeout(function () { document.location.reload() }, 4000);

            }

        })

        .on('click', '.customList .showhide', function () {

            $(this).toggleClass('active');

            $(this).parents('[data-plan]').attr('data-show', $(this).hasClass('active'));

            _contactCalendar.Calendar.renderCalendars();

        })
        ;
</script>

<div class="row">
    <div class="col-lg-12">

        <div class="ibox hide">
            <div class="ibox-title">
                <h5> <i class="fa text-success fa-bar-chart-o"></i> ÖZET BİLGİ</h5>
            </div>
            <div class="ibox-content clearfix" style="padding-bottom:10px !important; padding-top:10px !important;">
                <div class="col-md-6">
                    <table class="table m-b-xs">
                        <tbody>
                            <tr>
                                <td style="border-top:none;"> <span class="label label-success pull-right">1</span> <i class="ii-ambarmevcudu"></i> Toplam Oluşturulmuş Görevler </td>
                            </tr>
                            <tr>
                                <td><span class="label label-success pull-right" data-id="VWSH_UserActive">1</span><i class="fa fa-hand-o-right"></i> Toplam Personel Sayısı </td>
                            </tr>
                            <tr>
                                <td><span data-id="VWCMP_Company" class="label label-success pull-right">1</span> <i class="fa fa-calendar"></i> Toplam Şube Sayısı </td>
                            </tr>
                            <tr>
                                <td><span class="label label-success pull-right" data-id="VWCMP_TenderSelling">1</span> <i class="fa fa-hand-o-left"></i> Satış Teklifleri </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="col-md-6">
                    <table class="table m-b-xs">
                        <tbody>
                            <tr>
                                <td style="border-top:none;"><span class="label label-success pull-right" data-id="VWCMP_InvoiceSelling">1</span> <i class="fa fa-mail-reply"></i>  Satış Faturaları </td>
                            </tr>
                            <tr>
                                <td> <span class="label label-success pull-right" data-id="VWCMP_InvoiceBuying">1</span> <i class="fa fa-mail-forward"></i> Alış Faturaları </td>
                            </tr>
                            <tr>
                                <td> <span class="label label-success pull-right" data-total="VWCMP_InvoiceSelling">1</span> <i class="fa fa-money"></i> Satış Faturaları Tutarı </td>
                            </tr>
                            <tr>
                                <td> <span class="label label-success pull-right" data-total="VWCMP_InvoiceBuying">1</span> <i class="fa fa-money"></i> Alış Faturaları Tutarı </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="ibox-content clearfix">
            <fieldset class="withTabs" id="CalendarContainer">
                <legend>TAKVİM GÖRÜNÜMÜ</legend>

                <table class="legendTable">
                    <tbody>
                        <tr>
                            <td>1-3 toplantı <span class="levelLegend2"></span></td>
                            <td>3 üzeri toplantı <span class="levelLegend3"></span></td>
                            <td><b>Boş</b> <span class="levelLegend5"></span></td>
                        </tr>
                    </tbody>
                </table>

                <ul class="nav nav-tabs customTabs usel"></ul>

                <div class="tab-content"></div>
            </fieldset>
        </div>
    </div>
</div>

<script type="text/template" id="rowTemplate">
    <tr>
        <td data-elem="customer_Title"></td>
        <td data-elem="type_Title"></td>
        <td data-elem="lastOperationStatus_Title"></td>
    </tr>
</script>

<script type="text/template" id="temp_Customer">
    <a href="/CMP/VWCMP_Company/Detail?id=" target="_blank" class="block" data-target="customerTitle"></a>
</script>

<script type="text/template" id="temp_Presentation">
    <a href="/CRM/VWCRM_Presentation/Detail?id=" target="_blank" class="block" data-target="presentationTitle"></a>
</script>

<script type="text/template" id="temp">
    <div class="calPopover">

        <button class="close">×</button>

        <h3 class="text-center">Toplam <span data-target="taskCount"></span> Toplantı</h3>

        <div class="capt">Müşteri/Potansiyel</div>
        <div data-target="customers"></div>

        <div class="btn-group">
            <a class="btn btn-xs btn-default" target="_blank" href="/CRM/VWCRM_Contact/Index?ids=" data-target="detail">Detay</a>
        </div>
    </div>
</script>
