@model Infoline.WorkOfTime.BusinessAccess.VWAgileBoardDashboardModel
@{
    ViewBag.Title = "Agile Board";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var userStatus = (PageSecurity)Session["userStatus"];
    var db = new WorkOfTimeDatabase();
    var SalesPersons = db.GetUserByRoleId(SHRoles.SatisPersoneli).ToList();
}

<link href="~/Content/AgileBoard/css/default.css" rel="stylesheet" />
<link href="~/Content/AgileBoard/css/togglebuttons.css" rel="stylesheet" />

<div class="row kanbanContainer" data-target="kanban">

    <div class="row kanbanHeader">
        <div class="col-md-6">
            <span data-target="kanban.name">@(Model.AgileBoard != null ? Model.AgileBoard.name : "Kanban")</span>
            <small data-target="kanban.description" class="text-muted">@(Model.AgileBoard != null && Model.AgileBoard.description != null ? Model.AgileBoard.description : "")</small>
        </div>
        <div class="col-md-6">
            <div class="text-right">

                <div class="btn-group" data-render="KanbanRender"></div>

                <div class="btn-group" data-render="StageRender"></div>

                <div class="btn-group" data-render="CartItemFilter"></div>

                <div class="btn-group" data-render="FilterRender"></div>

                <div class="btn-group" data-render="SortRender"></div>

                <button class="btn btn-primary btn-xs" data-task="Insert" data-show="single" data-id="@(Model.AgileBoard != null ? Model.AgileBoard.id.ToString() : "")" data-method="GET" data-href="/SH/VWSH_AgileBoards/Insert">
                    <i class="icon-floppy-1"></i> Kaydet
                </button>

            </div>
        </div>
    </div>

    <ul class="agileColumns" data-render="AgileStageColumns"></ul>

    <div class="noitem" style="display: none;">
        <h1 class="text-center">
            Tanımlı hiç bir CRM Aşaması bulunamadı. <br><br>
            <a target="_blank" href="/CRM/VWCRM_ManagerStage/Index">Buradan aşama tanımlayabilirsiniz.</a>
        </h1>
    </div>

</div>



























<script id="AgileStageColumnTemplate" type="text/template">
    <li class="agileColumn" data-target="AgileColumn" data-id="{{id}}">
        <div class="agileHeader">
            <div class="row">
                <div class="col-md-10">
                    <h4>{{title}}</h4>
                </div>
                <div class="col-md-2">
                    <div class="agileHeaderButtons text-right">
                        <a class="btn btn-xs btn-default text-primary" data-modal="true" data-task="Insert" data-href="/CRM/VWCRM_Presentation/Insert?PresentationStageId={{id}}"><i class="icon-plus" data-toggle="tooltip" data-placement="bottom" title="Yeni Potansiyel"></i></a>
                    </div>
                </div>
            </div>

            <div>Toplam: <span class="pull-right" data-target="Count"></span></div>

        </div>
        <div data-target="AgileGrid"></div>
    </li>
</script>

<script id="AgileStageItemTemplate" type="text/template">
    <div class="agileItem" data-id="#:id#" data-presentationstageid=#:PresentationStageId#>

        <div class="stageColor" data-field="StageColor" style="background-color: #:Stage_Color#" data-toggle="tooltip" data-placement="right" title="#:Stage_Title#"></div>
        <div class="stageBody">

            <h4>
                <a href="/CRM/VWCRM_Presentation/Detail?id=#:id#" target="_blank">#:Name#</a>
                <img data-field="SalesPerson_Title" class="spimg" src="#: salesPersonPhoto #" data-toggle="tooltip" data-placement="bottom" title="#:SalesPerson_Title#" onerror="ImageError(this, '/Content/Custom/img/na.png')" />
            </h4>

            <div class="stageLine">
                <span data-field="LastActivityDate" class="dt" data-toggle="tooltip" data-placement="bottom" title="Son İşlem Tarihi">#: kendo.toString(new Date(LastActivityDate), 'dd.MM.yyyy HH:mm')#</span>
                <span data-field="PriorityLevel" class="stars" data-toggle="tooltip" data-placement="bottom" title="Önem Derecesi"># for (var i = 1; i <= (PriorityLevel ?? 0); i++) { # <i class="fa fa-star"></i> # } #</span>
            </div>

            <div class="stageLine">

                #if(CustomerCompany_Title != null) { #
                @*<div class="stageLine">*@
                <span data-field="CustomerCompany_Title" class="badge badge-warning" data-toggle="tooltip" data-placement="bottom" title="Müşteri">#: CustomerCompany_Title #</span>
                @*</div>*@
                # } #

                #if(VodafoneOffer != null || lastTenderTotalAmount != null) { #
                @*<div class="stageLine">*@

                #if(VodafoneOffer != null) { #
                <span data-field="VodafoneOffer" class="badge badge-success" data-toggle="tooltip" data-placement="bottom" title="Tahmini Beklenen Ciro">#: kendo.toString(VodafoneOffer, 'N0') # ₺</span>
                # } #

                #if(lastTenderTotalAmount != null) { #
                <span data-field="lastTenderTotalAmount" class="badge badge-primary" data-toggle="tooltip" data-placement="bottom" title="Son Teklif">#: kendo.toString(lastTenderTotalAmount, 'N0') # ₺</span>
                # } #

                @*</div>*@
                # } #

                #if(Last_ContactDate != null || TotalContact != null) { #
                @*<div class="stageLine">*@

                #if(Last_ContactDate != null) { #
                <span data-field="Last_ContactDate" class="badge badge-info" data-toggle="tooltip" data-placement="bottom" title="Son Toplantı Tarihi"><span class="icon-users-1"></span>#: kendo.toString(new Date(Last_ContactDate), 'dd.MM.yyyy HH:mm') #</span>
                # } #

                #if(TotalContact != null) { #
                <span data-field="TotalContact" class="badge badge-info" data-toggle="tooltip" data-placement="bottom" title="Toplam Aktivite/Randevu">#: kendo.toString(TotalContact, 'N0') #</span>
                # } #

                @*</div>*@
                # } #

            </div>

            #if(DaysSinceVisit != null) { #
            <div class="stageLine">
                <small data-field="DaysSinceVisit">Son aktiviteden bugüne geçen <b>#: kendo.toString(DaysSinceVisit, 'N0') #</b> gün</small>
            </div>
            # } #

            <div class="stageLine">
                <span data-field="CompletionRate" class="prg" data-toggle="tooltip" data-placement="bottom" title="Tamamlanma Oranı: #:CompletionRate ?? 0# %">
                    <span style="width: #:CompletionRate ?? 0#%" class="pb">
                        <span class="sr-only">#:CompletionRate ?? 0# % Tamamlandı</span>
                    </span>
                </span>
            </div>

        </div>

    </div>
</script>

<div class="modal inmodal fade" id="ModalFilter" tabindex="-1" role="dialog" aria-hidden="true" data-render="CustomFilterForm">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Kapat</span></button>
                <h4 class="modal-title">Filtre</h4>
                <small class="font-bold">Sütun içerisinde görünecek ögeler için buradan filtreleme yapabilirsiniz.</small>
            </div>
            <div class="modal-body">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-white pull-left" data-event="CancelFilter" data-dismiss="modal">Kapat</button>
                <button type="button" class="btn btn-primary" data-event="SaveFilter">Uygula</button>
            </div>
        </div>
    </div>
</div>

<script type="text/template" id="Template_CustomFilter">

    <div class="form-horizontal">
        <div class="form-group">
            <div class="col-md-4">
                <label class="control-label label-md">Başlangıç Tarihi</label>
            </div>
            <div class="col-md-8">

                <input data-filterelement="created_Min"
                       data-format="dd/MM/yyyy HH:mm"
                       data-parseFormats="['dd.MM.yyyy HH:mm', 'dd/MM/yyyy HH:mm', 'yyyy-MM-dd HH:mm']"
                       min="01.01.1900"
                       max="31.12.2099"
                       interval="15"
                       class="form-control"
                       style="width: 100%;"
                       data-cascadefrom="created_Max"
                       data-cascadetype="max"
                       type="text">

            </div>
        </div>

        <div class="form-group">
            <div class="col-md-4">
                <label class="control-label label-md">Bitiş Tarihi</label>
            </div>
            <div class="col-md-8">

                <input data-filterelement="created_Max"
                       data-format="dd/MM/yyyy HH:mm"
                       data-parseFormats="['dd.MM.yyyy HH:mm', 'dd/MM/yyyy HH:mm', 'yyyy-MM-dd HH:mm']"
                       min="01.01.1900"
                       max="31.12.2099"
                       interval="15"
                       class="form-control"
                       style="width: 100%;"
                       data-cascadefrom="created_Max"
                       data-cascadetype="max"
                       type="text">

            </div>
        </div>

        <div class="form-group">
            <div class="col-md-4">
                <label class="control-label label-md">Müşteri</label>
            </div>
            <div class="col-md-8" data-container>

                <select data-filterelement="CustomerCompanyId"
                        class="form-control" style="width: 100%;"
                        data-dataidfield="id"
                        data-datatextfield="name"
                        data-href="/CMP/VWCMP_Company/DataSourceDropDown"
                        data-placeholder="Lütfen Müşteri seçiniz..."
                        data-tagtemplate="#= TagTemplate(data, 'fullName') #"
                        data-itemtemplate="#= TemplateEngine('companyTemplate', data) #"
                        multiple="multiple"></select>

            </div>
        </div>

        <div class="form-group">
            <div class="col-md-4">
                <label class="control-label label-md">Satış Personeli</label>
            </div>
            <div class="col-md-8" data-container>
                <select data-filterelement="SalesPersonId"
                        class="form-control" style="width: 100%;"
                        data-dataidfield="id"
                        data-datatextfield="FullName"
                        data-href="/SH/VWSH_User/DataSourceDropDown"
                        data-placeholder="Lütfen Satış Personeli seçiniz..."
                        data-tagtemplate="#= TagTemplate(data, 'FullName') #"
                        data-itemtemplate="#= TemplateEngine('userTemplate', data) #"
                        data-filter="@Html.Raw(String.Join("~or~", Model.SalesPersons.Select(a => "id~eq~'" + a + "'")))"
                        multiple="multiple"></select>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-4">
                <label class="control-label label-md " for="ChannelCompanyId">Kanal</label>
            </div>
            <div class="col-md-8" data-container>
                <select data-filterelement="ChannelCompanyId"
                        class="form-control" style="width: 100%;"
                        data-dataidfield="id"
                        data-datatextfield="name"
                        data-href="/CMP/VWCMP_Company/DataSourceDropDown"
                        data-placeholder="Lütfen Kanal seçiniz..."
                        data-tagtemplate="#= TagTemplate(data, 'fullName') #"
                        data-itemtemplate="#= TemplateEngine('companyTemplate', data) #"
                        multiple="multiple"></select>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-4">
                <label class="control-label label-md">Tamamlanma Oranı</label>
            </div>
            <div class="col-md-4">

                <input data-filterelement="CompletionRate_Min"
                       style="width: 100%;"
                       placeholder="Min. Tamamlanma Oranı"
                       max="100"
                       min="0"
                       step="1"
                       data-cascadefrom="CompletionRate_Max"
                       data-cascadetype="max"
                       type="text">

            </div>
            <div class="col-md-4">

                <input data-filterelement="CompletionRate_Max"
                       style="width: 100%;"
                       placeholder="Max. Tamamlanma Oranı"
                       max="100"
                       min="0"
                       step="1"
                       type="text">

            </div>
        </div>

        <div class="form-group">
            <div class="col-md-4">
                <label class="control-label label-md">Tahmini Beklenen Ciro</label>
            </div>
            <div class="col-md-4">

                <input data-filterelement="VodafoneOffer_Min"
                       placeholder="Min. Tahmini Ciro"
                       style="width: 100%;"
                       step="1"
                       data-cascadefrom="VodafoneOffer_Max"
                       data-cascadetype="max"
                       type="text">

            </div>
            <div class="col-md-4">

                <input data-filterelement="VodafoneOffer_Max"
                       placeholder="Max. Tahmini Ciro"
                       style="width: 100%;"
                       step="1"
                       type="text">

            </div>
        </div>

        <div class="form-group">
            <div class="col-md-4">
                <label class="control-label label-md ">Son Teklif</label>
            </div>
            <div class="col-md-4">

                <input data-filterelement="lastTenderTotalAmount_Min"
                       placeholder="Min. Son Teklif"
                       style="width: 100%;"
                       step="1"
                       data-cascadefrom="lastTenderTotalAmount_Max"
                       data-cascadetype="max"
                       type="text">

            </div>
            <div class="col-md-4">

                <input data-filterelement="lastTenderTotalAmount_Max"
                       placeholder="Max. Son Teklif"
                       style="width: 100%;"
                       step="1"
                       type="text">

            </div>
        </div>

    </div>

</script>

<script type="text/template" id="Header_StageArea">

    <button data-toggle="dropdown" class="btn btn-default btn-xs dropdown-toggle">

        <i class="icon-tags"></i>
        <span data-target="stage.Name" data-text="Aşamalar">Aşamalar</span>
        <span class="caret"></span>

    </button>
    <ul class="dropdown-menu dropdown-menu-right cmenu" data-foreach>

        <li class="h24" data-id="{{id}}" data-target="foreach">
            <label>
                <span class="color" style="background-color:{{color}}"></span>
                <input type="checkbox" autocomplete="off"> {{Name}} <small class="text-info {{IsSalesCompleted}}">Satış Tamamlandı</small>
            </label>
        </li>

    </ul>

</script>

<script type="text/template" id="Header_SortArea">

    <button data-toggle="dropdown" class="btn btn-default btn-xs dropdown-toggle">

        <i data-target="sort.dir" class="icon-sort-alt-up"></i>

        <i data-target="sort.dir.asc" style="display: none;" class="icon-sort-name-up"></i>
        <i data-target="sort.dir.desc" style="display: none;" class="icon-sort-name-down"></i>

        <span data-target="sort.field" data-text="Sıralama">Sıralama</span>

        <span class="caret"></span>

    </button>
    <ul class="dropdown-menu dropdown-menu-right cmenu" data-foreach>

        <li data-target="foreach">
            <label class="form-check-label" for="sortField_{{field}}">{{title}}</label>
            <input class="form-check-input" type="radio" name="sortField" id="sortField_{{field}}" value="{{field}}" autocomplete="off">
        </li>

        <li class="seperator"></li>

        <li>
            <div class="tglCont">
                <div class="tglLabel">
                    Sıralama Yönü
                </div>
                <div class="tglButton">
                    
                    <input class="tgl tgl-ios" id="sortDir" type="checkbox" autocomplete="off">
                    <label class="sortToggle tgl-btn" for="sortDir"></label>
                    
                    <i data-target="sort.dir.asc" style="display: none;" class="icon-sort-name-up"></i>
                    <i data-target="sort.dir.desc" style="display: none;" class="icon-sort-name-down"></i>

                </div>
            </div>
        </li>

    </ul>

</script>

<script type="text/template" id="Header_KanbanArea">

    <button data-toggle="dropdown" class="btn btn-default btn-xs dropdown-toggle">

        <i class="icon-flash"></i>
        <span data-target="kanban.name" data-text="Kanban">@(Model.AgileBoard != null ? Model.AgileBoard.name : "Kanban")</span>
        <span class="caret"></span>

    </button>
    <ul class="dropdown-menu dropdown-menu-right cmenu" data-foreach>

        <li class="h24" data-target="foreach" data-id={{id}}>
            {{name}}
        </li>

    </ul>

</script>

<script type="text/template" id="Header_FilterArea">

    <button data-toggle="dropdown" class="btn btn-default btn-xs dropdown-toggle">
        <i data-target="icon" data-icon="icon-filter-1" class="icon-filter-1"></i>
        <span data-target="name" data-text="Filtre">Filtre</span>
        <span class="caret"></span>
    </button>
    <ul class="dropdown-menu dropdown-menu-right cmenu" data-foreach>
        <li data-filter="{{filter}}" data-target="foreach">
            <i class="{{icon}}"></i>
            {{title}}
        </li>

        <li class="seperator"></li>

        <li data-filter="Clear" style="color: #ed5565;">
            <i class="icon-cancel-5"></i>
            Filtreleri Temizle
        </li>

    </ul>

</script>

<script type="text/template" id="Header_CartItemFilterArea">

    <button data-toggle="dropdown" class="btn btn-default btn-xs dropdown-toggle">
        <i class="icon-pin-1"></i>
        <span data-target="dropdownText">Kart İçeriği</span>
        <span class="caret"></span>
    </button>
    <ul class="dropdown-menu dropdown-menu-right cmenu" data-foreach>
        <li data-target="foreach">
            <div class="tglCont">
                <div class="tglLabel">
                    {{title}}
                </div>
                <div class="tglButton">
                    <input data-field="{{field}}" class="tgl tgl-ios" id="agileItem_{{field}}" type="checkbox" autocomplete="off" {{checked}}>
                    <label class="tgl-btn" for="agileItem_{{field}}"></label>
                </div>
            </div>
        </li>
    </ul>

</script>

<script type="text/javascript">

    var agile = {

        GetData: function () {

            return {
                Sort: agile.Sort.Data,
                Filter: agile.Filter.Data,
                AgileCart: $.Enumerable.From(agile.AgileCart.CartList).Select(a => { return { field: a.Value.field, checked: a.Value.checked } }).ToArray(),
                StageList: $.Enumerable.From(agile.Agile.StageList).OrderBy(a => { return a.Value.index; }).Select(a => { return { id: a.Value.id, index: a.Value.index } }).ToArray(),
            };

        },

        States: {},

        Model: @Html.Raw(Infoline.Helper.Json.Serialize(Model)),

        init: function () {

            if (agile.Model.Stages == undefined || agile.Model.Stages.length == 0) {
                $('.noitem').show();
                return;
            }

            var saved;
            var $this = this;

            if ($this.Model.AgileBoard != null && $this.Model.AgileBoard.json != null) {
                saved = JSON.parse($this.Model.AgileBoard.json);
            }

            if (saved != undefined && saved.Filter != undefined && saved.Filter.items != undefined) {
                $.each(saved.Filter.items, function (i, item) {
                    if (item.field == 'created') {
                        item.value = new Date(item.value);
                    }
                });
            }

            $this.Sort.init(saved == undefined ? null : saved.Sort);
            $this.Filter.init(saved == undefined ? null : saved.Filter);
            $this.AgileCart.init(saved == undefined ? null : saved.AgileCart);
            $this.Agile.init(saved == undefined ? null : saved.StageList);
            $this.Kanban.init();

        },

        Kanban: {

            Template: $('#Header_KanbanArea'),
            RenderTarget: $('[data-render="KanbanRender"]'),

            //  Data: null,

            init: function (value) {

                var $this = this;
                if (value != null) {
                    $this.SetData(value);
                }

                $this.Render();

            },
            Render: function () {

                var $this = this;

                var temp = $($this.Template.html());
                var itemTemp = temp.find('[data-target="foreach"]')[0].outerHTML;

                temp.find('[data-target="foreach"]').remove();

                $this.RenderTarget.html(null).append(temp);

                $.each(agile.Model.MyAgileBoards, function (ik, kanban) {

                    var _itemTemp = $(itemTemp
                        .replace(/{{name}}/g, kanban.name)
                        .replace(/{{id}}/g, kanban.id)
                    );

                    $this.RenderTarget.find('[data-foreach]').prepend(_itemTemp);

                    if (agile.Model.AgileBoard.id == kanban.id) {
                        _itemTemp.addClass('active');
                    }

                });

                $this.RenderTarget.find('li').on('click', function () {

                    var val = $(this).attr('data-id');

                    agile.Model.AgileBoard = $.Enumerable.From(agile.Model.MyAgileBoards).Where(a => { return a.id == val }).FirstOrDefault();
                    $('.kanbanHeader [data-task="Insert"]').attr('data-id', agile.Model.AgileBoard.id);

                    //  $this.RenderTarget.find('[data-target="kanban.name"]').text($(this).text());
                    $('[data-target="kanban.name"]').text(agile.Model.AgileBoard.name);
                    $('[data-target="kanban.description"]').text(agile.Model.AgileBoard.description ?? '');
                    //  $this.RenderTarget.removeClass('open');

                    var saved;
                    if (agile.Model.AgileBoard != null && agile.Model.AgileBoard.json != null) {
                        saved = JSON.parse(agile.Model.AgileBoard.json);
                    }

                    agile.Sort.init(saved == undefined ? null : saved.Sort);
                    agile.Filter.init(saved == undefined ? null : saved.Filter);
                    agile.AgileCart.init(saved == undefined ? null : saved.AgileCart);
                    agile.Agile.init(saved == undefined ? null : saved.StageList);

                });

            },
            SetData: function (val) {
                agile.Model.AgileBoard = val;
            }
        },

        Sort: {

            Template: $('#Header_SortArea'),
            RenderTarget: $('[data-render="SortRender"]'),      //  btn-group

            Data: null,
            DefaultField: null,

            SortableFields: {
                LastActivityDate: { field: 'LastActivityDate', title: 'Son İşlem Tarihi', default: true, dir: 'desc' },
                CompletionRate: { field: 'CompletionRate', title: 'Tamamlanma Oranı' },
                PriorityLevel: { field: 'PriorityLevel', title: 'Önem Derecesi' },
                SalesPerson_Title: { field: 'SalesPerson_Title', title: 'Satış Personeli' },
                CustomerCompany_Title: { field: 'CustomerCompany_Title', title: 'Müşteri' },
                VodafoneOffer: { field: 'VodafoneOffer', title: 'Tahmini Beklenen Ciro' },
                lastTenderTotalAmount: { field: 'lastTenderTotalAmount', title: 'Son Teklif' },
                Last_ContactDate: { field: 'Last_ContactDate', title: 'Son Toplantı Tarihi' },
                TotalContact: { field: 'TotalContact', title: 'Toplam Aktivite/Randevu' },
                DaysSinceVisit: { field: 'DaysSinceVisit', title: 'Son aktiviteden bugüne geçen' },
            },
            init: function (value) {

                var $this = this;

                if (value != undefined) {

                    $this.SetData(value);

                } else {

                    var defaultSort = $.Enumerable.From($this.SortableFields).Where(a => { return a.Value.default == true; }).Select(a => { return a.Value; }).FirstOrDefault();
                    $this.SetData(defaultSort);

                }

                $this.Render();

            },
            Render: function () {

                var $this = this;

                var temp = $($this.Template.html());
                var itemTemp = temp.find('[data-target="foreach"]')[0].outerHTML;

                temp.find('[data-target="foreach"]').remove();

                $this.RenderTarget.html(null).append(temp);

                //  prepend edildiği için reverse edildi.
                $.each($.Enumerable.From($this.SortableFields).Reverse().ToArray(), function (is, sort) {

                    var _itemTemp = $(itemTemp
                        .replace(/{{field}}/g, sort.Value.field)
                        .replace(/{{title}}/g, sort.Value.title)
                    );

                    $this.RenderTarget.find('[data-foreach]').prepend(_itemTemp);

                });

                $this.RenderTarget.find('[name="sortField"], #sortDir').on('change', function () {

                    var _field = $('[name="sortField"]:checked').val();
                    var _dir = $('#sortDir').prop('checked') ? 'asc' : 'desc';

                    if (_field == undefined) {
                        $('[name="sortField"][value="' + $this.DefaultField.field + '"]').prop('checked', true);
                        _field = $this.DefaultField.field;
                    }

                    $this.RenderTarget.addClass('active');
                    $this.RenderTarget.find('[data-target="sort.field"]').text($this.SortableFields[_field].title);

                    $('[data-target^="sort.dir"]').hide();
                    $('[data-target="sort.dir.' + _dir + '"]').show();

                    $this.Data = { field: _field, dir: _dir };

                    agile.Agile.UpdateFilters();

                });

                $this.RenderTarget.find('#sortDir').prop('checked', $this.Data.dir == 'asc');
                $this.RenderTarget.find('[value="' + $this.Data.field + '"]').prop('checked', true)
                    .trigger('change');

            },

            SetData: function (data) {

                var $this = this;

                $this.Data = data;

                //  $this.RenderTarget.find('#sortDir').prop('checked', data.dir == 'asc');
                //  $this.RenderTarget.find('[value="' + data.field + '"]').prop('checked', true)
                //      .trigger('change');

            }

        },

        Filter: {

            Modal: {
                Element: $('#ModalFilter'),
                Show: function () {

                    var $this = this;

                    $this.Element.modal('show');

                }
            },
            BtnTemplate: $('#Header_FilterArea'),
            BtnRenderTarget: $('[data-render="FilterRender"]'),
            FormTemplate: $('#Template_CustomFilter'),
            FormRenderTarget: $('[data-render="CustomFilterForm"]'),

            Data: null,
            UpdateCustomFilterElement: function (field, val) {

                var $this = this;
                $this.FilterElements[field].value = val;

                $this.Filters.Custom.items = $.Enumerable.From($this.FilterElements)
                    .Where(a => { return a.Value.value != null && a.Value.value != undefined; })
                    .Select(a => { return { id: a.Value.id, field: a.Value.field, value: a.Value.value } })
                    .ToArray();

            },

            FilterElements: {
                created_Min: {
                    id: 'created_Min',
                    type: '~gte~datetime',
                    field: 'created',

                    render: function (target, _value) {

                        var $this = this;
                        $this.value = _value;

                        target.kendoDateTimePicker({
                            //format: 'dd/MM/yyyy HH:mm',
                            //parseFormats: ["dd.MM.yyyy HH:mm", "dd/MM/yyyy HH:mm", "yyyy-MM-dd HH:mm"],
                            //min: new Date(1900, 0, 1, 0, 0, 0, 0),
                            //max: new Date(2099, 11, 31, 0, 0, 0, 0),
                            //interval: 15,

                            value: $this.value,
                            change: function (evnt) {

                                var val = evnt.sender.value();
                                agile.Filter.UpdateCustomFilterElement($this.id, val);

                            }
                        });

                    }
                },
                created_Max: {
                    id: 'created_Max',
                    type: '~lte~datetime',
                    field: 'created',

                    render: function (target, _value) {

                        var $this = this;
                        $this.value = _value;

                        target.kendoDateTimePicker({
                            //format: 'dd/MM/yyyy HH:mm',
                            //parseFormats: ["dd.MM.yyyy HH:mm", "dd/MM/yyyy HH:mm", "yyyy-MM-dd HH:mm"],
                            //min: new Date(1900, 0, 1, 0, 0, 0, 0),
                            //max: new Date(2099, 11, 31, 0, 0, 0, 0),
                            //interval: 15,

                            value: $this.value,
                            change: function (evnt) {

                                var val = evnt.sender.value();
                                agile.Filter.UpdateCustomFilterElement($this.id, val);

                            }
                        });

                    }
                },
                ChannelCompanyId: {
                    id: 'ChannelCompanyId',
                    type: '~eq~',
                    field: 'ChannelCompanyId',
                    value: null,

                    render: function (target, _value) {

                        var $this = this;
                        $this.value = _value;

                        var _textField = target.attr('data-datatextfield') != undefined ? target.attr('data-datatextfield') : 'Name';
                        var _valueField = target.attr('data-dataidfield') != undefined ? target.attr('data-dataidfield') : 'id';

                        var _filter = target.attr('data-filter') != undefined ? kendo.filterParser(target.attr('data-filter')) : [];
                        var _sort = [{ field: _textField, dir: 'asc' }];

                        if ($this.value != null) {
                            _sort.unshift({ field: 'id:' + $.Enumerable.From($this.value).Select(a => { return a.replace(/-/g, '_') }).ToArray().join("','"), dir: 'asc' });
                        }

                        target
                            .kendoMultiSelect({
                                delay: 500,
                                filter: 'contains',
                                tagMode: 'single',
                                tagTemplate: target.attr('data-tagtemplate'),
                                itemTemplate: target.attr('data-itemtemplate'),
                                value: $this.value,
                                autoClose: false,
                                dataValueField: _valueField,
                                dataTextField: _textField,
                                placeholder: target.attr('data-placeholder'),
                                dataSource: {
                                    type: 'aspnetmvc-ajax',
                                    transport: {
                                        read: {
                                            url: target.attr('data-href')
                                        }
                                    },
                                    pageSize: 100,
                                    page: 1,
                                    total: 0,
                                    serverPaging: true,
                                    serverSorting: true,
                                    serverFiltering: true,
                                    sort: _sort,
                                    filter: _filter
                                },
                                change: function (evnt) {

                                    var val = evnt.sender.value();
                                    agile.Filter.UpdateCustomFilterElement($this.id, val);

                                }
                            });

                    }
                },
                SalesPersonId: {
                    id: 'SalesPersonId',
                    type: '~eq~',
                    field: 'SalesPersonId',
                    value: null,

                    render: function (target, _value) {

                        var $this = this;
                        $this.value = _value;

                        var _textField = target.attr('data-datatextfield') != undefined ? target.attr('data-datatextfield') : 'Name';
                        var _valueField = target.attr('data-dataidfield') != undefined ? target.attr('data-dataidfield') : 'id';

                        var _filter = target.attr('data-filter') != undefined ? kendo.filterParser(target.attr('data-filter')) : [];
                        var _sort = [{ field: _textField, dir: 'asc' }];

                        if ($this.value != null) {
                            _sort.unshift({ field: 'id:' + $.Enumerable.From($this.value).Select(a => { return a.replace(/-/g, '_') }).ToArray().join("','"), dir: 'asc' });
                        }

                        target
                            .kendoMultiSelect({
                                delay: 500,
                                filter: 'contains',
                                tagMode: 'single',
                                tagTemplate: target.attr('data-tagtemplate'),
                                itemTemplate: target.attr('data-itemtemplate'),
                                value: $this.value,
                                autoClose: false,
                                dataValueField: _valueField,
                                dataTextField: _textField,
                                placeholder: target.attr('data-placeholder'),
                                dataSource: {
                                    type: 'aspnetmvc-ajax',
                                    transport: {
                                        read: {
                                            url: target.attr('data-href')
                                        }
                                    },
                                    pageSize: 100,
                                    page: 1,
                                    total: 0,
                                    serverPaging: true,
                                    serverSorting: true,
                                    serverFiltering: true,
                                    sort: _sort,
                                    filter: _filter
                                },
                                change: function (evnt) {

                                    var val = evnt.sender.value();
                                    agile.Filter.UpdateCustomFilterElement($this.id, val);

                                }
                            });

                    }
                },
                CustomerCompanyId: {
                    id: 'CustomerCompanyId',
                    type: '~eq~',
                    field: 'CustomerCompanyId',
                    value: null,

                    render: function (target, _value) {

                        var $this = this;
                        $this.value = _value;

                        var _textField = target.attr('data-datatextfield') != undefined ? target.attr('data-datatextfield') : 'Name';
                        var _valueField = target.attr('data-dataidfield') != undefined ? target.attr('data-dataidfield') : 'id';

                        var _filter = target.attr('data-filter') != undefined ? kendo.filterParser(target.attr('data-filter')) : [];
                        var _sort = [{ field: _textField, dir: 'asc' }];

                        if ($this.value != null) {
                            _sort.unshift({ field: 'id:' + $.Enumerable.From($this.value).Select(a => { return a.replace(/-/g, '_') }).ToArray().join("','"), dir: 'asc' });
                        }

                        target
                            .kendoMultiSelect({
                                delay: 500,
                                filter: 'contains',
                                tagMode: 'single',
                                tagTemplate: target.attr('data-tagtemplate'),
                                itemTemplate: target.attr('data-itemtemplate'),
                                value: $this.value,
                                autoClose: false,
                                dataValueField: _valueField,
                                dataTextField: _textField,
                                placeholder: target.attr('data-placeholder'),
                                dataSource: {
                                    type: 'aspnetmvc-ajax',
                                    transport: {
                                        read: {
                                            url: target.attr('data-href')
                                        }
                                    },
                                    pageSize: 100,
                                    page: 1,
                                    total: 0,
                                    serverPaging: true,
                                    serverSorting: true,
                                    serverFiltering: true,
                                    sort: _sort,
                                    filter: _filter
                                },
                                change: function (evnt) {

                                    var val = evnt.sender.value();
                                    agile.Filter.UpdateCustomFilterElement($this.id, val);

                                }
                            });

                    }
                },

                CompletionRate_Min: {
                    id: 'CompletionRate_Min',
                    type: '~gte~',
                    field: 'CompletionRate',
                    value: null,

                    render: function (target, _value) {

                        var $this = this;
                        $this.value = _value;

                        target.kendoNumericTextBox({
                            //format: 'n3',
                            //culture: 'tr-TR',

                            spinners: false,
                            value: $this.value,
                            
                            change: function (evnt) {

                                var val = evnt.sender.value();
                                agile.Filter.UpdateCustomFilterElement($this.id, val);

                            }
                        });

                    }
                },
                CompletionRate_Max: {
                    id: 'CompletionRate_Max',
                    type: '~lte~',
                    field: 'CompletionRate',
                    value: null,

                    render: function (target, _value) {

                        var $this = this;
                        $this.value = _value;

                        target.kendoNumericTextBox({
                            //format: 'n3',
                            //culture: 'tr-TR',

                            spinners: false,
                            value: $this.value,

                            change: function (evnt) {

                                var val = evnt.sender.value();
                                agile.Filter.UpdateCustomFilterElement($this.id, val);

                            }
                        });

                    }
                },
                VodafoneOffer_Min: {
                    id: 'VodafoneOffer_Min',
                    type: '~gte~',
                    field: 'VodafoneOffer',
                    value: null,

                    render: function (target, _value) {

                        var $this = this;
                        $this.value = _value;

                        target.kendoNumericTextBox({

                            spinners: false,
                            value: $this.value,

                            change: function (evnt) {

                                var val = evnt.sender.value();
                                agile.Filter.UpdateCustomFilterElement($this.id, val);

                            }
                        });

                    }
                },
                VodafoneOffer_Max: {
                    id: 'VodafoneOffer_Max',
                    type: '~lte~',
                    field: 'VodafoneOffer',
                    value: null,

                    render: function (target, _value) {

                        var $this = this;
                        $this.value = _value;

                        target.kendoNumericTextBox({

                            spinners: false,
                            value: $this.value,

                            change: function (evnt) {

                                var val = evnt.sender.value();
                                agile.Filter.UpdateCustomFilterElement($this.id, val);

                            }
                        });

                    }
                },
                lastTenderTotalAmount_Min: {
                    id: 'lastTenderTotalAmount_Min',
                    type: '~gte~',
                    field: 'lastTenderTotalAmount',
                    value: null,

                    render: function (target, _value) {

                        var $this = this;
                        $this.value = _value;

                        target.kendoNumericTextBox({

                            spinners: false,
                            value: $this.value,

                            change: function (evnt) {

                                var val = evnt.sender.value();
                                agile.Filter.UpdateCustomFilterElement($this.id, val);

                            }
                        });

                    }
                },
                lastTenderTotalAmount_Max: {
                    id: 'lastTenderTotalAmount_Max',
                    type: '~lte~',
                    field: 'lastTenderTotalAmount',
                    value: null,

                    render: function (target, _value) {

                        var $this = this;
                        $this.value = _value;

                        target.kendoNumericTextBox({

                            spinners: false,
                            value: $this.value,

                            change: function (evnt) {

                                var val = evnt.sender.value();
                                agile.Filter.UpdateCustomFilterElement($this.id, val);

                            }
                        });

                    }
                },
            },

            Filters: {
                OpenedToday: {
                    id: 'OpenedToday',
                    title: 'Bu gün Açılanlar',
                    icon: 'icon-stopwatch',
                    items: [
                        { id: 'created_Min', field: 'created', value: new Date(kendo.toString(new Date(), 'yyyy-MM-dd') + 'T00:00:00') },
                        //  { field: 'created_Max', value: new Date(kendo.toString(new Date(), 'yyyy-MM-dd') + 'T23:59:59') },
                    ]
                },
                OpenedThisWeek: {
                    id: 'OpenedThisWeek',
                    title: 'Bu Hafta Açılanlar',
                    icon: 'icon-calendar-empty',
                    items: [
                        { id: 'created_Min', field: 'created', value: new Date().GetMonday() },
                        //  { field: 'created_Max', value: agile.fn.getMonday(new Date()).addDays(7).addSeconds(-1) },
                    ]
                },
                OpenedThisMonth: {
                    id: 'OpenedThisMonth',
                    title: 'Bu Ay Açılanlar',
                    icon: 'icon-calendar-empty',
                    items: [
                        { id: 'created_Min', field: 'created', value: new Date(kendo.toString(new Date(), 'yyyy-MM-01T00:00:00')) },
                        //  { field: 'created_Max', value: new Date(kendo.toString(new Date(), 'yyyy-MM-01T00:00:00') },
                    ]
                },
                Custom: {
                    id: 'Custom',
                    title: 'Özel',
                    icon: 'icon-search-4',
                    items: []
                }
            },

            init: function (value) {

                var $this = this;

                if (value != undefined) {
                    $this.SetData(value);
                }

                $this.Render();
                $this.RenderForm();

            },
            Render: function () {

                var $this = this;

                var temp = $($this.BtnTemplate.html());
                var itemTemp = temp.find('[data-target="foreach"]')[0].outerHTML;

                temp.find('[data-target="foreach"]').remove();

                $this.BtnRenderTarget.html(null).append(temp);

                //  prepend edildiği için reverse edildi.
                $.each($.Enumerable.From($this.Filters).Reverse().Select(a => { return a.Value; }).ToArray(), function (i, filter) {

                    var _itemTemp = $(itemTemp
                        .replace(/{{filter}}/g, filter.id)
                        .replace(/{{icon}}/g, filter.icon)
                        .replace(/{{title}}/g, filter.title)
                    );

                    $this.BtnRenderTarget.find('[data-foreach]').prepend(_itemTemp);

                });

                $this.BtnRenderTarget.find('[data-filter]').on('click', function () {

                    var type = $(this).attr('data-filter');

                    if (type == 'Clear') {

                        $this.BtnRenderTarget.find('[data-target="icon"]').attr('class', $this.BtnRenderTarget.find('[data-target="icon"]').attr('data-icon'));
                        $this.BtnRenderTarget.find('[data-target="name"]').text($this.BtnRenderTarget.find('[data-text]').attr('data-text'));

                        $this.BtnRenderTarget.removeClass('active');

                        $this.Data = null;
                        $this.Filters.Custom.items = [];

                        agile.Agile.UpdateFilters();

                        $this.Modal.Element.modal('hide');

                        return;

                    }

                    var filter = $this.Filters[type];

                    if (type == 'Custom') {

                        $this.Data = $this.Filters.Custom;
                        $this.Modal.Show();

                        $this.RenderForm();

                        //  $this.BtnRenderTarget.removeClass('open');

                        return;

                    }

                    $this.BtnRenderTarget.addClass('active');
                    $this.BtnRenderTarget.find('[data-target="icon"]').attr('class', filter.icon);
                    $this.BtnRenderTarget.find('[data-target="name"]').text(filter.title);

                    $this.Data = filter;
                    $this.RenderForm();
                    agile.Agile.UpdateFilters();

                });

                if ($this.Data != undefined) {
                    if ($this.Data.id != 'Custom') {
                        $this.BtnRenderTarget.find('[data-filter="' + $this.Data.id + '"]').trigger('click');
                    } else {
                        $this.BtnRenderTarget.addClass('active');
                        $this.BtnRenderTarget.find('[data-target="icon"]').attr('class', $this.Data.icon);
                        $this.BtnRenderTarget.find('[data-target="name"]').text($this.Data.title);
                    }
                }

            },
            SetData: function (item) {

                var $this = this;

                $this.Data = $this.Filters[item.id];

                if (item.id == 'Custom') {
                    $this.Filters[item.id].items = item.items;
                }

            },
            RenderForm: function () {

                var $this = this;

                var temp = $($this.FormTemplate.html());

                $this.FormRenderTarget
                    .find('.modal-body')
                    .html(null)
                    .append(temp);

                $.each($this.FilterElements, function (i, item) {

                    var element = temp.find('[data-filterelement="' + i + '"]')
                        .attr('id', item.id);

                    if ($this.Data != null && $this.Data.items != null) {

                        var filterValue = $.Enumerable.From($this.Data.items).Where(a => { return a.id == item.id; }).FirstOrDefault();
                        item.value = filterValue != null
                            ? (filterValue.field == 'created' ? new Date(filterValue.value) : filterValue.value)
                            : null;
                    }

                    item.render(element, item.value);

                });

                if (agile.States.FilterFormRendered == undefined) {

                    $this.FormRenderTarget.find('[data-event="SaveFilter"]').on('click', function () {



                        $this.BtnRenderTarget.addClass('active');
                        $this.BtnRenderTarget.find('[data-target="icon"]').attr('class', $this.Filters.Custom.icon);
                        $this.BtnRenderTarget.find('[data-target="name"]').text($this.Filters.Custom.title);

                        $this.Data = $this.Filters.Custom;

                        agile.Agile.UpdateFilters();

                        $this.Modal.Element.modal('hide');

                    });

                    agile.States.FilterFormRendered = true;

                }

            },

        },

        AgileCart: {

            RenderTarget: $('[data-render="CartItemFilter"]'),
            Template: $('#Header_CartItemFilterArea'),

            Data: null,

            GetData: function () {

                var $this = this;
                return $.Enumerable.From($this.CartList).Select(a => { return { field: a.field, checked: a.checked }; }).ToArray();

            },
            CartList: {
                StageColor: { field: 'StageColor', title: 'Aşama Rengi' },
                LastActivityDate: { field: 'LastActivityDate', title: 'Son İşlem Tarihi' },
                CompletionRate: { field: 'CompletionRate', title: 'Tamamlanma Oranı' },
                PriorityLevel: { field: 'PriorityLevel', title: 'Önem Derecesi' },
                SalesPerson_Title: { field: 'SalesPerson_Title', title: 'Satış Personeli' },
                CustomerCompany_Title: { field: 'CustomerCompany_Title', title: 'Müşteri' },
                VodafoneOffer: { field: 'VodafoneOffer', title: 'Tahmini Beklenen Ciro' },
                lastTenderTotalAmount: { field: 'lastTenderTotalAmount', title: 'Son Teklif' },
                Last_ContactDate: { field: 'Last_ContactDate', title: 'Son Toplantı Tarihi' },
                TotalContact: { field: 'TotalContact', title: 'Toplam Aktivite/Randevu' },
                DaysSinceVisit: { field: 'DaysSinceVisit', title: 'Son aktiviteden bugüne geçen' }
            },
            init: function (value) {

                //  nullable
                //  value = { field: 'TotalContact', dir: 'asc' }

                var $this = this;

                if (value != null) {
                    $this.SetData(value);
                }

                //  $this.DefaultField = $.Enumerable.From($this.SortableFields).Where(a => { return a.Value.default == true; }).Select(a => { return a.Value; }).FirstOrDefault();
                //  $this.Data = $this.DefaultField;
                $this.Render();

            },
            Render: function () {

                var $this = this;

                var temp = $($this.Template.html());
                var itemTemp = temp.find('[data-target="foreach"]')[0].outerHTML;

                temp.find('[data-target="foreach"]').remove();

                $this.RenderTarget
                    .html(null)
                    .append(temp);

                $.each($this.CartList, function (i, item) {

                    var _checked = (item.checked == undefined || item.checked == true);
                    var _data = $.Enumerable.From($this.Data).Where(a => { return a.field == item.field; }).FirstOrDefault();
                    if ($this.Data != undefined && _data != undefined) {
                        _checked = _data.checked;
                    }

                    var _itemTemp = $(itemTemp
                        .replace(/{{field}}/g, item.field)
                        .replace(/{{title}}/g, item.title)
                        .replace(/{{checked}}/g, _checked ? 'checked' : '')
                    );

                    $this.RenderTarget.find('[data-foreach]').prepend(_itemTemp);

                    _itemTemp.find('input').on('change', function () {

                        var _field = $(this).attr('data-field');
                        var _checked = $(this).prop('checked');

                        if (_checked) {
                            $('[data-target="kanban"]').removeClass('hide_' + _field);
                        } else {
                            $('[data-target="kanban"]').addClass('hide_' + _field);
                        }

                        $this.CartList[_field].checked = _checked;

                    });

                });

                $this.RenderTarget.find('input').trigger('change');

            },
            SetData: function (value) {

                var $this = this;

                $this.Data = value;

                //  $.each($this.CartItems, function (ic, cart) {
                //
                //      var item = $.Enumerable.From(items).Where(a => { return a.field == cart.field }).FirstOrDefault();
                //
                //      if (item == undefined || item.checked == undefined) {
                //          cart.checked = false;
                //      } else {
                //          cart.checked = item.checked;
                //      }
                //
                //  });

            },


        },

        Agile: {

            stageTemplate: $('#Header_StageArea'),
            stageRenderTemplate: $('[data-render="StageRender"]'),

            stageItemTemplate: $('#AgileStageItemTemplate'),
            stageColumnTemplate: $('#AgileStageColumnTemplate'),

            stageColumnRender: $('[data-render="AgileStageColumns"]'),

            Data: null,
            StageList: {},

            init: function (value) {

                var $this = this;

                if (value != undefined) {

                    $this.SetData(value);

                } else {

                    $this.SetData([]);

                }

                $this.Render();

            },
            SetData: function (value) {

                var $this = this;

                $.each($this.StageList, function (i, item) {
                    $this.DeleteStageItem(item.id);
                });

                var $this = this;
                $this.Data = value;

            },

            UpdateFilters: function (presentationId) {

                var $this = this;

                if (presentationId != undefined) {

                    var item = $this.StageList[presentationId];

                    if (item.ListView == null || item.ListView.data('handler') == undefined) {
                        return;
                    }

                    item.ListView.data('handler').dataSource.filter(item.getKendoFilter());
                    item.ListView.data('handler').dataSource.sort([agile.Sort.Data]);

                    return;

                }

                $.each($this.StageList, function (i, item) {

                    if (item.ListView == null || item.ListView.data('handler') == undefined) {
                        return;
                    }

                    item.ListView.data('handler').dataSource.filter(item.getKendoFilter());
                    item.ListView.data('handler').dataSource.sort([agile.Sort.Data]);

                });

            },

            AddStageItem: function (stage) {

                var $this = this;

                var agileItem = $this.GetAgileItem(stage);
                $this.StageList[stage.id] = agileItem;
                agileItem.RenderAgileColumn();

                $this.Data = $.Enumerable.From($this.StageList).OrderBy(a => { return a.Value.index }).Select(a => { return { id: a.Value.id, title: a.Value.title, index: a.Value.index } }).ToArray();
                console.log($.Enumerable.From(agile.Agile.StageList).OrderBy(a => { return a.Value.index }).Select(a => { return a.Value.index + '  ' + a.Value.title; }).ToArray());

            },
            DeleteStageItem: function (stageId) {

                var $this = this;

                delete $this.StageList[stageId];
                $('[data-target="AgileColumn"][data-id="' + stageId + '"]').remove();

                $.each($.Enumerable.From($this.StageList).OrderBy(a => { return a.Value.index; }).ToArray(), function (is, stageItem) {
                    stageItem.Value.index = (is + 1);
                });

                $this.Data = $.Enumerable.From($this.StageList).OrderBy(a => { return a.Value.index }).Select(a => { return { id: a.Value.id, title: a.Value.title, index: a.Value.index } }).ToArray();
                console.log($.Enumerable.From(agile.Agile.StageList).OrderBy(a => { return a.Value.index }).Select(a => { return a.Value.index + '  ' + a.Value.title; }).ToArray());

            },

            Render: function () {

                var $this = this;

                var temp = $($this.stageTemplate.html());
                var itemTemp = temp.find('[data-target="foreach"]')[0].outerHTML;

                temp.find('[data-target="foreach"]').remove();

                $this.stageRenderTemplate.html(null).append(temp);

                $.each(agile.Model.Stages, function (is, stage) {

                    var _itemTemp = $(itemTemp
                        .replace(/{{color}}/g, stage.color)
                        .replace(/{{Name}}/g, stage.Name)
                        .replace(/{{id}}/g, stage.id)
                        .replace(/{{IsSalesCompleted}}/g, (stage.IsSalesCompleted == '1' ? '' : 'hide'))
                    );

                    $this.stageRenderTemplate.find('[data-foreach]').prepend(_itemTemp);

                    _itemTemp.find('input').on('change', function () {

                        var checked = $(this).prop('checked');

                        if (checked) {

                            $this.AddStageItem(stage);

                        } else {

                            $this.DeleteStageItem(stage.id);

                        }

                    });

                });

                if ($this.Data != undefined) {

                    $.each($this.Data, function (i, item) {
                        $this.stageRenderTemplate.find('[data-id="' + item.id + '"] input').prop('checked', true).trigger('change');
                    });

                }

                $('.agileColumns').sortable({
                    connectWith: '.agileColumn',
                    update: function (event, ui) {

                        $.each($('.agileColumns .agileColumn'), function (i, item) {
                            $this.StageList[$(item).attr('data-id')].index = i + 1;
                        });

                        $this.Data = $.Enumerable.From($this.StageList).OrderBy(a => { return a.Value.index }).Select(a => { return { id: a.Value.id, title: a.Value.title, index: a.Value.index } }).ToArray();
                        console.log($.Enumerable.From(agile.Agile.StageList).OrderBy(a => { return a.Value.index }).Select(a => { return a.Value.index + '  ' + a.Value.title; }).ToArray());

                    }
                })

            },
            GetAgileItem: function (_stage) {

                var $this = this;

                var agileItem = {
                    id: _stage.id,
                    title: _stage.Name,
                    index: $.Enumerable.From(agile.Agile.StageList).Count() + 1,
                    stage: _stage,

                    ListView: null,
                    miniStage: $('[data-target="StagesContainer"] [data-id="' + _stage.id + '"]'),

                    RenderAgileColumn: function () {

                        var $this = this;

                        $('[data-target="AgileColumn"][data-id="' + $this.id + '"]').remove();

                        var temp = $(
                            agile.Agile.stageColumnTemplate.html()
                                .replace(/{{id}}/g, $this.id)
                                .replace(/{{title}}/g, $this.title)
                        );

                        agile.Agile.stageColumnRender.append(temp);

                        var gridElem = temp.find('[data-target="AgileGrid"]');
                        $this.ListView = gridElem
                            .html(null)
                            .kendoListView({
                                dataSource: new kendo.data.DataSource({
                                    type: 'aspnetmvc-ajax',
                                    transport: {
                                        read: {
                                            url: '/CRM/VWCRM_Presentation/DataSourceDropDown'
                                        }
                                    },
                                    "serverPaging": true,
                                    "serverSorting": true,
                                    "serverFiltering": true,
                                    "serverGrouping": true,
                                    "serverAggregates": true,
                                    "pageSize": 999,
                                    "page": 1,
                                    "total": 0,
                                    filter: $this.getKendoFilter(),
                                    sort: [agile.Sort.Data]
                                }),
                                template: kendo.template(agile.Agile.stageItemTemplate.html()),
                                dataBound: function () {

                                    var target = this.element.parents('.agileColumn').find('.agileHeader');
                                    target.find('[data-target="Count"]').html(this.dataSource.data().length);

                                }
                            });

                        gridElem.sortable({
                            connectWith: '[data-target="AgileGrid"]',
                            update: function (event, ui) {

                                var _id = ui.item.attr('data-id');
                                var preId = ui.item.attr('data-presentationstageid');
                                var _PresentationStageId = $(event.target).parents('[data-target="AgileColumn"]').attr('data-id');

                                //  duplicate event
                                if (preId.toLowerCase() == _PresentationStageId.toLowerCase()) {
                                    return;
                                }

                                ReadData('/CRM/VWCRM_Presentation/UpdateState', { id: _id, PresentationStageId: _PresentationStageId }, function (res) {

                                    var stageColor = $.Enumerable.From(agile.Model.Stages).Where(a => a.id.toLowerCase() == res.PresentationStageId.toLowerCase()).FirstOrDefault().color;
                                    var agileElement = $('.agileItem[data-id="' + _id + '"]');
                                    agileElement.find('[data-field="StageColor"]').attr('style', 'background-color: ' + stageColor);
                                    agileElement.attr('data-presentationstageid', res.PresentationStageId);

                                    agile.Agile.UpdateFilters(preId);
                                    agile.Agile.UpdateFilters(_PresentationStageId);

                                });

                            }
                        }).disableSelection();

                    },

                    deleteStage: function () {

                        var target = $('[data-target="StagesContainer"]');
                        target.find('[data-id="' + _stage.id + '"]').remove();

                    },
                    delete: function () {

                        $this.DeleteStageItem(_stage.id)

                    },
                    getKendoFilter: function () {

                        if (agile.Filter.Data == null || agile.Filter.Data.items == null) {
                            return kendo.filterParser("(PresentationStageId~eq~'" + _stage.id + "')~and~");
                        }

                        var filters = $.Enumerable.From(agile.Filter.Data.items).Where(a => { return a.value != undefined && a.value != null; }).ToArray();

                        var Filter = "(" + "(PresentationStageId~eq~'" + _stage.id + "')~and~" + filters.map(function (c) {

                            var element = agile.Filter.FilterElements[c.id];

                            if (TypeOf(element.value) == 'array') {

                                return '(' + element.value.map(function (e) { return element.field + element.type + "'" + e + "'"; }).join("~or~") + ")";

                            } else if (TypeOf(element.value) == 'date') {

                                return '(' + element.field + element.type + "'" + kendo.toString(element.value, 'yyyy-MM-ddTHH-mm-ss') + "'" + ')';

                            }

                            return '(' + element.field + element.type + "'" + element.value + "'" + ')';

                        }).join("~and~") + ")";

                        console.log(Filter);

                        return kendo.filterParser(Filter);

                    }
                };

                return agileItem;

            },

        }

    };

    $(document)

        //  FARKLI KAYDET için.
        .on('click', '#VWSH_AgileBoardsInsertForm [data-event="Insert"]', function () {

            $('#VWSH_AgileBoardsInsertForm #id').val(null);

        })

        //  AŞAMALAR, SORT, KART İÇERİĞİ butonlarının otomatik kapanmaması için.
        .on('hide.bs.dropdown', '.btn-group[data-render="CartItemFilter"], .btn-group[data-render="StageRender"], .btn-group[data-render="SortRender"]', function (e) {

            if (!$(e.delegateTarget.activeElement).hasClass('dropdown-toggle')) {
                e.preventDefault();
                return false;
            }

        })

        //  JSON value Setleniyor.
        .on('before:submit', '#VWSH_AgileBoardsInsertForm', function () {

            $('#VWSH_AgileBoardsInsertForm #json').val(JSON.stringify(agile.GetData()));

        })

        //  KANBAN Kaydedilirse veya GÜNCELLENİRSE MODEL UPDATE ediliyor.
        .on('success', '#VWSH_AgileBoardsInsertForm', function (event, res) {

            if (res.Result == true) {

                var upd = $.Enumerable.From(agile.Model.MyAgileBoards).Where(a => { return a.id == res.Object.id; }).FirstOrDefault();

                if (res.Object.changed != null) {
                    res.Object.changed = new Date(parseInt(res.Object.changed.replace('/Date(', '').replace(')/', '')));
                }

                if (res.Object.lastUsedDate != null) {
                    res.Object.lastUsedDate = new Date(parseInt(res.Object.lastUsedDate.replace('/Date(', '').replace(')/', '')));
                }

                if (upd == null) {
                    agile.Model.MyAgileBoards.push(res.Object);
                    agile.Kanban.RenderTarget.find('[data-id="' + res.Object.id + '"]').trigger('click');
                } else {
                    agile.Model.MyAgileBoards[agile.Model.MyAgileBoards.indexOf(upd)] = res.Object;
                }

            }

        })

        //  YENİ POTANSIYEL/FIRSAT Kaydedildiğinde o Agile Kolon güncelleniyor.
        .on('success', '#VWCRM_PresentationInsertForm', function (event, res) {

            if (res.Result == true) {

                agile.Agile.UpdateFilters(res.Object.PresentationStageId);

            }

        })

        .on('ready', function () {

            agile.init();

        })

        ;

</script>