@model Infoline.WorkOfTime.BusinessAccess.VWAgileBoardDashboardModel
@{
    ViewBag.Title = "Agile Board";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var userStatus = (PageSecurity)Session["userStatus"];
    var db = new WorkOfTimeDatabase();
    var SalesPersons = db.GetUserByRoleId(SHRoles.SatisPersoneli).ToList();
    var PriorityLevels = new int[] { 1, 2, 3, 4, 5 };
}

<link href="~/Content/AgileBoard/css/default.css" rel="stylesheet" />

<script type="text/template" id="AgileColumnTemplate">

    <li class="agileColumn" data-target="AgileColumn" data-id="{{id}}">

        <div class="agileHeader">

            <div class="row">
                <div class="col-md-10">
                    <h4>{{title}}</h4>
                </div>
                <div class="col-md-2">
                    <div class="agileHeaderButtons text-right">
                        <a class="btn btn-xs btn-default text-primary" data-modal="true" data-task="Insert" data-href="/CRM/VWCRM_Presentation/Insert?PresentationStageId={{id}}"><i class="icon-plus" data-toggle="tooltip" data-placement="bottom" title="Yeni Potansiyel"></i></a>
                    </div>
                </div>
            </div>

        </div>

        <div data-target="AgileGrid"></div>

    </li>

</script>

<div class="row agileContainer">

    <div class="row kanbanHeader">
        <div class="col-md-8">
            <span data-target="kanban.name">@(Model.AgileBoard != null ? Model.AgileBoard.name : "")</span>
            <small data-target="kanban.description" class="text-muted">@(Model.AgileBoard != null ? Model.AgileBoard.description : "")</small>
        </div>
        <div class="col-md-4">
            <div class="text-right">

                <div class="btn-group">
                    <button data-toggle="dropdown" class="btn btn-default btn-xs dropdown-toggle">
                        <i class="icon-flash"></i>
                        <span data-target="kanban.name">@(Model.AgileBoard != null ? Model.AgileBoard.name : "")</span>
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu dropdown-menu-right cmenu" data-target="KanbanList"></ul>
                </div>

                <div class="btn-group">
                    <button data-toggle="dropdown" class="btn btn-default btn-xs dropdown-toggle">
                        <i class="icon-filter-1"></i>
                        <span data-target="filter.name">Filtre</span>
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu dropdown-menu-right cmenu" data-target="FilterList">
                        <li data-filter="MyTasks">
                            <i class="icon-user-1"></i>
                            Benim Görevlerim
                        </li>
                        <li>
                            <i class="icon-stopwatch"></i>
                            Bu Gün Açılanlar
                        </li>
                        <li>
                            <i class="icon-calendar-empty"></i>
                            Bu Hafta Açılanlar
                        </li>
                        <li>
                            <i class="icon-calendar-empty"></i>
                            Bu Ay Açılanlar
                        </li>
                        <li class="divider"></li>
                        <li data-event="Filter">
                            <i class="icon-search-4"></i>
                            Özel
                        </li>
                    </ul>
                </div>

                <div class="btn-group">
                    <button data-toggle="dropdown" class="btn btn-default btn-xs dropdown-toggle">
                        <i class="icon-tags"></i>
                        <span data-target="dropdownText">Aşamalar</span>
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu dropdown-menu-right cmenu" data-target="StageList"></ul>
                </div>

                <button class="btn btn-primary btn-xs" data-task="Insert" data-show="single" data-id="@(Model.AgileBoard != null ? Model.AgileBoard.id.ToString() : "")" data-method="GET" data-href="/SH/VWSH_AgileBoards/Insert">
                    <i class="icon-floppy-1"></i> Kaydet
                </button>

                <button class="btn btn-success btn-xs hide">
                    <i class="icon-pencil-1"></i> Güncelle
                </button>

            </div>
        </div>
    </div>

    <ul class="agileColumns" data-target="AgileColumnsContainer"></ul>

</div>

<div class="modal inmodal fade" id="ModalAgileColumns" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Kapat</span></button>
                <h4 class="modal-title">Görüntülenecek Aşamalar</h4>
                <small class="font-bold">Görüntülenecek aşamaları belirtip, konumlarını (sürükle bırak) yöntemi ile tanımlayabilirsiniz.</small>
            </div>
            <div class="modal-body">

                <div class="row miniStageContainer" data-target="StagesContainer">

                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Kaydet</button>
            </div>
        </div>
    </div>
</div>

<script type="text/template" id="template">
    <div class="agileItem" data-id="#:id#" data-presentationstageid=#:PresentationStageId#>
        <div class="cont" data-target="StageColor" style="background-color: #:Stage_Color#" data-toggle="tooltip" data-placement="right" title="#:Stage_Title#"></div>
        <div class="cont">
            <h4><a href="/CRM/VWCRM_Presentation/Detail?id=#:id#" target="_blank">#:Name#</a></h4>
            <span class="info">

                <span class="dt" data-toggle="tooltip" data-placement="bottom" title="Son İşlem Tarihi">#:kendo.toString(new Date(LastActivityDate), 'dd.MM.yyyy HH:mm')#</span>

                <span class="prg" data-toggle="tooltip" data-placement="bottom" title="Tamamlanma Oranı: #:CompletionRate ?? 0# %">
                    <span style="width: #:CompletionRate ?? 0#%" class="pb">
                        <span class="sr-only">#:CompletionRate ?? 0# % Tamamlandı</span>
                    </span>
                </span>

                <span class="stars" data-toggle="tooltip" data-placement="bottom" title="Önem Derecesi"># for (var i = 1; i <= (PriorityLevel ?? 0); i++) { # <i class="fa fa-star"></i> # } #</span>

                <img class="spimg" src="/Files/SH_User/442945d4-5a15-4a09-b5b5-2db628f09e6b/PR___2021_09_06_13_56_34.jpg" data-toggle="tooltip" data-placement="bottom" title="#:SalesPerson_Title#" />

            </span>

            <div class="optsCont">

                <div class="opt">
                    <span class="key">
                        <i class="icon-user-1"></i> Müşteri
                    </span>
                    <span class="val">
                        #:CustomerCompany_Title == null ? '-' : CustomerCompany_Title#
                    </span>
                </div>

                <div class="opt">
                    <span class="key">
                        <i class="icon-users-1"></i> Toplantı
                    </span>
                    <span class="val">
                        #:TotalContact == null ? '-' : TotalContact#
                    </span>
                </div>

                <div class="opt">
                    <span class="key">
                        <i class="icon-dollar-1"></i> Tahmini Ciro
                    </span>
                    <span class="val">
                        #:VodafoneOffer == null ? '-' : kendo.toString(VodafoneOffer, 'N2')#
                        #if(VodafoneOffer != null) { # <small>₺</small> #}#
                    </span>
                </div>

                <div class="opt">
                    <span class="key">
                        <i class="icon-dollar-1"></i> Son Teklif
                    </span>
                    <span class="val">
                        #:lastTenderTotalAmount == null ? '-' : kendo.toString(lastTenderTotalAmount, 'N2')#
                        #if(lastTenderTotalAmount != null) { # <small>₺</small> #}#
                    </span>
                </div>

                <div class="opt">
                    <span class="key">
                        <i class="icon-award-1"></i> Son Toplantı
                    </span>
                    <span class="val">
                        #:LastStatus == null ? '-' : LastStatus#
                    </span>
                </div>

                <div class="opt">
                    <span class="key">
                        <i class="icon-megaphone-2"></i> Geçen Gün
                    </span>
                    <span class="val">
                        #:DaysSinceVisit == null ? '-' : DaysSinceVisit#
                    </span>
                </div>

            </div>

        </div>
    </div>
</script>

<div class="modal inmodal fade" id="ModalFilter" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Kapat</span></button>
                <h4 class="modal-title">Filtre</h4>
                <small class="font-bold">Sütun içerisinde görünecek ögeler için buradan filtreleme yapabilirsiniz.</small>
            </div>
            <div class="modal-body">

                <div class="form-horizontal">

                    <div class="form-group">
                        <div class="col-md-4">
                            <label class="control-label label-md" for="Filter_CustomerCompanyId">Müşteri</label>
                        </div>
                        <div class="col-md-8" data-container>

                            <select class="form-control" style="width: 100%;"
                                    data-dataidfield="id"
                                    data-datatextfield="name"
                                    data-href="/CMP/VWCMP_Company/DataSourceDropDown"
                                    data-placeholder="Lütfen Müşteri seçiniz..."
                                    data-tagtemplate="#= TagTemplate(data, 'fullName') #"
                                    data-itemtemplate="#= TemplateEngine('companyTemplate', data) #"
                                    data-type="multiselect"
                                    id="Filter_CustomerCompanyId"
                                    name="CustomerCompanyId"
                                    multiple="multiple"></select>

                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-4">
                            <label class="control-label label-md" for="Filter_SalesPersonId">Satış Personeli</label>
                        </div>
                        <div class="col-md-8" data-container>

                            <select class="form-control" style="width: 100%;"
                                    data-dataidfield="id"
                                    data-datatextfield="FullName"
                                    data-href="/SH/VWSH_User/DataSourceDropDown"
                                    data-placeholder="Lütfen Satış Personeli seçiniz..."
                                    data-tagtemplate="#= TagTemplate(data, 'fullName') #"
                                    data-itemtemplate="#= TemplateEngine('userTemplate', data) #"
                                    data-filter="@Html.Raw(String.Join("~or~", Model.SalesPersons.Select(a => "id~eq~'" + a + "'")))"
                                    data-type="multiselect"
                                    id="Filter_SalesPersonId"
                                    name="SalesPersonId"
                                    multiple="multiple"></select>

                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-4">
                            <label class="control-label label-md " for="Filter_ChannelCompanyId">Kanal</label>
                        </div>
                        <div class="col-md-8" data-container>

                            <select class="form-control" style="width: 100%;"
                                    data-dataidfield="id"
                                    data-datatextfield="name"
                                    data-href="/CMP/VWCMP_Company/DataSourceDropDown"
                                    data-placeholder="Lütfen Kanal seçiniz..."
                                    data-tagtemplate="#= TagTemplate(data, 'fullName') #"
                                    data-itemtemplate="#= TemplateEngine('companyTemplate', data) #"
                                    data-type="multiselect"
                                    id="Filter_ChannelCompanyId"
                                    name="ChannelCompanyId"
                                    multiple="multiple"></select>

                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-4">
                            <label class="control-label label-md " for="Filter_CompletionRate">Min. Tamamlanma Oranı</label>
                        </div>
                        <div class="col-md-8">
                            @(Html.Akilli().NumericTextBox("Filter_CompletionRate").Min(0).Max(100))
                        </div>
                    </div>

                </div>



            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-white" data-event="CancelFilter" data-dismiss="modal">Kapat</button>
                <button type="button" class="btn btn-primary" data-event="SaveFilter">Kaydet</button>
            </div>
        </div>
    </div>
</div>

<script type="text/template" id="StageSelectorTemplate">
    <li class="h24" data-id="{{id}}">
        <label>
            <span class="color" style="background-color:{{color}}"></span>
            <input type="checkbox" autocomplete="off"> {{Name}} <small class="text-info {{IsSalesCompleted}}">Satış Tamamlandı</small>
        </label>
    </li>
</script>

<script type="text/template" id="miniStageTemplate">
    <div class="col-md-3 miniStage" data-id="{{id}}">
        <div>

            <div class="cbox">
                <label class="control-label" for="ShowAgile_{{id}}">Gösterilsin</label>
                <input type="checkbox" id="ShowAgile_{{id}}" />
            </div>

            <span class="color" style="background-color:{{color}}"></span>
            <h4>{{Name}}</h4>
            <small>{{Code}}</small>
            <small class="text-success" style="display: {{IsSalesCompleted}}">Satış Gerçekleşti</small>

        </div>
    </div>
</script>

<div class="fixedStart hide">
    <input type="checkbox" checked id="fixed">
    <label title="" for="fixed" id="fixed"><i class="icon-cogs"></i></label>
    <div class="fix-buttons">

        <a data-event="UpdateStages" href="#"><i data-toggle="tooltip" title="Aşamaları Yapılandır" class="icon-tags"></i></a>
        <a data-event="Filter" href="#"><i data-toggle="tooltip" title="Filtre Yapılandır" class="icon-filter-1"></i></a>

        @*<a data-event="KanbanDelete" href="#"><i data-toggle="tooltip" title="Kanban Sil" class="icon-trash-1"></i></a>*@
        <a href="#" data-task="Insert" data-show="single" data-id="@(Model.AgileBoard != null ? Model.AgileBoard.id.ToString() : "")" data-method="GET" data-href="/SH/VWSH_AgileBoards/Insert"><i data-toggle="tooltip" title="Kanban Kaydet" class="icon-floppy-1"></i></a>

        <div class="dropdown" data-target="Kanbans">

            <a href="#" data-event="ChangeKanban" data-toggle="dropdown" class="dropdown-toggle"><i data-toggle="tooltip" title="Kanban Değiştir" class="icon-arrows-cw-3"></i></a>

            <ul class="dropdown-menu">
                <li>Action</li>
                <li>Another action</li>
                <li>Something else here</li>
                <li>KANBAN 1</li>
            </ul>

        </div>

    </div>

</div>

<script type="text/javascript">

    $(document)

        .on('click', '#VWSH_AgileBoardsInsertForm [data-event="Insert"]', function () {

            $('#VWSH_AgileBoardsInsertForm #id').val(null);

        })

        .on('hide.bs.dropdown', '.btn-group', function (e) {

            if (!$(e.delegateTarget.activeElement).hasClass('dropdown-toggle')) {
                e.preventDefault();
                return false;
            }

        })

        .on('before:submit', '#VWSH_AgileBoardsInsertForm', function () {

            var savedObject = {
                AgileStages: page.Agile.AgileStages.GetData(),
                Filter: $.Enumerable.From(page.filters.getFilter()).Select(a => { return { element: a.element, value: a.value } }).ToArray(),
            };

            $('#VWSH_AgileBoardsInsertForm #json').val(JSON.stringify(savedObject));

        })

        .on('click', '[data-event="UpdateStages"]', function () {

            page.filters.modalStage.modal('show');

        })

        .on('click', '[data-event="Filter"]', function () {

            page.filters.modalFilter.modal('show');

        })

        .on('click', '[data-event="CancelFilter"]', function () {

        })

        .on('click', '[data-event="SaveFilter"]', function () {

            $('[data-target="filter.name"]').text('Özel');

            page.Agile.AgileStages.UpdateFilter();
            page.filters.modalFilter.modal('hide');

        })

        .on('click', '[data-event="ChangeKanban"]', function () {



        })

        .on('success', '#VWSH_AgileBoardsInsertForm', function (event, res) {

            if (res.Result == true) {

                page.Model.MyAgileBoards.push(res.Object);
                page.Kanban.Change(res.Object.id);

            }

        })

        .on('success', '#VWCRM_PresentationInsertForm', function (event, res) {

            if (res.Result == true) {

                page.Agile.AgileStages.UpdateFilter();

            }

        })

        .on('ready', function () {

            page.init();

        })

        ;

    var page = {

        Model: @Html.Raw( Infoline.Helper.Json.Serialize(Model) ),

        filters: {
            CheckValue: function () {

                var val;
                var value = $.Enumerable.From(page.filters.items).Where(a => { return a.element == ('#' + this.element.attr('id')) }).FirstOrDefault();

                var sort = this.dataSource.sort();
                var newSort = [];

                if (this.element.attr('data-loaded') == 'true') {
                    this.value(value.value);
                    return;
                }

                if (value.value == null) {
                    return;
                }

                //  id:db77785e_713d_44ca_d700_87945a47468a','69b3bfd1_871c_8f2e_ec2b_f00760ffd209','a275cf86_868a_a090_63f5_5855dad834ac','ddac99bf_0572_add0_7254_cc9c29613750-asc~CompanyName-asc

                if (value.type == 'm') {
                    val = $.Enumerable.From(value.value).Select(a => { return a.replace(/-/g, '_') }).ToArray().join("','");
                }

                var filt = { field: 'id:' + val, dir: 'asc' };
                newSort.push(filt);
                newSort.push(sort[0]);

                this.dataSource.sort(newSort);

                this.element.attr('data-loaded', 'true');

            },
            modalFilter: null,
            modalStage: null,
            items: [

                { type: 'm', field: 'CustomerCompanyId', element: '#Filter_CustomerCompanyId' },
                { type: 'm', field: 'SalesPersonId', element: '#Filter_SalesPersonId' },
                { type: 'm', field: 'ChannelCompanyId', element: '#Filter_ChannelCompanyId' },
                { type: 'n', field: 'CompletionRate', element: '#Filter_CompletionRate' },

            ],
            getFilter: function (element) {

                if (element != undefined) {
                    return $('#' + element).data('handler').dataItem();
                }

                $.each(page.filters.items, function (i, item) {
                    var val = $(item.element).data('handler').value();
                    if (val != '' && val != null) {
                        item.value = val;
                    } else {
                        item.value = null;
                    }
                });

                return page.filters.items;

            },
            getKendoFilter: function () {

                var Filter = "(" + page.filters.getFilter().filter(a => a.value != null).map(function (c) {

                    if (c.type == 's') {
                        return "(" + c.field + "~eq~'" + c.value + ")";
                    } else if (c.type == 'm') {
                        return "(" + c.value.map(function (e) { return c.field + "~eq~'" + e + "'"; }).join("~or~") + ")";
                    } else if (c.type == 'n') {
                        return "(" + c.field + "~gte~'" + c.value + ")";
                    }

                }).join("~and~") + ")";

                return kendo.filterParser(Filter);

            },
            init: function (element) {

                var item = $.Enumerable.From(page.filters.items).Where(a => { return a.element == element; }).FirstOrDefault();
                if (item == undefined) { return; }

                if (page.Model.AgileBoard != null && page.Model.AgileBoard.json != null) {
                    var saved = JSON.parse(page.Model.AgileBoard.json);
                    var savedFilter = $.Enumerable.From(saved.Filter).Where(a => { return a.element == element; }).FirstOrDefault();
                    if (savedFilter != null && savedFilter.value != null) {
                        item.value = savedFilter.value;
                    } else {
                        item.value = null;
                    }
                }

                var el = $(item.element);
                if (el.length == 0) { return; }

                if (el.data('kendoNumericTextBox') != undefined) {
                    el.data('kendoNumericTextBox').value(item.value);
                    return;
                }

                item.template = el[0].outerHTML;

                var _textField = el.attr('data-datatextfield') != undefined ? el.attr('data-datatextfield') : 'Name';
                var _valueField = el.attr('data-dataidfield') != undefined ? el.attr('data-dataidfield') : 'id';

                var _filter = el.attr('data-filter') != undefined ? kendo.filterParser(el.attr('data-filter')) : [];
                var _sort = [{ field: _textField, dir: 'asc' }];
                if (item.value != null) {
                    _sort.unshift({ field: 'id:' + $.Enumerable.From(item.value).Select(a => { return a.replace(/-/g, '_') }).ToArray().join("','"), dir: 'asc' });
                }

                item._element = $(item.template);
                el.parents('[data-container]').html(item._element);

                item._element
                    .kendoMultiSelect({
                        delay: 500,
                        filter: 'contains',
                        tagMode: 'single',
                        tagTemplate: el.attr('data-tagtemplate'),
                        itemTemplate: el.attr('data-itemtemplate'),
                        value: item.value,
                        autoClose: false,
                        dataValueField: _valueField,
                        dataTextField: _textField,
                        placeholder: el.attr('data-placeholder'),
                        dataSource: {
                            type: 'aspnetmvc-ajax',
                            transport: {
                                read: {
                                    url: el.attr('data-href')
                                }
                            },
                            pageSize: 100,
                            page: 1,
                            total: 0,
                            serverPaging: true,
                            serverSorting: true,
                            serverFiltering: true,
                            sort: _sort,
                            filter: _filter
                        }
                });

            },
        },

        Kanban: {
            Change: function (id) {

                $.each(page.Agile.AgileStages.list, function (i, item) {

                    item.delete();
                    item.deleteStage();
                    delete page.Agile.AgileStages.list[item.id];

                });

                page.Model.AgileBoard = $.Enumerable.From(page.Model.MyAgileBoards).Where(a => { return a.id == id }).FirstOrDefault();

                $('.kanbanHeader [data-task="Insert"]').attr('data-id', page.Model.AgileBoard.id);

                $('[data-target="kanban.name"]').text(page.Model.AgileBoard.name);
                $('[data-target="kanban.description"]').text(page.Model.AgileBoard.description);
                $('[data-target="KanbanList"]').parents('.btn-group').removeClass('open');

                page.init();

            },
            init: function () {

                var target = $('[data-target="KanbanList"]');
                target.find('li').remove();

                $.each(page.Model.MyAgileBoards, function (i, item) {

                    var el = $('<li class="h24 ' + (page.Model.AgileBoard.id == item.id ? 'active' : '') + '">' + item.name + '</li>');
                    el.on('click', function () {

                        if ($(this).hasClass('active')) {
                            return;
                        }

                        page.Kanban.Change(item.id);

                    });

                    target.append(el);

                });

            }
        },

        init: function () {

            page.filters.modalFilter = $('#ModalFilter');
            page.filters.modalStage = $('#ModalAgileColumns');

            $.each(page.filters.items, function (i, item) {
                page.filters.init(item.element);
            });

            page.Agile.AgileStages.init();

            if (page.Model.AgileBoard == null) {

                page.filters.modalStage.modal('show');

            }

            $('.agileColumns').sortable({
                connectWith: '.agileColumn',
                update: function (event, ui) {

                    $.each(page.Agile.AgileStages.list, function (i, item) {
                        item.index = null;
                    });

                    $.each($('.agileColumns .agileColumn'), function (i, item) {
                        page.Agile.AgileStages.list[$(item).attr('data-id')].index = i;
                    });

                }
            })

            //  $('[data-target="StagesContainer"]').sortable({
            //      connectWith: '.miniStage',
            //      update: function (event, ui) {
            //
            //          var target = $('[data-target="StagesContainer"]');
            //          var elems = target.children('div');
            //
            //          $.Enumerable.From(elems)
            //              .Select((a, i) => {
            //
            //                  var _id = $(a).attr('data-id');
            //
            //                  var agile = page.Agile.AgileStages.list[_id];
            //                  agile.index = i;
            //
            //                  agile.renderStage();
            //                  agile.render();
            //
            //                  return null;
            //              })
            //              .ToArray();
            //
            //      }
            //  });

            page.Kanban.init();

        },
        Agile: {

            AgileStages: {

                list: {},

                init: function (_stages) {

                    $.each(page.Model.Stages, function (is, stage) {

                        if (page.Model.AgileBoard != null && page.Model.AgileBoard.json != null) {
                            var saved = JSON.parse(page.Model.AgileBoard.json);
                            var savedStage = $.Enumerable.From(saved.AgileStages).Where(a => { return a.id == stage.id; }).FirstOrDefault();

                            var _index = savedStage != null && savedStage.index != null ? savedStage.index : is;
                            var _active = savedStage != null && savedStage.active != null ? savedStage.active : false;

                            var agile = page.Agile.AgileStages.MakeAgileStage(stage, _index, _active);
                            agile.renderStage();
                            agile.render();

                        } else {

                            var agile = page.Agile.AgileStages.MakeAgileStage(stage, is, false);
                            agile.renderStage();
                            agile.render();

                        }

                    });

                },
                MakeAgileStage: function (_stage, _index, _active) {

                    var agileItem = {
                        id: _stage.id,
                        title: _stage.Name,
                        index: _index,
                        active: _active,
                        stage: _stage,

                        ListView: null,
                        miniStage: $('[data-target="StagesContainer"] [data-id="' + _stage.id + '"]'),

                        renderStage: function(){

                            var $this = this;
                            var target = $('[data-target="StageList"]');

                            target.find('li[data-id="' + _stage.id + '"]').remove();

                            var temp = $(
                                $('#StageSelectorTemplate').html()
                                    .replace(/{{color}}/g, $this.stage.color)
                                    .replace(/{{Name}}/g, $this.stage.Name)
                                    .replace(/{{id}}/g, $this.stage.id)
                                    .replace(/{{IsSalesCompleted}}/g, ($this.stage.IsSalesCompleted == '1' ? '' : 'hide'))
                            );

                            temp.find('input').prop('checked', $this.active);

                            temp.find('input').on('change', function () {

                                var checked = $(this).prop('checked');
                                var agile = page.Agile.AgileStages.list[_stage.id];

                                agile.active = checked;
                                agile.render();

                            });

                            target.append(temp);

                        },
                        render: function () {

                            var $this = this;

                            $('[data-target="AgileColumn"][data-id="' + $this.id + '"]').remove();
                            if ($this.active == false) {
                                return;
                            }

                            var temp = $(
                                page.Agile.Template.html()
                                    .replace(/{{id}}/g, $this.id)
                                    .replace(/{{title}}/g, $this.title)
                                    //  .replace(/{{PresentationStageId}}/g, $this.PresentationStageId)
                            );

                            temp.find('[data-event="Delete"]').on('click', function () {


                                swal({
                                    title: "Devam Et ?",
                                    text: 'Bu Sütunu kaldırmak istediğinizden emin misiniz?',
                                    type: "warning",
                                    showCancelButton: true,
                                    confirmButtonColor: "#DD6B55",
                                    confirmButtonText: "Evet",
                                    cancelButtonText: "Hayır",
                                    closeOnConfirm: false,
                                    closeOnCancel: false
                                }, function (isConfirm) {

                                    if (isConfirm) {

                                        $this.delete();

                                    }
                                    swal.close();
                                });

                            });

                            page.Agile.Target.append(temp);

                            var gridElem = temp.find('[data-target="AgileGrid"]');
                            $this.ListView = gridElem
                                .html(null)
                                .kendoListView({
                                    dataSource: new kendo.data.DataSource({
                                        type: 'aspnetmvc-ajax',
                                        transport: {
                                            read: {
                                                url: '/CRM/VWCRM_Presentation/DataSourceDropDown'
                                            }
                                        },
                                        "serverPaging": true,
                                        "serverSorting": true,
                                        "serverFiltering": true,
                                        "serverGrouping": true,
                                        "serverAggregates": true,
                                        "pageSize": 999,
                                        "page": 1,
                                        "total": 0,
                                        filter: $this.getKendoFilter()
                                    }),
                                    template: kendo.template($("#template").html())
                                });

                            gridElem.sortable({
                                connectWith: '[data-target="AgileGrid"]',
                                update: function (event, ui) {

                                    var _id = ui.item.attr('data-id');
                                    var preId = ui.item.attr('data-presentationstageid');
                                    var _PresentationStageId = $(event.target).parents('[data-target="AgileColumn"]').attr('data-id');

                                    //  duplicate event
                                    if (preId.toLowerCase() == _PresentationStageId.toLowerCase()) {
                                        return;
                                    }

                                    ReadData('/CRM/VWCRM_Presentation/UpdateState', { id: _id, PresentationStageId: _PresentationStageId }, function (res) {

                                        var stageColor = $.Enumerable.From(page.Model.Stages).Where(a => a.id.toLowerCase() == res.PresentationStageId.toLowerCase()).FirstOrDefault().color;
                                        var agileElement = $('.agileItem[data-id="' + _id + '"]');
                                        agileElement.find('[data-target="StageColor"]').attr('style', 'background-color: ' + stageColor);
                                        agileElement.attr('data-presentationstageid', res.PresentationStageId);

                                    });

                                }
                            }).disableSelection();

                        },

                        deleteStage: function () {

                            var target = $('[data-target="StagesContainer"]');
                            target.find('[data-id="' + _stage.id + '"]').remove();

                        },
                        delete: function () {

                            var agile = page.Agile.AgileStages.list[_stage.id];
                            agile.active = false;
                            agile.render();

                        },

                        getKendoFilter: function () {

                            var defaultFilter = [{ type: 's', field: 'PresentationStageId', value: _stage.id }];
                            var filters = $.merge(defaultFilter, page.filters.getFilter());

                            var Filter = "(" + filters.filter(a => a.value != null).map(function (c) {

                                if (c.type == 's') {
                                    return "(" + c.field + "~eq~'" + c.value + ")";
                                } else if (c.type == 'm') {
                                    return "(" + c.value.map(function (e) { return c.field + "~eq~'" + e + "'"; }).join("~or~") + ")";
                                } else if (c.type == 'n') {
                                    return "(" + c.field + "~gte~'" + c.value + ")";
                                }

                            }).join("~and~") + ")";

                            return kendo.filterParser(Filter);

                        }
                    };

                    this.list[_stage.id] = agileItem;
                    return agileItem;

                },
                UpdateFilter: function () {

                    $.each(page.Agile.AgileStages.list, function (i, item) {

                        if (item.ListView == null || item.ListView.data('handler') == undefined) {
                            return;
                        }

                        item.ListView.data('handler').dataSource.filter(item.getKendoFilter());

                    });

                },
                GetData: function () {

                    return $.Enumerable.From(page.Agile.AgileStages.list)
                        .Where(a => { return a.Value.index != null })
                        .OrderBy(a => { return a.Value.index; })
                        .Select((a, i) => {

                            return {
                                id: a.Value.id,
                                index: a.Value.index,
                                active: a.Value.active
                            };

                        })
                        .ToArray();

                }

            },

            Template: $('#AgileColumnTemplate'),
            Target: $('[data-target="AgileColumnsContainer"]'),

        },

    };

</script>