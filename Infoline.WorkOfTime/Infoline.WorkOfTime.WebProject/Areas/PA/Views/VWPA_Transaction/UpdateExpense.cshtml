@model Infoline.WorkOfTime.BusinessAccess.VMPA_TransactionModel
@{
    ViewBag.Title = Model.type == (int)EnumPA_TransactionType.Masraf ? "Masraf Onayla-Reddet" : Model.type_Title + " Güncelle";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var userStatus = (PageSecurity)Session["userStatus"];
    var userId = userStatus.user.id;
    var didUserProvedBefore = false;
    if (Model.confirmUserIds != null)
    {
        didUserProvedBefore = Model.confirmUserIds.ToLower().Contains(userId.ToString());
    }

}

<style type="text/css" data-selector="modalContainer">

	.filterButtonActive {
		background-color: #168a73;
		border-color: #168a73;
		color: white;
	}

	.filterButtonPassive {
		background-color: #1ab394;
		border-color: #168a73;
		color: white;
	}
</style>

<script type="text/javascript" data-selector="modalContainer">

    var expense = {
        loaded : false,
        model: @Html.Raw(Infoline.Helper.Json.Serialize(Model)),
        events: {
            currencyDataBound: function (e) {
                if (expense.loaded == false) {
                    if (expense.model.currencyId && expense.model.currencyId != null) {
                        e.sender.value(expense.model.currencyId);
                    } else {
                        var tl = $.Enumerable.From(e.sender.dataItems()).Where(a => a.code == "TL").FirstOrDefault();
                        e.sender.value(tl.id);
                    }

                    e.sender.trigger("click");
                    var status = expense.model.status != null ? expense.model.status : "0";
                    $('[for="status_' + status + '"]').trigger("click");
                    $('[name="status"]').trigger("change");
                    $('#amount').trigger("keyup");
                    expense.loaded = true;
                }
            },
            currencyChange: function (e) {
                $('[data-transaction="currency"]').text(e.sender.dataItem().symbol);
            },
            beforeSubmit: function (e, data) {
                $('#direction').val(data);
                $('#PA_TransactionForm').trigger("submit");
            }
        }
    }

    $(document)
        .on("click", '[data-name="filterDate"]', function (e) {
            var _this = $(this);
            $('.filterButtonActive').removeClass("filterButtonActive").addClass("filterButtonPassive");
            _this.removeClass("filterButtonPassive").addClass("filterButtonActive");
            var attr = _this.attr("data-id");
            var issueDate = $('#progressDate').data("kendoDatePicker").value();
            var newDate = new Date(issueDate).addDays(parseInt(attr));
            $('#date').data("kendoDatePicker").value(newDate);
        })
        .on("change", '[name="status"]', function (e) {
            var value = $('[name="status"]:checked').val();
            $('[data-id="status"]').addClass("hide");
            $('#statusDiv_' + value).removeClass("hide");
        })
        .on("keyup", "#amount, #tax", function (e, res) {
            var amount = $('#amount').val();
            var tax = $('#tax').val();

            amount = amount && amount != null && amount != "" ? parseFloat(amount): 0;
            tax = tax && tax != null && tax != "" ? parseFloat(tax): 0;

            $('#totalAmount').text(kendo.toString(amount + tax, "N2"));
        })

</script>

@using (Html.BeginForm("Update", "VWPA_Transaction", FormMethod.Post, new Dictionary<string, object>() {
	{ "class", "form-horizontal" },
	{ "role", "form" },
	{ "id", "PA_TransactionForm" },
	{ "data-selector", "modalContainer" },
	{ "data-formType", "Ajax" }
}))
{
	@Html.AntiForgeryToken()
	@Html.HiddenFor(model => model.id)
	@Html.HiddenFor(model => model.created)
	@Html.HiddenFor(model => model.createdby)
	@Html.HiddenFor(model => model.direction)
	@Html.HiddenFor(model => model.type)

	if (Model.direction == 3)
	{
		@Html.Hidden("isCorrection", true)
	}

	if (Model.Ledgers.Count() > 0)
	{
		<div class="alert alert-danger alert-dismissable">
			Bu gider işlemi üzerinden ödeme yapıldığı için düzenleme yapamazsınız.
		</div>

		<div class="form-group">
			<div class="col-md-4">
				<label class="control-label label-md" for="Type_Title">İşlem Tipi</label>
			</div>
			<div class="col-md-8">
				@Html.TextBoxFor(model => model.type_Title, new Dictionary<string, object>()
				{
					{"class", "form-control"},
					{"readonly", "readonly"}
				})
			</div>
		</div>

		if (Model.accountId_Title != null)
		{

			<div class="form-group">
				<div class="col-md-4">
					<label class="control-label label-md" for="accountId_Title">İlgili Hesap</label>
				</div>
				<div class="col-md-8">
					@Html.TextBoxFor(model => model.accountId_Title, new Dictionary<string, object>()
					{
						{"class", "form-control"},
						{"readonly", "readonly"}
					})
				</div>
			</div>
		}

		<div class="form-group">
			<div class="col-md-4">
				<label class="control-label label-md" for="Title">Düzenlenme Tarihi</label>
			</div>
			<div class="col-md-8">
				@Html.TextBoxFor(model => model.created, "{0:dd.MM.yyyy}", new Dictionary<string, object>()
				{
					{"class", "form-control"},
					{"readonly", "readonly"}
				})
			</div>
		</div>


		<div class="form-group">
			<div class="col-md-4">
				<label class="control-label label-md" for="Title">Ödeme Tarihi</label>
			</div>
			<div class="col-md-8">
				@Html.TextBoxFor(model => model.date, "{0:dd.MM.yyyy}", new Dictionary<string, object>()
				{
					{"class", "form-control"},
					{"readonly", "readonly"}
				})
			</div>
		</div>


		<div class="form-group">
			<div class="col-md-4">
				<label class="control-label label-md" for="totalAmount">Tutar</label>
			</div>
			<div class="col-md-8">
				<div class="input-group m-b">
					@(Html
                        .Akilli().NumericTextBoxFor(model => model.amount)
                        .Spinners(false)
                        .Decimals(2)
                        .Format("N2")
                        .HtmlAttributes(new Dictionary<string, object>() {
                            {"readonly", "readonly" },
                            {"style", "width:100%" }
                        }))
					<span class="input-group-addon">@Model.Currency_Symbol</span>
				</div>
			</div>
		</div>

		<div class="form-group">
			<div class="col-md-4">
				<label class="control-label label-md" for="Description">Açıklama</label>
			</div>
			<div class="col-md-8">
				@Html.TextAreaFor(model => model.description, new Dictionary<string, object>()
				{
					{"class", "form-control"},
					{"readonly", "readonly"}
				})
			</div>
		</div>

		<div class="form-group">
			<div class="col-md-4">
				<label class="control-label label-md" for="Description">Dosya</label>
			</div>
			<div class="col-md-8">
				@if (Model.type == (int)EnumPA_TransactionType.BankaGideri)
				{
					@(
                        Html.Akilli().FileUpload()
                        .DataTable("PA_Transaction")
                        .DataId(Model.id)
                        .DataKey(x => x.fileGroup == "Banka Gideri Dosyası")
                        .PreviewMode(true)
                    )
				}
				else if (Model.type == (int)EnumPA_TransactionType.Vergi)
				{
					@(
                        Html.Akilli().FileUpload()
                        .DataTable("PA_Transaction")
                        .DataId(Model.id)
                        .DataKey(x => x.fileGroup == "Vergi Dosyası")
                        .PreviewMode(true)
                    )
				}
				else if (Model.type == (int)EnumPA_TransactionType.FisFatura)
				{
					@(
                        Html.Akilli().FileUpload()
                        .DataTable("PA_Transaction")
                        .DataId(Model.id)
                        .DataKey(x => x.fileGroup == "Fiş/Fatura Dosyası")
                        .PreviewMode(true)
                    )
				}
			</div>
		</div>


		if (Model.debt == 0)
		{
			<div class="form-group">
				<div class="col-md-4">
					<label class="control-label label-md" for="debt">Kalan</label>
				</div>
				<div class="col-md-8">
					<span style="font-size:20px;color: green;"> <i class="fa fa-check"></i> Ödendi </span>
				</div>
			</div>
		}
		else
		{
			<div class="form-group">
				<div class="col-md-4">
					<label class="control-label label-md" for="debt">Kalan</label>
				</div>
				<div class="col-md-8">
					<div class="input-group m-b">
						@(Html
                            .Akilli().NumericTextBoxFor(model => model.debt)
                            .Spinners(false)
                            .Decimals(2)
                            .Format("N2")
                            .HtmlAttributes(new Dictionary<string, object>() {
                                {"readonly", "readonly" },
                                {"style", "width:100%" }
                            }))
						<span class="input-group-addon">@Model.Currency_Symbol</span>
					</div>
				</div>
			</div>
		}
	}
	else
	{
		Html.RenderPartial("~/Areas/PA/Views/VWPA_Transaction/Expense/Action" + Model.type + ".cshtml", Model);
	}

	<div class="buttons">
		<button class="btn btn-md btn-danger pull-left" data-task="modalClose">Geri</button>

		@if (Model.Ledgers.Count() == 0 && !didUserProvedBefore)
        {
            if (Model.direction == (int)EnumPA_TransactionDirection.Talep && Model.createdby != userId)
            {
				<button class="btn btn-md btn-warning pull-right" type="button" style="margin-left: 15px;" onclick="expense.events.beforeSubmit(this, '3')"> Düzeltme Talebi Yap </button>
				<button class="btn btn-md btn-primary pull-right" type="button" onclick="expense.events.beforeSubmit(this, '-1')" style="margin-left: 15px;"> Onayla </button>
				<button class="btn btn-md btn-danger pull-right" type="button" onclick="expense.events.beforeSubmit(this, '2')"> Reddet </button>
			}
			else if (Model.direction == 3 && Model.createdby == userId)
			{
				<button class="btn btn-md btn-success pull-right" type="submit"> Güncelle</button>
			}
			else
			{
				if (Model.confirmUserIds != null && !Model.confirmUserIds.Contains(userStatus.user.id.ToString().ToUpper()))
				{
					<button class="btn btn-md btn-success pull-right" type="submit"> Güncelle</button>
				}
			}
		}

	</div>
}