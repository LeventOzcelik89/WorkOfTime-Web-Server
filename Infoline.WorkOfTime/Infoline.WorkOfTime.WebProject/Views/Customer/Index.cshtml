@using Infoline.WorkOfTime.BusinessAccess
@model List<Guid?>
@{
	ViewBag.Title = "Hoş Geldiniz ";
	Layout = "~/Views/Shared/_Layout.cshtml";
	var userStatus = (PageSecurity)Session["userStatus"];
	var now = DateTime.Now;
}


<script type="text/javascript">
    var first = false;
	function FilterMenuTaskType(element) {
		element.kendoDropDownList({
			dataTextField: "Name",
            dataValueField: "Name",
			filter: "contains",
			dataSource: {
				transport: {
					read: "@Url.Action("FilterMenuTaskType", "General",  new { area = string.Empty })"
				}
			},
			optionLabel: "Görev Tipi Seçiniz"
		})
	}

		function FilterMenuTaskStatus(element) {
			element.kendoDropDownList({
				dataTextField: "Name",
                dataValueField: "Name",
				filter: "contains",
				dataSource: {
					transport: {
						read: "@Url.Action("FilterMenuTaskStatus", "General",  new { area = string.Empty })"
					}
				},
				optionLabel: "Son İşlem Seçiniz"
			});
		}


		function FilterMenuTaskPriority(element) {
			element.kendoDropDownList({
				dataTextField: "Name",
                dataValueField: "Name",
				filter: "contains",
				dataSource: {
					transport: {
						read: "@Url.Action("FilterMenuTaskPriority", "General",  new { area = string.Empty })"
					}
				},
				optionLabel: "Görev Önceliği Seçiniz"
			})
		}


	$(document).on('shown.bs.tab', 'a[href="#inventoryGrid"]', function (e) {
		$(".theme-config").addClass("hide")
	});

	


</script>

<script type="text/x-kendo-template" id="taskTypeTemplate" data-selector="modalContainer">
    #var types = @Html.Raw(Infoline.Helper.Json.Serialize(Infoline.Helper.EnumsProperties.EnumToArrayGeneric<Infoline.WorkOfTime.BusinessAccess.EnumFTM_TaskType>()))#

    #if(type_Title != null){#
    <div style="font-size:13px;"><strong><a style="font-size: 15px;" class="#:types.filter(function(e){return e.Key == type}).map(a=>a.Generic['icon'])#"></a></strong> #=type_Title#</div>
    #}#
</script>


<script type="text/x-kendo-template" id="taskStatusTemplate" data-selector="modalContainer">
    #var types = @Html.Raw(Infoline.Helper.Json.Serialize(Infoline.Helper.EnumsProperties.EnumToArrayGeneric<Infoline.WorkOfTime.BusinessAccess.EnumFTM_TaskOperationStatus>()))#

    #if(lastOperationStatus_Title != null){#
    <div style="font-size:13px;"><strong><a style="font-size: 15px;" class="#:types.filter(function(e){return e.Key == status}).map(a=>a.Generic['icon'])#"></a></strong> #=lastOperationStatus_Title#</div>
    #}#
</script>

<script type="text/javascript">

	function taskPriorityResult(data) {

		if (data.priority == 0) {

			return '<i style="color:#EF5352" class="fa fa-circle"></i>  Yüksek';
		}
		else if (data.priority == 1) {
			return '<i style="color:#F8AC59" class="fa fa-circle"></i>  Orta';
		}
		else if (data.priority == 2) {
			return '<i style="color:#1ab394" class="fa fa-circle"></i>  Düşük';
		}

	}

	var gridBase = {
		items: {
			DropDown1: null,
			DropDown2: null
		}
	};

	function filterMenuInit(e) {
		if (e.field == "created") {
			var $container = e.container;

			e.container.find('[type="reset"]').hide();
			e.container.find(".k-filter-help-text").remove();
			e.container.find('[type="submit"]').addClass('filterSubmitBtn').attr('disabled', 'disabled');
			e.container.find('[data-role="datetpicker"]').attr('required', 'required');

			gridBase.items.DropDown1 = e.container.find("select:eq(0)");
			gridBase.items.DropDown1.data("kendoDropDownList").value("gte");
			gridBase.items.DropDown1.data("kendoDropDownList").trigger("change");

			var logicDropDown = e.container.find("select:eq(1)");
			logicDropDown.data("kendoDropDownList").value("and");
			logicDropDown.data("kendoDropDownList").trigger("change");

			gridBase.items.DropDown2 = e.container.find("select:eq(2)");
			gridBase.items.DropDown2.data("kendoDropDownList").value("lte");
			gridBase.items.DropDown2.data("kendoDropDownList").trigger("change");

			//  firstValueDropDown.parents('.k-dropdown').hide();
			logicDropDown.parents('.k-dropdown').hide();
			//  secondValueDropDown.parents('.k-dropdown').hide();

			gridBase.items.DropDown1.data('kendoDropDownList').readonly(true);
			gridBase.items.DropDown2.data('kendoDropDownList').readonly(true);

			$($('.k-header')[14]).html("Başlangıç Tarihi");
			$($('.k-header')[17]).html("Bitiş Tarihi");

			$container.find('[data-role="datepicker"]').on('change', function (e) {

				var dt1 = $container.find('[data-role="datepicker"]').eq(0);
				var dt2 = $container.find('[data-role="datepicker"]').eq(1);

				if (dt1.data('kendoDatePicker').value() != null && dt2.data('kendoDatePicker').value() != null) {
					dt2.data('kendoDatePicker').value().addHours(23);
					dt2.data('kendoDatePicker').value().addMinutes(59);
					dt2.data('kendoDatePicker').value().addSeconds(59);

					$container.find('[type="submit"]').removeAttr('disabled');

				}

			});

			$('[role="columnheader"][data-field="ReadTime"] .k-grid-filter').on('click', function (a) {

				$container.find('[data-role="datepicker"]').trigger('change');

			});

		}
		else if (e.field == "dueDate") {
			var $container = e.container;

			e.container.find('[type="reset"]').hide();
			e.container.find(".k-filter-help-text").remove();
			e.container.find('[type="submit"]').addClass('filterSubmitBtn').attr('disabled', 'disabled');
			e.container.find('[data-role="datetpicker"]').attr('required', 'required');

			gridBase.items.DropDown1 = e.container.find("select:eq(0)");
			gridBase.items.DropDown1.data("kendoDropDownList").value("gte");
			gridBase.items.DropDown1.data("kendoDropDownList").trigger("change");

			var logicDropDown = e.container.find("select:eq(1)");
			logicDropDown.data("kendoDropDownList").value("and");
			logicDropDown.data("kendoDropDownList").trigger("change");

			gridBase.items.DropDown2 = e.container.find("select:eq(2)");
			gridBase.items.DropDown2.data("kendoDropDownList").value("lte");
			gridBase.items.DropDown2.data("kendoDropDownList").trigger("change");

			//  firstValueDropDown.parents('.k-dropdown').hide();
			logicDropDown.parents('.k-dropdown').hide();
			//  secondValueDropDown.parents('.k-dropdown').hide();

			gridBase.items.DropDown1.data('kendoDropDownList').readonly(true);
			gridBase.items.DropDown2.data('kendoDropDownList').readonly(true);

			$($('.k-header')[20]).html("Başlangıç Tarihi");
			$($('.k-header')[23]).html("Bitiş Tarihi");

			$container.find('[data-role="datepicker"]').on('change', function (e) {

				var dt1 = $container.find('[data-role="datepicker"]').eq(0);
				var dt2 = $container.find('[data-role="datepicker"]').eq(1);

				if (dt1.data('kendoDatePicker').value() != null && dt2.data('kendoDatePicker').value() != null) {
					dt2.data('kendoDatePicker').value().addHours(23);
					dt2.data('kendoDatePicker').value().addMinutes(59);
					dt2.data('kendoDatePicker').value().addSeconds(59);

					$container.find('[type="submit"]').removeAttr('disabled');

				}

			});

			$('[role="columnheader"][data-field="ReadTime"] .k-grid-filter').on('click', function (a) {

				$container.find('[data-role="datepicker"]').trigger('change');

			});
		}
		else if (e.field == "lastOperationDate") {
			var $container = e.container;


			e.container.find('[type="reset"]').hide();
			e.container.find(".k-filter-help-text").remove();
			e.container.find('[type="submit"]').addClass('filterSubmitBtn').attr('disabled', 'disabled');
			e.container.find('[data-role="datetpicker"]').attr('required', 'required');

			gridBase.items.DropDown1 = e.container.find("select:eq(0)");
			gridBase.items.DropDown1.data("kendoDropDownList").value("gte");
			gridBase.items.DropDown1.data("kendoDropDownList").trigger("change");

			var logicDropDown = e.container.find("select:eq(1)");
			logicDropDown.data("kendoDropDownList").value("and");
			logicDropDown.data("kendoDropDownList").trigger("change");

			gridBase.items.DropDown2 = e.container.find("select:eq(2)");
			gridBase.items.DropDown2.data("kendoDropDownList").value("lte");
			gridBase.items.DropDown2.data("kendoDropDownList").trigger("change");

			//  firstValueDropDown.parents('.k-dropdown').hide();
			logicDropDown.parents('.k-dropdown').hide();
			//  secondValueDropDown.parents('.k-dropdown').hide();

			gridBase.items.DropDown1.data('kendoDropDownList').readonly(true);
			gridBase.items.DropDown2.data('kendoDropDownList').readonly(true);

			$($('.k-header')[25]).html("Başlangıç Tarihi");
			$($('.k-header')[28]).html("Bitiş Tarihi");

			$container.find('[data-role="datepicker"]').on('change', function (e) {

				var dt1 = $container.find('[data-role="datepicker"]').eq(0);
				var dt2 = $container.find('[data-role="datepicker"]').eq(1);

				if (dt1.data('kendoDatePicker').value() != null && dt2.data('kendoDatePicker').value() != null) {
					dt2.data('kendoDatePicker').value().addHours(23);
					dt2.data('kendoDatePicker').value().addMinutes(59);
					dt2.data('kendoDatePicker').value().addSeconds(59);

					$container.find('[type="submit"]').removeAttr('disabled');

				}

			});

			$('[role="columnheader"][data-field="ReadTime"] .k-grid-filter').on('click', function (a) {

				$container.find('[data-role="datepicker"]').trigger('change');

			});
		}
	}

	function FilterMenuInventoryLastStatus(element) {
        element.kendoDropDownList({
            dataTextField: "Name",
			dataValueField: "Name",
			filter: "contains",
			dataSource: {
				transport: {
					read: "@Url.Action("FilterMenuInventoryLastStatus", "General",  new { area = string.Empty })"
				}
			},
			optionLabel: "Durum Seçiniz"

        })
	}
	var first = false;

    $(document).on('shown.bs.tab', 'a[href="#inventoryGrid"]', function (e) {
        if (first == false) {
            first = true;
            $("#VWPRD_Inventory").data("kendoGrid").refresh();
        }
    });
</script>
<script type="text/x-kendo-template" id="inventoryTemplate" data-selector="modalContainer">
    #var types = @Html.Raw(Infoline.Helper.Json.Serialize(Infoline.Helper.EnumsProperties.EnumToArrayGeneric<Infoline.WorkOfTime.BusinessAccess.EnumPRD_InventoryActionType>()))#

    <div class="chat-element">
        <a class="pull-left">
            <img alt="image" style="height:80px;width:80px;" class="img-circle" src="#:(productId_Image ? productId_Image : '/Content/Custom/img/urun-bulunamadi.png')#" onerror="ImageError(this, '/Content/Custom/img/urun-bulunamadi.png' )">
        </a>
        <div class="media-body">
            <strong class="pull-right text-right">
            </strong>
            <strong><i class="fa fa-qrcode text-success" data-toggle="tooltip" title="Seri Numarası ve Kodu"></i> #:fullName#</strong>
            <p class="m-b-none"><i class="fa fa-info-circle text-success" data-toggle="tooltip" title="Ürün"></i> #:(productId_Title != null ? productId_Title : "-")#</p>
            <p class="m-b-none"><i class="icon-warehouse text-success" data-toggle="tooltip" title="Şu anki Konumu"></i> #=(lastActionType_Title ? lastActionType_Title + ' |' : '-')# #=(lastActionDataCompanyId_Title ? lastActionDataCompanyId_Title : '-')# #=(lastActionDataId_Title ? ' - '+lastActionDataId_Title : '-')#</p>

        </div>
    </div>
</script>

<script type="text/x-kendo-template" id="taskDescription" data-selector="modalContainer">
	#if(description!=null){#
	#if(description.length >= 25){#
	<div style="font-size:13px;">#=description.substring(0,50)#...</div>
	#}
	else
	{#
	<div style="font-size:13px;">#=description#</div>
	#}#
	#}#
</script>

<script type="text/x-kendo-template" id="FTM_TaskTemplate" data-selector="modalContainer">
    #var types = @Html.Raw(Infoline.Helper.Json.Serialize(Infoline.Helper.EnumsProperties.EnumToArrayGeneric<Infoline.WorkOfTime.BusinessAccess.EnumFTM_TaskType>()))#
    #var priorityType = @Html.Raw(Infoline.Helper.Json.Serialize(Infoline.Helper.EnumsProperties.EnumToArrayGeneric<Infoline.WorkOfTime.BusinessAccess.EnumFTM_TaskPriority>()))#
    #var color ="text-primary"#

    #if(priority==0){#
    #color = "text-danger"#
    #}else if(priority==1){#
    #color = "text-warning"#
    #}else if(priority==2){#
    #color = "text-primary"#
    #}#

    <table class="table shoping-cart-table">
        <tbody>
            <tr>
                <td style="width:3%;text-align: center;vertical-align: inherit;">
                    <span>
                        #if((assignUserId!=null && isComplete=='0') && lastOperationStatus!='30'&& lastOperationStatus!='26'){#
                        <i style="font-size: 25px;" class="icon-clock #:color#" st></i><br />
                        #}
                        else if((assignUserId==null && assignableUserIds!=null) && isComplete==0){#
                        <i style="font-size: 25px;" class="icon-users #:color#"></i><br />
                        #}else if((assignUserId==null && assignableUserIds==null) && isComplete=='0'){#
                        <i style="font-size: 25px;" class="icon-user-add #:color#"></i><br />
                        #}
                        else if(isComplete=='0' && lastOperationStatus=='26'){#
                        <i style="font-size: 25px;" class="icon-pause #:color#"></i><br />
                        #}
                        else if(isComplete=='0' && lastOperationStatus=='30' ){#
                        <i style="font-size: 25px;" class="icon-arrows-cw #:color#"></i><br />
                        #}else if(isComplete='1'){#
                        <i style="font-size: 25px;" class="fa fa-check #:color#"></i><br />
                        #}#
                    </span>
                </td>

                <td class="desc" style="width:55%;">
                    #if(type_Title != null){#
                    <div style="font-size:13px;"><strong>Görev Tipi  : <a style="font-size: 15px;" class="#:types.filter(function(e){return e.Key == type}).map(a=>a.Generic['icon'])#"></a></strong>#=type_Title#</div>
                    #}#

                    #if(description!=null){#
                    #if(description.length >= 25){#
                    <div style="font-size:13px;"><strong>Görev Açıklaması : </strong>#=description.substring(0,50)#...</div>
                    #}
                    else
                    {#
                    <div style="font-size:13px;"><strong>Görev Açıklaması : </strong>#=description#</div>
                    #}#
                    #}#


                    #if(code!=null){#
                    <div style="font-size:13px;"><strong>Görev Kodu : </strong>#=code#</div>
                    #}#

                    #if(customer_Title!=null){#
                    <div style="font-size:13px;"><strong>Müşteri İşletme : </strong>#=customer_Title#</div>
                    #}#

                    #if(customerStorage_Title!=null){#
                    <div style="font-size:13px;"><strong>Şube/Depo/Kısım : </strong>#=customerStorage_Title#</div>
                    #}#

                    #if(fixture_Title!=null){#
                    <div style="font-size:13px;"><strong>Görevli Envanter : </strong>#=' ( ' +fixture_Title + ' ) '#</div>
                    #}#

                    <div style="font-size:13px;"><strong>Planlanan Başlangıç/Bitiş Tarihi : </strong>#:(planStartDate != null ?  kendo.toString(planStartDate,"dd.MM.yyyy HH:mm") : '-')# / #:(dueDate != null ?  kendo.toString(dueDate,"dd.MM.yyyy HH:mm") : '-')#</div>

                    #if(lastOperationStatus_Title!=null){#
                    <div style="font-size:13px;"><strong>Son İşlem : </strong>#=lastOperationStatus_Title#</div>
                    #}#

                    #if((assignUserId==null && assignableUserIds!=null) && isComplete==0){#
                    <div style="font-size:13px;"><strong>Üstlenebilecek Personeller : </strong> #=assignableUserTitles# </div>
                    #}#

                    #if(taskSubjectType_Title != null){#
                    <span style="font-size:13px;"><strong>Görev Konuları : </strong>#=(SplitDataReturnBadge(taskSubjectType_Title ?? ''))#</span>
                    #}#
                </td>
    <td style="width:5%;vertical-align:inherit;">
    #if(planLater == @((int)EnumFTM_TaskPlanLater.Evet)){#

<span>

                        <i style="font-size: 28px;margin-right: 64px;" class="icon-clock text-success" data-toggle="tooltip" data-placement="top" title="Görev Planlanmış Başlangıç ve Bitişin Atamasını Bekliyor." st=""></i><br>



                    </span>
	                #}#</td>
                <td style="width:10%;vertical-align: inherit;">
                    <h5 data-original-title="Saha Operasyon Görev Form Sayısı" data-placement="left" class="m-b-xs">
                        <i class="fa fa-upload   m-r-xs"></i>#=SahaOperasyonGorevFormSayisi# Adet
                    </h5>
                    <h5 data-original-title="İşlem Sayısı" data-placement="left" class="m-b-xs">
                        <i class="fa fa-qrcode   m-r-xs"></i>#=IslemSayisi# Adet
                    </h5>
                    <h5 data-original-title="Doldurulan Görev Form Sayısı" data-placement="left" class="m-b-xs">
                        <i class="fa fa-file-text   m-r-xs"></i> #=DoldurulanGorevFormSayisi# Adet
                    </h5>
                    <h5 data-original-title="Dosya(Resim) Sayısı" data-placement="left" class="m-b-xs">
                        <i class="fa fa-image   m-r-xs"></i> #=DosyaSayisi# Adet
                    </h5>
                </td>
            </tr>
        </tbody>
    </table>

</script>

@Html.Action("Dashboard", "VWFTM_Task", new { area = "FTM" })

<section style="margin-bottom: 20px;">
	<div class="tabs-container">
		<ul class="nav nav-tabs">
			<li class="active" data-toggle="tooltip" data-placement="top" title="Şube/Depo/Kısım Haritası">
				<a data-toggle="tab" href="#VWCMP_StoragesMap" aria-expanded="true">
					<i class="icon-map text-success fa-2x"></i>
				</a>
			</li>
			<li data-toggle="tooltip" data-href="@Url.Action("DataSource", "VWFTM_Task", new {area="FTM" })" data-placement="top" title="Arıza Bakım Kayıtları">
				<a data-toggle="tab" href="#ftmTaskGrid" aria-expanded="true">
					<i class="icon-wrench text-success fa-2x"></i>
				</a>
			</li>
			<li data-href="@Url.Action("DataSource","VWPRD_Inventory", new { area = "PRD" })" data-toggle="tooltip" data-placement="top" title="Sahip Olduğum Envanterler">
				<a data-toggle="tab" href="#inventoryGrid" aria-expanded="true">
					<i class="icon-cubes text-success fa-2x"></i>
				</a>
			</li>

		</ul>
		<div class="tab-content">
			<div class="tab-pane active" id="VWCMP_StoragesMap">
				<h4><i class="icon-map text-success"></i> FİRMANIN ŞUBE/DEPO/KISIM HARİTASI</h4>
				<div id="Harita"></div>
			</div>
			
			<div class="tab-pane" data-href="@Url.Action("DataSource", "VWFTM_Task", new { area = "INV" })" id="ftmTaskGrid">
				<h4><i class="icon-wrench text-success"></i> ARIZA BAKIM KAYITLARI </h4>
				@(Html.Akilli()
					.Grid<Infoline.WorkOfTime.BusinessData.VWFTM_Task>("VWFTM_Task")
					.DataSource(x => x.Ajax().Read(r => r.Action("DataSource", "VWFTM_Task", new { area = "FTM" }))
					.Filter(a => a.customerId == userStatus.user.CompanyId)
					.PageSize(10))
					.Scrollable(a => a.Height(500))
					.Columns(x =>
					{
						x.Bound(y => y.type_Title).Title("Görev Tipi").Width(150).Filterable(filterable => filterable.UI("FilterMenuTaskType")).ClientTemplate("#=TemplateEngine('taskTypeTemplate',data)#");
						x.Bound(y => y.lastOperationStatus_Title).Title("Son İşlem").Width(240).Filterable(filterable => filterable.UI("FilterMenuTaskStatus")).ClientTemplate("#=TemplateEngine('taskStatusTemplate',data)#");
						x.Bound(y => y.priority_Title).Title("Görev Önceliği").Filterable(filterable => filterable.UI("FilterMenuTaskPriority")).Width(200).ClientTemplate("#=taskPriorityResult(data)#");
						x.Bound(y => y.code).Title("Görev Kodu").Width(180);
						x.Bound(y => y.description).Title("Görev Açıklaması").ClientTemplate("#=TemplateEngine('taskDescription',data)#").Width(180);
						x.Bound(y => y.customer_Title).Title("Müşteri İşletme").Width(180);
						x.Bound(y => y.customerStorage_Title).Title("Şube/Depo/Kısım").Width(180);
						x.Bound(y => y.lastOperationDate).Title("Son Operasyon Tarihi").Width(190).Format(Extensions.DateFormatFull(true));
						x.Bound(y => y.dueDate).Title("Planlanan Bitiş Tarihi").Filterable(filterable => filterable.Operators(a => a.ForDate(b =>
						{
							b.Clear();
							b.IsGreaterThanOrEqualTo("Başlangıç Tarihi");
							b.IsLessThanOrEqualTo("Bitiş Tarihi");
						}

						))).Width(180).Format(Extensions.DateFormatFull(true));
						x.Bound(y => y.fixture_Title).Title("Görevlendirilen Envanter").Width(230);
						x.Bound(y => y.createdby_Title).Title("Oluşturan Personel").Width(180).Hidden(false);
						x.Bound(y => y.created).Title("Oluşturulma Tarihi").Filterable(filterable => filterable.Operators(a => a.ForDate(b =>
						{

							b.Clear();
							b.IsGreaterThanOrEqualTo("Başlangıç Tarihi");
							b.IsLessThanOrEqualTo("Bitiş Tarihi");
						}

						))).Width(180).Format(Extensions.DateFormatFull(true));
					})
								.Events(ev => ev.FilterMenuInit("filterMenuInit"))
					.Selectable(x => x.Mode(GridSelectionMode.Multiple))
					.ToolBar(x =>
					{
						x.Custom().Text("<i data-original-title='Arıza Kaydı Oluştur' class='fa fa-plus-circle'></i>").HtmlAttributes(new Dictionary<string, object>() { { "data-show", "always" }, { "data-method", "GET" } }).Url(Url.Action("Insert", "VWFTM_Task", new { area = "FTM" }));
						x.Custom().Text("<i data-original-title='Görev Detayı' class='fa fa-info-circle'></i>").HtmlAttributes(new Dictionary<string, object>() { { "data-show", "single" }, { "data-default", "" }, { "data-modal", "false" } }).Url(Url.Action("Detail", "VWFTM_Task", new { area = "FTM" }));
					})
                 )
			</div>



			<div class="tab-pane " data-href="@Url.Action("DataSource", "VWPRD_Inventory", new {area="CMP" })" id="inventoryGrid">
				<h4><i class="icon-cubes text-success"></i>  SAHİP OLDUĞUM ENVANTERLER </h4>
				@(Html.Akilli()
                .Grid<Infoline.WorkOfTime.BusinessData.VWPRD_Inventory>("VWPRD_Inventory")
                .DataSource(x => x.Ajax().Read(r => r.Action("DataSource", "VWPRD_Inventory", new { area = "PRD" }))
                .Filter(a => a.lastActionDataCompanyId == userStatus.user.CompanyId)
                .PageSize(10))
                .Scrollable(a => a.Height(500))
                .Columns(x =>
                {
                    x.Bound(y => y.id).Title("Envanter Bilgileri").HeaderHtmlAttributes(new { @class = "hide" }).Locked(true).Sortable(false).Width(600).ClientTemplate("#=TemplateEngine('inventoryTemplate',data)#");
                    x.Bound(y => y.serialcode).Title("Seri No").Width(130).Hidden(false);
                    x.Bound(y => y.code).Title("Envanter Kodu").Width(150).Hidden(false);
                    x.Bound(y => y.productId_Title).Title("Ürün Bilgisi").Width(220).Hidden(false);
                    x.Bound(y => y.lastActionType_Title).Title("Durumu").Filterable(filterable => filterable.UI("FilterMenuInventoryLastStatus")).Width(130).Hidden(false);
                    x.Bound(y => y.lastActionDataCompanyId_Title).Title("Cari Konumu").Width(200).Hidden(false);
                    x.Bound(y => y.lastActionDataId_Title).Title("Depo Konumu").Width(200).Hidden(false);
                })
                .Selectable(x => x.Mode(GridSelectionMode.Single))
                .ToolBar(x =>
                {
                    x.Custom().Text("<i data-original-title='Envanter Detayı' class='fa fa-info-circle'></i>").HtmlAttributes(new Dictionary<string, object>() { { "data-show", "single" }, { "data-modal", "false" }, { "data-default", "" } }).Url(Url.Action("Detail", "VWPRD_Inventory", new { area = "PRD" }));
                    x.Custom().Text("<i data-original-title='Arıza Kaydı Oluştur' class='fa fa-wrench'></i>").HtmlAttributes(new Dictionary<string, object>() { { "data-show", "single" }, { "data-method", "GET" }, { "data-idColumnKey", "fixtureId" } }).Url(Url.Action("Insert", "VWFTM_Task", new { area = "FTM" }));
                    //x.Custom().Text("<i title='Görev Oluştur' class='fa fa-wrench'></i>").HtmlAttributes(new Dictionary<string, object>() { { "data-show", "default" }, { "data-method", "GET" },{"data-idColumnKey","fixtureIds" } }).Url(Url.Action("Insert", "VWFTM_Task", new { area = "FTM" }));
                }))
			</div>
		</div>
	</div>
</section>



<script type="text/javascript">

    var _ta = {
        harita: null,
        init: function () {
            _ta.harita = new AkilliHarita('Harita', {
                uiInfoContent: "Şube/Depo/Kısım Haritası",
                uiMesurement: true,
                uiDefault: true,
                uiSearch: false,
                //center: [4771198.196008172, 4615410.685769245],
                zoom: 8,
				altlik: "Default1",
            });

            //ReadData('/General/GetLayerList', {  }, function (res) {
            //    $.each(res, function (i, item) {
            //        _ta.harita.layer.addTileCustom(item.Name, item.id, item.Type, item.Url, item.Params, false);
            //        if (item.DefaultBaseMap != null) {
            //            if (item.ShowMobile == true) {
            //                _ta.harita.layer.setVisible(item.id, false);
            //            } else {
            //                _ta.harita.layer.setVisible(item.id, true);
            //            }

            //        }
            //    });
            //    _ta.harita.layer.createControl("Tile", "Altlık ve WMS Servisler", "fa fa-picture-o", $.Enumerable.From(res).Select(function (a) { return a.id; }).ToArray());
            //}, { Elem: $('#Tile') });

            _ta.harita.layer.addVector('TaskArea', 'TaskArea');
            _ta.harita.layer.createControl("TaskAreaList", "DEPOLARIN LİSTESİ", "fa fa-search", ["TaskArea"]);
            _ta.harita.panel.add('AreaOptions', 'Depo Bilgileri', 'fa fa-pencil');

            _ta.harita.style.add('updated', 'rgba(26, 179, 148, 0.3)', '#000000', 1, null, null, 0.75);
            _ta.harita.style.add('updatedHover', 'rgba(26, 179, 148, 0.6)', '#000000', 1, null, null, 1);

            _ta.harita.drawing.create(
                ["Polygon", "PolygonFreeHand", "Square", "Box", "Select", "Hover", "DragSelect", "Modify", "HelpPolygon", "Transform", "MeasurementDraw", "DragAndDrop"],
                _ta.harita.layer.get('TaskArea')['TaskArea'],
                true,
                false,
                function (evnt) {

                    var panel = _ta.harita.panel.get('AreaOptions')['AreaOptions'];

                    console.log(evnt);
                    if (evnt.event == 'Draw') {

                        var panel = _ta.harita.panel.get('AreaOptions')['AreaOptions'];
                        var feat = evnt.features.getArray()[0];
                        var item = {
                            id: feat.getId(),
							location: feat.getSQL(),
                            name: '',
                            description: '',
                            code: ''
                        };

                        feat.set('item', item);
                        feat.set('updated', true);

                        feat.set('style', _ta.harita.style.get('updated')['updated']);
                        feat.set('styleSelected', _ta.harita.style.get('updatedHover')['updatedHover']);
                        feat.set('styleHover', _ta.harita.style.get('updatedHover')['updatedHover']);

                        panel.content.find('[data-target="updated"]').removeClass('hide');
                        panel.content.find('#TaskInsert').addClass('hide');

                        setTimeout(function () {
                            $('[data-tool="Select"]').trigger('click');
                        }, 200);

                    } else if (evnt.event == 'Select' && evnt.features.getArray().length == 1) {

                        var feat = evnt.features.getArray()[0];
                        var item = feat.get('item');
                        var temp = $(
                            $('#TaskAreaTemplate').html()
								.replace(/{{location}}/g, item.location)
								.replace(/{{companyId}}/g, item.companyId)
                                .replace(/{{created}}/g, (item.created != undefined ?
                                    kendo.toString(new Date(Date.parse(item.created)), "dd.MM.yyyy HH:mm") :
                                    kendo.toString(new Date(), "dd.MM.yyyy HH:mm")))
                                .replace(/{{id}}/g, item.id)
                                .replace(/{{hide}}/g, feat.get('updated') == true ? '' : 'hide')

                                .replace(/{{code}}/g, item.code ?? '')
                                .replace(/{{name}}/g, item.name ?? '')
                                //.replace(/{{description}}/g, item.description ?? '')
                        );

                        if (feat.get('updated') == true) {
                            panel.content.find('[data-target="inserted"]').addClass('hide');
                            temp.find('#TaskInsert').addClass('hide');
                        }

						temp.find('[name="name"], [name="description"], [name="location"]')
                            .on('change', function () {

                                feat.set('style', _ta.harita.style.get('updated')['updated']);
                                feat.set('styleSelected', _ta.harita.style.get('updatedHover')['updatedHover']);
                                feat.set('styleHover', _ta.harita.style.get('updatedHover')['updatedHover']);

                                item.name = temp.find('[name="name"]').val();
                                item.description = temp.find('[name="description"]').val();
								item.location = feat.getSQL();

                                feat.set('updated', true);
                                feat.set('item', item);

                                temp.find('[data-target="updated"]').removeClass('hide');
                                panel.content.find('#TaskInsert').addClass('hide');

                                var v = $('#form').data('bs.validator');
                                v.validate();

                            });

                        temp.find('#TaskInsert').on('click', function () {
                            debugger;
							Kendo_GetRequest("/FTM/VWFTM_Task/Insert?customerStorageId=" + item.id +"&customerId="+item.companyId, null, $('<button data-task="Insert"></button>'))
                        });


                        if (item.eGuid == undefined) {
                            temp.find('[data-key="globalId"]').hide();
                        }
                        if (item.globalId == undefined) {
                            temp.find('[data-key="eGuid"]').hide();
                        }
                        if (item.gis_ID == undefined) {
                            temp.find('[data-key="gis_ID"]').hide();
                        }

                        panel.content
                            .html(null)
                            .html(temp);

                        if (!_ta.harita.panel.get('AreaOptions')['AreaOptions'].button.hasClass('active')) {
                            _ta.harita.panel.get('AreaOptions')['AreaOptions'].button.trigger('click');
                        }

                        //  console.log(item);

                    } else if (evnt.event == 'UnSelect') {

                        panel.content
                            .html($('#TaskAreaEmpty').html());

                    } else if (evnt.event == 'Modify') {

                        var feat = evnt.features.getArray()[0];
                        var item = feat.get('item');

                        panel.content
							.find('[name="location"]')
                            .val(feat.getSQL())
                            .trigger('change');

                    }

                }
            );

            _ta.LoadTaskAreas();

        },
        LoadOptions: function () {



        },
        LoadTaskAreas: function () {

            var areas_panel = _ta.harita.panel.get('TaskAreaList')['TaskAreaList'];
            areas_panel.content.find('ul').html(null);

			ReadData("/CMP/VWCMP_Storage/DataSourceDropdown?filter=companyId_Code~eq~'@userStatus.user.companyId_Code'", null, function (res) {

                $.each(res, function (i, item) {

                    var feat = _ta.harita.feature.add('TaskArea', item.id, item.location);
                    if (feat != undefined) {

                        feat.set('item', item);

						$('<li data-id="' + item.id + '" >' + '<div><span>' + item.fullName + '</span></div>' + '</li>')
                            .on('click', function (e) {
                                _ta.harita.feature.panTo(item.id);
                                var interact = _ta.harita.interaction.get('Select')['Select'];

                                interact.getFeatures().push(feat);
                                $('[data-tool="Select"]').trigger('click');

                            })
                            .appendTo(areas_panel.content.find('ul'));
                    }
                });
                console.log(res);
            });
        }
    };

    $(document)

        .on('ready', function () {

            _ta.init();


        })

        .on('before:submit', '#form', function () {

            //  _ta.harita.drawing.properties.selectedFeatures.getArray()[0].get('item');

        })

        .on('success', '#form', function () {

            var panel = _ta.harita.panel.get('AreaOptions')['AreaOptions'];
            var idInput = panel.content.find('[name="id"]');

            if (idInput == undefined) {
                return;
            }

            var id = idInput.val();
            var feat = _ta.harita.feature.get(id)[id];
            feat.set('updated', false);
            panel.content.find('#TaskInsert').removeClass('hide');
            panel.content.find('[data-target="updated"]').addClass('hide');

            feat.set('style', null);
            feat.set('styleSelected', null);
            feat.set('styleHover', null);


        })

        .on('click', '[data-task="delete"]', function () {

            var panel = _ta.harita.panel.get('AreaOptions')['AreaOptions'];
            var idInput = panel.content.find('[name="id"]');

            if (idInput == undefined) {
                return;
            }

        })

        .on('click', '#TaskInsert', function () {


        })

        ;

</script>

<script type="text/template" id="TaskAreaTemplate">

	<form id="form" class="form-horizontal" data-formtype="Ajax" method="post" role="form" action="/CMP/VWCMP_Storage/Insert">

		<input name="id" type="hidden" value="{{id}}" />
		<input name="companyId" type="hidden" value="@userStatus.user.CompanyId" />
		<input name="location" type="hidden" value="{{location}}" />
		<input name="locationType" type="hidden" value="@((int)EnumCMP_StorageLocationType.Alan)" />

		<h3 class="text-center text-danger {{hide}}" data-target="updated" style="margin: 10px 0px 30px 0px;">
			Kaydedilmemiş Depo
		</h3>

		<div class="form-group">
			<div class="col-md-12">
				<label>Oluşturma Tarihi</label>
			</div>
			<div class="col-md-12">
				<input class="form-control" name="created" type="datetime" readonly value="{{created}}" />
			</div>
		</div>

		<div class="form-group" {{codeHide}}>
			<div class="col-md-12">
				<label>Kodu</label>
			</div>
			<div class="col-md-12">
				<input class="form-control" data-type="text" maxlength="50" name="code" value="{{code}}" disabled="disabled" />
			</div>
		</div>

		<div class="form-group">
			<div class="col-md-12">
				<label>Depo Adı</label>
			</div>
			<div class="col-md-12">
				<input class="form-control" data-type="text" name="name" required value="{{name}}" />
			</div>
		</div>

		@*<div class="form-group">
			<div class="col-md-12">
				<label>Depo  Açıklaması</label>
			</div>
			<div class="col-md-12">
				<input class="form-control" data-type="text" name="description" value="{{description}}" />
			</div>
		</div>*@

		<div class="buttons text-right">
			<button class="btn btn-md btn-success" type="submit">Kaydet</button>
			<button class="btn btn-md btn-primary" type="button" id="TaskInsert" data-method="GET">
				<i class="fa fa-plus-circle"></i> Görev Oluştur
			</button>
		</div>
	</form>
</script>