∆(
~D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Authentication\Token.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Authentication +
{		 
public

 

class

 
Token

 
{ 
public 
Guid 
AboneId 
{ 
get !
;! "
private# *
set+ .
;. /
}0 1
public 
Guid 
TabletId 
{ 
get "
;" #
private$ +
set, /
;/ 0
}1 2
public 
string 

AppVersion  
{! "
get# &
;& '
private( /
set0 3
;3 4
}5 6
public 
DateTime 
DateCreated #
{$ %
get& )
;) *
private+ 2
set3 6
;6 7
}8 9
public 
Nullable 
< 
Guid 
> 
UserId $
{% &
get' *
;* +
private, 3
set4 7
;7 8
}9 :
public 
string 

Coordinate  
{! "
get# &
;& '
private( /
set0 3
;3 4
}5 6
public 
Token 
( 
Guid 
aboneId !
,! "
Guid# '
tabletId( 0
,0 1
string2 8

appVersion9 C
,C D
DateTimeE M
dateCreatedN Y
,Y Z
Nullable[ c
<c d
Guidd h
>h i
userIdj p
,p q
stringr x

coordinate	y É
)
É Ñ
{ 	
this 
. 
AboneId 
= 
aboneId "
;" #
this 
. 
TabletId 
= 
tabletId $
;$ %
this 
. 

AppVersion 
= 

appVersion (
;( )
this 
. 
DateCreated 
= 
dateCreated *
;* +
this 
. 
UserId 
= 
userId  
;  !
this 
. 

Coordinate 
= 

coordinate (
;( )
} 	
public 
string 
Encrypt 
( 
) 
{ 	
return 
new 
CryptographyHelper )
() *
)* +
.+ ,
Encrypt, 3
(3 4
this4 8
.8 9
ToString9 A
(A B
)B C
)C D
;D E
}   	
public"" 
override"" 
string"" 
ToString"" '
(""' (
)""( )
{## 	
return$$ 
String$$ 
.$$ 
Format$$  
($$  !
SystemConst$$! ,
.$$, -
TOKEN__ABONE_ID$$- <
+$$= >
$str$$? F
+%% 
SystemConst%% 
.%% 
TOKEN__TABLET_ID%% .
+%%/ 0
$str%%1 8
+&& 
SystemConst&& 
.&& 
TOKEN__APP_VERSION&& 0
+&&1 2
$str&&3 :
+'' 
SystemConst'' 
.'' 
TOKEN__DATECREATED'' 0
+''1 2
$str''3 :
+(( 
SystemConst(( 
.(( 
TOKEN__USER_ID(( ,
+((- .
$str((/ 6
+)) 
SystemConst)) 
.)) 
TOKEN__COORDINATE)) /
+))0 1
$str))2 9
,))9 :
this)); ?
.))? @
AboneId))@ G
,))G H
this))I M
.))M N
TabletId))N V
,))V W
this))X \
.))\ ]

AppVersion))] g
,))g h
this))i m
.))m n
DateCreated))n y
,))y z
this)){ 
.	)) Ä
UserId
))Ä Ü
,
))Ü á
this
))à å
.
))å ç

Coordinate
))ç ó
)
))ó ò
;
))ò ô
}** 	
public,, 
static,, 
Token,, 
Decrypt,, #
(,,# $
string,,$ *
encryptedToken,,+ 9
),,9 :
{-- 	
var.. 
	decrypted.. 
=.. 
new.. 
CryptographyHelper..  2
(..2 3
)..3 4
...4 5
Decrypt..5 <
(..< =
encryptedToken..= K
)..K L
;..L M
return00 
(00 
Token00 
)00 

Newtonsoft00 $
.00$ %
Json00% )
.00) *
JsonConvert00* 5
.005 6
DeserializeObject006 G
(00G H
	decrypted00H Q
,00Q R
typeof00S Y
(00Y Z
Token00Z _
)00_ `
)00` a
;00a b
}11 	
}22 
}33 ›Ê
îD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\CodeGeneration\CodeGenerators\MVCGenerator.cs
	namespace		 	
Infoline		
 
.		 
	Framework		 
.		 
CodeGeneration		 +
.		+ ,
CodeGenerators		, :
{

 
public 

class 
MVCPageSetup 
{ 
public 
string 
Area 
{ 
get  
;  !
set" %
;% &
}' (
public 
string 
ViewName 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
	TableName 
{  !
get" %
;% &
set' *
;* +
}, -
public 
bool 
List 
{ 
get 
; 
set  #
;# $
}% &
public 
bool 
Detail 
{ 
get  
;  !
set" %
;% &
}' (
public 
bool 
Create 
{ 
get  
;  !
set" %
;% &
}' (
public 
bool 
Delete 
{ 
get  
;  !
set" %
;% &
}' (
public 
bool 
Update 
{ 
get  
;  !
set" %
;% &
}' (
public 
string 
[ 
] 

NotColumns "
{# $
get% (
;( )
set* -
;- .
}/ 0
public 
MVCPageSetup 
( 
) 
{ 	
} 	
public 
MVCPageSetup 
( 
string "
area# '
,' (
string) /
view0 4
,4 5
string6 <
table= B
,B C
boolD H
listI M
,M N
boolO S
detailT Z
,Z [
bool\ `
createa g
,g h
booli m
updaten t
,t u
boolv z
delete	{ Å
)
Å Ç
{ 	
Area 
= 
area 
; 
ViewName 
= 
view 
; 
	TableName   
=   
table   
;   
List!! 
=!! 
list!! 
;!! 
Detail"" 
="" 
detail"" 
;"" 
Create## 
=## 
create## 
;## 
Update$$ 
=$$ 
update$$ 
;$$ 
Delete%% 
=%% 
delete%% 
;%% 

NotColumns&& 
=&& 
new&& 
string&& #
[&&# $
]&&$ %
{&&& '
$str&&( 1
,&&1 2
$str&&3 <
,&&< =
$str&&> I
,&&I J
$str&&K V
}&&W X
;&&X Y
}'' 	
}(( 
public** 

class** 
MVCGenerator** 
{++ 
public-- 

Dictionary-- 
<-- 
string--  
,--  !
string--" (
>--( )
GenerateControllers--* =
(--= >
string--> D
strConn--E L
,--L M
string--N T
solutionName--U a
,--a b
string--c i
projectName--j u
,--u v
object--w }
[--} ~
]--~ 

obj_tables
--Ä ä
)
--ä ã
{.. 	
var// 
result// 
=// 
new// 

Dictionary// '
<//' (
string//( .
,//. /
string//0 6
>//6 7
(//7 8
)//8 9
;//9 :
if00 
(00 

obj_tables00 
==00 
null00 "
)00" #
return00$ *
result00+ 1
;001 2
var11 
tables11 
=11 

obj_tables11 #
.11# $
Cast11$ (
<11( )
MVCPageSetup11) 5
>115 6
(116 7
)117 8
.118 9
ToArray119 @
(11@ A
)11A B
;11B C
var33 
con33 
=33 
new33 
SqlConnection33 '
(33' (
strConn33( /
)33/ 0
;330 1
con332 5
.335 6
Open336 :
(33: ;
)33; <
;33< =
var44 
dbname44 
=44 
con44 
.44 
Database44 %
;44% &
for88 
(88 
int88 
i88 
=88 
$num88 
;88 
i88 
<88 
tables88  &
.88& '
Length88' -
;88- .
i88/ 0
++880 2
)882 3
{99 
var:: 
table:: 
=:: 
tables:: "
[::" #
i::# $
]::$ %
;::% &
var;; 
	tableName;; 
=;; 
table;;  %
.;;% &
	TableName;;& /
;;;/ 0
var<< 
viewName<< 
=<< 
table<< $
.<<$ %
ViewName<<% -
;<<- .
var== 
areaName== 
=== 
table== $
.==$ %
Area==% )
;==) *
var>> 
controllerLocation>> &
=>>' (
string>>) /
.>>/ 0
Format>>0 6
(>>6 7
$str>>7 _
,>>_ `
areaName>>a i
,>>i j
viewName>>k s
)>>s t
;>>t u
var@@ 
controllerContent@@ %
=@@& '
GetController@@( 5
(@@5 6
dbname@@6 <
,@@< =
solutionName@@> J
,@@J K
projectName@@L W
,@@W X
table@@Y ^
)@@^ _
;@@_ `
resultAA 
.AA 
AddAA 
(AA 
controllerLocationAA -
,AA- .
controllerContentAA/ @
)AA@ A
;AAA B
}BB 
varDD 
areasDD 
=DD 
tablesDD 
.DD 
SelectDD %
(DD% &
aDD& '
=>DD( *
aDD+ ,
.DD, -
AreaDD- 1
)DD1 2
.DD2 3
DistinctDD3 ;
(DD; <
)DD< =
;DD= >
foreachEE 
(EE 
varEE 
areaEE 
inEE  
areasEE! &
)EE& '
{FF 
varGG !
registrationLoacationGG )
=GG* +
stringGG, 2
.GG2 3
FormatGG3 9
(GG9 :
$strGG: \
,GG\ ]
areaGG^ b
)GGb c
;GGc d
varHH 
webConfigLocationHH %
=HH& '
stringHH( .
.HH. /
FormatHH/ 5
(HH5 6
$strHH6 R
,HHR S
areaHHT X
)HHX Y
;HHY Z
varII 
registrationContentII '
=II( )
GetAreaRegistrationII* =
(II= >
projectNameII> I
,III J
areaIIK O
)IIO P
;IIP Q
varJJ 
webConfigContentJJ $
=JJ% &
GetWebConfigJJ' 3
(JJ3 4
projectNameJJ4 ?
)JJ? @
;JJ@ A
resultKK 
.KK 
AddKK 
(KK !
registrationLoacationKK 0
,KK0 1
registrationContentKK2 E
)KKE F
;KKF G
resultLL 
.LL 
AddLL 
(LL 
webConfigLocationLL ,
,LL, -
webConfigContentLL. >
)LL> ?
;LL? @
}MM 
returnOO 
resultOO 
;OO 
}PP 	
privateSS 
stringSS 
GetControllerSS $
(SS$ %
stringSS% +
dbnameSS, 2
,SS2 3
stringSS4 :
solutionNameSS; G
,SSG H
stringSSI O
projectNameSSP [
,SS[ \
MVCPageSetupSS] i
tableSSj o
)SSo p
{TT 	
varUU 
	tableNameUU 
=UU 
tableUU !
.UU! "
	TableNameUU" +
;UU+ ,
varVV 
viewNameVV 
=VV 
tableVV  
.VV  !
ViewNameVV! )
;VV) *
varWW 
areaNameWW 
=WW 
tableWW  
.WW  !
AreaWW! %
;WW% &
StringBuilderXX 
sbXX 
=XX 
newXX "
StringBuilderXX# 0
(XX0 1
)XX1 2
;XX2 3
sbZZ 
.ZZ 

AppendLineZZ 
(ZZ !
GetMethod_ConstructerZZ /
(ZZ/ 0
)ZZ0 1
)ZZ1 2
;ZZ2 3
sb[[ 
.[[ 

AppendLine[[ 
([[ 
)[[ 
;[[ 
sb\\ 
.\\ 

AppendLine\\ 
(\\  
GetMethod_DataSource\\ .
(\\. /
dbname\\/ 5
,\\5 6
viewName\\7 ?
)\\? @
)\\@ A
;\\A B
sb]] 
.]] 

AppendLine]] 
(]] 
)]] 
;]] 
sb^^ 
.^^ 

AppendLine^^ 
(^^ 
GetMethod_Detail^^ *
(^^* +
dbname^^+ 1
,^^1 2
viewName^^3 ;
)^^; <
)^^< =
;^^= >
sb__ 
.__ 

AppendLine__ 
(__ 
)__ 
;__ 
sb`` 
.`` 

AppendLine`` 
(`` !
GetMethod_Insert_Open`` /
(``/ 0
viewName``0 8
)``8 9
)``9 :
;``: ;
sbaa 
.aa 

AppendLineaa 
(aa 
)aa 
;aa 
sbbb 
.bb 

AppendLinebb 
(bb #
GetMethod_Insert_Commitbb 1
(bb1 2
dbnamebb2 8
,bb8 9
	tableNamebb: C
)bbC D
)bbD E
;bbE F
sbcc 
.cc 

AppendLinecc 
(cc 
)cc 
;cc 
sbdd 
.dd 

AppendLinedd 
(dd !
GetMethod_Update_Opendd /
(dd/ 0
dbnamedd0 6
,dd6 7
viewNamedd8 @
)dd@ A
)ddA B
;ddB C
sbee 
.ee 

AppendLineee 
(ee 
)ee 
;ee 
sbff 
.ff 

AppendLineff 
(ff #
GetMethod_Update_Commitff 1
(ff1 2
dbnameff2 8
,ff8 9
	tableNameff: C
)ffC D
)ffD E
;ffE F
sbgg 
.gg 

AppendLinegg 
(gg 
)gg 
;gg 
sbhh 
.hh 

AppendLinehh 
(hh 
GetMethod_Deletehh *
(hh* +
dbnamehh+ 1
,hh1 2
	tableNamehh3 <
)hh< =
)hh= >
;hh> ?
sbii 
.ii 

AppendLineii 
(ii 
)ii 
;ii 
varjj "
controllerClassContentjj &
=jj' (
sbjj) +
.jj+ ,
ToStringjj, 4
(jj4 5
)jj5 6
;jj6 7
sbll 
.ll 
Clearll 
(ll 
)ll 
;ll 
sbmm 
.mm 

AppendLinemm 
(mm 
stringmm  
.mm  !
Formatmm! '
(mm' (
$strmm( A
,mmA B
solutionNamemmC O
)mmO P
)mmP Q
;mmQ R
sbnn 
.nn 

AppendLinenn 
(nn 
stringnn  
.nn  !
Formatnn! '
(nn' (
$strnn( C
,nnC D
solutionNamennE Q
)nnQ R
)nnR S
;nnS T
sboo 
.oo 

AppendLineoo 
(oo 
stringoo  
.oo  !
Formatoo! '
(oo' (
$stroo( <
,oo< =
projectNameoo> I
)ooI J
)ooJ K
;ooK L
sbpp 
.pp 

AppendLinepp 
(pp 
$strpp D
)ppD E
;ppE F
sbqq 
.qq 

AppendLineqq 
(qq 
$strqq ,
)qq, -
;qq- .
sbrr 
.rr 

AppendLinerr 
(rr 
$strrr 7
)rr7 8
;rr8 9
sbss 
.ss 

AppendLiness 
(ss 
$strss /
)ss/ 0
;ss0 1
sbtt 
.tt 

AppendLinett 
(tt 
$strtt )
)tt) *
;tt* +
sbuu 
.uu 

AppendLineuu 
(uu 
$struu =
)uu= >
;uu> ?
sbvv 
.vv 

AppendLinevv 
(vv 
$strvv .
)vv. /
;vv/ 0
sbww 
.ww 

AppendLineww 
(ww 
$strww 1
)ww1 2
;ww2 3
sbxx 
.xx 

AppendLinexx 
(xx 
$strxx 
)xx 
;xx 
sbzz 
.zz 
AppendFormatzz 
(zz 
$strzz E
,zzE F
projectNamezzG R
,zzR S
areaNamezzT \
)zz\ ]
;zz] ^
sb{{ 
.{{ 

AppendLine{{ 
({{ 
$str{{ 
){{ 
;{{ 
sb|| 
.|| 
AppendFormat|| 
(|| 
$str|| K
,||K L
viewName||M U
)||U V
;||V W
sb}} 
.}} 

AppendLine}} 
(}} 
$str}} 
)}}  
;}}  !
sb~~ 
.~~ 

AppendLine~~ 
(~~ "
controllerClassContent~~ 0
)~~0 1
;~~1 2
sb 
. 

AppendLine 
( 
$str 
)  
;  !
sb
ÄÄ 
.
ÄÄ 

AppendLine
ÄÄ 
(
ÄÄ 
$str
ÄÄ 
)
ÄÄ 
;
ÄÄ 
var
ÇÇ 
controllerContent
ÇÇ !
=
ÇÇ" #
sb
ÇÇ$ &
.
ÇÇ& '
ToString
ÇÇ' /
(
ÇÇ/ 0
)
ÇÇ0 1
;
ÇÇ1 2
return
ÉÉ 
controllerContent
ÉÉ $
;
ÉÉ$ %
}
ÑÑ 	
private
ÖÖ 
string
ÖÖ #
GetMethod_Constructer
ÖÖ ,
(
ÖÖ, -
)
ÖÖ- .
{
ÜÜ 	
StringBuilder
áá 
sb
áá 
=
áá 
new
áá "
StringBuilder
áá# 0
(
áá0 1
)
áá1 2
;
áá2 3
sb
àà 
.
àà 

AppendLine
àà 
(
àà 
$str
àà ;
)
àà; <
;
àà< =
sb
ââ 
.
ââ 

AppendLine
ââ 
(
ââ 
$str
ââ !
)
ââ! "
;
ââ" #
sb
ää 
.
ää 

AppendLine
ää 
(
ää 
$str
ää 2
)
ää2 3
;
ää3 4
sb
ãã 
.
ãã 

AppendLine
ãã 
(
ãã 
$str
ãã !
)
ãã! "
;
ãã" #
return
åå 
sb
åå 
.
åå 
ToString
åå 
(
åå 
)
åå  
;
åå  !
}
çç 	
private
éé 
string
éé "
GetMethod_DataSource
éé +
(
éé+ ,
string
éé, 2
dbname
éé3 9
,
éé9 :
string
éé; A
viewName
ééB J
)
ééJ K
{
èè 	
StringBuilder
êê 
sb
êê 
=
êê 
new
êê "
StringBuilder
êê# 0
(
êê0 1
)
êê1 2
;
êê2 3
sb
ëë 
.
ëë 

AppendLine
ëë 
(
ëë 
$str
ëë j
)
ëëj k
;
ëëk l
sb
íí 
.
íí 

AppendLine
íí 
(
íí 
$str
íí !
)
íí! "
;
íí" #
sb
ìì 
.
ìì 

AppendLine
ìì 
(
ìì 
$str
ìì [
)
ìì[ \
;
ìì\ ]
sb
óó 
.
óó 

AppendLine
óó 
(
óó 
$str
óó 5
)
óó5 6
;
óó6 7
sb
òò 
.
òò 
AppendFormat
òò 
(
òò 
$str
òò E
,
òòE F
dbname
òòG M
)
òòM N
;
òòN O
sb
ôô 
.
ôô 
AppendFormat
ôô 
(
ôô 
$str
ôô z
,
ôôz {
viewNameôô| Ñ
)ôôÑ Ö
;ôôÖ Ü
sb
öö 
.
öö 
AppendFormat
öö 
(
öö 
$str
öö X
,
ööX Y
viewName
ööZ b
)
ööb c
;
ööc d
sb
õõ 
.
õõ 

AppendLine
õõ 
(
õõ 
$str
õõ T
)
õõT U
;
õõU V
sb
úú 
.
úú 

AppendLine
úú 
(
úú 
$str
úú !
)
úú! "
;
úú" #
return
ùù 
sb
ùù 
.
ùù 
ToString
ùù 
(
ùù 
)
ùù  
;
ùù  !
}
ûû 	
private
üü 
string
üü #
GetMethod_Insert_Open
üü ,
(
üü, -
string
üü- 3
viewName
üü4 <
)
üü< =
{
†† 	
StringBuilder
°° 
sb
°° 
=
°° 
new
°° "
StringBuilder
°°# 0
(
°°0 1
)
°°1 2
;
°°2 3
sb
¢¢ 
.
¢¢ 

AppendLine
¢¢ 
(
¢¢ 
$str
¢¢ <
)
¢¢< =
;
¢¢= >
sb
££ 
.
££ 

AppendLine
££ 
(
££ 
$str
££ !
)
££! "
;
££" #
sb
§§ 
.
§§ 
AppendFormat
§§ 
(
§§ 
$str
§§ W
,
§§W X
viewName
§§Y a
)
§§a b
;
§§b c
sb
•• 
.
•• 

AppendLine
•• 
(
•• 
$str
•• 6
)
••6 7
;
••7 8
sb
¶¶ 
.
¶¶ 

AppendLine
¶¶ 
(
¶¶ 
$str
¶¶ !
)
¶¶! "
;
¶¶" #
return
ßß 
sb
ßß 
.
ßß 
ToString
ßß 
(
ßß 
)
ßß  
;
ßß  !
}
®® 	
private
©© 
string
©© %
GetMethod_Insert_Commit
©© .
(
©©. /
string
©©/ 5
dbname
©©6 <
,
©©< =
string
©©> D
	tableName
©©E N
)
©©N O
{
™™ 	
StringBuilder
´´ 
sb
´´ 
=
´´ 
new
´´ "
StringBuilder
´´# 0
(
´´0 1
)
´´1 2
;
´´2 3
sb
¨¨ 
.
¨¨ 

AppendLine
¨¨ 
(
¨¨ 
$str
¨¨ D
)
¨¨D E
;
¨¨E F
sb
≠≠ 
.
≠≠ 
AppendFormat
≠≠ 
(
≠≠ 
$str
≠≠ H
,
≠≠H I
	tableName
≠≠J S
)
≠≠S T
;
≠≠T U
sb
ÆÆ 
.
ÆÆ 

AppendLine
ÆÆ 
(
ÆÆ 
$str
ÆÆ !
)
ÆÆ! "
;
ÆÆ" #
sb
ØØ 
.
ØØ 
AppendFormat
ØØ 
(
ØØ 
$str
ØØ E
,
ØØE F
dbname
ØØG M
)
ØØM N
;
ØØN O
sb
∞∞ 
.
∞∞ 

AppendLine
∞∞ 
(
∞∞ 
$str
∞∞ [
)
∞∞[ \
;
∞∞\ ]
sb
±± 
.
±± 

AppendLine
±± 
(
±± 
$str
±± B
)
±±B C
;
±±C D
sb
≤≤ 
.
≤≤ 

AppendLine
≤≤ 
(
≤≤ 
$str
≤≤ @
)
≤≤@ A
;
≤≤A B
sb
≥≥ 
.
≥≥ 

AppendLine
≥≥ 
(
≥≥ 
$str
≥≥ H
)
≥≥H I
;
≥≥I J
sb
¥¥ 
.
¥¥ 
AppendFormat
¥¥ 
(
¥¥ 
$str
¥¥ L
,
¥¥L M
	tableName
¥¥N W
)
¥¥W X
;
¥¥X Y
sb
µµ 
.
µµ 

AppendLine
µµ 
(
µµ 
$str
µµ C
)
µµC D
;
µµD E
sb
∂∂ 
.
∂∂ 

AppendLine
∂∂ 
(
∂∂ 
$str
∂∂ %
)
∂∂% &
;
∂∂& '
sb
∑∑ 
.
∑∑ 

AppendLine
∑∑ 
(
∑∑ 
$str
∑∑ A
)
∑∑A B
;
∑∑B C
sb
∏∏ 
.
∏∏ 

AppendLine
∏∏ 
(
∏∏ 
$str∏∏ £
)∏∏£ §
;∏∏§ •
sb
ππ 
.
ππ 

AppendLine
ππ 
(
ππ 
$str
ππ &
)
ππ& '
;
ππ' (
sb
∫∫ 
.
∫∫ 

AppendLine
∫∫ 
(
∫∫ 
$str
∫∫  
)
∫∫  !
;
∫∫! "
sb
ªª 
.
ªª 

AppendLine
ªª 
(
ªª 
$str
ªª V
)
ªªV W
;
ªªW X
sb
ºº 
.
ºº 

AppendLine
ºº 
(
ºº 
$str
ºº !
)
ºº! "
;
ºº" #
return
ΩΩ 
sb
ΩΩ 
.
ΩΩ 
ToString
ΩΩ 
(
ΩΩ 
)
ΩΩ  
;
ΩΩ  !
}
ææ 	
private
øø 
string
øø #
GetMethod_Update_Open
øø ,
(
øø, -
string
øø- 3
dbname
øø4 :
,
øø: ;
string
øø< B
viewName
øøC K
)
øøK L
{
¿¿ 	
StringBuilder
¡¡ 
sb
¡¡ 
=
¡¡ 
new
¡¡ "
StringBuilder
¡¡# 0
(
¡¡0 1
)
¡¡1 2
;
¡¡2 3
sb
¬¬ 
.
¬¬ 

AppendLine
¬¬ 
(
¬¬ 
$str
¬¬ C
)
¬¬C D
;
¬¬D E
sb
√√ 
.
√√ 

AppendLine
√√ 
(
√√ 
$str
√√ !
)
√√! "
;
√√" #
sb
ƒƒ 
.
ƒƒ 
AppendFormat
ƒƒ 
(
ƒƒ 
$str
ƒƒ E
,
ƒƒE F
dbname
ƒƒG M
)
ƒƒM N
;
ƒƒN O
sb
≈≈ 
.
≈≈ 
AppendFormat
≈≈ 
(
≈≈ 
$str
≈≈ G
,
≈≈G H
viewName
≈≈I Q
)
≈≈Q R
;
≈≈R S
sb
∆∆ 
.
∆∆ 

AppendLine
∆∆ 
(
∆∆ 
$str
∆∆ 6
)
∆∆6 7
;
∆∆7 8
sb
«« 
.
«« 

AppendLine
«« 
(
«« 
$str
«« !
)
««! "
;
««" #
return
»» 
sb
»» 
.
»» 
ToString
»» 
(
»» 
)
»»  
;
»»  !
}
…… 	
private
   
string
   %
GetMethod_Update_Commit
   .
(
  . /
string
  / 5
dbname
  6 <
,
  < =
string
  > D
	tableName
  E N
)
  N O
{
ÀÀ 	
StringBuilder
ÃÃ 
sb
ÃÃ 
=
ÃÃ 
new
ÃÃ "
StringBuilder
ÃÃ# 0
(
ÃÃ0 1
)
ÃÃ1 2
;
ÃÃ2 3
sb
ÕÕ 
.
ÕÕ 

AppendLine
ÕÕ 
(
ÕÕ 
$str
ÕÕ D
)
ÕÕD E
;
ÕÕE F
sb
ŒŒ 
.
ŒŒ 
AppendFormat
ŒŒ 
(
ŒŒ 
$str
ŒŒ H
,
ŒŒH I
	tableName
ŒŒJ S
)
ŒŒS T
;
ŒŒT U
sb
œœ 
.
œœ 

AppendLine
œœ 
(
œœ 
$str
œœ !
)
œœ! "
;
œœ" #
sb
–– 
.
–– 
AppendFormat
–– 
(
–– 
$str
–– E
,
––E F
dbname
––G M
)
––M N
;
––N O
sb
—— 
.
—— 

AppendLine
—— 
(
—— 
$str
—— [
)
——[ \
;
——\ ]
sb
““ 
.
““ 

AppendLine
““ 
(
““ 
$str
““ B
)
““B C
;
““C D
sb
”” 
.
”” 

AppendLine
”” 
(
”” 
$str
””  
)
””  !
;
””! "
sb
‘‘ 
.
‘‘ 

AppendLine
‘‘ 
(
‘‘ 
$str
‘‘ @
)
‘‘@ A
;
‘‘A B
sb
’’ 
.
’’ 

AppendLine
’’ 
(
’’ 
$str
’’ H
)
’’H I
;
’’I J
sb
÷÷ 
.
÷÷ 

AppendLine
÷÷ 
(
÷÷ 
$str
÷÷  
)
÷÷  !
;
÷÷! "
sb
◊◊ 
.
◊◊ 
AppendFormat
◊◊ 
(
◊◊ 
$str
◊◊ L
,
◊◊L M
	tableName
◊◊N W
)
◊◊W X
;
◊◊X Y
sb
ÿÿ 
.
ÿÿ 

AppendLine
ÿÿ 
(
ÿÿ 
$str
ÿÿ C
)
ÿÿC D
;
ÿÿD E
sb
ŸŸ 
.
ŸŸ 

AppendLine
ŸŸ 
(
ŸŸ 
$str
ŸŸ %
)
ŸŸ% &
;
ŸŸ& '
sb
⁄⁄ 
.
⁄⁄ 

AppendLine
⁄⁄ 
(
⁄⁄ 
$str
⁄⁄ A
)
⁄⁄A B
;
⁄⁄B C
sb
€€ 
.
€€ 

AppendLine
€€ 
(
€€ 
$str€€ ß
)€€ß ®
;€€® ©
sb
‹‹ 
.
‹‹ 

AppendLine
‹‹ 
(
‹‹ 
$str
‹‹ &
)
‹‹& '
;
‹‹' (
sb
›› 
.
›› 

AppendLine
›› 
(
›› 
$str
››  
)
››  !
;
››! "
sb
ﬁﬁ 
.
ﬁﬁ 

AppendLine
ﬁﬁ 
(
ﬁﬁ 
$str
ﬁﬁ V
)
ﬁﬁV W
;
ﬁﬁW X
sb
ﬂﬂ 
.
ﬂﬂ 

AppendLine
ﬂﬂ 
(
ﬂﬂ 
$str
ﬂﬂ !
)
ﬂﬂ! "
;
ﬂﬂ" #
return
‡‡ 
sb
‡‡ 
.
‡‡ 
ToString
‡‡ 
(
‡‡ 
)
‡‡  
;
‡‡  !
}
·· 	
private
‚‚ 
string
‚‚ 
GetMethod_Detail
‚‚ '
(
‚‚' (
string
‚‚( .
dbname
‚‚/ 5
,
‚‚5 6
string
‚‚7 =
viewName
‚‚> F
)
‚‚F G
{
„„ 	
StringBuilder
‰‰ 
sb
‰‰ 
=
‰‰ 
new
‰‰ "
StringBuilder
‰‰# 0
(
‰‰0 1
)
‰‰1 2
;
‰‰2 3
sb
ÂÂ 
.
ÂÂ 

AppendLine
ÂÂ 
(
ÂÂ 
$str
ÂÂ C
)
ÂÂC D
;
ÂÂD E
sb
ÊÊ 
.
ÊÊ 

AppendLine
ÊÊ 
(
ÊÊ 
$str
ÊÊ !
)
ÊÊ! "
;
ÊÊ" #
sb
ÁÁ 
.
ÁÁ 
AppendFormat
ÁÁ 
(
ÁÁ 
$str
ÁÁ E
,
ÁÁE F
dbname
ÁÁG M
)
ÁÁM N
;
ÁÁN O
sb
ËË 
.
ËË 
AppendFormat
ËË 
(
ËË 
$str
ËË G
,
ËËG H
viewName
ËËI Q
)
ËËQ R
;
ËËR S
sb
ÈÈ 
.
ÈÈ 

AppendLine
ÈÈ 
(
ÈÈ 
$str
ÈÈ 6
)
ÈÈ6 7
;
ÈÈ7 8
sb
ÍÍ 
.
ÍÍ 

AppendLine
ÍÍ 
(
ÍÍ 
$str
ÍÍ !
)
ÍÍ! "
;
ÍÍ" #
return
ÏÏ 
sb
ÏÏ 
.
ÏÏ 
ToString
ÏÏ 
(
ÏÏ 
)
ÏÏ  
;
ÏÏ  !
}
ÌÌ 	
private
ÓÓ 
string
ÓÓ 
GetMethod_Delete
ÓÓ '
(
ÓÓ' (
string
ÓÓ( .
dbname
ÓÓ/ 5
,
ÓÓ5 6
string
ÓÓ7 =
	tableName
ÓÓ> G
)
ÓÓG H
{
ÔÔ 	
StringBuilder
 
sb
 
=
 
new
 "
StringBuilder
# 0
(
0 1
)
1 2
;
2 3
sb
ÒÒ 
.
ÒÒ 

AppendLine
ÒÒ 
(
ÒÒ 
$str
ÒÒ *
)
ÒÒ* +
;
ÒÒ+ ,
sb
ÚÚ 
.
ÚÚ 

AppendLine
ÚÚ 
(
ÚÚ 
$str
ÚÚ E
)
ÚÚE F
;
ÚÚF G
sb
ÛÛ 
.
ÛÛ 

AppendLine
ÛÛ 
(
ÛÛ 
$str
ÛÛ !
)
ÛÛ! "
;
ÛÛ" #
sb
ÙÙ 
.
ÙÙ 
AppendFormat
ÙÙ 
(
ÙÙ 
$str
ÙÙ E
,
ÙÙE F
dbname
ÙÙG M
)
ÙÙM N
;
ÙÙN O
sb
ıı 
.
ıı 

AppendLine
ıı 
(
ıı 
$str
ıı B
)
ııB C
;
ııC D
sb
ˆˆ 
.
ˆˆ 

AppendLine
ˆˆ 
(
ˆˆ 
$str
ˆˆ  
)
ˆˆ  !
;
ˆˆ! "
sb
˜˜ 
.
˜˜ 
AppendFormat
˜˜ 
(
˜˜ 
$str
˜˜ d
,
˜˜d e
	tableName
˜˜f o
)
˜˜o p
;
˜˜p q
sb
¯¯ 
.
¯¯ 

AppendLine
¯¯ 
(
¯¯ 
$str
¯¯  
)
¯¯  !
;
¯¯! "
sb
˘˘ 
.
˘˘ 
AppendFormat
˘˘ 
(
˘˘ 
$str
˘˘ P
,
˘˘P Q
	tableName
˘˘R [
)
˘˘[ \
;
˘˘\ ]
sb
˙˙ 
.
˙˙ 

AppendLine
˙˙ 
(
˙˙ 
$str
˙˙  
)
˙˙  !
;
˙˙! "
sb
˚˚ 
.
˚˚ 

AppendLine
˚˚ 
(
˚˚ 
$str
˚˚ C
)
˚˚C D
;
˚˚D E
sb
¸¸ 
.
¸¸ 

AppendLine
¸¸ 
(
¸¸ 
$str
¸¸ %
)
¸¸% &
;
¸¸& '
sb
˝˝ 
.
˝˝ 

AppendLine
˝˝ 
(
˝˝ 
$str
˝˝ A
)
˝˝A B
;
˝˝B C
sb
˛˛ 
.
˛˛ 

AppendLine
˛˛ 
(
˛˛ 
$str˛˛ ú
)˛˛ú ù
;˛˛ù û
sb
ˇˇ 
.
ˇˇ 

AppendLine
ˇˇ 
(
ˇˇ 
$str
ˇˇ &
)
ˇˇ& '
;
ˇˇ' (
sb
ÄÄ 
.
ÄÄ 

AppendLine
ÄÄ 
(
ÄÄ 
$str
ÄÄ  
)
ÄÄ  !
;
ÄÄ! "
sb
ÅÅ 
.
ÅÅ 

AppendLine
ÅÅ 
(
ÅÅ 
$str
ÅÅ V
)
ÅÅV W
;
ÅÅW X
sb
ÇÇ 
.
ÇÇ 

AppendLine
ÇÇ 
(
ÇÇ 
$str
ÇÇ !
)
ÇÇ! "
;
ÇÇ" #
return
ÉÉ 
sb
ÉÉ 
.
ÉÉ 
ToString
ÉÉ 
(
ÉÉ 
)
ÉÉ  
;
ÉÉ  !
}
ÑÑ 	
public
àà 

Dictionary
àà 
<
àà 
string
àà  
,
àà  !
string
àà" (
>
àà( )
GenerateViews
àà* 7
(
àà7 8
string
àà8 >
strConn
àà? F
,
ààF G
string
ààH N
solutionName
ààO [
,
àà[ \
object
àà] c
[
ààc d
]
ààd e

obj_tables
ààf p
)
ààp q
{
ââ 	
var
ää 
result
ää 
=
ää 
new
ää 

Dictionary
ää '
<
ää' (
string
ää( .
,
ää. /
string
ää0 6
>
ää6 7
(
ää7 8
)
ää8 9
;
ää9 :
if
ãã 
(
ãã 

obj_tables
ãã 
==
ãã 
null
ãã "
)
ãã" #
return
ãã$ *
result
ãã+ 1
;
ãã1 2
var
åå 
tables
åå 
=
åå 

obj_tables
åå #
.
åå# $
Cast
åå$ (
<
åå( )
MVCPageSetup
åå) 5
>
åå5 6
(
åå6 7
)
åå7 8
.
åå8 9
ToArray
åå9 @
(
åå@ A
)
ååA B
;
ååB C
var
èè 
con
èè 
=
èè 
new
èè 
SqlConnection
èè '
(
èè' (
strConn
èè( /
)
èè/ 0
;
èè0 1
con
èè2 5
.
èè5 6
Open
èè6 :
(
èè: ;
)
èè; <
;
èè< =
var
êê 
dbname
êê 
=
êê 
con
êê 
.
êê 
Database
êê %
;
êê% &
for
îî 
(
îî 
int
îî 
i
îî 
=
îî 
$num
îî 
;
îî 
i
îî 
<
îî 
tables
îî  &
.
îî& '
Length
îî' -
;
îî- .
i
îî/ 0
++
îî0 2
)
îî2 3
{
ïï 
var
ññ 
table
ññ 
=
ññ 
tables
ññ "
[
ññ" #
i
ññ# $
]
ññ$ %
;
ññ% &
var
òò 
views
òò 
=
òò 
GetViews
òò $
(
òò$ %
con
òò% (
,
òò( )
solutionName
òò* 6
,
òò6 7
table
òò8 =
)
òò= >
;
òò> ?
foreach
ôô 
(
ôô 
var
ôô 
view
ôô !
in
ôô" $
views
ôô% *
)
ôô* +
result
öö 
.
öö 
Add
öö 
(
öö 
view
öö #
.
öö# $
Key
öö$ '
,
öö' (
view
öö) -
.
öö- .
Value
öö. 3
)
öö3 4
;
öö4 5
}
õõ 
return
ùù 
result
ùù 
;
ùù 
}
ûû 	
private
†† 

Dictionary
†† 
<
†† 
string
†† !
,
††! "
string
††# )
>
††) *
GetViews
††+ 3
(
††3 4
SqlConnection
††4 A
con
††B E
,
††E F
string
††G M
solutionName
††N Z
,
††Z [
MVCPageSetup
††\ h
page
††i m
)
††m n
{
°° 	
var
¢¢ 
result
¢¢ 
=
¢¢ 
new
¢¢ 

Dictionary
¢¢ '
<
¢¢' (
string
¢¢( .
,
¢¢. /
string
¢¢0 6
>
¢¢6 7
(
¢¢7 8
)
¢¢8 9
;
¢¢9 :
var
££ 
objArrRestrict
££ 
=
££  
new
££! $
string
££% +
[
££+ ,
]
££, -
{
££. /
null
££0 4
,
££4 5
null
££6 :
,
££: ;
page
££< @
.
££@ A
ViewName
££A I
,
££I J
null
££K O
}
££P Q
;
££Q R
var
§§ 
columns
§§ 
=
§§ 
con
§§ 
.
§§ 
	GetSchema
§§ '
(
§§' (
$str
§§( 1
,
§§1 2
objArrRestrict
§§3 A
)
§§A B
;
§§B C
var
¶¶ 
	tableName
¶¶ 
=
¶¶ 
page
¶¶  
.
¶¶  !
	TableName
¶¶! *
;
¶¶* +
var
ßß 
viewName
ßß 
=
ßß 
page
ßß 
.
ßß  
ViewName
ßß  (
;
ßß( )
var
®® 
areaName
®® 
=
®® 
page
®® 
.
®®  
Area
®®  $
;
®®$ %
var
©© 

notColumns
©© 
=
©© 
page
©© !
.
©©! "

NotColumns
©©" ,
;
©©, -
var
´´  
controllerLocation
´´ "
=
´´# $
string
´´% +
.
´´+ ,
Format
´´, 2
(
´´2 3
$str
´´3 [
,
´´[ \
areaName
´´] e
,
´´e f
viewName
´´g o
)
´´o p
;
´´p q
var
¨¨ 
indexPageLocation
¨¨ !
=
¨¨" #
string
¨¨$ *
.
¨¨* +
Format
¨¨+ 1
(
¨¨1 2
$str
¨¨2 T
,
¨¨T U
areaName
¨¨V ^
,
¨¨^ _
viewName
¨¨` h
)
¨¨h i
;
¨¨i j
var
≠≠  
deatilPageLocation
≠≠ "
=
≠≠# $
string
≠≠% +
.
≠≠+ ,
Format
≠≠, 2
(
≠≠2 3
$str
≠≠3 V
,
≠≠V W
areaName
≠≠X `
,
≠≠` a
viewName
≠≠b j
)
≠≠j k
;
≠≠k l
var
ÆÆ  
insertPageLocation
ÆÆ "
=
ÆÆ# $
string
ÆÆ% +
.
ÆÆ+ ,
Format
ÆÆ, 2
(
ÆÆ2 3
$str
ÆÆ3 V
,
ÆÆV W
areaName
ÆÆX `
,
ÆÆ` a
viewName
ÆÆb j
)
ÆÆj k
;
ÆÆk l
var
ØØ  
updatePageLocation
ØØ "
=
ØØ# $
string
ØØ% +
.
ØØ+ ,
Format
ØØ, 2
(
ØØ2 3
$str
ØØ3 V
,
ØØV W
areaName
ØØX `
,
ØØ` a
viewName
ØØb j
)
ØØj k
;
ØØk l
result
±± 
.
±± 
Add
±± 
(
±± 
indexPageLocation
±± (
,
±±( )
GetPageIndex
±±* 6
(
±±6 7
solutionName
±±7 C
,
±±C D
areaName
±±E M
,
±±M N
viewName
±±O W
,
±±W X
columns
±±Y `
,
±±` a

notColumns
±±b l
)
±±l m
)
±±m n
;
±±n o
result
≤≤ 
.
≤≤ 
Add
≤≤ 
(
≤≤  
deatilPageLocation
≤≤ )
,
≤≤) *
GetPage_Detail
≤≤+ 9
(
≤≤9 :
solutionName
≤≤: F
,
≤≤F G
viewName
≤≤H P
,
≤≤P Q
columns
≤≤R Y
,
≤≤Y Z

notColumns
≤≤[ e
)
≤≤e f
)
≤≤f g
;
≤≤g h
result
≥≥ 
.
≥≥ 
Add
≥≥ 
(
≥≥  
insertPageLocation
≥≥ )
,
≥≥) *
GetPage_Insert
≥≥+ 9
(
≥≥9 :
solutionName
≥≥: F
,
≥≥F G
viewName
≥≥H P
,
≥≥P Q
columns
≥≥R Y
,
≥≥Y Z

notColumns
≥≥[ e
)
≥≥e f
)
≥≥f g
;
≥≥g h
result
¥¥ 
.
¥¥ 
Add
¥¥ 
(
¥¥  
updatePageLocation
¥¥ )
,
¥¥) *
GetPage_Update
¥¥+ 9
(
¥¥9 :
solutionName
¥¥: F
,
¥¥F G
viewName
¥¥H P
,
¥¥P Q
columns
¥¥R Y
,
¥¥Y Z

notColumns
¥¥[ e
)
¥¥e f
)
¥¥f g
;
¥¥g h
return
∂∂ 
result
∂∂ 
;
∂∂ 
}
∑∑ 	
private
∏∏ 
string
∏∏ 
GetPageIndex
∏∏ #
(
∏∏# $
string
∏∏$ *
solutionName
∏∏+ 7
,
∏∏7 8
string
∏∏9 ?
areaName
∏∏@ H
,
∏∏H I
string
∏∏J P
viewName
∏∏Q Y
,
∏∏Y Z
	DataTable
∏∏[ d
columns
∏∏e l
,
∏∏l m
string
∏∏n t
[
∏∏t u
]
∏∏u v

notColumns∏∏w Å
)∏∏Å Ç
{
ππ 	
StringBuilder
∫∫ 
sb
∫∫ 
=
∫∫ 
new
∫∫ "
StringBuilder
∫∫# 0
(
∫∫0 1
)
∫∫1 2
;
∫∫2 3
sb
ºº 
.
ºº 

AppendLine
ºº 
(
ºº 
$str
ºº 
)
ºº 
;
ºº  
sb
ΩΩ 
.
ΩΩ 

AppendLine
ΩΩ 
(
ΩΩ 
$str
ΩΩ :
)
ΩΩ: ;
;
ΩΩ; <
sb
ææ 
.
ææ 

AppendLine
ææ 
(
ææ 
$str
ææ K
)
ææK L
;
ææL M
sb
øø 
.
øø 

AppendLine
øø 
(
øø 
$str
øø 
)
øø 
;
øø 
sb
¿¿ 
.
¿¿ 

AppendLine
¿¿ 
(
¿¿ 
$str
¿¿ 
)
¿¿ 
;
¿¿ 
sb
¡¡ 
.
¡¡ 

AppendLine
¡¡ 
(
¡¡ 
$str
¡¡ 
)
¡¡ 
;
¡¡ 
sb
¬¬ 
.
¬¬ 

AppendLine
¬¬ 
(
¬¬ 
$str
¬¬ 
)
¬¬ 
;
¬¬ 
sb
√√ 
.
√√ 

AppendLine
√√ 
(
√√ 
$str
√√ 
)
√√ 
;
√√ 
sb
ƒƒ 
.
ƒƒ 

AppendLine
ƒƒ 
(
ƒƒ 
$str
ƒƒ *
)
ƒƒ* +
;
ƒƒ+ ,
sb
≈≈ 
.
≈≈ 
AppendFormat
≈≈ 
(
≈≈ 
$str
≈≈ E
,
≈≈E F
solutionName
≈≈G S
,
≈≈S T
viewName
≈≈U ]
)
≈≈] ^
;
≈≈^ _
sb
∆∆ 
.
∆∆ 
AppendFormat
∆∆ 
(
∆∆ 
$str
∆∆ 6
,
∆∆6 7
viewName
∆∆8 @
)
∆∆@ A
;
∆∆A B
sb
«« 
.
«« 
AppendFormat
«« 
(
«« 
$str«« ñ
,««ñ ó
viewName««ò †
,««† °
areaName««¢ ™
)««™ ´
;««´ ¨
sb
»» 
.
»» 

AppendLine
»» 
(
»» 
$str
»» /
)
»»/ 0
;
»»0 1
sb
…… 
.
…… 

AppendLine
…… 
(
…… 
$str
…… #
)
……# $
;
……$ %
var
   
cols1
   
=
   
columns
   
.
    
Rows
    $
.
  $ %
OfType
  % +
<
  + ,
DataRow
  , 3
>
  3 4
(
  4 5
)
  5 6
.
  6 7
Where
  7 <
(
  < =
a
  = >
=>
  ? A
(
  B C
(
  C D
string
  D J
)
  J K
a
  K L
[
  L M
$str
  M Z
]
  Z [
)
  [ \
==
  ] _
$str
  ` d
)
  d e
;
  e f
var
ÀÀ 
cols2
ÀÀ 
=
ÀÀ 
columns
ÀÀ 
.
ÀÀ  
Rows
ÀÀ  $
.
ÀÀ$ %
OfType
ÀÀ% +
<
ÀÀ+ ,
DataRow
ÀÀ, 3
>
ÀÀ3 4
(
ÀÀ4 5
)
ÀÀ5 6
.
ÀÀ6 7
Where
ÀÀ7 <
(
ÀÀ< =
a
ÀÀ= >
=>
ÀÀ? A
(
ÀÀB C
(
ÀÀC D
string
ÀÀD J
)
ÀÀJ K
a
ÀÀK L
[
ÀÀL M
$str
ÀÀM Z
]
ÀÀZ [
)
ÀÀ[ \
!=
ÀÀ] _
$str
ÀÀ` d
)
ÀÀd e
;
ÀÀe f
var
ÃÃ 
cols
ÃÃ 
=
ÃÃ 
cols1
ÃÃ 
.
ÃÃ 
Union
ÃÃ "
(
ÃÃ" #
cols2
ÃÃ# (
)
ÃÃ( )
;
ÃÃ) *
foreach
ÕÕ 
(
ÕÕ 
DataRow
ÕÕ 
colrow
ÕÕ #
in
ÕÕ$ &
cols
ÕÕ' +
)
ÕÕ+ ,
{
ŒŒ 
var
œœ 
cname
œœ 
=
œœ 
(
œœ 
string
œœ #
)
œœ# $
colrow
œœ$ *
[
œœ* +
$str
œœ+ 8
]
œœ8 9
;
œœ9 :
var
–– 
dtype
–– 
=
–– 
(
–– 
string
–– #
)
––# $
colrow
––$ *
[
––* +
$str
––+ 6
]
––6 7
;
––7 8
if
““ 
(
““ 

notColumns
““ 
.
““ 
Any
““ "
(
““" #
a
““# $
=>
““% '
a
““( )
==
““* ,
cname
““- 2
)
““2 3
)
““3 4
{
”” 
continue
‘‘ 
;
‘‘ 
}
’’ 
if
◊◊ 
(
◊◊ 
dtype
◊◊ 
==
◊◊ 
$str
◊◊ /
&&
◊◊0 2
cname
◊◊3 8
.
◊◊8 9
LastIndexOf
◊◊9 D
(
◊◊D E
$str
◊◊E I
)
◊◊I J
>
◊◊K L
-
◊◊M N
$num
◊◊N O
)
◊◊O P
{
ÿÿ 
continue
ŸŸ 
;
ŸŸ 
}
⁄⁄ 
sb
‹‹ 
.
‹‹ 
AppendFormat
‹‹ 
(
‹‹  
$str
‹‹  ?
,
‹‹? @
cname
‹‹A F
)
‹‹F G
;
‹‹G H
if
ﬂﬂ 
(
ﬂﬂ 
cname
ﬂﬂ 
!=
ﬂﬂ 
$str
ﬂﬂ !
)
ﬂﬂ! "
{
‡‡ 
sb
·· 
.
·· 
AppendFormat
·· #
(
··# $
$str
··$ 5
,
··5 6
cname
··7 <
)
··< =
;
··= >
sb
‚‚ 
.
‚‚ 
Append
‚‚ 
(
‚‚ 
$str
‚‚ +
)
‚‚+ ,
;
‚‚, -
if
„„ 
(
„„ 
dtype
„„ 
==
„„  
$str
„„! +
)
„„+ ,
sb
‰‰ 
.
‰‰ 
Append
‰‰ !
(
‰‰! "
$str
‰‰" G
)
‰‰G H
;
‰‰H I
}
ÂÂ 
else
ÊÊ 
{
ÁÁ 
sb
ËË 
.
ËË 
Append
ËË 
(
ËË 
$str
ËË ,
)
ËË, -
;
ËË- .
sb
ÈÈ 
.
ÈÈ 
Append
ÈÈ 
(
ÈÈ 
$str
ÈÈ t
)
ÈÈt u
;
ÈÈu v
sb
ÍÍ 
.
ÍÍ 
Append
ÍÍ 
(
ÍÍ 
$str
ÍÍ )
)
ÍÍ) *
;
ÍÍ* +
sb
ÎÎ 
.
ÎÎ 
Append
ÎÎ 
(
ÎÎ 
$str
ÎÎ 0
)
ÎÎ0 1
;
ÎÎ1 2
sb
ÏÏ 
.
ÏÏ 
Append
ÏÏ 
(
ÏÏ 
$str
ÏÏ 2
)
ÏÏ2 3
;
ÏÏ3 4
}
ÌÌ 
sb
ÓÓ 
.
ÓÓ 
Append
ÓÓ 
(
ÓÓ 
$str
ÓÓ 
)
ÓÓ 
;
ÓÓ 
sb
ÔÔ 
.
ÔÔ 

AppendLine
ÔÔ 
(
ÔÔ 
)
ÔÔ 
;
ÔÔ  
}
 
sb
ÒÒ 
.
ÒÒ 

AppendLine
ÒÒ 
(
ÒÒ 
$str
ÒÒ $
)
ÒÒ$ %
;
ÒÒ% &
sb
ÚÚ 
.
ÚÚ 

AppendLine
ÚÚ 
(
ÚÚ 
$str
ÚÚ V
)
ÚÚV W
;
ÚÚW X
sb
ÛÛ 
.
ÛÛ 

AppendLine
ÛÛ 
(
ÛÛ 
$str
ÛÛ /
)
ÛÛ/ 0
;
ÛÛ0 1
sb
ÙÙ 
.
ÙÙ 

AppendLine
ÙÙ 
(
ÙÙ 
$str
ÙÙ -
)
ÙÙ- .
;
ÙÙ. /
sb
ıı 
.
ıı 

AppendLine
ıı 
(
ıı 
$str
ıı /
)
ıı/ 0
;
ıı0 1
sb
ˆˆ 
.
ˆˆ 

AppendLine
ˆˆ 
(
ˆˆ 
$str
ˆˆ 0
)
ˆˆ0 1
;
ˆˆ1 2
sb
˜˜ 
.
˜˜ 

AppendLine
˜˜ 
(
˜˜ 
$str
˜˜ n
)
˜˜n o
;
˜˜o p
sb
¯¯ 
.
¯¯ 

AppendLine
¯¯ 
(
¯¯ 
$str
¯¯ /
)
¯¯/ 0
;
¯¯0 1
sb
˘˘ 
.
˘˘ 

AppendLine
˘˘ 
(
˘˘ 
$str
˘˘ #
)
˘˘# $
;
˘˘$ %
sb
˙˙ 
.
˙˙ 
AppendFormat
˙˙ 
(
˙˙ 
$str˙˙ ö
,˙˙ö õ
viewName˙˙ú §
,˙˙§ •
areaName˙˙¶ Æ
)˙˙Æ Ø
;˙˙Ø ∞
sb
˚˚ 
.
˚˚ 
AppendFormat
˚˚ 
(
˚˚ 
$str˚˚ ù
,˚˚ù û
viewName˚˚ü ß
,˚˚ß ®
areaName˚˚© ±
)˚˚± ≤
;˚˚≤ ≥
sb
¸¸ 
.
¸¸ 
AppendFormat
¸¸ 
(
¸¸ 
$str¸¸ õ
,¸¸õ ú
viewName¸¸ù •
,¸¸• ¶
areaName¸¸ß Ø
)¸¸Ø ∞
;¸¸∞ ±
sb
˝˝ 
.
˝˝ 
AppendFormat
˝˝ 
(
˝˝ 
$str˝˝ ô
,˝˝ô ö
viewName˝˝õ £
,˝˝£ §
areaName˝˝• ≠
)˝˝≠ Æ
;˝˝Æ Ø
sb
˛˛ 
.
˛˛ 

AppendLine
˛˛ 
(
˛˛ 
$str
˛˛ 
)
˛˛ 
;
˛˛ 
sb
ˇˇ 
.
ˇˇ 

AppendLine
ˇˇ 
(
ˇˇ 
$str
ˇˇ D
)
ˇˇD E
;
ˇˇE F
sb
ÄÄ 
.
ÄÄ 

AppendLine
ÄÄ 
(
ÄÄ 
$str
ÄÄ H
)
ÄÄH I
;
ÄÄI J
sb
ÅÅ 
.
ÅÅ 

AppendLine
ÅÅ 
(
ÅÅ 
$str
ÅÅ $
)
ÅÅ$ %
;
ÅÅ% &
sb
ÇÇ 
.
ÇÇ 

AppendLine
ÇÇ 
(
ÇÇ 
$str
ÇÇ U
)
ÇÇU V
;
ÇÇV W
sb
ÉÉ 
.
ÉÉ 

AppendLine
ÉÉ 
(
ÉÉ 
$strÉÉ å
)ÉÉå ç
;ÉÉç é
sb
ÑÑ 
.
ÑÑ 

AppendLine
ÑÑ 
(
ÑÑ 
$str
ÑÑ .
)
ÑÑ. /
;
ÑÑ/ 0
sb
ÖÖ 
.
ÖÖ 

AppendLine
ÖÖ 
(
ÖÖ 
$str
ÖÖ #
)
ÖÖ# $
;
ÖÖ$ %
sb
ÜÜ 
.
ÜÜ 

AppendLine
ÜÜ 
(
ÜÜ 
$str
ÜÜ E
)
ÜÜE F
;
ÜÜF G
sb
áá 
.
áá 

AppendLine
áá 
(
áá 
$str
áá D
)
ááD E
;
ááE F
sb
àà 
.
àà 

AppendLine
àà 
(
àà 
$str
àà ?
)
àà? @
;
àà@ A
sb
ââ 
.
ââ 

AppendLine
ââ 
(
ââ 
$str
ââ %
)
ââ% &
;
ââ& '
return
ää 
sb
ää 
.
ää 
ToString
ää 
(
ää 
)
ää  
;
ää  !
}
ãã 	
private
åå 
string
åå 
GetPage_Detail
åå %
(
åå% &
string
åå& ,
solutionName
åå- 9
,
åå9 :
string
åå; A
viewName
ååB J
,
ååJ K
	DataTable
ååL U
columns
ååV ]
,
åå] ^
string
åå_ e
[
ååe f
]
ååf g

notColumns
ååh r
)
åår s
{
çç 	
StringBuilder
éé 
sb
éé 
=
éé 
new
éé "
StringBuilder
éé# 0
(
éé0 1
)
éé1 2
;
éé2 3
sb
èè 
.
èè 
AppendFormat
èè 
(
èè 
$str
èè =
,
èè= >
solutionName
èè? K
,
èèK L
viewName
èèM U
)
èèU V
;
èèV W
sb
êê 
.
êê 

AppendLine
êê 
(
êê 
$str
êê 
)
êê 
;
êê  
sb
ëë 
.
ëë 

AppendLine
ëë 
(
ëë 
$str
ëë @
)
ëë@ A
;
ëëA B
sb
íí 
.
íí 

AppendLine
íí 
(
íí 
$str
íí K
)
ííK L
;
ííL M
sb
ìì 
.
ìì 

AppendLine
ìì 
(
ìì 
$str
ìì 
)
ìì 
;
ìì 
sb
îî 
.
îî 

AppendLine
îî 
(
îî 
$str
îî 
)
îî 
;
îî 
sb
ïï 
.
ïï 

AppendLine
ïï 
(
ïï 
$str
ïï \
)
ïï\ ]
;
ïï] ^
var
óó 
cols1
óó 
=
óó 
columns
óó 
.
óó  
Rows
óó  $
.
óó$ %
OfType
óó% +
<
óó+ ,
DataRow
óó, 3
>
óó3 4
(
óó4 5
)
óó5 6
.
óó6 7
Where
óó7 <
(
óó< =
a
óó= >
=>
óó? A
(
óóB C
(
óóC D
string
óóD J
)
óóJ K
a
óóK L
[
óóL M
$str
óóM Z
]
óóZ [
)
óó[ \
==
óó] _
$str
óó` d
)
óód e
;
óóe f
var
òò 
cols2
òò 
=
òò 
columns
òò 
.
òò  
Rows
òò  $
.
òò$ %
OfType
òò% +
<
òò+ ,
DataRow
òò, 3
>
òò3 4
(
òò4 5
)
òò5 6
.
òò6 7
Where
òò7 <
(
òò< =
a
òò= >
=>
òò? A
(
òòB C
(
òòC D
string
òòD J
)
òòJ K
a
òòK L
[
òòL M
$str
òòM Z
]
òòZ [
)
òò[ \
!=
òò] _
$str
òò` d
)
òòd e
;
òòe f
var
ôô 
cols
ôô 
=
ôô 
cols1
ôô 
.
ôô 
Union
ôô "
(
ôô" #
cols2
ôô# (
)
ôô( )
;
ôô) *
foreach
öö 
(
öö 
DataRow
öö 
colrow
öö #
in
öö$ &
cols
öö' +
)
öö+ ,
{
õõ 
var
úú 
cname
úú 
=
úú 
(
úú 
string
úú #
)
úú# $
colrow
úú$ *
[
úú* +
$str
úú+ 8
]
úú8 9
;
úú9 :
var
ùù 
dtype
ùù 
=
ùù 
(
ùù 
string
ùù #
)
ùù# $
colrow
ùù$ *
[
ùù* +
$str
ùù+ 6
]
ùù6 7
;
ùù7 8
if
üü 
(
üü 

notColumns
üü 
.
üü 
Any
üü "
(
üü" #
a
üü# $
=>
üü% '
a
üü( )
==
üü* ,
cname
üü- 2
)
üü2 3
)
üü3 4
{
†† 
continue
°° 
;
°° 
}
¢¢ 
if
§§ 
(
§§ 
dtype
§§ 
==
§§ 
$str
§§ /
&&
§§0 2
cname
§§3 8
.
§§8 9
LastIndexOf
§§9 D
(
§§D E
$str
§§E I
)
§§I J
>
§§K L
-
§§M N
$num
§§N O
)
§§O P
{
•• 
continue
¶¶ 
;
¶¶ 
}
ßß 
sb
™™ 
.
™™ 

AppendLine
™™ 
(
™™ 
$str
™™ >
)
™™> ?
;
™™? @
sb
´´ 
.
´´ 

AppendLine
´´ 
(
´´ 
$str
´´ @
)
´´@ A
;
´´A B
sb
¨¨ 
.
¨¨ 
AppendFormat
¨¨ 
(
¨¨  
$str
¨¨  q
,
¨¨q r
cname
¨¨s x
)
¨¨x y
;
¨¨y z
sb
≠≠ 
.
≠≠ 

AppendLine
≠≠ 
(
≠≠ 
$str
≠≠ .
)
≠≠. /
;
≠≠/ 0
sb
ÆÆ 
.
ÆÆ 

AppendLine
ÆÆ 
(
ÆÆ 
$str
ÆÆ @
)
ÆÆ@ A
;
ÆÆA B
sb
ØØ 
.
ØØ 
AppendFormat
ØØ 
(
ØØ  
$str
ØØ  x
,
ØØx y
cname
ØØz 
)ØØ Ä
;ØØÄ Å
sb
∞∞ 
.
∞∞ 

AppendLine
∞∞ 
(
∞∞ 
$str
∞∞ -
)
∞∞- .
;
∞∞. /
sb
±± 
.
±± 

AppendLine
±± 
(
±± 
$str
±± N
)
±±N O
;
±±O P
sb
≤≤ 
.
≤≤ 
AppendFormat
≤≤ 
(
≤≤  
$str
≤≤  d
,
≤≤d e
cname
≤≤f k
)
≤≤k l
;
≤≤l m
sb
≥≥ 
.
≥≥ 

AppendLine
≥≥ 
(
≥≥ 
$str
≥≥ H
)
≥≥H I
;
≥≥I J
sb
¥¥ 
.
¥¥ 

AppendLine
¥¥ 
(
¥¥ 
$str
¥¥ F
)
¥¥F G
;
¥¥G H
sb
µµ 
.
µµ 

AppendLine
µµ 
(
µµ 
$str
µµ L
)
µµL M
;
µµM N
sb
∂∂ 
.
∂∂ 

AppendLine
∂∂ 
(
∂∂ 
$str
∂∂ .
)
∂∂. /
;
∂∂/ 0
sb
∑∑ 
.
∑∑ 

AppendLine
∑∑ 
(
∑∑ 
$str
∑∑ .
)
∑∑. /
;
∑∑/ 0
sb
∏∏ 
.
∏∏ 

AppendLine
∏∏ 
(
∏∏ 
$str
∏∏ *
)
∏∏* +
;
∏∏+ ,
sb
ππ 
.
ππ 

AppendLine
ππ 
(
ππ 
$str
ππ  
)
ππ  !
;
ππ! "
sb
∫∫ 
.
∫∫ 

AppendLine
∫∫ 
(
∫∫ 
$str
∫∫  
)
∫∫  !
;
∫∫! "
}
ªª 
sb
ΩΩ 
.
ΩΩ 

AppendLine
ΩΩ 
(
ΩΩ 
$str
ΩΩ 7
)
ΩΩ7 8
;
ΩΩ8 9
sb
ææ 
.
ææ 

AppendLine
ææ 
(
ææ 
$str
ææ |
)
ææ| }
;
ææ} ~
sb
øø 
.
øø 

AppendLine
øø 
(
øø 
$str
øø &
)
øø& '
;
øø' (
sb
¿¿ 
.
¿¿ 

AppendLine
¿¿ 
(
¿¿ 
$str
¿¿ 
)
¿¿ 
;
¿¿ 
sb
¡¡ 
.
¡¡ 

AppendLine
¡¡ 
(
¡¡ 
$str
¡¡ "
)
¡¡" #
;
¡¡# $
return
¬¬ 
sb
¬¬ 
.
¬¬ 
ToString
¬¬ 
(
¬¬ 
)
¬¬  
;
¬¬  !
}
√√ 	
private
ƒƒ 
string
ƒƒ 
GetPage_Insert
ƒƒ %
(
ƒƒ% &
string
ƒƒ& ,
solutionName
ƒƒ- 9
,
ƒƒ9 :
string
ƒƒ; A
viewName
ƒƒB J
,
ƒƒJ K
	DataTable
ƒƒL U
columns
ƒƒV ]
,
ƒƒ] ^
string
ƒƒ_ e
[
ƒƒe f
]
ƒƒf g

notColumns
ƒƒh r
)
ƒƒr s
{
≈≈ 	
StringBuilder
∆∆ 
sb
∆∆ 
=
∆∆ 
new
∆∆ "
StringBuilder
∆∆# 0
(
∆∆0 1
)
∆∆1 2
;
∆∆2 3
sb
«« 
.
«« 
AppendFormat
«« 
(
«« 
$str
«« =
,
««= >
solutionName
««? K
,
««K L
viewName
««M U
)
««U V
;
««V W
sb
»» 
.
»» 

AppendLine
»» 
(
»» 
$str
»» 
)
»» 
;
»»  
sb
…… 
.
…… 

AppendLine
…… 
(
…… 
$str
…… A
)
……A B
;
……B C
sb
   
.
   

AppendLine
   
(
   
$str
   K
)
  K L
;
  L M
sb
ÀÀ 
.
ÀÀ 

AppendLine
ÀÀ 
(
ÀÀ 
$str
ÀÀ 
)
ÀÀ 
;
ÀÀ 
sb
ÃÃ 
.
ÃÃ 

AppendLine
ÃÃ 
(
ÃÃ 
$str
ÃÃ 
)
ÃÃ 
;
ÃÃ 
sb
ÕÕ 
.
ÕÕ 
AppendFormat
ÕÕ 
(
ÕÕ 
$strÕÕ É
,ÕÕÉ Ñ
viewNameÕÕÖ ç
)ÕÕç é
;ÕÕé è
sb
ŒŒ 
.
ŒŒ 

AppendLine
ŒŒ 
(
ŒŒ 
$str
ŒŒ C
)
ŒŒC D
;
ŒŒD E
sb
œœ 
.
œœ 

AppendLine
œœ 
(
œœ 
$str
œœ 7
)
œœ7 8
;
œœ8 9
sb
–– 
.
–– 

AppendLine
–– 
(
–– 
$str
–– J
)
––J K
;
––K L
sb
—— 
.
—— 

AppendLine
—— 
(
—— 
$str
—— ?
)
——? @
;
——@ A
sb
““ 
.
““ 

AppendLine
““ 
(
““ 
$str
““ 
)
““  
;
““  !
sb
”” 
.
”” 

AppendLine
”” 
(
”” 
$str
”” 
)
”” 
;
”” 
sb
‘‘ 
.
‘‘ 

AppendLine
‘‘ 
(
‘‘ 
$str
‘‘ 8
)
‘‘8 9
;
‘‘9 :
sb
’’ 
.
’’ 

AppendLine
’’ 
(
’’ 
$str
’’ =
)
’’= >
;
’’> ?
sb
÷÷ 
.
÷÷ 

AppendLine
÷÷ 
(
÷÷ 
$str
÷÷ B
)
÷÷B C
;
÷÷C D
sb
◊◊ 
.
◊◊ 

AppendLine
◊◊ 
(
◊◊ 
$str
◊◊ 
)
◊◊ 
;
◊◊ 
sb
ÿÿ 
.
ÿÿ 

AppendLine
ÿÿ 
(
ÿÿ 
$str
ÿÿ 
)
ÿÿ 
;
ÿÿ 
var
€€ 
cols1
€€ 
=
€€ 
columns
€€ 
.
€€  
Rows
€€  $
.
€€$ %
OfType
€€% +
<
€€+ ,
DataRow
€€, 3
>
€€3 4
(
€€4 5
)
€€5 6
.
€€6 7
Where
€€7 <
(
€€< =
a
€€= >
=>
€€? A
(
€€B C
(
€€C D
string
€€D J
)
€€J K
a
€€K L
[
€€L M
$str
€€M Z
]
€€Z [
)
€€[ \
==
€€] _
$str
€€` d
)
€€d e
;
€€e f
var
‹‹ 
cols2
‹‹ 
=
‹‹ 
columns
‹‹ 
.
‹‹  
Rows
‹‹  $
.
‹‹$ %
OfType
‹‹% +
<
‹‹+ ,
DataRow
‹‹, 3
>
‹‹3 4
(
‹‹4 5
)
‹‹5 6
.
‹‹6 7
Where
‹‹7 <
(
‹‹< =
a
‹‹= >
=>
‹‹? A
(
‹‹B C
(
‹‹C D
string
‹‹D J
)
‹‹J K
a
‹‹K L
[
‹‹L M
$str
‹‹M Z
]
‹‹Z [
)
‹‹[ \
!=
‹‹] _
$str
‹‹` d
)
‹‹d e
;
‹‹e f
var
›› 
cols
›› 
=
›› 
cols1
›› 
.
›› 
Union
›› "
(
››" #
cols2
››# (
)
››( )
;
››) *
foreach
ﬁﬁ 
(
ﬁﬁ 
DataRow
ﬁﬁ 
colrow
ﬁﬁ #
in
ﬁﬁ$ &
cols
ﬁﬁ' +
)
ﬁﬁ+ ,
{
ﬂﬂ 
var
‡‡ 
cname
‡‡ 
=
‡‡ 
(
‡‡ 
string
‡‡ #
)
‡‡# $
colrow
‡‡$ *
[
‡‡* +
$str
‡‡+ 8
]
‡‡8 9
;
‡‡9 :
var
·· 
dtype
·· 
=
·· 
(
·· 
string
·· #
)
··# $
colrow
··$ *
[
··* +
$str
··+ 6
]
··6 7
;
··7 8
if
„„ 
(
„„ 

notColumns
„„ 
.
„„ 
Any
„„ "
(
„„" #
a
„„# $
=>
„„% '
a
„„( )
==
„„* ,
cname
„„- 2
)
„„2 3
)
„„3 4
{
‰‰ 
continue
ÂÂ 
;
ÂÂ 
}
ÊÊ 
sb
ÈÈ 
.
ÈÈ 

AppendLine
ÈÈ 
(
ÈÈ 
$str
ÈÈ >
)
ÈÈ> ?
;
ÈÈ? @
sb
ÍÍ 
.
ÍÍ 

AppendLine
ÍÍ 
(
ÍÍ 
$str
ÍÍ @
)
ÍÍ@ A
;
ÍÍA B
sb
ÎÎ 
.
ÎÎ 
AppendFormat
ÎÎ 
(
ÎÎ  
$str
ÎÎ  q
,
ÎÎq r
cname
ÎÎs x
)
ÎÎx y
;
ÎÎy z
sb
ÏÏ 
.
ÏÏ 

AppendLine
ÏÏ 
(
ÏÏ 
$str
ÏÏ .
)
ÏÏ. /
;
ÏÏ/ 0
sb
ÌÌ 
.
ÌÌ 

AppendLine
ÌÌ 
(
ÌÌ 
$str
ÌÌ @
)
ÌÌ@ A
;
ÌÌA B
sb
ÓÓ 
.
ÓÓ 
Append
ÓÓ 
(
ÓÓ !
GetRazorInputByType
ÓÓ -
(
ÓÓ- .
cname
ÓÓ. 3
,
ÓÓ3 4
dtype
ÓÓ5 :
)
ÓÓ: ;
)
ÓÓ; <
;
ÓÓ< =
sb
ÔÔ 
.
ÔÔ 

AppendLine
ÔÔ 
(
ÔÔ 
$str
ÔÔ .
)
ÔÔ. /
;
ÔÔ/ 0
sb
 
.
 

AppendLine
 
(
 
$str
 *
)
* +
;
+ ,
sb
ÒÒ 
.
ÒÒ 

AppendLine
ÒÒ 
(
ÒÒ 
$str
ÒÒ  
)
ÒÒ  !
;
ÒÒ! "
sb
ÚÚ 
.
ÚÚ 

AppendLine
ÚÚ 
(
ÚÚ 
$str
ÚÚ  
)
ÚÚ  !
;
ÚÚ! "
}
ÛÛ 
sb
ıı 
.
ıı 

AppendLine
ıı 
(
ıı 
$str
ıı 7
)
ıı7 8
;
ıı8 9
sb
ˆˆ 
.
ˆˆ 

AppendLine
ˆˆ 
(
ˆˆ 
$str
ˆˆ |
)
ˆˆ| }
;
ˆˆ} ~
sb
˜˜ 
.
˜˜ 

AppendLine
˜˜ 
(
˜˜ 
$str
˜˜ w
)
˜˜w x
;
˜˜x y
sb
¯¯ 
.
¯¯ 

AppendLine
¯¯ 
(
¯¯ 
$str
¯¯ &
)
¯¯& '
;
¯¯' (
sb
˘˘ 
.
˘˘ 

AppendLine
˘˘ 
(
˘˘ 
$str
˘˘ 
)
˘˘ 
;
˘˘ 
sb
˙˙ 
.
˙˙ 

AppendLine
˙˙ 
(
˙˙ 
$str
˙˙ 
)
˙˙ 
;
˙˙ 
return
˚˚ 
sb
˚˚ 
.
˚˚ 
ToString
˚˚ 
(
˚˚ 
)
˚˚  
;
˚˚  !
}
¸¸ 	
private
˝˝ 
string
˝˝ 
GetPage_Update
˝˝ %
(
˝˝% &
string
˝˝& ,
solutionName
˝˝- 9
,
˝˝9 :
string
˝˝; A
viewName
˝˝B J
,
˝˝J K
	DataTable
˝˝L U
columns
˝˝V ]
,
˝˝] ^
string
˝˝_ e
[
˝˝e f
]
˝˝f g

notColumns
˝˝h r
)
˝˝r s
{
˛˛ 	
StringBuilder
ˇˇ 
sb
ˇˇ 
=
ˇˇ 
new
ˇˇ "
StringBuilder
ˇˇ# 0
(
ˇˇ0 1
)
ˇˇ1 2
;
ˇˇ2 3
sb
ÄÄ 
.
ÄÄ 
AppendFormat
ÄÄ 
(
ÄÄ 
$str
ÄÄ =
,
ÄÄ= >
solutionName
ÄÄ? K
,
ÄÄK L
viewName
ÄÄM U
)
ÄÄU V
;
ÄÄV W
sb
ÅÅ 
.
ÅÅ 

AppendLine
ÅÅ 
(
ÅÅ 
$str
ÅÅ 
)
ÅÅ 
;
ÅÅ  
sb
ÇÇ 
.
ÇÇ 

AppendLine
ÇÇ 
(
ÇÇ 
$str
ÇÇ E
)
ÇÇE F
;
ÇÇF G
sb
ÉÉ 
.
ÉÉ 

AppendLine
ÉÉ 
(
ÉÉ 
$str
ÉÉ K
)
ÉÉK L
;
ÉÉL M
sb
ÑÑ 
.
ÑÑ 

AppendLine
ÑÑ 
(
ÑÑ 
$str
ÑÑ 
)
ÑÑ 
;
ÑÑ 
sb
ÖÖ 
.
ÖÖ 

AppendLine
ÖÖ 
(
ÖÖ 
$str
ÖÖ 
)
ÖÖ 
;
ÖÖ 
sb
ÜÜ 
.
ÜÜ 
AppendFormat
ÜÜ 
(
ÜÜ 
$strÜÜ É
,ÜÜÉ Ñ
viewNameÜÜÖ ç
)ÜÜç é
;ÜÜé è
sb
áá 
.
áá 

AppendLine
áá 
(
áá 
$str
áá C
)
ááC D
;
ááD E
sb
àà 
.
àà 

AppendLine
àà 
(
àà 
$str
àà 7
)
àà7 8
;
àà8 9
sb
ââ 
.
ââ 

AppendLine
ââ 
(
ââ 
$str
ââ J
)
ââJ K
;
ââK L
sb
ää 
.
ää 

AppendLine
ää 
(
ää 
$str
ää ?
)
ää? @
;
ää@ A
sb
ãã 
.
ãã 

AppendLine
ãã 
(
ãã 
$str
ãã 
)
ãã  
;
ãã  !
sb
åå 
.
åå 

AppendLine
åå 
(
åå 
$str
åå 
)
åå 
;
åå 
sb
çç 
.
çç 

AppendLine
çç 
(
çç 
$str
çç 8
)
çç8 9
;
çç9 :
sb
éé 
.
éé 

AppendLine
éé 
(
éé 
$str
éé =
)
éé= >
;
éé> ?
sb
èè 
.
èè 

AppendLine
èè 
(
èè 
$str
èè B
)
èèB C
;
èèC D
sb
êê 
.
êê 

AppendLine
êê 
(
êê 
$str
êê 
)
êê 
;
êê 
sb
ëë 
.
ëë 

AppendLine
ëë 
(
ëë 
$str
ëë 
)
ëë 
;
ëë 
var
ìì 
cols1
ìì 
=
ìì 
columns
ìì 
.
ìì  
Rows
ìì  $
.
ìì$ %
OfType
ìì% +
<
ìì+ ,
DataRow
ìì, 3
>
ìì3 4
(
ìì4 5
)
ìì5 6
.
ìì6 7
Where
ìì7 <
(
ìì< =
a
ìì= >
=>
ìì? A
(
ììB C
(
ììC D
string
ììD J
)
ììJ K
a
ììK L
[
ììL M
$str
ììM Z
]
ììZ [
)
ìì[ \
==
ìì] _
$str
ìì` d
)
ììd e
;
ììe f
var
îî 
cols2
îî 
=
îî 
columns
îî 
.
îî  
Rows
îî  $
.
îî$ %
OfType
îî% +
<
îî+ ,
DataRow
îî, 3
>
îî3 4
(
îî4 5
)
îî5 6
.
îî6 7
Where
îî7 <
(
îî< =
a
îî= >
=>
îî? A
(
îîB C
(
îîC D
string
îîD J
)
îîJ K
a
îîK L
[
îîL M
$str
îîM Z
]
îîZ [
)
îî[ \
!=
îî] _
$str
îî` d
)
îîd e
;
îîe f
var
ïï 
cols
ïï 
=
ïï 
cols1
ïï 
.
ïï 
Union
ïï "
(
ïï" #
cols2
ïï# (
)
ïï( )
;
ïï) *
foreach
ññ 
(
ññ 
DataRow
ññ 
colrow
ññ #
in
ññ$ &
cols
ññ' +
)
ññ+ ,
{
óó 
var
òò 
cname
òò 
=
òò 
(
òò 
string
òò #
)
òò# $
colrow
òò$ *
[
òò* +
$str
òò+ 8
]
òò8 9
;
òò9 :
var
ôô 
dtype
ôô 
=
ôô 
(
ôô 
string
ôô #
)
ôô# $
colrow
ôô$ *
[
ôô* +
$str
ôô+ 6
]
ôô6 7
;
ôô7 8
if
õõ 
(
õõ 

notColumns
õõ 
.
õõ 
Any
õõ "
(
õõ" #
a
õõ# $
=>
õõ% '
a
õõ( )
==
õõ* ,
cname
õõ- 2
)
õõ2 3
)
õõ3 4
{
úú 
continue
ùù 
;
ùù 
}
ûû 
sb
°° 
.
°° 

AppendLine
°° 
(
°° 
$str
°° >
)
°°> ?
;
°°? @
sb
¢¢ 
.
¢¢ 

AppendLine
¢¢ 
(
¢¢ 
$str
¢¢ @
)
¢¢@ A
;
¢¢A B
sb
££ 
.
££ 
AppendFormat
££ 
(
££  
$str
££  q
,
££q r
cname
££s x
)
££x y
;
££y z
sb
§§ 
.
§§ 

AppendLine
§§ 
(
§§ 
$str
§§ .
)
§§. /
;
§§/ 0
sb
•• 
.
•• 

AppendLine
•• 
(
•• 
$str
•• @
)
••@ A
;
••A B
sb
¶¶ 
.
¶¶ 
Append
¶¶ 
(
¶¶ !
GetRazorInputByType
¶¶ -
(
¶¶- .
cname
¶¶. 3
,
¶¶3 4
dtype
¶¶5 :
)
¶¶: ;
)
¶¶; <
;
¶¶< =
sb
ßß 
.
ßß 

AppendLine
ßß 
(
ßß 
$str
ßß .
)
ßß. /
;
ßß/ 0
sb
®® 
.
®® 

AppendLine
®® 
(
®® 
$str
®® *
)
®®* +
;
®®+ ,
sb
©© 
.
©© 

AppendLine
©© 
(
©© 
$str
©©  
)
©©  !
;
©©! "
sb
™™ 
.
™™ 

AppendLine
™™ 
(
™™ 
$str
™™  
)
™™  !
;
™™! "
}
´´ 
sb
≠≠ 
.
≠≠ 

AppendLine
≠≠ 
(
≠≠ 
$str
≠≠ 7
)
≠≠7 8
;
≠≠8 9
sb
ÆÆ 
.
ÆÆ 

AppendLine
ÆÆ 
(
ÆÆ 
$str
ÆÆ |
)
ÆÆ| }
;
ÆÆ} ~
sb
ØØ 
.
ØØ 

AppendLine
ØØ 
(
ØØ 
$str
ØØ w
)
ØØw x
;
ØØx y
sb
∞∞ 
.
∞∞ 

AppendLine
∞∞ 
(
∞∞ 
$str
∞∞ &
)
∞∞& '
;
∞∞' (
sb
±± 
.
±± 

AppendLine
±± 
(
±± 
$str
±± 
)
±± 
;
±± 
sb
≤≤ 
.
≤≤ 

AppendLine
≤≤ 
(
≤≤ 
$str
≤≤ 
)
≤≤ 
;
≤≤ 
return
≥≥ 
sb
≥≥ 
.
≥≥ 
ToString
≥≥ 
(
≥≥ 
)
≥≥  
;
≥≥  !
}
¥¥ 	
private
∏∏ 
string
∏∏ !
GetRazorInputByType
∏∏ *
(
∏∏* +
string
∏∏+ 1
cname
∏∏2 7
,
∏∏7 8
string
∏∏9 ?
dtype
∏∏@ E
)
∏∏E F
{
ππ 	
StringBuilder
∫∫ 
sb
∫∫ 
=
∫∫ 
new
∫∫ "
StringBuilder
∫∫# 0
(
∫∫0 1
)
∫∫1 2
;
∫∫2 3
switch
ΩΩ 
(
ΩΩ 
dtype
ΩΩ 
)
ΩΩ 
{
ææ 
case
øø 
$str
øø 
:
øø 
sb
¡¡ 
.
¡¡ 

AppendLine
¡¡ !
(
¡¡! "
$str
¡¡" f
)
¡¡f g
;
¡¡g h
break
√√ 
;
√√ 
case
≈≈ 
$str
≈≈ '
:
≈≈' (
sb
«« 
.
«« 
AppendFormat
«« #
(
««# $
$str««$ ó
,««ó ò
cname««ô û
)««û ü
;««ü †
sb
»» 
.
»» 

AppendLine
»» !
(
»»! "
$str
»»" 1
)
»»1 2
;
»»2 3
sb
…… 
.
…… 

AppendLine
…… !
(
……! "
$str
……" P
)
……P Q
;
……Q R
sb
   
.
   

AppendLine
   !
(
  ! "
$str
  " R
)
  R S
;
  S T
sb
ÀÀ 
.
ÀÀ 

AppendLine
ÀÀ !
(
ÀÀ! "
$str
ÀÀ" P
)
ÀÀP Q
;
ÀÀQ R
sb
ÃÃ 
.
ÃÃ 

AppendLine
ÃÃ !
(
ÃÃ! "
$str
ÃÃ" 2
)
ÃÃ2 3
;
ÃÃ3 4
sb
ÕÕ 
.
ÕÕ 

AppendLine
ÕÕ !
(
ÕÕ! "
$str
ÕÕ" F
+
ÕÕG H
cname
ÕÕI N
+
ÕÕO P
$str
ÕÕQ ^
)
ÕÕ^ _
;
ÕÕ_ `
sb
ŒŒ 
.
ŒŒ 

AppendLine
ŒŒ !
(
ŒŒ! "
$str
ŒŒ" H
)
ŒŒH I
;
ŒŒI J
sb
œœ 
.
œœ 

AppendLine
œœ !
(
œœ! "
$str
œœ" G
)
œœG H
;
œœH I
sb
–– 
.
–– 

AppendLine
–– !
(
––! "
$str
––" @
)
––@ A
;
––A B
sb
—— 
.
—— 

AppendLine
—— !
(
——! "
$str
——" 1
)
——1 2
;
——2 3
sb
““ 
.
““ 

AppendLine
““ !
(
““! "
$str
““" @
)
““@ A
;
““A B
sb
”” 
.
”” 

AppendLine
”” !
(
””! "
$str
””" 6
)
””6 7
;
””7 8
sb
‘‘ 
.
‘‘ 

AppendLine
‘‘ !
(
‘‘! "
$str‘‘" œ
)‘‘œ –
;‘‘– —
sb
’’ 
.
’’ 

AppendLine
’’ !
(
’’! "
$str
’’" 8
)
’’8 9
;
’’9 :
sb
÷÷ 
.
÷÷ 

AppendLine
÷÷ !
(
÷÷! "
$str
÷÷" 3
)
÷÷3 4
;
÷÷4 5
sb
◊◊ 
.
◊◊ 

AppendLine
◊◊ !
(
◊◊! "
$str
◊◊" 2
)
◊◊2 3
;
◊◊3 4
break
ŸŸ 
;
ŸŸ 
case
€€ 
$str
€€ 
:
€€  
sb
ﬁﬁ 
.
ﬁﬁ 
AppendFormat
ﬁﬁ #
(
ﬁﬁ# $
$strﬁﬁ$ ñ
,ﬁﬁñ ó
cnameﬁﬁò ù
)ﬁﬁù û
;ﬁﬁû ü
sb
ﬂﬂ 
.
ﬂﬂ 

AppendLine
ﬂﬂ !
(
ﬂﬂ! "
$str
ﬂﬂ" 1
)
ﬂﬂ1 2
;
ﬂﬂ2 3
sb
‡‡ 
.
‡‡ 

AppendLine
‡‡ !
(
‡‡! "
$str
‡‡" R
)
‡‡R S
;
‡‡S T
sb
·· 
.
·· 
AppendFormat
·· #
(
··# $
$str
··$ h
,
··h i
cname
··j o
)
··o p
;
··p q
sb
‚‚ 
.
‚‚ 

AppendLine
‚‚ !
(
‚‚! "
$str
‚‚" P
)
‚‚P Q
;
‚‚Q R
sb
„„ 
.
„„ 

AppendLine
„„ !
(
„„! "
$str
„„" J
)
„„J K
;
„„K L
break
ÂÂ 
;
ÂÂ 
default
ÊÊ 
:
ÊÊ 
sb
ËË 
.
ËË 
AppendFormat
ËË #
(
ËË# $
$str
ËË$ |
,
ËË| }
cnameËË~ É
)ËËÉ Ñ
;ËËÑ Ö
sb
ÈÈ 
.
ÈÈ 

AppendLine
ÈÈ !
(
ÈÈ! "
$str
ÈÈ" 1
)
ÈÈ1 2
;
ÈÈ2 3
sb
ÍÍ 
.
ÍÍ 

AppendLine
ÍÍ !
(
ÍÍ! "
$str
ÍÍ" R
)
ÍÍR S
;
ÍÍS T
sb
ÎÎ 
.
ÎÎ 
AppendFormat
ÎÎ #
(
ÎÎ# $
$str
ÎÎ$ h
,
ÎÎh i
cname
ÎÎj o
)
ÎÎo p
;
ÎÎp q
sb
ÏÏ 
.
ÏÏ 

AppendLine
ÏÏ !
(
ÏÏ! "
$str
ÏÏ" L
)
ÏÏL M
;
ÏÏM N
sb
ÌÌ 
.
ÌÌ 

AppendLine
ÌÌ !
(
ÌÌ! "
$str
ÌÌ" J
)
ÌÌJ K
;
ÌÌK L
sb
ÓÓ 
.
ÓÓ 

AppendLine
ÓÓ !
(
ÓÓ! "
$str
ÓÓ" P
)
ÓÓP Q
;
ÓÓQ R
sb
ÔÔ 
.
ÔÔ 

AppendLine
ÔÔ !
(
ÔÔ! "
$str
ÔÔ" 2
)
ÔÔ2 3
;
ÔÔ3 4
break
ÒÒ 
;
ÒÒ 
}
ÚÚ 
return
ˆˆ 
sb
ˆˆ 
.
ˆˆ 
ToString
ˆˆ 
(
ˆˆ 
)
ˆˆ  
;
ˆˆ  !
}
˜˜ 	
private
˘˘ 
string
˘˘ !
GetAreaRegistration
˘˘ *
(
˘˘* +
string
˘˘+ 1
projectName
˘˘2 =
,
˘˘= >
string
˘˘? E
areaName
˘˘F N
)
˘˘N O
{
˙˙ 	
var
¸¸ 
str
¸¸ 
=
¸¸ 
$str
¸ì 
;
ìì 
return
ïï 
string
ïï 
.
ïï 
Format
ïï  
(
ïï  !
str
ïï! $
,
ïï$ %
projectName
ïï& 1
,
ïï1 2
areaName
ïï3 ;
)
ïï; <
;
ïï< =
}
ññ 	
private
óó 
string
óó 
GetWebConfig
óó #
(
óó# $
string
óó$ *
projectName
óó+ 6
)
óó6 7
{
òò 	
var
ôô 
str
ôô 
=
ôô 
$str
ôº 
;
ºº 
return
ΩΩ 
string
ΩΩ 
.
ΩΩ 
Format
ΩΩ  
(
ΩΩ  !
str
ΩΩ! $
,
ΩΩ$ %
projectName
ΩΩ& 1
)
ΩΩ1 2
;
ΩΩ2 3
}
ææ 	
}
¿¿ 
}¡¡ ∫V
òD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\CodeGeneration\CodeGenerators\ProjectGenerator.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
CodeGeneration +
.+ ,
CodeGenerators, :
{ 
public

 

class

 
ProjectGenerator

 !
{ 
public 

Dictionary 
< 
string  
,  !
string" (
>( )
GetBussiness* 6
(6 7
string7 =
solutionname> J
,J K
stringL R
projNameS [
)[ \
{ 	
var 
result 
= 
new 

Dictionary '
<' (
string( .
,. /
string0 6
>6 7
(7 8
)8 9
;9 :
var 
projectGuid 
= 
Guid "
." #
NewGuid# *
(* +
)+ ,
;, -
var 
projectName 
= 
string $
.$ %
Format% +
(+ ,
$str, 5
,5 6
solutionname7 C
,C D
projNameE M
)M N
;N O
var 
assembleGuid 
= 
Guid #
.# $
NewGuid$ +
(+ ,
), -
;- .
var 
assemblyCompany 
=  !
$str" $
;$ %
var 
assemblyYear 
= 
DateTime '
.' (
Now( +
.+ ,
Year, 0
.0 1
ToString1 9
(9 :
): ;
;; <
var 
str 
= 
$strU 
;UU 
varVV 
projectFileNameVV 
=VV  !
stringVV" (
.VV( )
FormatVV) /
(VV/ 0
$strVV0 =
,VV= >
projectNameVV? J
)VVJ K
;VVK L
varWW 
projectFileContentWW "
=WW# $
stringWW% +
.WW+ ,
FormatWW, 2
(WW2 3
strWW3 6
,WW6 7
projectGuidWW8 C
,WWC D
projectNameWWE P
)WWP Q
;WWQ R
resultXX 
.XX 
AddXX 
(XX 
projectFileNameXX &
,XX& '
projectFileContentXX( :
)XX: ;
;XX; <
var\\ 
str2\\ 
=\\ 
$str\ -
;- .
var
ÅÅ 
assemblyFileName
ÅÅ  
=
ÅÅ! "
string
ÅÅ# )
.
ÅÅ) *
Format
ÅÅ* 0
(
ÅÅ0 1
$str
ÅÅ1 N
,
ÅÅN O
projectName
ÅÅP [
)
ÅÅ[ \
;
ÅÅ\ ]
var
ÇÇ 
assemblyContent
ÇÇ 
=
ÇÇ  !
string
ÇÇ" (
.
ÇÇ( )
Format
ÇÇ) /
(
ÇÇ/ 0
str2
ÇÇ0 4
,
ÇÇ4 5
projectName
ÇÇ6 A
,
ÇÇA B
assemblyCompany
ÇÇC R
,
ÇÇR S
assemblyYear
ÇÇT `
,
ÇÇ` a
assembleGuid
ÇÇb n
)
ÇÇn o
;
ÇÇo p
result
ÉÉ 
.
ÉÉ 
Add
ÉÉ 
(
ÉÉ 
assemblyFileName
ÉÉ '
,
ÉÉ' (
assemblyContent
ÉÉ) 8
)
ÉÉ8 9
;
ÉÉ9 :
return
áá 
result
áá 
;
áá 
}
àà 	
public
ää 

Dictionary
ää 
<
ää 
string
ää  
,
ää  !
string
ää" (
>
ää( )"
GetWebServiceProject
ää* >
(
ää> ?
string
ää? E
solutionname
ääF R
,
ääR S
string
ääT Z
projName
ää[ c
)
ääc d
{
ãã 	
var
åå 
result
åå 
=
åå 
new
åå 

Dictionary
åå '
<
åå' (
string
åå( .
,
åå. /
string
åå0 6
>
åå6 7
(
åå7 8
)
åå8 9
;
åå9 :
var
çç 
projectGuid
çç 
=
çç 
Guid
çç "
.
çç" #
NewGuid
çç# *
(
çç* +
)
çç+ ,
;
çç, -
var
éé 
projectName
éé 
=
éé 
string
éé $
.
éé$ %
Format
éé% +
(
éé+ ,
$str
éé, 5
,
éé5 6
solutionname
éé7 C
,
ééC D
projName
ééE M
)
ééM N
;
ééN O
var
èè 
assembleGuid
èè 
=
èè 
Guid
èè #
.
èè# $
NewGuid
èè$ +
(
èè+ ,
)
èè, -
;
èè- .
var
êê 
assemblyCompany
êê 
=
êê  !
$str
êê" $
;
êê$ %
var
ëë 
assemblyYear
ëë 
=
ëë 
DateTime
ëë '
.
ëë' (
Now
ëë( +
.
ëë+ ,
Year
ëë, 0
.
ëë0 1
ToString
ëë1 9
(
ëë9 :
)
ëë: ;
;
ëë; <
var
îî 
str
îî 
=
îî 
$str
î¸ 
;
¸¸ 
var
˝˝ 
random
˝˝ 
=
˝˝ 
new
˝˝ 
Random
˝˝ #
(
˝˝# $
)
˝˝$ %
;
˝˝% &
var
˛˛ 
port
˛˛ 
=
˛˛ 
random
˛˛ 
.
˛˛ 
Next
˛˛ "
(
˛˛" #
$num
˛˛# (
,
˛˛( )
$num
˛˛* /
)
˛˛/ 0
;
˛˛0 1
var
ˇˇ 
projectFileName
ˇˇ 
=
ˇˇ  !
string
ˇˇ" (
.
ˇˇ( )
Format
ˇˇ) /
(
ˇˇ/ 0
$str
ˇˇ0 =
,
ˇˇ= >
projectName
ˇˇ? J
)
ˇˇJ K
;
ˇˇK L
var
ÄÄ  
projectFileContent
ÄÄ "
=
ÄÄ# $
string
ÄÄ% +
.
ÄÄ+ ,
Format
ÄÄ, 2
(
ÄÄ2 3
str
ÄÄ3 6
,
ÄÄ6 7
projectGuid
ÄÄ8 C
,
ÄÄC D
projectName
ÄÄE P
,
ÄÄP Q
port
ÄÄR V
)
ÄÄV W
;
ÄÄW X
result
ÅÅ 
.
ÅÅ 
Add
ÅÅ 
(
ÅÅ 
projectFileName
ÅÅ &
,
ÅÅ& ' 
projectFileContent
ÅÅ( :
)
ÅÅ: ;
;
ÅÅ; <
var
ÖÖ 
str2
ÖÖ 
=
ÖÖ 
$str
Ö® -
;
®®- .
var
™™ 
assemblyFileName
™™  
=
™™! "
string
™™# )
.
™™) *
Format
™™* 0
(
™™0 1
$str
™™1 N
,
™™N O
projectName
™™P [
)
™™[ \
;
™™\ ]
var
´´ 
assemblyContent
´´ 
=
´´  !
string
´´" (
.
´´( )
Format
´´) /
(
´´/ 0
str2
´´0 4
,
´´4 5
projectName
´´6 A
,
´´A B
assemblyCompany
´´C R
,
´´R S
assemblyYear
´´T `
,
´´` a
assembleGuid
´´b n
)
´´n o
;
´´o p
result
¨¨ 
.
¨¨ 
Add
¨¨ 
(
¨¨ 
assemblyFileName
¨¨ '
,
¨¨' (
assemblyContent
¨¨) 8
)
¨¨8 9
;
¨¨9 :
var
±± 
str3
±± 
=
±± 
$str
±Â 
;
ÂÂ 
var
ÁÁ 
webConfigContent
ÁÁ  
=
ÁÁ! "
str3
ÁÁ# '
;
ÁÁ' (
result
ËË 
.
ËË 
Add
ËË 
(
ËË 
$str
ËË #
,
ËË# $
webConfigContent
ËË% 5
)
ËË5 6
;
ËË6 7
var
ÏÏ 
webDebugConfig
ÏÏ 
=
ÏÏ  
$str
Ïâ! 
;
ââ 
result
ãã 
.
ãã 
Add
ãã 
(
ãã 
$str
ãã )
,
ãã) *
webDebugConfig
ãã+ 9
)
ãã9 :
;
ãã: ;
var
èè 
webReleaseConfig
èè  
=
èè! "
$str
è≠# 
;
≠≠ 
result
∞∞ 
.
∞∞ 
Add
∞∞ 
(
∞∞ 
$str
∞∞ +
,
∞∞+ ,
webReleaseConfig
∞∞- =
)
∞∞= >
;
∞∞> ?
return
ΩΩ 
result
ΩΩ 
;
ΩΩ 
}
ææ 	
public
¡¡ 

Dictionary
¡¡ 
<
¡¡ 
string
¡¡  
,
¡¡  !
string
¡¡" (
>
¡¡( )
GetTemplates
¡¡* 6
(
¡¡6 7
)
¡¡7 8
{
¬¬ 	
var
√√ 
result
√√ 
=
√√ 
new
√√ 

Dictionary
√√ '
<
√√' (
string
√√( .
,
√√. /
string
√√0 6
>
√√6 7
(
√√7 8
)
√√8 9
;
√√9 :
var
∆∆ 
connectionString
∆∆  
=
∆∆! "
$str
∆Î# 
;
ÎÎ 
var
ÓÓ 
basicTables
ÓÓ 
=
ÓÓ 
$str
Ó™ 
;
™™ 
var
≠≠ 
databaseObjects
≠≠ 
=
≠≠  !
$str
≠Ê" 
;
ÊÊ 
var
ÈÈ 
databaseFunctions
ÈÈ !
=
ÈÈ" #
$str
È¨$ 
;
¨¨ 
var
ØØ 
securityObjects
ØØ 
=
ØØ  !
$str
Ø€" 
;
€€ 
var
ﬁﬁ 
handlers
ﬁﬁ 
=
ﬁﬁ 
$str
ﬁù 
;
ùù 
var
†† 
mvcFiles
†† 
=
†† 
$str
†Ö 
;
ÖÖ 
var
ÀÀ 
generalManager
ÀÀ 
=
ÀÀ  
$str
ÀŒ! 
;
ŒŒ 
result
““ 
.
““ 
Add
““ 
(
““ 
$str
““ '
,
““' (
mvcFiles
““) 1
)
““1 2
;
““2 3
result
”” 
.
”” 
Add
”” 
(
”” 
$str
”” ,
,
””, -
handlers
””. 6
)
””6 7
;
””7 8
result
‘‘ 
.
‘‘ 
Add
‘‘ 
(
‘‘ 
$str
‘‘ 3
,
‘‘3 4
securityObjects
‘‘5 D
)
‘‘D E
;
‘‘E F
result
’’ 
.
’’ 
Add
’’ 
(
’’ 
$str
’’ 5
,
’’5 6
databaseFunctions
’’7 H
)
’’H I
;
’’I J
result
÷÷ 
.
÷÷ 
Add
÷÷ 
(
÷÷ 
$str
÷÷ 3
,
÷÷3 4
databaseObjects
÷÷5 D
)
÷÷D E
;
÷÷E F
result
◊◊ 
.
◊◊ 
Add
◊◊ 
(
◊◊ 
$str
◊◊ /
,
◊◊/ 0
basicTables
◊◊1 <
)
◊◊< =
;
◊◊= >
result
ÿÿ 
.
ÿÿ 
Add
ÿÿ 
(
ÿÿ 
$str
ÿÿ .
,
ÿÿ. /
connectionString
ÿÿ0 @
)
ÿÿ@ A
;
ÿÿA B
result
ŸŸ 
.
ŸŸ 
Add
ŸŸ 
(
ŸŸ 
$str
ŸŸ +
,
ŸŸ+ ,
generalManager
ŸŸ- ;
)
ŸŸ; <
;
ŸŸ< =
return
€€ 
result
€€ 
;
€€ 
}
‹‹ 	
}
›› 
}ﬁﬁ è+
ûD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\CodeGeneration\CodeGenerators\SecurityClassGenerator.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
CodeGeneration +
.+ ,
CodeGenerators, :
{ 
public		 

class		 "
SecurityClassGenerator		 '
{

 
public 

Dictionary 
< 
string  
,  !
string" (
>( )
GenerateMultiFile* ;
(; <
string< B
solutionNameC O
,O P
stringQ W
databaseNameX d
)d e
{ 	
var 
result 
= 
new 

Dictionary '
<' (
string( .
,. /
string0 6
>6 7
(7 8
)8 9
;9 :
result 
. 
Add 
( 
$str #
,# $+
CreateSecurityDatabaseFunctions% D
(D E
solutionNameE Q
,Q R
databaseNameS _
)_ `
)` a
;a b
result 
. 
Add 
( 
$str (
,( )!
CreateSecurityService* ?
(? @
solutionName@ L
,L M
databaseNameN Z
)Z [
)[ \
;\ ]
result 
. 
Add 
( 
$str (
,( )!
CreateSecurityHandler* ?
(? @
solutionName@ L
,L M
databaseNameN Z
)Z [
)[ \
;\ ]
result 
. 
Add 
( 
$str  
,  !
CreateBDShell" /
(/ 0
solutionName0 <
,< =
databaseName> J
)J K
)K L
;L M
result 
. 
Add 
( 
$str %
,% &
CreatePageSecurity' 9
(9 :
solutionName: F
,F G
databaseNameH T
)T U
)U V
;V W
result 
. 
Add 
( 
$str $
,$ %
CreateLoginStatus& 7
(7 8
solutionName8 D
,D E
databaseNameF R
)R S
)S T
;T U
return 
result 
; 
} 	
public 
string +
CreateSecurityDatabaseFunctions 5
(5 6
string6 <
solutionName= I
,I J
stringK Q
databaseNameR ^
)^ _
{ 	
return 
string 
. 
Format  
(  !
$strB! 
,BB 
solutionNameBB 
,BB 
databaseNameBB 
)BB  
;BB  !
}DD 	
publicFF 
stringFF !
CreateSecurityServiceFF +
(FF+ ,
stringFF, 2
solutionNameFF3 ?
,FF? @
stringFFA G
databaseNameFFH T
)FFT U
{GG 	
returnHH 
stringHH 
.HH 
FormatHH  
(HH  !
$str	Hÿ! 
,
ÿÿ 
solutionName
ÿÿ 
,
ÿÿ 
databaseName
ÿÿ 
)
ÿÿ  
;
ÿÿ  !
}
ŸŸ 	
public
€€ 
string
€€ #
CreateSecurityHandler
€€ +
(
€€+ ,
string
€€, 2
solutionName
€€3 ?
,
€€? @
string
€€A G
databaseName
€€H T
)
€€T U
{
‹‹ 	
return
›› 
string
›› 
.
›› 
Format
››  
(
››  !
$str
›Å! 
,
ÅÅ 
solutionName
ÅÅ 
,
ÅÅ 
databaseName
ÅÅ 
)
ÅÅ 
;
ÅÅ 
}
ÇÇ 	
public
ÑÑ 
string
ÑÑ 
CreateBDShell
ÑÑ #
(
ÑÑ# $
string
ÑÑ$ *
solutionName
ÑÑ+ 7
,
ÑÑ7 8
string
ÑÑ9 ?
databaseName
ÑÑ@ L
)
ÑÑL M
{
ÖÖ 	
return
ÜÜ 
string
ÜÜ 
.
ÜÜ 
Format
ÜÜ  
(
ÜÜ  !
$str
Üî! 
,
îî 
solutionName
îî 
,
îî 
databaseName
îî 
)
îî 
;
îî 
}
ïï 	
public
ññ 
string
ññ  
CreatePageSecurity
ññ (
(
ññ( )
string
ññ) /
solutionName
ññ0 <
,
ññ< =
string
ññ> D
databaseName
ññE Q
)
ññQ R
{
óó 	
return
òò 
string
òò 
.
òò 
Format
òò  
(
òò  !
$str
òÆ! 
,
ÆÆ 
solutionName
ÆÆ 
)
ÆÆ 
;
ÆÆ 
}
ØØ 	
public
∞∞ 
string
∞∞ 
CreateLoginStatus
∞∞ '
(
∞∞' (
string
∞∞( .
solutionName
∞∞/ ;
,
∞∞; <
string
∞∞= C
databaseName
∞∞D P
)
∞∞P Q
{
±± 	
return
≤≤ 
string
≤≤ 
.
≤≤ 
Format
≤≤  
(
≤≤  !
$str
≤≈! 
,
≈≈ 
solutionName
≈≈ 
)
≈≈ 
;
≈≈ 
}
∆∆ 	
}
»» 
}…… §†
úD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\CodeGeneration\CodeGenerators\SQLDatabaseFunctions.cs
	namespace		 	
Infoline		
 
.		 
	Framework		 
.		 
CodeGeneration		 +
.		+ ,
CodeGenerators		, :
{

 
public 

class  
SQLDatabaseFunctions %
{ 
public 

Dictionary 
< 
string  
,  !
string" (
>( )
GenerateMultiFile* ;
(; <
string< B
strConnC J
)J K
{ 	
var 
result 
= 
new 

Dictionary '
<' (
string( .
,. /
string0 6
>6 7
(7 8
)8 9
;9 :
using 
( 
var 
con 
= 
new  
SqlConnection! .
(. /
strConn/ 6
)6 7
)7 8
{ 
con 
. 
Open 
( 
) 
; 
string 
[ 
] 
objArrRestrict '
;' (
	DataTable 
	schemaTbl #
;# $
	schemaTbl 
= 
con 
.  
	GetSchema  )
() *
$str* 2
,2 3
null4 8
)8 9
;9 :
var 
	classname 
= 
con  #
.# $
Database$ ,
;, -
foreach 
( 
DataRow  
row! $
in% '
	schemaTbl( 1
.1 2
Rows2 6
)6 7
{ 
StringBuilder !
sb" $
=% &
new' *
StringBuilder+ 8
(8 9
)9 :
;: ;
bool 
hasname  
=! "
false# (
;( )
var 
	tablename !
=" #
($ %
string% +
)+ ,
row, /
[/ 0
$str0 <
]< =
;= >
var 
	tabletype !
=" #
($ %
string% +
)+ ,
row, /
[/ 0
$str0 <
]< =
;= >
if 
( 
	tablename !
.! "
IndexOf" )
() *
$str* 1
)1 2
>3 4
-5 6
$num6 7
)7 8
continue9 A
;A B
objArrRestrict   "
=  # $
new  % (
string  ) /
[  / 0
]  0 1
{  2 3
null  4 8
,  8 9
null  : >
,  > ?
	tablename  @ I
,  I J
null  K O
}  P Q
;  Q R
var!! 
tbl!! 
=!! 
con!! !
.!!! "
	GetSchema!!" +
(!!+ ,
$str!!, 5
,!!5 6
objArrRestrict!!7 E
)!!E F
;!!F G
foreach"" 
("" 
DataRow"" $
colrow""% +
in"", .
tbl""/ 2
.""2 3
Rows""3 7
)""7 8
hasname## 
|=##  "
(### $
string##$ *
)##* +
colrow##+ 1
[##1 2
$str##2 ?
]##? @
==##A C
$str##D I
;##I J
sb%% 
.%% 
AppendFormat%% #
(%%# $
$str%%$ C
,%%C D
	classname%%E N
)%%N O
;%%O P
sb&& 
.&& 

AppendLine&& !
(&&! "
)&&" #
;&&# $
sb'' 
.'' 

AppendLine'' !
(''! "
$str''" )
)'') *
;''* +
sb)) 
.)) 

AppendLine)) !
())! "
$str))" 9
)))9 :
;)): ;
sb** 
.** 
AppendFormat** #
(**# $
$str**$ b
,**b c
	tablename**d m
)**m n
;**n o
sb**p r
.**r s

AppendLine**s }
(**} ~
)**~ 
;	** Ä
sb++ 
.++ 

AppendLine++ !
(++! "
$str++" :
)++: ;
;++; <
sb,, 
.,, 

AppendLine,, !
(,,! "
$str	,," û
)
,,û ü
;
,,ü †
sb-- 
.-- 
AppendFormat-- #
(--# $
$str--$ e
,--e f
	tablename--g p
)--p q
;--q r
sb--s u
.--u v

AppendLine	--v Ä
(
--Ä Å
)
--Å Ç
;
--Ç É
sb.. 
... 
AppendFormat.. #
(..# $
$str..$ \
,..\ ]
	tablename..^ g
)..g h
;..h i
sb..j l
...l m

AppendLine..m w
(..w x
)..x y
;..y z
sb// 
.// 

AppendLine// !
(//! "
$str//" -
)//- .
;//. /
sb00 
.00 

AppendLine00 !
(00! "
$str00" L
)00L M
;00M N
sb11 
.11 

AppendLine11 !
(11! "
$str11" 1
)111 2
;112 3
sb22 
.22 
AppendFormat22 #
(22# $
$str22$ }
,22} ~
	tablename	22 à
)
22à â
;
22â ä
sb
22ã ç
.
22ç é

AppendLine
22é ò
(
22ò ô
)
22ô ö
;
22ö õ
sb33 
.33 

AppendLine33 !
(33! "
$str33" 1
)331 2
;332 3
sb44 
.44 

AppendLine44 !
(44! "
$str44" -
)44- .
;44. /
sb55 
.55 

AppendLine55 !
(55! "
)55" #
;55# $
sb77 
.77 

AppendLine77 !
(77! "
$str77" 9
)779 :
;77: ;
sb88 
.88 
AppendFormat88 #
(88# $
$str	88$ ¨
,
88¨ ≠
	tablename
88Æ ∑
)
88∑ ∏
;
88∏ π
sb
88∫ º
.
88º Ω

AppendLine
88Ω «
(
88« »
)
88» …
;
88…  
sb99 
.99 

AppendLine99 !
(99! "
$str99" :
)99: ;
;99; <
sb:: 
.:: 

AppendLine:: !
(::! "
$str	::" ç
)
::ç é
;
::é è
sb;; 
.;; 

AppendLine;; !
(;;! "
$str	;;" û
)
;;û ü
;
;;ü †
sb<< 
.<< 
AppendFormat<< #
(<<# $
$str<<$ t
,<<t u
	tablename<<v 
)	<< Ä
;
<<Ä Å
sb
<<Ç Ñ
.
<<Ñ Ö

AppendLine
<<Ö è
(
<<è ê
)
<<ê ë
;
<<ë í
sb== 
.== 
AppendFormat== #
(==# $
$str==$ y
,==y z
	tablename	=={ Ñ
)
==Ñ Ö
;
==Ö Ü
sb>> 
.>> 

AppendLine>> !
(>>! "
$str>>" -
)>>- .
;>>. /
sb?? 
.?? 

AppendLine?? !
(??! "
$str??" L
)??L M
;??M N
sb@@ 
.@@ 

AppendLine@@ !
(@@! "
$str@@" 5
)@@5 6
;@@6 7
sbAA 
.AA 
AppendFormatAA #
(AA# $
$strAA$ {
,AA{ |
	tablename	AA} Ü
)
AAÜ á
;
AAá à
sbBB 
.BB 

AppendLineBB !
(BB! "
$strBB" 1
)BB1 2
;BB2 3
sbCC 
.CC 

AppendLineCC !
(CC! "
$strCC" -
)CC- .
;CC. /
sbEE 
.EE 

AppendLineEE !
(EE! "
$strEE" 9
)EE9 :
;EE: ;
sbFF 
.FF 
AppendFormatFF #
(FF# $
$str	FF$ ï
,
FFï ñ
	tablename
FFó †
)
FF† °
;
FF° ¢
sb
FF£ •
.
FF• ¶

AppendLine
FF¶ ∞
(
FF∞ ±
)
FF± ≤
;
FF≤ ≥
sbGG 
.GG 

AppendLineGG !
(GG! "
$strGG" :
)GG: ;
;GG; <
sbHH 
.HH 

AppendLineHH !
(HH! "
$str	HH" ï
)
HHï ñ
;
HHñ ó
sbII 
.II 
AppendFormatII #
(II# $
$strII$ |
,II| }
	tablename	II~ á
)
IIá à
;
IIà â
sb
IIä å
.
IIå ç

AppendLine
IIç ó
(
IIó ò
)
IIò ô
;
IIô ö
sbJJ 
.JJ 
AppendFormatJJ #
(JJ# $
$strJJ$ b
,JJb c
	tablenameJJd m
)JJm n
;JJn o
sbKK 
.KK 

AppendLineKK !
(KK! "
$strKK" -
)KK- .
;KK. /
sbLL 
.LL 

AppendLineLL !
(LL! "
$strLL" H
)LLH I
;LLI J
sbMM 
.MM 

AppendLineMM !
(MM! "
$strMM" 1
)MM1 2
;MM2 3
sbNN 
.NN 
AppendFormatNN #
(NN# $
$strNN$ v
,NNv w
	tablename	NNx Å
)
NNÅ Ç
;
NNÇ É
sbOO 
.OO 

AppendLineOO !
(OO! "
$strOO" 1
)OO1 2
;OO2 3
sbPP 
.PP 

AppendLinePP !
(PP! "
$strPP" -
)PP- .
;PP. /
varRR 
hasIdColumnRR #
=RR$ %
tblRR& )
.RR) *
RowsRR* .
.RR. /
CastRR/ 3
<RR3 4
DataRowRR4 ;
>RR; <
(RR< =
)RR= >
.RR> ?
WhereRR? D
(RRD E
aRRE F
=>RRG I
aRRJ K
.RRK L
	ItemArrayRRL U
.RRU V
ContainsRRV ^
(RR^ _
$strRR_ c
)RRc d
)RRd e
.RRe f
CountRRf k
(RRk l
)RRl m
>RRn o
$numRRp q
;RRq r
ifSS 
(SS 
	tabletypeSS !
==SS" $
$strSS% 1
||SS2 4
(SS5 6
	tabletypeSS6 ?
==SS@ B
$strSSC I
&&SSJ L
hasIdColumnSSM X
)SSX Y
)SSY Z
{TT 
sbUU 
.UU 

AppendLineUU %
(UU% &
$strUU& =
)UU= >
;UU> ?
sbVV 
.VV 
AppendFormatVV '
(VV' (
$str	VV( Å
,
VVÅ Ç
	tablename
VVÉ å
)
VVå ç
;
VVç é
sb
VVè ë
.
VVë í

AppendLine
VVí ú
(
VVú ù
)
VVù û
;
VVû ü
sbWW 
.WW 

AppendLineWW %
(WW% &
$strWW& >
)WW> ?
;WW? @
sbXX 
.XX 
AppendFormatXX '
(XX' (
$strXX( i
,XXi j
	tablenameXXk t
)XXt u
;XXu v
sbXXw y
.XXy z

AppendLine	XXz Ñ
(
XXÑ Ö
)
XXÖ Ü
;
XXÜ á
sbYY 
.YY 

AppendLineYY %
(YY% &
$str	YY& ¢
)
YY¢ £
;
YY£ §
sbZZ 
.ZZ 
AppendFormatZZ '
(ZZ' (
$strZZ( r
,ZZr s
	tablenameZZt }
)ZZ} ~
;ZZ~ 
sb
ZZÄ Ç
.
ZZÇ É

AppendLine
ZZÉ ç
(
ZZç é
)
ZZé è
;
ZZè ê
sb[[ 
.[[ 
AppendFormat[[ '
([[' (
$str[[( k
,[[k l
	tablename[[m v
)[[v w
;[[w x
sb[[y {
.[[{ |

AppendLine	[[| Ü
(
[[Ü á
)
[[á à
;
[[à â
sb\\ 
.\\ 

AppendLine\\ %
(\\% &
$str\\& 1
)\\1 2
;\\2 3
sb]] 
.]] 

AppendLine]] %
(]]% &
$str]]& P
)]]P Q
;]]Q R
sb]]S U
.]]U V

AppendLine]]V `
(]]` a
)]]a b
;]]b c
sb^^ 
.^^ 

AppendLine^^ %
(^^% &
$str^^& 5
)^^5 6
;^^6 7
sb__ 
.__ 
AppendFormat__ '
(__' (
$str	__( É
,
__É Ñ
	tablename
__Ö é
)
__é è
;
__è ê
sb
__ë ì
.
__ì î

AppendLine
__î û
(
__û ü
)
__ü †
;
__† °
sb`` 
.`` 

AppendLine`` %
(``% &
$str``& 5
)``5 6
;``6 7
sbaa 
.aa 

AppendLineaa %
(aa% &
$straa& 1
)aa1 2
;aa2 3
sbbb 
.bb 

AppendLinebb %
(bb% &
)bb& '
;bb' (
}cc 
ifee 
(ee 
	tabletypeee !
==ee" $
$stree% 1
)ee1 2
{ff 
sbhh 
.hh 

AppendLinehh %
(hh% &
$strhh& =
)hh= >
;hh> ?
sbii 
.ii 
AppendFormatii '
(ii' (
$strii( \
,ii\ ]
	tablenameii^ g
)iig h
;iih i
sbiij l
.iil m

AppendLineiim w
(iiw x
)iix y
;iiy z
sbjj 
.jj 

AppendLinejj %
(jj% &
$strjj& >
)jj> ?
;jj? @
sbkk 
.kk 
AppendFormatkk '
(kk' (
$str	kk( Ü
,
kkÜ á
	tablename
kkà ë
)
kkë í
;
kkí ì
sb
kkî ñ
.
kkñ ó

AppendLine
kkó °
(
kk° ¢
)
kk¢ £
;
kk£ §
sbll 
.ll 

AppendLinell %
(ll% &
$str	ll& ¢
)
ll¢ £
;
ll£ §
sbmm 
.mm 

AppendLinemm %
(mm% &
$str	mm& •
)
mm• ¶
;
mm¶ ß
sbnn 
.nn 
AppendFormatnn '
(nn' (
$strnn( t
,nnt u
	tablenamennv 
)	nn Ä
;
nnÄ Å
sb
nnÇ Ñ
.
nnÑ Ö

AppendLine
nnÖ è
(
nnè ê
)
nnê ë
;
nnë í
sboo 
.oo 

AppendLineoo %
(oo% &
$stroo& 1
)oo1 2
;oo2 3
sbpp 
.pp 

AppendLinepp %
(pp% &
$strpp& P
)ppP Q
;ppQ R
sbqq 
.qq 

AppendLineqq %
(qq% &
$strqq& 5
)qq5 6
;qq6 7
sbrr 
.rr 
AppendFormatrr '
(rr' (
$strrr( ]
,rr] ^
	tablenamerr_ h
)rrh i
;rri j
sbrrk m
.rrm n

AppendLinerrn x
(rrx y
)rry z
;rrz {
sbss 
.ss 

AppendLiness %
(ss% &
$strss& 5
)ss5 6
;ss6 7
sbtt 
.tt 

AppendLinett %
(tt% &
$strtt& 1
)tt1 2
;tt2 3
sbuu 
.uu 

AppendLineuu %
(uu% &
)uu& '
;uu' (
sbww 
.ww 

AppendLineww %
(ww% &
$strww& =
)ww= >
;ww> ?
sbxx 
.xx 
AppendFormatxx '
(xx' (
$strxx( a
,xxa b
	tablenamexxc l
)xxl m
;xxm n
sbxxo q
.xxq r

AppendLinexxr |
(xx| }
)xx} ~
;xx~ 
sbyy 
.yy 

AppendLineyy %
(yy% &
$stryy& >
)yy> ?
;yy? @
sbzz 
.zz 
AppendFormatzz '
(zz' (
$str	zz( á
,
zzá à
	tablename
zzâ í
)
zzí ì
;
zzì î
sb
zzï ó
.
zzó ò

AppendLine
zzò ¢
(
zz¢ £
)
zz£ §
;
zz§ •
sb{{ 
.{{ 

AppendLine{{ %
({{% &
$str	{{& ó
)
{{ó ò
;
{{ò ô
sb|| 
.|| 

AppendLine|| %
(||% &
$str	||& ß
)
||ß ®
;
||® ©
sb}} 
.}} 
AppendFormat}} '
(}}' (
$str	}}( ä
,
}}ä ã
	tablename
}}å ï
)
}}ï ñ
;
}}ñ ó
sb
}}ò ö
.
}}ö õ

AppendLine
}}õ •
(
}}• ¶
)
}}¶ ß
;
}}ß ®
sb~~ 
.~~ 

AppendLine~~ %
(~~% &
$str~~& 1
)~~1 2
;~~2 3
sb 
. 

AppendLine %
(% &
$str& P
)P Q
;Q R
sb
ÄÄ 
.
ÄÄ 

AppendLine
ÄÄ %
(
ÄÄ% &
$str
ÄÄ& 5
)
ÄÄ5 6
;
ÄÄ6 7
sb
ÅÅ 
.
ÅÅ 
AppendFormat
ÅÅ '
(
ÅÅ' (
$str
ÅÅ( f
,
ÅÅf g
	tablename
ÅÅh q
)
ÅÅq r
;
ÅÅr s
sb
ÅÅt v
.
ÅÅv w

AppendLineÅÅw Å
(ÅÅÅ Ç
)ÅÅÇ É
;ÅÅÉ Ñ
sb
ÇÇ 
.
ÇÇ 

AppendLine
ÇÇ %
(
ÇÇ% &
$str
ÇÇ& 5
)
ÇÇ5 6
;
ÇÇ6 7
sb
ÉÉ 
.
ÉÉ 

AppendLine
ÉÉ %
(
ÉÉ% &
$str
ÉÉ& 1
)
ÉÉ1 2
;
ÉÉ2 3
sb
ÑÑ 
.
ÑÑ 

AppendLine
ÑÑ %
(
ÑÑ% &
)
ÑÑ& '
;
ÑÑ' (
sb
áá 
.
áá 

AppendLine
áá %
(
áá% &
$str
áá& =
)
áá= >
;
áá> ?
sb
àà 
.
àà 
AppendFormat
àà '
(
àà' (
$str
àà( 
,àà Ä
	tablenameààÅ ä
)ààä ã
;ààã å
sbààç è
.ààè ê

AppendLineààê ö
(ààö õ
)ààõ ú
;ààú ù
sb
ââ 
.
ââ 

AppendLine
ââ %
(
ââ% &
$str
ââ& >
)
ââ> ?
;
ââ? @
sb
ää 
.
ää 
AppendFormat
ää '
(
ää' (
$str
ää( `
,
ää` a
	tablename
ääb k
)
ääk l
;
ääl m
sb
ään p
.
ääp q

AppendLine
ääq {
(
ää{ |
)
ää| }
;
ää} ~
sb
ãã 
.
ãã 

AppendLine
ãã %
(
ãã% &
$strãã& ¢
)ãã¢ £
;ãã£ §
sb
åå 
.
åå 

AppendLine
åå %
(
åå% &
$stråå& ¶
)åå¶ ß
;ååß ®
sb
çç 
.
çç 
AppendFormat
çç '
(
çç' (
$str
çç( s
,
ççs t
	tablename
ççu ~
)
çç~ 
;çç Ä
sbççÅ É
.ççÉ Ñ

AppendLineççÑ é
(ççé è
)ççè ê
;ççê ë
sb
éé 
.
éé 

AppendLine
éé %
(
éé% &
$str
éé& 1
)
éé1 2
;
éé2 3
sb
èè 
.
èè 

AppendLine
èè %
(
èè% &
$str
èè& P
)
èèP Q
;
èèQ R
sb
êê 
.
êê 

AppendLine
êê %
(
êê% &
$str
êê& 5
)
êê5 6
;
êê6 7
sb
ëë 
.
ëë 
AppendFormat
ëë '
(
ëë' (
$str
ëë( [
,
ëë[ \
	tablename
ëë] f
)
ëëf g
;
ëëg h
sb
ëëi k
.
ëëk l

AppendLine
ëël v
(
ëëv w
)
ëëw x
;
ëëx y
sb
íí 
.
íí 

AppendLine
íí %
(
íí% &
$str
íí& 5
)
íí5 6
;
íí6 7
sb
ìì 
.
ìì 

AppendLine
ìì %
(
ìì% &
$str
ìì& 1
)
ìì1 2
;
ìì2 3
sb
îî 
.
îî 

AppendLine
îî %
(
îî% &
)
îî& '
;
îî' (
sb
ññ 
.
ññ 

AppendLine
ññ %
(
ññ% &
$str
ññ& =
)
ññ= >
;
ññ> ?
sb
óó 
.
óó 
AppendFormat
óó '
(
óó' (
$str
óó( {
,
óó{ |
	tablenameóó} Ü
)óóÜ á
;óóá à
sbóóâ ã
.óóã å

AppendLineóóå ñ
(óóñ ó
)óóó ò
;óóò ô
sb
òò 
.
òò 

AppendLine
òò %
(
òò% &
$str
òò& >
)
òò> ?
;
òò? @
sb
ôô 
.
ôô 
AppendFormat
ôô '
(
ôô' (
$strôô( ¬
,ôô¬ √
	tablenameôôƒ Õ
)ôôÕ Œ
;ôôŒ œ
sbôô– “
.ôô“ ”

AppendLineôô” ›
(ôô› ﬁ
)ôôﬁ ﬂ
;ôôﬂ ‡
sb
öö 
.
öö 

AppendLine
öö %
(
öö% &
$ströö& ¢
)öö¢ £
;öö£ §
sb
õõ 
.
õõ 

AppendLine
õõ %
(
õõ% &
$strõõ& ¶
)õõ¶ ß
;õõß ®
sb
úú 
.
úú 
AppendFormat
úú '
(
úú' (
$str
úú( t
,
úút u
	tablename
úúv 
)úú Ä
;úúÄ Å
sbúúÇ Ñ
.úúÑ Ö

AppendLineúúÖ è
(úúè ê
)úúê ë
;úúë í
sb
ùù 
.
ùù 

AppendLine
ùù %
(
ùù% &
$str
ùù& 1
)
ùù1 2
;
ùù2 3
sb
ûû 
.
ûû 

AppendLine
ûû %
(
ûû% &
$str
ûû& P
)
ûûP Q
;
ûûQ R
sb
üü 
.
üü 

AppendLine
üü %
(
üü% &
$str
üü& 5
)
üü5 6
;
üü6 7
sb
†† 
.
†† 
AppendFormat
†† '
(
††' (
$str
††( ]
,
††] ^
	tablename
††_ h
)
††h i
;
††i j
sb
††k m
.
††m n

AppendLine
††n x
(
††x y
)
††y z
;
††z {
sb
°° 
.
°° 

AppendLine
°° %
(
°°% &
$str
°°& 5
)
°°5 6
;
°°6 7
sb
¢¢ 
.
¢¢ 

AppendLine
¢¢ %
(
¢¢% &
$str
¢¢& 1
)
¢¢1 2
;
¢¢2 3
sb
££ 
.
££ 

AppendLine
££ %
(
££% &
)
££& '
;
££' (
sb
•• 
.
•• 

AppendLine
•• %
(
••% &
$str
••& =
)
••= >
;
••> ?
sb
¶¶ 
.
¶¶ 
AppendFormat
¶¶ '
(
¶¶' (
$str
¶¶( k
,
¶¶k l
	tablename
¶¶m v
)
¶¶v w
;
¶¶w x
sb
¶¶y {
.
¶¶{ |

AppendLine¶¶| Ü
(¶¶Ü á
)¶¶á à
;¶¶à â
sb
ßß 
.
ßß 

AppendLine
ßß %
(
ßß% &
$str
ßß& >
)
ßß> ?
;
ßß? @
sb
®® 
.
®® 
AppendFormat
®® '
(
®®' (
$str®®( ö
,®®ö õ
	tablename®®ú •
)®®• ¶
;®®¶ ß
sb®®® ™
.®®™ ´

AppendLine®®´ µ
(®®µ ∂
)®®∂ ∑
;®®∑ ∏
sb
©© 
.
©© 

AppendLine
©© %
(
©©% &
$str©©& ¢
)©©¢ £
;©©£ §
sb
™™ 
.
™™ 

AppendLine
™™ %
(
™™% &
$str™™& ™
)™™™ ´
;™™´ ¨
sb
´´ 
.
´´ 
AppendFormat
´´ '
(
´´' (
$str´´( Ö
,´´Ö Ü
	tablename´´á ê
)´´ê ë
;´´ë í
sb´´ì ï
.´´ï ñ

AppendLine´´ñ †
(´´† °
)´´° ¢
;´´¢ £
sb
¨¨ 
.
¨¨ 

AppendLine
¨¨ %
(
¨¨% &
$str
¨¨& 1
)
¨¨1 2
;
¨¨2 3
sb
≠≠ 
.
≠≠ 

AppendLine
≠≠ %
(
≠≠% &
$str
≠≠& P
)
≠≠P Q
;
≠≠Q R
sb
ÆÆ 
.
ÆÆ 

AppendLine
ÆÆ %
(
ÆÆ% &
$str
ÆÆ& 5
)
ÆÆ5 6
;
ÆÆ6 7
sb
ØØ 
.
ØØ 
AppendFormat
ØØ '
(
ØØ' (
$str
ØØ( a
,
ØØa b
	tablename
ØØc l
)
ØØl m
;
ØØm n
sb
ØØo q
.
ØØq r

AppendLine
ØØr |
(
ØØ| }
)
ØØ} ~
;
ØØ~ 
sb
∞∞ 
.
∞∞ 

AppendLine
∞∞ %
(
∞∞% &
$str
∞∞& 5
)
∞∞5 6
;
∞∞6 7
sb
±± 
.
±± 

AppendLine
±± %
(
±±% &
$str
±±& 1
)
±±1 2
;
±±2 3
sb
≤≤ 
.
≤≤ 

AppendLine
≤≤ %
(
≤≤% &
)
≤≤& '
;
≤≤' (
sb
¥¥ 
.
¥¥ 

AppendLine
¥¥ %
(
¥¥% &
$str
¥¥& =
)
¥¥= >
;
¥¥> ?
sb
µµ 
.
µµ 
AppendFormat
µµ '
(
µµ' (
$str
µµ( k
,
µµk l
	tablename
µµm v
)
µµv w
;
µµw x
sb
µµy {
.
µµ{ |

AppendLineµµ| Ü
(µµÜ á
)µµá à
;µµà â
sb
∂∂ 
.
∂∂ 

AppendLine
∂∂ %
(
∂∂% &
$str
∂∂& >
)
∂∂> ?
;
∂∂? @
sb
∑∑ 
.
∑∑ 
AppendFormat
∑∑ '
(
∑∑' (
$str∑∑( ö
,∑∑ö õ
	tablename∑∑ú •
)∑∑• ¶
;∑∑¶ ß
sb∑∑® ™
.∑∑™ ´

AppendLine∑∑´ µ
(∑∑µ ∂
)∑∑∂ ∑
;∑∑∑ ∏
sb
∏∏ 
.
∏∏ 

AppendLine
∏∏ %
(
∏∏% &
$str∏∏& ¢
)∏∏¢ £
;∏∏£ §
sb
ππ 
.
ππ 

AppendLine
ππ %
(
ππ% &
$strππ& ™
)ππ™ ´
;ππ´ ¨
sb
∫∫ 
.
∫∫ 
AppendFormat
∫∫ '
(
∫∫' (
$str∫∫( õ
,∫∫õ ú
	tablename∫∫ù ¶
)∫∫¶ ß
;∫∫ß ®
sb∫∫© ´
.∫∫´ ¨

AppendLine∫∫¨ ∂
(∫∫∂ ∑
)∫∫∑ ∏
;∫∫∏ π
sb
ªª 
.
ªª 

AppendLine
ªª %
(
ªª% &
$str
ªª& 1
)
ªª1 2
;
ªª2 3
sb
ºº 
.
ºº 

AppendLine
ºº %
(
ºº% &
$str
ºº& P
)
ººP Q
;
ººQ R
sb
ΩΩ 
.
ΩΩ 

AppendLine
ΩΩ %
(
ΩΩ% &
$str
ΩΩ& 5
)
ΩΩ5 6
;
ΩΩ6 7
sb
ææ 
.
ææ 
AppendFormat
ææ '
(
ææ' (
$str
ææ( j
,
ææj k
	tablename
ææl u
)
ææu v
;
ææv w
sb
ææx z
.
ææz {

AppendLineææ{ Ö
(ææÖ Ü
)ææÜ á
;ææá à
sb
øø 
.
øø 

AppendLine
øø %
(
øø% &
$str
øø& 5
)
øø5 6
;
øø6 7
sb
¿¿ 
.
¿¿ 

AppendLine
¿¿ %
(
¿¿% &
$str
¿¿& 1
)
¿¿1 2
;
¿¿2 3
sb
¡¡ 
.
¡¡ 

AppendLine
¡¡ %
(
¡¡% &
)
¡¡& '
;
¡¡' (
sb
√√ 
.
√√ 

AppendLine
√√ %
(
√√% &
$str
√√& =
)
√√= >
;
√√> ?
sb
ƒƒ 
.
ƒƒ 
AppendFormat
ƒƒ '
(
ƒƒ' (
$strƒƒ( Ö
,ƒƒÖ Ü
	tablenameƒƒá ê
)ƒƒê ë
;ƒƒë í
sbƒƒì ï
.ƒƒï ñ

AppendLineƒƒñ †
(ƒƒ† °
)ƒƒ° ¢
;ƒƒ¢ £
sb
≈≈ 
.
≈≈ 

AppendLine
≈≈ %
(
≈≈% &
$str
≈≈& >
)
≈≈> ?
;
≈≈? @
sb
∆∆ 
.
∆∆ 
AppendFormat
∆∆ '
(
∆∆' (
$str∆∆( ô
,∆∆ô ö
	tablename∆∆õ §
)∆∆§ •
;∆∆• ¶
sb∆∆ß ©
.∆∆© ™

AppendLine∆∆™ ¥
(∆∆¥ µ
)∆∆µ ∂
;∆∆∂ ∑
sb
«« 
.
«« 

AppendLine
«« %
(
««% &
$str««& ¢
)««¢ £
;««£ §
sb
»» 
.
»» 

AppendLine
»» %
(
»»% &
$str»»& ™
)»»™ ´
;»»´ ¨
sb
…… 
.
…… 
AppendFormat
…… '
(
……' (
$str……( Ö
,……Ö Ü
	tablename……á ê
)……ê ë
;……ë í
sb……ì ï
.……ï ñ

AppendLine……ñ †
(……† °
)……° ¢
;……¢ £
sb
   
.
   

AppendLine
   %
(
  % &
$str
  & 1
)
  1 2
;
  2 3
sb
ÀÀ 
.
ÀÀ 

AppendLine
ÀÀ %
(
ÀÀ% &
$str
ÀÀ& P
)
ÀÀP Q
;
ÀÀQ R
sb
ÃÃ 
.
ÃÃ 

AppendLine
ÃÃ %
(
ÃÃ% &
$str
ÃÃ& 5
)
ÃÃ5 6
;
ÃÃ6 7
sb
ÕÕ 
.
ÕÕ 
AppendFormat
ÕÕ '
(
ÕÕ' (
$str
ÕÕ( a
,
ÕÕa b
	tablename
ÕÕc l
)
ÕÕl m
;
ÕÕm n
sb
ÕÕo q
.
ÕÕq r

AppendLine
ÕÕr |
(
ÕÕ| }
)
ÕÕ} ~
;
ÕÕ~ 
sb
ŒŒ 
.
ŒŒ 

AppendLine
ŒŒ %
(
ŒŒ% &
$str
ŒŒ& 5
)
ŒŒ5 6
;
ŒŒ6 7
sb
œœ 
.
œœ 

AppendLine
œœ %
(
œœ% &
$str
œœ& 1
)
œœ1 2
;
œœ2 3
sb
–– 
.
–– 

AppendLine
–– %
(
––% &
)
––& '
;
––' (
}
““ 
sb
”” 
.
”” 

AppendLine
”” !
(
””! "
$str
””" )
)
””) *
;
””* +
result
’’ 
.
’’ 
Add
’’ 
(
’’ 
	tablename
’’ (
,
’’( )
sb
’’* ,
.
’’, -
ToString
’’- 5
(
’’5 6
)
’’6 7
)
’’7 8
;
’’8 9
}
÷÷ 
result
◊◊ 
.
◊◊ 
Add
◊◊ 
(
◊◊ 
	classname
◊◊ $
,
◊◊$ %
GetDefaultClass
◊◊& 5
(
◊◊5 6
	classname
◊◊6 ?
,
◊◊? @
strConn
◊◊A H
)
◊◊H I
)
◊◊I J
;
◊◊J K
result
ÿÿ 
.
ÿÿ 
Add
ÿÿ 
(
ÿÿ 
$str
ÿÿ -
,
ÿÿ- . 
GetDatabaseWrapper
ÿÿ/ A
(
ÿÿA B
)
ÿÿB C
)
ÿÿC D
;
ÿÿD E
}
ŸŸ 
return
⁄⁄ 
result
⁄⁄ 
;
⁄⁄ 
}
€€ 	
public
›› 
string
›› 
GetDefaultClass
›› %
(
››% &
string
››& ,
dbname
››- 3
,
››3 4
string
››5 ;
strConn
››< C
)
››C D
{
ﬁﬁ 	
StringBuilder
‡‡ 
sb
‡‡ 
=
‡‡ 
new
‡‡ "
StringBuilder
‡‡# 0
(
‡‡0 1
)
‡‡1 2
;
‡‡2 3
sb
·· 
.
·· 
AppendFormat
·· 
(
·· 
$str
·· A
,
··A B
dbname
··C I
)
··I J
;
··J K
sb
··L N
.
··N O

AppendLine
··O Y
(
··Y Z
)
··Z [
;
··[ \
sb
‚‚ 
.
‚‚ 

AppendLine
‚‚ 
(
‚‚ 
$str
‚‚  
)
‚‚  !
;
‚‚! "
sb
„„ 
.
„„ 

AppendLine
„„ 
(
„„ 
$str
„„ W
)
„„W X
;
„„X Y
sb
‰‰ 
.
‰‰ 

AppendLine
‰‰ 
(
‰‰ 
$str
‰‰ Y
)
‰‰Y Z
;
‰‰Z [
sb
ÂÂ 
.
ÂÂ 

AppendLine
ÂÂ 
(
ÂÂ 
$str
ÂÂ #
)
ÂÂ# $
;
ÂÂ$ %
sb
ÊÊ 
.
ÊÊ 
AppendFormat
ÊÊ 
(
ÊÊ 
$str
ÊÊ 9
,
ÊÊ9 :
dbname
ÊÊ; A
)
ÊÊA B
;
ÊÊB C
sb
ÁÁ 
.
ÁÁ 

AppendLine
ÁÁ 
(
ÁÁ 
)
ÁÁ 
;
ÁÁ 
sb
ËË 
.
ËË 

AppendLine
ËË 
(
ËË 
$str
ËË $
)
ËË$ %
;
ËË% &
sb
ÎÎ 
.
ÎÎ 

AppendLine
ÎÎ 
(
ÎÎ 
$str
ÎÎ |
)
ÎÎ| }
;
ÎÎ} ~
sb
ÏÏ 
.
ÏÏ 

AppendLine
ÏÏ 
(
ÏÏ 
$strÏÏ ù
)ÏÏù û
;ÏÏû ü
sb
ÌÌ 
.
ÌÌ 

AppendLine
ÌÌ 
(
ÌÌ 
)
ÌÌ 
;
ÌÌ 
sb
ÔÔ 
.
ÔÔ 

AppendLine
ÔÔ 
(
ÔÔ 
$str
ÔÔ %
)
ÔÔ% &
;
ÔÔ& '
sb
 
.
 
AppendFormat
 
(
 
$str
 E
,
E F
strConn
G N
)
N O
;
O P
sb
ÒÒ 
.
ÒÒ 

AppendLine
ÒÒ 
(
ÒÒ 
)
ÒÒ 
;
ÒÒ 
sb
ÚÚ 
.
ÚÚ 

AppendLine
ÚÚ 
(
ÚÚ 
$str
ÚÚ "
)
ÚÚ" #
;
ÚÚ# $
sb
ÙÙ 
.
ÙÙ 

AppendLine
ÙÙ 
(
ÙÙ 
)
ÙÙ 
;
ÙÙ 
sb
ıı 
.
ıı 

AppendLine
ıı 
(
ıı 
$str
ıı $
)
ıı$ %
;
ıı% &
sb
ˆˆ 
.
ˆˆ 

AppendLine
ˆˆ 
(
ˆˆ 
$str
ˆˆ #
)
ˆˆ# $
;
ˆˆ$ %
sb
˜˜ 
.
˜˜ 
AppendFormat
˜˜ 
(
˜˜ 
$str
˜˜ D
,
˜˜D E
dbname
˜˜F L
)
˜˜L M
;
˜˜M N
sb
˜˜O Q
.
˜˜Q R

AppendLine
˜˜R \
(
˜˜\ ]
)
˜˜] ^
;
˜˜^ _
sb
¯¯ 
.
¯¯ 

AppendLine
¯¯ 
(
¯¯ 
$str
¯¯ $
)
¯¯$ %
;
¯¯% &
sb
˘˘ 
.
˘˘ 

AppendLine
˘˘ 
(
˘˘ 
$str
˘˘ D
)
˘˘D E
;
˘˘E F
sb
˙˙ 
.
˙˙ 

AppendLine
˙˙ 
(
˙˙ 
$str
˙˙ $
)
˙˙$ %
;
˙˙% &
sb
˚˚ 
.
˚˚ 

AppendLine
˚˚ 
(
˚˚ 
)
˚˚ 
;
˚˚ 
sb
¸¸ 
.
¸¸ 

AppendLine
¸¸ 
(
¸¸ 
$str
¸¸ [
)
¸¸[ \
;
¸¸\ ]
sb
˝˝ 
.
˝˝ 

AppendLine
˝˝ 
(
˝˝ 
$str
˝˝ $
)
˝˝$ %
;
˝˝% &
sb
˛˛ 
.
˛˛ 

AppendLine
˛˛ 
(
˛˛ 
$str
˛˛ i
)
˛˛i j
;
˛˛j k
sb
ˇˇ 
.
ˇˇ 

AppendLine
ˇˇ 
(
ˇˇ 
$str
ˇˇ $
)
ˇˇ$ %
;
ˇˇ% &
sb
ÄÄ 
.
ÄÄ 

AppendLine
ÄÄ 
(
ÄÄ 
)
ÄÄ 
;
ÄÄ 
sb
ÅÅ 
.
ÅÅ 

AppendLine
ÅÅ 
(
ÅÅ 
$str
ÅÅ J
)
ÅÅJ K
;
ÅÅK L
sb
ÇÇ 
.
ÇÇ 

AppendLine
ÇÇ 
(
ÇÇ 
$str
ÇÇ $
)
ÇÇ$ %
;
ÇÇ% &
sb
ÉÉ 
.
ÉÉ 

AppendLine
ÉÉ 
(
ÉÉ 
$str
ÉÉ v
)
ÉÉv w
;
ÉÉw x
sb
ÑÑ 
.
ÑÑ 

AppendLine
ÑÑ 
(
ÑÑ 
$str
ÑÑ $
)
ÑÑ$ %
;
ÑÑ% &
sb
ÖÖ 
.
ÖÖ 

AppendLine
ÖÖ 
(
ÖÖ 
$str
ÖÖ  
)
ÖÖ  !
;
ÖÖ! "
return
áá 
sb
áá 
.
áá 
ToString
áá 
(
áá 
)
áá  
;
áá  !
}
ââ 	
public
ãã 
string
ãã  
GetDatabaseWrapper
ãã (
(
ãã( )
)
ãã) *
{
åå 	
var
çç 
str
çç 
=
çç 
$str
ç£ 
;
££ 
return
§§ 
str
§§ 
;
§§ 
}
•• 	
}
ßß 
}®® Êy
õD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\CodeGeneration\CodeGenerators\SQLServiceGenerator.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
CodeGeneration +
.+ ,
CodeGenerators, :
{ 
public

 

class

 
SQLServiceGenerator

 $
{ 
SqlTypeConverter 
typeConverter &
=' (
new) ,
SqlTypeConverter- =
(= >
)> ?
;? @
public 

Dictionary 
< 
string  
,  !
string" (
>( )
GenerateMultiFile* ;
(; <
string< B
strConnC J
)J K
{ 	
var 
result 
= 
new 

Dictionary '
<' (
string( .
,. /
string0 6
>6 7
(7 8
)8 9
;9 :
using 
( 
var 
con 
= 
new  
SqlConnection! .
(. /
strConn/ 6
)6 7
)7 8
{ 
con 
. 
Open 
( 
) 
; 
string 
[ 
] 
objArrRestrict '
;' (
	DataTable 
	schemaTbl #
;# $
	schemaTbl 
= 
con 
.  
	GetSchema  )
() *
$str* 2
,2 3
null4 8
)8 9
;9 :
var 
	classname 
= 
con  #
.# $
Database$ ,
;, -
foreach 
( 
DataRow  
row! $
in% '
	schemaTbl( 1
.1 2
Rows2 6
)6 7
{ 
StringBuilder !
sb" $
=% &
new' *
StringBuilder+ 8
(8 9
)9 :
;: ;
bool 
hasname  
=! "
false# (
;( )
var 
	tablename !
=" #
($ %
string% +
)+ ,
row, /
[/ 0
$str0 <
]< =
;= >
var   
	tabletype   !
=  " #
(  $ %
string  % +
)  + ,
row  , /
[  / 0
$str  0 <
]  < =
;  = >
if"" 
("" 
	tablename"" !
.""! "
IndexOf""" )
("") *
$str""* 1
)""1 2
>""3 4
-""5 6
$num""6 7
)""7 8
continue""9 A
;""A B
if$$ 
($$ 
($$ 
string$$ 
)$$  
row$$  #
[$$# $
$str$$$ 0
]$$0 1
!=$$2 4
$str$$5 B
)$$B C
{%% 
objArrRestrict&& &
=&&' (
new&&) ,
string&&- 3
[&&3 4
]&&4 5
{&&6 7
null&&8 <
,&&< =
null&&> B
,&&B C
	tablename&&D M
,&&M N
null&&O S
}&&T U
;&&U V
var'' 
tbl'' 
=''  !
con''" %
.''% &
	GetSchema''& /
(''/ 0
$str''0 9
,''9 :
objArrRestrict''; I
)''I J
;''J K
foreach(( 
(((  !
DataRow((! (
colrow(() /
in((0 2
tbl((3 6
.((6 7
Rows((7 ;
)((; <
hasname)) #
|=))$ &
())' (
string))( .
))). /
colrow))/ 5
[))5 6
$str))6 C
]))C D
==))E G
$str))H M
;))M N
sb++ 
.++ 
AppendFormat++ '
(++' (
$str++( M
)++M N
;++N O
sb++P R
.++R S

AppendLine++S ]
(++] ^
)++^ _
;++_ `
sb,, 
.,, 
AppendFormat,, '
(,,' (
$str,,( `
,,,` a
	tablename,,b k
),,k l
;,,l m
sb,,n p
.,,p q

AppendLine,,q {
(,,{ |
),,| }
;,,} ~
sb-- 
.-- 

AppendLine-- %
(--% &
$str--& -
)--- .
;--. /
sb.. 
... 
AppendFormat.. '
(..' (
$str..( E
,..E F
	tablename..G P
)..P Q
;..Q R
sb..S U
...U V

AppendLine..V `
(..` a
)..a b
;..b c
sb// 
.// 
AppendFormat// '
(//' (
$str//( E
,//E F
	tablename//G P
)//P Q
;//Q R
sb//S U
.//U V

AppendLine//V `
(//` a
)//a b
;//b c
sb00 
.00 

AppendLine00 %
(00% &
$str00& 1
)001 2
;002 3
sb11 
.11 

AppendLine11 %
(11% &
)11& '
;11' (
sb22 
.22 

AppendLine22 %
(22% &
$str22& 1
)221 2
;222 3
sb33 
.33 

AppendLine33 %
(33% &
)33& '
;33' (
sb55 
.55 
AppendFormat55 '
(55' (
$str55( R
,55R S
	tablename55T ]
)55] ^
;55^ _
sb55` b
.55b c

AppendLine55c m
(55m n
)55n o
;55o p
sb66 
.66 
AppendFormat66 '
(66' (
$str66( \
,66\ ]
	tablename66^ g
)66g h
;66h i
sb66j l
.66l m

AppendLine66m w
(66w x
)66x y
;66y z
sb77 
.77 

AppendLine77 %
(77% &
$str77& 1
)771 2
;772 3
sb88 
.88 

AppendLine88 %
(88% &
$str88& y
)88y z
;88z {
sb99 
.99 
AppendFormat99 '
(99' (
$str99( Q
,99Q R
	classname99S \
)99\ ]
;99] ^
sb99_ a
.99a b

AppendLine99b l
(99l m
)99m n
;99n o
sb:: 
.:: 
AppendFormat:: '
(::' (
$str::( Q
,::Q R
	tablename::S \
)::\ ]
;::] ^
sb::_ a
.::a b

AppendLine::b l
(::l m
)::m n
;::n o
sb;; 
.;; 

AppendLine;; %
(;;% &
$str;;& R
);;R S
;;;S T
sb<< 
.<< 

AppendLine<< %
(<<% &
$str<<& 1
)<<1 2
;<<2 3
sb<<4 6
.<<6 7

AppendLine<<7 A
(<<A B
)<<B C
;<<C D
if>> 
(>> 
	tabletype>> %
==>>& (
$str>>) 5
)>>5 6
{?? 
sbAA 
.AA 
AppendFormatAA +
(AA+ ,
$strAA, W
,AAW X
	tablenameAAY b
)AAb c
;AAc d
sbAAe g
.AAg h

AppendLineAAh r
(AAr s
)AAs t
;AAt u
sbBB 
.BB 
AppendFormatBB +
(BB+ ,
$strBB, a
,BBa b
	tablenameBBc l
)BBl m
;BBm n
sbBBo q
.BBq r

AppendLineBBr |
(BB| }
)BB} ~
;BB~ 
sbCC 
.CC 

AppendLineCC )
(CC) *
$strCC* 5
)CC5 6
;CC6 7
sbDD 
.DD 
AppendFormatDD +
(DD+ ,
$strDD, U
,DDU V
	classnameDDW `
)DD` a
;DDa b
sbDDc e
.DDe f

AppendLineDDf p
(DDp q
)DDq r
;DDr s
sbEE 
.EE 
AppendFormatEE +
(EE+ ,
$strEE, [
)EE[ \
;EE\ ]
sbEE^ `
.EE` a

AppendLineEEa k
(EEk l
)EEl m
;EEm n
sbFF 
.FF 
AppendFormatFF +
(FF+ ,
$strFF, i
,FFi j
	tablenameFFk t
)FFt u
;FFu v
sbFFw y
.FFy z

AppendLine	FFz Ñ
(
FFÑ Ö
)
FFÖ Ü
;
FFÜ á
sbHH 
.HH 

AppendLineHH )
(HH) *
$strHH* V
)HHV W
;HHW X
sbHHY [
.HH[ \

AppendLineHH\ f
(HHf g
)HHg h
;HHh i
sbII 
.II 

AppendLineII )
(II) *
$strII* 5
)II5 6
;II6 7
sbJJ 
.JJ 

AppendLineJJ )
(JJ) *
)JJ* +
;JJ+ ,
sbLL 
.LL 
AppendFormatLL +
(LL+ ,
$strLL, V
,LLV W
	tablenameLLX a
)LLa b
;LLb c
sbLLd f
.LLf g

AppendLineLLg q
(LLq r
)LLr s
;LLs t
sbMM 
.MM 
AppendFormatMM +
(MM+ ,
$strMM, `
,MM` a
	tablenameMMb k
)MMk l
;MMl m
sbMMn p
.MMp q

AppendLineMMq {
(MM{ |
)MM| }
;MM} ~
sbNN 
.NN 

AppendLineNN )
(NN) *
$strNN* 5
)NN5 6
;NN6 7
sbOO 
.OO 
AppendFormatOO +
(OO+ ,
$strOO, U
,OOU V
	classnameOOW `
)OO` a
;OOa b
sbOOc e
.OOe f

AppendLineOOf p
(OOp q
)OOq r
;OOr s
sbPP 
.PP 
AppendFormatPP +
(PP+ ,
$strPP, `
,PP` a
	tablenamePPb k
)PPk l
;PPl m
sbPPn p
.PPp q

AppendLinePPq {
(PP{ |
)PP| }
;PP} ~
sbRR 
.RR 
AppendFormatRR +
(RR+ ,
$strRR, f
,RRf g
	tablenameRRh q
)RRq r
;RRr s
sbRRt v
.RRv w

AppendLine	RRw Å
(
RRÅ Ç
)
RRÇ É
;
RRÉ Ñ
sbSS 
.SS 

AppendLineSS )
(SS) *
$strSS* 5
)SS5 6
;SS6 7
sbTT 
.TT 

AppendLineTT )
(TT) *
)TT* +
;TT+ ,
sbVV 
.VV 
AppendFormatVV +
(VV+ ,
$strVV, V
,VVV W
	tablenameVVX a
)VVa b
;VVb c
sbVVd f
.VVf g

AppendLineVVg q
(VVq r
)VVr s
;VVs t
sbWW 
.WW 
AppendFormatWW +
(WW+ ,
$strWW, `
,WW` a
	tablenameWWb k
)WWk l
;WWl m
sbWWn p
.WWp q

AppendLineWWq {
(WW{ |
)WW| }
;WW} ~
sbXX 
.XX 

AppendLineXX )
(XX) *
$strXX* 5
)XX5 6
;XX6 7
sbYY 
.YY 
AppendFormatYY +
(YY+ ,
$strYY, U
,YYU V
	classnameYYW `
)YY` a
;YYa b
sbYYc e
.YYe f

AppendLineYYf p
(YYp q
)YYq r
;YYr s
sbZZ 
.ZZ 
AppendFormatZZ +
(ZZ+ ,
$strZZ, `
,ZZ` a
	tablenameZZb k
)ZZk l
;ZZl m
sbZZn p
.ZZp q

AppendLineZZq {
(ZZ{ |
)ZZ| }
;ZZ} ~
sb[[ 
.[[ 
AppendFormat[[ +
([[+ ,
$str[[, f
,[[f g
	tablename[[h q
)[[q r
;[[r s
sb[[t v
.[[v w

AppendLine	[[w Å
(
[[Å Ç
)
[[Ç É
;
[[É Ñ
sb\\ 
.\\ 

AppendLine\\ )
(\\) *
$str\\* 5
)\\5 6
;\\6 7
sb]] 
.]] 

AppendLine]] )
(]]) *
)]]* +
;]]+ ,
sb__ 
.__ 
AppendFormat__ +
(__+ ,
$str__, V
,__V W
	tablename__X a
)__a b
;__b c
sb__d f
.__f g

AppendLine__g q
(__q r
)__r s
;__s t
sb`` 
.`` 
AppendFormat`` +
(``+ ,
$str``, `
,``` a
	tablename``b k
)``k l
;``l m
sb``n p
.``p q

AppendLine``q {
(``{ |
)``| }
;``} ~
sbaa 
.aa 

AppendLineaa )
(aa) *
$straa* 5
)aa5 6
;aa6 7
sbbb 
.bb 
AppendFormatbb +
(bb+ ,
$strbb, U
,bbU V
	classnamebbW `
)bb` a
;bba b
sbbbc e
.bbe f

AppendLinebbf p
(bbp q
)bbq r
;bbr s
sbcc 
.cc 
AppendFormatcc +
(cc+ ,
$strcc, [
)cc[ \
;cc\ ]
sbcc^ `
.cc` a

AppendLinecca k
(cck l
)ccl m
;ccm n
sbdd 
.dd 

AppendLinedd )
(dd) *
$strdd* F
)ddF G
;ddG H
sbee 
.ee 

AppendLineee )
(ee) *
$stree* 9
)ee9 :
;ee: ;
sbff 
.ff 
AppendFormatff +
(ff+ ,
$strff, z
,ffz {
	tablename	ff| Ö
)
ffÖ Ü
;
ffÜ á
sb
ffà ä
.
ffä ã

AppendLine
ffã ï
(
ffï ñ
)
ffñ ó
;
ffó ò
sbgg 
.gg 

AppendLinegg )
(gg) *
$strgg* 9
)gg9 :
;gg: ;
sbhh 
.hh 

AppendLinehh )
(hh) *
$strhh* <
)hh< =
;hh= >
sbii 
.ii 

AppendLineii )
(ii) *
$strii* 9
)ii9 :
;ii: ;
sbjj 
.jj 
AppendFormatjj +
(jj+ ,
$strjj, d
,jjd e
	tablenamejjf o
)jjo p
;jjp q
sbjjr t
.jjt u

AppendLinejju 
(	jj Ä
)
jjÄ Å
;
jjÅ Ç
sbkk 
.kk 
AppendFormatkk +
(kk+ ,
$strkk, j
,kkj k
	tablenamekkl u
)kku v
;kkv w
sbkkx z
.kkz {

AppendLine	kk{ Ö
(
kkÖ Ü
)
kkÜ á
;
kká à
sbll 
.ll 

AppendLinell )
(ll) *
$strll* 9
)ll9 :
;ll: ;
sbmm 
.mm 

AppendLinemm )
(mm) *
$strmm* 5
)mm5 6
;mm6 7
sbnn 
.nn 

AppendLinenn )
(nn) *
)nn* +
;nn+ ,
}oo 
sbpp 
.pp 

AppendLinepp %
(pp% &
$strpp& -
)pp- .
;pp. /
resultqq 
.qq 
Addqq "
(qq" #
	tablenameqq# ,
,qq, -
sbqq. 0
.qq0 1
ToStringqq1 9
(qq9 :
)qq: ;
)qq; <
;qq< =
}rr 
}ss 
}tt 
returnuu 
resultuu 
;uu 
}vv 	
}xx 
}yy ◊\
òD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\CodeGeneration\CodeGenerators\SqlTypeConverter.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
CodeGeneration +
.+ ,
CodeGenerators, :
{ 
public 

class 
SqlTypeConverter !
{ 

Dictionary

 
<

 
Type

 
,

 
string

 
>

  
_alias

! '
=

( )
new

* -

Dictionary

. 8
<

8 9
Type

9 =
,

= >
string

? E
>

E F
(

F G
)

G H
;

H I

Dictionary 
< 
	SqlDbType 
, 
Type "
>" #
_types$ *
=+ ,
new- 0

Dictionary1 ;
<; <
	SqlDbType< E
,E F
TypeG K
>K L
(L M
)M N
;N O

Dictionary 
< 
string 
, 
Type 
>  
_stypes! (
=) *
new+ .

Dictionary/ 9
<9 :
string: @
,@ A
TypeB F
>F G
(G H
)H I
;I J
public 
SqlTypeConverter 
(  
)  !
{ 	
_alias 
[ 
typeof 
( 
string  
)  !
]! "
=# $
$str% -
;- .
_alias 
[ 
typeof 
( 
long 
) 
]  
=! "
$str# )
;) *
_alias 
[ 
typeof 
( 
char 
) 
]  
=! "
$str# )
;) *
_alias 
[ 
typeof 
( 
byte 
) 
]  
=! "
$str# )
;) *
_alias 
[ 
typeof 
( 
int 
) 
] 
=  !
$str" '
;' (
_alias 
[ 
typeof 
( 
bool 
) 
]  
=! "
$str# )
;) *
_alias 
[ 
typeof 
( 
decimal !
)! "
]" #
=$ %
$str& /
;/ 0
_alias 
[ 
typeof 
( 
double  
)  !
]! "
=# $
$str% -
;- .
_alias 
[ 
typeof 
( 
short 
)  
]  !
=" #
$str$ +
;+ ,
_alias 
[ 
typeof 
( 
ushort  
)  !
]! "
=# $
$str% -
;- .
_alias 
[ 
typeof 
( 
ulong 
)  
]  !
=" #
$str$ +
;+ ,
_alias 
[ 
typeof 
( 
uint 
) 
]  
=! "
$str# )
;) *
_alias 
[ 
typeof 
( 
byte 
[ 
]  
)  !
]! "
=# $
$str% .
;. /
_types 
[ 
	SqlDbType 
. 
BigInt #
]# $
=% &
typeof' -
(- .
long. 2
)2 3
;3 4
_types 
[ 
	SqlDbType 
. 
Binary #
]# $
=% &
typeof' -
(- .
byte. 2
[2 3
]3 4
)4 5
;5 6
_types   
[   
	SqlDbType   
.   
Bit    
]    !
=  " #
typeof  $ *
(  * +
bool  + /
)  / 0
;  0 1
_types!! 
[!! 
	SqlDbType!! 
.!! 
Char!! !
]!!! "
=!!# $
typeof!!% +
(!!+ ,
string!!, 2
)!!2 3
;!!3 4
_types"" 
["" 
	SqlDbType"" 
."" 
Date"" !
]""! "
=""# $
typeof""% +
(""+ ,
DateTime"", 4
)""4 5
;""5 6
_types## 
[## 
	SqlDbType## 
.## 
DateTime## %
]##% &
=##' (
typeof##) /
(##/ 0
DateTime##0 8
)##8 9
;##9 :
_types$$ 
[$$ 
	SqlDbType$$ 
.$$ 
	DateTime2$$ &
]$$& '
=$$( )
typeof$$* 0
($$0 1
DateTime$$1 9
)$$9 :
;$$: ;
_types%% 
[%% 
	SqlDbType%% 
.%% 
DateTimeOffset%% +
]%%+ ,
=%%- .
typeof%%/ 5
(%%5 6
DateTime%%6 >
)%%> ?
;%%? @
_types&& 
[&& 
	SqlDbType&& 
.&& 
Decimal&& $
]&&$ %
=&&& '
typeof&&( .
(&&. /
decimal&&/ 6
)&&6 7
;&&7 8
_types'' 
['' 
	SqlDbType'' 
.'' 
Float'' "
]''" #
=''$ %
typeof''& ,
('', -
double''- 3
)''3 4
;''4 5
_types(( 
[(( 
	SqlDbType(( 
.(( 
Binary(( #
]((# $
=((% &
typeof((' -
(((- .
byte((. 2
[((2 3
]((3 4
)((4 5
;((5 6
_types)) 
[)) 
	SqlDbType)) 
.)) 
UniqueIdentifier)) -
]))- .
=))/ 0
typeof))1 7
())7 8
Guid))8 <
)))< =
;))= >
_types** 
[** 
	SqlDbType** 
.** 
Int**  
]**  !
=**" #
typeof**$ *
(*** +
int**+ .
)**. /
;**/ 0
_types++ 
[++ 
	SqlDbType++ 
.++ 
Image++ "
]++" #
=++$ %
typeof++& ,
(++, -
byte++- 1
[++1 2
]++2 3
)++3 4
;++4 5
_types-- 
[-- 
	SqlDbType-- 
.-- 
Money-- "
]--" #
=--$ %
typeof--& ,
(--, -
decimal--- 4
)--4 5
;--5 6
_types.. 
[.. 
	SqlDbType.. 
... 
NChar.. "
].." #
=..$ %
typeof..& ,
(.., -
string..- 3
)..3 4
;..4 5
_types// 
[// 
	SqlDbType// 
.// 
NText// "
]//" #
=//$ %
typeof//& ,
(//, -
string//- 3
)//3 4
;//4 5
_types00 
[00 
	SqlDbType00 
.00 
NVarChar00 %
]00% &
=00' (
typeof00) /
(00/ 0
string000 6
)006 7
;007 8
_types11 
[11 
	SqlDbType11 
.11 
Real11 !
]11! "
=11# $
typeof11% +
(11+ ,
float11, 1
)111 2
;112 3
_types22 
[22 
	SqlDbType22 
.22 
SmallDateTime22 *
]22* +
=22, -
typeof22. 4
(224 5
DateTime225 =
)22= >
;22> ?
_types33 
[33 
	SqlDbType33 
.33 
SmallInt33 %
]33% &
=33' (
typeof33) /
(33/ 0
short330 5
)335 6
;336 7
_types44 
[44 
	SqlDbType44 
.44 
TinyInt44 $
]44$ %
=44& '
typeof44( .
(44. /
byte44/ 3
)443 4
;444 5
_types55 
[55 
	SqlDbType55 
.55 

SmallMoney55 '
]55' (
=55) *
typeof55+ 1
(551 2
decimal552 9
)559 :
;55: ;
_types66 
[66 
	SqlDbType66 
.66 
Text66 !
]66! "
=66# $
typeof66% +
(66+ ,
string66, 2
)662 3
;663 4
_types77 
[77 
	SqlDbType77 
.77 
Time77 !
]77! "
=77# $
typeof77% +
(77+ ,
TimeSpan77, 4
)774 5
;775 6
_types88 
[88 
	SqlDbType88 
.88 
	Timestamp88 &
]88& '
=88( )
typeof88* 0
(880 1
byte881 5
[885 6
]886 7
)887 8
;888 9
_types99 
[99 
	SqlDbType99 
.99 
	VarBinary99 &
]99& '
=99( )
typeof99* 0
(990 1
byte991 5
[995 6
]996 7
)997 8
;998 9
_types<< 
[<< 
	SqlDbType<< 
.<< 
	VarBinary<< &
]<<& '
=<<( )
typeof<<* 0
(<<0 1
byte<<1 5
[<<5 6
]<<6 7
)<<7 8
;<<8 9
_types== 
[== 
	SqlDbType== 
.== 
VarChar== $
]==$ %
===& '
typeof==( .
(==. /
string==/ 5
)==5 6
;==6 7
_types>> 
[>> 
	SqlDbType>> 
.>> 
Variant>> $
]>>$ %
=>>& '
typeof>>( .
(>>. /
object>>/ 5
)>>5 6
;>>6 7
_types?? 
[?? 
	SqlDbType?? 
.?? 
Xml??  
]??  !
=??" #
typeof??$ *
(??* +
string??+ 1
)??1 2
;??2 3
foreach@@ 
(@@ 
var@@ 
k@@ 
in@@ 
_types@@ $
)@@$ %
{AA 
_stypesBB 
[BB 
kBB 
.BB 
KeyBB 
.BB 
ToStringBB &
(BB& '
)BB' (
.BB( )
ToLowerBB) 0
(BB0 1
SystemBB1 7
.BB7 8
GlobalizationBB8 E
.BBE F
CultureInfoBBF Q
.BBQ R
InvariantCultureBBR b
)BBb c
]BBc d
=BBe f
kBBg h
.BBh i
ValueBBi n
;BBn o
}CC 
}DD 	
publicFF 
TypeFF 
ConvertFF 
(FF 
stringFF "
typeFF# '
)FF' (
{GG 	
returnHH 
_stypesHH 
[HH 
typeHH 
]HH  
;HH  !
}II 	
publicKK 
stringKK 
GetAliasKK 
(KK 
TypeKK #
stypeKK$ )
)KK) *
{LL 	
stringMM 
aliasMM 
=MM 
stypeMM  
.MM  !
NameMM! %
;MM% &
ifNN 
(NN 
!NN 
_aliasNN 
.NN 
TryGetValueNN #
(NN# $
stypeNN$ )
,NN) *
outNN+ .
aliasNN/ 4
)NN4 5
)NN5 6
aliasOO 
=OO 
stypeOO 
.OO 
NameOO "
;OO" #
returnPP 
aliasPP 
;PP 
}QQ 	
}RR 
}SS é°
zD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Core\Application.cs
	namespace

 	
Infoline


 
{ 
public 

class 
Application 
:  
ICallContextProvider 3
,3 4
ILogListener5 A
{ 
static 
public 
event 
Action "
<" #
Application# .
>. /
ApplicationStarted0 B
;B C
static 
Application 
_current #
;# $
public 
static 
Application !
Current" )
{ 	
get 
{ 
if 
( 
_current 
== 
null  $
)$ %
{ 
_current 
= 
new "
Application# .
(. /
)/ 0
;0 1
_current 
. 
ContextProvider ,
=- .
_current/ 7
as8 : 
ICallContextProvider; O
;O P
ApplicationLog "
." #
LogInfo# *
(* +
$str+ C
)C D
;D E
_current 
. 
Init !
(! "
)" #
;# $
ApplicationLog "
." #
LogInfo# *
(* +
$str+ B
)B C
;C D
}   
return!! 
_current!! 
;!!  
}"" 
}## 	
void%% 
Init%% 
(%% 
)%% 
{&& 	
try'' 
{(( 
var)) 
cat)) 
=)) 
new)) 
AggregateCatalog)) .
()). /
)))/ 0
;))0 1
string** 
root** 
=** 
$str** !
;**! "
if,, 
(,, 
	AppDomain,, 
.,, 
CurrentDomain,, +
.,,+ ,
SetupInformation,,, <
.,,< =
ConfigurationFile,,= N
.,,N O
EndsWith,,O W
(,,W X
$str,,X d
),,d e
),,e f
{-- 
root.. 
=.. 
$str..  
;..  !
}// 
else00 
cat11 
.11 
Catalogs11  
.11  !
Add11! $
(11$ %
new11% (
AssemblyCatalog11) 8
(118 9
Assembly119 A
.11A B
GetEntryAssembly11B R
(11R S
)11S T
)11T U
)11U V
;11V W
var33 
d33 
=33 
new33 
DirectoryCatalog33 ,
(33, -
root33- 1
)331 2
;332 3
d44 
.44 
Refresh44 
(44 
)44 
;44 
cat55 
.55 
Catalogs55 
.55 
Add55  
(55  !
d55! "
)55" #
;55# $
var77 
s77 
=77 
System77 
.77 
Diagnostics77 *
.77* +
	Stopwatch77+ 4
.774 5
StartNew775 =
(77= >
)77> ?
;77? @
s88 
.88 
Start88 
(88 
)88 
;88 
new::  
CompositionContainer:: (
(::( )
cat::) ,
)::, -
.::- .
ComposeParts::. :
(::: ;
this::; ?
)::? @
;::@ A
s<< 
.<< 
Stop<< 
(<< 
)<< 
;<< 
System== 
.== 
Diagnostics== "
.==" #
Debug==# (
.==( )
	WriteLine==) 2
(==2 3
$str==3 @
,==@ A
s==B C
.==C D
ElapsedMilliseconds==D W
)==W X
;==X Y
s>> 
.>> 
Start>> 
(>> 
)>> 
;>> 
foreach?? 
(?? 
var?? 
item?? !
in??" $
services??% -
)??- .
{@@ 
	_servicesAA 
[AA 
itemAA "
.AA" #
MetadataAA# +
.AA+ ,
ServiceTypeAA, 7
]AA7 8
=AA9 :
itemAA; ?
.AA? @
ValueAA@ E
;AAE F
}BB 
_modulesDD 
.DD 
DoDD 
(DD 
aDD 
=>DD  
aDD! "
.DD" #
InitDD# '
(DD' (
)DD( )
)DD) *
;DD* +
sEE 
.EE 
StopEE 
(EE 
)EE 
;EE 
SystemHH 
.HH 
DiagnosticsHH "
.HH" #
DebugHH# (
.HH( )
	WriteLineHH) 2
(HH2 3
$strHH3 E
,HHE F
sHHG H
.HHH I
ElapsedMillisecondsHHI \
)HH\ ]
;HH] ^
ifII 
(II 
ApplicationStartedII &
!=II' )
nullII* .
)II. /
ApplicationStartedJJ &
(JJ& '
thisJJ' +
)JJ+ ,
;JJ, -
}KK 
catchLL 
(LL '
ReflectionTypeLoadExceptionLL .
ex2LL/ 2
)LL2 3
{MM 
throwNN 
newNN 
	ExceptionNN #
(NN# $
stringNN$ *
.NN* +
JoinNN+ /
(NN/ 0
$strNN0 6
,NN6 7
ex2NN8 ;
.NN; <
LoaderExceptionsNN< L
.NNL M
SelectNNM S
(NNS T
aNNT U
=>NNV X
aNNY Z
.NNZ [
MessageNN[ b
)NNb c
)NNc d
)NNd e
;NNe f
}OO 
catchPP 
(PP 
	ExceptionPP 
ex2PP  
)PP  !
{QQ 
throwRR 
ex2RR 
.RR 
InnerExceptionRR (
;RR( )
}SS 
}TT 	
ApplicationVV 
(VV 
)VV 
{WW 	
}YY 	
public[[  
ICallContextProvider[[ #
ContextProvider[[$ 3
{[[4 5
get[[6 9
;[[9 :
set[[; >
;[[> ?
}[[@ A
ISecurityService]] 
_securityService]] )
;]]) *
public^^ 
ISecurityService^^ 
SecurityService^^  /
{__ 	
get`` 
{aa 
ifcc 
(cc 
_securityServicecc $
==cc% '
nullcc( ,
)cc, -
{dd 
_securityServiceee $
=ee% &

GetServiceee' 1
<ee1 2
ISecurityServiceee2 B
>eeB C
(eeC D
)eeD E
;eeE F
ifff 
(ff 
_securityServiceff (
==ff) +
nullff, 0
)ff0 1
throwgg 
newgg !
	Exceptiongg" +
(gg+ ,
$strgg, J
)ggJ K
;ggK L
}hh 
returnii 
_securityServiceii '
;ii' (
}jj 
}kk 	
publicnn 
IEnumerablenn 
<nn 
Typenn 
>nn  
Servicesnn! )
{oo 	
getpp 
{qq 
returnrr 
	_servicesrr  
.rr  !
Keysrr! %
;rr% &
}ss 
}tt 	
[uu 	

ImportManyuu	 
(uu 
typeofuu 
(uu 
IServiceuu #
)uu# $
)uu$ %
]uu% &
IEnumerablevv 
<vv 
Lazyvv 
<vv 
IServicevv !
,vv! "
IServiceMetavv# /
>vv/ 0
>vv0 1
servicesvv2 :
=vv; <
nullvv= A
;vvA B
[xx 	

ImportManyxx	 
(xx 
typeofxx 
(xx 
ILogListenerxx '
)xx' (
)xx( )
]xx) *
IEnumerableyy 
<yy 
ILogListeneryy  
>yy  !
errorListenersyy" 0
=yy1 2
nullyy3 7
;yy7 8
[|| 	

ImportMany||	 
(|| 
typeof|| 
(|| 
IApplicationModule|| -
)||- .
)||. /
]||/ 0
IEnumerable}} 
<}} 
IApplicationModule}} &
>}}& '
_modules}}( 0
=}}1 2
null}}3 7
;}}7 8
public~~ 
IEnumerable~~ 
<~~ 
IApplicationModule~~ -
>~~- .
Modules~~/ 6
{~~7 8
get~~9 <
{~~= >
return~~? E
_modules~~F N
;~~N O
}~~P Q
}~~R S

Dictionary
ÅÅ 
<
ÅÅ 
Type
ÅÅ 
,
ÅÅ 
object
ÅÅ 
>
ÅÅ  
	_services
ÅÅ! *
=
ÅÅ+ ,
new
ÅÅ- 0

Dictionary
ÅÅ1 ;
<
ÅÅ; <
Type
ÅÅ< @
,
ÅÅ@ A
object
ÅÅB H
>
ÅÅH I
(
ÅÅI J
)
ÅÅJ K
;
ÅÅK L
public
ÇÇ 
object
ÇÇ 

GetService
ÇÇ  
(
ÇÇ  !
Type
ÇÇ! %
servicetype
ÇÇ& 1
)
ÇÇ1 2
{
ÉÉ 	
return
ÑÑ 
	_services
ÑÑ 
[
ÑÑ 
servicetype
ÑÑ (
]
ÑÑ( )
;
ÑÑ) *
}
ÖÖ 	
public
àà 
T
àà 

GetService
àà 
<
àà 
T
àà 
>
àà 
(
àà 
)
àà  
where
àà! &
T
àà' (
:
àà) *
class
àà+ 0
,
àà0 1
IService
àà1 9
{
ââ 	
object
ää 
s
ää 
;
ää 
if
ãã 
(
ãã 
	_services
ãã 
.
ãã 
TryGetValue
ãã %
(
ãã% &
typeof
ãã& ,
(
ãã, -
T
ãã- .
)
ãã. /
,
ãã/ 0
out
ãã1 4
s
ãã5 6
)
ãã6 7
)
ãã7 8
return
åå 
s
åå 
as
åå 
T
åå 
;
åå 
throw
çç 
new
çç 
	Exception
çç 
(
çç  
string
çç  &
.
çç& '
Format
çç' -
(
çç- .
$str
çç. G
,
ççG H
typeof
ççI O
(
ççO P
T
ççP Q
)
ççQ R
)
ççR S
)
ççS T
;
ççT U
}
èè 	
public
ëë 
void
ëë 

AddService
ëë 
<
ëë 
T
ëë  
>
ëë  !
(
ëë! "
object
ëë" (
service
ëë) 0
)
ëë0 1
{
íí 	

AddService
ìì 
(
ìì 
typeof
ìì 
(
ìì 
T
ìì 
)
ìì  
,
ìì  !
service
ìì" )
)
ìì) *
;
ìì* +
}
îî 	
public
ïï 
void
ïï 

AddService
ïï 
(
ïï 
Type
ïï #
type
ïï$ (
,
ïï( )
object
ïï* 0
service
ïï1 8
)
ïï8 9
{
ññ 	
	_services
òò 
[
òò 
type
òò 
]
òò 
=
òò 
service
òò %
;
òò% &
}
ôô 	
public
öö 
void
öö 
RemoveService
öö !
(
öö! "
Type
öö" &
type
öö' +
)
öö+ ,
{
õõ 	
	_services
úú 
.
úú 
Remove
úú 
(
úú 
type
úú !
)
úú! "
;
úú" #
}
ùù 	

Dictionary
üü 
<
üü 
string
üü 
,
üü 
object
üü !
>
üü! "
dic
üü# &
=
üü' (
new
üü) ,

Dictionary
üü- 7
<
üü7 8
string
üü8 >
,
üü> ?
object
üü@ F
>
üüF G
(
üüG H
)
üüH I
;
üüI J
public
†† 
object
†† 
this
†† 
[
†† 
string
†† !
key
††" %
]
††% &
{
°° 	
get
¢¢ 
{
¢¢ 
return
¢¢ 
dic
¢¢ 
.
¢¢ 
ContainsKey
¢¢ (
(
¢¢( )
key
¢¢) ,
)
¢¢, -
?
¢¢. /
dic
¢¢0 3
[
¢¢3 4
key
¢¢4 7
]
¢¢7 8
:
¢¢9 :
null
¢¢; ?
;
¢¢? @
}
¢¢A B
set
££ 
{
££ 
dic
££ 
[
££ 
key
££ 
]
££ 
=
££ 
value
££ "
;
££" #
}
££$ %
}
§§ 	
[
ßß 	
ThreadStatic
ßß	 
]
ßß 
CallContext
®® 
_context
®® 
;
®® 
CallContext
©© "
ICallContextProvider
©© (
.
©©( )
Context
©©) 0
{
©©1 2
get
©©3 6
{
©©7 8
return
©©9 ?
_context
©©@ H
;
©©H I
}
©©J K
set
©©L O
{
©©P Q
_context
©©R Z
=
©©[ \
value
©©] b
;
©©b c
}
©©d e
}
©©f g
bool
™™ "
ICallContextProvider
™™ !
.
™™! "
IsReady
™™" )
{
™™* +
get
™™, /
{
™™0 1
return
™™2 8
_context
™™9 A
!=
™™B D
null
™™E I
;
™™I J
}
™™K L
}
™™M N
bool
≠≠ 
ILogListener
≠≠ 
.
≠≠ 
Enabled
≠≠ !
{
ÆÆ 	
get
ØØ 
{
ØØ 
return
ØØ 
true
ØØ 
;
ØØ 
}
ØØ  
}
∞∞ 	
void
≤≤ 
ILogListener
≤≤ 
.
≤≤ 

LogMessage
≤≤ $
(
≤≤$ %
LogLevel
≤≤% -
level
≤≤. 3
,
≤≤3 4
string
≤≤5 ;
message
≤≤< C
)
≤≤C D
{
≥≥ 	
if
¥¥ 
(
¥¥ 
errorListeners
¥¥ 
!=
¥¥ !
null
¥¥" &
)
¥¥& '
{
µµ 
errorListeners
∂∂ 
.
∂∂ 
Where
∂∂ $
(
∂∂$ %
a
∂∂% &
=>
∂∂' )
a
∂∂* +
.
∂∂+ ,
Enabled
∂∂, 3
)
∂∂3 4
.
∑∑ 
Do
∑∑ 
(
∑∑ 
a
∑∑ 
=>
∑∑ 
a
∑∑  !
.
∑∑! "

LogMessage
∑∑" ,
(
∑∑, -
level
∑∑- 2
,
∑∑2 3
message
∑∑4 ;
)
∑∑; <
)
∑∑< =
;
∑∑= >
}
∏∏ 
}
ππ 	
void
ªª 
ILogListener
ªª 
.
ªª 
LogError
ªª "
(
ªª" #
	Exception
ªª# ,
ex
ªª- /
)
ªª/ 0
{
ºº 	
if
ΩΩ 
(
ΩΩ 
errorListeners
ΩΩ 
!=
ΩΩ !
null
ΩΩ" &
)
ΩΩ& '
{
ææ 
errorListeners
øø 
.
øø 
Where
øø $
(
øø$ %
a
øø% &
=>
øø' )
a
øø* +
.
øø+ ,
Enabled
øø, 3
)
øø3 4
.
¿¿ 
Do
¿¿ 
(
¿¿ 
a
¿¿ 
=>
¿¿ 
a
¿¿  !
.
¿¿! "
LogError
¿¿" *
(
¿¿* +
ex
¿¿+ -
)
¿¿- .
)
¿¿. /
;
¿¿/ 0
}
¡¡ 
}
¬¬ 	
}
∆∆ 
public
«« 

	interface
«« 
IService
«« 
{
»» 
}
   
public
ÀÀ 

	interface
ÀÀ 
IServiceHost
ÀÀ !
:
ÀÀ" #
IService
ÀÀ$ ,
{
ÃÃ 
void
ÕÕ 
RegisterService
ÕÕ 
(
ÕÕ 
Type
ÕÕ !
servicetype
ÕÕ" -
,
ÕÕ- .
object
ÕÕ/ 5
service
ÕÕ6 =
,
ÕÕ= >
string
ÕÕ? E
relativeurl
ÕÕF Q
)
ÕÕQ R
;
ÕÕR S
void
ŒŒ 
UnregisterService
ŒŒ 
(
ŒŒ 
string
ŒŒ %
relariveurl
ŒŒ& 1
)
ŒŒ1 2
;
ŒŒ2 3
string
œœ 
BaseUrl
œœ 
{
œœ 
get
œœ 
;
œœ 
}
œœ 
}
–– 
public
—— 

	interface
—— &
IRemoteServiceRegisterer
—— -
:
——. /
IService
——0 8
{
““ 
void
”” 
RegisterService
”” 
<
”” 
TClass
”” #
>
””# $
(
””$ %
)
””% &
;
””& '
string
‘‘ 
BaseUri
‘‘ 
{
‘‘ 
get
‘‘ 
;
‘‘ 
set
‘‘ !
;
‘‘! "
}
‘‘# $
}
’’ 
public
÷÷ 

	interface
÷÷  
IApplicationModule
÷÷ '
{
◊◊ 
void
ÿÿ 
Init
ÿÿ 
(
ÿÿ 
)
ÿÿ 
;
ÿÿ 
}
ŸŸ 
public
€€ 

	interface
€€ 
IServiceMeta
€€ !
{
‹‹ 
Type
›› 
ServiceType
›› 
{
›› 
get
›› 
;
›› 
}
››  !
}
ﬁﬁ 
[
ﬂﬂ 
AttributeUsage
ﬂﬂ 
(
ﬂﬂ 
AttributeTargets
ﬂﬂ $
.
ﬂﬂ$ %
Class
ﬂﬂ% *
,
ﬂﬂ* +
	Inherited
ﬂﬂ, 5
=
ﬂﬂ6 7
false
ﬂﬂ8 =
,
ﬂﬂ= >
AllowMultiple
ﬂﬂ? L
=
ﬂﬂM N
false
ﬂﬂO T
)
ﬂﬂT U
]
ﬂﬂU V
public
‡‡ 

sealed
‡‡ 
class
‡‡ &
RegisterServiceAttribute
‡‡ 0
:
‡‡1 2
	Attribute
‡‡3 <
{
·· 
public
‚‚ &
RegisterServiceAttribute
‚‚ '
(
‚‚' (
)
‚‚( )
{
„„ 	
}
ÂÂ 	
}
ÊÊ 
[
ÁÁ 
AttributeUsage
ÁÁ 
(
ÁÁ 
AttributeTargets
ÁÁ $
.
ÁÁ$ %
	Interface
ÁÁ% .
,
ÁÁ. /
	Inherited
ÁÁ0 9
=
ÁÁ: ;
false
ÁÁ< A
,
ÁÁA B
AllowMultiple
ÁÁC P
=
ÁÁQ R
false
ÁÁS X
)
ÁÁX Y
]
ÁÁY Z
public
ËË 

sealed
ËË 
class
ËË "
ServicePathAttribute
ËË ,
:
ËË- .
	Attribute
ËË/ 8
{
ÈÈ 
public
ÍÍ 
string
ÍÍ 
Path
ÍÍ 
{
ÍÍ 
get
ÍÍ  
;
ÍÍ  !
private
ÍÍ" )
set
ÍÍ* -
;
ÍÍ- .
}
ÍÍ/ 0
public
ÎÎ "
ServicePathAttribute
ÎÎ #
(
ÎÎ# $
string
ÎÎ$ *
path
ÎÎ+ /
)
ÎÎ/ 0
{
ÏÏ 	
Path
ÌÌ 
=
ÌÌ 
path
ÌÌ 
;
ÌÌ 
}
ÓÓ 	
}
ÔÔ 
public
 

class
  
DependencyImporter
 #
<
# $
TClass
$ *
>
* +
{
ÒÒ 
[
ÚÚ 	

ImportMany
ÚÚ	 
]
ÚÚ 
IEnumerable
ÛÛ 
<
ÛÛ 
TClass
ÛÛ 
>
ÛÛ 
settings
ÛÛ $
=
ÛÛ% &
null
ÛÛ' +
;
ÛÛ+ ,
public
ÙÙ 
IEnumerable
ÙÙ 
<
ÙÙ 
TClass
ÙÙ !
>
ÙÙ! "
Imports
ÙÙ# *
{
ıı 	
get
ˆˆ 
{
˜˜ 
return
¯¯ 
settings
¯¯ 
;
¯¯  
}
˘˘ 
}
˙˙ 	
public
˚˚  
DependencyImporter
˚˚ !
(
˚˚! "
)
˚˚" #
{
¸¸ 	
var
˝˝ 
cat
˝˝ 
=
˝˝ 
new
˝˝ 
AssemblyCatalog
˝˝ )
(
˝˝) *
System
˝˝* 0
.
˝˝0 1

Reflection
˝˝1 ;
.
˝˝; <
Assembly
˝˝< D
.
˝˝D E 
GetCallingAssembly
˝˝E W
(
˝˝W X
)
˝˝X Y
)
˝˝Y Z
;
˝˝Z [
new
˛˛ "
CompositionContainer
˛˛ $
(
˛˛$ %
cat
˛˛% (
)
˛˛( )
.
˛˛) *
ComposeParts
˛˛* 6
(
˛˛6 7
this
˛˛7 ;
)
˛˛; <
;
˛˛< =
}
ˇˇ 	
public
ÅÅ  
DependencyImporter
ÅÅ !
(
ÅÅ! "
string
ÅÅ" (
	directory
ÅÅ) 2
)
ÅÅ2 3
{
ÇÇ 	
var
ÉÉ 
cat
ÉÉ 
=
ÉÉ 
new
ÉÉ 
DirectoryCatalog
ÉÉ *
(
ÉÉ* +
	directory
ÉÉ+ 4
)
ÉÉ4 5
;
ÉÉ5 6
cat
ÑÑ 
.
ÑÑ 
Refresh
ÑÑ 
(
ÑÑ 
)
ÑÑ 
;
ÑÑ 
new
ÖÖ "
CompositionContainer
ÖÖ $
(
ÖÖ$ %
cat
ÖÖ% (
)
ÖÖ( )
.
ÖÖ) *
ComposeParts
ÖÖ* 6
(
ÖÖ6 7
this
ÖÖ7 ;
)
ÖÖ; <
;
ÖÖ< =
}
ÜÜ 	
}
áá 
}àà ì)
}D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Core\ApplicationLog.cs
	namespace 	
Infoline
 
{		 
public

 

class

 
ApplicationLog

 
{ 
public 
static 
string 
sSource $
=$ %
$str% /
;/ 0
public 
static 
string 
sLog  
=! "
$str# 1
;1 2
public 
static 
void 
LogError #
(# $
	Exception$ -
ex. 0
)0 1
{ 	
System 
. 
Diagnostics 
. 
Debug $
.$ %
	WriteLine% .
(. /
ex/ 1
.1 2
ToString2 :
(: ;
); <
)< =
;= >
if 
( 
UnitTestDetector  
.  !
IsInUnitTest! -
)- .
throw 
ex 
; 
else 
( 
( 
ILogListener 
) 
Application *
.* +
Current+ 2
)2 3
.3 4
LogError4 <
(< =
ex= ?
)? @
;@ A
} 	
public 
static 
void 

LogMessage %
(% &
LogLevel& .
level/ 4
,4 5
string6 <
message= D
)D E
{ 	
if 
( 
UnitTestDetector  
.  !
IsInUnitTest! -
)- .
System 
. 
Diagnostics "
." #
Debug# (
.( )
Write) .
(. /
message/ 6
)6 7
;7 8
else 
{ 
if 
( 
System 
. 
Diagnostics &
.& '
Debugger' /
./ 0

IsAttached0 :
||; =
Environment> I
.I J
UserInteractiveJ Y
)Y Z
{   
var!! 
msg!! 
=!! 
string!! $
.!!$ %
Format!!% +
(!!+ ,
$str!!, :
,!!: ;
level!!< A
,!!A B
message!!C J
,!!J K
SW!!L N
.!!N O
Elapsed!!O V
.!!V W
Milliseconds!!W c
)!!c d
;!!d e
System"" 
."" 
Console"" "
.""" #
	WriteLine""# ,
("", -
msg""- 0
)""0 1
;""1 2
System## 
.## 
Diagnostics## &
.##& '
Debug##' ,
.##, -
	WriteLine##- 6
(##6 7
msg##7 :
)##: ;
;##; <
SW$$ 
.$$ 
Restart$$ 
($$ 
)$$  
;$$  !
}%% 
(&& 
(&& 
ILogListener&& 
)&& 
Application&& *
.&&* +
Current&&+ 2
)&&2 3
.&&3 4

LogMessage&&4 >
(&&> ?
level&&? D
,&&D E
message&&F M
)&&M N
;&&N O
}'' 
})) 	
static** 
System** 
.** 
Diagnostics** !
.**! "
	Stopwatch**" +
SW**, .
=**/ 0
new**1 4
System**5 ;
.**; <
Diagnostics**< G
.**G H
	Stopwatch**H Q
(**Q R
)**R S
;**S T
public++ 
static++ 
void++ 
LogError++ #
(++# $
string++$ *
message+++ 2
)++2 3
{,, 	

LogMessage-- 
(-- 
LogLevel-- 
.--  
Error--  %
,--% &
message--' .
)--. /
;--/ 0
}.. 	
public00 
static00 
void00 
LogInfo00 "
(00" #
string00# )
message00* 1
)001 2
{11 	

LogMessage22 
(22 
LogLevel22 
.22  
Info22  $
,22$ %
message22& -
)22- .
;22. /
}33 	
}44 
public55 

	interface55 
ILogListener55 !
{66 
bool77 
Enabled77 
{77 
get77 
;77 
}77 
void88 

LogMessage88 
(88 
LogLevel88  
level88! &
,88& '
string88( .
message88/ 6
)886 7
;887 8
void99 
LogError99 
(99 
	Exception99 
ex99  "
)99" #
;99# $
}:: 
public;; 

enum;; 
LogLevel;; 
{<< 
Verbose== 
,== 
	UserError>> 
,>> 
UserWarning?? 
,?? 
UserInfo@@ 
,@@ 
DebugAA 
,AA 
InfoBB 
,BB 
WarningCC 
,CC 
ErrorDD 
,DD 
}EE 
}FF ”ã
zD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Core\CallContext.cs
	namespace 	
Infoline
 
{ 
[ 
Serializable 
] 
[ 
	KnownType 
( 
typeof 
( 
string 
[ 
] 
) 
)  
]  !
[ 
	KnownType 
( 
typeof 
( 
Guid 
) 
) 
] 
[ 
	KnownType 
( 
typeof 
( 
PropertyBag !
)! "
)" #
]# $
public 

class 
CallContext 
: $
ILogicalThreadAffinative 7
,7 8
ISerializable9 F
{ 
Guid 
? 
	_deviceId 
; 
Guid 
	_ticketid 
; 
Guid 
_userid 
; 
DateTime 
_createTime 
, 
	_lifeTime '
;' (
PropertyBag 
_properties 
;  
string 
	_username 
= 
string !
.! "
Empty" '
;' (
string 
_userFullname 
; 
int   

_userLevel   
=   
$num   
;   
string!! 
[!! 
]!! 
_roles!! 
;!! 
PropertyBag"" 
	_userData"" 
;"" 
public(( 
Guid(( 
TicketId(( 
{(( 
get(( "
{((# $
return((% +
	_ticketid((, 5
;((5 6
}((7 8
}((9 :
public** 
Guid** 
UserId** 
{** 
get**  
{**! "
return**# )
_userid*** 1
;**1 2
}**3 4
}**5 6
public,, 
Guid,, 
?,, 
DeviceId,, 
{,, 
get,,  #
{,,$ %
return,,& ,
	_deviceId,,- 6
;,,6 7
},,8 9
},,: ;
public.. 
string.. 
UserName.. 
{..  
get..! $
{..% &
return..' -
	_username... 7
;..7 8
}..9 :
}..; <
public00 
string00 
UserFullName00 "
{00# $
get00% (
{00) *
return00+ 1
_userFullname002 ?
;00? @
}00A B
set00C F
{00G H
_userFullname00I V
=00W X
value00Y ^
;00^ _
}00` a
}00b c
public22 
string22 
[22 
]22 
Roles22 
{22 
get22  #
{22$ %
return22& ,
_roles22- 3
!=224 6
null227 ;
?22< =
_roles22> D
:22E F
new22G J
string22K Q
[22Q R
$num22R S
]22S T
;22T U
}22V W
}22X Y
public44 
int44 
	UserLevel44 
{44 
get44 "
{44# $
return44% +

_userLevel44, 6
;446 7
}448 9
}44: ;
public66 
DateTime66 

CreateTime66 "
{66# $
get66% (
{66) *
return66+ 1
_createTime662 =
;66= >
}66? @
}66A B
public77 
DateTime77 
LifeTime77  
{77! "
get77# &
{77' (
return77) /
	_lifeTime770 9
;779 :
}77; <
set77= @
{77A B
	_lifeTime77C L
=77M N
value77O T
;77T U
}77V W
}77X Y
public99 
TimeSpan99 
Duration99  
{99! "
get99# &
{99' (
return99) /
(990 1
(991 2
TimeSpan992 :
)99: ;
(99; <
DateTime99< D
.99D E
Now99E H
-99I J
_createTime99K V
)99V W
)99W X
;99X Y
}99Z [
}99\ ]
public;; 
bool;; 
IsAuthenticated;; #
{<< 	
get== 
{>> 
return?? 
true?? 
;?? 
}AA 
}BB 	
publicCC 
boolCC 
IsAdminCC 
{CC 
getCC !
{CC" #
returnCC$ *
IsInRoleCC+ 3
(CC3 4
	AdminRoleCC4 =
)CC= >
;CC> ?
}CC@ A
}CCB C
publicEE 
PropertyBagEE 
UserDataEE #
{EE$ %
getEE& )
{EE* +
returnEE, 2
	_userDataEE3 <
;EE< =
}EE> ?
}EE@ A
publicGG 
PropertyBagGG 

PropertiesGG %
{GG& '
getGG( +
{GG, -
returnGG. 4
_propertiesGG5 @
;GG@ A
}GGB C
}GGD E
publicNN 
CallContextNN 
(NN 
GuidNN 
ticketidNN  (
,NN( )
GuidNN* .
useridNN/ 5
,NN5 6
GuidNN7 ;
?NN; <
deviceIdNN= E
,NNE F
PropertyBagNNG R

propertiesNNS ]
,NN] ^
stringOO 
usernameOO 
,OO 
stringOO #
fullnameOO$ ,
,OO, -
stringOO. 4
[OO4 5
]OO5 6
rolesOO7 <
,OO< =
PropertyBagOO> I

uservaluesOOJ T
,OOT U
DateTimeOOV ^
lifetimeOO_ g
,OOg h
intOOi l
	userlevelOOm v
=OOw x
$numOOy z
)OOz {
{PP 	
	_ticketidQQ 
=QQ 
ticketidQQ  
;QQ  !
	_deviceIdRR 
=RR 
deviceIdRR  
;RR  !

_userLevelSS 
=SS 
	userlevelSS "
;SS" #
_useridTT 
=TT 
useridTT 
;TT 
_rolesUU 
=UU 
rolesUU 
;UU 
_propertiesVV 
=VV 

propertiesVV $
??VV% '
newVV( +
PropertyBagVV, 7
(VV7 8
)VV8 9
;VV9 :
	_usernameWW 
=WW 
usernameWW  
;WW  !
_userFullnameXX 
=XX 
stringXX "
.XX" #
IsNullOrEmptyXX# 0
(XX0 1
fullnameXX1 9
)XX9 :
?XX; <
usernameXX= E
:XXF G
fullnameXXH P
;XXP Q
_createTimeYY 
=YY 
DateTimeYY "
.YY" #
NowYY# &
;YY& '
	_lifeTimeZZ 
=ZZ 
lifetimeZZ  
;ZZ  !
_properties[[ 
=[[ 

properties[[ $
??[[% '
new[[( +
PropertyBag[[, 7
([[7 8
)[[8 9
;[[9 :
	_userData\\ 
=\\ 

uservalues\\ "
??\\# %
new\\& )
PropertyBag\\* 5
(\\5 6
)\\6 7
;\\7 8
}]] 	
publicdd 
voiddd 
Activatedd 
(dd 
)dd 
{ee 	
ifff 
(ff 
IsReadyff 
)ff 
{gg 
ifhh 
(hh 
Currenthh 
.hh 
TicketIdhh $
!=hh% '
thishh( ,
.hh, -
TicketIdhh- 5
)hh5 6
Currentii 
.ii 

Deactivateii &
(ii& '
)ii' (
;ii( )
elsejj 
returnkk 
;kk 
}ll 
Currentmm 
=mm 
thismm 
;mm 
Systemnn 
.nn 
	Threadingnn 
.nn 
Threadnn #
.nn# $
CurrentPrincipalnn$ 4
=nn5 6
newnn7 :
MiraPrincipalnn; H
(nnH I
thisnnI M
)nnM N
;nnN O
}oo 	
publicrr 
voidrr 
Saverr 
(rr 
)rr 
{ss 	
Applicationtt 
.tt 
Currenttt 
.tt  
SecurityServicett  /
.tt/ 0

SaveTickettt0 :
(tt: ;
thistt; ?
)tt? @
;tt@ A
}uu 	
publicvv 
voidvv 

Deactivatevv 
(vv 
)vv  
{ww 	
Savezz 
(zz 
)zz 
;zz 
Current{{ 
={{ 
null{{ 
;{{ 
if|| 
(|| 
Deactivated|| 
!=|| 
null|| #
)||# $
Deactivated}} 
(}} 
this}}  
)}}  !
;}}! "
}~~ 	
public 
void 
Logout 
( 
) 
{
ÄÄ 	
Application
ÅÅ 
.
ÅÅ 
Current
ÅÅ 
.
ÅÅ  
SecurityService
ÅÅ  /
.
ÅÅ/ 0
DeleteTicket
ÅÅ0 <
(
ÅÅ< =
	_ticketid
ÅÅ= F
)
ÅÅF G
;
ÅÅG H
Current
ÇÇ 
=
ÇÇ 
null
ÇÇ 
;
ÇÇ 
}
ÉÉ 	
public
àà 
void
àà 
	CheckRole
àà 
(
àà 
string
àà $
role
àà% )
)
àà) *
{
ââ 	
	CheckRole
ää 
(
ää 
role
ää 
,
ää 
role
ää  
.
ää  !
ToString
ää! )
(
ää) *
)
ää* +
)
ää+ ,
;
ää, -
}
ãã 	
public
åå 
void
åå 
	CheckRole
åå 
(
åå 
string
åå $
role
åå% )
,
åå) *
string
åå+ 1
format
åå2 8
,
åå8 9
params
åå: @
string
ååA G
[
ååG H
]
ååH I
args
ååJ N
)
ååN O
{
çç 	
if
éé 
(
éé 
!
éé 
IsInRole
éé 
(
éé 
role
éé 
)
éé 
)
éé  
throw
èè 
new
èè 
System
èè  
.
èè  !
Security
èè! )
.
èè) *
SecurityException
èè* ;
(
èè; <
string
èè< B
.
èèB C
Format
èèC I
(
èèI J
format
èèJ P
,
èèP Q
args
èèR V
)
èèV W
)
èèW X
;
èèX Y
}
êê 	
public
ïï 
const
ïï 
string
ïï 
	AdminRole
ïï %
=
ïï& '
$str
ïï( /
;
ïï/ 0
public
ññ 
bool
ññ 
IsInRole
ññ 
(
ññ 
string
ññ #
role
ññ$ (
)
ññ( )
{
óó 	
if
òò 
(
òò 
role
òò 
==
òò 
	AdminRole
òò !
)
òò! "
return
ôô 
_roles
ôô 
!=
ôô  
null
ôô! %
?
ôô& '
_roles
ôô( .
.
ôô. /
Any
ôô/ 2
(
ôô2 3
a
ôô3 4
=>
ôô5 7
a
ôô8 9
==
ôô: <
	AdminRole
ôô= F
)
ôôF G
:
ôôH I
true
ôôJ N
;
ôôN O
else
öö 
return
õõ 
_roles
õõ 
!=
õõ  
null
õõ! %
?
õõ& '
_roles
õõ( .
.
õõ. /
Any
õõ/ 2
(
õõ2 3
a
õõ3 4
=>
õõ5 7
a
õõ8 9
==
õõ: <
	AdminRole
õõ= F
||
õõG I
a
õõJ K
==
õõL N
role
õõO S
)
õõS T
:
õõU V
true
õõW [
;
õõ[ \
}
ùù 	
public
¢¢ 
static
¢¢ 
event
¢¢ 
Action
¢¢ "
<
¢¢" #
CallContext
¢¢# .
>
¢¢. /
Deactivated
¢¢0 ;
;
¢¢; <
public
§§ 
static
§§ 
bool
§§ 
IsReady
§§ "
{
•• 	
get
¶¶ 
{
ßß 
return
®® 
Application
®® "
.
®®" #
Current
®®# *
.
®®* +
ContextProvider
®®+ :
.
®®: ;
IsReady
®®; B
;
®®B C
}
©© 
}
™™ 	
public
ÆÆ 
static
ÆÆ 
CallContext
ÆÆ !
Current
ÆÆ" )
{
ØØ 	
get
∞∞ 
{
±± 
return
≤≤ 
Application
≤≤ "
.
≤≤" #
Current
≤≤# *
.
≤≤* +
ContextProvider
≤≤+ :
.
≤≤: ;
Context
≤≤; B
;
≤≤B C
}
≥≥ 
private
¥¥ 
set
¥¥ 
{
µµ 
Application
∂∂ 
.
∂∂ 
Current
∂∂ #
.
∂∂# $
ContextProvider
∂∂$ 3
.
∂∂3 4
Context
∂∂4 ;
=
∂∂< =
value
∂∂> C
;
∂∂C D
}
∑∑ 
}
∏∏ 	
static
ºº 
public
ºº 
Task
ºº #
CreateTaskWithContext
ºº 0
(
ºº0 1
Action
ºº1 7
task
ºº8 <
)
ºº< =
{
ΩΩ 	
return
ææ #
CreateTaskWithContext
ææ (
(
ææ( )
task
ææ) -
,
ææ- .
System
ææ/ 5
.
ææ5 6
	Threading
ææ6 ?
.
ææ? @
CancellationToken
ææ@ Q
.
ææQ R
None
ææR V
)
ææV W
;
ææW X
}
øø 	
static
¡¡ 
public
¡¡ 
Task
¡¡ #
CreateTaskWithContext
¡¡ 0
(
¡¡0 1
Action
¡¡1 7
task
¡¡8 <
,
¡¡< =
CancellationToken
¡¡> O
ctoken
¡¡P V
)
¡¡V W
{
¬¬ 	
var
√√ 
cc
√√ 
=
√√ 
CallContext
√√  
.
√√  !
IsReady
√√! (
?
√√) *
CallContext
√√+ 6
.
√√6 7
Current
√√7 >
:
√√? @
null
√√A E
;
√√E F
return
≈≈ 
new
≈≈ 
Task
≈≈ 
(
≈≈ 
delegate
≈≈ $
{
∆∆ 
if
»» 
(
»» 
cc
»» 
!=
»» 
null
»» 
)
»» 
cc
…… 
.
…… 
Activate
…… 
(
……  
)
……  !
;
……! "
try
   
{
ÀÀ 
task
ÃÃ 
(
ÃÃ 
)
ÃÃ 
;
ÃÃ 
}
ÕÕ 
finally
ŒŒ 
{
œœ 
if
–– 
(
–– 
cc
–– 
!=
–– 
null
–– "
)
––" #
CallContext
—— #
.
——# $
Current
——$ +
=
——, -
null
——. 2
;
——2 3
}
““ 
}
‘‘ 
,
‘‘ 
ctoken
‘‘ 
,
‘‘ !
TaskCreationOptions
‘‘ *
.
‘‘* +
LongRunning
‘‘+ 6
)
‘‘6 7
;
‘‘I J
}
’’ 	
CallContext
€€ 
(
€€ 
SerializationInfo
€€ %
info
€€& *
,
€€* +
StreamingContext
€€, <
context
€€= D
)
€€D E
{
‹‹ 	
	_ticketid
›› 
=
›› 
new
›› 
Guid
››  
(
››  !
info
››! %
.
››% &
	GetString
››& /
(
››/ 0
$str
››0 :
)
››: ;
)
››; <
;
››< =
_userid
ﬁﬁ 
=
ﬁﬁ 
new
ﬁﬁ 
Guid
ﬁﬁ 
(
ﬁﬁ 
info
ﬁﬁ #
.
ﬁﬁ# $
	GetString
ﬁﬁ$ -
(
ﬁﬁ- .
$str
ﬁﬁ. 6
)
ﬁﬁ6 7
)
ﬁﬁ7 8
;
ﬁﬁ8 9
_createTime
ﬂﬂ 
=
ﬂﬂ 
info
ﬂﬂ 
.
ﬂﬂ 
GetDateTime
ﬂﬂ *
(
ﬂﬂ* +
$str
ﬂﬂ+ 7
)
ﬂﬂ7 8
;
ﬂﬂ8 9
	_lifeTime
‡‡ 
=
‡‡ 
info
‡‡ 
.
‡‡ 
GetDateTime
‡‡ (
(
‡‡( )
$str
‡‡) 3
)
‡‡3 4
;
‡‡4 5
	_deviceId
·· 
=
·· 
new
·· 
Guid
··  
(
··  !
info
··! %
.
··% &
	GetString
··& /
(
··/ 0
$str
··0 :
)
··: ;
)
··; <
;
··< =
_roles
‚‚ 
=
‚‚ 
(
‚‚ 
string
‚‚ 
[
‚‚ 
]
‚‚ 
)
‚‚ 
info
‚‚ #
.
‚‚# $
GetValue
‚‚$ ,
(
‚‚, -
$str
‚‚- 4
,
‚‚4 5
typeof
‚‚6 <
(
‚‚< =
string
‚‚= C
[
‚‚C D
]
‚‚D E
)
‚‚E F
)
‚‚F G
;
‚‚G H
_properties
„„ 
=
„„ 
(
„„ 
PropertyBag
„„ &
)
„„& '
info
„„' +
.
„„+ ,
GetValue
„„, 4
(
„„4 5
$str
„„5 <
,
„„< =
typeof
„„> D
(
„„D E
PropertyBag
„„E P
)
„„P Q
)
„„Q R
;
„„R S
}
‰‰ 	
public
ÊÊ 
void
ÊÊ 
GetObjectData
ÊÊ !
(
ÊÊ! "
SerializationInfo
ÊÊ" 3
info
ÊÊ4 8
,
ÊÊ8 9
StreamingContext
ÊÊ: J
context
ÊÊK R
)
ÊÊR S
{
ÁÁ 	
info
ËË 
.
ËË 
AddValue
ËË 
(
ËË 
$str
ËË $
,
ËË$ %
	_ticketid
ËË& /
,
ËË/ 0
typeof
ËË1 7
(
ËË7 8
Guid
ËË8 <
)
ËË< =
)
ËË= >
;
ËË> ?
info
ÈÈ 
.
ÈÈ 
AddValue
ÈÈ 
(
ÈÈ 
$str
ÈÈ "
,
ÈÈ" #
_userid
ÈÈ$ +
,
ÈÈ+ ,
typeof
ÈÈ- 3
(
ÈÈ3 4
Guid
ÈÈ4 8
)
ÈÈ8 9
)
ÈÈ9 :
;
ÈÈ: ;
info
ÍÍ 
.
ÍÍ 
AddValue
ÍÍ 
(
ÍÍ 
$str
ÍÍ $
,
ÍÍ$ %
	_deviceId
ÍÍ& /
,
ÍÍ/ 0
typeof
ÍÍ1 7
(
ÍÍ7 8
Guid
ÍÍ8 <
)
ÍÍ< =
)
ÍÍ= >
;
ÍÍ> ?
info
ÎÎ 
.
ÎÎ 
AddValue
ÎÎ 
(
ÎÎ 
$str
ÎÎ &
,
ÎÎ& '
_createTime
ÎÎ( 3
)
ÎÎ3 4
;
ÎÎ4 5
info
ÏÏ 
.
ÏÏ 
AddValue
ÏÏ 
(
ÏÏ 
$str
ÏÏ $
,
ÏÏ$ %
	_lifeTime
ÏÏ& /
)
ÏÏ/ 0
;
ÏÏ0 1
info
ÌÌ 
.
ÌÌ 
AddValue
ÌÌ 
(
ÌÌ 
$str
ÌÌ !
,
ÌÌ! "
new
ÌÌ# &
string
ÌÌ' -
[
ÌÌ- .
]
ÌÌ. /
{
ÌÌ0 1
$str
ÌÌ2 8
}
ÌÌ9 :
,
ÌÌ: ;
typeof
ÌÌ< B
(
ÌÌB C
string
ÌÌC I
[
ÌÌI J
]
ÌÌJ K
)
ÌÌK L
)
ÌÌL M
;
ÌÌM N
info
ÓÓ 
.
ÓÓ 
AddValue
ÓÓ 
(
ÓÓ 
$str
ÓÓ !
,
ÓÓ! "
_properties
ÓÓ# .
)
ÓÓ. /
;
ÓÓ/ 0
}
ÔÔ 	
}
ÒÒ 
public
ÚÚ 

	interface
ÚÚ "
ICallContextProvider
ÚÚ )
{
ÛÛ 
CallContext
ÙÙ 
Context
ÙÙ 
{
ÙÙ 
get
ÙÙ !
;
ÙÙ! "
set
ÙÙ# &
;
ÙÙ& '
}
ÙÙ( )
bool
ıı 
IsReady
ıı 
{
ıı 
get
ıı 
;
ıı 
}
ıı 
}
ˆˆ 
[
¯¯ 
Serializable
¯¯ 
]
¯¯ 
public
˘˘ 

class
˘˘ 
PropertyBag
˘˘ 
:
˘˘ 
ISerializable
˘˘ ,
{
˙˙ 
public
˚˚ 
bool
˚˚ 

HasChanged
˚˚ 
{
˚˚  
get
˚˚! $
;
˚˚$ %
set
˚˚& )
;
˚˚) *
}
˚˚+ ,
	Hashtable
¸¸ 

Properties
¸¸ 
;
¸¸ 
public
ˇˇ 
PropertyBag
ˇˇ 
(
ˇˇ 
	Hashtable
ˇˇ $
ht
ˇˇ% '
)
ˇˇ' (
{
ÄÄ 	

Properties
ÅÅ 
=
ÅÅ 
ht
ÅÅ 
;
ÅÅ 
}
ÉÉ 	
public
èè 
T
èè 
Get
èè 
<
èè 
T
èè 
>
èè 
(
èè 
string
èè 
name
èè #
,
èè# $
T
èè% &
def
èè' *
)
èè* +
{
êê 	
object
ëë 
t
ëë 
=
ëë 

Properties
ëë !
[
ëë! "
name
ëë" &
]
ëë& '
;
ëë' (
if
íí 
(
íí 
t
íí 
==
íí 
null
íí 
||
íí 
!
íí 
(
íí 
t
íí  
is
íí! #
T
íí$ %
)
íí% &
)
íí& '
{
ìì 
t
îî 
=
îî 
def
îî 
;
îî 
Set
ïï 
(
ïï 
name
ïï 
,
ïï 
t
ïï 
)
ïï 
;
ïï 
}
ññ 
return
óó 
(
óó 
T
óó 
)
óó 
t
óó 
;
óó 
}
òò 	
public
ôô 
void
ôô 
Set
ôô 
(
ôô 
string
ôô 
name
ôô #
,
ôô# $
object
ôô% +
value
ôô, 1
)
ôô1 2
{
öö 	
if
õõ 
(
õõ 

Properties
õõ 
[
õõ 
name
õõ 
]
õõ  
!=
õõ! #
value
õõ$ )
)
õõ) *
{
úú 

Properties
ùù 
[
ùù 
name
ùù 
]
ùù  
=
ùù! "
value
ùù# (
;
ùù( )

HasChanged
ûû 
=
ûû 
true
ûû !
;
ûû! "
}
üü 
}
†† 	
public
££ 
PropertyBag
££ 
(
££ 
)
££ 
{
§§ 	

Properties
•• 
=
•• 
new
•• 
	Hashtable
•• &
(
••& '
)
••' (
;
••( )
}
¶¶ 	
PropertyBag
ßß 
(
ßß 
SerializationInfo
ßß %
info
ßß& *
,
ßß* +
StreamingContext
ßß, <
context
ßß= D
)
ßßD E
{
®® 	

Properties
©© 
=
©© 
new
©© 
	Hashtable
©© &
(
©©& '
)
©©' (
;
©©( )
foreach
™™ 
(
™™ 
var
™™ 
item
™™ 
in
™™  
info
™™! %
)
™™% &
{
´´ 

Properties
¨¨ 
[
¨¨ 
item
¨¨ 
.
¨¨  
Name
¨¨  $
]
¨¨$ %
=
¨¨& '
item
¨¨( ,
.
¨¨, -
Value
¨¨- 2
;
¨¨2 3
}
≠≠ 
}
ØØ 	
public
∞∞ 
void
∞∞ 
GetObjectData
∞∞ !
(
∞∞! "
SerializationInfo
∞∞" 3
info
∞∞4 8
,
∞∞8 9
StreamingContext
∞∞: J
context
∞∞K R
)
∞∞R S
{
±± 	
foreach
≤≤ 
(
≤≤ 
string
≤≤ 
item
≤≤  
in
≤≤! #

Properties
≤≤$ .
.
≤≤. /
Keys
≤≤/ 3
)
≤≤3 4
{
≥≥ 
var
¥¥ 
v
¥¥ 
=
¥¥ 

Properties
¥¥ "
[
¥¥" #
item
¥¥# '
]
¥¥' (
;
¥¥( )
if
µµ 
(
µµ 
v
µµ 
!=
µµ 
null
µµ 
)
µµ 
info
∂∂ 
.
∂∂ 
AddValue
∂∂ !
(
∂∂! "
item
∂∂" &
,
∂∂& '
v
∂∂( )
,
∂∂) *
v
∂∂+ ,
.
∂∂, -
GetType
∂∂- 4
(
∂∂4 5
)
∂∂5 6
)
∂∂6 7
;
∂∂7 8
}
∑∑ 
}
∏∏ 	
}
ªª 
class
ææ 	
MiraPrincipal
ææ
 
:
ææ 

IPrincipal
ææ $
,
ææ$ %
ISerializable
ææ& 3
{
øø 
CallContext
¿¿ 
ctx
¿¿ 
;
¿¿ 
public
¡¡ 
MiraPrincipal
¡¡ 
(
¡¡ 
CallContext
¡¡ (
ctx
¡¡) ,
)
¡¡, -
{
¬¬ 	
this
√√ 
.
√√ 
ctx
√√ 
=
√√ 
ctx
√√ 
;
√√ 
	_identity
ƒƒ 
=
ƒƒ 
new
ƒƒ 
MiraIdentity
ƒƒ (
(
ƒƒ( )
ctx
ƒƒ) ,
)
ƒƒ, -
;
ƒƒ- .
}
≈≈ 	
public
∆∆ 
MiraPrincipal
∆∆ 
(
∆∆ 
SerializationInfo
∆∆ .
info
∆∆/ 3
,
∆∆3 4
StreamingContext
∆∆5 E
context
∆∆F M
)
∆∆M N
{
«« 	
var
…… 
t
…… 
=
…… 
GetType
…… 
(
…… 
)
…… 
;
…… 
var
ÃÃ !
serializableMembers
ÃÃ #
=
ÃÃ$ %
FormatterServices
ÃÃ& 7
.
ÃÃ7 8$
GetSerializableMembers
ÃÃ8 N
(
ÃÃN O
t
ÃÃO P
)
ÃÃP Q
;
ÃÃQ R
FormatterServices
ŒŒ 
.
ŒŒ #
PopulateObjectMembers
ŒŒ 3
(
ŒŒ3 4
this
ŒŒ4 8
,
ŒŒ8 9!
serializableMembers
ŒŒ: M
,
ŒŒM N!
serializableMembers
œœ #
.
œœ# $
Select
œœ$ *
(
œœ* +
a
œœ+ ,
=>
œœ- /
{
–– 
return
—— 
info
—— #
.
——# $
GetValue
——$ ,
(
——, -
a
——- .
.
——. /
Name
——/ 3
,
——3 4
a
——5 6
is
——7 9
	FieldInfo
——: C
?
——D E
(
——F G
a
——G H
as
——I K
	FieldInfo
——L U
)
——U V
.
——V W
	FieldType
——W `
:
——a b
(
——c d
a
——d e
as
——f h
PropertyInfo
——i u
)
——u v
.
——v w
PropertyType——w É
)——É Ñ
;——Ñ Ö
}
““ 
)
““ 
.
““ 
ToArray
““ 
(
““ 
)
““  
)
““  !
;
““! "
}
”” 	
public
‘‘ 
void
‘‘ 
GetObjectData
‘‘ !
(
‘‘! "
SerializationInfo
‘‘" 3
info
‘‘4 8
,
‘‘8 9
StreamingContext
‘‘: J
context
‘‘K R
)
‘‘R S
{
’’ 	
object
◊◊ 
generic
◊◊ 
=
◊◊ 
this
◊◊ !
;
◊◊! "
if
ÿÿ 
(
ÿÿ 
context
ÿÿ 
.
ÿÿ 
State
ÿÿ 
==
ÿÿ  $
StreamingContextStates
ÿÿ! 7
.
ÿÿ7 8
CrossAppDomain
ÿÿ8 F
)
ÿÿF G
{
ŸŸ 
generic
⁄⁄ 
=
⁄⁄ 
new
⁄⁄ 
GenericPrincipal
⁄⁄ .
(
⁄⁄. /
new
⁄⁄/ 2
MiraIdentity
⁄⁄3 ?
(
⁄⁄? @
ctx
⁄⁄@ C
)
⁄⁄C D
,
⁄⁄D E
ctx
⁄⁄F I
.
⁄⁄I J
Roles
⁄⁄J O
)
⁄⁄O P
;
⁄⁄P Q
}
‹‹ 
info
›› 
.
›› 
SetType
›› 
(
›› 
generic
››  
.
››  !
GetType
››! (
(
››( )
)
››) *
)
››* +
;
››+ ,
var
ﬂﬂ !
serializableMembers
ﬂﬂ #
=
ﬂﬂ$ %
FormatterServices
ﬂﬂ& 7
.
ﬂﬂ7 8$
GetSerializableMembers
ﬂﬂ8 N
(
ﬂﬂN O
generic
ﬂﬂO V
.
ﬂﬂV W
GetType
ﬂﬂW ^
(
ﬂﬂ^ _
)
ﬂﬂ_ `
)
ﬂﬂ` a
;
ﬂﬂa b
var
··  
serializableValues
·· "
=
··# $
FormatterServices
··% 6
.
··6 7
GetObjectData
··7 D
(
··D E
generic
··E L
,
··L M!
serializableMembers
··N a
)
··a b
;
··b c
for
„„ 
(
„„ 
int
„„ 
i
„„ 
=
„„ 
$num
„„ 
;
„„ 
i
„„ 
<
„„ !
serializableMembers
„„  3
.
„„3 4
Length
„„4 :
;
„„: ;
i
„„< =
++
„„= ?
)
„„? @
info
ÂÂ 
.
ÂÂ 
AddValue
ÂÂ 
(
ÂÂ !
serializableMembers
ÂÂ 1
[
ÂÂ1 2
i
ÂÂ2 3
]
ÂÂ3 4
.
ÂÂ4 5
Name
ÂÂ5 9
,
ÂÂ9 : 
serializableValues
ÂÂ; M
[
ÂÂM N
i
ÂÂN O
]
ÂÂO P
)
ÂÂP Q
;
ÂÂQ R
}
ËË 	
private
ÍÍ 
	IIdentity
ÍÍ 
	_identity
ÍÍ #
;
ÍÍ# $
public
ÎÎ 
	IIdentity
ÎÎ 
Identity
ÎÎ !
{
ÏÏ 	
get
ÌÌ 
{
ÌÌ 
return
ÌÌ 
	_identity
ÌÌ "
;
ÌÌ" #
}
ÌÌ$ %
}
ÓÓ 	
public
 
bool
 
IsInRole
 
(
 
string
 #
role
$ (
)
( )
{
ÒÒ 	
return
ÚÚ 
ctx
ÚÚ 
.
ÚÚ 
IsInRole
ÚÚ 
(
ÚÚ  
role
ÚÚ  $
)
ÚÚ$ %
;
ÚÚ% &
}
ÛÛ 	
}
ÙÙ 
class
ıı 	
MiraIdentity
ıı
 
:
ıı 
	IIdentity
ıı "
,
ıı" #
ISerializable
ıı$ 1
{
ˆˆ 
CallContext
¯¯ 
ctx
¯¯ 
;
¯¯ 
public
˘˘ 
MiraIdentity
˘˘ 
(
˘˘ 
CallContext
˘˘ '
ctx
˘˘( +
)
˘˘+ ,
{
˙˙ 	
this
˚˚ 
.
˚˚ 
ctx
˚˚ 
=
˚˚ 
ctx
˚˚ 
;
˚˚ 
}
¸¸ 	
public
˝˝ 
MiraIdentity
˝˝ 
(
˝˝ 
SerializationInfo
˝˝ -
info
˝˝. 2
,
˝˝2 3
StreamingContext
˝˝4 D
context
˝˝E L
)
˝˝L M
{
˛˛ 	
var
ÄÄ 
t
ÄÄ 
=
ÄÄ 
GetType
ÄÄ 
(
ÄÄ 
)
ÄÄ 
;
ÄÄ 
var
ÉÉ !
serializableMembers
ÉÉ #
=
ÉÉ$ %
FormatterServices
ÉÉ& 7
.
ÉÉ7 8$
GetSerializableMembers
ÉÉ8 N
(
ÉÉN O
t
ÉÉO P
)
ÉÉP Q
;
ÉÉQ R
FormatterServices
ÖÖ 
.
ÖÖ #
PopulateObjectMembers
ÖÖ 3
(
ÖÖ3 4
this
ÖÖ4 8
,
ÖÖ8 9!
serializableMembers
ÖÖ: M
,
ÖÖM N!
serializableMembers
ÜÜ #
.
ÜÜ# $
Select
ÜÜ$ *
(
ÜÜ* +
a
ÜÜ+ ,
=>
ÜÜ- /
{
áá 
return
àà 
info
àà 
.
àà  
GetValue
àà  (
(
àà( )
a
àà) *
.
àà* +
Name
àà+ /
,
àà/ 0
a
àà1 2
is
àà3 5
	FieldInfo
àà6 ?
?
àà@ A
(
ààB C
a
ààC D
as
ààE G
	FieldInfo
ààH Q
)
ààQ R
.
ààR S
	FieldType
ààS \
:
àà] ^
(
àà_ `
a
àà` a
as
ààb d
PropertyInfo
ààe q
)
ààq r
.
ààr s
PropertyType
ààs 
)àà Ä
;ààÄ Å
}
ââ 
)
ââ 
.
ââ 
ToArray
ââ 
(
ââ 
)
ââ 
)
ââ 
;
ââ 
}
ää 	
public
ãã 
void
ãã 
GetObjectData
ãã !
(
ãã! "
SerializationInfo
ãã" 3
info
ãã4 8
,
ãã8 9
StreamingContext
ãã: J
context
ããK R
)
ããR S
{
åå 	
object
èè 
generic
èè 
=
èè 
this
èè !
;
èè! "
if
êê 
(
êê 
context
êê 
.
êê 
State
êê 
==
êê  $
StreamingContextStates
êê! 7
.
êê7 8
CrossAppDomain
êê8 F
)
êêF G
{
ëë 
generic
íí 
=
íí 
new
íí 
GenericIdentity
íí -
(
íí- .
Name
íí. 2
,
íí2 3 
AuthenticationType
íí4 F
)
ííF G
;
ííG H
}
îî 
info
ïï 
.
ïï 
SetType
ïï 
(
ïï 
generic
ïï  
.
ïï  !
GetType
ïï! (
(
ïï( )
)
ïï) *
)
ïï* +
;
ïï+ ,
var
óó !
serializableMembers
óó #
=
óó$ %
FormatterServices
óó& 7
.
óó7 8$
GetSerializableMembers
óó8 N
(
óóN O
generic
óóO V
.
óóV W
GetType
óóW ^
(
óó^ _
)
óó_ `
)
óó` a
;
óóa b
var
ôô  
serializableValues
ôô "
=
ôô# $
FormatterServices
ôô% 6
.
ôô6 7
GetObjectData
ôô7 D
(
ôôD E
generic
ôôE L
,
ôôL M!
serializableMembers
ôôN a
)
ôôa b
;
ôôb c
for
õõ 
(
õõ 
int
õõ 
i
õõ 
=
õõ 
$num
õõ 
;
õõ 
i
õõ 
<
õõ !
serializableMembers
õõ  3
.
õõ3 4
Length
õõ4 :
;
õõ: ;
i
õõ< =
++
õõ= ?
)
õõ? @
info
ùù 
.
ùù 
AddValue
ùù 
(
ùù !
serializableMembers
ùù 1
[
ùù1 2
i
ùù2 3
]
ùù3 4
.
ùù4 5
Name
ùù5 9
,
ùù9 : 
serializableValues
ùù; M
[
ùùM N
i
ùùN O
]
ùùO P
)
ùùP Q
;
ùùQ R
}
†† 	
public
¢¢ 
string
¢¢  
AuthenticationType
¢¢ (
{
££ 	
get
§§ 
{
§§ 
return
§§ 
$str
§§ 
;
§§  
}
§§! "
}
•• 	
public
ßß 
bool
ßß 
IsAuthenticated
ßß #
{
®® 	
get
©© 
{
©© 
return
©© 
ctx
©© 
.
©© 
IsAuthenticated
©© ,
;
©©, -
}
©©. /
}
™™ 	
public
¨¨ 
string
¨¨ 
Name
¨¨ 
{
≠≠ 	
get
ÆÆ 
{
ÆÆ 
return
ÆÆ 
ctx
ÆÆ 
.
ÆÆ 
UserName
ÆÆ %
;
ÆÆ% &
}
ÆÆ' (
}
ØØ 	
}
∞∞ 
}≤≤ Ó
D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Core\ISecurityService.cs
	namespace		 	
Infoline		
 
{

 
[ 
ServiceContract 
] 
public 

	interface 
ISecurityService %
:& '
IService( 0
{ 
[ 	
OperationContract	 
] 
[ 	
WebGet	 
] 
bool 
ChangePassword 
( 
string "
userid# )
,) *
string+ 1
password2 :
,: ;
string< B
newpasswordC N
)N O
;O P
[ 	
OperationContract	 
] 
[ 	
WebGet	 
] 
LoginResult 
Login 
( 
string  
userid! '
,' (
string) /
password0 8
,8 9
Guid: >
?> ?
deviceId@ H
,H I
stringJ P
	IPAddressQ Z
)Z [
;[ \
[ 	
OperationContract	 
] 
[ 	
	WebInvoke	 
] 
bool 
IsInRole 
( 
string 
userid #
,# $
string% +
role, 0
)0 1
;1 2
[ 	
OperationContract	 
] 
[ 	
	WebInvoke	 
( 
Method 
= 
$str !
,! "
UriTemplate# .
=/ 0
$str1 9
)9 :
]: ;
void 

SaveTicket 
( 
CallContext #
ctx$ '
)' (
;( )
[!! 	
OperationContract!!	 
]!! 
["" 	
WebGet""	 
("" 
UriTemplate"" 
="" 
$str"" .
)"". /
]""/ 0
CallContext## 

LoadTicket## 
(## 
Guid## #
id##$ &
,##& '
string##( .
path##/ 3
=##4 5
$str##6 8
)##8 9
;##9 :
[%% 	
OperationContract%%	 
]%% 
[&& 	
	WebInvoke&&	 
(&& 
Method&& 
=&& 
$str&& $
,&&$ %
UriTemplate&&& 1
=&&2 3
$str&&4 D
)&&D E
]&&E F
void'' 
DeleteTicket'' 
('' 
Guid'' 
id'' !
)''! "
;''" #
int)) 

TicketLife)) 
{)) 
get)) 
;)) 
set)) !
;))! "
}))# $
}** 
public,, 

enum,, 
LoginResult,, 
{-- 
OK.. 

,..
 
InvalidUser// 
,// 
InvalidPassword00 
,00 
AccountDisabled11 
,11 !
RequiresPasswordChage22 
,22 
UnknownDevice33 
,33 
UserExpired44 
}55 
}99 ﬂÎ
yD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\Create.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Database %
{		 
public 

	interface 
ITableCreate !
{ 
ResultStatus 
Execute 
( 
) 
; 
ITableCreate 
Column 
( 
TableColumn '
column( .
). /
;/ 0
ITableCreate 
SetPrimaryKey "
(" #
params# )
string* 0
[0 1
]1 2
column3 9
)9 :
;: ;
ITableCreate 
CreateIndex  
(  !
string! '
[' (
]( )
columns* 1
,1 2
bool3 7
isUnique8 @
=A B
falseC H
)H I
;I J
} 
public 

class 
TableCreate 
: 
ITableCreate +
{ 
private 
	TableInfo 

_tableInfo $
;$ %
private 
ITableCreator 
_creator &
;& '
public 
TableCreate 
( 
string !
	tableName" +
,+ ,
string- 3

schemaName4 >
,> ?
ITableCreator@ M
creatorN U
)U V
{ 	

_tableInfo 
= 
new 
	TableInfo &
(& '
)' (
;( )

_tableInfo 
. 
	TableName  
=! "
	tableName# ,
;, -

_tableInfo 
. 

SchemaName !
=" #

schemaName$ .
;. /
_creator 
= 
creator 
; 
}   	
public!! 
ITableCreate!! 
Column!! "
(!!" #
TableColumn!!# .
column!!/ 5
)!!5 6
{"" 	

_tableInfo## 
.## 
Columns## 
.## 
Add## "
(##" #
column### )
)##) *
;##* +
return$$ 
this$$ 
;$$ 
}%% 	
public&& 
ITableCreate&& 
SetPrimaryKey&& )
(&&) *
params&&* 0
string&&1 7
[&&7 8
]&&8 9
column&&: @
)&&@ A
{'' 	

_tableInfo(( 
.(( 

PrimaryKey(( !
.((! "
AddRange((" *
(((* +
column((+ 1
)((1 2
;((2 3
return)) 
this)) 
;)) 
}** 	
public++ 
ITableCreate++ 
CreateIndex++ '
(++' (
string++( .
[++. /
]++/ 0
columns++1 8
,++8 9
bool++: >
isUnique++? G
=++H I
false++J O
)++O P
{,, 	

_tableInfo-- 
.-- 
Indexes-- 
.-- 
Add-- "
(--" #
new--# &

TableIndex--' 1
{--2 3
Columns--4 ;
=--< =
columns--> E
,--E F
IsUnique--G O
=--P Q
isUnique--R Z
}--[ \
)--\ ]
;--] ^
return.. 
this.. 
;.. 
}// 	
public00 
ResultStatus00 
Execute00 #
(00# $
)00$ %
{11 	
return22 
_creator22 
.22 
Create22 "
(22" #

_tableInfo22# -
)22- .
;22. /
}33 	
}44 
public66 

class66 

TableAlter66 
:66 
ITableCreate66 *
{77 
private88 
	TableInfo88 

_tableInfo88 $
;88$ %
private99 
ITableCreator99 
_creator99 &
;99& '
public;; 

TableAlter;; 
(;; 
string;;  
	tableName;;! *
,;;* +
string;;, 2

schemaName;;3 =
,;;= >
ITableCreator;;? L
creator;;M T
);;T U
{<< 	

_tableInfo== 
=== 
new== 
	TableInfo== &
(==& '
)==' (
;==( )

_tableInfo>> 
.>> 
	TableName>>  
=>>! "
	tableName>># ,
;>>, -

_tableInfo?? 
.?? 

SchemaName?? !
=??" #

schemaName??$ .
;??. /
_creator@@ 
=@@ 
creator@@ 
;@@ 
}AA 	
publicBB 
ITableCreateBB 
ColumnBB "
(BB" #
TableColumnBB# .
columnBB/ 5
)BB5 6
{CC 	

_tableInfoDD 
.DD 
ColumnsDD 
.DD 
AddDD "
(DD" #
columnDD# )
)DD) *
;DD* +
returnEE 
thisEE 
;EE 
}FF 	
publicGG 
ITableCreateGG 
SetPrimaryKeyGG )
(GG) *
paramsGG* 0
stringGG1 7
[GG7 8
]GG8 9
columnGG: @
)GG@ A
{HH 	

_tableInfoII 
.II 

PrimaryKeyII !
.II! "
AddRangeII" *
(II* +
columnII+ 1
)II1 2
;II2 3
returnJJ 
thisJJ 
;JJ 
}KK 	
publicLL 
ITableCreateLL 
CreateIndexLL '
(LL' (
stringLL( .
[LL. /
]LL/ 0
columnsLL1 8
,LL8 9
boolLL: >
isUniqueLL? G
=LLH I
falseLLJ O
)LLO P
{MM 	

_tableInfoNN 
.NN 
IndexesNN 
.NN 
AddNN "
(NN" #
newNN# &

TableIndexNN' 1
{NN2 3
ColumnsNN4 ;
=NN< =
columnsNN> E
,NNE F
IsUniqueNNG O
=NNP Q
isUniqueNNR Z
}NN[ \
)NN\ ]
;NN] ^
returnOO 
thisOO 
;OO 
}PP 	
publicQQ 
ResultStatusQQ 
ExecuteQQ #
(QQ# $
)QQ$ %
{RR 	
returnSS 
_creatorSS 
.SS 
AlterSS !
(SS! "

_tableInfoSS" ,
)SS, -
;SS- .
}TT 	
}UU 
publicWW 

	interfaceWW 
ITableCreateWW !
<WW! "
TWW" #
>WW# $
{XX 
ResultStatusYY 
ExecuteYY 
(YY 
)YY 
;YY 
ITableCreateZZ 
<ZZ 
TZZ 
>ZZ 
SetPrimaryKeyZZ %
(ZZ% &

ExpressionZZ& 0
<ZZ0 1
FuncZZ1 5
<ZZ5 6
TZZ6 7
,ZZ7 8
objectZZ9 ?
>ZZ? @
>ZZ@ A
columnsZZB I
)ZZI J
;ZZJ K
ITableCreate[[ 
<[[ 
T[[ 
>[[ 
SetDefaultValue[[ '
([[' (

Expression[[( 2
<[[2 3
Func[[3 7
<[[7 8
T[[8 9
,[[9 :
object[[; A
>[[A B
>[[B C
column[[D J
,[[J K
SqlFunctions[[L X
value[[Y ^
)[[^ _
;[[_ `
ITableCreate\\ 
<\\ 
T\\ 
>\\ 
SetDefaultValue\\ '
(\\' (

Expression\\( 2
<\\2 3
Func\\3 7
<\\7 8
T\\8 9
,\\9 :
object\\; A
>\\A B
>\\B C
column\\D J
,\\J K
string\\L R
value\\S X
)\\X Y
;\\Y Z
ITableCreate]] 
<]] 
T]] 
>]] $
SetAsAutoIncermentColumn]] 0
(]]0 1

Expression]]1 ;
<]]; <
Func]]< @
<]]@ A
T]]A B
,]]B C
int]]D G
>]]G H
>]]H I
column]]J P
,]]P Q
int]]R U
start]]V [
=]]\ ]
$num]]^ _
,]]_ `
int]]a d
	increment]]e n
=]]o p
$num]]q r
)]]r s
;]]s t
ITableCreate^^ 
<^^ 
T^^ 
>^^ $
SetAsAutoIncermentColumn^^ 0
(^^0 1

Expression^^1 ;
<^^; <
Func^^< @
<^^@ A
T^^A B
,^^B C
long^^D H
>^^H I
>^^I J
column^^K Q
,^^Q R
int^^S V
start^^W \
=^^] ^
$num^^_ `
,^^` a
int^^b e
	increment^^f o
=^^p q
$num^^r s
)^^s t
;^^t u
ITableCreate__ 
<__ 
T__ 
>__ 
CreateIndex__ #
(__# $

Expression__$ .
<__. /
Func__/ 3
<__3 4
T__4 5
,__5 6
object__7 =
>__= >
>__> ?
columns__@ G
,__G H
bool__I M
isUnique__N V
=__W X
false__Y ^
)__^ _
;___ `
}`` 
publicbb 

classbb 
TableCreatebb 
<bb 
Tbb 
>bb 
:bb  !
ITableCreatebb" .
<bb. /
Tbb/ 0
>bb0 1
{cc 
	TableInfodd 

_tableInfodd 
;dd 
ITableCreatoree 
_creatoree 
;ee 
publicgg 
TableCreategg 
(gg 
stringgg !
	tableNamegg" +
,gg+ ,
stringgg- 3

schemaNamegg4 >
,gg> ?
ITableCreatorgg@ M
creatorggN U
)ggU V
{hh 	

_tableInfoii 
=ii 
newii 
	TableInfoii &
(ii& '
)ii' (
;ii( )

_tableInfojj 
.jj 
	TableNamejj  
=jj! "
	tableNamejj# ,
;jj, -

_tableInfokk 
.kk 

SchemaNamekk !
=kk" #

schemaNamekk$ .
;kk. /
_creatorll 
=ll 
creatorll 
;ll 
foreachmm 
(mm 
varmm 
propertymm !
inmm" $
typeofmm% +
(mm+ ,
Tmm, -
)mm- .
.mm. /
GetPropertiesmm/ <
(mm< =
)mm= >
)mm> ?
{nn 

_tableInfooo 
.oo 
Columnsoo "
.oo" #
Addoo# &
(oo& '
newoo' *
TableColumnoo+ 6
{pp 

ColumnNameqq 
=qq  
propertyqq! )
.qq) *
Nameqq* .
,qq. /
Typerr 
=rr 
propertyrr #
.rr# $
PropertyTyperr$ 0
}ss 
)ss 
;ss 
}tt 
}uu 	
publicww 
ITableCreateww 
<ww 
Tww 
>ww 
SetPrimaryKeyww ,
(ww, -

Expressionww- 7
<ww7 8
Funcww8 <
<ww< =
Tww= >
,ww> ?
objectww@ F
>wwF G
>wwG H
columnswwI P
)wwP Q
{xx 	
varyy 
columnNamesyy 
=yy 
ExpressionHelperyy .
.yy. /
GetPropertyNamesyy/ ?
<yy? @
Tyy@ A
,yyA B
objectyyC I
>yyI J
(yyJ K
columnsyyK R
)yyR S
;yyS T

_tableInfozz 
.zz 

PrimaryKeyzz !
=zz" #
columnNameszz$ /
.zz/ 0
ToListzz0 6
(zz6 7
)zz7 8
;zz8 9
return{{ 
this{{ 
;{{ 
}|| 	
public}} 
ITableCreate}} 
<}} 
T}} 
>}} 
SetDefaultValue}} .
(}}. /

Expression}}/ 9
<}}9 :
Func}}: >
<}}> ?
T}}? @
,}}@ A
object}}B H
>}}H I
>}}I J
column}}K Q
,}}Q R
SqlFunctions}}S _
value}}` e
)}}e f
{~~ 	
var 

columnName 
= 
ExpressionHelper -
.- .
GetPropertyName. =
<= >
T> ?
,? @
objectA G
>G H
(H I
columnI O
)O P
;P Q
var
ÄÄ 
col
ÄÄ 
=
ÄÄ 

_tableInfo
ÄÄ  
.
ÄÄ  !
Columns
ÄÄ! (
.
ÄÄ( )
Where
ÄÄ) .
(
ÄÄ. /
a
ÄÄ/ 0
=>
ÄÄ1 3
a
ÄÄ4 5
.
ÄÄ5 6

ColumnName
ÄÄ6 @
==
ÄÄA C

columnName
ÄÄD N
)
ÄÄN O
.
ÄÄO P
FirstOrDefault
ÄÄP ^
(
ÄÄ^ _
)
ÄÄ_ `
;
ÄÄ` a
col
ÅÅ 
.
ÅÅ 
Default
ÅÅ 
=
ÅÅ 
value
ÅÅ 
;
ÅÅ  
return
ÇÇ 
this
ÇÇ 
;
ÇÇ 
}
ÉÉ 	
public
ÑÑ 
ITableCreate
ÑÑ 
<
ÑÑ 
T
ÑÑ 
>
ÑÑ 
SetDefaultValue
ÑÑ .
(
ÑÑ. /

Expression
ÑÑ/ 9
<
ÑÑ9 :
Func
ÑÑ: >
<
ÑÑ> ?
T
ÑÑ? @
,
ÑÑ@ A
object
ÑÑB H
>
ÑÑH I
>
ÑÑI J
column
ÑÑK Q
,
ÑÑQ R
string
ÑÑS Y
value
ÑÑZ _
)
ÑÑ_ `
{
ÖÖ 	
var
ÜÜ 

columnName
ÜÜ 
=
ÜÜ 
ExpressionHelper
ÜÜ -
.
ÜÜ- .
GetPropertyName
ÜÜ. =
<
ÜÜ= >
T
ÜÜ> ?
,
ÜÜ? @
object
ÜÜA G
>
ÜÜG H
(
ÜÜH I
column
ÜÜI O
)
ÜÜO P
;
ÜÜP Q
var
áá 
col
áá 
=
áá 

_tableInfo
áá  
.
áá  !
Columns
áá! (
.
áá( )
Where
áá) .
(
áá. /
a
áá/ 0
=>
áá1 3
a
áá4 5
.
áá5 6

ColumnName
áá6 @
==
ááA C

columnName
ááD N
)
ááN O
.
ááO P
FirstOrDefault
ááP ^
(
áá^ _
)
áá_ `
;
áá` a
col
àà 
.
àà 
Default
àà 
=
àà 
value
àà 
;
àà  
return
ââ 
this
ââ 
;
ââ 
}
ää 	
public
ãã 
ITableCreate
ãã 
<
ãã 
T
ãã 
>
ãã &
SetAsAutoIncermentColumn
ãã 7
(
ãã7 8

Expression
ãã8 B
<
ããB C
Func
ããC G
<
ããG H
T
ããH I
,
ããI J
int
ããK N
>
ããN O
>
ããO P
column
ããQ W
,
ããW X
int
ããY \
start
ãã] b
=
ããc d
$num
ããe f
,
ããf g
int
ããh k
	increment
ããl u
=
ããv w
$num
ããx y
)
ããy z
{
åå 	
var
çç 

columnName
çç 
=
çç 
ExpressionHelper
çç -
.
çç- .
GetPropertyName
çç. =
<
çç= >
T
çç> ?
,
çç? @
int
ççA D
>
ççD E
(
ççE F
column
ççF L
)
ççL M
;
ççM N
var
éé 
col
éé 
=
éé 

_tableInfo
éé  
.
éé  !
Columns
éé! (
.
éé( )
Where
éé) .
(
éé. /
a
éé/ 0
=>
éé1 3
a
éé4 5
.
éé5 6

ColumnName
éé6 @
==
ééA C

columnName
ééD N
)
ééN O
.
ééO P
FirstOrDefault
ééP ^
(
éé^ _
)
éé_ `
;
éé` a
col
èè 
.
èè 
AutoIncrement
èè 
=
èè 
new
èè  #
AutoIncrement
èè$ 1
{
èè2 3
Start
èè4 9
=
èè: ;
start
èè< A
,
èèA B
	Increment
èèC L
=
èèM N
	increment
èèO X
}
èèY Z
;
èèZ [
return
êê 
this
êê 
;
êê 
}
ëë 	
public
íí 
ITableCreate
íí 
<
íí 
T
íí 
>
íí &
SetAsAutoIncermentColumn
íí 7
(
íí7 8

Expression
íí8 B
<
ííB C
Func
ííC G
<
ííG H
T
ííH I
,
ííI J
long
ííK O
>
ííO P
>
ííP Q
column
ííR X
,
ííX Y
int
ííZ ]
start
íí^ c
=
ííd e
$num
ííf g
,
ííg h
int
ííi l
	increment
íím v
=
ííw x
$num
ííy z
)
ííz {
{
ìì 	
var
îî 

columnName
îî 
=
îî 
ExpressionHelper
îî -
.
îî- .
GetPropertyName
îî. =
<
îî= >
T
îî> ?
,
îî? @
long
îîA E
>
îîE F
(
îîF G
column
îîG M
)
îîM N
;
îîN O
var
ïï 
col
ïï 
=
ïï 

_tableInfo
ïï  
.
ïï  !
Columns
ïï! (
.
ïï( )
Where
ïï) .
(
ïï. /
a
ïï/ 0
=>
ïï1 3
a
ïï4 5
.
ïï5 6

ColumnName
ïï6 @
==
ïïA C

columnName
ïïD N
)
ïïN O
.
ïïO P
FirstOrDefault
ïïP ^
(
ïï^ _
)
ïï_ `
;
ïï` a
col
ññ 
.
ññ 
AutoIncrement
ññ 
=
ññ 
new
ññ  #
AutoIncrement
ññ$ 1
{
ññ2 3
Start
ññ4 9
=
ññ: ;
start
ññ< A
,
ññA B
	Increment
ññC L
=
ññM N
	increment
ññO X
}
ññY Z
;
ññZ [
return
óó 
this
óó 
;
óó 
}
òò 	
public
ôô 
ITableCreate
ôô 
<
ôô 
T
ôô 
>
ôô 
CreateIndex
ôô *
(
ôô* +

Expression
ôô+ 5
<
ôô5 6
Func
ôô6 :
<
ôô: ;
T
ôô; <
,
ôô< =
object
ôô> D
>
ôôD E
>
ôôE F
columns
ôôG N
,
ôôN O
bool
ôôP T
isUnique
ôôU ]
=
ôô^ _
false
ôô` e
)
ôôe f
{
öö 	
var
õõ 
columnNames
õõ 
=
õõ 
ExpressionHelper
õõ .
.
õõ. /
GetPropertyNames
õõ/ ?
<
õõ? @
T
õõ@ A
,
õõA B
object
õõC I
>
õõI J
(
õõJ K
columns
õõK R
)
õõR S
;
õõS T

_tableInfo
úú 
.
úú 
Indexes
úú 
.
úú 
Add
úú "
(
úú" #
new
úú# &

TableIndex
úú' 1
{
úú2 3
Columns
úú4 ;
=
úú< =
columnNames
úú> I
.
úúI J
ToArray
úúJ Q
(
úúQ R
)
úúR S
,
úúS T
IsUnique
úúU ]
=
úú^ _
isUnique
úú` h
}
úúi j
)
úúj k
;
úúk l
return
ùù 
this
ùù 
;
ùù 
}
ûû 	
public
üü 
ResultStatus
üü 
Execute
üü #
(
üü# $
)
üü$ %
{
†† 	
return
°° 
_creator
°° 
.
°° 
Create
°° "
(
°°" #

_tableInfo
°°# -
)
°°- .
;
°°. /
}
¢¢ 	
}
££ 
public
§§ 

class
§§ 

TableAlter
§§ 
<
§§ 
T
§§ 
>
§§ 
:
§§  
ITableCreate
§§! -
<
§§- .
T
§§. /
>
§§/ 0
{
•• 
	TableInfo
¶¶ 

_tableInfo
¶¶ 
;
¶¶ 
ITableCreator
ßß 
_creator
ßß 
;
ßß 
public
©© 

TableAlter
©© 
(
©© 
string
©©  
	tableName
©©! *
,
©©* +
string
©©, 2

schemaName
©©3 =
,
©©= >
ITableCreator
©©? L
creator
©©M T
)
©©T U
{
™™ 	

_tableInfo
´´ 
=
´´ 
new
´´ 
	TableInfo
´´ &
(
´´& '
)
´´' (
;
´´( )

_tableInfo
¨¨ 
.
¨¨ 
	TableName
¨¨  
=
¨¨! "
	tableName
¨¨# ,
;
¨¨, -

_tableInfo
≠≠ 
.
≠≠ 

SchemaName
≠≠ !
=
≠≠" #

schemaName
≠≠$ .
;
≠≠. /
_creator
ÆÆ 
=
ÆÆ 
creator
ÆÆ 
;
ÆÆ 
foreach
ØØ 
(
ØØ 
var
ØØ 
property
ØØ !
in
ØØ" $
typeof
ØØ% +
(
ØØ+ ,
T
ØØ, -
)
ØØ- .
.
ØØ. /
GetProperties
ØØ/ <
(
ØØ< =
)
ØØ= >
)
ØØ> ?

_tableInfo
∞∞ 
.
∞∞ 
Columns
∞∞ "
.
∞∞" #
Add
∞∞# &
(
∞∞& '
new
∞∞' *
TableColumn
∞∞+ 6
{
±± 

ColumnName
≤≤ 
=
≤≤  
property
≤≤! )
.
≤≤) *
Name
≤≤* .
,
≤≤. /
Type
≥≥ 
=
≥≥ 
property
≥≥ #
.
≥≥# $
PropertyType
≥≥$ 0
}
¥¥ 
)
¥¥ 
;
¥¥ 
}
µµ 	
public
∑∑ 
ITableCreate
∑∑ 
<
∑∑ 
T
∑∑ 
>
∑∑ 
SetPrimaryKey
∑∑ ,
(
∑∑, -

Expression
∑∑- 7
<
∑∑7 8
Func
∑∑8 <
<
∑∑< =
T
∑∑= >
,
∑∑> ?
object
∑∑@ F
>
∑∑F G
>
∑∑G H
columns
∑∑I P
)
∑∑P Q
{
∏∏ 	
var
ππ 
columnNames
ππ 
=
ππ 
ExpressionHelper
ππ .
.
ππ. /
GetPropertyNames
ππ/ ?
<
ππ? @
T
ππ@ A
,
ππA B
object
ππC I
>
ππI J
(
ππJ K
columns
ππK R
)
ππR S
;
ππS T

_tableInfo
∫∫ 
.
∫∫ 

PrimaryKey
∫∫ !
=
∫∫" #
columnNames
∫∫$ /
.
∫∫/ 0
ToList
∫∫0 6
(
∫∫6 7
)
∫∫7 8
;
∫∫8 9
return
ªª 
this
ªª 
;
ªª 
}
ºº 	
public
ΩΩ 
ITableCreate
ΩΩ 
<
ΩΩ 
T
ΩΩ 
>
ΩΩ 
SetDefaultValue
ΩΩ .
(
ΩΩ. /

Expression
ΩΩ/ 9
<
ΩΩ9 :
Func
ΩΩ: >
<
ΩΩ> ?
T
ΩΩ? @
,
ΩΩ@ A
object
ΩΩB H
>
ΩΩH I
>
ΩΩI J
column
ΩΩK Q
,
ΩΩQ R
SqlFunctions
ΩΩS _
value
ΩΩ` e
)
ΩΩe f
{
ææ 	
var
øø 

columnName
øø 
=
øø 
ExpressionHelper
øø -
.
øø- .
GetPropertyName
øø. =
<
øø= >
T
øø> ?
,
øø? @
object
øøA G
>
øøG H
(
øøH I
column
øøI O
)
øøO P
;
øøP Q
var
¿¿ 
col
¿¿ 
=
¿¿ 

_tableInfo
¿¿  
.
¿¿  !
Columns
¿¿! (
.
¿¿( )
Where
¿¿) .
(
¿¿. /
a
¿¿/ 0
=>
¿¿1 3
a
¿¿4 5
.
¿¿5 6

ColumnName
¿¿6 @
==
¿¿A C

columnName
¿¿D N
)
¿¿N O
.
¿¿O P
FirstOrDefault
¿¿P ^
(
¿¿^ _
)
¿¿_ `
;
¿¿` a
col
¡¡ 
.
¡¡ 
Default
¡¡ 
=
¡¡ 
value
¡¡ 
;
¡¡  
return
¬¬ 
this
¬¬ 
;
¬¬ 
}
√√ 	
public
ƒƒ 
ITableCreate
ƒƒ 
<
ƒƒ 
T
ƒƒ 
>
ƒƒ 
SetDefaultValue
ƒƒ .
(
ƒƒ. /

Expression
ƒƒ/ 9
<
ƒƒ9 :
Func
ƒƒ: >
<
ƒƒ> ?
T
ƒƒ? @
,
ƒƒ@ A
object
ƒƒB H
>
ƒƒH I
>
ƒƒI J
column
ƒƒK Q
,
ƒƒQ R
string
ƒƒS Y
value
ƒƒZ _
)
ƒƒ_ `
{
≈≈ 	
var
∆∆ 

columnName
∆∆ 
=
∆∆ 
ExpressionHelper
∆∆ -
.
∆∆- .
GetPropertyName
∆∆. =
<
∆∆= >
T
∆∆> ?
,
∆∆? @
object
∆∆A G
>
∆∆G H
(
∆∆H I
column
∆∆I O
)
∆∆O P
;
∆∆P Q
var
«« 
col
«« 
=
«« 

_tableInfo
««  
.
««  !
Columns
««! (
.
««( )
Where
««) .
(
««. /
a
««/ 0
=>
««1 3
a
««4 5
.
««5 6

ColumnName
««6 @
==
««A C

columnName
««D N
)
««N O
.
««O P
FirstOrDefault
««P ^
(
««^ _
)
««_ `
;
««` a
col
»» 
.
»» 
Default
»» 
=
»» 
value
»» 
;
»»  
return
…… 
this
…… 
;
…… 
}
   	
public
ÀÀ 
ITableCreate
ÀÀ 
<
ÀÀ 
T
ÀÀ 
>
ÀÀ &
SetAsAutoIncermentColumn
ÀÀ 7
(
ÀÀ7 8

Expression
ÀÀ8 B
<
ÀÀB C
Func
ÀÀC G
<
ÀÀG H
T
ÀÀH I
,
ÀÀI J
int
ÀÀK N
>
ÀÀN O
>
ÀÀO P
column
ÀÀQ W
,
ÀÀW X
int
ÀÀY \
start
ÀÀ] b
=
ÀÀc d
$num
ÀÀe f
,
ÀÀf g
int
ÀÀh k
	increment
ÀÀl u
=
ÀÀv w
$num
ÀÀx y
)
ÀÀy z
{
ÃÃ 	
var
ÕÕ 

columnName
ÕÕ 
=
ÕÕ 
ExpressionHelper
ÕÕ -
.
ÕÕ- .
GetPropertyName
ÕÕ. =
<
ÕÕ= >
T
ÕÕ> ?
,
ÕÕ? @
int
ÕÕA D
>
ÕÕD E
(
ÕÕE F
column
ÕÕF L
)
ÕÕL M
;
ÕÕM N
var
ŒŒ 
col
ŒŒ 
=
ŒŒ 

_tableInfo
ŒŒ  
.
ŒŒ  !
Columns
ŒŒ! (
.
ŒŒ( )
Where
ŒŒ) .
(
ŒŒ. /
a
ŒŒ/ 0
=>
ŒŒ1 3
a
ŒŒ4 5
.
ŒŒ5 6

ColumnName
ŒŒ6 @
==
ŒŒA C

columnName
ŒŒD N
)
ŒŒN O
.
ŒŒO P
FirstOrDefault
ŒŒP ^
(
ŒŒ^ _
)
ŒŒ_ `
;
ŒŒ` a
col
œœ 
.
œœ 
AutoIncrement
œœ 
=
œœ 
new
œœ  #
AutoIncrement
œœ$ 1
{
œœ2 3
Start
œœ4 9
=
œœ: ;
start
œœ< A
,
œœA B
	Increment
œœC L
=
œœM N
	increment
œœO X
}
œœY Z
;
œœZ [
return
–– 
this
–– 
;
–– 
}
—— 	
public
““ 
ITableCreate
““ 
<
““ 
T
““ 
>
““ &
SetAsAutoIncermentColumn
““ 7
(
““7 8

Expression
““8 B
<
““B C
Func
““C G
<
““G H
T
““H I
,
““I J
long
““K O
>
““O P
>
““P Q
column
““R X
,
““X Y
int
““Z ]
start
““^ c
=
““d e
$num
““f g
,
““g h
int
““i l
	increment
““m v
=
““w x
$num
““y z
)
““z {
{
”” 	
var
‘‘ 

columnName
‘‘ 
=
‘‘ 
ExpressionHelper
‘‘ -
.
‘‘- .
GetPropertyName
‘‘. =
<
‘‘= >
T
‘‘> ?
,
‘‘? @
long
‘‘A E
>
‘‘E F
(
‘‘F G
column
‘‘G M
)
‘‘M N
;
‘‘N O
var
’’ 
col
’’ 
=
’’ 

_tableInfo
’’  
.
’’  !
Columns
’’! (
.
’’( )
Where
’’) .
(
’’. /
a
’’/ 0
=>
’’1 3
a
’’4 5
.
’’5 6

ColumnName
’’6 @
==
’’A C

columnName
’’D N
)
’’N O
.
’’O P
FirstOrDefault
’’P ^
(
’’^ _
)
’’_ `
;
’’` a
col
÷÷ 
.
÷÷ 
AutoIncrement
÷÷ 
=
÷÷ 
new
÷÷  #
AutoIncrement
÷÷$ 1
{
÷÷2 3
Start
÷÷4 9
=
÷÷: ;
start
÷÷< A
,
÷÷A B
	Increment
÷÷C L
=
÷÷M N
	increment
÷÷O X
}
÷÷Y Z
;
÷÷Z [
return
◊◊ 
this
◊◊ 
;
◊◊ 
}
ÿÿ 	
public
ŸŸ 
ITableCreate
ŸŸ 
<
ŸŸ 
T
ŸŸ 
>
ŸŸ 
CreateIndex
ŸŸ *
(
ŸŸ* +

Expression
ŸŸ+ 5
<
ŸŸ5 6
Func
ŸŸ6 :
<
ŸŸ: ;
T
ŸŸ; <
,
ŸŸ< =
object
ŸŸ> D
>
ŸŸD E
>
ŸŸE F
columns
ŸŸG N
,
ŸŸN O
bool
ŸŸP T
isUnique
ŸŸU ]
=
ŸŸ^ _
false
ŸŸ` e
)
ŸŸe f
{
⁄⁄ 	
var
€€ 
columnNames
€€ 
=
€€ 
ExpressionHelper
€€ .
.
€€. /
GetPropertyNames
€€/ ?
<
€€? @
T
€€@ A
,
€€A B
object
€€C I
>
€€I J
(
€€J K
columns
€€K R
)
€€R S
;
€€S T

_tableInfo
‹‹ 
.
‹‹ 
Indexes
‹‹ 
.
‹‹ 
Add
‹‹ "
(
‹‹" #
new
‹‹# &

TableIndex
‹‹' 1
{
‹‹2 3
Columns
‹‹4 ;
=
‹‹< =
columnNames
‹‹> I
.
‹‹I J
ToArray
‹‹J Q
(
‹‹Q R
)
‹‹R S
,
‹‹S T
IsUnique
‹‹U ]
=
‹‹^ _
isUnique
‹‹` h
}
‹‹i j
)
‹‹j k
;
‹‹k l
return
›› 
this
›› 
;
›› 
}
ﬁﬁ 	
public
ﬂﬂ 
ResultStatus
ﬂﬂ 
Execute
ﬂﬂ #
(
ﬂﬂ# $
)
ﬂﬂ$ %
{
‡‡ 	
return
·· 
_creator
·· 
.
·· 
Create
·· "
(
··" #

_tableInfo
··# -
)
··- .
;
··. /
}
‚‚ 	
}
„„ 
}ÂÂ †„
{D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\Database.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Database %
{ 
public 

class 
Database 
: 
IDisposable '
{ 
private 
DatabaseType 
_dbType $
;$ %
private 
string 
_connectionString (
;( )
private 
IQueryExecutor 
	_executor (
;( )
private 
IQueryBuilder 
_builder &
;& '
private 
ITypeMapper 
_typeMapper '
;' (
private 
DbTransaction 
_transaction *
;* +
public 
static 
Action 
< 
Query "
," #
ResultStatus$ 0
>0 1
OnExecuionComplate2 D
{ 	
get 
{ 
return 
MssqlQueryExecutor +
.+ ,
OnExecuionComplate, >
;> ?
}@ A
set 
{ 
MssqlQueryExecutor "
." #
OnExecuionComplate# 5
=6 7
value8 =
;= > 
PostgisQueryExecutor $
.$ %
OnExecuionComplate% 7
=8 9
value: ?
;? @
} 
} 	
public   
string   

ServerName    
{  ! "
get  # &
{  ' (
return  ) /
	_executor  0 9
.  9 :

ServerName  : D
;  D E
}  F G
}  H I
public!! 
string!! 
DbName!! 
{!! 
get!! "
{!!# $
return!!% +
	_executor!!, 5
.!!5 6
DbName!!6 <
;!!< =
}!!> ?
}!!@ A
public## 
Database## 
(## 
string## 
connectionString## /
,##/ 0
DatabaseType##1 =
dbType##> D
=##E F
DatabaseType##G S
.##S T
Mssql##T Y
,##Y Z
DbTransaction##[ h
transaction##i t
=##u v
null##w {
)##{ |
{$$ 	
_dbType%% 
=%% 
dbType%% 
;%% 
_connectionString&& 
=&& 
connectionString&&  0
;&&0 1
_transaction'' 
='' 
transaction'' &
;''& '
if)) 
()) 
dbType)) 
==)) 
DatabaseType)) &
.))& '
Mssql))' ,
))), -
{** 
_typeMapper++ 
=++ 
new++ !
MssqlTypeMapper++" 1
(++1 2
)++2 3
;++3 4
	_executor,, 
=,, 
new,, 
MssqlQueryExecutor,,  2
(,,2 3
_connectionString,,3 D
,,,D E
_typeMapper,,F Q
,,,Q R
transaction,,S ^
),,^ _
;,,_ `
_builder-- 
=-- 
new-- 
MssqlQueryBuilder-- 0
(--0 1
_typeMapper--1 <
)--< =
;--= >
}.. 
else// 
if// 
(// 
dbType// 
==// 
DatabaseType// +
.//+ ,
Postgis//, 3
)//3 4
{00 
_typeMapper11 
=11 
new11 !
PostgisTypeMapper11" 3
(113 4
)114 5
;115 6
	_executor22 
=22 
new22  
PostgisQueryExecutor22  4
(224 5
_connectionString225 F
,22F G
_typeMapper22H S
,22S T
transaction22U `
)22` a
;22a b
_builder33 
=33 
new33 
PostgisQueryBuilder33 2
(332 3
_typeMapper333 >
)33> ?
;33? @
}44 
else55 
if55 
(55 
dbType55 
==55 
DatabaseType55 +
.55+ ,%
PostgresqlWithGeodatabase55, E
)55E F
{66 
_typeMapper77 
=77 
new77 !
PostgisTypeMapper77" 3
(773 4
)774 5
;775 6
	_executor88 
=88 
new88  
PostgisQueryExecutor88  4
(884 5
_connectionString885 F
,88F G
_typeMapper88H S
,88S T
transaction88U `
)88` a
;88a b
_builder99 
=99 
new99 
PostgisQueryBuilder99 2
(992 3
_typeMapper993 >
)99> ?
;99? @
}:: 
else;; 
{<< 
throw== 
new== 
	Exception== #
(==# $
$str==$ @
)==@ A
;==A B
}>> 
}?? 	
publicAA 
boolAA 
IsTransactionOpenAA %
{AA& '
getAA( +
{AA, -
returnAA. 4
	_executorAA5 >
.AA> ?
IsTransactionOpenAA? P
;AAP Q
}AAR S
}AAT U
publicBB 
DbTransactionBB 
BeginTransactionBB -
(BB- .
)BB. /
{CC 	
returnDD 
	_executorDD 
.DD 
BeginTransactionDD -
(DD- .
)DD. /
;DD/ 0
}EE 	
publicFF 
ResultStatusFF 
CommitFF "
(FF" #
)FF# $
{GG 	
throwHH 
newHH #
NotImplementedExceptionHH -
(HH- .
)HH. /
;HH/ 0
}II 	
publicJJ 
ResultStatusJJ 
RollBackJJ $
(JJ$ %
)JJ% &
{KK 	
throwLL 
newLL #
NotImplementedExceptionLL -
(LL- .
)LL. /
;LL/ 0
}MM 	
publicPP 
TPP 
ExecuteScalerPP 
<PP 
TPP  
>PP  !
(PP! "
stringPP" (
commandPP) 0
,PP0 1
paramsPP2 8
objectPP9 ?
[PP? @
]PP@ A

parametersPPB L
)PPL M
{QQ 	
varRR 
queryRR 
=RR 
_builderRR  
.RR  !
ConvertToQueryRR! /
(RR/ 0
commandRR0 7
,RR7 8

parametersRR9 C
)RRC D
;RRD E
returnSS 
	_executorSS 
.SS 
ExecuteScalerSS *
<SS* +
TSS+ ,
>SS, -
(SS- .
querySS. 3
)SS3 4
;SS4 5
}TT 	
publicUU 
IEnumerableUU 
<UU 
TUU 
>UU 
ExecuteReaderUU +
<UU+ ,
TUU, -
>UU- .
(UU. /
stringUU/ 5
commandUU6 =
,UU= >
paramsUU? E
objectUUF L
[UUL M
]UUM N

parametersUUO Y
)UUY Z
{VV 	
varWW 
queryWW 
=WW 
_builderWW  
.WW  !
ConvertToQueryWW! /
(WW/ 0
commandWW0 7
,WW7 8

parametersWW9 C
)WWC D
;WWD E
returnXX 
	_executorXX 
.XX 
ExecuteReaderXX *
<XX* +
TXX+ ,
>XX, -
(XX- .
queryXX. 3
)XX3 4
;XX4 5
}YY 	
publicZZ 
IEnumerableZZ 
<ZZ 

DictionaryZZ %
<ZZ% &
stringZZ& ,
,ZZ, -
objectZZ. 4
>ZZ4 5
>ZZ5 6
ExecuteReaderZZ7 D
(ZZD E
stringZZE K
commandZZL S
,ZZS T
paramsZZU [
objectZZ\ b
[ZZb c
]ZZc d

parametersZZe o
)ZZo p
{[[ 	
var\\ 
query\\ 
=\\ 
_builder\\  
.\\  !
ConvertToQuery\\! /
(\\/ 0
command\\0 7
,\\7 8

parameters\\9 C
)\\C D
;\\D E
return]] 
	_executor]] 
.]] 
ExecuteReader]] *
(]]* +
query]]+ 0
)]]0 1
;]]1 2
}^^ 	
public__  
FeatureCollectionExt__ #
ExecuteFeature__$ 2
(__2 3
string__3 9
command__: A
,__A B
params__C I
object__J P
[__P Q
]__Q R

parameters__S ]
)__] ^
{`` 	
varaa 
queryaa 
=aa 
_builderaa  
.aa  !
ConvertToQueryaa! /
(aa/ 0
commandaa0 7
,aa7 8

parametersaa9 C
)aaC D
;aaD E
returnbb 
(bb 
	_executorbb 
asbb  
MssqlQueryExecutorbb! 3
)bb3 4
.bb4 5
ExecuteFeature2bb5 D
(bbD E
querybbE J
)bbJ K
;bbK L
}cc 	
publicdd 
ResultStatusdd 
ExecuteNonQuerydd +
(dd+ ,
stringdd, 2
commanddd3 :
,dd: ;
paramsdd< B
objectddC I
[ddI J
]ddJ K

parametersddL V
)ddV W
{ee 	
varff 
queryff 
=ff 
_builderff  
.ff  !
ConvertToQueryff! /
(ff/ 0
commandff0 7
,ff7 8

parametersff9 C
)ffC D
;ffD E
returngg 
	_executorgg 
.gg 
ExecuteNonQuerygg ,
(gg, -
querygg- 2
)gg2 3
;gg3 4
}hh 	
publicjj 
	IGetTablejj 
Tablejj 
(jj 
stringjj %
	tableNamejj& /
,jj/ 0
stringjj1 7

schemaNamejj8 B
=jjC D
nulljjE I
)jjI J
{kk 	
returnll 
newll 
QueryProcessorll %
(ll% &
	tableNamell& /
,ll/ 0

schemaNamell1 ;
,ll; <
_builderll= E
,llE F
	_executorllG P
,llP Q
_typeMapperllR ]
)ll] ^
;ll^ _
}mm 	
publicnn 
	IGetTablenn 
TableFunctionnn &
(nn& '
stringnn' -

schemaNamenn. 8
,nn8 9
stringnn: @
	tableNamennA J
,nnJ K
paramsnnL R
objectnnS Y
[nnY Z
]nnZ [

parametersnn\ f
)nnf g
{oo 	
returnpp 
newpp 
QueryProcessorpp %
(pp% &
	tableNamepp& /
,pp/ 0

schemaNamepp1 ;
,pp; <

parameterspp= G
,ppG H
_builderppI Q
,ppQ R
	_executorppS \
,pp\ ]
_typeMapperpp^ i
)ppi j
;ppj k
}qq 	
publicrr 
	IGetTablerr 
<rr 
Trr 
>rr 
Tablerr !
<rr! "
Trr" #
>rr# $
(rr$ %
stringrr% +

schemaNamerr, 6
=rr7 8
nullrr9 =
,rr= >
stringrr? E
	tableNamerrF O
=rrP Q
nullrrR V
)rrV W
whererrX ]
Trr^ _
:rr` a
newrrb e
(rre f
)rrf g
{ss 	
iftt 
(tt 
	tableNamett 
==tt 
nulltt !
)tt! "
	tableNameuu 
=uu 
typeofuu "
(uu" #
Tuu# $
)uu$ %
.uu% &
Nameuu& *
;uu* +
varww 
	processorww 
=ww 
newww 
QueryProcessorww  .
(ww. /
	tableNameww/ 8
,ww8 9

schemaNameww: D
,wwD E
_builderwwF N
,wwN O
	_executorwwP Y
,wwY Z
_typeMapperww[ f
)wwf g
;wwg h
returnxx 
newxx 
QueryProcessorxx %
<xx% &
Txx& '
,xx' (
Txx) *
>xx* +
(xx+ ,
	tableNamexx, 5
,xx5 6

schemaNamexx7 A
,xxA B
	processorxxC L
,xxL M
_builderxxN V
,xxV W
	_executorxxX a
)xxa b
;xxb c
}yy 	
public
ÉÉ 
	IGetTable
ÉÉ 
<
ÉÉ 
T
ÉÉ 
>
ÉÉ 
TableFunction
ÉÉ )
<
ÉÉ) *
T
ÉÉ* +
>
ÉÉ+ ,
(
ÉÉ, -
string
ÉÉ- 3

schemaName
ÉÉ4 >
,
ÉÉ> ?
string
ÉÉ@ F
	tableName
ÉÉG P
,
ÉÉP Q
params
ÉÉR X
object
ÉÉY _
[
ÉÉ_ `
]
ÉÉ` a

parameters
ÉÉb l
)
ÉÉl m
where
ÉÉn s
T
ÉÉt u
:
ÉÉv w
new
ÉÉx {
(
ÉÉ{ |
)
ÉÉ| }
{
ÑÑ 	
if
ÖÖ 
(
ÖÖ 
	tableName
ÖÖ 
==
ÖÖ 
null
ÖÖ !
)
ÖÖ! "
	tableName
ÜÜ 
=
ÜÜ 
typeof
ÜÜ "
(
ÜÜ" #
T
ÜÜ# $
)
ÜÜ$ %
.
ÜÜ% &
Name
ÜÜ& *
;
ÜÜ* +
var
àà 
	processor
àà 
=
àà 
new
àà 
QueryProcessor
àà  .
(
àà. /
	tableName
àà/ 8
,
àà8 9

schemaName
àà: D
,
ààD E

parameters
ààF P
,
ààP Q
_builder
ààR Z
,
ààZ [
	_executor
àà\ e
,
ààe f
_typeMapper
ààg r
)
ààr s
;
ààs t
return
ââ 
new
ââ 
QueryProcessor
ââ %
<
ââ% &
T
ââ& '
,
ââ' (
T
ââ) *
>
ââ* +
(
ââ+ ,
	tableName
ââ, 5
,
ââ5 6

schemaName
ââ7 A
,
ââA B

parameters
ââC M
,
ââM N
	processor
ââO X
,
ââX Y
_builder
ââZ b
,
ââb c
	_executor
ââd m
)
ââm n
;
âân o
}
ää 	
public
åå 
ResultStatus
åå 
CreateTable
åå '
(
åå' (
	TableInfo
åå( 1
	tableInfo
åå2 ;
)
åå; <
{
çç 	
ITableCreator
éé 
creator
éé !
=
éé" #
null
éé$ (
;
éé( )
if
èè 
(
èè 
_dbType
èè 
==
èè 
DatabaseType
èè '
.
èè' (
Mssql
èè( -
)
èè- .
creator
èè/ 6
=
èè7 8
new
èè9 <
MssqlTableCreator
èè= N
(
èèN O
_builder
èèO W
,
èèW X
	_executor
èèY b
,
èèb c
_typeMapper
èèd o
)
èèo p
;
èèp q
else
êê 
if
êê 
(
êê 
_dbType
êê 
==
êê 
DatabaseType
êê  ,
.
êê, -
Postgis
êê- 4
)
êê4 5
creator
êê6 =
=
êê> ?
new
êê@ C!
PostgisTableCreator
êêD W
(
êêW X
_builder
êêX `
,
êê` a
	_executor
êêb k
,
êêk l
_typeMapper
êêm x
)
êêx y
;
êêy z
else
ëë 
throw
ëë 
new
ëë 
	Exception
ëë $
(
ëë$ %
$str
ëë% A
)
ëëA B
;
ëëB C
return
íí 
creator
íí 
.
íí 
Create
íí !
(
íí! "
	tableInfo
íí" +
)
íí+ ,
;
íí, -
}
ìì 	
public
îî 
ITableCreate
îî 
CreateTable
îî '
(
îî' (
string
îî( .
	tableName
îî/ 8
,
îî8 9
string
îî: @

schemaName
îîA K
=
îîL M
null
îîN R
)
îîR S
{
ïï 	
ITableCreator
ññ 
creator
ññ !
=
ññ" #
null
ññ$ (
;
ññ( )
if
óó 
(
óó 
_dbType
óó 
==
óó 
DatabaseType
óó '
.
óó' (
Mssql
óó( -
)
óó- .
creator
óó/ 6
=
óó7 8
new
óó9 <
MssqlTableCreator
óó= N
(
óóN O
_builder
óóO W
,
óóW X
	_executor
óóY b
,
óób c
_typeMapper
óód o
)
óóo p
;
óóp q
else
òò 
if
òò 
(
òò 
_dbType
òò 
==
òò 
DatabaseType
òò  ,
.
òò, -
Postgis
òò- 4
)
òò4 5
creator
òò6 =
=
òò> ?
new
òò@ C!
PostgisTableCreator
òòD W
(
òòW X
_builder
òòX `
,
òò` a
	_executor
òòb k
,
òòk l
_typeMapper
òòm x
)
òòx y
;
òòy z
else
ôô 
throw
ôô 
new
ôô 
	Exception
ôô $
(
ôô$ %
$str
ôô% A
)
ôôA B
;
ôôB C
return
öö 
new
öö 
TableCreate
öö "
(
öö" #
	tableName
öö# ,
,
öö, -

schemaName
öö. 8
,
öö8 9
creator
öö: A
)
ööA B
;
ööB C
}
õõ 	
public
úú 
ITableCreate
úú 
<
úú 
T
úú 
>
úú 
CreateTable
úú *
<
úú* +
T
úú+ ,
>
úú, -
(
úú- .
string
úú. 4
	tableName
úú5 >
=
úú? @
null
úúA E
,
úúE F
string
úúG M

schemaName
úúN X
=
úúY Z
null
úú[ _
)
úú_ `
{
ùù 	
if
ûû 
(
ûû 
	tableName
ûû 
==
ûû 
null
ûû !
)
ûû! "
	tableName
üü 
=
üü 
typeof
üü "
(
üü" #
T
üü# $
)
üü$ %
.
üü% &
Name
üü& *
;
üü* +
ITableCreator
°° 
creator
°° !
=
°°" #
null
°°$ (
;
°°( )
if
¢¢ 
(
¢¢ 
_dbType
¢¢ 
==
¢¢ 
DatabaseType
¢¢ '
.
¢¢' (
Mssql
¢¢( -
)
¢¢- .
creator
¢¢/ 6
=
¢¢7 8
new
¢¢9 <
MssqlTableCreator
¢¢= N
(
¢¢N O
_builder
¢¢O W
,
¢¢W X
	_executor
¢¢Y b
,
¢¢b c
_typeMapper
¢¢d o
)
¢¢o p
;
¢¢p q
else
££ 
if
££ 
(
££ 
_dbType
££ 
==
££ 
DatabaseType
££  ,
.
££, -
Postgis
££- 4
)
££4 5
creator
££6 =
=
££> ?
new
££@ C!
PostgisTableCreator
££D W
(
££W X
_builder
££X `
,
££` a
	_executor
££b k
,
££k l
_typeMapper
££m x
)
££x y
;
££y z
else
§§ 
throw
§§ 
new
§§ 
	Exception
§§ $
(
§§$ %
$str
§§% A
)
§§A B
;
§§B C
return
•• 
new
•• 
TableCreate
•• "
<
••" #
T
••# $
>
••$ %
(
••% &
	tableName
••& /
,
••/ 0

schemaName
••1 ;
,
••; <
creator
••= D
)
••D E
;
••E F
}
¶¶ 	
public
®® 
ResultStatus
®® 

AlterTable
®® &
(
®®& '
	TableInfo
®®' 0
	tableInfo
®®1 :
)
®®: ;
{
©© 	
ITableCreator
™™ 
creator
™™ !
=
™™" #
null
™™$ (
;
™™( )
if
´´ 
(
´´ 
_dbType
´´ 
==
´´ 
DatabaseType
´´ '
.
´´' (
Mssql
´´( -
)
´´- .
creator
´´/ 6
=
´´7 8
new
´´9 <
MssqlTableCreator
´´= N
(
´´N O
_builder
´´O W
,
´´W X
	_executor
´´Y b
,
´´b c
_typeMapper
´´d o
)
´´o p
;
´´p q
else
¨¨ 
if
¨¨ 
(
¨¨ 
_dbType
¨¨ 
==
¨¨ 
DatabaseType
¨¨  ,
.
¨¨, -
Postgis
¨¨- 4
)
¨¨4 5
creator
¨¨6 =
=
¨¨> ?
new
¨¨@ C!
PostgisTableCreator
¨¨D W
(
¨¨W X
_builder
¨¨X `
,
¨¨` a
	_executor
¨¨b k
,
¨¨k l
_typeMapper
¨¨m x
)
¨¨x y
;
¨¨y z
else
≠≠ 
throw
≠≠ 
new
≠≠ 
	Exception
≠≠ $
(
≠≠$ %
$str
≠≠% A
)
≠≠A B
;
≠≠B C
return
ÆÆ 
creator
ÆÆ 
.
ÆÆ 
Alter
ÆÆ  
(
ÆÆ  !
	tableInfo
ÆÆ! *
)
ÆÆ* +
;
ÆÆ+ ,
}
ØØ 	
public
∞∞ 
ITableCreate
∞∞ 

AlterTable
∞∞ &
(
∞∞& '
string
∞∞' -
	tableName
∞∞. 7
,
∞∞7 8
string
∞∞9 ?

schemaName
∞∞@ J
=
∞∞K L
null
∞∞M Q
)
∞∞Q R
{
±± 	
ITableCreator
≤≤ 
creator
≤≤ !
=
≤≤" #
null
≤≤$ (
;
≤≤( )
if
≥≥ 
(
≥≥ 
_dbType
≥≥ 
==
≥≥ 
DatabaseType
≥≥ '
.
≥≥' (
Mssql
≥≥( -
)
≥≥- .
creator
≥≥/ 6
=
≥≥7 8
new
≥≥9 <
MssqlTableCreator
≥≥= N
(
≥≥N O
_builder
≥≥O W
,
≥≥W X
	_executor
≥≥Y b
,
≥≥b c
_typeMapper
≥≥d o
)
≥≥o p
;
≥≥p q
else
¥¥ 
if
¥¥ 
(
¥¥ 
_dbType
¥¥ 
==
¥¥ 
DatabaseType
¥¥  ,
.
¥¥, -
Postgis
¥¥- 4
)
¥¥4 5
creator
¥¥6 =
=
¥¥> ?
new
¥¥@ C!
PostgisTableCreator
¥¥D W
(
¥¥W X
_builder
¥¥X `
,
¥¥` a
	_executor
¥¥b k
,
¥¥k l
_typeMapper
¥¥m x
)
¥¥x y
;
¥¥y z
else
µµ 
throw
µµ 
new
µµ 
	Exception
µµ $
(
µµ$ %
$str
µµ% A
)
µµA B
;
µµB C
return
∂∂ 
new
∂∂ 

TableAlter
∂∂ !
(
∂∂! "
	tableName
∂∂" +
,
∂∂+ ,

schemaName
∂∂- 7
,
∂∂7 8
creator
∂∂9 @
)
∂∂@ A
;
∂∂A B
}
∑∑ 	
public
∏∏ 
ITableCreate
∏∏ 
<
∏∏ 
T
∏∏ 
>
∏∏ 

AlterTable
∏∏ )
<
∏∏) *
T
∏∏* +
>
∏∏+ ,
(
∏∏, -
string
∏∏- 3
	tableName
∏∏4 =
=
∏∏> ?
null
∏∏@ D
,
∏∏D E
string
∏∏F L

schemaName
∏∏M W
=
∏∏X Y
null
∏∏Z ^
)
∏∏^ _
{
ππ 	
if
∫∫ 
(
∫∫ 
	tableName
∫∫ 
==
∫∫ 
null
∫∫ !
)
∫∫! "
	tableName
ªª 
=
ªª 
typeof
ªª "
(
ªª" #
T
ªª# $
)
ªª$ %
.
ªª% &
Name
ªª& *
;
ªª* +
ITableCreator
ΩΩ 
creator
ΩΩ !
=
ΩΩ" #
null
ΩΩ$ (
;
ΩΩ( )
if
ææ 
(
ææ 
_dbType
ææ 
==
ææ 
DatabaseType
ææ '
.
ææ' (
Mssql
ææ( -
)
ææ- .
creator
ææ/ 6
=
ææ7 8
new
ææ9 <
MssqlTableCreator
ææ= N
(
ææN O
_builder
ææO W
,
ææW X
	_executor
ææY b
,
ææb c
_typeMapper
ææd o
)
ææo p
;
ææp q
else
øø 
if
øø 
(
øø 
_dbType
øø 
==
øø 
DatabaseType
øø  ,
.
øø, -
Postgis
øø- 4
)
øø4 5
creator
øø6 =
=
øø> ?
new
øø@ C!
PostgisTableCreator
øøD W
(
øøW X
_builder
øøX `
,
øø` a
	_executor
øøb k
,
øøk l
_typeMapper
øøm x
)
øøx y
;
øøy z
else
¿¿ 
throw
¿¿ 
new
¿¿ 
	Exception
¿¿ $
(
¿¿$ %
$str
¿¿% A
)
¿¿A B
;
¿¿B C
return
¡¡ 
new
¡¡ 

TableAlter
¡¡ !
<
¡¡! "
T
¡¡" #
>
¡¡# $
(
¡¡$ %
	tableName
¡¡% .
,
¡¡. /

schemaName
¡¡0 :
,
¡¡: ;
creator
¡¡< C
)
¡¡C D
;
¡¡D E
}
¬¬ 	
public
ƒƒ 
ResultStatus
ƒƒ 
	DropTable
ƒƒ %
(
ƒƒ% &
string
ƒƒ& ,
	tableName
ƒƒ- 6
,
ƒƒ6 7
string
ƒƒ8 >

schemaName
ƒƒ? I
=
ƒƒJ K
null
ƒƒL P
)
ƒƒP Q
{
≈≈ 	
var
∆∆ 
query
∆∆ 
=
∆∆ 
_builder
∆∆  
.
∆∆  !
GetDropTableQuery
∆∆! 2
(
∆∆2 3
	tableName
∆∆3 <
,
∆∆< =

schemaName
∆∆> H
)
∆∆H I
;
∆∆I J
return
«« 
	_executor
«« 
.
«« 
ExecuteNonQuery
«« ,
(
««, -
query
««- 2
)
««2 3
;
««3 4
}
»» 	
public
…… 
bool
…… 
TableExists
…… 
(
……  
string
……  &
	tableName
……' 0
,
……0 1
string
……2 8

schemaName
……9 C
=
……D E
null
……F J
)
……J K
{
   	
var
ÀÀ 
query
ÀÀ 
=
ÀÀ 
_builder
ÀÀ  
.
ÀÀ  !!
GetTableExistsQuery
ÀÀ! 4
(
ÀÀ4 5
	tableName
ÀÀ5 >
,
ÀÀ> ?

schemaName
ÀÀ@ J
)
ÀÀJ K
;
ÀÀK L
var
ÃÃ 
isExists
ÃÃ 
=
ÃÃ 
	_executor
ÃÃ $
.
ÃÃ$ %
ExecuteScaler
ÃÃ% 2
<
ÃÃ2 3
bool
ÃÃ3 7
>
ÃÃ7 8
(
ÃÃ8 9
query
ÃÃ9 >
)
ÃÃ> ?
;
ÃÃ? @
return
ÕÕ 
isExists
ÕÕ 
;
ÕÕ 
}
ŒŒ 	
public
—— 
	TableInfo
—— 
	TableInfo
—— "
(
——" #
string
——# )
	tableName
——* 3
,
——3 4
bool
——5 9
onlyColumns
——: E
=
——F G
false
——H M
)
——M N
{
““ 	
ITableCreator
”” 
creator
”” !
=
””" #
null
””$ (
;
””( )
if
‘‘ 
(
‘‘ 
_dbType
‘‘ 
==
‘‘ 
DatabaseType
‘‘ '
.
‘‘' (
Mssql
‘‘( -
)
‘‘- .
creator
‘‘/ 6
=
‘‘7 8
new
‘‘9 <
MssqlTableCreator
‘‘= N
(
‘‘N O
_builder
‘‘O W
,
‘‘W X
	_executor
‘‘Y b
,
‘‘b c
_typeMapper
‘‘d o
)
‘‘o p
;
‘‘p q
else
’’ 
if
’’ 
(
’’ 
_dbType
’’ 
==
’’ 
DatabaseType
’’  ,
.
’’, -
Postgis
’’- 4
)
’’4 5
creator
’’6 =
=
’’> ?
new
’’@ C!
PostgisTableCreator
’’D W
(
’’W X
_builder
’’X `
,
’’` a
	_executor
’’b k
,
’’k l
_typeMapper
’’m x
)
’’x y
;
’’y z
else
÷÷ 
throw
÷÷ 
new
÷÷ 
	Exception
÷÷ $
(
÷÷$ %
$str
÷÷% A
)
÷÷A B
;
÷÷B C
return
◊◊ 
creator
◊◊ 
.
◊◊ 
	GetSchema
◊◊ $
(
◊◊$ %
	tableName
◊◊% .
,
◊◊. /
onlyColumns
◊◊0 ;
)
◊◊; <
;
◊◊< =
}
ÿÿ 	
public
⁄⁄ 
void
⁄⁄ 
Dispose
⁄⁄ 
(
⁄⁄ 
)
⁄⁄ 
{
€€ 	
	_executor
‹‹ 
.
‹‹ 
Dispose
‹‹ 
(
‹‹ 
)
‹‹ 
;
‹‹  
}
›› 	
public
‚‚ 
ResultStatus
‚‚ 
CreateFunction
‚‚ *
<
‚‚* +
T1
‚‚+ -
,
‚‚- .
T2
‚‚/ 1
,
‚‚1 2
T3
‚‚3 5
,
‚‚5 6
TResult
‚‚7 >
>
‚‚> ?
(
‚‚? @
string
‚‚@ F
functionName
‚‚G S
,
‚‚S T

Expression
‚‚U _
<
‚‚_ `
Func
‚‚` d
<
‚‚d e
T1
‚‚e g
,
‚‚g h
T2
‚‚i k
,
‚‚k l
T3
‚‚m o
,
‚‚o p
IQuery
‚‚q w
>
‚‚w x
>
‚‚x y
function‚‚z Ç
)‚‚Ç É
{
„„ 	
return
ÂÂ 
null
ÂÂ 
;
ÂÂ 
}
ÊÊ 	
public
ËË 
T
ËË 
CallFunction
ËË 
<
ËË 
T
ËË 
>
ËË  
(
ËË  !
string
ËË! '
functionName
ËË( 4
,
ËË4 5
params
ËË6 <
object
ËË= C
[
ËËC D
]
ËËD E

parameters
ËËF P
)
ËËP Q
{
ÈÈ 	
return
ÎÎ 
default
ÎÎ 
(
ÎÎ 
T
ÎÎ 
)
ÎÎ 
;
ÎÎ 
}
ÏÏ 	
}
ÓÓ 
}ÔÔ ë
≈D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\DataBaseHelper\PostgresqlWithGeodatabaseHelper\PostgresqlWithGeodatabaseTypeMapper.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Database %
.% &
DataBaseHelper& 4
.4 5$
PostgisGeoDatabaseHelper5 M
{ 
class		 	(
PostgisGeoDatabaseTypeMapper		
 &
{

 
} 
public 

class /
#PostgresqlWithGeodatabaseTypeMapper 4
:5 6
ITypeMapper7 B
{ 
public 
Type 
GetType 
( 
string "
sqlType# *
)* +
{ 	
throw 
new #
NotImplementedException -
(- .
). /
;/ 0
} 	
public 
string 

GetSqlType  
(  !
Type! %
type& *
,* +
int, /
?/ 0
length1 7
=8 9
null: >
)> ?
{ 	
throw 
new #
NotImplementedException -
(- .
). /
;/ 0
} 	
public 
string 
FormatSqlByType %
(% &
object& ,
val- 0
)0 1
{ 	
throw 
new #
NotImplementedException -
(- .
). /
;/ 0
} 	
public 
object 
ConvertFromSql $
($ %
object% +
obj, /
)/ 0
{   	
throw!! 
new!! #
NotImplementedException!! -
(!!- .
)!!. /
;!!/ 0
}"" 	
public$$ 
object$$ 
ConvertToSql$$ "
($$" #
object$$# )
obj$$* -
)$$- .
{%% 	
throw&& 
new&& #
NotImplementedException&& -
(&&- .
)&&. /
;&&/ 0
}'' 	
}(( 
})) ¶
ïD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\DataBaseHelper\QueryBuildException.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Database %
{ 
public 

class 
QueryBuildException $
:% &
	Exception' 0
{ 
public 
QueryBuildException "
(" #
ExceptionTypes# 1
type2 6
)6 7
: 
base 
( 

GetMessage 
( 
type "
)" #
)# $
{		 	
} 	
private 
static 
string 

GetMessage (
(( )
ExceptionTypes) 7
type8 <
)< =
{ 	
switch 
( 
type 
) 
{ 
case 
ExceptionTypes #
.# $
OperatorNotFound$ 4
:4 5
return6 <
$str= T
;T U
case 
ExceptionTypes #
.# $
OperatorUnsuported$ 6
:6 7
return8 >
$str? Z
;Z [
case 
ExceptionTypes #
.# $!
ParameterCountIsWrong$ 9
:9 :
return; A
$strB \
;\ ]
default 
: 
return 
$str  "
;" #
} 
} 	
public 
enum 
ExceptionTypes "
{ 	
OperatorNotFound 
, 
OperatorUnsuported 
, !
ParameterCountIsWrong !
,! "
} 	
} 
} ¢
óD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\DataBaseHelper\QueryExecuteException.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Database %
{ 
public 

class !
QueryExecuteException &
:' (
	Exception) 2
{ 
public !
QueryExecuteException $
($ %
ExceptionTypes% 3
type4 8
)8 9
: 
base 
( 

GetMessage 
( 
type "
)" #
)# $
{		 	
} 	
public !
QueryExecuteException $
($ %
ExceptionTypes% 3
type4 8
,8 9
string: @
messageA H
)H I
: 
base 
( 

GetMessage 
( 
type "
)" #
+$ %
$str& 0
+1 2
message3 :
): ;
{ 	
} 	
private 
static 
string 

GetMessage (
(( )
ExceptionTypes) 7
type8 <
)< =
{ 	
switch 
( 
type 
) 
{ 
case 
ExceptionTypes #
.# $
TableAlreadyExists$ 6
:6 7
return8 >
$str? Q
;Q R
default 
: 
return 
$str  "
;" #
} 
} 	
public 
enum 
ExceptionTypes "
{ 	
TableAlreadyExists 
=  
$num! "
," # 
TableCreateException  
=! "
$num# $
,$ %
}   	
}!! 
}"" í
D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\DatabaseType.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Database %
{ 
public 

enum 
DatabaseType 
{ 
Mssql 
, 
Postgis 
, %
PostgresqlWithGeodatabase !
,! "
Mongodb 
= 
$num 
, 
Geodatabase		 
,		 
	Shapefile

 
,

 
Oracle 
} 
} Ïu
ôD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\DataReader\FeatureCollectionDataReader.cs
	namespace

 	
Infoline


 
.

 
	Framework

 
.

 
Database

 %
.

% &

DataReader

& 0
{ 
class 	'
FeatureCollectionDataReader
 %
:& '
IDataReader( 3
{ 
FeatureCollection 
_collection %
;% &
string 
_geometryColumnName "
;" #
IFeature 
_currentFeature  
;  !
int 
	_position 
; 
string 
[ 
] 
_columns 
; 

Dictionary 
< 
string 
, 
int 
> 
_columnIndexes  .
;. /
int 
rowCount 
; 
public '
FeatureCollectionDataReader *
(* +
FeatureCollection+ <

collection= G
,G H
stringI O

geoColNameP Z
)Z [
{ 	
	_position 
= 
- 
$num 
; 
_collection 
= 

collection $
;$ %
_geometryColumnName 
=  !

geoColName" ,
;, -
rowCount 
= 

collection !
.! "
Features" *
.* +
Count+ 0
;0 1
if 
( 

collection 
. 
Features #
.# $
Count$ )
>* +
$num, -
)- .
{ 
var 
firstFeature  
=! "

collection# -
.- .
Features. 6
[6 7
$num7 8
]8 9
;9 :
_columns   
=   
firstFeature   '
.  ' (

Attributes  ( 2
.  2 3
GetNames  3 ;
(  ; <
)  < =
.  = >
Union  > C
(  C D
new  D G
string  H N
[  N O
]  O P
{  Q R
_geometryColumnName  S f
}  g h
)  h i
.  i j
ToArray  j q
(  q r
)  r s
;  s t
_columnIndexes!! 
=!!  
_columns!!! )
.!!) *
Select!!* 0
(!!0 1
(!!1 2
a!!2 3
,!!3 4
i!!5 6
)!!6 7
=>!!8 :
new!!; >
{!!? @
Key!!A D
=!!E F
a!!G H
,!!H I
Value!!J O
=!!P Q
i!!R S
}!!T U
)!!U V
.!!V W
ToDictionary!!W c
(!!c d
a!!d e
=>!!f h
a!!i j
.!!j k
Key!!k n
,!!n o
a!!p q
=>!!r t
a!!u v
.!!v w
Value!!w |
)!!| }
;!!} ~
}"" 
}## 	
public&& 
object&& 
this&& 
[&& 
string&& !
name&&" &
]&&& '
{'' 	
get(( 
{)) 
object** 
result** 
;** 
if++ 
(++ 
name++ 
==++ 
_geometryColumnName++ /
)++/ 0
result,, 
=,, 
	Microsoft,, &
.,,& '
	SqlServer,,' 0
.,,0 1
Types,,1 6
.,,6 7
SqlGeography,,7 C
.,,C D
STGeomFromWKB,,D Q
(,,Q R
new,,R U
System,,V \
.,,\ ]
Data,,] a
.,,a b
SqlTypes,,b j
.,,j k
SqlBytes,,k s
(,,s t
_currentFeature	,,t É
.
,,É Ñ
Geometry
,,Ñ å
.
,,å ç
AsBinary
,,ç ï
(
,,ï ñ
)
,,ñ ó
)
,,ó ò
,
,,ò ô
$num
,,ö û
)
,,û ü
;
,,ü †
else-- 
result.. 
=.. 
_currentFeature.. ,
..., -

Attributes..- 7
[..7 8
name..8 <
]..< =
;..= >
if00 
(00 
result00 
==00 
null00 "
)00" #
return11 
DBNull11 !
.11! "
Value11" '
;11' (
return22 
result22 
;22 
}33 
}44 	
public66 
object66 
this66 
[66 
int66 
i66  
]66  !
{77 	
get88 
{99 
return:: 
this:: 
[:: 
_columns:: $
[::$ %
i::% &
]::& '
]::' (
;::( )
};; 
}<< 	
public>> 
int>> 
Depth>> 
{?? 	
get@@ 
{AA 
returnBB 
$numBB 
;BB 
}CC 
}DD 	
publicFF 
intFF 

FieldCountFF 
{GG 	
getHH 
{II 
returnJJ 
_columnsJJ 
.JJ  
LengthJJ  &
;JJ& '
}KK 
}LL 	
publicNN 
boolNN 
IsClosedNN 
{OO 	
getPP 
{QQ 
returnRR 
falseRR 
;RR 
}SS 
}TT 	
publicVV 
intVV 
RecordsAffectedVV "
{WW 	
getXX 
{YY 
returnZZ 
$numZZ 
;ZZ 
}[[ 
}\\ 	
public^^ 
void^^ 
Close^^ 
(^^ 
)^^ 
{__ 	
}aa 	
publiccc 
voidcc 
Disposecc 
(cc 
)cc 
{dd 	
}ff 	
publichh 
boolhh 

GetBooleanhh 
(hh 
inthh "
ihh# $
)hh$ %
{ii 	
returnjj 
Convertjj 
.jj 
	ToBooleanjj $
(jj$ %
thisjj% )
[jj) *
ijj* +
]jj+ ,
)jj, -
;jj- .
}kk 	
publicmm 
bytemm 
GetBytemm 
(mm 
intmm 
imm  !
)mm! "
{nn 	
returnoo 
Convertoo 
.oo 
ToByteoo !
(oo! "
thisoo" &
[oo& '
ioo' (
]oo( )
)oo) *
;oo* +
}pp 	
publicrr 
longrr 
GetBytesrr 
(rr 
intrr  
irr! "
,rr" #
longrr$ (
fieldOffsetrr) 4
,rr4 5
byterr6 :
[rr: ;
]rr; <
bufferrr= C
,rrC D
intrrE H
bufferoffsetrrI U
,rrU V
intrrW Z
lengthrr[ a
)rra b
{ss 	
throwtt 
newtt #
NotImplementedExceptiontt -
(tt- .
)tt. /
;tt/ 0
}uu 	
publicww 
charww 
GetCharww 
(ww 
intww 
iww  !
)ww! "
{xx 	
returnyy 
Convertyy 
.yy 
ToCharyy !
(yy! "
thisyy" &
[yy& '
iyy' (
]yy( )
)yy) *
;yy* +
}zz 	
public|| 
long|| 
GetChars|| 
(|| 
int||  
i||! "
,||" #
long||$ (
fieldoffset||) 4
,||4 5
char||6 :
[||: ;
]||; <
buffer||= C
,||C D
int||E H
bufferoffset||I U
,||U V
int||W Z
length||[ a
)||a b
{}} 	
throw~~ 
new~~ #
NotImplementedException~~ -
(~~- .
)~~. /
;~~/ 0
} 	
public
ÅÅ 
IDataReader
ÅÅ 
GetData
ÅÅ "
(
ÅÅ" #
int
ÅÅ# &
i
ÅÅ' (
)
ÅÅ( )
{
ÇÇ 	
return
ÉÉ 
this
ÉÉ 
;
ÉÉ 
}
ÑÑ 	
public
ÜÜ 
string
ÜÜ 
GetDataTypeName
ÜÜ %
(
ÜÜ% &
int
ÜÜ& )
i
ÜÜ* +
)
ÜÜ+ ,
{
áá 	
return
àà 
this
àà 
[
àà 
i
àà 
]
àà 
.
àà 
GetType
àà "
(
àà" #
)
àà# $
.
àà$ %
Name
àà% )
;
àà) *
}
ââ 	
public
ãã 
DateTime
ãã 
GetDateTime
ãã #
(
ãã# $
int
ãã$ '
i
ãã( )
)
ãã) *
{
åå 	
return
çç 
(
çç 
DateTime
çç 
)
çç 
this
çç !
[
çç! "
i
çç" #
]
çç# $
;
çç$ %
}
éé 	
public
êê 
decimal
êê 

GetDecimal
êê !
(
êê! "
int
êê" %
i
êê& '
)
êê' (
{
ëë 	
return
íí 
(
íí 
decimal
íí 
)
íí 
this
íí  
[
íí  !
i
íí! "
]
íí" #
;
íí# $
}
ìì 	
public
ïï 
double
ïï 
	GetDouble
ïï 
(
ïï  
int
ïï  #
i
ïï$ %
)
ïï% &
{
ññ 	
return
óó 
(
óó 
double
óó 
)
óó 
this
óó 
[
óó  
i
óó  !
]
óó! "
;
óó" #
}
òò 	
public
öö 
Type
öö 
GetFieldType
öö  
(
öö  !
int
öö! $
i
öö% &
)
öö& '
{
õõ 	
return
úú 
this
úú 
[
úú 
i
úú 
]
úú 
.
úú 
GetType
úú "
(
úú" #
)
úú# $
;
úú$ %
}
ùù 	
public
üü 
float
üü 
GetFloat
üü 
(
üü 
int
üü !
i
üü" #
)
üü# $
{
†† 	
return
°° 
(
°° 
float
°° 
)
°° 
this
°° 
[
°° 
i
°°  
]
°°  !
;
°°! "
}
¢¢ 	
public
§§ 
Guid
§§ 
GetGuid
§§ 
(
§§ 
int
§§ 
i
§§  !
)
§§! "
{
•• 	
return
¶¶ 
(
¶¶ 
Guid
¶¶ 
)
¶¶ 
this
¶¶ 
[
¶¶ 
i
¶¶ 
]
¶¶  
;
¶¶  !
}
ßß 	
public
©© 
short
©© 
GetInt16
©© 
(
©© 
int
©© !
i
©©" #
)
©©# $
{
™™ 	
return
´´ 
(
´´ 
short
´´ 
)
´´ 
this
´´ 
[
´´ 
i
´´  
]
´´  !
;
´´! "
}
¨¨ 	
public
ÆÆ 
int
ÆÆ 
GetInt32
ÆÆ 
(
ÆÆ 
int
ÆÆ 
i
ÆÆ  !
)
ÆÆ! "
{
ØØ 	
return
∞∞ 
(
∞∞ 
int
∞∞ 
)
∞∞ 
this
∞∞ 
[
∞∞ 
i
∞∞ 
]
∞∞ 
;
∞∞  
}
±± 	
public
≥≥ 
long
≥≥ 
GetInt64
≥≥ 
(
≥≥ 
int
≥≥  
i
≥≥! "
)
≥≥" #
{
¥¥ 	
return
µµ 
(
µµ 
long
µµ 
)
µµ 
this
µµ 
[
µµ 
i
µµ 
]
µµ  
;
µµ  !
}
∂∂ 	
public
∏∏ 
string
∏∏ 
GetName
∏∏ 
(
∏∏ 
int
∏∏ !
i
∏∏" #
)
∏∏# $
{
ππ 	
return
∫∫ 
_columns
∫∫ 
[
∫∫ 
i
∫∫ 
]
∫∫ 
;
∫∫ 
}
ªª 	
public
ΩΩ 
int
ΩΩ 

GetOrdinal
ΩΩ 
(
ΩΩ 
string
ΩΩ $
name
ΩΩ% )
)
ΩΩ) *
{
ææ 	
return
øø 
_columnIndexes
øø !
[
øø! "
name
øø" &
]
øø& '
;
øø' (
}
¿¿ 	
public
¬¬ 
	DataTable
¬¬ 
GetSchemaTable
¬¬ '
(
¬¬' (
)
¬¬( )
{
√√ 	
throw
ƒƒ 
new
ƒƒ %
NotImplementedException
ƒƒ -
(
ƒƒ- .
)
ƒƒ. /
;
ƒƒ/ 0
}
≈≈ 	
public
«« 
string
«« 
	GetString
«« 
(
««  
int
««  #
i
««$ %
)
««% &
{
»» 	
return
…… 
(
…… 
string
…… 
)
…… 
this
…… 
[
……  
i
……  !
]
……! "
;
……" #
}
   	
public
ÃÃ 
object
ÃÃ 
GetValue
ÃÃ 
(
ÃÃ 
int
ÃÃ "
i
ÃÃ# $
)
ÃÃ$ %
{
ÕÕ 	
return
ŒŒ 
this
ŒŒ 
[
ŒŒ 
i
ŒŒ 
]
ŒŒ 
;
ŒŒ 
}
œœ 	
public
—— 
int
—— 
	GetValues
—— 
(
—— 
object
—— #
[
——# $
]
——$ %
values
——& ,
)
——, -
{
““ 	
throw
”” 
new
”” %
NotImplementedException
”” -
(
””- .
)
””. /
;
””/ 0
}
‘‘ 	
public
÷÷ 
bool
÷÷ 
IsDBNull
÷÷ 
(
÷÷ 
int
÷÷  
i
÷÷! "
)
÷÷" #
{
◊◊ 	
if
ÿÿ 
(
ÿÿ 
this
ÿÿ 
[
ÿÿ 
i
ÿÿ 
]
ÿÿ 
==
ÿÿ 
DBNull
ÿÿ !
.
ÿÿ! "
Value
ÿÿ" '
)
ÿÿ' (
return
ŸŸ 
true
ŸŸ 
;
ŸŸ 
else
⁄⁄ 
return
€€ 
false
€€ 
;
€€ 
}
‹‹ 	
public
ﬁﬁ 
bool
ﬁﬁ 

NextResult
ﬁﬁ 
(
ﬁﬁ 
)
ﬁﬁ  
{
ﬂﬂ 	
if
‡‡ 
(
‡‡ 
	_position
‡‡ 
<
‡‡ 
rowCount
‡‡ $
-
‡‡% &
$num
‡‡' (
)
‡‡( )
return
·· 
true
·· 
;
·· 
return
‚‚ 
false
‚‚ 
;
‚‚ 
}
„„ 	
public
ÂÂ 
bool
ÂÂ 
Read
ÂÂ 
(
ÂÂ 
)
ÂÂ 
{
ÊÊ 	
if
ÁÁ 
(
ÁÁ 

NextResult
ÁÁ 
(
ÁÁ 
)
ÁÁ 
)
ÁÁ 
{
ËË 
	_position
ÈÈ 
+=
ÈÈ 
$num
ÈÈ 
;
ÈÈ 
_currentFeature
ÍÍ 
=
ÍÍ  !
_collection
ÍÍ" -
.
ÍÍ- .
Features
ÍÍ. 6
[
ÍÍ6 7
	_position
ÍÍ7 @
]
ÍÍ@ A
;
ÍÍA B
return
ÎÎ 
true
ÎÎ 
;
ÎÎ 
}
ÏÏ 
return
ÌÌ 
false
ÌÌ 
;
ÌÌ 
}
ÓÓ 	
}
ÔÔ 
} ó
éD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\DataReader\ObjectDataReader.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Database %
.% &

DataReader& 0
{ 
class		 	
ObjectDataReader		
 
{

 
} 
} ÿL
ÉD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\ExpressionHelper.cs
	namespace		 	
Infoline		
 
.		 
	Framework		 
.		 
Database		 %
{

 
public 

class 
ExpressionHelper !
{ 
public 
static 
PropertyInfo "
GetProperty# .
<. /
T/ 0
,0 1
R2 3
>3 4
(4 5

Expression5 ?
<? @
Func@ D
<D E
TE F
,F G
RH I
>I J
>J K
expL O
)O P
{ 	
MemberExpression 
body !
=" #
exp$ '
.' (
Body( ,
as- /
MemberExpression0 @
;@ A
if 
( 
body 
== 
null 
) 
{ 
UnaryExpression 
ubody  %
=& '
(( )
UnaryExpression) 8
)8 9
exp9 <
.< =
Body= A
;A B
body 
= 
ubody 
. 
Operand $
as% '
MemberExpression( 8
;8 9
} 
return 
body 
. 
Member 
as !
PropertyInfo" .
;. /
} 	
public 
static 
IEnumerable !
<! "
PropertyInfo" .
>. /
GetProperties0 =
<= >
T> ?
,? @
RA B
>B C
(C D

ExpressionD N
<N O
FuncO S
<S T
TT U
,U V
RW X
>X Y
>Y Z
exp[ ^
)^ _
{ 	
if 
( 
exp 
== 
null 
) 
return 

Enumerable !
.! "
Empty" '
<' (
PropertyInfo( 4
>4 5
(5 6
)6 7
;7 8
if 
( 
typeof 
( 
MemberExpression '
)' (
.( )
IsAssignableFrom) 9
(9 :
exp: =
.= >
GetType> E
(E F
)F G
)G H
)H I
return 
new 
PropertyInfo '
[' (
]( )
{* +
GetProperty, 7
(7 8
exp8 ;
); <
}= >
;> ?
else   
if   
(   
typeof   
(   
MemberExpression   ,
)  , -
.  - .
IsAssignableFrom  . >
(  > ?
exp  ? B
.  B C
Body  C G
.  G H
GetType  H O
(  O P
)  P Q
)  Q R
)  R S
return!! 
new!! 
PropertyInfo!! '
[!!' (
]!!( )
{!!* +
GetProperty!!, 7
(!!7 8
exp!!8 ;
)!!; <
}!!= >
;!!> ?
else## 
if## 
(## 
typeof## 
(## 
NewExpression## )
)##) *
.##* +
IsAssignableFrom##+ ;
(##; <
exp##< ?
.##? @
Body##@ D
.##D E
GetType##E L
(##L M
)##M N
)##N O
)##O P
{$$ 
var%% 
newexp%% 
=%% 
(%% 
exp%% !
.%%! "
Body%%" &
as%%' )
NewExpression%%* 7
)%%7 8
;%%8 9
var&& 
cols&& 
=&& 
new&& 
string&& %
[&&% &
newexp&&& ,
.&&, -
	Arguments&&- 6
.&&6 7
Count&&7 <
]&&< =
;&&= >
return'' 
newexp'' 
.'' 
	Arguments'' '
.''' (
Select''( .
(''. /
a''/ 0
=>''1 3
(''4 5
a''5 6
as''7 9
MemberExpression'': J
)''J K
.''K L
Member''L R
as''S U
PropertyInfo''V b
)''b c
;''c d
}(( 
else)) 
if)) 
()) 
typeof)) 
()) 
UnaryExpression)) +
)))+ ,
.)), -
IsAssignableFrom))- =
())= >
exp))> A
.))A B
Body))B F
.))F G
GetType))G N
())N O
)))O P
)))P Q
)))Q R
return** 
new** 
PropertyInfo** '
[**' (
]**( )
{*** +
GetProperty**, 7
(**7 8
exp**8 ;
)**; <
}**= >
;**> ?
else,, 
{-- 
throw.. 
new.. 
	Exception.. #
(..# $
$str..$ ?
)..? @
;..@ A
}00 
}11 	
public33 
static33 
string33 
GetPropertyName33 ,
<33, -
T33- .
,33. /
R330 1
>331 2
(332 3

Expression333 =
<33= >
Func33> B
<33B C
T33C D
,33D E
R33F G
>33G H
>33H I
exp33J M
)33M N
{44 	
MemberExpression55 
body55 !
=55" #
exp55$ '
.55' (
Body55( ,
as55- /
MemberExpression550 @
;55@ A
if66 
(66 
body66 
==66 
null66 
)66 
{77 
UnaryExpression88 
ubody88  %
=88& '
(88( )
UnaryExpression88) 8
)888 9
exp889 <
.88< =
Body88= A
;88A B
body99 
=99 
ubody99 
.99 
Operand99 $
as99% '
MemberExpression99( 8
;998 9
}:: 
return;; 
body;; 
.;; 
Member;; 
.;; 
Name;; #
;;;# $
}<< 	
public>> 
static>> 
IEnumerable>> !
<>>! "
string>>" (
>>>( )
GetPropertyNames>>* :
<>>: ;
T>>; <
,>>< =
R>>> ?
>>>? @
(>>@ A

Expression>>A K
<>>K L
Func>>L P
<>>P Q
T>>Q R
,>>R S
R>>T U
>>>U V
>>>V W
exp>>X [
)>>[ \
{?? 	
if@@ 
(@@ 
exp@@ 
==@@ 
null@@ 
)@@ 
returnAA 

EnumerableAA !
.AA! "
EmptyAA" '
<AA' (
stringAA( .
>AA. /
(AA/ 0
)AA0 1
;AA1 2
ifCC 
(CC 
typeofCC 
(CC 
MemberExpressionCC '
)CC' (
.CC( )
IsAssignableFromCC) 9
(CC9 :
expCC: =
.CC= >
GetTypeCC> E
(CCE F
)CCF G
)CCG H
)CCH I
returnDD 
newDD 
[DD 
]DD 
{DD 
GetPropertyNameDD .
(DD. /
expDD/ 2
)DD2 3
}DD4 5
;DD5 6
elseFF 
ifFF 
(FF 
typeofFF 
(FF 
MemberExpressionFF ,
)FF, -
.FF- .
IsAssignableFromFF. >
(FF> ?
expFF? B
.FFB C
BodyFFC G
.FFG H
GetTypeFFH O
(FFO P
)FFP Q
)FFQ R
)FFR S
returnGG 
newGG 
[GG 
]GG 
{GG 
GetPropertyNameGG .
(GG. /
expGG/ 2
)GG2 3
}GG4 5
;GG5 6
elseII 
ifII 
(II 
typeofII 
(II 
NewExpressionII )
)II) *
.II* +
IsAssignableFromII+ ;
(II; <
expII< ?
.II? @
BodyII@ D
.IID E
GetTypeIIE L
(IIL M
)IIM N
)IIN O
)IIO P
{JJ 
varKK 
newexpKK 
=KK 
(KK 
expKK !
.KK! "
BodyKK" &
asKK' )
NewExpressionKK* 7
)KK7 8
;KK8 9
varLL 
colsLL 
=LL 
newLL 
stringLL %
[LL% &
newexpLL& ,
.LL, -
	ArgumentsLL- 6
.LL6 7
CountLL7 <
]LL< =
;LL= >
returnMM 
newexpMM 
.MM 
	ArgumentsMM '
.MM' (
SelectMM( .
(MM. /
aMM/ 0
=>MM1 3
(MM4 5
aMM5 6
asMM7 9
MemberExpressionMM: J
)MMJ K
.MMK L
MemberMML R
.MMR S
NameMMS W
)MMW X
;MMX Y
}NN 
elseOO 
ifOO 
(OO 
typeofOO 
(OO 
UnaryExpressionOO +
)OO+ ,
.OO, -
IsAssignableFromOO- =
(OO= >
expOO> A
.OOA B
BodyOOB F
.OOF G
GetTypeOOG N
(OON O
)OOO P
)OOP Q
)OOQ R
returnPP 
newPP 
[PP 
]PP 
{PP 
GetPropertyNamePP .
(PP. /
expPP/ 2
)PP2 3
}PP4 5
;PP5 6
elseRR 
{SS 
throwTT 
newTT 
	ExceptionTT #
(TT# $
$strTT$ ?
)TT? @
;TT@ A
}VV 
}WW 	
}XX 
}YY Ä|
yD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\Helper.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Database %
{ 
public		 

static		 
class		 #
PropertyAccessGenerator		 /
{

 
public 
static 
object 
Cnv  
(  !
object! '
a( )
,) *
Type+ /
t0 1
)1 2
{ 	
if 
( 
a 
is 
string 
&& 
t  
==! #
typeof$ *
(* +
string+ 1
)1 2
)2 3
return 
a 
; 
if 
( 
a 
is 
DBNull 
|| 
a  
==! #
null$ (
)( )
return* 0
null1 5
;5 6
if 
( 
a 
is 
Int16 
|| 
a 
is  "
Int32# (
||) +
a, -
is. 0
Int641 6
||7 9
a: ;
is< >
UInt16? E
||F H
aI J
isK M
UInt32N T
||U W
aX Y
isZ \
UInt64] c
||d f
ag h
isi k
Doublel r
)r s
{ 
Type 
nt 
= 
Nullable "
." #
GetUnderlyingType# 4
(4 5
t5 6
)6 7
;7 8
if 
( 
nt 
!= 
null 
) 
t  !
=" #
nt$ &
;& '
return 
Convert 
. 

ChangeType )
() *
a* +
,+ ,
t- .
). /
;/ 0
} 
Type 
nt1 
= 
Nullable 
.  
GetUnderlyingType  1
(1 2
t2 3
)3 4
;4 5
if 
( 
nt1 
!= 
null 
) 
t 
=  
nt1! $
;$ %
if 
( 
t 
== 
typeof 
( 
Guid  
)  !
)! "
return 
Guid 
. 
Parse !
(! "
a" #
.# $
ToString$ ,
(, -
)- .
). /
;/ 0
return 
a 
; 
} 	
static   
Cache   
<   
string   
,   
Action   #
<  # $
object  $ *
,  * +
object  , 2
>  2 3
>  3 4
	_setCache  5 >
=  ? @
new  A D
Cache  E J
<  J K
string  K Q
,  Q R
Action  S Y
<  Y Z
object  Z `
,  ` a
object  b h
>  h i
>  i j
(  j k
$num  k n
)  n o
;  o p
static"" 
Cache"" 
<"" 
string"" 
,"" 
Func"" !
<""! "
object""" (
,""( )
object""* 0
>""0 1
>""1 2
	_getCache""3 <
=""= >
new""? B
Cache""C H
<""H I
string""I O
,""O P
Func""Q U
<""U V
object""V \
,""\ ]
object""^ d
>""d e
>""e f
(""f g
$num""g j
)""j k
;""k l
public$$ 
static$$ 
Action$$ 
<$$ 
object$$ #
,$$# $
object$$% +
>$$+ ,
SetDelegate$$- 8
($$8 9
Type$$9 =
type$$> B
,$$B C
string$$D J
name$$K O
)$$O P
{%% 	
Action&& 
<&& 
object&& 
,&& 
object&& !
>&&! "
fnc&&# &
;&&& '
var'' 
key'' 
='' 
type'' 
.'' 
FullName'' #
+''$ %
name''& *
;''* +
if)) 
()) 
!)) 
	_setCache)) 
.)) 
TryGet)) !
())! "
key))" %
,))% &
out))' *
fnc))+ .
))). /
)))/ 0
{** 
try++ 
{,, 
PropertyInfo--  
pi--! #
=--$ %
type--& *
.--* +
GetProperty--+ 6
(--6 7
name--7 ;
)--; <
;--< =
if.. 
(.. 
pi.. 
==.. 
null.. "
).." #
return// 
null// #
;//# $

Expression00 
<00 
Func00 #
<00# $
object00$ *
,00* +
Type00, 0
,000 1
object002 8
>008 9
>009 :
convert00; B
=00C D
(00E F
a00F G
,00G H
t00I J
)00J K
=>00L N
Cnv00O R
(00R S
a00S T
,00T U
t00V W
)00W X
;00X Y
ParameterExpression22 '
p22( )
=22* +

Expression22, 6
.226 7
	Parameter227 @
(22@ A
typeof22A G
(22G H
object22H N
)22N O
)22O P
;22P Q
ParameterExpression33 '
p133( *
=33+ ,

Expression33- 7
.337 8
	Parameter338 A
(33A B
typeof33B H
(33H I
object33I O
)33O P
)33P Q
;33Q R
LabelTarget44 
rt44  "
=44# $

Expression44% /
.44/ 0
Label440 5
(445 6
)446 7
;447 8
LambdaExpression66 $
l66% &
=66' (

Expression66) 3
.663 4
Lambda664 :
(66: ;
typeof66; A
(66A B
Action66B H
<66H I
object66I O
,66O P
object66Q W
>66W X
)66X Y
,66Y Z

Expression77 "
.77" #
Block77# (
(77( )

Expression88 %
.88% &
Assign88& ,
(88, -

Expression99  *
.99* +
Property99+ 3
(993 4

Expression994 >
.99> ?
Convert99? F
(99F G
p99G H
,99H I
type99J N
)99N O
,99O P
pi99Q S
)99S T
,99T U

Expression::  *
.::* +
Convert::+ 2
(::2 3

Expression;;$ .
.;;. /
Invoke;;/ 5
(;;5 6
convert;;6 =
,;;= >
p1;;? A
,;;A B

Expression;;C M
.;;M N
Constant;;N V
(;;V W
pi;;W Y
.;;Y Z
PropertyType;;Z f
);;f g
);;g h
,;;h i
pi;;j l
.;;l m
PropertyType;;m y
)<<  !
)== 
,== 

Expression>> %
.>>% &
Label>>& +
(>>+ ,
rt>>, .
)>>. /
)?? 
,@@ 
p@@ 
,@@ 
p1@@ 
)@@ 
;@@ 
fncAA 
=AA 
(AA 
ActionAA !
<AA! "
objectAA" (
,AA( )
objectAA* 0
>AA0 1
)AA1 2
lAA2 3
.AA3 4
CompileAA4 ;
(AA; <
)AA< =
;AA= >
	_setCacheBB 
.BB 
AddBB !
(BB! "
keyBB" %
,BB% &
fncBB' *
)BB* +
;BB+ ,
}CC 
catchDD 
(DD 
	ExceptionDD  
exDD! #
)DD# $
{EE 
throwFF 
newFF 
	ExceptionFF '
(FF' (
exFF( *
.FF* +
MessageFF+ 2
)FF2 3
;FF3 4
}GG 
}HH 
returnII 
fncII 
;II 
}JJ 	
publicLL 
staticLL 
FuncLL 
<LL 
objectLL !
,LL! "
objectLL# )
>LL) *
GetDelegateLL+ 6
(LL6 7
TypeLL7 ;
typeLL< @
,LL@ A
stringLLB H
nameLLI M
)LLM N
{MM 	
FuncNN 
<NN 
objectNN 
,NN 
objectNN 
>NN  
fncNN! $
;NN$ %
varOO 
keyOO 
=OO 
typeOO 
.OO 
NameOO 
+OO  !
nameOO" &
;OO& '
ifPP 
(PP 
!PP 
	_getCachePP 
.PP 
TryGetPP !
(PP! "
keyPP" %
,PP% &
outPP' *
fncPP+ .
)PP. /
)PP/ 0
{QQ 
PropertyInfoRR 
piRR 
=RR  !
typeRR" &
.RR& '
GetPropertyRR' 2
(RR2 3
nameRR3 7
)RR7 8
;RR8 9
ifSS 
(SS 
piSS 
==SS 
nullSS 
)SS 
returnTT 
nullTT 
;TT  
SystemUU 
.UU 
LinqUU 
.UU 
ExpressionsUU '
.UU' (
ParameterExpressionUU( ;
pUU< =
=UU> ?
SystemUU@ F
.UUF G
LinqUUG K
.UUK L
ExpressionsUUL W
.UUW X

ExpressionUUX b
.UUb c
	ParameterUUc l
(UUl m
typeofUUm s
(UUs t
objectUUt z
)UUz {
)UU{ |
;UU| }
LambdaExpressionWW  
lWW! "
=WW# $

ExpressionWW% /
.WW/ 0
LambdaWW0 6
(WW6 7
typeofWW7 =
(WW= >
FuncWW> B
<WWB C
objectWWC I
,WWI J
objectWWK Q
>WWQ R
)WWR S
,WWS T

ExpressionXX 
.XX 
ConvertXX &
(XX& '

ExpressionYY "
.YY" #
PropertyYY# +
(YY+ ,

ExpressionZZ &
.ZZ& '
ConvertZZ' .
(ZZ. /
pZZ/ 0
,ZZ0 1
typeZZ2 6
)ZZ6 7
,ZZ7 8
piZZ9 ;
)[[ 
,[[ 
typeof[[ !
([[! "
object[[" (
)[[( )
)\\ 
,\\ 
p\\ 
)\\ 
;\\ 
fnc]] 
=]] 
(]] 
Func]] 
<]] 
object]] "
,]]" #
object]]$ *
>]]* +
)]]+ ,
l]], -
.]]- .
Compile]]. 5
(]]5 6
)]]6 7
;]]7 8
	_getCache^^ 
.^^ 
Add^^ 
(^^ 
key^^ !
,^^! "
fnc^^# &
)^^& '
;^^' (
}__ 
return`` 
fnc`` 
;`` 
}aa 	
}bb 
publicdd 

classdd 
Cachedd 
<dd 
TKeydd 
,dd 
TValuedd #
>dd# $
{ee 

Dictionarygg 
<gg 
TKeygg 
,gg 
TValuegg 
>gg  
dicgg! $
=gg% &
newgg' *

Dictionarygg+ 5
<gg5 6
TKeygg6 :
,gg: ;
TValuegg< B
>ggB C
(ggC D
)ggD E
;ggE F
publichh 
IEnumerablehh 
<hh 
TValuehh !
>hh! "
Valueshh# )
{hh* +
gethh, /
{hh0 1
returnhh2 8
dichh9 <
.hh< =
Valueshh= C
;hhC D
}hhE F
}hhG H
publicii 
IEnumerableii 
<ii 
TKeyii 
>ii  
Keysii! %
{ii& '
getii( +
{ii, -
returnii. 4
dicii5 8
.ii8 9
Keysii9 =
;ii= >
}ii? @
}iiA B
publicjj 
intjj 
Sizejj 
{jj 
getjj 
;jj 
privatejj &
setjj' *
;jj* +
}jj, -
publickk 
Cachekk 
(kk 
intkk 
sizekk 
)kk 
{ll 	
Sizemm 
=mm 
sizemm 
;mm 
}nn 	
publicoo 
booloo 
TryGetoo 
(oo 
TKeyoo 
keyoo  #
,oo# $
outoo% (
TValueoo) /
valueoo0 5
)oo5 6
{pp 	
returnqq 
dicqq 
.qq 
TryGetValueqq "
(qq" #
keyqq# &
,qq& '
outqq( +
valueqq, 1
)qq1 2
;qq2 3
}rr 	
publicss 
voidss 
Removess 
(ss 
TKeyss 
keyss  #
)ss# $
{tt 	
ifuu 
(uu 
dicuu 
.uu 
ContainsKeyuu 
(uu  
keyuu  #
)uu# $
)uu$ %
dicvv 
.vv 
Removevv 
(vv 
keyvv 
)vv 
;vv  
}ww 	
publicxx 
voidxx 
Addxx 
(xx 
TKeyxx 
keyxx  
,xx  !
TValuexx" (
valuexx) .
)xx. /
{yy 	
tryzz 
{{{ 
if~~ 
(~~ 
!~~ 
dic~~ 
.~~ 
ContainsKey~~ $
(~~$ %
key~~% (
)~~( )
)~~) *
{ 
dic
ÄÄ 
.
ÄÄ 
Add
ÄÄ 
(
ÄÄ 
key
ÄÄ 
,
ÄÄ  
value
ÄÄ! &
)
ÄÄ& '
;
ÄÄ' (
int
ÇÇ 
size
ÇÇ 
=
ÇÇ 
dic
ÇÇ "
.
ÇÇ" #
Count
ÇÇ# (
-
ÇÇ) *
Size
ÇÇ+ /
;
ÇÇ/ 0
dic
ÉÉ 
.
ÉÉ 
Keys
ÉÉ 
.
ÉÉ 
Take
ÉÉ !
(
ÉÉ! "
size
ÉÉ" &
)
ÉÉ& '
.
ÉÉ' (
ToList
ÉÉ( .
(
ÉÉ. /
)
ÉÉ/ 0
.
ÉÉ0 1
ForEach
ÉÉ1 8
(
ÉÉ8 9
a
ÉÉ9 :
=>
ÉÉ; =
dic
ÉÉ> A
.
ÉÉA B
Remove
ÉÉB H
(
ÉÉH I
a
ÉÉI J
)
ÉÉJ K
)
ÉÉK L
;
ÉÉL M
}
ÑÑ 
else
ÖÖ 
dic
ÜÜ 
[
ÜÜ 
key
ÜÜ 
]
ÜÜ 
=
ÜÜ 
value
ÜÜ $
;
ÜÜ$ %
}
áá 
catch
àà 
(
àà 
	Exception
àà 
)
àà 
{
ââ 
}
åå 
}
çç 	
public
éé 
TValue
éé 
Get
éé 
(
éé 
TKey
éé 
key
éé "
,
éé" #
Func
éé$ (
<
éé( )
TValue
éé) /
>
éé/ 0
create
éé1 7
)
éé7 8
{
èè 	
TValue
êê 
val
êê 
;
êê 
if
ëë 
(
ëë 
!
ëë 
dic
ëë 
.
ëë 
TryGetValue
ëë  
(
ëë  !
key
ëë! $
,
ëë$ %
out
ëë& )
val
ëë* -
)
ëë- .
)
ëë. /
{
íí 
val
ìì 
=
ìì 
create
ìì 
(
ìì 
)
ìì 
;
ìì 
Add
îî 
(
îî 
key
îî 
,
îî 
val
îî 
)
îî 
;
îî 
}
ïï 
return
ññ 
val
ññ 
;
ññ 
}
óó 	
}
öö 
}õõ ¯
èD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\DataBaseHelper\ITableCreator.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Database %
{ 
public 

	interface 
ITableCreator "
{ 
ResultStatus 
Create 
( 
	TableInfo %
	tableInfo& /
)/ 0
;0 1
ResultStatus 
Alter 
( 
	TableInfo $
	tableInfo% .
). /
;/ 0
	TableInfo 
	GetSchema 
( 
string "
	tableName# ,
,, -
bool. 2

onlyColums3 =
=> ?
false@ E
)E F
;F G
}		 
}

 ¬˝
üD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\DataBaseHelper\MsSqlHelper\MssqlQueryBuilder.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Database %
.% &
Mssql& +
{		 
class

 	
MssqlQueryBuilder


 
:

 
IQueryBuilder

 +
{ 
private 
List 
< 
QueryParameter #
># $
_parameters% 0
;0 1
ITypeMapper 
_typeMapper 
;  
public 
MssqlQueryBuilder  
(  !
ITypeMapper! ,

typeMapper- 7
)7 8
{ 	
_parameters 
= 
new 
List "
<" #
QueryParameter# 1
>1 2
(2 3
)3 4
;4 5
_typeMapper 
= 

typeMapper $
;$ %
} 	
public 
Query 
ConvertToQuery #
(# $
string$ *
txt+ .
,. /
params0 6
object7 =
[= >
]> ?

parameters@ J
)J K
{ 	
string 
query 
; 
bool 
isStoredProcedure "
;" #
var 
parameterList 
= 
new  #
List$ (
<( )
QueryParameter) 7
>7 8
(8 9
)9 :
;: ;
var 
	nullCheck 
= 
new 

Dictionary  *
<* +
string+ 1
,1 2
bool3 7
>7 8
(8 9
)9 :
;: ;
isStoredProcedure 
= 
txt  #
.# $
IndexOf$ +
(+ ,
$char, /
)/ 0
==1 3
-4 5
$num5 6
?7 8
true9 =
:> ?
false@ E
;E F
if 
( 
isStoredProcedure !
)! "
{ 
for 
( 
int 
i 
= 
$num 
; 
i  !
<" #

parameters$ .
.. /
Length/ 5
;5 6
i7 8
++8 :
): ;
{   
var!! 
p!! 
=!! 
new!! 
QueryParameter!!  .
{!!/ 0
Name!!1 5
=!!6 7
$str!!8 <
+!!= >
i!!? @
.!!@ A
ToString!!A I
(!!I J
)!!J K
,!!K L
Value!!M R
=!!S T

parameters!!U _
[!!_ `
i!!` a
]!!a b
??!!c e
DBNull!!f l
.!!l m
Value!!m r
}!!s t
;!!t u
parameterList"" !
.""! "
Add""" %
(""% &
p""& '
)""' (
;""( )
}## 
query$$ 
=$$ 
txt$$ 
+$$ 
$str$$ !
+$$" #
string$$$ *
.$$* +
Join$$+ /
($$/ 0
$str$$0 3
,$$3 4
parameterList$$5 B
.$$B C
Select$$C I
($$I J
a$$J K
=>$$L N
a$$O P
.$$P Q
Name$$Q U
)$$U V
.$$V W
ToArray$$W ^
($$^ _
)$$_ `
)$$` a
;$$a b
}%% 
else&& 
{'' 
for)) 
()) 
int)) 
i)) 
=)) 
$num)) 
;)) 
i))  !
<))" #

parameters))$ .
.)). /
Length))/ 5
;))5 6
i))7 8
++))8 :
))): ;
{** 
var++ 
p++ 
=++ 
new++ 
QueryParameter++  .
(++. /
)++/ 0
;++0 1
p,, 
.,, 
Name,, 
=,, 
$str,, !
+,," #
i,,$ %
.,,% &
ToString,,& .
(,,. /
),,/ 0
;,,0 1
p-- 
.-- 
Value-- 
=-- 

parameters-- (
[--( )
i--) *
]--* +
??--, .
DBNull--/ 5
.--5 6
Value--6 ;
;--; <
parameterList.. !
...! "
Add.." %
(..% &
p..& '
)..' (
;..( )
}// 
if00 
(00 
parameterList00 !
.00! "
Count00" '
>00( )
$num00* +
)00+ ,
query11 
=11 
string11 "
.11" #
Format11# )
(11) *
txt11* -
,11- .
parameterList11/ <
.11< =
Select11= C
(11C D
a11D E
=>11F H
a11I J
.11J K
Name11K O
)11O P
.11P Q
ToArray11Q X
(11X Y
)11Y Z
)11Z [
;11[ \
else22 
query33 
=33 
txt33 
;33  
}44 
return55 
new55 
Query55 
{55 
Command55 &
=55' (
query55) .
,55. /

Parameters550 :
=55; <
parameterList55= J
.55J K
ToArray55K R
(55R S
)55S T
,55T U
IsStoredProcedure55V g
=55h i
isStoredProcedure55j {
}55| }
;55} ~
}66 	
public77 
Query77 
GetFetchQuery77 "
(77" #
bool77# '

isFunction77( 2
,772 3
string774 :
	tableName77; D
,77D E
string77F L

schemaName77M W
,77W X
object77Y _
[77_ `
]77` a
functionParameters77b t
,77t u
List77v z
<77z {
QueryStatement	77{ â
>
77â ä

statements
77ã ï
,
77ï ñ
List
77ó õ
<
77õ ú
object
77ú ¢
>
77¢ £

parameters
77§ Æ
)
77Æ Ø
{88 	
return99 
GetQuery99 
(99 

isFunction99 &
,99& '
	tableName99( 1
,991 2

schemaName993 =
,99= >
functionParameters99? Q
,99Q R

statements99S ]
,99] ^

parameters99_ i
,99i j
false99k p
)99p q
;99q r
}:: 	
public;; 
string;;  
GetFetchQueryForTest;; *
(;;* +
bool;;+ /

isFunction;;0 :
,;;: ;
string;;< B
	tableName;;C L
,;;L M
string;;N T

schemaName;;U _
,;;_ `
object;;a g
[;;g h
];;h i
functionParameters;;j |
,;;| }
List	;;~ Ç
<
;;Ç É
QueryStatement
;;É ë
>
;;ë í

statements
;;ì ù
,
;;ù û
List
;;ü £
<
;;£ §
object
;;§ ™
>
;;™ ´

parameters
;;¨ ∂
)
;;∂ ∑
{<< 	
var== 
query== 
=== 
GetQuery==  
(==  !

isFunction==! +
,==+ ,
	tableName==- 6
,==6 7

schemaName==8 B
,==B C
functionParameters==D V
,==V W

statements==X b
,==b c

parameters==d n
,==n o
true==p t
)==t u
;==u v
var>> 
param>> 
=>> 
string>> 
.>> 
Join>> #
(>># $
$str>>$ *
,>>* +
query>>, 1
.>>1 2

Parameters>>2 <
.>>< =
Select>>= C
(>>C D
a>>D E
=>>>F H
string>>I O
.>>O P
Format>>P V
(>>V W
$str>>W n
,>>n o
a>>p q
.>>q r
Name>>r v
,>>v w
_typeMapper	>>x É
.
>>É Ñ
FormatSqlByType
>>Ñ ì
(
>>ì î
a
>>î ï
.
>>ï ñ
Value
>>ñ õ
)
>>õ ú
,
>>ú ù
_typeMapper
>>û ©
.
>>© ™

GetSqlType
>>™ ¥
(
>>¥ µ
a
>>µ ∂
.
>>∂ ∑
Value
>>∑ º
.
>>º Ω
GetType
>>Ω ƒ
(
>>ƒ ≈
)
>>≈ ∆
)
>>∆ «
)
>>« »
)
>>» …
)
>>…  
;
>>  À
return?? 
string?? 
.?? 
Format??  
(??  !
$str??! 1
,??1 2
param??3 8
,??8 9
query??: ?
.??? @
Command??@ G
)??G H
;??H I
}@@ 	
privateBB 
QueryBB 
GetQueryBB 
(BB 
boolBB #

isFunctionBB$ .
,BB. /
stringBB0 6
	tableNameBB7 @
,BB@ A
stringBBB H

schemaNameBBI S
,BBS T
objectBBU [
[BB[ \
]BB\ ]
functionParameterBB^ o
,BBo p
ListBBq u
<BBu v
QueryStatement	BBv Ñ
>
BBÑ Ö

statements
BBÜ ê
,
BBê ë
List
BBí ñ
<
BBñ ó
object
BBó ù
>
BBù û

parameters
BBü ©
,
BB© ™
bool
BB´ Ø
	withSpace
BB∞ π
)
BBπ ∫
{CC 	
_parametersDD 
.DD 
ClearDD 
(DD 
)DD 
;DD  
ifEE 
(EE 
functionParameterEE !
!=EE" $
nullEE% )
)EE) *
_parametersFF 
.FF 
AddRangeFF $
(FF$ %
functionParameterFF% 6
.FF6 7
SelectFF7 =
(FF= >
(FF> ?
aFF? @
,FF@ A
iFFB C
)FFC D
=>FFE G
newFFH K
QueryParameterFFL Z
{FF[ \
NameFF] a
=FFb c
stringFFd j
.FFj k
FormatFFk q
(FFq r
$strFFr x
,FFx y
iFFz {
)FF{ |
,FF| }
Value	FF~ É
=
FFÑ Ö
a
FFÜ á
!=
FFà ä
null
FFã è
?
FFê ë
a
FFí ì
:
FFî ï
DBNull
FFñ ú
.
FFú ù
Value
FFù ¢
}
FF£ §
)
FF§ •
)
FF• ¶
;
FF¶ ß
varHH 
queriesHH 
=HH 
newHH 
ListHH "
<HH" #
SubQueryHH# +
>HH+ ,
(HH, -
)HH- .
;HH. /
varII 
subQueryII 
=II 
newII 
SubQueryII '
(II' (
)II( )
{II* +

IsFunctionII, 6
=II7 8

isFunctionII9 C
,IIC D
	TableNameIIE N
=IIO P
	tableNameIIQ Z
,IIZ [

SchemaNameII\ f
=IIg h

schemaNameIIi s
,IIs t
FunctionParameters	IIu á
=
IIà â
functionParameter
IIä õ
,
IIõ ú
Level
IIù ¢
=
II£ §
$num
II• ¶
}
IIß ®
;
II® ©
forJJ 
(JJ 
intJJ 
iJJ 
=JJ 
$numJJ 
;JJ 
iJJ 
<JJ 

statementsJJ  *
.JJ* +
CountJJ+ 0
;JJ0 1
iJJ2 3
++JJ3 5
)JJ5 6
{KK 
varLL 
statementTypeLL !
=LL" #

statementsLL$ .
[LL. /
iLL/ 0
]LL0 1
;LL1 2
ifMM 
(MM 
statementTypeMM !
==MM" $
QueryStatementMM% 3
.MM3 4
SelectMM4 :
)MM: ;
{NN 
ifOO 
(OO 
!OO 
stringOO 
.OO  
IsNullOrEmptyOO  -
(OO- .
subQueryOO. 6
.OO6 7
SelectOO7 =
)OO= >
)OO> ?
{PP 
queriesQQ 
.QQ  
AddQQ  #
(QQ# $
subQueryQQ$ ,
)QQ, -
;QQ- .
subQueryRR  
=RR! "
newRR# &
SubQueryRR' /
(RR/ 0
)RR0 1
{RR2 3

IsFunctionRR4 >
=RR? @

isFunctionRRA K
,RRK L
PreviousQueryRRM Z
=RR[ \
subQueryRR] e
,RRe f
FunctionParametersRRg y
=RRz {
functionParameter	RR| ç
,
RRç é
Level
RRè î
=
RRï ñ
subQuery
RRó ü
.
RRü †
Level
RR† •
+
RR¶ ß
$num
RR® ©
}
RR™ ´
;
RR´ ¨
}SS 
subQueryTT 
.TT 
SelectTT #
=TT$ %
ProcessSelectTT& 3
(TT3 4

parametersTT4 >
[TT> ?
iTT? @
]TT@ A
asTTB D

INamedItemTTE O
[TTO P
]TTP Q
)TTQ R
;TTR S
}UU 
elseVV 
ifVV 
(VV 
statementTypeVV &
==VV' )
QueryStatementVV* 8
.VV8 9
WhereVV9 >
)VV> ?
{WW 
ifXX 
(XX 
!XX 
stringXX 
.XX  
IsNullOrEmptyXX  -
(XX- .
subQueryXX. 6
.XX6 7
WhereXX7 <
)XX< =
)XX= >
{YY 
queriesZZ 
.ZZ  
AddZZ  #
(ZZ# $
subQueryZZ$ ,
)ZZ, -
;ZZ- .
subQuery[[  
=[[! "
new[[# &
SubQuery[[' /
([[/ 0
)[[0 1
{[[2 3

IsFunction[[4 >
=[[? @

isFunction[[A K
,[[K L
PreviousQuery[[M Z
=[[[ \
subQuery[[] e
,[[e f
FunctionParameters[[g y
=[[z {
functionParameter	[[| ç
,
[[ç é
Level
[[è î
=
[[ï ñ
subQuery
[[ó ü
.
[[ü †
Level
[[† •
+
[[¶ ß
$num
[[® ©
}
[[™ ´
;
[[´ ¨
}\\ 
if]] 
(]] 

parameters]] "
[]]" #
i]]# $
]]]$ %
is]]& (
BEXP]]) -
)]]- .
subQuery^^  
.^^  !
Where^^! &
=^^' (
ProcessWhere^^) 5
(^^5 6

parameters^^6 @
[^^@ A
i^^A B
]^^B C
as^^D F
BEXP^^G K
)^^K L
;^^L M
else__ 
if__ 
(__ 

parameters__ '
[__' (
i__( )
]__) *
.__* +
GetType__+ 2
(__2 3
)__3 4
.__4 5
GetProperty__5 @
(__@ A
$str__A G
)__G H
!=__I K
null__L P
)__P Q
{`` 
varaa 
textaa  
=aa! "
(aa# $
stringaa$ *
)aa* +

parametersaa+ 5
[aa5 6
iaa6 7
]aa7 8
.aa8 9
GetTypeaa9 @
(aa@ A
)aaA B
.aaB C
GetPropertyaaC N
(aaN O
$straaO U
)aaU V
.aaV W
GetValueaaW _
(aa_ `

parametersaa` j
[aaj k
iaak l
]aal m
)aam n
;aan o
varbb 
prmsbb  
=bb! "
(bb# $
objectbb$ *
[bb* +
]bb+ ,
)bb, -

parametersbb- 7
[bb7 8
ibb8 9
]bb9 :
.bb: ;
GetTypebb; B
(bbB C
)bbC D
.bbD E
GetPropertybbE P
(bbP Q
$strbbQ ]
)bb] ^
.bb^ _
GetValuebb_ g
(bbg h

parametersbbh r
[bbr s
ibbs t
]bbt u
)bbu v
;bbv w
forcc 
(cc 
varcc  
kcc! "
=cc# $
$numcc% &
;cc& '
kcc( )
<cc* +
prmscc, 0
.cc0 1
Lengthcc1 7
;cc7 8
kcc9 :
++cc: <
)cc< =
{dd 
varee 
nameee  $
=ee% &
stringee' -
.ee- .
Formatee. 4
(ee4 5
$stree5 <
,ee< =
_parametersee> I
.eeI J
CounteeJ O
)eeO P
;eeP Q
_parametersff '
.ff' (
Addff( +
(ff+ ,
newff, /
QueryParameterff0 >
{ff? @
NameffA E
=ffF G
nameffH L
,ffL M
ValueffN S
=ffT U
prmsffV Z
[ffZ [
iff[ \
]ff\ ]
}ff^ _
)ff_ `
;ff` a
textgg  
=gg! "
textgg# '
.gg' (
Replacegg( /
(gg/ 0
stringgg0 6
.gg6 7
Formatgg7 =
(gg= >
$strgg> G
,ggG H
iggI J
)ggJ K
,ggK L
nameggM Q
)ggQ R
;ggR S
}hh 
subQueryii  
.ii  !
Whereii! &
=ii' (
textii) -
;ii- .
}jj 
}kk 
elsell 
ifll 
(ll 
statementTypell &
==ll' )
QueryStatementll* 8
.ll8 9
GroupByll9 @
)ll@ A
{mm 
ifnn 
(nn 
!nn 
stringnn 
.nn  
IsNullOrEmptynn  -
(nn- .
subQuerynn. 6
.nn6 7
GroupBynn7 >
)nn> ?
)nn? @
{oo 
queriespp 
.pp  
Addpp  #
(pp# $
subQuerypp$ ,
)pp, -
;pp- .
subQueryqq  
=qq! "
newqq# &
SubQueryqq' /
(qq/ 0
)qq0 1
{qq2 3

IsFunctionqq4 >
=qq? @

isFunctionqqA K
,qqK L
PreviousQueryqqM Z
=qq[ \
subQueryqq] e
,qqe f
FunctionParametersqqg y
=qqz {
functionParameter	qq| ç
,
qqç é
Level
qqè î
=
qqï ñ
subQuery
qqó ü
.
qqü †
Level
qq† •
+
qq¶ ß
$num
qq® ©
}
qq™ ´
;
qq´ ¨
}rr 
subQueryss 
.ss 
GroupByss $
=ss% &
ProcessGroupByss' 5
(ss5 6

parametersss6 @
[ss@ A
issA B
]ssB C
asssD F

IQueryItemssG Q
[ssQ R
]ssR S
)ssS T
;ssT U
}tt 
elseuu 
ifuu 
(uu 
statementTypeuu &
==uu' )
QueryStatementuu* 8
.uu8 9
OrderByuu9 @
)uu@ A
{vv 
subQueryww 
.ww 
OrderByww $
=ww% &
ProcessOrderByww' 5
(ww5 6

parametersww6 @
[ww@ A
iwwA B
]wwB C
aswwD F
IQueryOrderItemwwG V
[wwV W
]wwW X
)wwX Y
;wwY Z
}xx 
elseyy 
ifyy 
(yy 
statementTypeyy &
==yy' )
QueryStatementyy* 8
.yy8 9
Skipyy9 =
)yy= >
{zz 
subQuery{{ 
.{{ 
Skip{{ !
={{" #

parameters{{$ .
[{{. /
i{{/ 0
]{{0 1
!={{2 4
null{{5 9
?{{: ;
({{< =
int{{= @
?{{@ A
){{A B
({{B C

parameters{{C M
[{{M N
i{{N O
]{{O P
){{P Q
:{{R S
null{{T X
;{{X Y
}|| 
else}} 
if}} 
(}} 
statementType}} &
==}}' )
QueryStatement}}* 8
.}}8 9
Take}}9 =
)}}= >
{~~ 
subQuery 
. 
Take !
=" #

parameters$ .
[. /
i/ 0
]0 1
!=2 4
null5 9
?: ;
(< =
int= @
?@ A
)A B
(B C

parametersC M
[M N
iN O
]O P
)P Q
:R S
nullT X
;X Y
}
ÄÄ 
}
ÅÅ 
var
ÉÉ 
query
ÉÉ 
=
ÉÉ 
!
ÉÉ 
	withSpace
ÉÉ "
?
ÉÉ# $
subQuery
ÉÉ% -
.
ÉÉ- .

BuildQuery
ÉÉ. 8
(
ÉÉ8 9
)
ÉÉ9 :
:
ÉÉ; <
subQuery
ÉÉ= E
.
ÉÉE F!
BuildQueryWithSpace
ÉÉF Y
(
ÉÉY Z
)
ÉÉZ [
;
ÉÉ[ \
return
ÑÑ 
new
ÑÑ 
Query
ÑÑ 
{
ÑÑ 
Command
ÑÑ &
=
ÑÑ' (
query
ÑÑ) .
,
ÑÑ. /

Parameters
ÑÑ0 :
=
ÑÑ; <
_parameters
ÑÑ= H
.
ÑÑH I
ToArray
ÑÑI P
(
ÑÑP Q
)
ÑÑQ R
}
ÑÑS T
;
ÑÑT U
}
ÖÖ 	
private
áá 
string
áá 
ProcessSelect
áá $
(
áá$ %

INamedItem
áá% /
[
áá/ 0
]
áá0 1
items
áá2 7
)
áá7 8
{
àà 	
var
ââ 
columns
ââ 
=
ââ 
items
ââ 
.
ââ  
Select
ââ  &
(
ââ& '
a
ââ' (
=>
ââ) +
ProcessQueryItem
ââ, <
(
ââ< =
a
ââ= >
)
ââ> ?
)
ââ? @
.
ââ@ A
ToArray
ââA H
(
ââH I
)
ââI J
;
ââJ K
var
ää 
	statement
ää 
=
ää 
string
ää "
.
ää" #
Join
ää# '
(
ää' (
$str
ää( ,
,
ää, -
columns
ää. 5
)
ää5 6
;
ää6 7
return
ãã 
	statement
ãã 
;
ãã 
}
åå 	
private
çç 
string
çç 
ProcessWhere
çç #
(
çç# $
BEXP
çç$ (
exp
çç) ,
)
çç, -
{
éé 	
var
èè 
	statement
èè 
=
èè 
ProcessBEXP
èè '
(
èè' (
exp
èè( +
)
èè+ ,
;
èè, -
return
êê 
	statement
êê 
;
êê 
}
ëë 	
private
íí 
string
íí 
ProcessOrderBy
íí %
(
íí% &
IQueryOrderItem
íí& 5
[
íí5 6
]
íí6 7
items
íí8 =
)
íí= >
{
ìì 	
var
îî 
columns
îî 
=
îî 
items
îî 
.
îî  
Select
îî  &
(
îî& '
a
îî' (
=>
îî) +
ProcessQueryItem
îî, <
(
îî< =
a
îî= >
)
îî> ?
)
îî? @
.
îî@ A
ToArray
îîA H
(
îîH I
)
îîI J
;
îîJ K
var
ïï 
	statement
ïï 
=
ïï 
string
ïï "
.
ïï" #
Join
ïï# '
(
ïï' (
$str
ïï( ,
,
ïï, -
columns
ïï. 5
)
ïï5 6
;
ïï6 7
return
ññ 
	statement
ññ 
;
ññ 
}
óó 	
private
òò 
string
òò 
ProcessGroupBy
òò %
(
òò% &

IQueryItem
òò& 0
[
òò0 1
]
òò1 2
items
òò3 8
)
òò8 9
{
ôô 	
var
öö 
columns
öö 
=
öö 
items
öö 
.
öö  
Select
öö  &
(
öö& '
a
öö' (
=>
öö) +
ProcessQueryItem
öö, <
(
öö< =
a
öö= >
)
öö> ?
)
öö? @
.
öö@ A
ToArray
ööA H
(
ööH I
)
ööI J
;
ööJ K
var
õõ 
	statement
õõ 
=
õõ 
string
õõ "
.
õõ" #
Join
õõ# '
(
õõ' (
$str
õõ( ,
,
õõ, -
columns
õõ. 5
)
õõ5 6
;
õõ6 7
return
úú 
	statement
úú 
;
úú 
}
ùù 	
private
†† 
string
†† 
ProcessQueryItem
†† '
(
††' (

IQueryItem
††( 2
item
††3 7
)
††7 8
{
°° 	
if
¢¢ 
(
¢¢ 
item
¢¢ 
==
¢¢ 
null
¢¢ 
)
¢¢ 
return
¢¢ $
$str
¢¢% '
;
¢¢' (
else
££ 
if
££ 
(
££ 
item
££ 
is
££ 
BEXP
££ !
)
££! "
return
££# )
ProcessBEXP
££* 5
(
££5 6
item
££6 :
as
££; =
BEXP
££> B
)
££B C
;
££C D
else
§§ 
if
§§ 
(
§§ 
item
§§ 
is
§§ 
TEXP
§§ !
)
§§! "
return
§§# )
ProcessTEXP
§§* 5
(
§§5 6
item
§§6 :
as
§§; =
TEXP
§§> B
)
§§B C
;
§§C D
else
•• 
if
•• 
(
•• 
item
•• 
is
•• 
FEXP
•• !
)
••! "
return
••# )
ProcessFEXP
••* 5
(
••5 6
item
••6 :
as
••; =
FEXP
••> B
)
••B C
;
••C D
else
¶¶ 
if
¶¶ 
(
¶¶ 
item
¶¶ 
is
¶¶ 
NEXP
¶¶ !
)
¶¶! "
return
¶¶# )
ProcessNEXP
¶¶* 5
(
¶¶5 6
item
¶¶6 :
as
¶¶; =
NEXP
¶¶> B
)
¶¶B C
;
¶¶C D
else
ßß 
if
ßß 
(
ßß 
item
ßß 
is
ßß 
COL
ßß  
)
ßß  !
return
ßß" (

ProcessCOL
ßß) 3
(
ßß3 4
item
ßß4 8
as
ßß9 ;
COL
ßß< ?
)
ßß? @
;
ßß@ A
else
®® 
if
®® 
(
®® 
item
®® 
is
®® 
VAL
®®  
)
®®  !
return
®®" (

ProcessVAL
®®) 3
(
®®3 4
item
®®4 8
as
®®9 ;
VAL
®®< ?
)
®®? @
;
®®@ A
else
©© 
if
©© 
(
©© 
item
©© 
is
©© 
ARR
©©  
)
©©  !
return
©©" (

ProcessARR
©©) 3
(
©©3 4
item
©©4 8
as
©©9 ;
ARR
©©< ?
)
©©? @
;
©©@ A
else
™™ 
if
™™ 
(
™™ 
item
™™ 
is
™™ 
IQueryOrderItem
™™ ,
)
™™, -
return
™™. 4
ProcessOrderItem
™™5 E
(
™™E F
item
™™F J
as
™™K M
IQueryOrderItem
™™N ]
)
™™] ^
;
™™^ _
return
´´ 
$str
´´ 
;
´´ 
}
≠≠ 	
private
ÆÆ 
string
ÆÆ 
ProcessBEXP
ÆÆ "
(
ÆÆ" #
BEXP
ÆÆ# '
exp
ÆÆ( +
)
ÆÆ+ ,
{
ØØ 	
if
∞∞ 
(
∞∞ 
exp
∞∞ 
==
∞∞ 
null
∞∞ 
)
∞∞ 
return
∞∞ #
$str
∞∞$ &
;
∞∞& '
var
±± 
op
±± 
=
±± 
exp
±± 
.
±± 
Operator
±± !
;
±±! "
var
≤≤ 
operand1
≤≤ 
=
≤≤ 
ProcessQueryItem
≤≤ +
(
≤≤+ ,
exp
≤≤, /
.
≤≤/ 0
Operand1
≤≤0 8
)
≤≤8 9
;
≤≤9 :
var
≥≥ 
operand2
≥≥ 
=
≥≥ 
ProcessQueryItem
≥≥ +
(
≥≥+ ,
exp
≥≥, /
.
≥≥/ 0
Operand2
≥≥0 8
)
≥≥8 9
;
≥≥9 :
if
∂∂ 
(
∂∂ 
exp
∂∂ 
.
∂∂ 
Operator
∂∂ 
==
∂∂ 
BinaryOperator
∂∂  .
.
∂∂. /
Equal
∂∂/ 4
)
∂∂4 5
{
∑∑ 
if
∏∏ 
(
∏∏ 
exp
∏∏ 
.
∏∏ 
Operand1
∏∏  
is
∏∏! #
VAL
∏∏$ '
&&
∏∏( *
(
∏∏+ ,
(
∏∏, -
exp
∏∏- 0
.
∏∏0 1
Operand1
∏∏1 9
as
∏∏: <
VAL
∏∏= @
)
∏∏@ A
.
∏∏A B
Value
∏∏B G
==
∏∏H J
null
∏∏K O
||
∏∏P R
(
∏∏S T
exp
∏∏T W
.
∏∏W X
Operand1
∏∏X `
as
∏∏a c
VAL
∏∏d g
)
∏∏g h
.
∏∏h i
Value
∏∏i n
==
∏∏o q
DBNull
∏∏r x
.
∏∏x y
Value
∏∏y ~
)
∏∏~ 
)∏∏ Ä
{
ππ 
return
∫∫ 
string
∫∫ !
.
∫∫! "
Format
∫∫" (
(
∫∫( )
$str
∫∫) 8
,
∫∫8 9
operand2
∫∫: B
)
∫∫B C
;
∫∫C D
}
ªª 
else
ºº 
if
ºº 
(
ºº 
exp
ºº 
.
ºº 
Operand2
ºº %
is
ºº& (
VAL
ºº) ,
&&
ºº- /
(
ºº0 1
(
ºº1 2
exp
ºº2 5
.
ºº5 6
Operand2
ºº6 >
as
ºº? A
VAL
ººB E
)
ººE F
.
ººF G
Value
ººG L
==
ººM O
null
ººP T
||
ººU W
(
ººX Y
exp
ººY \
.
ºº\ ]
Operand2
ºº] e
as
ººf h
VAL
ººi l
)
ººl m
.
ººm n
Value
ººn s
==
ººt v
DBNull
ººw }
.
ºº} ~
Valueºº~ É
)ººÉ Ñ
)ººÑ Ö
{
ΩΩ 
return
ææ 
string
ææ !
.
ææ! "
Format
ææ" (
(
ææ( )
$str
ææ) 8
,
ææ8 9
operand1
ææ: B
)
ææB C
;
ææC D
}
øø 
}
¿¿ 
else
¡¡ 
if
¡¡ 
(
¡¡ 
exp
¡¡ 
.
¡¡ 
Operator
¡¡ !
==
¡¡" $
BinaryOperator
¡¡% 3
.
¡¡3 4
NotEqual
¡¡4 <
)
¡¡< =
{
¬¬ 
if
√√ 
(
√√ 
exp
√√ 
.
√√ 
Operand1
√√  
is
√√! #
VAL
√√$ '
&&
√√( *
(
√√+ ,
(
√√, -
exp
√√- 0
.
√√0 1
Operand1
√√1 9
as
√√: <
VAL
√√= @
)
√√@ A
.
√√A B
Value
√√B G
==
√√H J
null
√√K O
||
√√P R
(
√√S T
exp
√√T W
.
√√W X
Operand1
√√X `
as
√√a c
VAL
√√d g
)
√√g h
.
√√h i
Value
√√i n
==
√√o q
DBNull
√√r x
.
√√x y
Value
√√y ~
)
√√~ 
)√√ Ä
{
ƒƒ 
return
≈≈ 
string
≈≈ !
.
≈≈! "
Format
≈≈" (
(
≈≈( )
$str
≈≈) <
,
≈≈< =
operand2
≈≈> F
)
≈≈F G
;
≈≈G H
}
∆∆ 
else
«« 
if
«« 
(
«« 
exp
«« 
.
«« 
Operand2
«« %
is
««& (
VAL
««) ,
&&
««- /
(
««0 1
(
««1 2
exp
««2 5
.
««5 6
Operand2
««6 >
as
««? A
VAL
««B E
)
««E F
.
««F G
Value
««G L
==
««M O
null
««P T
||
««U W
(
««X Y
exp
««Y \
.
««\ ]
Operand2
««] e
as
««f h
VAL
««i l
)
««l m
.
««m n
Value
««n s
==
««t v
DBNull
««w }
.
««} ~
Value««~ É
)««É Ñ
)««Ñ Ö
{
»» 
return
…… 
string
…… !
.
……! "
Format
……" (
(
……( )
$str
……) <
,
……< =
operand1
……> F
)
……F G
;
……G H
}
   
}
ÀÀ 
switch
ÕÕ 
(
ÕÕ 
op
ÕÕ 
)
ÕÕ 
{
ŒŒ 
case
œœ 
BinaryOperator
œœ #
.
œœ# $
And
œœ$ '
:
œœ' (
return
œœ) /
string
œœ0 6
.
œœ6 7
Format
œœ7 =
(
œœ= >
$str
œœ> M
,
œœM N
operand1
œœO W
,
œœW X
operand2
œœY a
)
œœa b
;
œœb c
case
–– 
BinaryOperator
–– #
.
––# $
Or
––$ &
:
––& '
return
––( .
string
––/ 5
.
––5 6
Format
––6 <
(
––< =
$str
––= K
,
––K L
operand1
––M U
,
––U V
operand2
––W _
)
––_ `
;
––` a
case
—— 
BinaryOperator
—— #
.
——# $
Not
——$ '
:
——' (
return
——) /
string
——0 6
.
——6 7
Format
——7 =
(
——= >
$str
——> K
,
——K L
operand1
——M U
)
——U V
;
——V W
case
““ 
BinaryOperator
““ #
.
““# $
Equal
““$ )
:
““) *
return
““+ 1
string
““2 8
.
““8 9
Format
““9 ?
(
““? @
$str
““@ M
,
““M N
operand1
““O W
,
““W X
operand2
““Y a
)
““a b
;
““b c
case
”” 
BinaryOperator
”” #
.
””# $
NotEqual
””$ ,
:
””, -
return
””. 4
string
””5 ;
.
””; <
Format
””< B
(
””B C
$str
””C Q
,
””Q R
operand1
””S [
,
””[ \
operand2
””] e
)
””e f
;
””f g
case
‘‘ 
BinaryOperator
‘‘ #
.
‘‘# $
LessThan
‘‘$ ,
:
‘‘, -
return
‘‘. 4
string
‘‘5 ;
.
‘‘; <
Format
‘‘< B
(
‘‘B C
$str
‘‘C P
,
‘‘P Q
operand1
‘‘R Z
,
‘‘Z [
operand2
‘‘\ d
)
‘‘d e
;
‘‘e f
case
’’ 
BinaryOperator
’’ #
.
’’# $
GreaterThan
’’$ /
:
’’/ 0
return
’’1 7
string
’’8 >
.
’’> ?
Format
’’? E
(
’’E F
$str
’’F S
,
’’S T
operand1
’’U ]
,
’’] ^
operand2
’’_ g
)
’’g h
;
’’h i
case
÷÷ 
BinaryOperator
÷÷ #
.
÷÷# $
LessThanOrEqual
÷÷$ 3
:
÷÷3 4
return
÷÷5 ;
string
÷÷< B
.
÷÷B C
Format
÷÷C I
(
÷÷I J
$str
÷÷J X
,
÷÷X Y
operand1
÷÷Z b
,
÷÷b c
operand2
÷÷d l
)
÷÷l m
;
÷÷m n
case
◊◊ 
BinaryOperator
◊◊ #
.
◊◊# $ 
GreaterThanOrEqual
◊◊$ 6
:
◊◊6 7
return
◊◊8 >
string
◊◊? E
.
◊◊E F
Format
◊◊F L
(
◊◊L M
$str
◊◊M [
,
◊◊[ \
operand1
◊◊] e
,
◊◊e f
operand2
◊◊g o
)
◊◊o p
;
◊◊p q
case
ÿÿ 
BinaryOperator
ÿÿ #
.
ÿÿ# $
Like
ÿÿ$ (
:
ÿÿ( )
return
ÿÿ* 0
string
ÿÿ1 7
.
ÿÿ7 8
Format
ÿÿ8 >
(
ÿÿ> ?
$str
ÿÿ? O
,
ÿÿO P
operand1
ÿÿQ Y
,
ÿÿY Z
operand2
ÿÿ[ c
)
ÿÿc d
;
ÿÿd e
case
ŸŸ 
BinaryOperator
ŸŸ #
.
ŸŸ# $
NotLike
ŸŸ$ +
:
ŸŸ+ ,
return
ŸŸ- 3
string
ŸŸ4 :
.
ŸŸ: ;
Format
ŸŸ; A
(
ŸŸA B
$str
ŸŸB V
,
ŸŸV W
operand1
ŸŸX `
,
ŸŸ` a
operand2
ŸŸb j
)
ŸŸj k
;
ŸŸk l
case
⁄⁄ 
BinaryOperator
⁄⁄ #
.
⁄⁄# $
In
⁄⁄$ &
:
⁄⁄& '
return
€€ 
(
€€ 
!
€€ 
string
€€ #
.
€€# $
IsNullOrEmpty
€€$ 1
(
€€1 2
operand2
€€2 :
)
€€: ;
&&
€€< >
operand2
€€? G
!=
€€H J
$str
€€K O
)
€€O P
?
€€Q R
string
€€S Y
.
€€Y Z
Format
€€Z `
(
€€` a
$str
€€a o
,
€€o p
operand1
€€q y
,
€€y z
operand2€€{ É
)€€É Ñ
:€€Ö Ü
$str€€á é
;€€é è
case
‹‹ 
BinaryOperator
‹‹ #
.
‹‹# $
IsNull
‹‹$ *
:
‹‹* +
return
‹‹, 2
string
‹‹3 9
.
‹‹9 :
Format
‹‹: @
(
‹‹@ A
$str
‹‹A P
,
‹‹P Q
operand1
‹‹R Z
)
‹‹Z [
;
‹‹[ \
case
›› 
BinaryOperator
›› #
.
››# $
	IsNotNull
››$ -
:
››- .
return
››/ 5
string
››6 <
.
››< =
Format
››= C
(
››C D
$str
››D W
,
››W X
operand1
››Y a
)
››a b
;
››b c
default
ﬂﬂ 
:
ﬂﬂ 
throw
ﬂﬂ 
new
ﬂﬂ "!
QueryBuildException
ﬂﬂ# 6
(
ﬂﬂ6 7!
QueryBuildException
ﬂﬂ7 J
.
ﬂﬂJ K
ExceptionTypes
ﬂﬂK Y
.
ﬂﬂY Z
OperatorNotFound
ﬂﬂZ j
)
ﬂﬂj k
;
ﬂﬂk l
}
‡‡ 
}
·· 	
private
‚‚ 
string
‚‚ 
ProcessTEXP
‚‚ "
(
‚‚" #
TEXP
‚‚# '
exp
‚‚( +
)
‚‚+ ,
{
„„ 	
var
‰‰ 
op
‰‰ 
=
‰‰ 
exp
‰‰ 
.
‰‰ 
Operator
‰‰ !
;
‰‰! "
var
ÂÂ 
operand1
ÂÂ 
=
ÂÂ 
ProcessQueryItem
ÂÂ +
(
ÂÂ+ ,
exp
ÂÂ, /
.
ÂÂ/ 0
Operand1
ÂÂ0 8
)
ÂÂ8 9
;
ÂÂ9 :
var
ÊÊ 
operand2
ÊÊ 
=
ÊÊ 
ProcessQueryItem
ÊÊ +
(
ÊÊ+ ,
exp
ÊÊ, /
.
ÊÊ/ 0
Operand2
ÊÊ0 8
)
ÊÊ8 9
;
ÊÊ9 :
switch
ÁÁ 
(
ÁÁ 
op
ÁÁ 
)
ÁÁ 
{
ËË 
case
ÈÈ 
TransformOperator
ÈÈ &
.
ÈÈ& '
Add
ÈÈ' *
:
ÈÈ* +
return
ÈÈ, 2
string
ÈÈ3 9
.
ÈÈ9 :
Format
ÈÈ: @
(
ÈÈ@ A
$str
ÈÈA N
,
ÈÈN O
operand1
ÈÈP X
,
ÈÈX Y
operand2
ÈÈZ b
)
ÈÈb c
;
ÈÈc d
case
ÍÍ 
TransformOperator
ÍÍ &
.
ÍÍ& '
Divide
ÍÍ' -
:
ÍÍ- .
return
ÍÍ/ 5
string
ÍÍ6 <
.
ÍÍ< =
Format
ÍÍ= C
(
ÍÍC D
$str
ÍÍD Q
,
ÍÍQ R
operand1
ÍÍS [
,
ÍÍ[ \
operand2
ÍÍ] e
)
ÍÍe f
;
ÍÍf g
case
ÎÎ 
TransformOperator
ÎÎ &
.
ÎÎ& '
Modulo
ÎÎ' -
:
ÎÎ- .
return
ÎÎ/ 5
string
ÎÎ6 <
.
ÎÎ< =
Format
ÎÎ= C
(
ÎÎC D
$str
ÎÎD Q
,
ÎÎQ R
operand1
ÎÎS [
,
ÎÎ[ \
operand2
ÎÎ] e
)
ÎÎe f
;
ÎÎf g
case
ÏÏ 
TransformOperator
ÏÏ &
.
ÏÏ& '
Multiply
ÏÏ' /
:
ÏÏ/ 0
return
ÏÏ1 7
string
ÏÏ8 >
.
ÏÏ> ?
Format
ÏÏ? E
(
ÏÏE F
$str
ÏÏF S
,
ÏÏS T
operand1
ÏÏU ]
,
ÏÏ] ^
operand2
ÏÏ_ g
)
ÏÏg h
;
ÏÏh i
case
ÌÌ 
TransformOperator
ÌÌ &
.
ÌÌ& '
Negate
ÌÌ' -
:
ÌÌ- .
return
ÌÌ/ 5
string
ÌÌ6 <
.
ÌÌ< =
Format
ÌÌ= C
(
ÌÌC D
$str
ÌÌD P
,
ÌÌP Q
operand1
ÌÌR Z
)
ÌÌZ [
;
ÌÌ[ \
case
ÓÓ 
TransformOperator
ÓÓ &
.
ÓÓ& '
Power
ÓÓ' ,
:
ÓÓ, -
return
ÓÓ. 4
string
ÓÓ5 ;
.
ÓÓ; <
Format
ÓÓ< B
(
ÓÓB C
$str
ÓÓC P
,
ÓÓP Q
operand1
ÓÓR Z
,
ÓÓZ [
operand2
ÓÓ\ d
)
ÓÓd e
;
ÓÓe f
case
ÔÔ 
TransformOperator
ÔÔ &
.
ÔÔ& '
Subtract
ÔÔ' /
:
ÔÔ/ 0
return
ÔÔ1 7
string
ÔÔ8 >
.
ÔÔ> ?
Format
ÔÔ? E
(
ÔÔE F
$str
ÔÔF S
,
ÔÔS T
operand1
ÔÔU ]
,
ÔÔ] ^
operand2
ÔÔ_ g
)
ÔÔg h
;
ÔÔh i
case
 
TransformOperator
 &
.
& '
Lambda
' -
:
- .
throw
/ 4
new
5 8!
QueryBuildException
9 L
(
L M!
QueryBuildException
M `
.
` a
ExceptionTypes
a o
.
o p!
OperatorUnsuportedp Ç
)Ç É
;É Ñ
case
ÒÒ 
TransformOperator
ÒÒ &
.
ÒÒ& '
Conditional
ÒÒ' 2
:
ÒÒ2 3
throw
ÒÒ4 9
new
ÒÒ: =!
QueryBuildException
ÒÒ> Q
(
ÒÒQ R!
QueryBuildException
ÒÒR e
.
ÒÒe f
ExceptionTypes
ÒÒf t
.
ÒÒt u!
OperatorUnsuportedÒÒu á
)ÒÒá à
;ÒÒà â
case
ÚÚ 
TransformOperator
ÚÚ &
.
ÚÚ& '
ExclusiveOr
ÚÚ' 2
:
ÚÚ2 3
throw
ÚÚ4 9
new
ÚÚ: =!
QueryBuildException
ÚÚ> Q
(
ÚÚQ R!
QueryBuildException
ÚÚR e
.
ÚÚe f
ExceptionTypes
ÚÚf t
.
ÚÚt u!
OperatorUnsuportedÚÚu á
)ÚÚá à
;ÚÚà â
case
ÛÛ 
TransformOperator
ÛÛ &
.
ÛÛ& '
OnesComplement
ÛÛ' 5
:
ÛÛ5 6
throw
ÛÛ7 <
new
ÛÛ= @!
QueryBuildException
ÛÛA T
(
ÛÛT U!
QueryBuildException
ÛÛU h
.
ÛÛh i
ExceptionTypes
ÛÛi w
.
ÛÛw x!
OperatorUnsuportedÛÛx ä
)ÛÛä ã
;ÛÛã å
default
ÙÙ 
:
ÙÙ 
throw
ÙÙ 
new
ÙÙ "!
QueryBuildException
ÙÙ# 6
(
ÙÙ6 7!
QueryBuildException
ÙÙ7 J
.
ÙÙJ K
ExceptionTypes
ÙÙK Y
.
ÙÙY Z
OperatorNotFound
ÙÙZ j
)
ÙÙj k
;
ÙÙk l
}
ıı 
}
ˆˆ 	
private
˜˜ 
string
˜˜ 
ProcessFEXP
˜˜ "
(
˜˜" #
FEXP
˜˜# '
exp
˜˜( +
)
˜˜+ ,
{
¯¯ 	
var
˙˙ 
function
˙˙ 
=
˙˙ 
exp
˙˙ 
.
˙˙ 
Function
˙˙ '
;
˙˙' (
var
˚˚ 

parameters
˚˚ 
=
˚˚ 
exp
˚˚  
.
˚˚  !

Parameters
˚˚! +
!=
˚˚, .
null
˚˚/ 3
?
˚˚4 5
exp
˚˚6 9
.
˚˚9 :

Parameters
˚˚: D
.
˚˚D E
Select
˚˚E K
(
˚˚K L
a
˚˚L M
=>
˚˚N P
ProcessQueryItem
˚˚Q a
(
˚˚a b
a
˚˚b c
)
˚˚c d
)
˚˚d e
.
˚˚e f
ToArray
˚˚f m
(
˚˚m n
)
˚˚n o
:
˚˚p q
new
˚˚r u
string
˚˚v |
[
˚˚| }
$num
˚˚} ~
]
˚˚~ 
;˚˚ Ä
switch
¸¸ 
(
¸¸ 
function
¸¸ 
)
¸¸ 
{
˝˝ 
case
˛˛ 
QueryFunctions
˛˛ #
.
˛˛# $
Ascii
˛˛$ )
:
˛˛) *
return
˛˛+ 1
string
˛˛2 8
.
˛˛8 9
Format
˛˛9 ?
(
˛˛? @
$str
˛˛@ L
,
˛˛L M

parameters
˛˛N X
[
˛˛X Y
$num
˛˛Y Z
]
˛˛Z [
)
˛˛[ \
;
˛˛\ ]
case
ˇˇ 
QueryFunctions
ˇˇ #
.
ˇˇ# $
Char
ˇˇ$ (
:
ˇˇ( )
return
ˇˇ* 0
string
ˇˇ1 7
.
ˇˇ7 8
Format
ˇˇ8 >
(
ˇˇ> ?
$str
ˇˇ? J
,
ˇˇJ K

parameters
ˇˇL V
[
ˇˇV W
$num
ˇˇW X
]
ˇˇX Y
)
ˇˇY Z
;
ˇˇZ [
case
ÄÄ 
QueryFunctions
ÄÄ #
.
ÄÄ# $
	CharIndex
ÄÄ$ -
:
ÄÄ- .
if
ÅÅ 
(
ÅÅ 

parameters
ÅÅ "
.
ÅÅ" #
Length
ÅÅ# )
==
ÅÅ* ,
$num
ÅÅ- .
)
ÅÅ. /
return
ÅÅ0 6
string
ÅÅ7 =
.
ÅÅ= >
Format
ÅÅ> D
(
ÅÅD E
$str
ÅÅE ^
,
ÅÅ^ _

parameters
ÅÅ` j
[
ÅÅj k
$num
ÅÅk l
]
ÅÅl m
,
ÅÅm n

parameters
ÅÅo y
[
ÅÅy z
$num
ÅÅz {
]
ÅÅ{ |
)
ÅÅ| }
;
ÅÅ} ~
else
ÇÇ 
if
ÇÇ 
(
ÇÇ 

parameters
ÇÇ '
.
ÇÇ' (
Length
ÇÇ( .
==
ÇÇ/ 1
$num
ÇÇ2 3
)
ÇÇ3 4
return
ÇÇ5 ;
string
ÇÇ< B
.
ÇÇB C
Format
ÇÇC I
(
ÇÇI J
$str
ÇÇJ h
,
ÇÇh i

parameters
ÇÇj t
[
ÇÇt u
$num
ÇÇu v
]
ÇÇv w
,
ÇÇw x

parametersÇÇy É
[ÇÇÉ Ñ
$numÇÇÑ Ö
]ÇÇÖ Ü
,ÇÇÜ á

parametersÇÇà í
[ÇÇí ì
$numÇÇì î
]ÇÇî ï
)ÇÇï ñ
;ÇÇñ ó
else
ÉÉ 
throw
ÉÉ 
new
ÉÉ "!
QueryBuildException
ÉÉ# 6
(
ÉÉ6 7!
QueryBuildException
ÉÉ7 J
.
ÉÉJ K
ExceptionTypes
ÉÉK Y
.
ÉÉY Z#
ParameterCountIsWrong
ÉÉZ o
)
ÉÉo p
;
ÉÉp q
case
ÑÑ 
QueryFunctions
ÑÑ #
.
ÑÑ# $
Concat
ÑÑ$ *
:
ÑÑ* +
return
ÑÑ, 2
string
ÑÑ3 9
.
ÑÑ9 :
Format
ÑÑ: @
(
ÑÑ@ A
$str
ÑÑA N
,
ÑÑN O
string
ÑÑP V
.
ÑÑV W
Join
ÑÑW [
(
ÑÑ[ \
$str
ÑÑ\ _
,
ÑÑ_ `

parameters
ÑÑa k
)
ÑÑk l
)
ÑÑl m
;
ÑÑm n
case
ÖÖ 
QueryFunctions
ÖÖ #
.
ÖÖ# $

Difference
ÖÖ$ .
:
ÖÖ. /
return
ÖÖ0 6
string
ÖÖ7 =
.
ÖÖ= >
Format
ÖÖ> D
(
ÖÖD E
$str
ÖÖE [
,
ÖÖ[ \

parameters
ÖÖ] g
[
ÖÖg h
$num
ÖÖh i
]
ÖÖi j
,
ÖÖj k

parameters
ÖÖl v
[
ÖÖv w
$num
ÖÖw x
]
ÖÖx y
)
ÖÖy z
;
ÖÖz {
;
ÖÖ| }
case
ÜÜ 
QueryFunctions
ÜÜ #
.
ÜÜ# $
Format
ÜÜ$ *
:
ÜÜ* +
if
áá 
(
áá 

parameters
áá "
.
áá" #
Length
áá# )
==
áá* ,
$num
áá- .
)
áá. /
return
áá0 6
string
áá7 =
.
áá= >
Format
áá> D
(
ááD E
$str
ááE W
,
ááW X

parameters
ááY c
[
áác d
$num
áád e
]
ááe f
,
ááf g

parameters
ááh r
[
áár s
$num
áás t
]
áát u
)
ááu v
;
ááv w
else
àà 
if
àà 
(
àà 

parameters
àà '
.
àà' (
Length
àà( .
==
àà/ 1
$num
àà2 3
)
àà3 4
return
àà5 ;
string
àà< B
.
ààB C
Format
ààC I
(
ààI J
$str
ààJ a
,
ààa b

parameters
ààc m
[
ààm n
$num
ààn o
]
àào p
,
ààp q

parameters
ààr |
[
àà| }
$num
àà} ~
]
àà~ 
,àà Ä

parametersààÅ ã
[ààã å
$numààå ç
]ààç é
)ààé è
;ààè ê
else
ââ 
throw
ââ 
new
ââ "!
QueryBuildException
ââ# 6
(
ââ6 7!
QueryBuildException
ââ7 J
.
ââJ K
ExceptionTypes
ââK Y
.
ââY Z#
ParameterCountIsWrong
ââZ o
)
ââo p
;
ââp q
case
ää 
QueryFunctions
ää #
.
ää# $
Left
ää$ (
:
ää( )
return
ää* 0
string
ää1 7
.
ää7 8
Format
ää8 >
(
ää> ?
$str
ää? O
,
ääO P

parameters
ääQ [
[
ää[ \
$num
ää\ ]
]
ää] ^
,
ää^ _

parameters
ää` j
[
ääj k
$num
ääk l
]
ääl m
)
ääm n
;
ään o
case
ãã 
QueryFunctions
ãã #
.
ãã# $
Len
ãã$ '
:
ãã' (
return
ãã) /
string
ãã0 6
.
ãã6 7
Format
ãã7 =
(
ãã= >
$str
ãã> H
,
ããH I

parameters
ããJ T
[
ããT U
$num
ããU V
]
ããV W
)
ããW X
;
ããX Y
case
åå 
QueryFunctions
åå #
.
åå# $
Lower
åå$ )
:
åå) *
return
åå+ 1
string
åå2 8
.
åå8 9
Format
åå9 ?
(
åå? @
$str
åå@ L
,
ååL M

parameters
ååN X
[
ååX Y
$num
ååY Z
]
ååZ [
)
åå[ \
;
åå\ ]
case
çç 
QueryFunctions
çç #
.
çç# $
Ltrim
çç$ )
:
çç) *
return
çç+ 1
string
çç2 8
.
çç8 9
Format
çç9 ?
(
çç? @
$str
çç@ L
,
ççL M

parameters
ççN X
[
ççX Y
$num
ççY Z
]
ççZ [
)
çç[ \
;
çç\ ]
case
éé 
QueryFunctions
éé #
.
éé# $
Nchar
éé$ )
:
éé) *
return
éé+ 1
string
éé2 8
.
éé8 9
Format
éé9 ?
(
éé? @
$str
éé@ L
,
ééL M

parameters
ééN X
[
ééX Y
$num
ééY Z
]
ééZ [
)
éé[ \
;
éé\ ]
case
èè 
QueryFunctions
èè #
.
èè# $
Patindex
èè$ ,
:
èè, -
return
èè. 4
string
èè5 ;
.
èè; <
Format
èè< B
(
èèB C
$str
èèC W
,
èèW X

parameters
èèY c
[
èèc d
$num
èèd e
]
èèe f
,
èèf g

parameters
èèh r
[
èèr s
$num
èès t
]
èèt u
)
èèu v
;
èèv w
case
êê 
QueryFunctions
êê #
.
êê# $
	Quotename
êê$ -
:
êê- .
if
ëë 
(
ëë 

parameters
ëë "
.
ëë" #
Length
ëë# )
==
ëë* ,
$num
ëë- .
)
ëë. /
return
ëë0 6
string
ëë7 =
.
ëë= >
Format
ëë> D
(
ëëD E
$str
ëëE U
,
ëëU V

parameters
ëëW a
[
ëëa b
$num
ëëb c
]
ëëc d
)
ëëd e
;
ëëe f
else
íí 
if
íí 
(
íí 

parameters
íí '
.
íí' (
Length
íí( .
==
íí/ 1
$num
íí2 3
)
íí3 4
return
íí5 ;
string
íí< B
.
ííB C
Format
ííC I
(
ííI J
$str
ííJ _
,
íí_ `

parameters
íía k
[
íík l
$num
ííl m
]
íím n
,
íín o

parameters
ííp z
[
ííz {
$num
íí{ |
]
íí| }
)
íí} ~
;
íí~ 
else
ìì 
throw
ìì 
new
ìì "!
QueryBuildException
ìì# 6
(
ìì6 7!
QueryBuildException
ìì7 J
.
ììJ K
ExceptionTypes
ììK Y
.
ììY Z#
ParameterCountIsWrong
ììZ o
)
ììo p
;
ììp q
case
îî 
QueryFunctions
îî #
.
îî# $
Replace
îî$ +
:
îî+ ,
return
îî- 3
string
îî4 :
.
îî: ;
Format
îî; A
(
îîA B
$str
îîB Z
,
îîZ [

parameters
îî\ f
[
îîf g
$num
îîg h
]
îîh i
,
îîi j

parameters
îîk u
[
îîu v
$num
îîv w
]
îîw x
,
îîx y

parametersîîz Ñ
[îîÑ Ö
$numîîÖ Ü
]îîÜ á
)îîá à
;îîà â
case
ïï 
QueryFunctions
ïï #
.
ïï# $
	Replicate
ïï$ -
:
ïï- .
return
ïï/ 5
string
ïï6 <
.
ïï< =
Format
ïï= C
(
ïïC D
$str
ïïD W
,
ïïW X

parameters
ïïY c
[
ïïc d
$num
ïïd e
]
ïïe f
,
ïïf g

parameters
ïïh r
[
ïïr s
$num
ïïs t
]
ïït u
)
ïïu v
;
ïïv w
;
ïïx y
case
ññ 
QueryFunctions
ññ #
.
ññ# $
Reverse
ññ$ +
:
ññ+ ,
return
ññ- 3
string
ññ4 :
.
ññ: ;
Format
ññ; A
(
ññA B
$str
ññB P
,
ññP Q

parameters
ññR \
[
ññ\ ]
$num
ññ] ^
]
ññ^ _
)
ññ_ `
;
ññ` a
case
óó 
QueryFunctions
óó #
.
óó# $
Right
óó$ )
:
óó) *
return
óó+ 1
string
óó2 8
.
óó8 9
Format
óó9 ?
(
óó? @
$str
óó@ Q
,
óóQ R

parameters
óóS ]
[
óó] ^
$num
óó^ _
]
óó_ `
,
óó` a

parameters
óób l
[
óól m
$num
óóm n
]
óón o
)
óóo p
;
óóp q
case
òò 
QueryFunctions
òò #
.
òò# $
Rtrim
òò$ )
:
òò) *
return
òò+ 1
string
òò2 8
.
òò8 9
Format
òò9 ?
(
òò? @
$str
òò@ L
,
òòL M

parameters
òòN X
[
òòX Y
$num
òòY Z
]
òòZ [
)
òò[ \
;
òò\ ]
case
ôô 
QueryFunctions
ôô #
.
ôô# $
Trim
ôô$ (
:
ôô( )
return
ôô* 0
string
ôô1 7
.
ôô7 8
Format
ôô8 >
(
ôô> ?
$str
ôô? R
,
ôôR S

parameters
ôôT ^
[
ôô^ _
$num
ôô_ `
]
ôô` a
)
ôôa b
;
ôôb c
case
öö 
QueryFunctions
öö #
.
öö# $
Soundex
öö$ +
:
öö+ ,
return
öö- 3
string
öö4 :
.
öö: ;
Format
öö; A
(
ööA B
$str
ööB P
,
ööP Q

parameters
ööR \
[
öö\ ]
$num
öö] ^
]
öö^ _
)
öö_ `
;
öö` a
case
õõ 
QueryFunctions
õõ #
.
õõ# $
Space
õõ$ )
:
õõ) *
return
õõ+ 1
string
õõ2 8
.
õõ8 9
Format
õõ9 ?
(
õõ? @
$str
õõ@ L
,
õõL M

parameters
õõN X
[
õõX Y
$num
õõY Z
]
õõZ [
)
õõ[ \
;
õõ\ ]
case
úú 
QueryFunctions
úú #
.
úú# $
Str
úú$ '
:
úú' (
if
ùù 
(
ùù 

parameters
ùù "
.
ùù" #
Length
ùù# )
==
ùù* ,
$num
ùù- .
)
ùù. /
return
ùù0 6
string
ùù7 =
.
ùù= >
Format
ùù> D
(
ùùD E
$str
ùùE O
,
ùùO P

parameters
ùùQ [
[
ùù[ \
$num
ùù\ ]
]
ùù] ^
)
ùù^ _
;
ùù_ `
else
ûû 
if
ûû 
(
ûû 

parameters
ûû '
.
ûû' (
Length
ûû( .
==
ûû/ 1
$num
ûû2 3
)
ûû3 4
return
ûû5 ;
string
ûû< B
.
ûûB C
Format
ûûC I
(
ûûI J
$str
ûûJ Y
,
ûûY Z

parameters
ûû[ e
[
ûûe f
$num
ûûf g
]
ûûg h
,
ûûh i

parameters
ûûj t
[
ûût u
$num
ûûu v
]
ûûv w
)
ûûw x
;
ûûx y
else
üü 
if
üü 
(
üü 

parameters
üü '
.
üü' (
Length
üü( .
==
üü/ 1
$num
üü2 3
)
üü3 4
return
üü5 ;
string
üü< B
.
üüB C
Format
üüC I
(
üüI J
$str
üüJ ^
,
üü^ _

parameters
üü` j
[
üüj k
$num
üük l
]
üül m
,
üüm n

parameters
üüo y
[
üüy z
$num
üüz {
]
üü{ |
,
üü| }

parametersüü~ à
[üüà â
$numüüâ ä
]üüä ã
)üüã å
;üüå ç
else
†† 
throw
†† 
new
†† "!
QueryBuildException
††# 6
(
††6 7!
QueryBuildException
††7 J
.
††J K
ExceptionTypes
††K Y
.
††Y Z#
ParameterCountIsWrong
††Z o
)
††o p
;
††p q
case
°° 
QueryFunctions
°° #
.
°°# $
String_Escape
°°$ 1
:
°°1 2
return
°°3 9
string
°°: @
.
°°@ A
Format
°°A G
(
°°G H
$str
°°H a
,
°°a b

parameters
°°c m
[
°°m n
$num
°°n o
]
°°o p
,
°°p q

parameters
°°r |
[
°°| }
$num
°°} ~
]
°°~ 
)°° Ä
;°°Ä Å
case
¢¢ 
QueryFunctions
¢¢ #
.
¢¢# $
String_Split
¢¢$ 0
:
¢¢0 1
return
¢¢2 8
string
¢¢9 ?
.
¢¢? @
Format
¢¢@ F
(
¢¢F G
$str
¢¢G _
,
¢¢_ `

parameters
¢¢a k
[
¢¢k l
$num
¢¢l m
]
¢¢m n
,
¢¢n o

parameters
¢¢p z
[
¢¢z {
$num
¢¢{ |
]
¢¢| }
)
¢¢} ~
;
¢¢~ 
case
££ 
QueryFunctions
££ #
.
££# $
Stuff
££$ )
:
££) *
return
££+ 1
string
££2 8
.
££8 9
Format
££9 ?
(
££? @
$str
££@ [
,
££[ \

parameters
££] g
[
££g h
$num
££h i
]
££i j
,
££j k

parameters
££l v
[
££v w
$num
££w x
]
££x y
,
££y z

parameters££{ Ö
[££Ö Ü
$num££Ü á
]££á à
,££à â

parameters££ä î
[££î ï
$num££ï ñ
]££ñ ó
)££ó ò
;££ò ô
case
§§ 
QueryFunctions
§§ #
.
§§# $
	Substring
§§$ -
:
§§- .
if
•• 
(
•• 

parameters
•• "
.
••" #
Length
••# )
==
••* ,
$num
••- .
)
••. /
return
••0 6
string
••7 =
.
••= >
Format
••> D
(
••D E
$str
••E l
,
••l m

parameters
••n x
[
••x y
$num
••y z
]
••z {
,
••{ |

parameters••} á
[••á à
$num••à â
]••â ä
)••ä ã
;••ã å
else
¶¶ 
if
¶¶ 
(
¶¶ 

parameters
¶¶ '
.
¶¶' (
Length
¶¶( .
==
¶¶/ 1
$num
¶¶2 3
)
¶¶3 4
return
¶¶5 ;
string
¶¶< B
.
¶¶B C
Format
¶¶C I
(
¶¶I J
$str
¶¶J f
,
¶¶f g

parameters
¶¶h r
[
¶¶r s
$num
¶¶s t
]
¶¶t u
,
¶¶u v

parameters¶¶w Å
[¶¶Å Ç
$num¶¶Ç É
]¶¶É Ñ
,¶¶Ñ Ö

parameters¶¶Ü ê
[¶¶ê ë
$num¶¶ë í
]¶¶í ì
)¶¶ì î
;¶¶î ï
else
ßß 
throw
ßß 
new
ßß "!
QueryBuildException
ßß# 6
(
ßß6 7!
QueryBuildException
ßß7 J
.
ßßJ K
ExceptionTypes
ßßK Y
.
ßßY Z#
ParameterCountIsWrong
ßßZ o
)
ßßo p
;
ßßp q
case
®® 
QueryFunctions
®® #
.
®®# $
Unicode
®®$ +
:
®®+ ,
return
®®- 3
string
®®4 :
.
®®: ;
Format
®®; A
(
®®A B
$str
®®B P
,
®®P Q

parameters
®®R \
[
®®\ ]
$num
®®] ^
]
®®^ _
)
®®_ `
;
®®` a
case
©© 
QueryFunctions
©© #
.
©©# $
Upper
©©$ )
:
©©) *
return
©©+ 1
string
©©2 8
.
©©8 9
Format
©©9 ?
(
©©? @
$str
©©@ L
,
©©L M

parameters
©©N X
[
©©X Y
$num
©©Y Z
]
©©Z [
)
©©[ \
;
©©\ ]
case
´´ 
QueryFunctions
´´ #
.
´´# $
Abs
´´$ '
:
´´' (
return
´´) /
string
´´0 6
.
´´6 7
Format
´´7 =
(
´´= >
$str
´´> H
,
´´H I

parameters
´´J T
[
´´T U
$num
´´U V
]
´´V W
)
´´W X
;
´´X Y
case
¨¨ 
QueryFunctions
¨¨ #
.
¨¨# $
Acos
¨¨$ (
:
¨¨( )
return
¨¨* 0
string
¨¨1 7
.
¨¨7 8
Format
¨¨8 >
(
¨¨> ?
$str
¨¨? J
,
¨¨J K

parameters
¨¨L V
[
¨¨V W
$num
¨¨W X
]
¨¨X Y
)
¨¨Y Z
;
¨¨Z [
case
≠≠ 
QueryFunctions
≠≠ #
.
≠≠# $
Asin
≠≠$ (
:
≠≠( )
return
≠≠* 0
string
≠≠1 7
.
≠≠7 8
Format
≠≠8 >
(
≠≠> ?
$str
≠≠? J
,
≠≠J K

parameters
≠≠L V
[
≠≠V W
$num
≠≠W X
]
≠≠X Y
)
≠≠Y Z
;
≠≠Z [
case
ÆÆ 
QueryFunctions
ÆÆ #
.
ÆÆ# $
Atan
ÆÆ$ (
:
ÆÆ( )
return
ÆÆ* 0
string
ÆÆ1 7
.
ÆÆ7 8
Format
ÆÆ8 >
(
ÆÆ> ?
$str
ÆÆ? J
,
ÆÆJ K

parameters
ÆÆL V
[
ÆÆV W
$num
ÆÆW X
]
ÆÆX Y
)
ÆÆY Z
;
ÆÆZ [
case
ØØ 
QueryFunctions
ØØ #
.
ØØ# $
Atn2
ØØ$ (
:
ØØ( )
return
ØØ* 0
string
ØØ1 7
.
ØØ7 8
Format
ØØ8 >
(
ØØ> ?
$str
ØØ? O
,
ØØO P

parameters
ØØQ [
[
ØØ[ \
$num
ØØ\ ]
]
ØØ] ^
,
ØØ^ _

parameters
ØØ` j
[
ØØj k
$num
ØØk l
]
ØØl m
)
ØØm n
;
ØØn o
case
∞∞ 
QueryFunctions
∞∞ #
.
∞∞# $
Ceiling
∞∞$ +
:
∞∞+ ,
return
∞∞- 3
string
∞∞4 :
.
∞∞: ;
Format
∞∞; A
(
∞∞A B
$str
∞∞B P
,
∞∞P Q

parameters
∞∞R \
[
∞∞\ ]
$num
∞∞] ^
]
∞∞^ _
)
∞∞_ `
;
∞∞` a
case
±± 
QueryFunctions
±± #
.
±±# $
Cos
±±$ '
:
±±' (
return
±±) /
string
±±0 6
.
±±6 7
Format
±±7 =
(
±±= >
$str
±±> H
,
±±H I

parameters
±±J T
[
±±T U
$num
±±U V
]
±±V W
)
±±W X
;
±±X Y
case
≤≤ 
QueryFunctions
≤≤ #
.
≤≤# $
Cot
≤≤$ '
:
≤≤' (
return
≤≤) /
string
≤≤0 6
.
≤≤6 7
Format
≤≤7 =
(
≤≤= >
$str
≤≤> H
,
≤≤H I

parameters
≤≤J T
[
≤≤T U
$num
≤≤U V
]
≤≤V W
)
≤≤W X
;
≤≤X Y
case
≥≥ 
QueryFunctions
≥≥ #
.
≥≥# $
Degrees
≥≥$ +
:
≥≥+ ,
return
≥≥- 3
string
≥≥4 :
.
≥≥: ;
Format
≥≥; A
(
≥≥A B
$str
≥≥B P
,
≥≥P Q

parameters
≥≥R \
[
≥≥\ ]
$num
≥≥] ^
]
≥≥^ _
)
≥≥_ `
;
≥≥` a
case
¥¥ 
QueryFunctions
¥¥ #
.
¥¥# $
Exp
¥¥$ '
:
¥¥' (
return
¥¥) /
string
¥¥0 6
.
¥¥6 7
Format
¥¥7 =
(
¥¥= >
$str
¥¥> H
,
¥¥H I

parameters
¥¥J T
[
¥¥T U
$num
¥¥U V
]
¥¥V W
)
¥¥W X
;
¥¥X Y
case
µµ 
QueryFunctions
µµ #
.
µµ# $
Floor
µµ$ )
:
µµ) *
return
µµ+ 1
string
µµ2 8
.
µµ8 9
Format
µµ9 ?
(
µµ? @
$str
µµ@ L
,
µµL M

parameters
µµN X
[
µµX Y
$num
µµY Z
]
µµZ [
)
µµ[ \
;
µµ\ ]
case
∂∂ 
QueryFunctions
∂∂ #
.
∂∂# $
Log
∂∂$ '
:
∂∂' (
if
∑∑ 
(
∑∑ 

parameters
∑∑ "
.
∑∑" #
Length
∑∑# )
==
∑∑* ,
$num
∑∑- .
)
∑∑. /
return
∑∑0 6
string
∑∑7 =
.
∑∑= >
Format
∑∑> D
(
∑∑D E
$str
∑∑E O
,
∑∑O P

parameters
∑∑Q [
[
∑∑[ \
$num
∑∑\ ]
]
∑∑] ^
)
∑∑^ _
;
∑∑_ `
else
∏∏ 
if
∏∏ 
(
∏∏ 

parameters
∏∏ '
.
∏∏' (
Length
∏∏( .
==
∏∏/ 1
$num
∏∏2 3
)
∏∏3 4
return
∏∏5 ;
string
∏∏< B
.
∏∏B C
Format
∏∏C I
(
∏∏I J
$str
∏∏J Y
,
∏∏Y Z

parameters
∏∏[ e
[
∏∏e f
$num
∏∏f g
]
∏∏g h
,
∏∏h i

parameters
∏∏j t
[
∏∏t u
$num
∏∏u v
]
∏∏v w
)
∏∏w x
;
∏∏x y
else
ππ 
throw
ππ 
new
ππ "!
QueryBuildException
ππ# 6
(
ππ6 7!
QueryBuildException
ππ7 J
.
ππJ K
ExceptionTypes
ππK Y
.
ππY Z#
ParameterCountIsWrong
ππZ o
)
ππo p
;
ππp q
case
∫∫ 
QueryFunctions
∫∫ #
.
∫∫# $
PI
∫∫$ &
:
∫∫& '
return
∫∫( .
$str
∫∫/ 5
;
∫∫5 6
case
ªª 
QueryFunctions
ªª #
.
ªª# $
Power
ªª$ )
:
ªª) *
return
ªª+ 1
string
ªª2 8
.
ªª8 9
Format
ªª9 ?
(
ªª? @
$str
ªª@ Q
,
ªªQ R

parameters
ªªS ]
[
ªª] ^
$num
ªª^ _
]
ªª_ `
,
ªª` a

parameters
ªªb l
[
ªªl m
$num
ªªm n
]
ªªn o
)
ªªo p
;
ªªp q
case
ºº 
QueryFunctions
ºº #
.
ºº# $
Radians
ºº$ +
:
ºº+ ,
return
ºº- 3
string
ºº4 :
.
ºº: ;
Format
ºº; A
(
ººA B
$str
ººB P
,
ººP Q

parameters
ººR \
[
ºº\ ]
$num
ºº] ^
]
ºº^ _
)
ºº_ `
;
ºº` a
case
ΩΩ 
QueryFunctions
ΩΩ #
.
ΩΩ# $
Rand
ΩΩ$ (
:
ΩΩ( )
if
ææ 
(
ææ 

parameters
ææ "
.
ææ" #
Length
ææ# )
==
ææ* ,
$num
ææ- .
)
ææ. /
return
ææ0 6
$str
ææ7 ?
;
ææ? @
else
øø 
if
øø 
(
øø 

parameters
øø '
.
øø' (
Length
øø( .
==
øø/ 1
$num
øø2 3
)
øø3 4
return
øø5 ;
string
øø< B
.
øøB C
Format
øøC I
(
øøI J
$str
øøJ U
,
øøU V

parameters
øøW a
[
øøa b
$num
øøb c
]
øøc d
)
øød e
;
øøe f
else
¿¿ 
throw
¿¿ 
new
¿¿ "!
QueryBuildException
¿¿# 6
(
¿¿6 7!
QueryBuildException
¿¿7 J
.
¿¿J K
ExceptionTypes
¿¿K Y
.
¿¿Y Z#
ParameterCountIsWrong
¿¿Z o
)
¿¿o p
;
¿¿p q
case
¡¡ 
QueryFunctions
¡¡ #
.
¡¡# $
Round
¡¡$ )
:
¡¡) *
if
¬¬ 
(
¬¬ 

parameters
¬¬ "
.
¬¬" #
Length
¬¬# )
==
¬¬* ,
$num
¬¬- .
)
¬¬. /
return
¬¬0 6
string
¬¬7 =
.
¬¬= >
Format
¬¬> D
(
¬¬D E
$str
¬¬E V
,
¬¬V W

parameters
¬¬X b
[
¬¬b c
$num
¬¬c d
]
¬¬d e
,
¬¬e f

parameters
¬¬g q
[
¬¬q r
$num
¬¬r s
]
¬¬s t
)
¬¬t u
;
¬¬u v
else
√√ 
if
√√ 
(
√√ 

parameters
√√ '
.
√√' (
Length
√√( .
==
√√/ 1
$num
√√2 3
)
√√3 4
return
√√5 ;
string
√√< B
.
√√B C
Format
√√C I
(
√√I J
$str
√√J `
,
√√` a

parameters
√√b l
[
√√l m
$num
√√m n
]
√√n o
,
√√o p

parameters
√√q {
[
√√{ |
$num
√√| }
]
√√} ~
,
√√~ 

parameters√√Ä ä
[√√ä ã
$num√√ã å
]√√å ç
)√√ç é
;√√é è
else
ƒƒ 
if
ƒƒ 
(
ƒƒ 

parameters
ƒƒ '
.
ƒƒ' (
Length
ƒƒ( .
==
ƒƒ/ 1
$num
ƒƒ2 3
)
ƒƒ3 4
return
ƒƒ5 ;
string
ƒƒ< B
.
ƒƒB C
Format
ƒƒC I
(
ƒƒI J
$str
ƒƒJ [
,
ƒƒ[ \

parameters
ƒƒ] g
[
ƒƒg h
$num
ƒƒh i
]
ƒƒi j
,
ƒƒj k
$num
ƒƒl m
)
ƒƒm n
;
ƒƒn o
else
≈≈ 
throw
≈≈ 
new
≈≈ "!
QueryBuildException
≈≈# 6
(
≈≈6 7!
QueryBuildException
≈≈7 J
.
≈≈J K
ExceptionTypes
≈≈K Y
.
≈≈Y Z#
ParameterCountIsWrong
≈≈Z o
)
≈≈o p
;
≈≈p q
case
∆∆ 
QueryFunctions
∆∆ #
.
∆∆# $
Sign
∆∆$ (
:
∆∆( )
return
∆∆* 0
string
∆∆1 7
.
∆∆7 8
Format
∆∆8 >
(
∆∆> ?
$str
∆∆? J
,
∆∆J K

parameters
∆∆L V
[
∆∆V W
$num
∆∆W X
]
∆∆X Y
)
∆∆Y Z
;
∆∆Z [
case
«« 
QueryFunctions
«« #
.
««# $
Sin
««$ '
:
««' (
return
««) /
string
««0 6
.
««6 7
Format
««7 =
(
««= >
$str
««> H
,
««H I

parameters
««J T
[
««T U
$num
««U V
]
««V W
)
««W X
;
««X Y
case
»» 
QueryFunctions
»» #
.
»»# $
Sqrt
»»$ (
:
»»( )
return
»»* 0
string
»»1 7
.
»»7 8
Format
»»8 >
(
»»> ?
$str
»»? J
,
»»J K

parameters
»»L V
[
»»V W
$num
»»W X
]
»»X Y
)
»»Y Z
;
»»Z [
case
…… 
QueryFunctions
…… #
.
……# $
Square
……$ *
:
……* +
return
……, 2
string
……3 9
.
……9 :
Format
……: @
(
……@ A
$str
……A N
,
……N O

parameters
……P Z
[
……Z [
$num
……[ \
]
……\ ]
)
……] ^
;
……^ _
case
   
QueryFunctions
   #
.
  # $
Tan
  $ '
:
  ' (
return
  ) /
string
  0 6
.
  6 7
Format
  7 =
(
  = >
$str
  > H
,
  H I

parameters
  J T
[
  T U
$num
  U V
]
  V W
)
  W X
;
  X Y
case
ÃÃ 
QueryFunctions
ÃÃ #
.
ÃÃ# $
GetDate
ÃÃ$ +
:
ÃÃ+ ,
return
ÃÃ- 3
$str
ÃÃ4 ?
;
ÃÃ? @
case
ÕÕ 
QueryFunctions
ÕÕ #
.
ÕÕ# $
Datepart
ÕÕ$ ,
:
ÕÕ, -
return
ÕÕ. 4
string
ÕÕ5 ;
.
ÕÕ; <
Format
ÕÕ< B
(
ÕÕB C
$str
ÕÕC W
,
ÕÕW X

parameters
ÕÕY c
[
ÕÕc d
$num
ÕÕd e
]
ÕÕe f
.
ÕÕf g
ToString
ÕÕg o
(
ÕÕo p
)
ÕÕp q
,
ÕÕq r

parameters
ÕÕs }
[
ÕÕ} ~
$num
ÕÕ~ 
]ÕÕ Ä
)ÕÕÄ Å
;ÕÕÅ Ç
case
–– 
QueryFunctions
–– #
.
––# $
Avg
––$ '
:
––' (
return
––) /
string
––0 6
.
––6 7
Format
––7 =
(
––= >
$str
––> H
,
––H I

parameters
––J T
[
––T U
$num
––U V
]
––V W
)
––W X
;
––X Y
case
—— 
QueryFunctions
—— #
.
——# $
Max
——$ '
:
——' (
return
——) /
string
——0 6
.
——6 7
Format
——7 =
(
——= >
$str
——> H
,
——H I

parameters
——J T
[
——T U
$num
——U V
]
——V W
)
——W X
;
——X Y
case
““ 
QueryFunctions
““ #
.
““# $
Min
““$ '
:
““' (
return
““) /
string
““0 6
.
““6 7
Format
““7 =
(
““= >
$str
““> H
,
““H I

parameters
““J T
[
““T U
$num
““U V
]
““V W
)
““W X
;
““X Y
case
”” 
QueryFunctions
”” #
.
””# $
Sum
””$ '
:
””' (
return
””) /
string
””0 6
.
””6 7
Format
””7 =
(
””= >
$str
””> H
,
””H I

parameters
””J T
[
””T U
$num
””U V
]
””V W
)
””W X
;
””X Y
case
‘‘ 
QueryFunctions
‘‘ #
.
‘‘# $
Stdev
‘‘$ )
:
‘‘) *
return
‘‘+ 1
string
‘‘2 8
.
‘‘8 9
Format
‘‘9 ?
(
‘‘? @
$str
‘‘@ L
,
‘‘L M

parameters
‘‘N X
[
‘‘X Y
$num
‘‘Y Z
]
‘‘Z [
)
‘‘[ \
;
‘‘\ ]
case
’’ 
QueryFunctions
’’ #
.
’’# $
Stdevp
’’$ *
:
’’* +
return
’’, 2
string
’’3 9
.
’’9 :
Format
’’: @
(
’’@ A
$str
’’A N
,
’’N O

parameters
’’P Z
[
’’Z [
$num
’’[ \
]
’’\ ]
)
’’] ^
;
’’^ _
case
÷÷ 
QueryFunctions
÷÷ #
.
÷÷# $
Var
÷÷$ '
:
÷÷' (
return
÷÷) /
string
÷÷0 6
.
÷÷6 7
Format
÷÷7 =
(
÷÷= >
$str
÷÷> H
,
÷÷H I

parameters
÷÷J T
[
÷÷T U
$num
÷÷U V
]
÷÷V W
)
÷÷W X
;
÷÷X Y
case
◊◊ 
QueryFunctions
◊◊ #
.
◊◊# $
Varp
◊◊$ (
:
◊◊( )
return
◊◊* 0
string
◊◊1 7
.
◊◊7 8
Format
◊◊8 >
(
◊◊> ?
$str
◊◊? J
,
◊◊J K

parameters
◊◊L V
[
◊◊V W
$num
◊◊W X
]
◊◊X Y
)
◊◊Y Z
;
◊◊Z [
case
ÿÿ 
QueryFunctions
ÿÿ #
.
ÿÿ# $
Count
ÿÿ$ )
:
ÿÿ) *
return
ÿÿ+ 1
string
ÿÿ2 8
.
ÿÿ8 9
Format
ÿÿ9 ?
(
ÿÿ? @
$str
ÿÿ@ L
,
ÿÿL M

parameters
ÿÿN X
[
ÿÿX Y
$num
ÿÿY Z
]
ÿÿZ [
)
ÿÿ[ \
;
ÿÿ\ ]
case
ŸŸ 
QueryFunctions
ŸŸ #
.
ŸŸ# $
	Count_Big
ŸŸ$ -
:
ŸŸ- .
return
ŸŸ/ 5
string
ŸŸ6 <
.
ŸŸ< =
Format
ŸŸ= C
(
ŸŸC D
$str
ŸŸD T
,
ŸŸT U

parameters
ŸŸV `
[
ŸŸ` a
$num
ŸŸa b
]
ŸŸb c
)
ŸŸc d
;
ŸŸd e
case
⁄⁄ 
QueryFunctions
⁄⁄ #
.
⁄⁄# $
Grouping
⁄⁄$ ,
:
⁄⁄, -
return
⁄⁄. 4
string
⁄⁄5 ;
.
⁄⁄; <
Format
⁄⁄< B
(
⁄⁄B C
$str
⁄⁄C R
,
⁄⁄R S

parameters
⁄⁄T ^
[
⁄⁄^ _
$num
⁄⁄_ `
]
⁄⁄` a
)
⁄⁄a b
;
⁄⁄b c
case
€€ 
QueryFunctions
€€ #
.
€€# $
Grouping_Id
€€$ /
:
€€/ 0
return
€€1 7
string
€€8 >
.
€€> ?
Format
€€? E
(
€€E F
$str
€€F X
,
€€X Y

parameters
€€Z d
[
€€d e
$num
€€e f
]
€€f g
)
€€g h
;
€€h i
case
‹‹ 
QueryFunctions
‹‹ #
.
‹‹# $
Checksum_Agg
‹‹$ 0
:
‹‹0 1
return
‹‹2 8
string
‹‹9 ?
.
‹‹? @
Format
‹‹@ F
(
‹‹F G
$str
‹‹G Z
,
‹‹Z [

parameters
‹‹\ f
[
‹‹f g
$num
‹‹g h
]
‹‹h i
)
‹‹i j
;
‹‹j k
case
ﬁﬁ 
QueryFunctions
ﬁﬁ #
.
ﬁﬁ# $
STArea
ﬁﬁ$ *
:
ﬁﬁ* +
return
ﬁﬁ, 2
string
ﬁﬁ3 9
.
ﬁﬁ9 :
Format
ﬁﬁ: @
(
ﬁﬁ@ A
$str
ﬁﬁA O
,
ﬁﬁO P

parameters
ﬁﬁQ [
[
ﬁﬁ[ \
$num
ﬁﬁ\ ]
]
ﬁﬁ] ^
)
ﬁﬁ^ _
;
ﬁﬁ_ `
case
ﬂﬂ 
QueryFunctions
ﬂﬂ #
.
ﬂﬂ# $

STAsBinary
ﬂﬂ$ .
:
ﬂﬂ. /
return
ﬂﬂ0 6
string
ﬂﬂ7 =
.
ﬂﬂ= >
Format
ﬂﬂ> D
(
ﬂﬂD E
$str
ﬂﬂE W
,
ﬂﬂW X

parameters
ﬂﬂY c
[
ﬂﬂc d
$num
ﬂﬂd e
]
ﬂﬂe f
)
ﬂﬂf g
;
ﬂﬂg h
case
‡‡ 
QueryFunctions
‡‡ #
.
‡‡# $
STAsText
‡‡$ ,
:
‡‡, -
return
‡‡. 4
string
‡‡5 ;
.
‡‡; <
Format
‡‡< B
(
‡‡B C
$str
‡‡C S
,
‡‡S T

parameters
‡‡U _
[
‡‡_ `
$num
‡‡` a
]
‡‡a b
)
‡‡b c
;
‡‡c d
case
·· 
QueryFunctions
·· #
.
··# $

STBoundary
··$ .
:
··. /
return
··0 6
string
··7 =
.
··= >
Format
··> D
(
··D E
$str
··E W
,
··W X

parameters
··Y c
[
··c d
$num
··d e
]
··e f
)
··f g
;
··g h
case
‚‚ 
QueryFunctions
‚‚ #
.
‚‚# $
STBuffer
‚‚$ ,
:
‚‚, -
return
‚‚. 4
string
‚‚5 ;
.
‚‚; <
Format
‚‚< B
(
‚‚B C
$str
‚‚C V
,
‚‚V W

parameters
‚‚X b
[
‚‚b c
$num
‚‚c d
]
‚‚d e
,
‚‚e f

parameters
‚‚g q
[
‚‚q r
$num
‚‚r s
]
‚‚s t
)
‚‚t u
;
‚‚u v
case
„„ 
QueryFunctions
„„ #
.
„„# $

STCentroid
„„$ .
:
„„. /
return
„„0 6
string
„„7 =
.
„„= >
Format
„„> D
(
„„D E
$str
„„E W
,
„„W X

parameters
„„Y c
[
„„c d
$num
„„d e
]
„„e f
)
„„f g
;
„„g h
case
‰‰ 
QueryFunctions
‰‰ #
.
‰‰# $

STContains
‰‰$ .
:
‰‰. /
return
‰‰0 6
string
‰‰7 =
.
‰‰= >
Format
‰‰> D
(
‰‰D E
$str
‰‰E Z
,
‰‰Z [

parameters
‰‰\ f
[
‰‰f g
$num
‰‰g h
]
‰‰h i
,
‰‰i j

parameters
‰‰k u
[
‰‰u v
$num
‰‰v w
]
‰‰w x
)
‰‰x y
;
‰‰y z
case
ÂÂ 
QueryFunctions
ÂÂ #
.
ÂÂ# $
STConvexHull
ÂÂ$ 0
:
ÂÂ0 1
return
ÂÂ2 8
string
ÂÂ9 ?
.
ÂÂ? @
Format
ÂÂ@ F
(
ÂÂF G
$str
ÂÂG [
,
ÂÂ[ \

parameters
ÂÂ] g
[
ÂÂg h
$num
ÂÂh i
]
ÂÂi j
)
ÂÂj k
;
ÂÂk l
case
ÊÊ 
QueryFunctions
ÊÊ #
.
ÊÊ# $
	STCrosses
ÊÊ$ -
:
ÊÊ- .
return
ÊÊ/ 5
string
ÊÊ6 <
.
ÊÊ< =
Format
ÊÊ= C
(
ÊÊC D
$str
ÊÊD X
,
ÊÊX Y

parameters
ÊÊZ d
[
ÊÊd e
$num
ÊÊe f
]
ÊÊf g
,
ÊÊg h

parameters
ÊÊi s
[
ÊÊs t
$num
ÊÊt u
]
ÊÊu v
)
ÊÊv w
;
ÊÊw x
case
ÁÁ 
QueryFunctions
ÁÁ #
.
ÁÁ# $
STCurveN
ÁÁ$ ,
:
ÁÁ, -
return
ÁÁ. 4
string
ÁÁ5 ;
.
ÁÁ; <
Format
ÁÁ< B
(
ÁÁB C
$str
ÁÁC V
,
ÁÁV W

parameters
ÁÁX b
[
ÁÁb c
$num
ÁÁc d
]
ÁÁd e
,
ÁÁe f

parameters
ÁÁg q
[
ÁÁq r
$num
ÁÁr s
]
ÁÁs t
)
ÁÁt u
;
ÁÁu v
case
ËË 
QueryFunctions
ËË #
.
ËË# $
STCurveToLine
ËË$ 1
:
ËË1 2
return
ËË3 9
string
ËË: @
.
ËË@ A
Format
ËËA G
(
ËËG H
$str
ËËH ]
,
ËË] ^

parameters
ËË_ i
[
ËËi j
$num
ËËj k
]
ËËk l
)
ËËl m
;
ËËm n
case
ÈÈ 
QueryFunctions
ÈÈ #
.
ÈÈ# $
STDifference
ÈÈ$ 0
:
ÈÈ0 1
return
ÈÈ2 8
string
ÈÈ9 ?
.
ÈÈ? @
Format
ÈÈ@ F
(
ÈÈF G
$str
ÈÈG ^
,
ÈÈ^ _

parameters
ÈÈ` j
[
ÈÈj k
$num
ÈÈk l
]
ÈÈl m
,
ÈÈm n

parameters
ÈÈo y
[
ÈÈy z
$num
ÈÈz {
]
ÈÈ{ |
)
ÈÈ| }
;
ÈÈ} ~
case
ÍÍ 
QueryFunctions
ÍÍ #
.
ÍÍ# $
STDimension
ÍÍ$ /
:
ÍÍ/ 0
return
ÍÍ1 7
string
ÍÍ8 >
.
ÍÍ> ?
Format
ÍÍ? E
(
ÍÍE F
$str
ÍÍF Y
,
ÍÍY Z

parameters
ÍÍ[ e
[
ÍÍe f
$num
ÍÍf g
]
ÍÍg h
)
ÍÍh i
;
ÍÍi j
case
ÎÎ 
QueryFunctions
ÎÎ #
.
ÎÎ# $

STDisjoint
ÎÎ$ .
:
ÎÎ. /
return
ÎÎ0 6
string
ÎÎ7 =
.
ÎÎ= >
Format
ÎÎ> D
(
ÎÎD E
$str
ÎÎE Z
,
ÎÎZ [

parameters
ÎÎ\ f
[
ÎÎf g
$num
ÎÎg h
]
ÎÎh i
,
ÎÎi j

parameters
ÎÎk u
[
ÎÎu v
$num
ÎÎv w
]
ÎÎw x
)
ÎÎx y
;
ÎÎy z
case
ÏÏ 
QueryFunctions
ÏÏ #
.
ÏÏ# $

STDistance
ÏÏ$ .
:
ÏÏ. /
return
ÏÏ0 6
string
ÏÏ7 =
.
ÏÏ= >
Format
ÏÏ> D
(
ÏÏD E
$str
ÏÏE Z
,
ÏÏZ [

parameters
ÏÏ\ f
[
ÏÏf g
$num
ÏÏg h
]
ÏÏh i
,
ÏÏi j

parameters
ÏÏk u
[
ÏÏu v
$num
ÏÏv w
]
ÏÏw x
)
ÏÏx y
;
ÏÏy z
case
ÌÌ 
QueryFunctions
ÌÌ #
.
ÌÌ# $

STEndpoint
ÌÌ$ .
:
ÌÌ. /
return
ÌÌ0 6
string
ÌÌ7 =
.
ÌÌ= >
Format
ÌÌ> D
(
ÌÌD E
$str
ÌÌE W
,
ÌÌW X

parameters
ÌÌY c
[
ÌÌc d
$num
ÌÌd e
]
ÌÌe f
)
ÌÌf g
;
ÌÌg h
case
ÓÓ 
QueryFunctions
ÓÓ #
.
ÓÓ# $

STEnvelope
ÓÓ$ .
:
ÓÓ. /
return
ÓÓ0 6
string
ÓÓ7 =
.
ÓÓ= >
Format
ÓÓ> D
(
ÓÓD E
$str
ÓÓE W
,
ÓÓW X

parameters
ÓÓY c
[
ÓÓc d
$num
ÓÓd e
]
ÓÓe f
)
ÓÓf g
;
ÓÓg h
case
ÔÔ 
QueryFunctions
ÔÔ #
.
ÔÔ# $
STEquals
ÔÔ$ ,
:
ÔÔ, -
return
ÔÔ. 4
string
ÔÔ5 ;
.
ÔÔ; <
Format
ÔÔ< B
(
ÔÔB C
$str
ÔÔC V
,
ÔÔV W

parameters
ÔÔX b
[
ÔÔb c
$num
ÔÔc d
]
ÔÔd e
,
ÔÔe f

parameters
ÔÔg q
[
ÔÔq r
$num
ÔÔr s
]
ÔÔs t
)
ÔÔt u
;
ÔÔu v
case
 
QueryFunctions
 #
.
# $
STExteriorRing
$ 2
:
2 3
return
4 :
string
; A
.
A B
Format
B H
(
H I
$str
I _
,
_ `

parameters
a k
[
k l
$num
l m
]
m n
)
n o
;
o p
case
ÒÒ 
QueryFunctions
ÒÒ #
.
ÒÒ# $
STGeometryN
ÒÒ$ /
:
ÒÒ/ 0
return
ÒÒ1 7
string
ÒÒ8 >
.
ÒÒ> ?
Format
ÒÒ? E
(
ÒÒE F
$str
ÒÒF \
,
ÒÒ\ ]

parameters
ÒÒ^ h
[
ÒÒh i
$num
ÒÒi j
]
ÒÒj k
,
ÒÒk l

parameters
ÒÒm w
[
ÒÒw x
$num
ÒÒx y
]
ÒÒy z
)
ÒÒz {
;
ÒÒ{ |
case
ÚÚ 
QueryFunctions
ÚÚ #
.
ÚÚ# $
STGeometryType
ÚÚ$ 2
:
ÚÚ2 3
return
ÚÚ4 :
string
ÚÚ; A
.
ÚÚA B
Format
ÚÚB H
(
ÚÚH I
$str
ÚÚI _
,
ÚÚ_ `

parameters
ÚÚa k
[
ÚÚk l
$num
ÚÚl m
]
ÚÚm n
)
ÚÚn o
;
ÚÚo p
case
ÛÛ 
QueryFunctions
ÛÛ #
.
ÛÛ# $
STInteriorRingN
ÛÛ$ 3
:
ÛÛ3 4
return
ÛÛ5 ;
string
ÛÛ< B
.
ÛÛB C
Format
ÛÛC I
(
ÛÛI J
$str
ÛÛJ d
,
ÛÛd e

parameters
ÛÛf p
[
ÛÛp q
$num
ÛÛq r
]
ÛÛr s
,
ÛÛs t

parameters
ÛÛu 
[ÛÛ Ä
$numÛÛÄ Å
]ÛÛÅ Ç
)ÛÛÇ É
;ÛÛÉ Ñ
case
ÙÙ 
QueryFunctions
ÙÙ #
.
ÙÙ# $
STIntersection
ÙÙ$ 2
:
ÙÙ2 3
return
ÙÙ4 :
string
ÙÙ; A
.
ÙÙA B
Format
ÙÙB H
(
ÙÙH I
$str
ÙÙI b
,
ÙÙb c

parameters
ÙÙd n
[
ÙÙn o
$num
ÙÙo p
]
ÙÙp q
,
ÙÙq r

parameters
ÙÙs }
[
ÙÙ} ~
$num
ÙÙ~ 
]ÙÙ Ä
)ÙÙÄ Å
;ÙÙÅ Ç
case
ıı 
QueryFunctions
ıı #
.
ıı# $
STIntersects
ıı$ 0
:
ıı0 1
return
ıı2 8
string
ıı9 ?
.
ıı? @
Format
ıı@ F
(
ııF G
$str
ııG ^
,
ıı^ _

parameters
ıı` j
[
ııj k
$num
ıık l
]
ııl m
,
ıım n

parameters
ııo y
[
ııy z
$num
ıız {
]
ıı{ |
)
ıı| }
;
ıı} ~
case
ˆˆ 
QueryFunctions
ˆˆ #
.
ˆˆ# $

STIsClosed
ˆˆ$ .
:
ˆˆ. /
return
ˆˆ0 6
string
ˆˆ7 =
.
ˆˆ= >
Format
ˆˆ> D
(
ˆˆD E
$str
ˆˆE W
,
ˆˆW X

parameters
ˆˆY c
[
ˆˆc d
$num
ˆˆd e
]
ˆˆe f
)
ˆˆf g
;
ˆˆg h
case
˜˜ 
QueryFunctions
˜˜ #
.
˜˜# $
	STIsEmpty
˜˜$ -
:
˜˜- .
return
˜˜/ 5
string
˜˜6 <
.
˜˜< =
Format
˜˜= C
(
˜˜C D
$str
˜˜D U
,
˜˜U V

parameters
˜˜W a
[
˜˜a b
$num
˜˜b c
]
˜˜c d
)
˜˜d e
;
˜˜e f
case
¯¯ 
QueryFunctions
¯¯ #
.
¯¯# $
STIsRing
¯¯$ ,
:
¯¯, -
return
¯¯. 4
string
¯¯5 ;
.
¯¯; <
Format
¯¯< B
(
¯¯B C
$str
¯¯C S
,
¯¯S T

parameters
¯¯U _
[
¯¯_ `
$num
¯¯` a
]
¯¯a b
)
¯¯b c
;
¯¯c d
case
˘˘ 
QueryFunctions
˘˘ #
.
˘˘# $

STIsSimple
˘˘$ .
:
˘˘. /
return
˘˘0 6
string
˘˘7 =
.
˘˘= >
Format
˘˘> D
(
˘˘D E
$str
˘˘E W
,
˘˘W X

parameters
˘˘Y c
[
˘˘c d
$num
˘˘d e
]
˘˘e f
)
˘˘f g
;
˘˘g h
case
˙˙ 
QueryFunctions
˙˙ #
.
˙˙# $
	STIsValid
˙˙$ -
:
˙˙- .
return
˙˙/ 5
string
˙˙6 <
.
˙˙< =
Format
˙˙= C
(
˙˙C D
$str
˙˙D U
,
˙˙U V

parameters
˙˙W a
[
˙˙a b
$num
˙˙b c
]
˙˙c d
)
˙˙d e
;
˙˙e f
case
˚˚ 
QueryFunctions
˚˚ #
.
˚˚# $
STLength
˚˚$ ,
:
˚˚, -
return
˚˚. 4
string
˚˚5 ;
.
˚˚; <
Format
˚˚< B
(
˚˚B C
$str
˚˚C S
,
˚˚S T

parameters
˚˚U _
[
˚˚_ `
$num
˚˚` a
]
˚˚a b
)
˚˚b c
;
˚˚c d
case
¸¸ 
QueryFunctions
¸¸ #
.
¸¸# $
STNumCurves
¸¸$ /
:
¸¸/ 0
return
¸¸1 7
string
¸¸8 >
.
¸¸> ?
Format
¸¸? E
(
¸¸E F
$str
¸¸F Y
,
¸¸Y Z

parameters
¸¸[ e
[
¸¸e f
$num
¸¸f g
]
¸¸g h
)
¸¸h i
;
¸¸i j
case
˝˝ 
QueryFunctions
˝˝ #
.
˝˝# $
STNumGeometries
˝˝$ 3
:
˝˝3 4
return
˝˝5 ;
string
˝˝< B
.
˝˝B C
Format
˝˝C I
(
˝˝I J
$str
˝˝J a
,
˝˝a b

parameters
˝˝c m
[
˝˝m n
$num
˝˝n o
]
˝˝o p
)
˝˝p q
;
˝˝q r
case
˛˛ 
QueryFunctions
˛˛ #
.
˛˛# $
STNumInteriorRing
˛˛$ 5
:
˛˛5 6
return
˛˛7 =
string
˛˛> D
.
˛˛D E
Format
˛˛E K
(
˛˛K L
$str
˛˛L e
,
˛˛e f

parameters
˛˛g q
[
˛˛q r
$num
˛˛r s
]
˛˛s t
)
˛˛t u
;
˛˛u v
case
ˇˇ 
QueryFunctions
ˇˇ #
.
ˇˇ# $
STNumPoints
ˇˇ$ /
:
ˇˇ/ 0
return
ˇˇ1 7
string
ˇˇ8 >
.
ˇˇ> ?
Format
ˇˇ? E
(
ˇˇE F
$str
ˇˇF Y
,
ˇˇY Z

parameters
ˇˇ[ e
[
ˇˇe f
$num
ˇˇf g
]
ˇˇg h
)
ˇˇh i
;
ˇˇi j
case
ÄÄ 
QueryFunctions
ÄÄ #
.
ÄÄ# $

STOverlaps
ÄÄ$ .
:
ÄÄ. /
return
ÄÄ0 6
string
ÄÄ7 =
.
ÄÄ= >
Format
ÄÄ> D
(
ÄÄD E
$str
ÄÄE Z
,
ÄÄZ [

parameters
ÄÄ\ f
[
ÄÄf g
$num
ÄÄg h
]
ÄÄh i
,
ÄÄi j

parameters
ÄÄk u
[
ÄÄu v
$num
ÄÄv w
]
ÄÄw x
)
ÄÄx y
;
ÄÄy z
case
ÅÅ 
QueryFunctions
ÅÅ #
.
ÅÅ# $
STPointN
ÅÅ$ ,
:
ÅÅ, -
return
ÅÅ. 4
string
ÅÅ5 ;
.
ÅÅ; <
Format
ÅÅ< B
(
ÅÅB C
$str
ÅÅC V
,
ÅÅV W

parameters
ÅÅX b
[
ÅÅb c
$num
ÅÅc d
]
ÅÅd e
,
ÅÅe f

parameters
ÅÅg q
[
ÅÅq r
$num
ÅÅr s
]
ÅÅs t
)
ÅÅt u
;
ÅÅu v
case
ÇÇ 
QueryFunctions
ÇÇ #
.
ÇÇ# $
STPointOnSurface
ÇÇ$ 4
:
ÇÇ4 5
return
ÇÇ6 <
string
ÇÇ= C
.
ÇÇC D
Format
ÇÇD J
(
ÇÇJ K
$str
ÇÇK f
,
ÇÇf g

parameters
ÇÇh r
[
ÇÇr s
$num
ÇÇs t
]
ÇÇt u
,
ÇÇu v

parametersÇÇw Å
[ÇÇÅ Ç
$numÇÇÇ É
]ÇÇÉ Ñ
)ÇÇÑ Ö
;ÇÇÖ Ü
case
ÉÉ 
QueryFunctions
ÉÉ #
.
ÉÉ# $
STRelate
ÉÉ$ ,
:
ÉÉ, -
return
ÉÉ. 4
string
ÉÉ5 ;
.
ÉÉ; <
Format
ÉÉ< B
(
ÉÉB C
$str
ÉÉC [
,
ÉÉ[ \

parameters
ÉÉ] g
[
ÉÉg h
$num
ÉÉh i
]
ÉÉi j
,
ÉÉj k

parameters
ÉÉl v
[
ÉÉv w
$num
ÉÉw x
]
ÉÉx y
,
ÉÉy z

parametersÉÉ{ Ö
[ÉÉÖ Ü
$numÉÉÜ á
]ÉÉá à
)ÉÉà â
;ÉÉâ ä
case
ÑÑ 
QueryFunctions
ÑÑ #
.
ÑÑ# $
STSrid
ÑÑ$ *
:
ÑÑ* +
return
ÑÑ, 2
string
ÑÑ3 9
.
ÑÑ9 :
Format
ÑÑ: @
(
ÑÑ@ A
$str
ÑÑA M
,
ÑÑM N

parameters
ÑÑO Y
[
ÑÑY Z
$num
ÑÑZ [
]
ÑÑ[ \
)
ÑÑ\ ]
;
ÑÑ] ^
case
ÖÖ 
QueryFunctions
ÖÖ #
.
ÖÖ# $
STStartPoint
ÖÖ$ 0
:
ÖÖ0 1
return
ÖÖ2 8
string
ÖÖ9 ?
.
ÖÖ? @
Format
ÖÖ@ F
(
ÖÖF G
$str
ÖÖG [
,
ÖÖ[ \

parameters
ÖÖ] g
[
ÖÖg h
$num
ÖÖh i
]
ÖÖi j
)
ÖÖj k
;
ÖÖk l
case
ÜÜ 
QueryFunctions
ÜÜ #
.
ÜÜ# $
STSymDifference
ÜÜ$ 3
:
ÜÜ3 4
return
ÜÜ5 ;
string
ÜÜ< B
.
ÜÜB C
Format
ÜÜC I
(
ÜÜI J
$str
ÜÜJ d
,
ÜÜd e

parameters
ÜÜf p
[
ÜÜp q
$num
ÜÜq r
]
ÜÜr s
,
ÜÜs t

parameters
ÜÜu 
[ÜÜ Ä
$numÜÜÄ Å
]ÜÜÅ Ç
)ÜÜÇ É
;ÜÜÉ Ñ
case
áá 
QueryFunctions
áá #
.
áá# $
	STTouches
áá$ -
:
áá- .
return
áá/ 5
string
áá6 <
.
áá< =
Format
áá= C
(
ááC D
$str
ááD X
,
ááX Y

parameters
ááZ d
[
áád e
$num
ááe f
]
ááf g
,
áág h

parameters
áái s
[
áás t
$num
áát u
]
ááu v
)
ááv w
;
ááw x
case
àà 
QueryFunctions
àà #
.
àà# $
STUnion
àà$ +
:
àà+ ,
return
àà- 3
string
àà4 :
.
àà: ;
Format
àà; A
(
ààA B
$str
ààB T
,
ààT U

parameters
ààV `
[
àà` a
$num
ààa b
]
ààb c
,
ààc d

parameters
ààe o
[
àào p
$num
ààp q
]
ààq r
)
ààr s
;
ààs t
case
ââ 
QueryFunctions
ââ #
.
ââ# $
STWithin
ââ$ ,
:
ââ, -
return
ââ. 4
string
ââ5 ;
.
ââ; <
Format
ââ< B
(
ââB C
$str
ââC V
,
ââV W

parameters
ââX b
[
ââb c
$num
ââc d
]
ââd e
,
ââe f

parameters
ââg q
[
ââq r
$num
ââr s
]
ââs t
)
âât u
;
ââu v
case
ää 
QueryFunctions
ää #
.
ää# $
STX
ää$ '
:
ää' (
return
ää) /
string
ää0 6
.
ää6 7
Format
ää7 =
(
ää= >
$str
ää> G
,
ääG H

parameters
ääI S
[
ääS T
$num
ääT U
]
ääU V
)
ääV W
;
ääW X
case
ãã 
QueryFunctions
ãã #
.
ãã# $
STY
ãã$ '
:
ãã' (
return
ãã) /
string
ãã0 6
.
ãã6 7
Format
ãã7 =
(
ãã= >
$str
ãã> G
,
ããG H

parameters
ããI S
[
ããS T
$num
ããT U
]
ããU V
)
ããV W
;
ããW X
case
åå 
QueryFunctions
åå #
.
åå# $
STGeomFromText
åå$ 2
:
åå2 3
return
åå4 :
string
åå; A
.
ååA B
Format
ååB H
(
ååH I
$str
ååI n
,
åån o

parameters
ååp z
[
ååz {
$num
åå{ |
]
åå| }
,
åå} ~

parametersåå â
[ååâ ä
$numååä ã
]ååã å
)ååå ç
;ååç é
case
çç 
QueryFunctions
çç #
.
çç# $
STPointFromText
çç$ 3
:
çç3 4
return
çç5 ;
string
çç< B
.
ççB C
Format
ççC I
(
ççI J
$str
ççJ p
,
ççp q

parameters
ççr |
[
çç| }
$num
çç} ~
]
çç~ 
,çç Ä

parametersççÅ ã
[ççã å
$numççå ç
]ççç é
)ççé è
;ççè ê
case
éé 
QueryFunctions
éé #
.
éé# $
STLineFromText
éé$ 2
:
éé2 3
return
éé4 :
string
éé; A
.
ééA B
Format
ééB H
(
ééH I
$str
ééI n
,
één o

parameters
éép z
[
ééz {
$num
éé{ |
]
éé| }
,
éé} ~

parameterséé â
[ééâ ä
$numééä ã
]ééã å
)ééå ç
;ééç é
case
èè 
QueryFunctions
èè #
.
èè# $
STPolyFromText
èè$ 2
:
èè2 3
return
èè4 :
string
èè; A
.
èèA B
Format
èèB H
(
èèH I
$str
èèI n
,
èèn o

parameters
èèp z
[
èèz {
$num
èè{ |
]
èè| }
,
èè} ~

parametersèè â
[èèâ ä
$numèèä ã
]èèã å
)èèå ç
;èèç é
case
êê 
QueryFunctions
êê #
.
êê# $
STMPointFromText
êê$ 4
:
êê4 5
return
êê6 <
string
êê= C
.
êêC D
Format
êêD J
(
êêJ K
$str
êêK r
,
êêr s

parameters
êêt ~
[
êê~ 
$numêê Ä
]êêÄ Å
,êêÅ Ç

parametersêêÉ ç
[êêç é
$numêêé è
]êêè ê
)êêê ë
;êêë í
case
ëë 
QueryFunctions
ëë #
.
ëë# $
STMLineFromText
ëë$ 3
:
ëë3 4
return
ëë5 ;
string
ëë< B
.
ëëB C
Format
ëëC I
(
ëëI J
$str
ëëJ p
,
ëëp q

parameters
ëër |
[
ëë| }
$num
ëë} ~
]
ëë~ 
,ëë Ä

parametersëëÅ ã
[ëëã å
$numëëå ç
]ëëç é
)ëëé è
;ëëè ê
case
íí 
QueryFunctions
íí #
.
íí# $
STMPolyFromText
íí$ 3
:
íí3 4
return
íí5 ;
string
íí< B
.
ííB C
Format
ííC I
(
ííI J
$str
ííJ p
,
ííp q

parameters
íír |
[
íí| }
$num
íí} ~
]
íí~ 
,íí Ä

parametersííÅ ã
[ííã å
$numííå ç
]ííç é
)ííé è
;ííè ê
case
ìì 
QueryFunctions
ìì #
.
ìì# $ 
STGeomCollFromText
ìì$ 6
:
ìì6 7
return
ìì8 >
string
ìì? E
.
ììE F
Format
ììF L
(
ììL M
$str
ììM v
,
ììv w

parametersììx Ç
[ììÇ É
$numììÉ Ñ
]ììÑ Ö
,ììÖ Ü

parametersììá ë
[ììë í
$numììí ì
]ììì î
)ììî ï
;ììï ñ
case
îî 
QueryFunctions
îî #
.
îî# $
STGeomFromWKB
îî$ 1
:
îî1 2
return
îî3 9
string
îî: @
.
îî@ A
Format
îîA G
(
îîG H
$str
îîH l
,
îîl m

parameters
îîn x
[
îîx y
$num
îîy z
]
îîz {
,
îî{ |

parametersîî} á
[îîá à
$numîîà â
]îîâ ä
)îîä ã
;îîã å
case
ïï 
QueryFunctions
ïï #
.
ïï# $
STPointFromWKB
ïï$ 2
:
ïï2 3
return
ïï4 :
string
ïï; A
.
ïïA B
Format
ïïB H
(
ïïH I
$str
ïïI n
,
ïïn o

parameters
ïïp z
[
ïïz {
$num
ïï{ |
]
ïï| }
,
ïï} ~

parametersïï â
[ïïâ ä
$numïïä ã
]ïïã å
)ïïå ç
;ïïç é
case
ññ 
QueryFunctions
ññ #
.
ññ# $
STLineFromWKB
ññ$ 1
:
ññ1 2
return
ññ3 9
string
ññ: @
.
ññ@ A
Format
ññA G
(
ññG H
$str
ññH l
,
ññl m

parameters
ññn x
[
ññx y
$num
ññy z
]
ññz {
,
ññ{ |

parametersññ} á
[ññá à
$numññà â
]ññâ ä
)ññä ã
;ññã å
case
óó 
QueryFunctions
óó #
.
óó# $
STPolyFromWKB
óó$ 1
:
óó1 2
return
óó3 9
string
óó: @
.
óó@ A
Format
óóA G
(
óóG H
$str
óóH l
,
óól m

parameters
óón x
[
óóx y
$num
óóy z
]
óóz {
,
óó{ |

parametersóó} á
[óóá à
$numóóà â
]óóâ ä
)óóä ã
;óóã å
case
òò 
QueryFunctions
òò #
.
òò# $
STMPointFromWKB
òò$ 3
:
òò3 4
return
òò5 ;
string
òò< B
.
òòB C
Format
òòC I
(
òòI J
$str
òòJ p
,
òòp q

parameters
òòr |
[
òò| }
$num
òò} ~
]
òò~ 
,òò Ä

parametersòòÅ ã
[òòã å
$numòòå ç
]òòç é
)òòé è
;òòè ê
case
ôô 
QueryFunctions
ôô #
.
ôô# $
STMLineFromWKB
ôô$ 2
:
ôô2 3
return
ôô4 :
string
ôô; A
.
ôôA B
Format
ôôB H
(
ôôH I
$str
ôôI n
,
ôôn o

parameters
ôôp z
[
ôôz {
$num
ôô{ |
]
ôô| }
,
ôô} ~

parametersôô â
[ôôâ ä
$numôôä ã
]ôôã å
)ôôå ç
;ôôç é
case
öö 
QueryFunctions
öö #
.
öö# $
STMPolyFromWKB
öö$ 2
:
öö2 3
return
öö4 :
string
öö; A
.
ööA B
Format
ööB H
(
ööH I
$str
ööI n
,
öön o

parameters
ööp z
[
ööz {
$num
öö{ |
]
öö| }
,
öö} ~

parametersöö â
[ööâ ä
$numööä ã
]ööã å
)ööå ç
;ööç é
case
õõ 
QueryFunctions
õõ #
.
õõ# $
STGeomCollFromWKB
õõ$ 5
:
õõ5 6
return
õõ7 =
string
õõ> D
.
õõD E
Format
õõE K
(
õõK L
$str
õõL t
,
õõt u

parametersõõv Ä
[õõÄ Å
$numõõÅ Ç
]õõÇ É
,õõÉ Ñ

parametersõõÖ è
[õõè ê
$numõõê ë
]õõë í
)õõí ì
;õõì î
case
úú 
QueryFunctions
úú #
.
úú# $
GeomFromGML
úú$ /
:
úú/ 0
return
úú1 7
string
úú8 >
.
úú> ?
Format
úú? E
(
úúE F
$str
úúF h
,
úúh i

parameters
úúj t
[
úút u
$num
úúu v
]
úúv w
,
úúw x

parametersúúy É
[úúÉ Ñ
$numúúÑ Ö
]úúÖ Ü
)úúÜ á
;úúá à
case
ùù 
QueryFunctions
ùù #
.
ùù# $

AsBinaryZM
ùù$ .
:
ùù. /
return
ùù0 6
string
ùù7 =
.
ùù= >
Format
ùù> D
(
ùùD E
$str
ùùE W
,
ùùW X

parameters
ùùY c
[
ùùc d
$num
ùùd e
]
ùùe f
)
ùùf g
;
ùùg h
case
ûû 
QueryFunctions
ûû #
.
ûû# $
AsGml
ûû$ )
:
ûû) *
return
ûû+ 1
string
ûû2 8
.
ûû8 9
Format
ûû9 ?
(
ûû? @
$str
ûû@ M
,
ûûM N

parameters
ûûO Y
[
ûûY Z
$num
ûûZ [
]
ûû[ \
)
ûû\ ]
;
ûû] ^
case
üü 
QueryFunctions
üü #
.
üü# $
AsTextZM
üü$ ,
:
üü, -
return
üü. 4
string
üü5 ;
.
üü; <
Format
üü< B
(
üüB C
$str
üüC S
,
üüS T

parameters
üüU _
[
üü_ `
$num
üü` a
]
üüa b
)
üüb c
;
üüc d
case
†† 
QueryFunctions
†† #
.
††# $
BufferWithCurves
††$ 4
:
††4 5
return
††6 <
string
††= C
.
††C D
Format
††D J
(
††J K
$str
††K f
,
††f g

parameters
††h r
[
††r s
$num
††s t
]
††t u
,
††u v

parameters††w Å
[††Å Ç
$num††Ç É
]††É Ñ
)††Ñ Ö
;††Ö Ü
case
°° 
QueryFunctions
°° #
.
°°# $!
BufferWithTolerance
°°$ 7
:
°°7 8
return
°°9 ?
string
°°@ F
.
°°F G
Format
°°G M
(
°°M N
$str
°°N v
,
°°v w

parameters°°x Ç
[°°Ç É
$num°°É Ñ
]°°Ñ Ö
,°°Ö Ü

parameters°°á ë
[°°ë í
$num°°í ì
]°°ì î
,°°î ï

parameters°°ñ †
[°°† °
$num°°° ¢
]°°¢ £
,°°£ §

parameters°°• Ø
[°°Ø ∞
$num°°∞ ±
]°°± ≤
)°°≤ ≥
;°°≥ ¥
case
¢¢ 
QueryFunctions
¢¢ #
.
¢¢# $&
CurveToLineWithTolerance
¢¢$ <
:
¢¢< =
return
¢¢> D
string
¢¢E K
.
¢¢K L
Format
¢¢L R
(
¢¢R S
$str
¢¢S {
,
¢¢{ |

parameters¢¢} á
[¢¢á à
$num¢¢à â
]¢¢â ä
,¢¢ä ã

parameters¢¢å ñ
[¢¢ñ ó
$num¢¢ó ò
]¢¢ò ô
,¢¢ô ö

parameters¢¢õ •
[¢¢• ¶
$num¢¢¶ ß
]¢¢ß ®
)¢¢® ©
;¢¢© ™
case
££ 
QueryFunctions
££ #
.
££# $

InstanceOf
££$ .
:
££. /
return
££0 6
string
££7 =
.
££= >
Format
££> D
(
££D E
$str
££E Z
,
££Z [

parameters
££\ f
[
££f g
$num
££g h
]
££h i
,
££i j

parameters
££k u
[
££u v
$num
££v w
]
££w x
)
££x y
;
££y z
case
§§ 
QueryFunctions
§§ #
.
§§# $
Filter
§§$ *
:
§§* +
return
§§, 2
string
§§3 9
.
§§9 :
Format
§§: @
(
§§@ A
$str
§§A R
,
§§R S

parameters
§§T ^
[
§§^ _
$num
§§_ `
]
§§` a
,
§§a b

parameters
§§c m
[
§§m n
$num
§§n o
]
§§o p
)
§§p q
;
§§q r
case
•• 
QueryFunctions
•• #
.
••# $
HasM
••$ (
:
••( )
return
••* 0
string
••1 7
.
••7 8
Format
••8 >
(
••> ?
$str
••? K
,
••K L

parameters
••M W
[
••W X
$num
••X Y
]
••Y Z
)
••Z [
;
••[ \
case
¶¶ 
QueryFunctions
¶¶ #
.
¶¶# $
HasZ
¶¶$ (
:
¶¶( )
return
¶¶* 0
string
¶¶1 7
.
¶¶7 8
Format
¶¶8 >
(
¶¶> ?
$str
¶¶? K
,
¶¶K L

parameters
¶¶M W
[
¶¶W X
$num
¶¶X Y
]
¶¶Y Z
)
¶¶Z [
;
¶¶[ \
case
ßß 
QueryFunctions
ßß #
.
ßß# $
IsNull
ßß$ *
:
ßß* +
return
ßß, 2
string
ßß3 9
.
ßß9 :
Format
ßß: @
(
ßß@ A
$str
ßßA O
,
ßßO P

parameters
ßßQ [
[
ßß[ \
$num
ßß\ ]
]
ßß] ^
)
ßß^ _
;
ßß_ `
case
®® 
QueryFunctions
®® #
.
®®# $
IsValidDetailed
®®$ 3
:
®®3 4
return
®®5 ;
string
®®< B
.
®®B C
Format
®®C I
(
®®I J
$str
®®J a
,
®®a b

parameters
®®c m
[
®®m n
$num
®®n o
]
®®o p
)
®®p q
;
®®q r
case
©© 
QueryFunctions
©© #
.
©©# $
M
©©$ %
:
©©% &
return
©©' -
string
©©. 4
.
©©4 5
Format
©©5 ;
(
©©; <
$str
©©< C
,
©©C D

parameters
©©E O
[
©©O P
$num
©©P Q
]
©©Q R
)
©©R S
;
©©S T
case
™™ 
QueryFunctions
™™ #
.
™™# $
	MakeValid
™™$ -
:
™™- .
return
™™/ 5
string
™™6 <
.
™™< =
Format
™™= C
(
™™C D
$str
™™D U
,
™™U V

parameters
™™W a
[
™™a b
$num
™™b c
]
™™c d
)
™™d e
;
™™e f
case
´´ 
QueryFunctions
´´ #
.
´´# $%
MinDbCompatibilityLevel
´´$ ;
:
´´; <
return
´´= C
string
´´D J
.
´´J K
Format
´´K Q
(
´´Q R
$str
´´R q
,
´´q r

parameters
´´s }
[
´´} ~
$num
´´~ 
]´´ Ä
)´´Ä Å
;´´Å Ç
case
¨¨ 
QueryFunctions
¨¨ #
.
¨¨# $
Reduce
¨¨$ *
:
¨¨* +
return
¨¨, 2
string
¨¨3 9
.
¨¨9 :
Format
¨¨: @
(
¨¨@ A
$str
¨¨A R
,
¨¨R S

parameters
¨¨T ^
[
¨¨^ _
$num
¨¨_ `
]
¨¨` a
,
¨¨a b

parameters
¨¨c m
[
¨¨m n
$num
¨¨n o
]
¨¨o p
)
¨¨p q
;
¨¨q r
case
≠≠ 
QueryFunctions
≠≠ #
.
≠≠# $
ShortestLineTo
≠≠$ 2
:
≠≠2 3
return
≠≠4 :
string
≠≠; A
.
≠≠A B
Format
≠≠B H
(
≠≠H I
$str
≠≠I b
,
≠≠b c

parameters
≠≠d n
[
≠≠n o
$num
≠≠o p
]
≠≠p q
,
≠≠q r

parameters
≠≠s }
[
≠≠} ~
$num
≠≠~ 
]≠≠ Ä
)≠≠Ä Å
;≠≠Å Ç
case
ÆÆ 
QueryFunctions
ÆÆ #
.
ÆÆ# $
ToString
ÆÆ$ ,
:
ÆÆ, -
return
ÆÆ. 4
string
ÆÆ5 ;
.
ÆÆ; <
Format
ÆÆ< B
(
ÆÆB C
$str
ÆÆC S
,
ÆÆS T

parameters
ÆÆU _
[
ÆÆ_ `
$num
ÆÆ` a
]
ÆÆa b
)
ÆÆb c
;
ÆÆc d
case
ØØ 
QueryFunctions
ØØ #
.
ØØ# $
Z
ØØ$ %
:
ØØ% &
return
ØØ' -
string
ØØ. 4
.
ØØ4 5
Format
ØØ5 ;
(
ØØ; <
$str
ØØ< C
,
ØØC D

parameters
ØØE O
[
ØØO P
$num
ØØP Q
]
ØØQ R
)
ØØR S
;
ØØS T
case
∞∞ 
QueryFunctions
∞∞ #
.
∞∞# $
EnvelopeAngle
∞∞$ 1
:
∞∞1 2
return
∞∞3 9
string
∞∞: @
.
∞∞@ A
Format
∞∞A G
(
∞∞G H
$str
∞∞H ]
,
∞∞] ^

parameters
∞∞_ i
[
∞∞i j
$num
∞∞j k
]
∞∞k l
)
∞∞l m
;
∞∞m n
case
±± 
QueryFunctions
±± #
.
±±# $
EnvelopeCenter
±±$ 2
:
±±2 3
return
±±4 :
string
±±; A
.
±±A B
Format
±±B H
(
±±H I
$str
±±I _
,
±±_ `

parameters
±±a k
[
±±k l
$num
±±l m
]
±±m n
)
±±n o
;
±±o p
case
≤≤ 
QueryFunctions
≤≤ #
.
≤≤# $
Lat
≤≤$ '
:
≤≤' (
return
≤≤) /
string
≤≤0 6
.
≤≤6 7
Format
≤≤7 =
(
≤≤= >
$str
≤≤> G
,
≤≤G H

parameters
≤≤I S
[
≤≤S T
$num
≤≤T U
]
≤≤U V
)
≤≤V W
;
≤≤W X
case
≥≥ 
QueryFunctions
≥≥ #
.
≥≥# $
Long
≥≥$ (
:
≥≥( )
return
≥≥* 0
string
≥≥1 7
.
≥≥7 8
Format
≥≥8 >
(
≥≥> ?
$str
≥≥? I
,
≥≥I J

parameters
≥≥K U
[
≥≥U V
$num
≥≥V W
]
≥≥W X
)
≥≥X Y
;
≥≥Y Z
case
¥¥ 
QueryFunctions
¥¥ #
.
¥¥# $
NumRing
¥¥$ +
:
¥¥+ ,
return
¥¥- 3
string
¥¥4 :
.
¥¥: ;
Format
¥¥; A
(
¥¥A B
$str
¥¥B Q
,
¥¥Q R

parameters
¥¥S ]
[
¥¥] ^
$num
¥¥^ _
]
¥¥_ `
)
¥¥` a
;
¥¥a b
case
µµ 
QueryFunctions
µµ #
.
µµ# $
ReorientObject
µµ$ 2
:
µµ2 3
return
µµ4 :
string
µµ; A
.
µµA B
Format
µµB H
(
µµH I
$str
µµI b
,
µµb c

parameters
µµd n
[
µµn o
$num
µµo p
]
µµp q
,
µµq r

parameters
µµs }
[
µµ} ~
$num
µµ~ 
]µµ Ä
)µµÄ Å
;µµÅ Ç
case
∂∂ 
QueryFunctions
∂∂ #
.
∂∂# $
RingN
∂∂$ )
:
∂∂) *
return
∂∂+ 1
string
∂∂2 8
.
∂∂8 9
Format
∂∂9 ?
(
∂∂? @
$str
∂∂@ P
,
∂∂P Q

parameters
∂∂R \
[
∂∂\ ]
$num
∂∂] ^
]
∂∂^ _
,
∂∂_ `

parameters
∂∂a k
[
∂∂k l
$num
∂∂l m
]
∂∂m n
)
∂∂n o
;
∂∂o p
case
∑∑ 
QueryFunctions
∑∑ #
.
∑∑# $!
CollectionAggregate
∑∑$ 7
:
∑∑7 8
return
∑∑9 ?
string
∑∑@ F
.
∑∑F G
Format
∑∑G M
(
∑∑M N
$str
∑∑N s
,
∑∑s t

parameters
∑∑u 
[∑∑ Ä
$num∑∑Ä Å
]∑∑Å Ç
)∑∑Ç É
;∑∑É Ñ
case
∏∏ 
QueryFunctions
∏∏ #
.
∏∏# $!
ConvexHullAggregate
∏∏$ 7
:
∏∏7 8
return
∏∏9 ?
string
∏∏@ F
.
∏∏F G
Format
∏∏G M
(
∏∏M N
$str
∏∏N s
,
∏∏s t

parameters
∏∏u 
[∏∏ Ä
$num∏∏Ä Å
]∏∏Å Ç
)∏∏Ç É
;∏∏É Ñ
case
ππ 
QueryFunctions
ππ #
.
ππ# $
EnvelopeAggregate
ππ$ 5
:
ππ5 6
return
ππ7 =
string
ππ> D
.
ππD E
Format
ππE K
(
ππK L
$str
ππL o
,
ππo p

parameters
ππq {
[
ππ{ |
$num
ππ| }
]
ππ} ~
)
ππ~ 
;ππ Ä
case
∫∫ 
QueryFunctions
∫∫ #
.
∫∫# $
UnionAggregate
∫∫$ 2
:
∫∫2 3
return
∫∫4 :
string
∫∫; A
.
∫∫A B
Format
∫∫B H
(
∫∫H I
$str
∫∫I i
,
∫∫i j

parameters
∫∫k u
[
∫∫u v
$num
∫∫v w
]
∫∫w x
)
∫∫x y
;
∫∫y z
default
ºº 
:
ºº 
throw
ºº 
new
ºº "!
QueryBuildException
ºº# 6
(
ºº6 7!
QueryBuildException
ºº7 J
.
ººJ K
ExceptionTypes
ººK Y
.
ººY Z
OperatorNotFound
ººZ j
)
ººj k
;
ººk l
}
ΩΩ 
throw
ææ 
new
ææ !
QueryBuildException
ææ )
(
ææ) *!
QueryBuildException
ææ* =
.
ææ= >
ExceptionTypes
ææ> L
.
ææL M 
OperatorUnsuported
ææM _
)
ææ_ `
;
ææ` a
}
øø 	
private
¿¿ 
string
¿¿ 
ProcessNEXP
¿¿ "
(
¿¿" #
NEXP
¿¿# '
exp
¿¿( +
)
¿¿+ ,
{
¡¡ 	
var
¬¬ 
name
¬¬ 
=
¬¬ 
exp
¬¬ 
.
¬¬ 
Name
¬¬ 
;
¬¬  
var
√√ 

expression
√√ 
=
√√ 
ProcessQueryItem
√√ -
(
√√- .
exp
√√. 1
.
√√1 2

Expression
√√2 <
)
√√< =
;
√√= >
return
ƒƒ 
string
ƒƒ 
.
ƒƒ 
Format
ƒƒ  
(
ƒƒ  !
$str
ƒƒ! /
,
ƒƒ/ 0

expression
ƒƒ1 ;
,
ƒƒ; <
name
ƒƒ= A
)
ƒƒA B
;
ƒƒB C
}
≈≈ 	
private
∆∆ 
string
∆∆ 

ProcessCOL
∆∆ !
(
∆∆! "
COL
∆∆" %
col
∆∆& )
)
∆∆) *
{
«« 	
if
»» 
(
»» 
col
»» 
.
»» 
Name
»» 
==
»» 
$str
»» 
)
»»  
return
»»! '
col
»»( +
.
»»+ ,
Name
»», 0
;
»»0 1
if
…… 
(
…… 
col
…… 
.
…… 
Name
…… 
.
…… 
ToLower
……  
(
……  !
)
……! "
.
……" #
Contains
……# +
(
……+ ,
$str
……, 7
)
……7 8
)
……8 9
return
   
string
   
.
   
Format
   $
(
  $ %
$str
  % *
,
  * +
col
  , /
.
  / 0
Name
  0 4
)
  4 5
;
  5 6
return
ÀÀ 
string
ÀÀ 
.
ÀÀ 
Format
ÀÀ  
(
ÀÀ  !
$str
ÀÀ! (
,
ÀÀ( )
col
ÀÀ* -
.
ÀÀ- .
Name
ÀÀ. 2
)
ÀÀ2 3
;
ÀÀ3 4
}
ÃÃ 	
private
ÕÕ 
string
ÕÕ 

ProcessVAL
ÕÕ !
(
ÕÕ! "
VAL
ÕÕ" %
val
ÕÕ& )
)
ÕÕ) *
{
ŒŒ 	
var
œœ 
parameterName
œœ 
=
œœ 
string
œœ  &
.
œœ& '
Format
œœ' -
(
œœ- .
$str
œœ. 5
,
œœ5 6
_parameters
œœ7 B
.
œœB C
Count
œœC H
)
œœH I
;
œœI J
_parameters
–– 
.
–– 
Add
–– 
(
–– 
new
–– 
QueryParameter
––  .
{
––/ 0
Name
––1 5
=
––6 7
parameterName
––8 E
,
––E F
Value
––G L
=
––M N
_typeMapper
––O Z
.
––Z [
ConvertToSql
––[ g
(
––g h
val
––h k
.
––k l
Value
––l q
)
––q r
}
––s t
)
––t u
;
––u v
return
—— 
parameterName
——  
;
——  !
}
““ 	
private
”” 
string
”” 

ProcessARR
”” !
(
””! "
ARR
””" %
arr
””& )
)
””) *
{
‘‘ 	
var
ÿÿ 
values
ÿÿ 
=
ÿÿ 
arr
ÿÿ 
.
ÿÿ 
Values
ÿÿ #
.
ÿÿ# $
Select
ÿÿ$ *
(
ÿÿ* +
a
ÿÿ+ ,
=>
ÿÿ- /
$str
ÿÿ0 3
+
ÿÿ4 5
string
ÿÿ6 <
.
ÿÿ< =
Join
ÿÿ= A
(
ÿÿA B
$str
ÿÿB D
,
ÿÿD E
a
ÿÿF G
.
ÿÿG H
ToString
ÿÿH P
(
ÿÿP Q
)
ÿÿQ R
.
ÿÿR S
Split
ÿÿS X
(
ÿÿX Y
$char
ÿÿY ]
)
ÿÿ] ^
)
ÿÿ^ _
+
ÿÿ` a
$str
ÿÿb e
)
ÿÿe f
.
ÿÿf g
ToArray
ÿÿg n
(
ÿÿn o
)
ÿÿo p
;
ÿÿp q
return
ŸŸ 
string
ŸŸ 
.
ŸŸ 
Format
ŸŸ  
(
ŸŸ  !
$str
ŸŸ! (
,
ŸŸ( )
string
ŸŸ* 0
.
ŸŸ0 1
Join
ŸŸ1 5
(
ŸŸ5 6
$str
ŸŸ6 9
,
ŸŸ9 :
values
ŸŸ; A
)
ŸŸA B
)
ŸŸB C
;
ŸŸC D
}
⁄⁄ 	
private
€€ 
string
€€ 
ProcessOrderItem
€€ '
(
€€' (
IQueryOrderItem
€€( 7
item
€€8 <
)
€€< =
{
‹‹ 	
var
›› 
value
›› 
=
›› 
ProcessQueryItem
›› (
(
››( )
item
››) -
.
››- .
Value
››. 3
)
››3 4
;
››4 5
var
ﬁﬁ 
result
ﬁﬁ 
=
ﬁﬁ 
string
ﬁﬁ 
.
ﬁﬁ  
Format
ﬁﬁ  &
(
ﬁﬁ& '
$str
ﬁﬁ' 0
,
ﬁﬁ0 1
value
ﬁﬁ2 7
,
ﬁﬁ7 8
item
ﬁﬁ9 =
.
ﬁﬁ= >
Type
ﬁﬁ> B
==
ﬁﬁC E
QueryOrderType
ﬁﬁF T
.
ﬁﬁT U
ASC
ﬁﬁU X
?
ﬁﬁY Z
$str
ﬁﬁ[ `
:
ﬁﬁa b
$str
ﬁﬁc i
)
ﬁﬁi j
;
ﬁﬁj k
return
ﬂﬂ 
result
ﬂﬂ 
;
ﬂﬂ 
}
‡‡ 	
class
„„ 
SubQuery
„„ 
{
‰‰ 	
public
ÂÂ 
bool
ÂÂ 

IsFunction
ÂÂ "
{
ÂÂ# $
get
ÂÂ% (
;
ÂÂ( )
set
ÂÂ* -
;
ÂÂ- .
}
ÂÂ/ 0
public
ÊÊ 
string
ÊÊ 
	TableName
ÊÊ #
{
ÊÊ$ %
get
ÊÊ& )
;
ÊÊ) *
set
ÊÊ+ .
;
ÊÊ. /
}
ÊÊ0 1
public
ÁÁ 
string
ÁÁ 

SchemaName
ÁÁ $
{
ÁÁ% &
get
ÁÁ' *
;
ÁÁ* +
set
ÁÁ, /
;
ÁÁ/ 0
}
ÁÁ1 2
public
ËË 
object
ËË 
[
ËË 
]
ËË  
FunctionParameters
ËË .
{
ËË/ 0
get
ËË1 4
;
ËË4 5
set
ËË6 9
;
ËË9 :
}
ËË; <
public
ÈÈ 
SubQuery
ÈÈ 
PreviousQuery
ÈÈ )
{
ÈÈ* +
get
ÈÈ, /
;
ÈÈ/ 0
set
ÈÈ1 4
;
ÈÈ4 5
}
ÈÈ6 7
public
ÍÍ 
int
ÍÍ 
Level
ÍÍ 
{
ÍÍ 
get
ÍÍ "
;
ÍÍ" #
set
ÍÍ$ '
;
ÍÍ' (
}
ÍÍ) *
public
ÎÎ 
string
ÎÎ 
Where
ÎÎ 
{
ÎÎ  !
get
ÎÎ" %
;
ÎÎ% &
set
ÎÎ' *
;
ÎÎ* +
}
ÎÎ, -
public
ÏÏ 
string
ÏÏ 
GroupBy
ÏÏ !
{
ÏÏ" #
get
ÏÏ$ '
;
ÏÏ' (
set
ÏÏ) ,
;
ÏÏ, -
}
ÏÏ. /
public
ÌÌ 
string
ÌÌ 
Select
ÌÌ  
{
ÌÌ! "
get
ÌÌ# &
;
ÌÌ& '
set
ÌÌ( +
;
ÌÌ+ ,
}
ÌÌ- .
public
ÓÓ 
string
ÓÓ 
OrderBy
ÓÓ !
{
ÓÓ" #
get
ÓÓ$ '
;
ÓÓ' (
set
ÓÓ) ,
;
ÓÓ, -
}
ÓÓ. /
public
ÔÔ 
int
ÔÔ 
?
ÔÔ 
Skip
ÔÔ 
{
ÔÔ 
get
ÔÔ "
;
ÔÔ" #
set
ÔÔ$ '
;
ÔÔ' (
}
ÔÔ) *
public
 
int
 
?
 
Take
 
{
 
get
 "
;
" #
set
$ '
;
' (
}
) *
public
ÚÚ 
string
ÚÚ 

BuildQuery
ÚÚ $
(
ÚÚ$ %
)
ÚÚ% &
{
ÛÛ 
string
ÙÙ 
table
ÙÙ 
;
ÙÙ 
if
ıı 
(
ıı 
PreviousQuery
ıı !
!=
ıı" $
null
ıı% )
)
ıı) *
table
ˆˆ 
=
ˆˆ 
string
ˆˆ "
.
ˆˆ" #
Format
ˆˆ# )
(
ˆˆ) *
$str
ˆˆ* =
,
ˆˆ= >
PreviousQuery
ˆˆ? L
.
ˆˆL M

BuildQuery
ˆˆM W
(
ˆˆW X
)
ˆˆX Y
,
ˆˆY Z
Level
ˆˆ[ `
)
ˆˆ` a
;
ˆˆa b
else
˜˜ 
{
¯¯ 
if
˘˘ 
(
˘˘ 
!
˘˘ 

IsFunction
˘˘ #
)
˘˘# $
table
˙˙ 
=
˙˙ 
string
˙˙  &
.
˙˙& '
Format
˙˙' -
(
˙˙- .
$str
˙˙. E
,
˙˙E F
	TableName
˙˙G P
)
˙˙P Q
;
˙˙Q R
else
˚˚ 
{
¸¸ 
var
˝˝ 

parameters
˝˝ &
=
˝˝' (
string
˝˝) /
.
˝˝/ 0
Join
˝˝0 4
(
˝˝4 5
$str
˝˝5 8
,
˝˝8 9 
FunctionParameters
˝˝: L
.
˝˝L M
Select
˝˝M S
(
˝˝S T
(
˝˝T U
a
˝˝U V
,
˝˝V W
i
˝˝X Y
)
˝˝Y Z
=>
˝˝[ ]
string
˝˝^ d
.
˝˝d e
Format
˝˝e k
(
˝˝k l
$str
˝˝l s
,
˝˝s t
i
˝˝u v
)
˝˝v w
)
˝˝w x
)
˝˝x y
;
˝˝y z
table
˛˛ 
=
˛˛ 
string
˛˛  &
.
˛˛& '
Format
˛˛' -
(
˛˛- .
$str
˛˛. ;
,
˛˛; <
	TableName
˛˛= F
,
˛˛F G

parameters
˛˛H R
)
˛˛R S
;
˛˛S T
}
ˇˇ 
}
ÄÄ 
return
ÇÇ 
Combine
ÇÇ 
(
ÇÇ 
table
ÇÇ $
)
ÇÇ$ %
;
ÇÇ% &
}
ÉÉ 
public
ÑÑ 
string
ÑÑ !
BuildQueryWithSpace
ÑÑ -
(
ÑÑ- .
)
ÑÑ. /
{
ÖÖ 
string
ÜÜ 
table
ÜÜ 
;
ÜÜ 
if
áá 
(
áá 
PreviousQuery
áá !
!=
áá" $
null
áá% )
)
áá) *
table
àà 
=
àà 
string
àà "
.
àà" #
Format
àà# )
(
àà) *
$str
àà* Q
,
ààQ R
string
ââ 
.
ââ 
Join
ââ #
(
ââ# $
$str
ââ$ *
,
ââ* +
PreviousQuery
ââ, 9
.
ââ9 :!
BuildQueryWithSpace
ââ: M
(
ââM N
)
ââN O
.
ââO P
Split
ââP U
(
ââU V
new
ââV Y
char
ââZ ^
[
ââ^ _
]
ââ_ `
{
ââa b
$char
ââc g
,
ââg h
$char
ââi m
}
âân o
,
ââo p!
StringSplitOptionsââq É
.ââÉ Ñ"
RemoveEmptyEntriesââÑ ñ
)ââñ ó
.ââó ò
Selectââò û
(ââû ü
aââü †
=>ââ° £
$strââ§ ®
+ââ© ™
aââ´ ¨
)ââ¨ ≠
.ââ≠ Æ
ToArrayââÆ µ
(ââµ ∂
)ââ∂ ∑
)ââ∑ ∏
,ââ∏ π
Levelââ∫ ø
)ââø ¿
;ââ¿ ¡
else
ää 
table
ãã 
=
ãã 
string
ãã "
.
ãã" #
Format
ãã# )
(
ãã) *
$str
ãã* F
,
ããF G
	TableName
ããH Q
)
ããQ R
;
ããR S
return
åå 
CombineWithSpace
åå '
(
åå' (
table
åå( -
)
åå- .
;
åå. /
}
çç 
private
èè 
string
èè 
Combine
èè "
(
èè" #
string
èè# )
table
èè* /
)
èè/ 0
{
êê 
var
ëë 
topStatement
ëë  
=
ëë! "
Take
ëë# '
!=
ëë( *
null
ëë+ /
&
ëë0 1
Skip
ëë2 6
==
ëë7 9
null
ëë: >
?
ëë? @
$str
ëëA G
+
ëëH I
Take
ëëJ N
:
ëëO P
$str
ëëQ S
;
ëëS T
var
íí 
selectStatement
íí #
=
íí$ %
	GetSelect
íí& /
(
íí/ 0
)
íí0 1
;
íí1 2
var
ìì 
whereStatement
ìì "
=
ìì# $
!
ìì% &
string
ìì& ,
.
ìì, -
IsNullOrEmpty
ìì- :
(
ìì: ;
Where
ìì; @
)
ìì@ A
?
ììB C
$str
ììD L
+
ììM N
Where
ììO T
:
ììU V
$str
ììW Y
;
ììY Z
var
îî 
groupByStatement
îî $
=
îî% &
!
îî' (
string
îî( .
.
îî. /
IsNullOrEmpty
îî/ <
(
îî< =
GroupBy
îî= D
)
îîD E
?
îîF G
$str
îîH S
+
îîT U
GroupBy
îîV ]
:
îî^ _
$str
îî` b
;
îîb c
var
ïï 
orderByStatement
ïï $
=
ïï% &
!
ïï' (
string
ïï( .
.
ïï. /
IsNullOrEmpty
ïï/ <
(
ïï< =
OrderBy
ïï= D
)
ïïD E
?
ïïF G
$str
ïïH S
+
ïïT U
OrderBy
ïïV ]
:
ïï^ _
$str
ïï` b
;
ïïb c
var
ññ 
offsetStatement
ññ #
=
ññ$ %
Skip
ññ& *
!=
ññ+ -
null
ññ. 2
?
ññ3 4
string
ññ5 ;
.
ññ; <
Format
ññ< B
(
ññB C
$str
ññC U
,
ññU V
Skip
ññW [
)
ññ[ \
:
ññ] ^
$str
ññ_ a
;
ñña b
offsetStatement
óó 
+=
óó  "
Take
óó# '
!=
óó( *
null
óó+ /
&
óó0 1
Skip
óó2 6
!=
óó7 9
null
óó: >
?
óó? @
string
óóA G
.
óóG H
Format
óóH N
(
óóN O
$str
óóO i
,
óói j
Take
óók o
)
óóo p
:
óóq r
$str
óós u
;
óóu v
var
ôô 
result
ôô 
=
ôô 
string
ôô #
.
ôô# $
Format
ôô$ *
(
ôô* +
$str
ôô+ T
,
ôôT U
topStatement
öö  
,
öö  !
selectStatement
öö" 1
,
öö1 2
table
öö3 8
,
öö8 9
whereStatement
õõ "
,
õõ" #
groupByStatement
õõ$ 4
,
õõ4 5
orderByStatement
õõ6 F
,
õõF G
offsetStatement
õõH W
)
õõW X
;
õõX Y
return
úú 
result
úú 
;
úú 
}
ùù 
private
ûû 
string
ûû 
CombineWithSpace
ûû +
(
ûû+ ,
string
ûû, 2
table
ûû3 8
)
ûû8 9
{
üü 
var
†† 
topStatement
††  
=
††! "
Take
††# '
!=
††( *
null
††+ /
&
††0 1
Skip
††2 6
==
††7 9
null
††: >
?
††? @
$str
††A G
+
††H I
Take
††J N
:
††O P
$str
††Q S
;
††S T
var
°° 
selectStatement
°° #
=
°°$ %
	GetSelect
°°& /
(
°°/ 0
)
°°0 1
+
°°2 3
$str
°°4 :
;
°°: ;
var
¢¢ 
whereStatement
¢¢ "
=
¢¢# $
!
¢¢% &
string
¢¢& ,
.
¢¢, -
IsNullOrEmpty
¢¢- :
(
¢¢: ;
Where
¢¢; @
)
¢¢@ A
?
¢¢B C
$str
¢¢D L
+
¢¢M N
Where
¢¢O T
+
¢¢U V
$str
¢¢W ]
:
¢¢^ _
$str
¢¢` b
;
¢¢b c
var
££ 
groupByStatement
££ $
=
££% &
!
££' (
string
££( .
.
££. /
IsNullOrEmpty
££/ <
(
££< =
GroupBy
££= D
)
££D E
?
££F G
$str
££H S
+
££T U
GroupBy
££V ]
+
££^ _
$str
££` f
:
££g h
$str
££i k
;
££k l
var
§§ 
offsetStatement
§§ #
=
§§$ %
Skip
§§& *
!=
§§+ -
null
§§. 2
?
§§3 4
string
§§5 ;
.
§§; <
Format
§§< B
(
§§B C
$str
§§C V
,
§§V W
Skip
§§X \
)
§§\ ]
:
§§^ _
$str
§§` b
;
§§b c
offsetStatement
•• 
+=
••  "
Take
••# '
!=
••( *
null
••+ /
&
••0 1
Skip
••2 6
!=
••7 9
null
••: >
?
••? @
string
••A G
.
••G H
Format
••H N
(
••N O
$str
••O i
,
••i j
Take
••k o
)
••o p
:
••q r
$str
••s u
;
••u v
offsetStatement
¶¶ 
+=
¶¶  "
!
¶¶# $
string
¶¶$ *
.
¶¶* +
IsNullOrEmpty
¶¶+ 8
(
¶¶8 9
offsetStatement
¶¶9 H
)
¶¶H I
?
¶¶J K
$str
¶¶L R
:
¶¶S T
$str
¶¶U W
;
¶¶W X
var
ßß 
orderByStatement
ßß $
=
ßß% &
!
ßß' (
string
ßß( .
.
ßß. /
IsNullOrEmpty
ßß/ <
(
ßß< =
OrderBy
ßß= D
)
ßßD E
?
ßßF G
$str
ßßH S
+
ßßT U
OrderBy
ßßV ]
:
ßß^ _
$str
ßß` b
;
ßßb c
orderByStatement
®®  
+=
®®! #
!
®®$ %
string
®®% +
.
®®+ ,
IsNullOrEmpty
®®, 9
(
®®9 :
orderByStatement
®®: J
)
®®J K
&&
®®L N
string
®®O U
.
®®U V
IsNullOrEmpty
®®V c
(
®®c d
offsetStatement
®®d s
)
®®s t
?
®®u v
$str
®®w }
:
®®~ 
$str®®Ä Ç
;®®Ç É
var
´´ 
result
´´ 
=
´´ 
string
´´ #
.
´´# $
Format
´´$ *
(
´´* +
$str
´´+ O
,
´´O P
topStatement
¨¨  
,
¨¨  !
selectStatement
¨¨" 1
,
¨¨1 2
table
¨¨3 8
,
¨¨8 9
whereStatement
≠≠ "
,
≠≠" #
groupByStatement
≠≠$ 4
,
≠≠4 5
orderByStatement
≠≠6 F
,
≠≠F G
offsetStatement
≠≠H W
)
≠≠W X
;
≠≠X Y
return
ÆÆ 
result
ÆÆ 
;
ÆÆ 
}
ØØ 
private
∞∞ 
string
∞∞ 
	GetSelect
∞∞ $
(
∞∞$ %
)
∞∞% &
{
±± 
if
≤≤ 
(
≤≤ 
!
≤≤ 
string
≤≤ 
.
≤≤ 
IsNullOrEmpty
≤≤ )
(
≤≤) *
Select
≤≤* 0
)
≤≤0 1
)
≤≤1 2
return
≥≥ 
Select
≥≥ !
;
≥≥! "
if
µµ 
(
µµ 
GroupBy
µµ 
!=
µµ 
null
µµ #
)
µµ# $
{
∂∂ 
return
∑∑ 
GroupBy
∑∑ "
;
∑∑" #
}
∏∏ 
else
ππ 
return
∫∫ 
$str
∫∫ 
;
∫∫ 
}
ªª 
}
ºº 	
public
øø 
Query
øø 
GetInsertQuery
øø #
(
øø# $
string
øø$ *
	tableName
øø+ 4
,
øø4 5
string
øø6 <

schemaName
øø= G
,
øøG H

Dictionary
øøI S
<
øøS T
string
øøT Z
,
øøZ [
object
øø\ b
>
øøb c
	parameter
øød m
,
øøm n
string
øøo u
[
øøu v
]
øøv w

exceptColsøøx Ç
)øøÇ É
{
¿¿ 	
if
¡¡ 
(
¡¡ 

exceptCols
¡¡ 
==
¡¡ 
null
¡¡ "
)
¡¡" #

exceptCols
¬¬ 
=
¬¬ 
new
¬¬  
string
¬¬! '
[
¬¬' (
$num
¬¬( )
]
¬¬) *
;
¬¬* +
var
ƒƒ 
parameterName
ƒƒ 
=
ƒƒ 
$str
ƒƒ  "
;
ƒƒ" #
var
≈≈ 
parameterValue
≈≈ 
=
≈≈  
$str
≈≈! #
;
≈≈# $
var
∆∆ 
param
∆∆ 
=
∆∆ 
new
∆∆ 
List
∆∆  
<
∆∆  !
QueryParameter
∆∆! /
>
∆∆/ 0
(
∆∆0 1
)
∆∆1 2
;
∆∆2 3
foreach
«« 
(
«« 
KeyValuePair
«« !
<
««! "
string
««" (
,
««( )
object
««* 0
>
««0 1
p
««2 3
in
««4 6
	parameter
««7 @
)
««@ A
{
»» 
if
…… 
(
…… 

exceptCols
…… 
.
…… 
Contains
…… '
(
……' (
p
……( )
.
……) *
Key
……* -
)
……- .
)
……. /
continue
……0 8
;
……8 9
parameterName
   
+=
    
$str
  ! %
+
  & '
p
  ( )
.
  ) *
Key
  * -
+
  . /
$str
  0 3
;
  3 4
parameterValue
ÀÀ 
+=
ÀÀ !
$str
ÀÀ" &
+
ÀÀ' (
p
ÀÀ) *
.
ÀÀ* +
Key
ÀÀ+ .
;
ÀÀ. /
param
ÃÃ 
.
ÃÃ 
Add
ÃÃ 
(
ÃÃ 
new
ÃÃ 
QueryParameter
ÃÃ ,
{
ÃÃ- .
Name
ÃÃ/ 3
=
ÃÃ4 5
$str
ÃÃ6 9
+
ÃÃ: ;
p
ÃÃ< =
.
ÃÃ= >
Key
ÃÃ> A
,
ÃÃA B
Value
ÃÃC H
=
ÃÃI J
_typeMapper
ÃÃK V
.
ÃÃV W
ConvertToSql
ÃÃW c
(
ÃÃc d
p
ÃÃd e
.
ÃÃe f
Value
ÃÃf k
)
ÃÃk l
}
ÃÃm n
)
ÃÃn o
;
ÃÃo p
}
ÕÕ 
parameterName
ŒŒ 
=
ŒŒ 
parameterName
ŒŒ )
.
ŒŒ) *
	Substring
ŒŒ* 3
(
ŒŒ3 4
$num
ŒŒ4 5
)
ŒŒ5 6
;
ŒŒ6 7
parameterValue
œœ 
=
œœ 
parameterValue
œœ +
.
œœ+ ,
	Substring
œœ, 5
(
œœ5 6
$num
œœ6 7
)
œœ7 8
;
œœ8 9
string
—— 
sql
—— 
=
—— 
null
—— 
;
—— 
if
““ 
(
““ 
parameterName
““ 
.
““ 
Length
““ $
>
““% &
$num
““' (
)
““( )
sql
”” 
=
”” 
string
”” 
.
”” 
Format
”” #
(
””# $
$str
””$ J
,
””J K
	tableName
””L U
,
””U V
parameterName
””W d
,
””d e
parameterValue
””f t
)
””t u
;
””u v
return
‘‘ 
new
‘‘ 
Query
‘‘ 
{
‘‘ 
Command
‘‘ &
=
‘‘' (
sql
‘‘) ,
,
‘‘, -

Parameters
‘‘. 8
=
‘‘9 :
param
‘‘; @
.
‘‘@ A
ToArray
‘‘A H
(
‘‘H I
)
‘‘I J
}
‘‘K L
;
‘‘L M
}
’’ 	
public
÷÷ 
Query
÷÷ 
GetUpdateQuery
÷÷ #
(
÷÷# $
string
÷÷$ *
	tableName
÷÷+ 4
,
÷÷4 5
string
÷÷6 <

schemaName
÷÷= G
,
÷÷G H

Dictionary
÷÷I S
<
÷÷S T
string
÷÷T Z
,
÷÷Z [
object
÷÷\ b
>
÷÷b c
	parameter
÷÷d m
,
÷÷m n
string
÷÷o u
[
÷÷u v
]
÷÷v w
idCols
÷÷x ~
,
÷÷~ 
string÷÷Ä Ü
[÷÷Ü á
]÷÷á à

exceptCols÷÷â ì
=÷÷î ï
null÷÷ñ ö
,÷÷ö õ
bool÷÷ú †
setNull÷÷° ®
=÷÷© ™
false÷÷´ ∞
)÷÷∞ ±
{
◊◊ 	
if
ÿÿ 
(
ÿÿ 

exceptCols
ÿÿ 
==
ÿÿ 
null
ÿÿ "
)
ÿÿ" #

exceptCols
ŸŸ 
=
ŸŸ 
new
ŸŸ  
string
ŸŸ! '
[
ŸŸ' (
$num
ŸŸ( )
]
ŸŸ) *
;
ŸŸ* +
var
€€ 
parametrename
€€ 
=
€€ 
$str
€€  "
;
€€" #
var
‹‹ 
param
‹‹ 
=
‹‹ 
new
‹‹ 
List
‹‹  
<
‹‹  !
QueryParameter
‹‹! /
>
‹‹/ 0
(
‹‹0 1
)
‹‹1 2
;
‹‹2 3
foreach
›› 
(
›› 
KeyValuePair
›› !
<
››! "
string
››" (
,
››( )
object
››* 0
>
››0 1
p
››2 3
in
››4 6
	parameter
››7 @
)
››@ A
{
ﬁﬁ 
var
ﬂﬂ 
value
ﬂﬂ 
=
ﬂﬂ 
_typeMapper
ﬂﬂ '
.
ﬂﬂ' (
ConvertToSql
ﬂﬂ( 4
(
ﬂﬂ4 5
p
ﬂﬂ5 6
.
ﬂﬂ6 7
Value
ﬂﬂ7 <
)
ﬂﬂ< =
;
ﬂﬂ= >
if
‡‡ 
(
‡‡ 
!
‡‡ 
setNull
‡‡ 
&&
‡‡ 
value
‡‡  %
==
‡‡& (
null
‡‡) -
)
‡‡- .
continue
‡‡/ 7
;
‡‡7 8
if
·· 
(
·· 

exceptCols
·· 
.
·· 
Contains
·· '
(
··' (
p
··( )
.
··) *
Key
··* -
)
··- .
)
··. /
continue
··0 8
;
··8 9
parametrename
‚‚ 
+=
‚‚  
$str
‚‚! %
+
‚‚& '
p
‚‚( )
.
‚‚) *
Key
‚‚* -
+
‚‚. /
$str
‚‚0 5
+
‚‚6 7
p
‚‚8 9
.
‚‚9 :
Key
‚‚: =
;
‚‚= >
param
„„ 
.
„„ 
Add
„„ 
(
„„ 
new
„„ 
QueryParameter
„„ ,
{
„„- .
Name
„„/ 3
=
„„4 5
$str
„„6 9
+
„„: ;
p
„„< =
.
„„= >
Key
„„> A
,
„„A B
Value
„„C H
=
„„I J
value
„„K P
}
„„Q R
)
„„R S
;
„„S T
}
‰‰ 
if
ÂÂ 
(
ÂÂ 
parametrename
ÂÂ 
.
ÂÂ 
Length
ÂÂ $
>
ÂÂ% &
$num
ÂÂ' (
)
ÂÂ( )
parametrename
ÊÊ 
=
ÊÊ 
parametrename
ÊÊ  -
.
ÊÊ- .
	Substring
ÊÊ. 7
(
ÊÊ7 8
$num
ÊÊ8 9
)
ÊÊ9 :
;
ÊÊ: ;
var
ËË 
whereStatement
ËË 
=
ËË  
$str
ËË! #
;
ËË# $
for
ÈÈ 
(
ÈÈ 
var
ÈÈ 
i
ÈÈ 
=
ÈÈ 
$num
ÈÈ 
;
ÈÈ 
i
ÈÈ 
<
ÈÈ 
idCols
ÈÈ  &
.
ÈÈ& '
Length
ÈÈ' -
;
ÈÈ- .
i
ÈÈ/ 0
++
ÈÈ0 2
)
ÈÈ2 3
{
ÍÍ 
var
ÎÎ 
id
ÎÎ 
=
ÎÎ 
idCols
ÎÎ 
[
ÎÎ  
i
ÎÎ  !
]
ÎÎ! "
;
ÎÎ" #
whereStatement
ÏÏ 
+=
ÏÏ !
$str
ÏÏ" *
+
ÏÏ+ ,
id
ÏÏ- /
+
ÏÏ0 1
$str
ÏÏ2 8
+
ÏÏ9 :
i
ÏÏ; <
;
ÏÏ< =
param
ÌÌ 
.
ÌÌ 
Add
ÌÌ 
(
ÌÌ 
new
ÌÌ 
QueryParameter
ÌÌ ,
{
ÌÌ- .
Name
ÌÌ/ 3
=
ÌÌ4 5
$str
ÌÌ6 :
+
ÌÌ; <
i
ÌÌ= >
,
ÌÌ> ?
Value
ÌÌ@ E
=
ÌÌF G
_typeMapper
ÌÌH S
.
ÌÌS T
ConvertToSql
ÌÌT `
(
ÌÌ` a
	parameter
ÌÌa j
[
ÌÌj k
id
ÌÌk m
]
ÌÌm n
)
ÌÌn o
}
ÌÌp q
)
ÌÌq r
;
ÌÌr s
}
ÓÓ 
if
ÔÔ 
(
ÔÔ 
whereStatement
ÔÔ 
.
ÔÔ 
Length
ÔÔ %
>
ÔÔ& '
$num
ÔÔ( )
)
ÔÔ) *
whereStatement
 
=
  
whereStatement
! /
.
/ 0
	Substring
0 9
(
9 :
$num
: ;
)
; <
;
< =
whereStatement
ÒÒ 
=
ÒÒ 
whereStatement
ÒÒ +
.
ÒÒ+ ,
Length
ÒÒ, 2
>
ÒÒ3 4
$num
ÒÒ5 6
?
ÒÒ7 8
$str
ÒÒ9 B
+
ÒÒC D
whereStatement
ÒÒE S
:
ÒÒT U
$str
ÒÒV X
;
ÒÒX Y
string
ÛÛ 
sql
ÛÛ 
=
ÛÛ 
null
ÛÛ 
;
ÛÛ 
if
ÙÙ 
(
ÙÙ 
parametrename
ÙÙ 
.
ÙÙ 
Length
ÙÙ $
>
ÙÙ% &
$num
ÙÙ' (
)
ÙÙ( )
sql
ıı 
=
ıı 
string
ıı 
.
ıı 
Format
ıı #
(
ıı# $
$str
ıı$ >
,
ıı> ?
	tableName
ıı@ I
,
ııI J
parametrename
ııK X
,
ııX Y
whereStatement
ııZ h
)
ııh i
;
ııi j
return
ˆˆ 
new
ˆˆ 
Query
ˆˆ 
{
ˆˆ 
Command
ˆˆ &
=
ˆˆ' (
sql
ˆˆ) ,
,
ˆˆ, -

Parameters
ˆˆ. 8
=
ˆˆ9 :
param
ˆˆ; @
.
ˆˆ@ A
ToArray
ˆˆA H
(
ˆˆH I
)
ˆˆI J
}
ˆˆK L
;
ˆˆL M
}
˜˜ 	
public
¯¯ 
Query
¯¯ 
GetDeleteQuery
¯¯ #
(
¯¯# $
string
¯¯$ *
	tableName
¯¯+ 4
,
¯¯4 5
string
¯¯6 <

schemaName
¯¯= G
,
¯¯G H

Dictionary
¯¯I S
<
¯¯S T
string
¯¯T Z
,
¯¯Z [
object
¯¯\ b
>
¯¯b c
	parameter
¯¯d m
,
¯¯m n
string
¯¯o u
[
¯¯u v
]
¯¯v w
idCols
¯¯x ~
)
¯¯~ 
{
˘˘ 	
var
˙˙ 
whereStatement
˙˙ 
=
˙˙  
$str
˙˙! #
;
˙˙# $
var
˚˚ 
param
˚˚ 
=
˚˚ 
new
˚˚ 
List
˚˚  
<
˚˚  !
QueryParameter
˚˚! /
>
˚˚/ 0
(
˚˚0 1
)
˚˚1 2
;
˚˚2 3
for
¸¸ 
(
¸¸ 
var
¸¸ 
i
¸¸ 
=
¸¸ 
$num
¸¸ 
;
¸¸ 
i
¸¸ 
<
¸¸ 
idCols
¸¸  &
.
¸¸& '
Length
¸¸' -
;
¸¸- .
i
¸¸/ 0
++
¸¸0 2
)
¸¸2 3
{
˝˝ 
var
˛˛ 
id
˛˛ 
=
˛˛ 
idCols
˛˛ 
[
˛˛  
i
˛˛  !
]
˛˛! "
;
˛˛" #
whereStatement
ˇˇ 
+=
ˇˇ !
$str
ˇˇ" )
+
ˇˇ* +
id
ˇˇ, .
+
ˇˇ/ 0
$str
ˇˇ1 6
+
ˇˇ7 8
i
ˇˇ9 :
;
ˇˇ: ;
param
ÄÄ 
.
ÄÄ 
Add
ÄÄ 
(
ÄÄ 
new
ÄÄ 
QueryParameter
ÄÄ ,
{
ÄÄ- .
Name
ÄÄ/ 3
=
ÄÄ4 5
$str
ÄÄ6 :
+
ÄÄ; <
i
ÄÄ= >
,
ÄÄ> ?
Value
ÄÄ@ E
=
ÄÄF G
_typeMapper
ÄÄH S
.
ÄÄS T
ConvertToSql
ÄÄT `
(
ÄÄ` a
	parameter
ÄÄa j
[
ÄÄj k
id
ÄÄk m
]
ÄÄm n
)
ÄÄn o
}
ÄÄp q
)
ÄÄq r
;
ÄÄr s
}
ÅÅ 
whereStatement
ÇÇ 
=
ÇÇ 
whereStatement
ÇÇ +
.
ÇÇ+ ,
	Substring
ÇÇ, 5
(
ÇÇ5 6
$num
ÇÇ6 7
)
ÇÇ7 8
;
ÇÇ8 9
if
ÑÑ 
(
ÑÑ 
param
ÑÑ 
.
ÑÑ 
Count
ÑÑ 
==
ÑÑ 
$num
ÑÑ  
)
ÑÑ  !
throw
ÖÖ 
new
ÖÖ 
	Exception
ÖÖ #
(
ÖÖ# $
$str
ÖÖ$ W
)
ÖÖW X
;
ÖÖX Y
var
áá 
sql
áá 
=
áá 
string
áá 
.
áá 
Format
áá #
(
áá# $
$str
áá$ A
,
ááA B
	tableName
ááC L
,
ááL M
whereStatement
ááN \
)
áá\ ]
;
áá] ^
return
àà 
new
àà 
Query
àà 
{
àà 
Command
àà &
=
àà' (
sql
àà) ,
,
àà, -

Parameters
àà. 8
=
àà9 :
param
àà; @
.
àà@ A
ToArray
ààA H
(
ààH I
)
ààI J
}
ààK L
;
ààL M
}
ââ 	
public
ää 
Query
ää 
GetDeleteQuery
ää #
(
ää# $
string
ää$ *
	tableName
ää+ 4
,
ää4 5
string
ää6 <

schemaName
ää= G
,
ääG H
BEXP
ääI M
	condition
ääN W
)
ääW X
{
ãã 	
if
åå 
(
åå 
	condition
åå 
==
åå 
null
åå !
)
åå! "
throw
åå# (
new
åå) ,
	Exception
åå- 6
(
åå6 7
$str
åå7 a
)
ååa b
;
ååb c
_parameters
çç 
.
çç 
Clear
çç 
(
çç 
)
çç 
;
çç  
var
éé 
whereStatement
éé 
=
éé  
ProcessWhere
éé! -
(
éé- .
	condition
éé. 7
as
éé8 :
BEXP
éé; ?
)
éé? @
;
éé@ A
var
èè 
sql
èè 
=
èè 
string
èè 
.
èè 
Format
èè #
(
èè# $
$str
èè$ A
,
èèA B
	tableName
èèC L
,
èèL M
whereStatement
èèN \
)
èè\ ]
;
èè] ^
return
êê 
new
êê 
Query
êê 
{
êê 
Command
êê &
=
êê' (
sql
êê) ,
,
êê, -

Parameters
êê. 8
=
êê9 :
_parameters
êê; F
.
êêF G
ToArray
êêG N
(
êêN O
)
êêO P
}
êêQ R
;
êêR S
}
ëë 	
public
ìì 
Query
ìì 
GetInsertQuery
ìì #
<
ìì# $
T
ìì$ %
>
ìì% &
(
ìì& '
string
ìì' -
	tableName
ìì. 7
,
ìì7 8
string
ìì9 ?

schemaName
ìì@ J
,
ììJ K
T
ììL M
	parameter
ììN W
,
ììW X

Expression
ììY c
<
ììc d
Func
ììd h
<
ììh i
T
ììi j
,
ììj k
object
ììl r
>
ììr s
>
ììs t

exceptCols
ììu 
)ìì Ä
{
îî 	
IEnumerable
ïï 
<
ïï 
string
ïï 
>
ïï 
except
ïï  &
;
ïï& '
if
ññ 
(
ññ 

exceptCols
ññ 
!=
ññ 
null
ññ "
)
ññ" #
except
óó 
=
óó 
ExpressionHelper
óó )
.
óó) *
GetPropertyNames
óó* :
<
óó: ;
T
óó; <
,
óó< =
object
óó> D
>
óóD E
(
óóE F

exceptCols
óóF P
)
óóP Q
;
óóQ R
else
òò 
except
òò 
=
òò 
new
òò 
string
òò $
[
òò$ %
$num
òò% &
]
òò& '
;
òò' (
if
öö 
(
öö 
	parameter
öö 
==
öö 
null
öö !
)
öö! "
{
õõ 
return
úú 
new
úú 
Query
úú  
{
úú! "
Command
úú# *
=
úú+ ,
$str
úú- 6
}
úú7 8
;
úú8 9
}
ùù 
var
üü 
parameterName
üü 
=
üü 
$str
üü  "
;
üü" #
var
†† 
parameterValue
†† 
=
††  
$str
††! #
;
††# $
var
°° 
param
°° 
=
°° 
new
°° 
List
°°  
<
°°  !
QueryParameter
°°! /
>
°°/ 0
(
°°0 1
)
°°1 2
;
°°2 3
foreach
¢¢ 
(
¢¢ 
var
¢¢ 
p
¢¢ 
in
¢¢ 
typeof
¢¢ $
(
¢¢$ %
T
¢¢% &
)
¢¢& '
.
¢¢' (
GetProperties
¢¢( 5
(
¢¢5 6
)
¢¢6 7
.
¢¢7 8
Where
¢¢8 =
(
¢¢= >
p
¢¢> ?
=>
¢¢@ B
p
¢¢C D
.
¢¢D E
GetValue
¢¢E M
(
¢¢M N
	parameter
¢¢N W
,
¢¢W X
null
¢¢Y ]
)
¢¢] ^
!=
¢¢_ a
null
¢¢b f
)
¢¢f g
)
¢¢g h
{
££ 
if
§§ 
(
§§ 
except
§§ 
.
§§ 
Contains
§§ #
(
§§# $
p
§§$ %
.
§§% &
Name
§§& *
)
§§* +
)
§§+ ,
continue
§§- 5
;
§§5 6
parameterName
•• 
+=
••  
$str
••! %
+
••& '
p
••( )
.
••) *
Name
••* .
+
••/ 0
$str
••1 4
;
••4 5
parameterValue
¶¶ 
+=
¶¶ !
$str
¶¶" &
+
¶¶' (
p
¶¶) *
.
¶¶* +
Name
¶¶+ /
;
¶¶/ 0
param
ßß 
.
ßß 
Add
ßß 
(
ßß 
new
ßß 
QueryParameter
ßß ,
{
ßß- .
Name
ßß/ 3
=
ßß4 5
$str
ßß6 9
+
ßß: ;
p
ßß< =
.
ßß= >
Name
ßß> B
,
ßßB C
Value
ßßD I
=
ßßJ K
_typeMapper
ßßL W
.
ßßW X
ConvertToSql
ßßX d
(
ßßd e
p
ßße f
.
ßßf g
GetValue
ßßg o
(
ßßo p
	parameter
ßßp y
)
ßßy z
)
ßßz {
}
ßß| }
)
ßß} ~
;
ßß~ 
}
®® 
parameterName
©© 
=
©© 
parameterName
©© )
.
©©) *
	Substring
©©* 3
(
©©3 4
$num
©©4 5
)
©©5 6
;
©©6 7
parameterValue
™™ 
=
™™ 
parameterValue
™™ +
.
™™+ ,
	Substring
™™, 5
(
™™5 6
$num
™™6 7
)
™™7 8
;
™™8 9
string
¨¨ 
sql
¨¨ 
=
¨¨ 
null
¨¨ 
;
¨¨ 
if
≠≠ 
(
≠≠ 
parameterName
≠≠ 
.
≠≠ 
Length
≠≠ $
>
≠≠% &
$num
≠≠' (
)
≠≠( )
sql
ÆÆ 
=
ÆÆ 
string
ÆÆ 
.
ÆÆ 
Format
ÆÆ #
(
ÆÆ# $
$str
ÆÆ$ J
,
ÆÆJ K
	tableName
ÆÆL U
,
ÆÆU V
parameterName
ÆÆW d
,
ÆÆd e
parameterValue
ÆÆf t
)
ÆÆt u
;
ÆÆu v
return
ØØ 
new
ØØ 
Query
ØØ 
{
ØØ 
Command
ØØ &
=
ØØ' (
sql
ØØ) ,
,
ØØ, -

Parameters
ØØ. 8
=
ØØ9 :
param
ØØ; @
.
ØØ@ A
ToArray
ØØA H
(
ØØH I
)
ØØI J
}
ØØK L
;
ØØL M
}
∞∞ 	
public
±± 
Query
±± 
GetUpdateQuery
±± #
<
±±# $
T
±±$ %
>
±±% &
(
±±& '
string
±±' -
	tableName
±±. 7
,
±±7 8
string
±±9 ?

schemaName
±±@ J
,
±±J K
T
±±L M
	parameter
±±N W
,
±±W X

Expression
±±Y c
<
±±c d
Func
±±d h
<
±±h i
T
±±i j
,
±±j k
object
±±l r
>
±±r s
>
±±s t
idCols
±±u {
,
±±{ |

Expression±±} á
<±±á à
Func±±à å
<±±å ç
T±±ç é
,±±é è
object±±ê ñ
>±±ñ ó
>±±ó ò

exceptCols±±ô £
=±±§ •
null±±¶ ™
,±±™ ´
bool±±¨ ∞
setNull±±± ∏
=±±π ∫
false±±ª ¿
)±±¿ ¡
{
≤≤ 	
if
¥¥ 
(
¥¥ 
	parameter
¥¥ 
==
¥¥ 
null
¥¥ !
)
¥¥! "
{
µµ 
return
∂∂ 
new
∂∂ 
Query
∂∂  
{
∂∂! "
Command
∂∂# *
=
∂∂+ ,
$str
∂∂- 6
}
∂∂7 8
;
∂∂8 9
}
∑∑ 
IEnumerable
ππ 
<
ππ 
string
ππ 
>
ππ 
except
ππ  &
;
ππ& '
if
∫∫ 
(
∫∫ 

exceptCols
∫∫ 
!=
∫∫ 
null
∫∫ "
)
∫∫" #
except
ªª 
=
ªª 
ExpressionHelper
ªª )
.
ªª) *
GetPropertyNames
ªª* :
<
ªª: ;
T
ªª; <
,
ªª< =
object
ªª> D
>
ªªD E
(
ªªE F

exceptCols
ªªF P
)
ªªP Q
;
ªªQ R
else
ºº 
except
ºº 
=
ºº 
new
ºº 
string
ºº $
[
ºº$ %
$num
ºº% &
]
ºº& '
;
ºº' (
var
ææ 
parametrename
ææ 
=
ææ 
$str
ææ  "
;
ææ" #
var
øø 
param
øø 
=
øø 
new
øø 
List
øø  
<
øø  !
QueryParameter
øø! /
>
øø/ 0
(
øø0 1
)
øø1 2
;
øø2 3
foreach
¿¿ 
(
¿¿ 
var
¿¿ 
p
¿¿ 
in
¿¿ 
typeof
¿¿ $
(
¿¿$ %
T
¿¿% &
)
¿¿& '
.
¿¿' (
GetProperties
¿¿( 5
(
¿¿5 6
)
¿¿6 7
)
¿¿7 8
{
¡¡ 
if
¬¬ 
(
¬¬ 
!
¬¬ 
setNull
¬¬ 
&&
¬¬ 
(
¬¬  !
p
¬¬! "
.
¬¬" #
GetValue
¬¬# +
(
¬¬+ ,
	parameter
¬¬, 5
,
¬¬5 6
null
¬¬7 ;
)
¬¬; <
==
¬¬= ?
null
¬¬@ D
||
¬¬E G
string
¬¬H N
.
¬¬N O
IsNullOrEmpty
¬¬O \
(
¬¬\ ]
p
¬¬] ^
.
¬¬^ _
GetValue
¬¬_ g
(
¬¬g h
	parameter
¬¬h q
,
¬¬q r
null
¬¬s w
)
¬¬w x
.
¬¬x y
ToString¬¬y Å
(¬¬Å Ç
)¬¬Ç É
.¬¬É Ñ
Trim¬¬Ñ à
(¬¬à â
)¬¬â ä
)¬¬ä ã
)¬¬ã å
)¬¬å ç
continue¬¬é ñ
;¬¬ñ ó
if
√√ 
(
√√ 
except
√√ 
.
√√ 
Contains
√√ #
(
√√# $
p
√√$ %
.
√√% &
Name
√√& *
)
√√* +
)
√√+ ,
continue
√√- 5
;
√√5 6
parametrename
ƒƒ 
+=
ƒƒ  
$str
ƒƒ! %
+
ƒƒ& '
p
ƒƒ( )
.
ƒƒ) *
Name
ƒƒ* .
+
ƒƒ/ 0
$str
ƒƒ1 6
+
ƒƒ7 8
p
ƒƒ9 :
.
ƒƒ: ;
Name
ƒƒ; ?
;
ƒƒ? @
param
≈≈ 
.
≈≈ 
Add
≈≈ 
(
≈≈ 
new
≈≈ 
QueryParameter
≈≈ ,
{
≈≈- .
Name
≈≈/ 3
=
≈≈4 5
$str
≈≈6 9
+
≈≈: ;
p
≈≈< =
.
≈≈= >
Name
≈≈> B
,
≈≈B C
Value
≈≈D I
=
≈≈J K
_typeMapper
≈≈L W
.
≈≈W X
ConvertToSql
≈≈X d
(
≈≈d e
p
≈≈e f
.
≈≈f g
GetValue
≈≈g o
(
≈≈o p
	parameter
≈≈p y
)
≈≈y z
)
≈≈z {
}
≈≈| }
)
≈≈} ~
;
≈≈~ 
}
∆∆ 
if
«« 
(
«« 
parametrename
«« 
.
«« 
Length
«« $
>
««% &
$num
««' (
)
««( )
parametrename
»» 
=
»» 
parametrename
»»  -
.
»»- .
	Substring
»». 7
(
»»7 8
$num
»»8 9
)
»»9 :
;
»»: ;
IEnumerable
   
<
   
PropertyInfo
   $
>
  $ %
ids
  & )
;
  ) *
if
ÀÀ 
(
ÀÀ 

exceptCols
ÀÀ 
!=
ÀÀ 
null
ÀÀ "
)
ÀÀ" #
ids
ÃÃ 
=
ÃÃ 
ExpressionHelper
ÃÃ &
.
ÃÃ& '
GetProperties
ÃÃ' 4
<
ÃÃ4 5
T
ÃÃ5 6
,
ÃÃ6 7
object
ÃÃ8 >
>
ÃÃ> ?
(
ÃÃ? @
idCols
ÃÃ@ F
)
ÃÃF G
;
ÃÃG H
else
ÕÕ 
ids
ÕÕ 
=
ÕÕ 
new
ÕÕ 
PropertyInfo
ÕÕ '
[
ÕÕ' (
$num
ÕÕ( )
]
ÕÕ) *
;
ÕÕ* +
var
–– 
whereStatement
–– 
=
––  
$str
––! #
;
––# $
var
—— 
k
—— 
=
—— 
$num
—— 
;
—— 
foreach
““ 
(
““ 
var
““ 
id
““ 
in
““ 
ids
““ "
)
““" #
{
”” 
whereStatement
‘‘ 
+=
‘‘ !
$str
‘‘" *
+
‘‘+ ,
id
‘‘- /
.
‘‘/ 0
Name
‘‘0 4
+
‘‘5 6
$str
‘‘7 =
+
‘‘> ?
k
‘‘@ A
;
‘‘A B
param
’’ 
.
’’ 
Add
’’ 
(
’’ 
new
’’ 
QueryParameter
’’ ,
{
’’- .
Name
’’/ 3
=
’’4 5
$str
’’6 :
+
’’; <
k
’’= >
,
’’> ?
Value
’’@ E
=
’’F G
_typeMapper
’’H S
.
’’S T
ConvertToSql
’’T `
(
’’` a
id
’’a c
.
’’c d
GetValue
’’d l
(
’’l m
	parameter
’’m v
,
’’v w
null
’’x |
)
’’| }
)
’’} ~
}’’ Ä
)’’Ä Å
;’’Å Ç
k
÷÷ 
++
÷÷ 
;
÷÷ 
}
◊◊ 
if
ÿÿ 
(
ÿÿ 
whereStatement
ÿÿ 
.
ÿÿ 
Length
ÿÿ %
>
ÿÿ& '
$num
ÿÿ( )
)
ÿÿ) *
whereStatement
ŸŸ 
=
ŸŸ  
whereStatement
ŸŸ! /
.
ŸŸ/ 0
	Substring
ŸŸ0 9
(
ŸŸ9 :
$num
ŸŸ: ;
)
ŸŸ; <
;
ŸŸ< =
whereStatement
⁄⁄ 
=
⁄⁄ 
whereStatement
⁄⁄ +
.
⁄⁄+ ,
Length
⁄⁄, 2
>
⁄⁄3 4
$num
⁄⁄5 6
?
⁄⁄7 8
$str
⁄⁄9 B
+
⁄⁄C D
whereStatement
⁄⁄E S
:
⁄⁄T U
$str
⁄⁄V X
;
⁄⁄X Y
string
‹‹ 
sql
‹‹ 
=
‹‹ 
null
‹‹ 
;
‹‹ 
if
›› 
(
›› 
parametrename
›› 
.
›› 
Length
›› $
>
››% &
$num
››' (
)
››( )
sql
ﬁﬁ 
=
ﬁﬁ 
string
ﬁﬁ 
.
ﬁﬁ 
Format
ﬁﬁ #
(
ﬁﬁ# $
$str
ﬁﬁ$ >
,
ﬁﬁ> ?
	tableName
ﬁﬁ@ I
,
ﬁﬁI J
parametrename
ﬁﬁK X
,
ﬁﬁX Y
whereStatement
ﬁﬁZ h
)
ﬁﬁh i
;
ﬁﬁi j
return
ﬂﬂ 
new
ﬂﬂ 
Query
ﬂﬂ 
{
ﬂﬂ 
Command
ﬂﬂ &
=
ﬂﬂ' (
sql
ﬂﬂ) ,
,
ﬂﬂ, -

Parameters
ﬂﬂ. 8
=
ﬂﬂ9 :
param
ﬂﬂ; @
.
ﬂﬂ@ A
ToArray
ﬂﬂA H
(
ﬂﬂH I
)
ﬂﬂI J
}
ﬂﬂK L
;
ﬂﬂL M
}
‡‡ 	
public
‚‚ 
Query
‚‚ &
GetUpdateQueryBulkUpdate
‚‚ -
<
‚‚- .
T
‚‚. /
>
‚‚/ 0
(
‚‚0 1
string
‚‚1 7
	tableName
‚‚8 A
,
‚‚A B
string
‚‚C I

schemaName
‚‚J T
,
‚‚T U
List
‚‚V Z
<
‚‚Z [
T
‚‚[ \
>
‚‚\ ]
	parameter
‚‚^ g
,
‚‚g h

Expression
‚‚i s
<
‚‚s t
Func
‚‚t x
<
‚‚x y
T
‚‚y z
,
‚‚z {
object‚‚| Ç
>‚‚Ç É
>‚‚É Ñ
idCols‚‚Ö ã
,‚‚ã å

Expression‚‚ç ó
<‚‚ó ò
Func‚‚ò ú
<‚‚ú ù
T‚‚ù û
,‚‚û ü
object‚‚† ¶
>‚‚¶ ß
>‚‚ß ®

exceptCols‚‚© ≥
=‚‚¥ µ
null‚‚∂ ∫
,‚‚∫ ª
bool‚‚º ¿
setNull‚‚¡ »
=‚‚…  
false‚‚À –
)‚‚– —
{
„„ 	
IEnumerable
‰‰ 
<
‰‰ 
string
‰‰ 
>
‰‰ 
except
‰‰  &
;
‰‰& '
if
ÂÂ 
(
ÂÂ 

exceptCols
ÂÂ 
!=
ÂÂ 
null
ÂÂ "
)
ÂÂ" #
except
ÊÊ 
=
ÊÊ 
ExpressionHelper
ÊÊ )
.
ÊÊ) *
GetPropertyNames
ÊÊ* :
<
ÊÊ: ;
T
ÊÊ; <
,
ÊÊ< =
object
ÊÊ> D
>
ÊÊD E
(
ÊÊE F

exceptCols
ÊÊF P
)
ÊÊP Q
;
ÊÊQ R
else
ÁÁ 
except
ÁÁ 
=
ÁÁ 
new
ÁÁ 
string
ÁÁ $
[
ÁÁ$ %
$num
ÁÁ% &
]
ÁÁ& '
;
ÁÁ' (
string
ÈÈ 
sql
ÈÈ 
=
ÈÈ 
$str
ÈÈ 
;
ÈÈ 
foreach
ÍÍ 
(
ÍÍ 
var
ÍÍ 
parameterItem
ÍÍ &
in
ÍÍ' )
	parameter
ÍÍ* 3
)
ÍÍ3 4
{
ÎÎ 
var
ÏÏ 
parametrename
ÏÏ !
=
ÏÏ" #
$str
ÏÏ$ &
;
ÏÏ& '
var
ÌÌ 
param
ÌÌ 
=
ÌÌ 
new
ÌÌ 
List
ÌÌ  $
<
ÌÌ$ %
QueryParameter
ÌÌ% 3
>
ÌÌ3 4
(
ÌÌ4 5
)
ÌÌ5 6
;
ÌÌ6 7
foreach
ÓÓ 
(
ÓÓ 
var
ÓÓ 
p
ÓÓ 
in
ÓÓ !
typeof
ÓÓ" (
(
ÓÓ( )
T
ÓÓ) *
)
ÓÓ* +
.
ÓÓ+ ,
GetProperties
ÓÓ, 9
(
ÓÓ9 :
)
ÓÓ: ;
)
ÓÓ; <
{
ÔÔ 
if
 
(
 
!
 
setNull
  
&&
! #
(
$ %
p
% &
.
& '
GetValue
' /
(
/ 0
parameterItem
0 =
,
= >
null
? C
)
C D
==
E G
null
H L
||
M O
string
P V
.
V W
IsNullOrEmpty
W d
(
d e
p
e f
.
f g
GetValue
g o
(
o p
parameterItem
p }
,
} ~
null É
)É Ñ
.Ñ Ö
ToStringÖ ç
(ç é
)é è
.è ê
Trimê î
(î ï
)ï ñ
)ñ ó
)ó ò
)ò ô
continueö ¢
;¢ £
if
ÒÒ 
(
ÒÒ 
except
ÒÒ 
.
ÒÒ 
Contains
ÒÒ '
(
ÒÒ' (
p
ÒÒ( )
.
ÒÒ) *
Name
ÒÒ* .
)
ÒÒ. /
)
ÒÒ/ 0
continue
ÒÒ1 9
;
ÒÒ9 :
parametrename
ÛÛ !
=
ÛÛ" #<
.ConvertParameterStringValueToSqlValueForUpdate
ÛÛ$ R
(
ÛÛR S
parameterItem
ÛÛS `
,
ÛÛ` a
parametrename
ÛÛb o
,
ÛÛo p
p
ÛÛq r
)
ÛÛr s
;
ÛÛs t
}
ˆˆ 
if
˜˜ 
(
˜˜ 
parametrename
˜˜ !
.
˜˜! "
Length
˜˜" (
>
˜˜) *
$num
˜˜+ ,
)
˜˜, -
parametrename
¯¯ !
=
¯¯" #
parametrename
¯¯$ 1
.
¯¯1 2
	Substring
¯¯2 ;
(
¯¯; <
$num
¯¯< =
)
¯¯= >
;
¯¯> ?
IEnumerable
˙˙ 
<
˙˙ 
PropertyInfo
˙˙ (
>
˙˙( )
ids
˙˙* -
;
˙˙- .
if
˚˚ 
(
˚˚ 

exceptCols
˚˚ 
!=
˚˚ !
null
˚˚" &
)
˚˚& '
ids
¸¸ 
=
¸¸ 
ExpressionHelper
¸¸ *
.
¸¸* +
GetProperties
¸¸+ 8
<
¸¸8 9
T
¸¸9 :
,
¸¸: ;
object
¸¸< B
>
¸¸B C
(
¸¸C D
idCols
¸¸D J
)
¸¸J K
;
¸¸K L
else
˝˝ 
ids
˝˝ 
=
˝˝ 
new
˝˝ 
PropertyInfo
˝˝ +
[
˝˝+ ,
$num
˝˝, -
]
˝˝- .
;
˝˝. /
var
ÄÄ 
whereStatement
ÄÄ "
=
ÄÄ# $
$str
ÄÄ% '
;
ÄÄ' (
var
ÅÅ 
k
ÅÅ 
=
ÅÅ 
$num
ÅÅ 
;
ÅÅ 
foreach
ÇÇ 
(
ÇÇ 
var
ÇÇ 
id
ÇÇ 
in
ÇÇ  "
ids
ÇÇ# &
)
ÇÇ& '
{
ÉÉ 
whereStatement
ÑÑ "
+=
ÑÑ# %
$str
ÑÑ& .
+
ÑÑ/ 0
id
ÑÑ1 3
.
ÑÑ3 4
Name
ÑÑ4 8
+
ÑÑ9 :
$str
ÑÑ; @
+
ÑÑA B
_typeMapper
ÑÑC N
.
ÑÑN O
ConvertToSql
ÑÑO [
(
ÑÑ[ \
id
ÑÑ\ ^
.
ÑÑ^ _
GetValue
ÑÑ_ g
(
ÑÑg h
parameterItem
ÑÑh u
,
ÑÑu v
null
ÑÑw {
)
ÑÑ{ |
)
ÑÑ| }
+
ÑÑ~ 
$strÑÑÄ É
;ÑÑÉ Ñ
k
ÖÖ 
++
ÖÖ 
;
ÖÖ 
}
ÜÜ 
if
áá 
(
áá 
whereStatement
áá "
.
áá" #
Length
áá# )
>
áá* +
$num
áá, -
)
áá- .
whereStatement
àà "
=
àà# $
whereStatement
àà% 3
.
àà3 4
	Substring
àà4 =
(
àà= >
$num
àà> ?
)
àà? @
;
àà@ A
whereStatement
ââ 
=
ââ  
whereStatement
ââ! /
.
ââ/ 0
Length
ââ0 6
>
ââ7 8
$num
ââ9 :
?
ââ; <
$str
ââ= F
+
ââG H
whereStatement
ââI W
:
ââX Y
$str
ââZ \
;
ââ\ ]
if
åå 
(
åå 
parametrename
åå !
.
åå! "
Length
åå" (
>
åå) *
$num
åå+ ,
)
åå, -
{
çç 
sql
éé 
+=
éé 
string
éé !
.
éé! "
Format
éé" (
(
éé( )
$str
éé) H
,
ééH I
	tableName
ééJ S
,
ééS T
parametrename
ééU b
,
ééb c
whereStatement
ééd r
)
éér s
;
éés t
}
èè 
}
êê 
return
ëë 
new
ëë 
Query
ëë 
{
ëë 
Command
ëë &
=
ëë' (
sql
ëë) ,
,
ëë, -

Parameters
ëë. 8
=
ëë9 :
null
ëë; ?
}
ëë@ A
;
ëëA B
}
íí 	
public
ìì 
Query
ìì &
GetInsertQueryBulkInsert
ìì -
<
ìì- .
T
ìì. /
>
ìì/ 0
(
ìì0 1
string
ìì1 7
	tableName
ìì8 A
,
ììA B
string
ììC I

schemaName
ììJ T
,
ììT U
List
ììV Z
<
ììZ [
T
ìì[ \
>
ìì\ ]
	parameter
ìì^ g
,
ììg h
bool
ììi m
setNull
ììn u
=
ììv w
false
ììx }
)
ìì} ~
{
îî 	
string
ïï 
sql
ïï 
=
ïï 
$str
ïï '
;
ïï' (
sql
ññ 
+=
ññ 
	tableName
ññ 
;
ññ 
sql
óó 
+=
óó 
$str
óó 
;
óó 
var
òò 
prop
òò 
=
òò 
typeof
òò 
(
òò 
T
òò 
)
òò  
.
òò  !
GetProperties
òò! .
(
òò. /
)
òò/ 0
.
òò0 1
OrderBy
òò1 8
(
òò8 9
a
òò9 :
=>
òò; =
a
òò> ?
.
òò? @
Name
òò@ D
)
òòD E
;
òòE F
foreach
ôô 
(
ôô 
var
ôô 
p
ôô 
in
ôô 
prop
ôô "
)
ôô" #
{
öö 
sql
õõ 
+=
õõ 
$str
õõ 
+
õõ 
p
õõ 
.
õõ 
Name
õõ #
+
õõ$ %
$str
õõ& *
;
õõ* +
}
úú 
sql
ùù 
=
ùù 
sql
ùù 
.
ùù 
	Substring
ùù 
(
ùù  
$num
ùù  !
,
ùù! "
sql
ùù# &
.
ùù& '
Length
ùù' -
-
ùù. /
$num
ùù0 1
)
ùù1 2
;
ùù2 3
sql
ûû 
+=
ûû 
$str
ûû 
;
ûû 
foreach
†† 
(
†† 
var
†† 
parameterItem
†† &
in
††' )
	parameter
††* 3
)
††3 4
{
°° 
var
¢¢ 
parametrename
¢¢ !
=
¢¢" #
$str
¢¢$ &
;
¢¢& '
var
££ 
param
££ 
=
££ 
new
££ 
List
££  $
<
££$ %
QueryParameter
££% 3
>
££3 4
(
££4 5
)
££5 6
;
££6 7
foreach
§§ 
(
§§ 
var
§§ 
p
§§ 
in
§§ !
prop
§§" &
)
§§& '
{
•• 
parametrename
¶¶ !
+=
¶¶" $<
.ConvertParameterStringValueToSqlValueForInsert
¶¶% S
(
¶¶S T
parameterItem
¶¶T a
,
¶¶a b
p
¶¶c d
)
¶¶d e
;
¶¶e f
}
ßß 
if
®® 
(
®® 
parametrename
®® !
.
®®! "
Length
®®" (
>
®®) *
$num
®®+ ,
)
®®, -
parametrename
©© !
=
©©" #
parametrename
©©$ 1
.
©©1 2
	Substring
©©2 ;
(
©©; <
$num
©©< =
)
©©= >
;
©©> ?
if
™™ 
(
™™ 
parametrename
™™ !
.
™™! "
Length
™™" (
>
™™) *
$num
™™+ ,
)
™™, -
{
´´ 
sql
¨¨ 
+=
¨¨ 
string
¨¨ !
.
¨¨! "
Format
¨¨" (
(
¨¨( )
$str
¨¨) 3
,
¨¨3 4
parametrename
¨¨5 B
)
¨¨B C
;
¨¨C D
}
≠≠ 
}
ÆÆ 
sql
ØØ 
=
ØØ 
sql
ØØ 
.
ØØ 
	Substring
ØØ 
(
ØØ  
$num
ØØ  !
,
ØØ! "
sql
ØØ# &
.
ØØ& '
Length
ØØ' -
-
ØØ. /
$num
ØØ0 1
)
ØØ1 2
;
ØØ2 3
return
±± 
new
±± 
Query
±± 
{
±± 
Command
±± &
=
±±' (
sql
±±) ,
,
±±, -

Parameters
±±. 8
=
±±9 :
null
±±; ?
}
±±@ A
;
±±A B
}
≤≤ 	
private
¥¥ 
string
¥¥ <
.ConvertParameterStringValueToSqlValueForInsert
¥¥ E
<
¥¥E F
T
¥¥F G
>
¥¥G H
(
¥¥H I
T
¥¥I J
parameterItem
¥¥K X
,
¥¥X Y
PropertyInfo
¥¥Z f
p
¥¥g h
)
¥¥h i
{
µµ 	
var
∂∂ 
parametrename
∂∂ 
=
∂∂ 
$str
∂∂  "
;
∂∂" #
string
∑∑ 
_name
∑∑ 
=
∑∑ 
p
∑∑ 
.
∑∑ 
Name
∑∑ !
;
∑∑! "
var
ππ 
_type
ππ 
=
ππ 
p
ππ 
.
ππ 
PropertyType
ππ &
.
ππ& '"
GenericTypeArguments
ππ' ;
.
ππ; <
FirstOrDefault
ππ< J
(
ππJ K
)
ππK L
;
ππL M
if
∫∫ 
(
∫∫ 
p
∫∫ 
.
∫∫ 
GetValue
∫∫ 
(
∫∫ 
parameterItem
∫∫ (
,
∫∫( )
null
∫∫* .
)
∫∫. /
==
∫∫0 2
null
∫∫3 7
)
∫∫7 8
{
ªª 
parametrename
ºº 
=
ºº 
$str
ºº  '
;
ºº' (
}
ΩΩ 
else
øø 
if
øø 
(
øø 
_type
øø 
==
øø 
typeof
øø $
(
øø$ %
DateTime
øø% -
)
øø- .
)
øø. /
{
¿¿ 
parametrename
¡¡ 
=
¡¡ 
$str
¡¡  $
+
¡¡% &
Convert
¡¡' .
.
¡¡. /

ToDateTime
¡¡/ 9
(
¡¡9 :
_typeMapper
¡¡: E
.
¡¡E F
ConvertToSql
¡¡F R
(
¡¡R S
p
¡¡S T
.
¡¡T U
GetValue
¡¡U ]
(
¡¡] ^
parameterItem
¡¡^ k
)
¡¡k l
)
¡¡l m
)
¡¡m n
.
¡¡n o
ToString
¡¡o w
(
¡¡w x
$str¡¡x ë
)¡¡ë í
+¡¡ì î
$str¡¡ï ò
;¡¡ò ô
}
¬¬ 
else
√√ 
if
√√ 
(
√√ 
_type
√√ 
==
√√ 
typeof
√√ $
(
√√$ %
double
√√% +
)
√√+ ,
||
√√- /
_type
√√0 5
==
√√6 8
typeof
√√9 ?
(
√√? @
float
√√@ E
)
√√E F
)
√√F G
{
ƒƒ 
parametrename
≈≈ 
=
≈≈ 
$str
≈≈  #
+
≈≈$ %
Convert
≈≈& -
.
≈≈- .
ToString
≈≈. 6
(
≈≈6 7
_typeMapper
≈≈7 B
.
≈≈B C
ConvertToSql
≈≈C O
(
≈≈O P
p
≈≈P Q
.
≈≈Q R
GetValue
≈≈R Z
(
≈≈Z [
parameterItem
≈≈[ h
)
≈≈h i
)
≈≈i j
)
≈≈j k
.
≈≈k l
Replace
≈≈l s
(
≈≈s t
$str
≈≈t w
,
≈≈w x
$str
≈≈y |
)
≈≈| }
;
≈≈} ~
}
∆∆ 
else
«« 
{
»» 
parametrename
…… 
=
…… 
$str
……  $
+
……% &
_typeMapper
……' 2
.
……2 3
ConvertToSql
……3 ?
(
……? @
p
……@ A
.
……A B
GetValue
……B J
(
……J K
parameterItem
……K X
)
……X Y
)
……Y Z
+
……[ \
$str
……] `
;
……` a
}
   
return
ÃÃ 
parametrename
ÃÃ  
;
ÃÃ  !
}
ÕÕ 	
private
œœ 
string
œœ <
.ConvertParameterStringValueToSqlValueForUpdate
œœ E
<
œœE F
T
œœF G
>
œœG H
(
œœH I
T
œœI J
parameterItem
œœK X
,
œœX Y
string
œœZ `
parametrename
œœa n
,
œœn o
PropertyInfo
œœp |
p
œœ} ~
)
œœ~ 
{
–– 	
if
—— 
(
—— 
p
—— 
.
—— 
PropertyType
—— 
.
—— "
GenericTypeArguments
—— 3
.
——3 4
FirstOrDefault
——4 B
(
——B C
)
——C D
==
——E G
typeof
——H N
(
——N O
DateTime
——O W
)
——W X
)
——X Y
parametrename
““ 
+=
““  
string
““! '
.
““' (
Format
““( .
(
““. /
$str
““/ 3
+
““4 5
p
““6 7
.
““7 8
Name
““8 <
+
““= >
$str
““? H
,
““H I
Convert
““J Q
.
““Q R

ToDateTime
““R \
(
““\ ]
_typeMapper
““] h
.
““h i
ConvertToSql
““i u
(
““u v
p
““v w
.
““w x
GetValue““x Ä
(““Ä Å
parameterItem““Å é
)““é è
)““è ê
)““ê ë
.““ë í
ToString““í ö
(““ö õ
$str““õ ¥
)““¥ µ
)““µ ∂
;““∂ ∑
else
”” 
if
”” 
(
”” 
p
”” 
.
”” 
PropertyType
”” #
.
””# $"
GenericTypeArguments
””$ 8
.
””8 9
FirstOrDefault
””9 G
(
””G H
)
””H I
==
””J L
typeof
””M S
(
””S T
double
””T Z
)
””Z [
||
””\ ^
p
””_ `
.
””` a
PropertyType
””a m
.
””m n#
GenericTypeArguments””n Ç
.””Ç É
FirstOrDefault””É ë
(””ë í
)””í ì
==””î ñ
typeof””ó ù
(””ù û
float””û £
)””£ §
)””§ •
parametrename
‘‘ 
+=
‘‘  
$str
‘‘! %
+
‘‘& '
p
‘‘( )
.
‘‘) *
Name
‘‘* .
+
‘‘/ 0
$str
‘‘1 5
+
‘‘6 7
Convert
‘‘8 ?
.
‘‘? @
ToString
‘‘@ H
(
‘‘H I
_typeMapper
‘‘I T
.
‘‘T U
ConvertToSql
‘‘U a
(
‘‘a b
p
‘‘b c
.
‘‘c d
GetValue
‘‘d l
(
‘‘l m
parameterItem
‘‘m z
)
‘‘z {
)
‘‘{ |
)
‘‘| }
.
‘‘} ~
Replace‘‘~ Ö
(‘‘Ö Ü
$str‘‘Ü â
,‘‘â ä
$str‘‘ã é
)‘‘é è
;‘‘è ê
else
’’ 
parametrename
÷÷ 
+=
÷÷  
$str
÷÷! %
+
÷÷& '
p
÷÷( )
.
÷÷) *
Name
÷÷* .
+
÷÷/ 0
$str
÷÷1 6
+
÷÷7 8
_typeMapper
÷÷9 D
.
÷÷D E
ConvertToSql
÷÷E Q
(
÷÷Q R
p
÷÷R S
.
÷÷S T
GetValue
÷÷T \
(
÷÷\ ]
parameterItem
÷÷] j
)
÷÷j k
)
÷÷k l
+
÷÷m n
$str
÷÷o r
;
÷÷r s
return
◊◊ 
parametrename
◊◊  
;
◊◊  !
}
ÿÿ 	
public
⁄⁄ 
Query
⁄⁄ 
GetDeleteQuery
⁄⁄ #
<
⁄⁄# $
T
⁄⁄$ %
>
⁄⁄% &
(
⁄⁄& '
string
⁄⁄' -
	tableName
⁄⁄. 7
,
⁄⁄7 8
string
⁄⁄9 ?

schemaName
⁄⁄@ J
,
⁄⁄J K
T
⁄⁄L M
	parameter
⁄⁄N W
,
⁄⁄W X

Expression
⁄⁄Y c
<
⁄⁄c d
Func
⁄⁄d h
<
⁄⁄h i
T
⁄⁄i j
,
⁄⁄j k
object
⁄⁄l r
>
⁄⁄r s
>
⁄⁄s t
idCols
⁄⁄u {
)
⁄⁄{ |
{
€€ 	
var
‹‹ 
idProperties
‹‹ 
=
‹‹ 
ExpressionHelper
‹‹ /
.
‹‹/ 0
GetProperties
‹‹0 =
<
‹‹= >
T
‹‹> ?
,
‹‹? @
object
‹‹A G
>
‹‹G H
(
‹‹H I
idCols
‹‹I O
)
‹‹O P
;
‹‹P Q
var
ﬁﬁ 
whereStatement
ﬁﬁ 
=
ﬁﬁ  
$str
ﬁﬁ! #
;
ﬁﬁ# $
var
ﬂﬂ 
param
ﬂﬂ 
=
ﬂﬂ 
new
ﬂﬂ 
List
ﬂﬂ  
<
ﬂﬂ  !
QueryParameter
ﬂﬂ! /
>
ﬂﬂ/ 0
(
ﬂﬂ0 1
)
ﬂﬂ1 2
;
ﬂﬂ2 3
var
‡‡ 
k
‡‡ 
=
‡‡ 
$num
‡‡ 
;
‡‡ 
foreach
·· 
(
·· 
var
·· 
id
·· 
in
·· 
idProperties
·· +
)
··+ ,
{
‚‚ 
whereStatement
„„ 
+=
„„ !
$str
„„" )
+
„„* +
id
„„, .
.
„„. /
Name
„„/ 3
+
„„4 5
$str
„„6 ;
+
„„< =
k
„„> ?
;
„„? @
param
‰‰ 
.
‰‰ 
Add
‰‰ 
(
‰‰ 
new
‰‰ 
QueryParameter
‰‰ ,
{
‰‰- .
Name
‰‰/ 3
=
‰‰4 5
$str
‰‰6 :
+
‰‰; <
k
‰‰= >
,
‰‰> ?
Value
‰‰@ E
=
‰‰F G
_typeMapper
‰‰H S
.
‰‰S T
ConvertToSql
‰‰T `
(
‰‰` a
id
‰‰a c
.
‰‰c d
GetValue
‰‰d l
(
‰‰l m
	parameter
‰‰m v
,
‰‰v w
null
‰‰x |
)
‰‰| }
)
‰‰} ~
}‰‰ Ä
)‰‰Ä Å
;‰‰Å Ç
k
ÂÂ 
++
ÂÂ 
;
ÂÂ 
}
ÊÊ 
whereStatement
ÁÁ 
=
ÁÁ 
whereStatement
ÁÁ +
.
ÁÁ+ ,
	Substring
ÁÁ, 5
(
ÁÁ5 6
$num
ÁÁ6 7
)
ÁÁ7 8
;
ÁÁ8 9
if
ÈÈ 
(
ÈÈ 
param
ÈÈ 
.
ÈÈ 
Count
ÈÈ 
==
ÈÈ 
$num
ÈÈ  
)
ÈÈ  !
throw
ÍÍ 
new
ÍÍ 
	Exception
ÍÍ #
(
ÍÍ# $
$str
ÍÍ$ W
)
ÍÍW X
;
ÍÍX Y
var
ÏÏ 
sql
ÏÏ 
=
ÏÏ 
string
ÏÏ 
.
ÏÏ 
Format
ÏÏ #
(
ÏÏ# $
$str
ÏÏ$ A
,
ÏÏA B
	tableName
ÏÏC L
,
ÏÏL M
whereStatement
ÏÏN \
)
ÏÏ\ ]
;
ÏÏ] ^
return
ÌÌ 
new
ÌÌ 
Query
ÌÌ 
{
ÌÌ 
Command
ÌÌ &
=
ÌÌ' (
sql
ÌÌ) ,
,
ÌÌ, -

Parameters
ÌÌ. 8
=
ÌÌ9 :
param
ÌÌ; @
.
ÌÌ@ A
ToArray
ÌÌA H
(
ÌÌH I
)
ÌÌI J
}
ÌÌK L
;
ÌÌL M
}
ÓÓ 	
public
 
Query
 
GetInsertQuery
 #
(
# $
string
$ *
	tableName
+ 4
,
4 5
string
6 <

schemaName
= G
,
G H
IFeature
I Q
feature
R Y
,
Y Z
string
[ a 
geometryColumnName
b t
)
t u
{
ÒÒ 	
var
ıı 
parameterName
ıı 
=
ıı 
$str
ıı  "
;
ıı" #
var
ˆˆ 
parameterValue
ˆˆ 
=
ˆˆ  
$str
ˆˆ! #
;
ˆˆ# $
var
˜˜ 
param
˜˜ 
=
˜˜ 
new
˜˜ 
List
˜˜  
<
˜˜  !
QueryParameter
˜˜! /
>
˜˜/ 0
(
˜˜0 1
)
˜˜1 2
;
˜˜2 3
foreach
¯¯ 
(
¯¯ 
var
¯¯ 
name
¯¯ 
in
¯¯  
feature
¯¯! (
.
¯¯( )

Attributes
¯¯) 3
.
¯¯3 4
GetNames
¯¯4 <
(
¯¯< =
)
¯¯= >
)
¯¯> ?
{
˘˘ 
parameterName
˚˚ 
+=
˚˚  
$str
˚˚! %
+
˚˚& '
name
˚˚( ,
+
˚˚- .
$str
˚˚/ 2
;
˚˚2 3
parameterValue
¸¸ 
+=
¸¸ !
$str
¸¸" &
+
¸¸' (
name
¸¸) -
;
¸¸- .
param
˝˝ 
.
˝˝ 
Add
˝˝ 
(
˝˝ 
new
˝˝ 
QueryParameter
˝˝ ,
{
˝˝- .
Name
˝˝/ 3
=
˝˝4 5
$str
˝˝6 9
+
˝˝: ;
name
˝˝< @
,
˝˝@ A
Value
˝˝B G
=
˝˝H I
_typeMapper
˝˝J U
.
˝˝U V
ConvertToSql
˝˝V b
(
˝˝b c
feature
˝˝c j
.
˝˝j k

Attributes
˝˝k u
[
˝˝u v
name
˝˝v z
]
˝˝z {
)
˝˝{ |
}
˝˝} ~
)
˝˝~ 
;˝˝ Ä
}
˛˛ 
parameterName
ˇˇ 
+=
ˇˇ 
$str
ˇˇ !
+
ˇˇ" # 
geometryColumnName
ˇˇ$ 6
+
ˇˇ7 8
$str
ˇˇ9 <
;
ˇˇ< =
parameterValue
ÄÄ 
+=
ÄÄ 
$str
ÄÄ "
+
ÄÄ# $ 
geometryColumnName
ÄÄ% 7
;
ÄÄ7 8
param
ÅÅ 
.
ÅÅ 
Add
ÅÅ 
(
ÅÅ 
new
ÅÅ 
QueryParameter
ÅÅ (
{
ÅÅ) *
Name
ÅÅ+ /
=
ÅÅ0 1
$str
ÅÅ2 5
+
ÅÅ6 7 
geometryColumnName
ÅÅ8 J
,
ÅÅJ K
Value
ÅÅL Q
=
ÅÅR S
_typeMapper
ÅÅT _
.
ÅÅ_ `
ConvertToSql
ÅÅ` l
(
ÅÅl m
feature
ÅÅm t
.
ÅÅt u
Geometry
ÅÅu }
)
ÅÅ} ~
}ÅÅ Ä
)ÅÅÄ Å
;ÅÅÅ Ç
parameterName
ÉÉ 
=
ÉÉ 
parameterName
ÉÉ )
.
ÉÉ) *
	Substring
ÉÉ* 3
(
ÉÉ3 4
$num
ÉÉ4 5
)
ÉÉ5 6
;
ÉÉ6 7
parameterValue
ÑÑ 
=
ÑÑ 
parameterValue
ÑÑ +
.
ÑÑ+ ,
	Substring
ÑÑ, 5
(
ÑÑ5 6
$num
ÑÑ6 7
)
ÑÑ7 8
;
ÑÑ8 9
string
ÜÜ 
sql
ÜÜ 
=
ÜÜ 
null
ÜÜ 
;
ÜÜ 
if
áá 
(
áá 
parameterName
áá 
.
áá 
Length
áá $
>
áá% &
$num
áá' (
)
áá( )
sql
àà 
=
àà 
string
àà 
.
àà 
Format
àà #
(
àà# $
$str
àà$ J
,
ààJ K
	tableName
ààL U
,
ààU V
parameterName
ààW d
,
ààd e
parameterValue
ààf t
)
ààt u
;
ààu v
return
ââ 
new
ââ 
Query
ââ 
{
ââ 
Command
ââ &
=
ââ' (
sql
ââ) ,
,
ââ, -

Parameters
ââ. 8
=
ââ9 :
param
ââ; @
.
ââ@ A
ToArray
ââA H
(
ââH I
)
ââI J
}
ââK L
;
ââL M
}
ää 	
public
åå 
Query
åå 
GetDropTableQuery
åå &
(
åå& '
string
åå' -
	tableName
åå. 7
,
åå7 8
string
åå9 ?

schemaName
åå@ J
)
ååJ K
{
çç 	
return
éé 
new
éé 
Query
éé 
{
éé 
Command
éé &
=
éé' (
string
éé) /
.
éé/ 0
Format
éé0 6
(
éé6 7
$str
éé7 G
,
ééG H
	tableName
ééI R
)
ééR S
}
ééT U
;
ééU V
}
èè 	
public
ëë 
Query
ëë !
GetTableExistsQuery
ëë (
(
ëë( )
string
ëë) /
	tableName
ëë0 9
,
ëë9 :
string
ëë; A

schemaName
ëëB L
)
ëëL M
{
íí 	

schemaName
ìì 
=
ìì 
null
ìì 
;
ìì 
var
îî 
query
îî 
=
îî 
ConvertToQuery
îî &
(
îî& '
$strîî' £
,îî£ §
	tableNameîî• Æ
,îîÆ Ø

schemaNameîî∞ ∫
)îî∫ ª
;îîª º
return
ïï 
query
ïï 
;
ïï 
}
ññ 	
public
òò 
Query
òò 
GetUpdateQuery
òò #
(
òò# $
string
òò$ *
	tableName
òò+ 4
,
òò4 5
string
òò6 <

schemaName
òò= G
,
òòG H
IFeature
òòI Q
feature
òòR Y
,
òòY Z
string
òò[ a 
geometryColumnName
òòb t
,
òòt u
string
òòv |
[
òò| }
]
òò} ~
idColsòò Ö
,òòÖ Ü
boolòòá ã
setNullòòå ì
=òòî ï
falseòòñ õ
)òòõ ú
{
ôô 	
var
õõ 
parametrename
õõ 
=
õõ 
$str
õõ  "
;
õõ" #
var
úú 
param
úú 
=
úú 
new
úú 
List
úú  
<
úú  !
QueryParameter
úú! /
>
úú/ 0
(
úú0 1
)
úú1 2
;
úú2 3
foreach
ùù 
(
ùù 
var
ùù 
name
ùù 
in
ùù  
feature
ùù! (
.
ùù( )

Attributes
ùù) 3
.
ùù3 4
GetNames
ùù4 <
(
ùù< =
)
ùù= >
)
ùù> ?
{
ûû 
var
üü 
value
üü 
=
üü 
_typeMapper
üü '
.
üü' (
ConvertToSql
üü( 4
(
üü4 5
feature
üü5 <
.
üü< =

Attributes
üü= G
[
üüG H
name
üüH L
]
üüL M
)
üüM N
;
üüN O
if
†† 
(
†† 
!
†† 
setNull
†† 
&&
†† 
value
††  %
==
††& (
null
††) -
)
††- .
continue
††/ 7
;
††7 8
parametrename
¢¢ 
+=
¢¢  
$str
¢¢! %
+
¢¢& '
name
¢¢( ,
+
¢¢- .
$str
¢¢/ 4
+
¢¢5 6
value
¢¢7 <
;
¢¢< =
param
££ 
.
££ 
Add
££ 
(
££ 
new
££ 
QueryParameter
££ ,
{
££- .
Name
££/ 3
=
££4 5
$str
££6 9
+
££: ;
name
££< @
,
££@ A
Value
££B G
=
££H I
value
££J O
}
££P Q
)
££Q R
;
££R S
}
§§ 
var
•• 
geometry
•• 
=
•• 
_typeMapper
•• &
.
••& '
ConvertToSql
••' 3
(
••3 4
feature
••4 ;
.
••; <
Geometry
••< D
)
••D E
;
••E F
if
ßß 
(
ßß 
setNull
ßß 
||
ßß 
geometry
ßß #
!=
ßß$ &
null
ßß' +
)
ßß+ ,
{
®® 
parametrename
©© 
+=
©©  
$str
©©! %
+
©©& ' 
geometryColumnName
©©( :
+
©©; <
$str
©©= B
+
©©C D 
geometryColumnName
©©E W
;
©©W X
param
™™ 
.
™™ 
Add
™™ 
(
™™ 
new
™™ 
QueryParameter
™™ ,
{
™™- .
Name
™™/ 3
=
™™4 5
$str
™™6 9
+
™™: ; 
geometryColumnName
™™< N
,
™™N O
Value
™™P U
=
™™V W
geometry
™™X `
}
™™a b
)
™™b c
;
™™c d
}
´´ 
if
≠≠ 
(
≠≠ 
parametrename
≠≠ 
.
≠≠ 
Length
≠≠ $
>
≠≠% &
$num
≠≠' (
)
≠≠( )
parametrename
ÆÆ 
=
ÆÆ 
parametrename
ÆÆ  -
.
ÆÆ- .
	Substring
ÆÆ. 7
(
ÆÆ7 8
$num
ÆÆ8 9
)
ÆÆ9 :
;
ÆÆ: ;
var
∞∞ 
whereStatement
∞∞ 
=
∞∞  
$str
∞∞! #
;
∞∞# $
for
±± 
(
±± 
var
±± 
i
±± 
=
±± 
$num
±± 
;
±± 
i
±± 
<
±± 
idCols
±±  &
.
±±& '
Length
±±' -
;
±±- .
i
±±/ 0
++
±±0 2
)
±±2 3
{
≤≤ 
var
≥≥ 
id
≥≥ 
=
≥≥ 
idCols
≥≥ 
[
≥≥  
i
≥≥  !
]
≥≥! "
;
≥≥" #
whereStatement
¥¥ 
+=
¥¥ !
$str
¥¥" *
+
¥¥+ ,
id
¥¥- /
+
¥¥0 1
$str
¥¥2 8
+
¥¥9 :
i
¥¥; <
;
¥¥< =
param
µµ 
.
µµ 
Add
µµ 
(
µµ 
new
µµ 
QueryParameter
µµ ,
{
µµ- .
Name
µµ/ 3
=
µµ4 5
$str
µµ6 :
+
µµ; <
i
µµ= >
,
µµ> ?
Value
µµ@ E
=
µµF G
_typeMapper
µµH S
.
µµS T
ConvertToSql
µµT `
(
µµ` a
feature
µµa h
.
µµh i

Attributes
µµi s
[
µµs t
id
µµt v
]
µµv w
)
µµw x
}
µµy z
)
µµz {
;
µµ{ |
}
∂∂ 
if
∑∑ 
(
∑∑ 
whereStatement
∑∑ 
.
∑∑ 
Length
∑∑ %
>
∑∑& '
$num
∑∑( )
)
∑∑) *
whereStatement
∏∏ 
=
∏∏  
whereStatement
∏∏! /
.
∏∏/ 0
	Substring
∏∏0 9
(
∏∏9 :
$num
∏∏: ;
)
∏∏; <
;
∏∏< =
whereStatement
ππ 
=
ππ 
whereStatement
ππ +
.
ππ+ ,
Length
ππ, 2
>
ππ3 4
$num
ππ5 6
?
ππ7 8
$str
ππ9 B
+
ππC D
whereStatement
ππE S
:
ππT U
$str
ππV X
;
ππX Y
string
ªª 
sql
ªª 
=
ªª 
null
ªª 
;
ªª 
if
ºº 
(
ºº 
parametrename
ºº 
.
ºº 
Length
ºº $
>
ºº% &
$num
ºº' (
)
ºº( )
sql
ΩΩ 
=
ΩΩ 
string
ΩΩ 
.
ΩΩ 
Format
ΩΩ #
(
ΩΩ# $
$str
ΩΩ$ >
,
ΩΩ> ?
	tableName
ΩΩ@ I
,
ΩΩI J
parametrename
ΩΩK X
,
ΩΩX Y
whereStatement
ΩΩZ h
)
ΩΩh i
;
ΩΩi j
return
ææ 
new
ææ 
Query
ææ 
{
ææ 
Command
ææ &
=
ææ' (
sql
ææ) ,
,
ææ, -

Parameters
ææ. 8
=
ææ9 :
param
ææ; @
.
ææ@ A
ToArray
ææA H
(
ææH I
)
ææI J
}
ææK L
;
ææL M
}
øø 	
}
¿¿ 
}¡¡ Ÿı
†D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\DataBaseHelper\MsSqlHelper\MssqlQueryExecutor.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Database %
.% &
Mssql& +
{ 
public 

class  
FeatureCollectionExt %
:& '
FeatureCollection( 9
{ 
public 
	TableInfo 
	TableInfo "
{# $
get% (
;( )
set* -
;- .
}/ 0
public  
FeatureCollectionExt #
(# $
)$ %
{ 	
} 	
public  
FeatureCollectionExt #
(# $
FeatureCollection$ 5
fc6 8
,8 9
	TableInfo: C
tiD F
)F G
{ 	
foreach 
( 
var 
f 
in 
fc  
.  !
Features! )
)) *
{ 
this 
. 
Add 
( 
f 
) 
; 
} 
	TableInfo!! 
=!! 
ti!! 
;!! 
}"" 	
}$$ 
class&& 	
MssqlQueryExecutor&&
 
:&& 
IQueryExecutor&& -
{'' 
private(( 
SqlConnection(( 
_connection(( )
;(() *
private)) 
ITypeMapper)) 
_typeMapper)) '
;))' (
private** 
SqlTransaction** 
_transaction** +
;**+ ,
public,, 
static,, 
Action,, 
<,, 
Query,, "
,,," #
ResultStatus,,$ 0
>,,0 1
OnExecuionComplate,,2 D
{,,E F
get,,G J
;,,J K
set,,L O
;,,O P
},,Q R
public.. 
string.. 

ServerName..  
{..! "
get..# &
{..' (
return..) /
_connection..0 ;
...; <

DataSource..< F
;..F G
}..H I
}..J K
public// 
string// 
DbName// 
{// 
get// "
{//# $
return//% +
_connection//, 7
.//7 8
Database//8 @
;//@ A
}//B C
}//D E
public22 
bool22 
IsTransactionOpen22 %
{22& '
get22( +
{22, -
return22. 4
_transaction225 A
!=22B D
null22E I
&&22J L
_transaction22M Y
.22Y Z

Connection22Z d
!=22e g
null22h l
;22l m
}22n o
}22p q
public44 
string44 
ConnectionString44 &
{44' (
get44) ,
{44- .
return44/ 5
_connection446 A
.44A B
ConnectionString44B R
;44R S
}44T U
}44V W
public66 
MssqlQueryExecutor66 !
(66! "
string66" (
connectionString66) 9
,669 :
ITypeMapper66; F

typeMapper66G Q
,66Q R
DbTransaction66S `
transaction66a l
=66m n
null66o s
)66s t
{77 	
_typeMapper88 
=88 

typeMapper88 $
;88$ %
_transaction99 
=99 
(99 
SqlTransaction99 *
)99* +
transaction99+ 6
;996 7
_connection:: 
=:: 
_transaction:: &
==::' )
null::* .
||::/ 1
_transaction::2 >
.::> ?

Connection::? I
==::J L
null::M Q
?::R S
new;;  #
SqlConnection;;$ 1
(;;1 2
connectionString;;2 B
);;B C
:;;D E
_transaction<<  ,
.<<, -

Connection<<- 7
;<<7 8
}== 	
public?? 
void?? 
Dispose?? 
(?? 
)?? 
{@@ 	
ifAA 
(AA 
_connectionAA 
!=AA 
nullAA #
&&AA$ &
(AA' (
_transactionAA( 4
==AA5 7
nullAA8 <
||AA= ?
_transactionAA@ L
.AAL M

ConnectionAAM W
==AAX Z
nullAA[ _
)AA_ `
)AA` a
{BB 
_connectionCC 
.CC 
CloseCC !
(CC! "
)CC" #
;CC# $
_connectionDD 
.DD 
DisposeDD #
(DD# $
)DD$ %
;DD% &
_connectionEE 
=EE 
nullEE "
;EE" #
}FF 
}GG 	
publicII 
TII 
ExecuteScalerII 
<II 
TII  
>II  !
(II! "
QueryII" '
queryII( -
)II- .
{JJ 	
usingKK 
(KK 
varKK 
cmdKK 
=KK 

GetCommandKK '
(KK' (
queryKK( -
)KK- .
)KK. /
{LL 
varMM 
nowMM 
=MM 
DateTimeMM "
.MM" #
NowMM# &
;MM& '
varNN 
	geoReaderNN 
=NN 
newNN  #
NetTopologySuiteNN$ 4
.NN4 5
IONN5 7
.NN7 8
	WKBReaderNN8 A
(NNA B
)NNB C
;NNC D
varOO 
retOO 
=OO 
cmdOO 
.OO 
ExecuteScalarOO +
(OO+ ,
)OO, -
;OO- .
SystemQQ 
.QQ 
DiagnosticsQQ "
.QQ" #
DebugQQ# (
.QQ( )
	WriteLineQQ) 2
(QQ2 3
(QQ3 4
DateTimeQQ4 <
.QQ< =
NowQQ= @
-QQA B
nowQQC F
)QQF G
+QQH I
$strQQJ M
+QQN O
WriteLogQQP X
(QQX Y
queryQQY ^
.QQ^ _
CommandQQ_ f
,QQf g
queryQQh m
.QQm n

ParametersQQn x
)QQx y
)QQy z
;QQz {
returnRR 
retRR 
==RR 
nullRR "
||RR# %
retRR& )
==RR* ,
DBNullRR- 3
.RR3 4
ValueRR4 9
?RR: ;
defaultRR< C
(RRC D
TRRD E
)RRE F
:RRG H
retRRI L
.RRL M
GetTypeRRM T
(RRT U
)RRU V
.RRV W
NameRRW [
==RR\ ^
$strRR_ m
||RRn p
retRRq t
.RRt u
GetTypeRRu |
(RR| }
)RR} ~
.RR~ 
Name	RR É
==
RRÑ Ü
$str
RRá î
?
RRï ñ
(
RRó ò
T
RRò ô
)
RRô ö
	geoReader
RRö £
.
RR£ §
Read
RR§ ®
(
RR® ©
(
RR© ™
ret
RR™ ≠
.
RR≠ Æ
GetType
RRÆ µ
(
RRµ ∂
)
RR∂ ∑
.
RR∑ ∏
	GetMethod
RR∏ ¡
(
RR¡ ¬
$str
RR¬ Œ
)
RRŒ œ
.
RRœ –
Invoke
RR– ÷
(
RR÷ ◊
ret
RR◊ ⁄
,
RR⁄ €
null
RR‹ ‡
)
RR‡ ·
as
RR‚ ‰
System
RRÂ Î
.
RRÎ Ï
Data
RRÏ 
.
RR Ò
SqlTypes
RRÒ ˘
.
RR˘ ˙
SqlBytes
RR˙ Ç
)
RRÇ É
.
RRÉ Ñ
Value
RRÑ â
)
RRâ ä
:
RRã å
(
RRç é
T
RRé è
)
RRè ê
ret
RRê ì
;
RRì î
}TT 
}UU 	
publicWW 
FeatureCollectionWW  
ExecuteFeatureWW! /
(WW/ 0
QueryWW0 5
queryWW6 ;
)WW; <
{XX 	
varYY 

collectionYY 
=YY 
newYY  
FeatureCollectionYY! 2
(YY2 3
)YY3 4
;YY4 5
varZZ 
envelopeZZ 
=ZZ 
newZZ 
EnvelopeZZ '
(ZZ' (
)ZZ( )
;ZZ) *
using\\ 
(\\ 
var\\ 
cmd\\ 
=\\ 

GetCommand\\ '
(\\' (
query\\( -
)\\- .
)\\. /
{]] 
using^^ 
(^^ 
var^^ 
reader^^ !
=^^" #
cmd^^$ '
.^^' (
ExecuteReader^^( 5
(^^5 6
)^^6 7
)^^7 8
{__ 
while`` 
(`` 
reader`` !
.``! "
Read``" &
(``& '
)``' (
)``( )
{aa 
	IGeometrybb !
geometrybb" *
=bb+ ,
nullbb- 1
;bb1 2
IAttributesTablecc (
tablecc) .
=cc/ 0
newcc1 4
AttributesTablecc5 D
(ccD E
)ccE F
;ccF G
fordd 
(dd 
intdd  
idd! "
=dd# $
$numdd% &
;dd& '
idd( )
<dd* +
readerdd, 2
.dd2 3

FieldCountdd3 =
;dd= >
idd? @
++dd@ B
)ddB C
{ee 
tryff 
{gg 
varhh  #
valhh$ '
=hh( )
_typeMapperhh* 5
.hh5 6
ConvertFromSqlhh6 D
(hhD E
readerhhE K
.hhK L
GetValuehhL T
(hhT U
ihhU V
)hhV W
)hhW X
;hhX Y
varii  #
nameii$ (
=ii) *
readerii+ 1
.ii1 2
GetNameii2 9
(ii9 :
iii: ;
)ii; <
;ii< =
ifjj  "
(jj# $
namejj$ (
==jj) +
$strjj, 2
)jj2 3
namekk$ (
=kk) *
$strkk+ /
;kk/ 0
ifmm  "
(mm# $
!mm$ %
(mm% &
valmm& )
ismm* ,
	IGeometrymm- 6
)mm6 7
)mm7 8
tablenn$ )
.nn) *
AddAttributenn* 6
(nn6 7
namenn7 ;
,nn; <
valnn= @
)nn@ A
;nnA B
elseoo  $
{pp  !
geometryqq$ ,
=qq- .
(qq/ 0
	IGeometryqq0 9
)qq9 :
valqq: =
;qq= >
enveloperr$ ,
=rr- .
enveloperr/ 7
.rr7 8

ExpandedByrr8 B
(rrB C
geometryrrC K
.rrK L
EnvelopeInternalrrL \
)rr\ ]
;rr] ^
}ss  !
}uu 
catchvv !
{ww 
}yy 
}zz 

collection{{ "
.{{" #
Add{{# &
({{& '
new{{' *
Feature{{+ 2
({{2 3
geometry{{3 ;
,{{; <
table{{= B
){{B C
){{C D
;{{D E
}|| 
}}} 
}~~ 

collection 
. 
BoundingBox "
=# $
envelope% -
;- .
return
ÄÄ 

collection
ÄÄ 
;
ÄÄ 
}
ÅÅ 	
public
ÇÇ "
FeatureCollectionExt
ÇÇ #
ExecuteFeature2
ÇÇ$ 3
(
ÇÇ3 4
Query
ÇÇ4 9
query
ÇÇ: ?
)
ÇÇ? @
{
ÉÉ 	
var
ÑÑ 

collection
ÑÑ 
=
ÑÑ 
new
ÑÑ  "
FeatureCollectionExt
ÑÑ! 5
(
ÑÑ5 6
)
ÑÑ6 7
;
ÑÑ7 8
var
ÖÖ 
envelope
ÖÖ 
=
ÖÖ 
new
ÖÖ 
Envelope
ÖÖ '
(
ÖÖ' (
)
ÖÖ( )
;
ÖÖ) *

collection
ÜÜ 
.
ÜÜ 
	TableInfo
ÜÜ  
=
ÜÜ! "
new
ÜÜ# &
	TableInfo
ÜÜ' 0
(
ÜÜ0 1
)
ÜÜ1 2
;
ÜÜ2 3
using
àà 
(
àà 
var
àà 
cmd
àà 
=
àà 

GetCommand
àà '
(
àà' (
query
àà( -
)
àà- .
)
àà. /
{
ââ 
using
ää 
(
ää 
var
ää 
reader
ää !
=
ää" #
cmd
ää$ '
.
ää' (
ExecuteReader
ää( 5
(
ää5 6
)
ää6 7
)
ää7 8
{
ãã 
var
åå 
stbl
åå 
=
åå 
reader
åå %
.
åå% &
GetSchemaTable
åå& 4
(
åå4 5
)
åå5 6
.
åå6 7
Rows
åå7 ;
.
åå; <
Cast
åå< @
<
åå@ A
DataRow
ååA H
>
ååH I
(
ååI J
)
ååJ K
.
ååK L
OrderBy
ååL S
(
ååS T
a
ååT U
=>
ååV X
a
ååY Z
[
ååZ [
$str
åå[ j
]
ååj k
)
ååk l
.
åål m
ToArray
ååm t
(
ååt u
)
ååu v
;
ååv w
for
éé 
(
éé 
var
éé 
i
éé 
=
éé  
$num
éé! "
;
éé" #
i
éé$ %
<
éé& '
stbl
éé( ,
.
éé, -
Length
éé- 3
;
éé3 4
i
éé5 6
++
éé6 8
)
éé8 9
{
èè 
var
êê 
type
êê  
=
êê! "
stbl
êê# '
[
êê' (
i
êê( )
]
êê) *
[
êê* +
$str
êê+ 5
]
êê5 6
as
êê7 9
Type
êê: >
;
êê> ?
var
ëë 
name
ëë  
=
ëë! "
stbl
ëë# '
[
ëë' (
i
ëë( )
]
ëë) *
[
ëë* +
$str
ëë+ 7
]
ëë7 8
.
ëë8 9
ToString
ëë9 A
(
ëëA B
)
ëëB C
;
ëëC D
var
íí 
typename
íí $
=
íí% &
stbl
íí' +
[
íí+ ,
i
íí, -
]
íí- .
[
íí. /
$str
íí/ =
]
íí= >
.
íí> ?
ToString
íí? G
(
ííG H
)
ííH I
;
ííI J
var
ìì 
len
ìì 
=
ìì  !
(
ìì" #
int
ìì# &
)
ìì& '
stbl
ìì' +
[
ìì+ ,
i
ìì, -
]
ìì- .
[
ìì. /
$str
ìì/ ;
]
ìì; <
;
ìì< =
if
îî 
(
îî 
typename
îî $
.
îî$ %
EndsWith
îî% -
(
îî- .
$str
îî. 9
)
îî9 :
||
îî; =
typename
îî> F
.
îîF G
EndsWith
îîG O
(
îîO P
$str
îîP Z
)
îîZ [
)
îî[ \
continue
ïï $
;
ïï$ %

collection
óó "
.
óó" #
	TableInfo
óó# ,
.
óó, -
Columns
óó- 4
.
óó4 5
Add
óó5 8
(
óó8 9
new
óó9 <
TableColumn
óó= H
{
óóI J

ColumnName
óóK U
=
óóV W
name
óóX \
,
óó\ ]
Type
óó^ b
=
óóc d
type
óóe i
,
óói j
Length
óók q
=
óór s
type
óót x
.
óóx y
Name
óóy }
.
óó} ~
ToLoweróó~ Ö
(óóÖ Ü
)óóÜ á
==óóà ä
$stróóã ì
?óóî ï
lenóóñ ô
:óóö õ
$numóóú û
}óóü †
)óó† °
;óó° ¢
}
òò 
while
õõ 
(
õõ 
reader
õõ !
.
õõ! "
Read
õõ" &
(
õõ& '
)
õõ' (
)
õõ( )
{
úú 
	IGeometry
ùù !
geometry
ùù" *
=
ùù+ ,
null
ùù- 1
;
ùù1 2
IAttributesTable
ûû (
table
ûû) .
=
ûû/ 0
new
ûû1 4
AttributesTable
ûû5 D
(
ûûD E
)
ûûE F
;
ûûF G
for
üü 
(
üü 
int
üü  
i
üü! "
=
üü# $
$num
üü% &
;
üü& '
i
üü( )
<
üü* +
reader
üü, 2
.
üü2 3

FieldCount
üü3 =
;
üü= >
i
üü? @
++
üü@ B
)
üüB C
{
†† 
try
°° 
{
¢¢ 
var
££  #
val
££$ '
=
££( )
_typeMapper
££* 5
.
££5 6
ConvertFromSql
££6 D
(
££D E
reader
££E K
.
££K L
GetValue
££L T
(
££T U
i
££U V
)
££V W
)
££W X
;
££X Y
var
§§  #
name
§§$ (
=
§§) *
reader
§§+ 1
.
§§1 2
GetName
§§2 9
(
§§9 :
i
§§: ;
)
§§; <
;
§§< =
if
••  "
(
••# $
name
••$ (
==
••) +
$str
••, 2
)
••2 3
name
¶¶$ (
=
¶¶) *
$str
¶¶+ /
;
¶¶/ 0
if
®®  "
(
®®# $
!
®®$ %
(
®®% &
val
®®& )
is
®®* ,
	IGeometry
®®- 6
)
®®6 7
)
®®7 8
table
©©$ )
.
©©) *
AddAttribute
©©* 6
(
©©6 7
name
©©7 ;
,
©©; <
val
©©= @
)
©©@ A
;
©©A B
else
™™  $
{
´´  !
geometry
¨¨$ ,
=
¨¨- .
(
¨¨/ 0
	IGeometry
¨¨0 9
)
¨¨9 :
val
¨¨: =
;
¨¨= >
envelope
≠≠$ ,
=
≠≠- .
envelope
≠≠/ 7
.
≠≠7 8

ExpandedBy
≠≠8 B
(
≠≠B C
geometry
≠≠C K
.
≠≠K L
EnvelopeInternal
≠≠L \
)
≠≠\ ]
;
≠≠] ^
}
ÆÆ  !
}
∞∞ 
catch
±± !
{
≤≤ 
}
¥¥ 
}
µµ 

collection
∂∂ "
.
∂∂" #
Add
∂∂# &
(
∂∂& '
new
∂∂' *
Feature
∂∂+ 2
(
∂∂2 3
geometry
∂∂3 ;
,
∂∂; <
table
∂∂= B
)
∂∂B C
)
∂∂C D
;
∂∂D E
}
∑∑ 
}
∏∏ 
}
ππ 

collection
∫∫ 
.
∫∫ 
BoundingBox
∫∫ "
=
∫∫# $
envelope
∫∫% -
;
∫∫- .
return
ªª 

collection
ªª 
;
ªª 
}
ºº 	
public
ææ 
IEnumerable
ææ 
<
ææ 
T
ææ 
>
ææ 
ExecuteReader
ææ +
<
ææ+ ,
T
ææ, -
>
ææ- .
(
ææ. /
Query
ææ/ 4
query
ææ5 :
)
ææ: ;
{
øø 	
using
¿¿ 
(
¿¿ 
var
¿¿ 
cmd
¿¿ 
=
¿¿ 

GetCommand
¿¿ '
(
¿¿' (
query
¿¿( -
)
¿¿- .
)
¿¿. /
{
¡¡ 
using
¬¬ 
(
¬¬ 
var
¬¬ 
reader
¬¬ !
=
¬¬" #
cmd
¬¬$ '
.
¬¬' (
ExecuteReader
¬¬( 5
(
¬¬5 6
)
¬¬6 7
)
¬¬7 8
{
√√ 
var
ƒƒ 
now
ƒƒ 
=
ƒƒ 
DateTime
ƒƒ &
.
ƒƒ& '
Now
ƒƒ' *
;
ƒƒ* +
while
≈≈ 
(
≈≈ 
reader
≈≈ !
.
≈≈! "
Read
≈≈" &
(
≈≈& '
)
≈≈' (
)
≈≈( )
{
∆∆ 
if
«« 
(
«« 
IsAnonymous
«« '
(
««' (
typeof
««( .
(
««. /
T
««/ 0
)
««0 1
)
««1 2
)
««2 3
{
»» 
var
…… 
args
……  $
=
……% &
new
……' *
List
……+ /
<
……/ 0
object
……0 6
>
……6 7
(
……7 8
)
……8 9
;
……9 :
for
   
(
    !
int
  ! $
i
  % &
=
  ' (
$num
  ) *
;
  * +
i
  , -
<
  . /
reader
  0 6
.
  6 7

FieldCount
  7 A
;
  A B
i
  C D
++
  D F
)
  F G
{
ÀÀ 
var
ÃÃ  #
val
ÃÃ$ '
=
ÃÃ( )
_typeMapper
ÃÃ* 5
.
ÃÃ5 6
ConvertFromSql
ÃÃ6 D
(
ÃÃD E
reader
ÃÃE K
.
ÃÃK L
GetValue
ÃÃL T
(
ÃÃT U
i
ÃÃU V
)
ÃÃV W
)
ÃÃW X
;
ÃÃX Y
args
ÕÕ  $
.
ÕÕ$ %
Add
ÕÕ% (
(
ÕÕ( )
val
ÕÕ) ,
)
ÕÕ, -
;
ÕÕ- .
}
ŒŒ 
T
œœ 
ret
œœ !
=
œœ" #
(
œœ$ %
T
œœ% &
)
œœ& '
	Activator
œœ' 0
.
œœ0 1
CreateInstance
œœ1 ?
(
œœ? @
typeof
œœ@ F
(
œœF G
T
œœG H
)
œœH I
,
œœI J
args
œœK O
.
œœO P
ToArray
œœP W
(
œœW X
)
œœX Y
)
œœY Z
;
œœZ [
yield
–– !
return
––" (
ret
––) ,
;
––, -
}
—— 
else
““ 
{
”” 
T
‘‘ 
ret
‘‘ !
=
‘‘" #
(
‘‘$ %
T
‘‘% &
)
‘‘& '
	Activator
‘‘' 0
.
‘‘0 1
CreateInstance
‘‘1 ?
(
‘‘? @
typeof
‘‘@ F
(
‘‘F G
T
‘‘G H
)
‘‘H I
)
‘‘I J
;
‘‘J K
for
’’ 
(
’’  !
int
’’! $
i
’’% &
=
’’' (
$num
’’) *
;
’’* +
i
’’, -
<
’’. /
reader
’’0 6
.
’’6 7

FieldCount
’’7 A
;
’’A B
i
’’C D
++
’’D F
)
’’F G
{
÷÷ 
try
◊◊  #
{
ÿÿ  !
var
ŸŸ$ '
val
ŸŸ( +
=
ŸŸ, -
_typeMapper
ŸŸ. 9
.
ŸŸ9 :
ConvertFromSql
ŸŸ: H
(
ŸŸH I
reader
ŸŸI O
.
ŸŸO P
GetValue
ŸŸP X
(
ŸŸX Y
i
ŸŸY Z
)
ŸŸZ [
)
ŸŸ[ \
;
ŸŸ\ ]
var
⁄⁄$ '
info
⁄⁄( ,
=
⁄⁄- .
ret
⁄⁄/ 2
.
⁄⁄2 3
GetType
⁄⁄3 :
(
⁄⁄: ;
)
⁄⁄; <
.
⁄⁄< =
GetProperty
⁄⁄= H
(
⁄⁄H I
reader
⁄⁄I O
.
⁄⁄O P
GetName
⁄⁄P W
(
⁄⁄W X
i
⁄⁄X Y
)
⁄⁄Y Z
)
⁄⁄Z [
;
⁄⁄[ \
if
€€$ &
(
€€' (
info
€€( ,
!=
€€- /
null
€€0 4
)
€€4 5
info
‹‹( ,
.
‹‹, -
SetValue
‹‹- 5
(
‹‹5 6
ret
‹‹6 9
,
‹‹9 :
val
‹‹; >
,
‹‹> ?
null
‹‹@ D
)
‹‹D E
;
‹‹E F
}
››  !
catch
ﬁﬁ  %
(
ﬁﬁ& '
	Exception
ﬁﬁ' 0
ex
ﬁﬁ1 3
)
ﬁﬁ3 4
{
ﬂﬂ  !
System
‡‡$ *
.
‡‡* +
Diagnostics
‡‡+ 6
.
‡‡6 7
Debug
‡‡7 <
.
‡‡< =
	WriteLine
‡‡= F
(
‡‡F G
ex
‡‡G I
.
‡‡I J
Message
‡‡J Q
)
‡‡Q R
;
‡‡R S
}
··  !
}
‚‚ 
yield
„„ !
return
„„" (
ret
„„) ,
;
„„, -
}
‰‰ 
}
ÂÂ 
System
ÊÊ 
.
ÊÊ 
Diagnostics
ÊÊ &
.
ÊÊ& '
Debug
ÊÊ' ,
.
ÊÊ, -
	WriteLine
ÊÊ- 6
(
ÊÊ6 7
(
ÊÊ7 8
DateTime
ÊÊ8 @
.
ÊÊ@ A
Now
ÊÊA D
-
ÊÊE F
now
ÊÊG J
)
ÊÊJ K
+
ÊÊL M
$str
ÊÊN Q
+
ÊÊR S
WriteLog
ÊÊT \
(
ÊÊ\ ]
query
ÊÊ] b
.
ÊÊb c
Command
ÊÊc j
,
ÊÊj k
query
ÊÊl q
.
ÊÊq r

Parameters
ÊÊr |
)
ÊÊ| }
)
ÊÊ} ~
;
ÊÊ~ 
}
ÁÁ 
}
ËË  
OnExecuionComplate
ÈÈ 
?
ÈÈ 
.
ÈÈ  
Invoke
ÈÈ  &
(
ÈÈ& '
query
ÈÈ' ,
,
ÈÈ, -
null
ÈÈ. 2
)
ÈÈ2 3
;
ÈÈ3 4
}
ÍÍ 	
public
ÏÏ 
IEnumerable
ÏÏ 
<
ÏÏ 

Dictionary
ÏÏ %
<
ÏÏ% &
string
ÏÏ& ,
,
ÏÏ, -
object
ÏÏ. 4
>
ÏÏ4 5
>
ÏÏ5 6
ExecuteReader
ÏÏ7 D
(
ÏÏD E
Query
ÏÏE J
query
ÏÏK P
)
ÏÏP Q
{
ÌÌ 	
using
ÓÓ 
(
ÓÓ 
var
ÓÓ 
cmd
ÓÓ 
=
ÓÓ 

GetCommand
ÓÓ '
(
ÓÓ' (
query
ÓÓ( -
)
ÓÓ- .
)
ÓÓ. /
{
ÔÔ 
using
 
(
 
var
 
reader
 !
=
" #
cmd
$ '
.
' (
ExecuteReader
( 5
(
5 6
)
6 7
)
7 8
{
ÒÒ 
var
ÚÚ 
now
ÚÚ 
=
ÚÚ 
DateTime
ÚÚ &
.
ÚÚ& '
Now
ÚÚ' *
;
ÚÚ* +
var
ÛÛ 
	geoReader
ÛÛ !
=
ÛÛ" #
new
ÛÛ$ '
NetTopologySuite
ÛÛ( 8
.
ÛÛ8 9
IO
ÛÛ9 ;
.
ÛÛ; <
	WKBReader
ÛÛ< E
(
ÛÛE F
)
ÛÛF G
;
ÛÛG H
while
ÙÙ 
(
ÙÙ 
reader
ÙÙ !
.
ÙÙ! "
Read
ÙÙ" &
(
ÙÙ& '
)
ÙÙ' (
)
ÙÙ( )
{
ıı 

Dictionary
ˆˆ "
<
ˆˆ" #
string
ˆˆ# )
,
ˆˆ) *
object
ˆˆ+ 1
>
ˆˆ1 2
ret
ˆˆ3 6
=
ˆˆ7 8
new
ˆˆ9 <

Dictionary
ˆˆ= G
<
ˆˆG H
string
ˆˆH N
,
ˆˆN O
object
ˆˆP V
>
ˆˆV W
(
ˆˆW X
)
ˆˆX Y
;
ˆˆY Z
for
˜˜ 
(
˜˜ 
int
˜˜  
i
˜˜! "
=
˜˜# $
$num
˜˜% &
;
˜˜& '
i
˜˜( )
<
˜˜* +
reader
˜˜, 2
.
˜˜2 3

FieldCount
˜˜3 =
;
˜˜= >
i
˜˜? @
++
˜˜@ B
)
˜˜B C
{
¯¯ 
var
˘˘ 
name
˘˘  $
=
˘˘% &
reader
˘˘' -
.
˘˘- .
GetName
˘˘. 5
(
˘˘5 6
i
˘˘6 7
)
˘˘7 8
;
˘˘8 9
var
˙˙ 
value
˙˙  %
=
˙˙& '
_typeMapper
˙˙( 3
.
˙˙3 4
ConvertFromSql
˙˙4 B
(
˙˙B C
reader
˙˙C I
.
˙˙I J
GetValue
˙˙J R
(
˙˙R S
i
˙˙S T
)
˙˙T U
)
˙˙U V
;
˙˙V W
ret
˚˚ 
[
˚˚  
name
˚˚  $
]
˚˚$ %
=
˚˚& '
value
˚˚( -
;
˚˚- .
}
¸¸ 
yield
˝˝ 
return
˝˝ $
ret
˝˝% (
;
˝˝( )
}
˛˛ 
System
ˇˇ 
.
ˇˇ 
Diagnostics
ˇˇ &
.
ˇˇ& '
Debug
ˇˇ' ,
.
ˇˇ, -
	WriteLine
ˇˇ- 6
(
ˇˇ6 7
(
ˇˇ7 8
DateTime
ˇˇ8 @
.
ˇˇ@ A
Now
ˇˇA D
-
ˇˇE F
now
ˇˇG J
)
ˇˇJ K
+
ˇˇL M
$str
ˇˇN Q
+
ˇˇR S
WriteLog
ˇˇT \
(
ˇˇ\ ]
query
ˇˇ] b
.
ˇˇb c
Command
ˇˇc j
,
ˇˇj k
query
ˇˇl q
.
ˇˇq r

Parameters
ˇˇr |
)
ˇˇ| }
)
ˇˇ} ~
;
ˇˇ~ 
}
ÄÄ 
}
ÅÅ  
OnExecuionComplate
ÇÇ 
?
ÇÇ 
.
ÇÇ  
Invoke
ÇÇ  &
(
ÇÇ& '
query
ÇÇ' ,
,
ÇÇ, -
null
ÇÇ. 2
)
ÇÇ2 3
;
ÇÇ3 4
}
ÉÉ 	
public
ÖÖ 
ResultStatus
ÖÖ 
ExecuteNonQuery
ÖÖ +
(
ÖÖ+ ,
Query
ÖÖ, 1
query
ÖÖ2 7
)
ÖÖ7 8
{
ÜÜ 	
try
áá 
{
àà 
using
ââ 
(
ââ 
var
ââ 
cmd
ââ 
=
ââ  

GetCommand
ââ! +
(
ââ+ ,
query
ââ, 1
)
ââ1 2
)
ââ2 3
{
ää 
cmd
ãã 
.
ãã 
CommandTimeout
ãã &
=
ãã' (
$num
ãã) 1
;
ãã1 2
var
åå 
now
åå 
=
åå 
DateTime
åå &
.
åå& '
Now
åå' *
;
åå* +
var
çç 
tr
çç 
=
çç 
cmd
çç  
.
çç  !
ExecuteNonQuery
çç! 0
(
çç0 1
)
çç1 2
;
çç2 3
var
éé 
status
éé 
=
éé  
new
éé! $
ResultStatus
éé% 1
{
èè 
message
êê 
=
êê  !
tr
êê" $
.
êê$ %
ToString
êê% -
(
êê- .
)
êê. /
,
êê/ 0
result
ëë 
=
ëë  
true
ëë! %
}
íí 
;
íí  
OnExecuionComplate
ìì &
?
ìì& '
.
ìì' (
Invoke
ìì( .
(
ìì. /
query
ìì/ 4
,
ìì4 5
status
ìì6 <
)
ìì< =
;
ìì= >
System
îî 
.
îî 
Diagnostics
îî &
.
îî& '
Debug
îî' ,
.
îî, -
	WriteLine
îî- 6
(
îî6 7
(
îî7 8
DateTime
îî8 @
.
îî@ A
Now
îîA D
-
îîE F
now
îîG J
)
îîJ K
+
îîL M
$str
îîN Q
+
îîR S
WriteLog
îîT \
(
îî\ ]
query
îî] b
.
îîb c
Command
îîc j
,
îîj k
query
îîl q
.
îîq r

Parameters
îîr |
)
îî| }
)
îî} ~
;
îî~ 
return
ïï 
status
ïï !
;
ïï! "
}
ññ 
}
óó 
catch
òò 
(
òò 
	Exception
òò 
ex
òò 
)
òò  
{
ôô 
return
öö 
new
öö 
ResultStatus
öö '
{
õõ 
message
ùù 
=
ùù 
String
ùù $
.
ùù$ %
Format
ùù% +
(
ùù+ ,
query
ùù, 1
.
ùù1 2
Command
ùù2 9
,
ùù9 :
query
ùù; @
.
ùù@ A

Parameters
ùùA K
)
ùùK L
+
ùùM N
System
ùùO U
.
ùùU V
Environment
ùùV a
.
ùùa b
NewLine
ùùb i
+
ùùj k
$str
ùùl ~
+ùù Ä
exùùÅ É
.ùùÉ Ñ
ToStringùùÑ å
(ùùå ç
)ùùç é
,ùùé è
result
ûû 
=
ûû 
false
ûû "
}
üü 
;
üü 
}
†† 
}
°° 	
public
££ 
bool
££ !
IsSupportBulkInsert
££ '
{
££( )
get
££* -
{
££. /
return
££0 6
true
££7 ;
;
££; <
}
££= >
}
££? @
public
•• 
ResultStatus
•• 
ExecuteBulkInsert
•• -
(
••- .
string
••. 4
	tableName
••5 >
,
••> ?
string
••@ F

schemaName
••G Q
,
••Q R
FeatureCollection
••S d
	parametre
••e n
,
••n o
	TableInfo
••p y
	tableInfo••z É
,••É Ñ
string••Ö ã
geomColName••å ó
)••ó ò
{
¶¶ 	
var
ßß 
	partCount
ßß 
=
ßß 
$num
ßß  
;
ßß  !
List
®® 
<
®® 
IFeature
®® 
[
®® 
]
®® 
>
®® 
featureParts
®® )
=
®®* +
new
®®, /
List
®®0 4
<
®®4 5
IFeature
®®5 =
[
®®= >
]
®®> ?
>
®®? @
(
®®@ A
)
®®A B
;
®®B C
for
©© 
(
©© 
var
©© 
i
©© 
=
©© 
$num
©© 
;
©© 
i
©© 
<
©© 
(
©©  !
int
©©! $
)
©©$ %
Math
©©% )
.
©©) *
Ceiling
©©* 1
(
©©1 2
(
©©2 3
double
©©3 9
)
©©9 :
	parametre
©©: C
.
©©C D
Features
©©D L
.
©©L M
Count
©©M R
/
©©S T
	partCount
©©U ^
)
©©^ _
;
©©_ `
i
©©a b
++
©©b d
)
©©d e
featureParts
™™ 
.
™™ 
Add
™™  
(
™™  !
	parametre
™™! *
.
™™* +
Features
™™+ 3
.
™™3 4
Skip
™™4 8
(
™™8 9
i
™™9 :
*
™™; <
	partCount
™™= F
)
™™F G
.
™™G H
Take
™™H L
(
™™L M
	partCount
™™M V
)
™™V W
.
™™W X
ToArray
™™X _
(
™™_ `
)
™™` a
)
™™a b
;
™™b c
foreach
¨¨ 
(
¨¨ 
var
¨¨ 
features
¨¨ !
in
¨¨" $
featureParts
¨¨% 1
)
¨¨1 2
{
≠≠ 
var
ÆÆ 
dt
ÆÆ 
=
ÆÆ 
new
ÆÆ 
	DataTable
ÆÆ &
(
ÆÆ& '
)
ÆÆ' (
;
ÆÆ( )
foreach
ØØ 
(
ØØ 
var
ØØ 
feature
ØØ $
in
ØØ% '
features
ØØ( 0
)
ØØ0 1
{
∞∞ 
var
±± 
row
±± 
=
±± 
dt
±±  
.
±±  !
NewRow
±±! '
(
±±' (
)
±±( )
;
±±) *
foreach
≤≤ 
(
≤≤ 
var
≤≤  
name
≤≤! %
in
≤≤& (
feature
≤≤) 0
.
≤≤0 1

Attributes
≤≤1 ;
.
≤≤; <
GetNames
≤≤< D
(
≤≤D E
)
≤≤E F
.
≤≤F G
Union
≤≤G L
(
≤≤L M
new
≤≤M P
[
≤≤P Q
]
≤≤Q R
{
≤≤S T
geomColName
≤≤U `
}
≤≤a b
)
≤≤b c
)
≤≤c d
{
≥≥ 
if
¥¥ 
(
¥¥ 
	tableInfo
¥¥ %
!=
¥¥& (
null
¥¥) -
&&
¥¥. 0
name
µµ  
!=
µµ! #
$str
µµ$ *
&&
µµ+ -
name
∂∂  
!=
∂∂! #
$str
∂∂$ +
&&
∂∂, .
!
∑∑ 
	tableInfo
∑∑ &
.
∑∑& '
Columns
∑∑' .
.
∑∑. /
Any
∑∑/ 2
(
∑∑2 3
a
∑∑3 4
=>
∑∑5 7
a
∑∑8 9
.
∑∑9 :

ColumnName
∑∑: D
==
∑∑E G
name
∑∑H L
)
∑∑L M
)
∑∑M N
continue
∏∏ $
;
∏∏$ %
object
ππ 
value
ππ $
;
ππ$ %
if
∫∫ 
(
∫∫ 
name
∫∫  
!=
∫∫! #
geomColName
∫∫$ /
)
∫∫/ 0
value
∫∫1 6
=
∫∫7 8
feature
∫∫9 @
.
∫∫@ A

Attributes
∫∫A K
[
∫∫K L
name
∫∫L P
]
∫∫P Q
;
∫∫Q R
else
ªª 
value
ªª "
=
ªª# $
	Microsoft
ªª% .
.
ªª. /
	SqlServer
ªª/ 8
.
ªª8 9
Types
ªª9 >
.
ªª> ?
SqlGeography
ªª? K
.
ªªK L
STGeomFromWKB
ªªL Y
(
ªªY Z
new
ªªZ ]
System
ªª^ d
.
ªªd e
Data
ªªe i
.
ªªi j
SqlTypes
ªªj r
.
ªªr s
SqlBytes
ªªs {
(
ªª{ |
featureªª| É
.ªªÉ Ñ
GeometryªªÑ å
.ªªå ç
AsBinaryªªç ï
(ªªï ñ
)ªªñ ó
)ªªó ò
,ªªò ô
$numªªö û
)ªªû ü
;ªªü †
if
ΩΩ 
(
ΩΩ 
!
ΩΩ 
dt
ΩΩ 
.
ΩΩ  
Columns
ΩΩ  '
.
ΩΩ' (
Contains
ΩΩ( 0
(
ΩΩ0 1
name
ΩΩ1 5
)
ΩΩ5 6
)
ΩΩ6 7
{
ææ 

DataColumn
øø &
column
øø' -
;
øø- .
if
¿¿ 
(
¿¿  
value
¿¿  %
==
¿¿& (
null
¿¿) -
)
¿¿- .
column
¡¡  &
=
¡¡' (
new
¡¡) ,

DataColumn
¡¡- 7
(
¡¡7 8
name
¡¡8 <
)
¡¡< =
;
¡¡= >
else
¬¬  
{
√√ 
var
ƒƒ  #
type
ƒƒ$ (
=
ƒƒ) *
value
ƒƒ+ 0
.
ƒƒ0 1
GetType
ƒƒ1 8
(
ƒƒ8 9
)
ƒƒ9 :
;
ƒƒ: ;
if
≈≈  "
(
≈≈# $
typeof
≈≈$ *
(
≈≈* +
Guid
≈≈+ /
)
≈≈/ 0
.
≈≈0 1
IsAssignableFrom
≈≈1 A
(
≈≈A B
type
≈≈B F
)
≈≈F G
)
≈≈G H
column
∆∆$ *
=
∆∆+ ,
new
∆∆- 0

DataColumn
∆∆1 ;
(
∆∆; <
name
∆∆< @
,
∆∆@ A
typeof
∆∆B H
(
∆∆H I
Guid
∆∆I M
)
∆∆M N
)
∆∆N O
;
∆∆O P
else
««  $
if
««% '
(
««( )
typeof
««) /
(
««/ 0
DateTime
««0 8
)
««8 9
.
««9 :
IsAssignableFrom
««: J
(
««J K
type
««K O
)
««O P
)
««P Q
column
»»$ *
=
»»+ ,
new
»»- 0

DataColumn
»»1 ;
(
»»; <
name
»»< @
,
»»@ A
typeof
»»B H
(
»»H I
DateTime
»»I Q
)
»»Q R
)
»»R S
;
»»S T
else
……  $
if
……% '
(
……( )
typeof
……) /
(
……/ 0
Boolean
……0 7
)
……7 8
.
……8 9
IsAssignableFrom
……9 I
(
……I J
type
……J N
)
……N O
)
……O P
column
  $ *
=
  + ,
new
  - 0

DataColumn
  1 ;
(
  ; <
name
  < @
,
  @ A
typeof
  B H
(
  H I
Boolean
  I P
)
  P Q
)
  Q R
;
  R S
else
ÀÀ  $
if
ÀÀ% '
(
ÀÀ( )
typeof
ÀÀ) /
(
ÀÀ/ 0
Int32
ÀÀ0 5
)
ÀÀ5 6
.
ÀÀ6 7
IsAssignableFrom
ÀÀ7 G
(
ÀÀG H
type
ÀÀH L
)
ÀÀL M
)
ÀÀM N
column
ÃÃ$ *
=
ÃÃ+ ,
new
ÃÃ- 0

DataColumn
ÃÃ1 ;
(
ÃÃ; <
name
ÃÃ< @
,
ÃÃ@ A
typeof
ÃÃB H
(
ÃÃH I
Int32
ÃÃI N
)
ÃÃN O
)
ÃÃO P
;
ÃÃP Q
else
ÕÕ  $
if
ÕÕ% '
(
ÕÕ( )
typeof
ÕÕ) /
(
ÕÕ/ 0
	Microsoft
ÕÕ0 9
.
ÕÕ9 :
	SqlServer
ÕÕ: C
.
ÕÕC D
Types
ÕÕD I
.
ÕÕI J
SqlGeography
ÕÕJ V
)
ÕÕV W
.
ÕÕW X
IsAssignableFrom
ÕÕX h
(
ÕÕh i
type
ÕÕi m
)
ÕÕm n
)
ÕÕn o
column
ŒŒ$ *
=
ŒŒ+ ,
new
ŒŒ- 0

DataColumn
ŒŒ1 ;
(
ŒŒ; <
name
ŒŒ< @
,
ŒŒ@ A
typeof
ŒŒB H
(
ŒŒH I
	Microsoft
ŒŒI R
.
ŒŒR S
	SqlServer
ŒŒS \
.
ŒŒ\ ]
Types
ŒŒ] b
.
ŒŒb c
SqlGeography
ŒŒc o
)
ŒŒo p
)
ŒŒp q
;
ŒŒq r
else
œœ  $
column
œœ% +
=
œœ, -
new
œœ. 1

DataColumn
œœ2 <
(
œœ< =
name
œœ= A
)
œœA B
;
œœB C
}
–– 
dt
““ 
.
““ 
Columns
““ &
.
““& '
Add
““' *
(
““* +
column
““+ 1
)
““1 2
;
““2 3
}
”” 
row
‘‘ 
[
‘‘ 
name
‘‘  
]
‘‘  !
=
‘‘" #
value
‘‘$ )
;
‘‘) *
}
’’ 
dt
÷÷ 
.
÷÷ 
Rows
÷÷ 
.
÷÷ 
Add
÷÷ 
(
÷÷  
row
÷÷  #
)
÷÷# $
;
÷÷$ %
}
◊◊ 
try
ŸŸ 
{
⁄⁄ 
using
€€ 
(
€€ 
var
€€ 
copy
€€ #
=
€€$ %
new
€€& )
SqlBulkCopy
€€* 5
(
€€5 6
_connection
€€6 A
.
€€A B
ConnectionString
€€B R
)
€€R S
)
€€S T
{
‹‹ 
foreach
›› 
(
››  !

DataColumn
››! +
item
››, 0
in
››1 3
dt
››4 6
.
››6 7
Columns
››7 >
)
››> ?
copy
ﬁﬁ  
.
ﬁﬁ  !
ColumnMappings
ﬁﬁ! /
.
ﬁﬁ/ 0
Add
ﬁﬁ0 3
(
ﬁﬁ3 4
item
ﬁﬁ4 8
.
ﬁﬁ8 9

ColumnName
ﬁﬁ9 C
,
ﬁﬁC D
item
ﬁﬁE I
.
ﬁﬁI J

ColumnName
ﬁﬁJ T
)
ﬁﬁT U
;
ﬁﬁU V
copy
‡‡ 
.
‡‡ 
BulkCopyTimeout
‡‡ ,
=
‡‡- .
$num
‡‡/ 9
;
‡‡9 :
copy
·· 
.
·· "
DestinationTableName
·· 1
=
··2 3
	tableName
··4 =
;
··= >
copy
‚‚ 
.
‚‚ 
WriteToServer
‚‚ *
(
‚‚* +
dt
‚‚+ -
)
‚‚- .
;
‚‚. /
}
„„ 
}
‰‰ 
catch
ÂÂ 
(
ÂÂ 
	Exception
ÂÂ  
ex
ÂÂ! #
)
ÂÂ# $
{
ÊÊ 
return
ÁÁ 
new
ÁÁ 
ResultStatus
ÁÁ +
{
ËË 
message
ÈÈ 
=
ÈÈ  !
$str
ÈÈ" 4
+
ÈÈ5 6
ex
ÈÈ7 9
,
ÈÈ9 :
result
ÍÍ 
=
ÍÍ  
false
ÍÍ! &
}
ÎÎ 
;
ÎÎ 
}
ÏÏ 
}
ÌÌ 
return
ÓÓ 
new
ÓÓ 
ResultStatus
ÓÓ #
(
ÓÓ# $
)
ÓÓ$ %
{
ÓÓ& '
message
ÓÓ( /
=
ÓÓ0 1
$str
ÓÓ2 8
,
ÓÓ8 9
result
ÓÓ: @
=
ÓÓA B
true
ÓÓC G
}
ÓÓH I
;
ÓÓI J
}
ÔÔ 	
public
ÒÒ 
DbTransaction
ÒÒ 
BeginTransaction
ÒÒ -
(
ÒÒ- .
)
ÒÒ. /
{
ÚÚ 	
if
ÛÛ 
(
ÛÛ 
_connection
ÛÛ 
.
ÛÛ 
State
ÛÛ !
!=
ÛÛ" $
ConnectionState
ÛÛ% 4
.
ÛÛ4 5
Open
ÛÛ5 9
)
ÛÛ9 :
_connection
ÙÙ 
.
ÙÙ 
Open
ÙÙ  
(
ÙÙ  !
)
ÙÙ! "
;
ÙÙ" #
_transaction
ıı 
=
ıı 
_connection
ıı &
.
ıı& '
BeginTransaction
ıı' 7
(
ıı7 8
)
ıı8 9
;
ıı9 :
return
ˆˆ 
_transaction
ˆˆ 
;
ˆˆ  
}
˜˜ 	
public
˘˘ 
void
˘˘ 
Close
˘˘ 
(
˘˘ 
)
˘˘ 
{
˙˙ 	
if
˚˚ 
(
˚˚ 
_connection
˚˚ 
.
˚˚ 
State
˚˚ !
!=
˚˚" $
ConnectionState
˚˚% 4
.
˚˚4 5
Closed
˚˚5 ;
)
˚˚; <
_connection
¸¸ 
.
¸¸ 
Close
¸¸ !
(
¸¸! "
)
¸¸" #
;
¸¸# $
}
˝˝ 	
private
ˇˇ 
static
ˇˇ 
bool
ˇˇ 
IsAnonymous
ˇˇ '
(
ˇˇ' (
Type
ˇˇ( ,
type
ˇˇ- 1
)
ˇˇ1 2
{
ÄÄ 	
if
ÅÅ 
(
ÅÅ 
type
ÅÅ 
.
ÅÅ 
IsGenericType
ÅÅ "
)
ÅÅ" #
{
ÇÇ 
var
ÉÉ 
d
ÉÉ 
=
ÉÉ 
type
ÉÉ 
.
ÉÉ &
GetGenericTypeDefinition
ÉÉ 5
(
ÉÉ5 6
)
ÉÉ6 7
;
ÉÉ7 8
if
ÑÑ 
(
ÑÑ 
d
ÑÑ 
.
ÑÑ 
IsClass
ÑÑ 
&&
ÑÑ  
d
ÑÑ! "
.
ÑÑ" #
IsSealed
ÑÑ# +
&&
ÑÑ, .
d
ÑÑ/ 0
.
ÑÑ0 1

Attributes
ÑÑ1 ;
.
ÑÑ; <
HasFlag
ÑÑ< C
(
ÑÑC D
TypeAttributes
ÑÑD R
.
ÑÑR S
	NotPublic
ÑÑS \
)
ÑÑ\ ]
)
ÑÑ] ^
{
ÖÖ 
var
ÜÜ 

attributes
ÜÜ "
=
ÜÜ# $
d
ÜÜ% &
.
ÜÜ& '!
GetCustomAttributes
ÜÜ' :
(
ÜÜ: ;
typeof
ÜÜ; A
(
ÜÜA B(
CompilerGeneratedAttribute
ÜÜB \
)
ÜÜ\ ]
,
ÜÜ] ^
false
ÜÜ_ d
)
ÜÜd e
;
ÜÜe f
if
áá 
(
áá 

attributes
áá "
!=
áá# %
null
áá& *
&&
áá+ -

attributes
áá. 8
.
áá8 9
Length
áá9 ?
>
áá@ A
$num
ááB C
)
ááC D
{
àà 
return
ââ 
true
ââ #
;
ââ# $
}
ää 
}
ãã 
}
åå 
return
çç 
false
çç 
;
çç 
}
éé 	
private
ëë 
string
ëë 
WriteLog
ëë 
(
ëë  
string
ëë  &
command
ëë' .
,
ëë. /
QueryParameter
ëë0 >
[
ëë> ?
]
ëë? @

parameters
ëëA K
)
ëëK L
{
íí 	
try
ìì 
{
îî 
foreach
ïï 
(
ïï 
var
ïï 
item
ïï !
in
ïï" $

parameters
ïï% /
)
ïï/ 0
{
ññ 
var
óó 
regexm
óó 
=
óó  
new
óó! $
Regex
óó% *
(
óó* +
Regex
óó+ 0
.
óó0 1
Escape
óó1 7
(
óó7 8
item
óó8 <
.
óó< =
Name
óó= A
)
óóA B
)
óóB C
;
óóC D
command
òò 
=
òò 
regexm
òò $
.
òò$ %
Replace
òò% ,
(
òò, -
command
òò- 4
,
òò4 5
(
òò6 7
item
òò7 ;
.
òò; <
Value
òò< A
==
òòB D
null
òòE I
?
òòJ K
$str
òòL W
:
òòX Y
string
òòZ `
.
òò` a
Format
òòa g
(
òòg h
$str
òòh o
,
òòo p
item
òòq u
.
òòu v
Value
òòv {
)
òò{ |
)
òò| }
,
òò} ~
$numòò Ä
)òòÄ Å
;òòÅ Ç
}
ôô 
}
öö 
catch
õõ 
{
õõ 
}
õõ 
return
ùù 
command
ùù 
;
ùù 
}
ûû 	
private
¢¢ 

SqlCommand
¢¢ 

GetCommand
¢¢ %
(
¢¢% &
Query
¢¢& +
query
¢¢, 1
)
¢¢1 2
{
££ 	
if
•• 
(
•• 
_connection
•• 
.
•• 
State
•• !
!=
••" $
ConnectionState
••% 4
.
••4 5
Open
••5 9
)
••9 :
{
¶¶ 
_connection
ßß 
.
ßß 
Open
ßß  
(
ßß  !
)
ßß! "
;
ßß" #
}
®® 
var
™™ 
cmd
™™ 
=
™™ 
_connection
™™ !
.
™™! "
CreateCommand
™™" /
(
™™/ 0
)
™™0 1
;
™™1 2
if
´´ 
(
´´ 
_transaction
´´ 
!=
´´ 
null
´´  $
&&
´´% '
_transaction
´´( 4
.
´´4 5

Connection
´´5 ?
!=
´´@ B
null
´´C G
)
´´G H
{
¨¨ 
cmd
≠≠ 
.
≠≠ 
Transaction
≠≠ 
=
≠≠  !
_transaction
≠≠" .
;
≠≠. /
}
ÆÆ 
cmd
∞∞ 
.
∞∞ 
CommandTimeout
∞∞ 
=
∞∞  
$num
∞∞! )
;
∞∞) *
cmd
±± 
.
±± 
CommandText
±± 
=
±± 
query
±± #
.
±±# $
Command
±±$ +
;
±±+ ,
if
≥≥ 
(
≥≥ 
query
≥≥ 
.
≥≥ 

Parameters
≥≥  
!=
≥≥! #
null
≥≥$ (
)
≥≥( )
{
¥¥ 
foreach
µµ 
(
µµ 
var
µµ 
	parameter
µµ &
in
µµ' )
query
µµ* /
.
µµ/ 0

Parameters
µµ0 :
)
µµ: ;
{
∂∂ 
cmd
∑∑ 
.
∑∑ 

Parameters
∑∑ "
.
∑∑" #
AddWithValue
∑∑# /
(
∑∑/ 0
	parameter
∑∑0 9
.
∑∑9 :
Name
∑∑: >
,
∑∑> ?
	parameter
∑∑@ I
.
∑∑I J
Value
∑∑J O
)
∑∑O P
;
∑∑P Q
}
∏∏ 
}
ππ 
return
ªª 
cmd
ªª 
;
ªª 
}
ΩΩ 	
}
øø 
}¿¿ º˚
üD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\DataBaseHelper\MsSqlHelper\MssqlTableCreator.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Database %
.% &
Mssql& +
{ 
public 

class 
MssqlTableCreator "
:# $
ITableCreator% 2
{ 
IQueryBuilder		 
_builder		 
;		 
IQueryExecutor

 
	_executor

  
;

  !
ITypeMapper 
_typeMapper 
;  
public 
MssqlTableCreator  
(  !
IQueryBuilder! .
builder/ 6
,6 7
IQueryExecutor8 F
executorG O
,O P
ITypeMapperQ \

typeMapper] g
)g h
: 
base 
( 
) 
{ 	
_builder 
= 
builder 
; 
	_executor 
= 
executor  
;  !
_typeMapper 
= 

typeMapper $
;$ %
} 	
public 
ResultStatus 
Create "
(" #
	TableInfo# ,
	tableInfo- 6
)6 7
{ 	
DbTransaction 
transaction %
=& '
null( ,
;, -
var 
opentransaction 
=  !
	_executor" +
.+ ,
IsTransactionOpen, =
;= >
if 
( 
! 
opentransaction  
)  !
transaction 
= 
	_executor '
.' (
BeginTransaction( 8
(8 9
)9 :
;: ;
try 
{ 
Query 
query 
= 
null "
;" #
ResultStatus 
result #
=$ %
null& *
;* +
SetDefaultFunctions!! #
(!!# $
	tableInfo!!$ -
)!!- .
;!!. /
query"" 
="" 
_builder""  
.""  !
ConvertToQuery""! /
(""/ 0
$str	""0 Ñ
,
""Ñ Ö
	tableInfo
""Ü è
.
""è ê
	TableName
""ê ô
)
""ô ö
;
""ö õ
var## 

tableExits## 
=##  
	_executor##! *
.##* +
ExecuteScaler##+ 8
<##8 9
bool##9 =
>##= >
(##> ?
query##? D
)##D E
;##E F
if$$ 
($$ 

tableExits$$ 
)$$ 
{%% 
if&& 
(&& 
!&& 
opentransaction&& (
)&&( )
transaction'' #
.''# $
Commit''$ *
(''* +
)''+ ,
;'', -
return(( 
new(( 
ResultStatus(( +
{((, -
result((. 4
=((5 6
true((7 ;
,((; <
message((= D
=((E F
$str((G Y
}((Z [
;(([ \
})) 
var++ 
columns++ 
=++ 
	tableInfo++ '
.++' (
Columns++( /
.++/ 0
Select++0 6
(++6 7
a++7 8
=>++9 ;
string,,$ *
.,,* +
Format,,+ 1
(,,1 2
$str,,2 B
,,,B C
a--, -
.--- .

ColumnName--. 8
,--8 9
_typeMapper.., 7
...7 8

GetSqlType..8 B
(..B C
a..C D
...D E
Type..E I
,..I J
a..K L
...L M
Length..M S
)..S T
,..T U
a//, -
.//- .
AutoIncrement//. ;
!=//< >
null//? C
?//D E
string000 6
.006 7
Format007 =
(00= >
$str00> Z
,00Z [
a00\ ]
.00] ^
AutoIncrement00^ k
.00k l
Start00l q
,00q r
a00s t
.00t u
AutoIncrement	00u Ç
.
00Ç É
	Increment
00É å
)
00å ç
:
00é è
(110 1
	tableInfo111 :
.11: ;

PrimaryKey11; E
.11E F
Contains11F N
(11N O
a11O P
.11P Q

ColumnName11Q [
)11[ \
|11] ^
a11_ `
.11` a
NotNull11a h
?11i j
$str11k u
:11v w
$str11x ~
)11~ 
)	11 Ä
)
11Ä Å
;
11Å Ç
var33 
pk33 
=33 
string33 
.33  
Join33  $
(33$ %
$str33% (
,33( )
	tableInfo33* 3
.333 4

PrimaryKey334 >
.33> ?
Select33? E
(33E F
a33F G
=>33H J
string33K Q
.33Q R
Format33R X
(33X Y
$str33Y `
,33` a
a33b c
)33c d
)33d e
)33e f
;33f g
query44 
=44 
new44 
Query44 !
{44" #
Command44$ +
=44, -
string44. 4
.444 5
Format445 ;
(44; <
$str44< e
,44e f
string44g m
.44m n
Join44n r
(44r s
$str44s v
,44v w
columns44x 
)	44 Ä
,
44Ä Å
	tableInfo
44Ç ã
.
44ã å
	TableName
44å ï
,
44ï ñ
pk
44ó ô
)
44ô ö
}
44õ ú
;
44ú ù
result55 
=55 
	_executor55 "
.55" #
ExecuteNonQuery55# 2
(552 3
query553 8
)558 9
;559 :
if66 
(66 
!66 
result66 
.66 
result66 "
)66" #
throw77 
new77 !
QueryExecuteException77 3
(773 4!
QueryExecuteException774 I
.77I J
ExceptionTypes77J X
.77X Y 
TableCreateException77Y m
,77m n
result77o u
.77u v
message77v }
)77} ~
;77~ 
if:: 
(:: 
	tableInfo:: 
.:: 

PrimaryKey:: (
.::( )
Count::) .
>::/ 0
$num::1 2
)::2 3
{;; 
var<< 
columnsString<< %
=<<& '
string<<( .
.<<. /
Join<</ 3
(<<3 4
$str<<4 7
,<<7 8
	tableInfo<<9 B
.<<B C

PrimaryKey<<C M
.<<M N
Select<<N T
(<<T U
a<<U V
=><<W Y
string<<Z `
.<<` a
Format<<a g
(<<g h
$str<<h s
,<<s t
a<<u v
)<<v w
)<<w x
.<<x y
ToArray	<<y Ä
(
<<Ä Å
)
<<Å Ç
)
<<Ç É
;
<<É Ñ
query== 
=== 
new== 
Query==  %
{==& '
Command==( /
===0 1
string==2 8
.==8 9
Format==9 ?
(==? @
$str	==@ É
,
==É Ñ
	tableInfo
==Ö é
.
==é è
	TableName
==è ò
,
==ò ô
columnsString
==ö ß
)
==ß ®
}
==© ™
;
==™ ´
result>> 
=>> 
	_executor>> &
.>>& '
ExecuteNonQuery>>' 6
(>>6 7
query>>7 <
)>>< =
;>>= >
if?? 
(?? 
!?? 
result?? 
.??  
result??  &
)??& '
throw@@ 
new@@ !!
QueryExecuteException@@" 7
(@@7 8!
QueryExecuteException@@8 M
.@@M N
ExceptionTypes@@N \
.@@\ ] 
TableCreateException@@] q
,@@q r
result@@s y
.@@y z
message	@@z Å
)
@@Å Ç
;
@@Ç É
}AA 
foreachDD 
(DD 
varDD 
colDD  
inDD! #
	tableInfoDD$ -
.DD- .
ColumnsDD. 5
.DD5 6
WhereDD6 ;
(DD; <
aDD< =
=>DD> @
aDDA B
.DDB C
DefaultDDC J
!=DDK M
nullDDN R
)DDR S
)DDS T
{EE 
queryFF 
=FF 
newFF 
QueryFF  %
{FF& '
CommandFF( /
=FF0 1
stringFF2 8
.FF8 9
FormatFF9 ?
(FF? @
$str	FF@ ç
,
FFç é
	tableInfo
FFè ò
.
FFò ô
	TableName
FFô ¢
,
FF¢ £
col
FF§ ß
.
FFß ®

ColumnName
FF® ≤
,
FF≤ ≥
col
FF¥ ∑
.
FF∑ ∏
Default
FF∏ ø
.
FFø ¿
Text
FF¿ ƒ
)
FFƒ ≈
}
FF∆ «
;
FF« »
resultGG 
=GG 
	_executorGG &
.GG& '
ExecuteNonQueryGG' 6
(GG6 7
queryGG7 <
)GG< =
;GG= >
ifHH 
(HH 
!HH 
resultHH 
.HH  
resultHH  &
)HH& '
throwII 
newII !!
QueryExecuteExceptionII" 7
(II7 8!
QueryExecuteExceptionII8 M
.IIM N
ExceptionTypesIIN \
.II\ ] 
TableCreateExceptionII] q
,IIq r
resultIIs y
.IIy z
message	IIz Å
)
IIÅ Ç
;
IIÇ É
}JJ 
foreachMM 
(MM 
varMM 
indexMM "
inMM# %
	tableInfoMM& /
.MM/ 0
IndexesMM0 7
)MM7 8
{NN 
indexOO 
.OO 
NameOO 
=OO  
stringOO! '
.OO' (
FormatOO( .
(OO. /
$strOO/ <
,OO< =
	tableInfoOO> G
.OOG H
	TableNameOOH Q
,OOQ R
stringOOS Y
.OOY Z
JoinOOZ ^
(OO^ _
$strOO_ b
,OOb c
indexOOd i
.OOi j
ColumnsOOj q
)OOq r
)OOr s
;OOs t
varPP 
	columTextPP !
=PP" #
stringPP$ *
.PP* +
JoinPP+ /
(PP/ 0
$strPP0 3
,PP3 4
indexPP5 :
.PP: ;
ColumnsPP; B
)PPB C
;PPC D
queryQQ 
=QQ 
newQQ 
QueryQQ  %
{QQ& '
CommandQQ( /
=QQ0 1
stringQQ2 8
.QQ8 9
FormatQQ9 ?
(QQ? @
$strQQ@ c
,QQc d
indexQQe j
.QQj k
NameQQk o
,QQo p
	tableInfoQQq z
.QQz {
	TableName	QQ{ Ñ
,
QQÑ Ö
	columText
QQÜ è
,
QQè ê
index
QQë ñ
.
QQñ ó
IsUnique
QQó ü
?
QQ† °
$str
QQ¢ ™
:
QQ´ ¨
$str
QQ≠ Ø
)
QQØ ∞
}
QQ± ≤
;
QQ≤ ≥
resultRR 
=RR 
	_executorRR &
.RR& '
ExecuteNonQueryRR' 6
(RR6 7
queryRR7 <
)RR< =
;RR= >
ifSS 
(SS 
!SS 
resultSS 
.SS  
resultSS  &
)SS& '
throwTT 
newTT !!
QueryExecuteExceptionTT" 7
(TT7 8!
QueryExecuteExceptionTT8 M
.TTM N
ExceptionTypesTTN \
.TT\ ] 
TableCreateExceptionTT] q
,TTq r
resultTTs y
.TTy z
message	TTz Å
)
TTÅ Ç
;
TTÇ É
}UU 
ifWW 
(WW 
!WW 
opentransactionWW $
)WW$ %
transactionXX 
.XX  
CommitXX  &
(XX& '
)XX' (
;XX( )
returnYY 
newYY 
ResultStatusYY '
{YY( )
resultYY* 0
=YY1 2
trueYY3 7
}YY8 9
;YY9 :
}ZZ 
catch[[ 
([[ 
	Exception[[ 
ex[[ 
)[[  
{\\ 
if]] 
(]] 
!]] 
opentransaction]] $
)]]$ %
transaction^^ 
.^^  
Rollback^^  (
(^^( )
)^^) *
;^^* +
return__ 
new__ 
ResultStatus__ '
{__( )
result__* 0
=__1 2
false__3 8
,__8 9
message__: A
=__B C
ex__D F
.__F G
Message__G N
}__O P
;__P Q
}`` 
}aa 	
publiccc 
ResultStatuscc 
Altercc !
(cc! "
	TableInfocc" +
	tableInfocc, 5
)cc5 6
{dd 	
DbTransactionee 
transactionee %
=ee& '
nullee( ,
;ee, -
varff 
opentransactionff 
=ff  !
	_executorff" +
.ff+ ,
IsTransactionOpenff, =
;ff= >
ifgg 
(gg 
!gg 
opentransactiongg  
)gg  !
transactionhh 
=hh 
	_executorhh '
.hh' (
BeginTransactionhh( 8
(hh8 9
)hh9 :
;hh: ;
tryjj 
{kk 
Queryll 
queryll 
=ll 
nullll "
;ll" #
ResultStatusmm 
resultmm #
=mm$ %
nullmm& *
;mm* +
SetDefaultFunctionsoo #
(oo# $
	tableInfooo$ -
)oo- .
;oo. /
querypp 
=pp 
_builderpp  
.pp  !
ConvertToQuerypp! /
(pp/ 0
$str	pp0 Ñ
,
ppÑ Ö
	tableInfo
ppÜ è
.
ppè ê
	TableName
ppê ô
)
ppô ö
;
ppö õ
varqq 

tableExitsqq 
=qq  
	_executorqq! *
.qq* +
ExecuteScalerqq+ 8
<qq8 9
boolqq9 =
>qq= >
(qq> ?
queryqq? D
)qqD E
;qqE F
ifrr 
(rr 

tableExitsrr 
)rr 
{ss 
vartt 
columnstt 
=tt  !
	tableInfott" +
.tt+ ,
Columnstt, 3
.tt3 4
Selecttt4 :
(tt: ;
att; <
=>tt= ?
stringuu$ *
.uu* +
Formatuu+ 1
(uu1 2
$struu2 B
,uuB C
avv, -
.vv- .

ColumnNamevv. 8
,vv8 9
_typeMapperww, 7
.ww7 8

GetSqlTypeww8 B
(wwB C
awwC D
.wwD E
TypewwE I
,wwI J
awwK L
.wwL M
LengthwwM S
)wwS T
,wwT U
axx, -
.xx- .
AutoIncrementxx. ;
!=xx< >
nullxx? C
?xxD E
stringyy0 6
.yy6 7
Formatyy7 =
(yy= >
$stryy> Z
,yyZ [
ayy\ ]
.yy] ^
AutoIncrementyy^ k
.yyk l
Startyyl q
,yyq r
ayys t
.yyt u
AutoIncrement	yyu Ç
.
yyÇ É
	Increment
yyÉ å
)
yyå ç
:
yyé è
(zz0 1
	tableInfozz1 :
.zz: ;

PrimaryKeyzz; E
.zzE F
ContainszzF N
(zzN O
azzO P
.zzP Q

ColumnNamezzQ [
)zz[ \
?zz] ^
$strzz_ i
:zzj k
$strzzl r
)zzr s
)zzs t
)zzt u
;zzu v
var|| 
pk|| 
=|| 
string|| #
.||# $
Join||$ (
(||( )
$str||) ,
,||, -
	tableInfo||. 7
.||7 8

PrimaryKey||8 B
.||B C
Select||C I
(||I J
a||J K
=>||L N
string||O U
.||U V
Format||V \
(||\ ]
$str||] d
,||d e
a||f g
)||g h
)||h i
)||i j
;||j k
var~~ 
schemaColoumbs~~ &
=~~' (
	GetSchema~~) 2
(~~2 3
	tableInfo~~3 <
.~~< =
	TableName~~= F
)~~F G
;~~G H
var
ÄÄ 
k
ÄÄ 
=
ÄÄ 
	tableInfo
ÄÄ %
.
ÄÄ% &
Columns
ÄÄ& -
.
ÄÄ- .
Where
ÄÄ. 3
(
ÄÄ3 4
t2
ÄÄ4 6
=>
ÄÄ7 9
!
ÄÄ: ;
schemaColoumbs
ÄÄ; I
.
ÄÄI J
Columns
ÄÄJ Q
.
ÄÄQ R
Any
ÄÄR U
(
ÄÄU V
t1
ÄÄV X
=>
ÄÄY [
t2
ÄÄ\ ^
.
ÄÄ^ _

ColumnName
ÄÄ_ i
.
ÄÄi j
Contains
ÄÄj r
(
ÄÄr s
t1
ÄÄs u
.
ÄÄu v

ColumnNameÄÄv Ä
)ÄÄÄ Å
)ÄÄÅ Ç
)ÄÄÇ É
;ÄÄÉ Ñ
foreach
ÇÇ 
(
ÇÇ 
var
ÇÇ  
col
ÇÇ! $
in
ÇÇ% '
	tableInfo
ÇÇ( 1
.
ÇÇ1 2
Columns
ÇÇ2 9
.
ÇÇ9 :
Where
ÇÇ: ?
(
ÇÇ? @
t2
ÇÇ@ B
=>
ÇÇC E
!
ÇÇF G
schemaColoumbs
ÇÇG U
.
ÇÇU V
Columns
ÇÇV ]
.
ÇÇ] ^
Any
ÇÇ^ a
(
ÇÇa b
t1
ÇÇb d
=>
ÇÇe g
t2
ÇÇh j
.
ÇÇj k

ColumnName
ÇÇk u
.
ÇÇu v
Contains
ÇÇv ~
(
ÇÇ~ 
t1ÇÇ Å
.ÇÇÅ Ç

ColumnNameÇÇÇ å
)ÇÇå ç
)ÇÇç é
)ÇÇé è
)ÇÇè ê
{
ÉÉ 
query
ÑÑ 
=
ÑÑ 
new
ÑÑ  #
Query
ÑÑ$ )
{
ÑÑ* +
Command
ÑÑ, 3
=
ÑÑ4 5
string
ÑÑ6 <
.
ÑÑ< =
Format
ÑÑ= C
(
ÑÑC D
$str
ÑÑD i
,
ÑÑi j
	tableInfo
ÑÑk t
.
ÑÑt u
	TableName
ÑÑu ~
,
ÑÑ~ 
colÑÑÄ É
.ÑÑÉ Ñ

ColumnNameÑÑÑ é
,ÑÑé è
_typeMapperÑÑê õ
.ÑÑõ ú

GetSqlTypeÑÑú ¶
(ÑÑ¶ ß
colÑÑß ™
.ÑÑ™ ´
TypeÑÑ´ Ø
)ÑÑØ ∞
)ÑÑ∞ ±
}ÑÑ± ≤
;ÑÑ≤ ≥
result
ÖÖ 
=
ÖÖ  
	_executor
ÖÖ! *
.
ÖÖ* +
ExecuteNonQuery
ÖÖ+ :
(
ÖÖ: ;
query
ÖÖ; @
)
ÖÖ@ A
;
ÖÖA B
if
ÜÜ 
(
ÜÜ 
!
ÜÜ 
result
ÜÜ #
.
ÜÜ# $
result
ÜÜ$ *
)
ÜÜ* +
throw
áá !
new
áá" %#
QueryExecuteException
áá& ;
(
áá; <#
QueryExecuteException
áá< Q
.
ááQ R
ExceptionTypes
ááR `
.
áá` a"
TableCreateException
ááa u
,
ááu v
result
ááw }
.
áá} ~
messageáá~ Ö
)ááÖ Ü
;ááÜ á
if
àà 
(
àà 
result
àà "
.
àà" #
result
àà# )
&&
àà* ,
col
àà- 0
.
àà0 1
Default
àà1 8
!=
àà9 ;
null
àà< @
)
àà@ A
{
ââ 
query
ää !
=
ää" #
new
ää$ '
Query
ää( -
{
ää. /
Command
ää0 7
=
ää8 9
string
ää: @
.
ää@ A
Format
ääA G
(
ääG H
$strääH ï
,ääï ñ
	tableInfoääó †
.ää† °
	TableNameää° ™
,ää™ ´
colää¨ Ø
.ääØ ∞

ColumnNameää∞ ∫
,ää∫ ª
colääº ø
.ääø ¿
Defaultää¿ «
.ää« »
Textää» Ã
)ääÃ Õ
}ääŒ œ
;ääœ –
result
ãã "
=
ãã# $
	_executor
ãã% .
.
ãã. /
ExecuteNonQuery
ãã/ >
(
ãã> ?
query
ãã? D
)
ããD E
;
ããE F
if
åå 
(
åå  
!
åå  !
result
åå! '
.
åå' (
result
åå( .
)
åå. /
throw
çç  %
new
çç& )#
QueryExecuteException
çç* ?
(
çç? @#
QueryExecuteException
çç@ U
.
ççU V
ExceptionTypes
ççV d
.
ççd e"
TableCreateException
ççe y
,
ççy z
resultçç{ Å
.ççÅ Ç
messageççÇ â
)ççâ ä
;ççä ã
}
éé 
}
èè 
if
ëë 
(
ëë 
!
ëë 
opentransaction
ëë (
)
ëë( )
transaction
íí #
.
íí# $
Commit
íí$ *
(
íí* +
)
íí+ ,
;
íí, -
return
ìì 
new
ìì 
ResultStatus
ìì +
{
ìì, -
result
ìì. 4
=
ìì5 6
true
ìì7 ;
}
ìì< =
;
ìì= >
}
îî 
else
ññ 
{
óó 
if
òò 
(
òò 
!
òò 
opentransaction
òò (
)
òò( )
transaction
ôô #
.
ôô# $
Commit
ôô$ *
(
ôô* +
)
ôô+ ,
;
ôô, -
return
öö 
new
öö 
ResultStatus
öö +
{
öö, -
result
öö. 4
=
öö5 6
true
öö7 ;
,
öö; <
message
öö= D
=
ööE F
$str
ööG \
}
öö] ^
;
öö^ _
}
õõ 
}
úú 
catch
ùù 
(
ùù 
	Exception
ùù 
ex
ùù 
)
ùù  
{
ûû 
if
üü 
(
üü 
!
üü 
opentransaction
üü $
)
üü$ %
transaction
†† 
.
††  
Rollback
††  (
(
††( )
)
††) *
;
††* +
return
°° 
new
°° 
ResultStatus
°° '
{
°°( )
result
°°* 0
=
°°1 2
false
°°3 8
,
°°8 9
message
°°: A
=
°°B C
ex
°°D F
.
°°F G
Message
°°G N
}
°°O P
;
°°P Q
}
¢¢ 
}
££ 	
public
•• 
	TableInfo
•• 
	GetSchema
•• "
(
••" #
string
••# )
	tableName
••* 3
,
••3 4
bool
••5 9

onlyColums
••: D
=
••E F
false
••G L
)
••L M
{
¶¶ 	
Query
ßß 
query
ßß 
=
ßß 
null
ßß 
;
ßß 
var
®® 
	tableInfo
®® 
=
®® 
new
®® 
	TableInfo
®®  )
(
®®) *
)
®®* +
{
®®, -
	TableName
®®. 7
=
®®8 9
	tableName
®®: C
}
®®D E
;
®®E F
query
™™ 
=
™™ 
_builder
™™ 
.
™™ 
ConvertToQuery
™™ +
(
™™+ ,
$str™™, ∆
,™™∆ «
	tableName™™» —
)™™— “
;™™“ ”
var
´´ 
columns
´´ 
=
´´ 
	_executor
´´ #
.
´´# $
ExecuteReader
´´$ 1
(
´´1 2
query
´´2 7
)
´´7 8
;
´´8 9
if
¨¨ 
(
¨¨ 
columns
¨¨ 
==
¨¨ 
null
¨¨ 
||
¨¨  "
columns
¨¨# *
.
¨¨* +
Count
¨¨+ 0
(
¨¨0 1
)
¨¨1 2
==
¨¨3 5
$num
¨¨6 7
)
¨¨7 8
return
¨¨9 ?
null
¨¨@ D
;
¨¨D E
	tableInfo
≠≠ 
.
≠≠ 
Columns
≠≠ 
=
≠≠ 
columns
≠≠  '
.
≠≠' (
Select
≠≠( .
(
≠≠. /
a
≠≠/ 0
=>
≠≠1 3
new
≠≠4 7
TableColumn
≠≠8 C
{
ÆÆ 

ColumnName
ØØ 
=
ØØ 
a
ØØ 
[
ØØ 
$str
ØØ ,
]
ØØ, -
.
ØØ- .
ToString
ØØ. 6
(
ØØ6 7
)
ØØ7 8
,
ØØ8 9
Type
∞∞ 
=
∞∞ 
_typeMapper
∞∞ "
.
∞∞" #
GetType
∞∞# *
(
∞∞* +
a
∞∞+ ,
[
∞∞, -
$str
∞∞- 8
]
∞∞8 9
.
∞∞9 :
ToString
∞∞: B
(
∞∞B C
)
∞∞C D
)
∞∞D E
,
∞∞E F
Length
±± 
=
±± 
a
±± 
[
±± 
$str
±± 5
]
±±5 6
!=
±±7 9
null
±±: >
?
±±? @
(
±±A B
int
±±B E
?
±±E F
)
±±F G
a
±±G H
[
±±H I
$str
±±I c
]
±±c d
:
±±e f
null
±±g k
,
±±k l
Default
≤≤ 
=
≤≤ $
SqlFunctionsFromString
≤≤ 0
(
≤≤0 1
a
≤≤1 2
[
≤≤2 3
$str
≤≤3 C
]
≤≤C D
)
≤≤D E
}
≥≥ 
)
≥≥ 
.
≥≥ 
ToList
≥≥ 
(
≥≥ 
)
≥≥ 
;
≥≥ 
query
∂∂ 
=
∂∂ 
_builder
∂∂ 
.
∂∂ 
ConvertToQuery
∂∂ +
(
∂∂+ ,
$str
∂º, 
,
ºº  
	tableName
ºº! *
)
ºº* +
;
ºº+ ,
var
ΩΩ 
indexes
ΩΩ 
=
ΩΩ 
	_executor
ΩΩ #
.
ΩΩ# $
ExecuteReader
ΩΩ$ 1
(
ΩΩ1 2
query
ΩΩ2 7
)
ΩΩ7 8
.
ΩΩ8 9
ToArray
ΩΩ9 @
(
ΩΩ@ A
)
ΩΩA B
;
ΩΩB C
var
ææ 

primaryKey
ææ 
=
ææ 
indexes
ææ $
.
ææ$ %
Where
ææ% *
(
ææ* +
a
ææ+ ,
=>
ææ- /
(
ææ0 1
bool
ææ1 5
)
ææ5 6
a
ææ6 7
[
ææ7 8
$str
ææ8 H
]
ææH I
==
ææJ L
true
ææM Q
)
ææQ R
;
ææR S
	tableInfo
øø 
.
øø 

PrimaryKey
øø  
=
øø! "

primaryKey
øø# -
.
øø- .
Select
øø. 4
(
øø4 5
a
øø5 6
=>
øø7 9
a
øø: ;
[
øø; <
$str
øø< I
]
øøI J
)
øøJ K
.
øøK L
Cast
øøL P
<
øøP Q
string
øøQ W
>
øøW X
(
øøX Y
)
øøY Z
.
øøZ [
ToList
øø[ a
(
øøa b
)
øøb c
;
øøc d
var
¡¡ 
groups
¡¡ 
=
¡¡ 
indexes
¡¡  
.
¡¡  !
Where
¡¡! &
(
¡¡& '
a
¡¡' (
=>
¡¡) +
(
¡¡, -
bool
¡¡- 1
)
¡¡1 2
a
¡¡2 3
[
¡¡3 4
$str
¡¡4 D
]
¡¡D E
==
¡¡F H
false
¡¡I N
)
¡¡N O
.
¬¬ 
GroupBy
¬¬ 
(
¬¬ 
a
¬¬ 
=>
¬¬ 
new
¬¬ !
{
√√ 

table_name
ƒƒ 
=
ƒƒ  
a
ƒƒ! "
[
ƒƒ" #
$str
ƒƒ# /
]
ƒƒ/ 0
,
ƒƒ0 1
index_id
≈≈ 
=
≈≈ 
a
≈≈  
[
≈≈  !
$str
≈≈! +
]
≈≈+ ,
,
≈≈, -

index_name
∆∆ 
=
∆∆  
a
∆∆! "
[
∆∆" #
$str
∆∆# /
]
∆∆/ 0
,
∆∆0 1

index_type
«« 
=
««  
a
««! "
[
««" #
$str
««# /
]
««/ 0
,
««0 1
	type_desc
»» 
=
»» 
a
»»  !
[
»»! "
$str
»»" -
]
»»- .
,
»». /
is_primary_key
…… "
=
……# $
a
……% &
[
……& '
$str
……' 7
]
……7 8
,
……8 9
	is_unique
   
=
   
a
    !
[
  ! "
$str
  " -
]
  - .
}
ÀÀ 
)
ÀÀ 
.
ÀÀ 
ToArray
ÀÀ 
(
ÀÀ 
)
ÀÀ 
;
ÀÀ 
	tableInfo
ÕÕ 
.
ÕÕ 
Indexes
ÕÕ 
=
ÕÕ 
groups
ÕÕ  &
.
ÕÕ& '
Select
ÕÕ' -
(
ÕÕ- .
a
ÕÕ. /
=>
ÕÕ0 2
new
ÕÕ3 6

TableIndex
ÕÕ7 A
{
ŒŒ 
IsUnique
œœ 
=
œœ 
(
œœ 
bool
œœ  
)
œœ  !
a
œœ! "
.
œœ" #
Key
œœ# &
.
œœ& '
	is_unique
œœ' 0
,
œœ0 1
Columns
–– 
=
–– 
a
–– 
.
–– 
Select
–– "
(
––" #
b
––# $
=>
––% '
b
––( )
[
––) *
$str
––* 7
]
––7 8
)
––8 9
.
––9 :
Cast
––: >
<
––> ?
string
––? E
>
––E F
(
––F G
)
––G H
.
––H I
ToArray
––I P
(
––P Q
)
––Q R
}
—— 
)
—— 
.
—— 
ToList
—— 
(
—— 
)
—— 
;
—— 
return
”” 
	tableInfo
”” 
;
”” 
}
‘‘ 	
private
÷÷ 
void
÷÷ !
SetDefaultFunctions
÷÷ (
(
÷÷( )
	TableInfo
÷÷) 2
	tableInfo
÷÷3 <
)
÷÷< =
{
◊◊ 	
foreach
ÿÿ 
(
ÿÿ 
var
ÿÿ 
col
ÿÿ 
in
ÿÿ 
	tableInfo
ÿÿ  )
.
ÿÿ) *
Columns
ÿÿ* 1
.
ÿÿ1 2
Where
ÿÿ2 7
(
ÿÿ7 8
a
ÿÿ8 9
=>
ÿÿ: <
a
ÿÿ= >
.
ÿÿ> ?
Default
ÿÿ? F
!=
ÿÿG I
null
ÿÿJ N
)
ÿÿN O
)
ÿÿO P
if
ŸŸ 
(
ŸŸ 
col
ŸŸ 
.
ŸŸ 
Default
ŸŸ 
.
ŸŸ  
Text
ŸŸ  $
==
ŸŸ% '
null
ŸŸ( ,
)
ŸŸ, -
switch
⁄⁄ 
(
⁄⁄ 
col
⁄⁄ 
.
⁄⁄  
Default
⁄⁄  '
.
⁄⁄' (
Function
⁄⁄( 0
)
⁄⁄0 1
{
€€ 
case
‹‹ 
SqlFunctions
‹‹ )
.
‹‹) *
NEWID
‹‹* /
:
‹‹/ 0
col
›› 
.
››  
Default
››  '
.
››' (
Text
››( ,
=
››- .
$str
››/ 8
;
››8 9
break
ﬁﬁ !
;
ﬁﬁ! "
case
ﬂﬂ 
SqlFunctions
ﬂﬂ )
.
ﬂﬂ) *
GETDATE
ﬂﬂ* 1
:
ﬂﬂ1 2
col
‡‡ 
.
‡‡  
Default
‡‡  '
.
‡‡' (
Text
‡‡( ,
=
‡‡- .
$str
‡‡/ :
;
‡‡: ;
break
·· !
;
··! "
default
‚‚ 
:
‚‚  
break
„„ !
;
„„! "
}
‰‰ 
}
ÂÂ 	
private
ÁÁ  
ColumnDefaultValue
ÁÁ "$
SqlFunctionsFromString
ÁÁ# 9
(
ÁÁ9 :
object
ÁÁ: @
value
ÁÁA F
)
ÁÁF G
{
ËË 	
if
ÈÈ 
(
ÈÈ 
value
ÈÈ 
==
ÈÈ 
null
ÈÈ 
)
ÈÈ 
return
ÈÈ %
null
ÈÈ& *
;
ÈÈ* +
var
ÍÍ 
val
ÍÍ 
=
ÍÍ 
(
ÍÍ 
string
ÍÍ 
)
ÍÍ 
value
ÍÍ #
;
ÍÍ# $
if
ÎÎ 
(
ÎÎ 
val
ÎÎ 
.
ÎÎ 
Trim
ÎÎ 
(
ÎÎ 
)
ÎÎ 
.
ÎÎ 
ToLower
ÎÎ "
(
ÎÎ" #
)
ÎÎ# $
==
ÎÎ% '
$str
ÎÎ( 3
||
ÎÎ4 6
val
ÎÎ7 :
.
ÎÎ: ;
Trim
ÎÎ; ?
(
ÎÎ? @
)
ÎÎ@ A
.
ÎÎA B
ToLower
ÎÎB I
(
ÎÎI J
)
ÎÎJ K
==
ÎÎL N
$str
ÎÎO X
)
ÎÎX Y
return
ÏÏ 
SqlFunctions
ÏÏ #
.
ÏÏ# $
NEWID
ÏÏ$ )
;
ÏÏ) *
else
ÌÌ 
if
ÌÌ 
(
ÌÌ 
val
ÌÌ 
.
ÌÌ 
Trim
ÌÌ 
(
ÌÌ 
)
ÌÌ 
.
ÌÌ  
ToLower
ÌÌ  '
(
ÌÌ' (
)
ÌÌ( )
==
ÌÌ* ,
$str
ÌÌ- :
||
ÌÌ; =
val
ÌÌ> A
.
ÌÌA B
Trim
ÌÌB F
(
ÌÌF G
)
ÌÌG H
.
ÌÌH I
ToLower
ÌÌI P
(
ÌÌP Q
)
ÌÌQ R
==
ÌÌS U
$str
ÌÌV a
)
ÌÌa b
return
ÓÓ 
SqlFunctions
ÓÓ #
.
ÓÓ# $
GETDATE
ÓÓ$ +
;
ÓÓ+ ,
return
ÔÔ 
value
ÔÔ 
.
ÔÔ 
ToString
ÔÔ !
(
ÔÔ! "
)
ÔÔ" #
;
ÔÔ# $
}
 	
}
ÒÒ 
}ÚÚ ≥ú
ùD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\DataBaseHelper\MsSqlHelper\MssqlTypeMapper.cs
	namespace		 	
Infoline		
 
.		 
	Framework		 
.		 
Database		 %
.		% &
Mssql		& +
{

 
public 

class 
MssqlTypeMapper  
:! "
ITypeMapper# .
{ 
NetTopologySuite 
. 
IO 
. 
	WKBReader %

_wkbReader& 0
;0 1
static 

Dictionary 
< 
string  
,  !
Type" &
>& '

_sqlToCode( 2
=3 4
new5 8

Dictionary9 C
<C D
stringD J
,J K
TypeL P
>P Q
(Q R
)R S
;S T
static 

Dictionary 
< 
Type 
, 
string  &
>& '

_codeToSql( 2
=3 4
new5 8

Dictionary9 C
<C D
TypeD H
,H I
stringJ P
>P Q
(Q R
)R S
;S T
static 
MssqlTypeMapper 
( 
)  
{ 	

_sqlToCode 
. 
Add 
( 
$str #
,# $
typeof% +
(+ ,
Int64, 1
)1 2
)2 3
;3 4

_sqlToCode 
. 
Add 
( 
$str #
,# $
typeof% +
(+ ,
Byte, 0
[0 1
]1 2
)2 3
)3 4
;4 5

_sqlToCode 
. 
Add 
( 
$str  
,  !
typeof" (
(( )
Boolean) 0
)0 1
)1 2
;2 3

_sqlToCode 
. 
Add 
( 
$str !
,! "
typeof# )
() *
String* 0
)0 1
)1 2
;2 3

_sqlToCode 
. 
Add 
( 
$str !
,! "
typeof# )
() *
DateTime* 2
)2 3
)3 4
;4 5

_sqlToCode 
. 
Add 
( 
$str %
,% &
typeof' -
(- .
DateTime. 6
)6 7
)7 8
;8 9

_sqlToCode 
. 
Add 
( 
$str &
,& '
typeof( .
(. /
DateTime/ 7
)7 8
)8 9
;9 :

_sqlToCode 
. 
Add 
( 
$str +
,+ ,
typeof- 3
(3 4
DateTimeOffset4 B
)B C
)C D
;D E

_sqlToCode 
. 
Add 
( 
$str $
,$ %
typeof& ,
(, -
Decimal- 4
)4 5
)5 6
;6 7

_sqlToCode 
. 
Add 
( 
$str "
," #
typeof$ *
(* +
Double+ 1
)1 2
)2 3
;3 4

_sqlToCode 
. 
Add 
( 
$str "
," #
typeof$ *
(* +
Byte+ /
[/ 0
]0 1
)1 2
)2 3
;3 4

_sqlToCode 
. 
Add 
( 
$str  
,  !
typeof" (
(( )
Int32) .
). /
)/ 0
;0 1

_sqlToCode 
. 
Add 
( 
$str "
," #
typeof$ *
(* +
Decimal+ 2
)2 3
)3 4
;4 5

_sqlToCode   
.   
Add   
(   
$str   "
,  " #
typeof  $ *
(  * +
String  + 1
)  1 2
)  2 3
;  3 4

_sqlToCode!! 
.!! 
Add!! 
(!! 
$str!! "
,!!" #
typeof!!$ *
(!!* +
String!!+ 1
)!!1 2
)!!2 3
;!!3 4

_sqlToCode"" 
."" 
Add"" 
("" 
$str"" $
,""$ %
typeof""& ,
("", -
Decimal""- 4
)""4 5
)""5 6
;""6 7

_sqlToCode## 
.## 
Add## 
(## 
$str## %
,##% &
typeof##' -
(##- .
String##. 4
)##4 5
)##5 6
;##6 7

_sqlToCode$$ 
.$$ 
Add$$ 
($$ 
$str$$ !
,$$! "
typeof$$# )
($$) *
Single$$* 0
)$$0 1
)$$1 2
;$$2 3

_sqlToCode%% 
.%% 
Add%% 
(%% 
$str%% '
,%%' (
typeof%%) /
(%%/ 0
Byte%%0 4
[%%4 5
]%%5 6
)%%6 7
)%%7 8
;%%8 9

_sqlToCode&& 
.&& 
Add&& 
(&& 
$str&& *
,&&* +
typeof&&, 2
(&&2 3
DateTime&&3 ;
)&&; <
)&&< =
;&&= >

_sqlToCode'' 
.'' 
Add'' 
('' 
$str'' %
,''% &
typeof''' -
(''- .
Int16''. 3
)''3 4
)''4 5
;''5 6

_sqlToCode(( 
.(( 
Add(( 
((( 
$str(( '
,((' (
typeof(() /
(((/ 0
Decimal((0 7
)((7 8
)((8 9
;((9 :

_sqlToCode)) 
.)) 
Add)) 
()) 
$str)) !
,))! "
typeof))# )
())) *
String))* 0
)))0 1
)))1 2
;))2 3

_sqlToCode** 
.** 
Add** 
(** 
$str** !
,**! "
typeof**# )
(**) *
TimeSpan*** 2
)**2 3
)**3 4
;**4 5

_sqlToCode++ 
.++ 
Add++ 
(++ 
$str++ &
,++& '
typeof++( .
(++. /
Byte++/ 3
[++3 4
]++4 5
)++5 6
)++6 7
;++7 8

_sqlToCode,, 
.,, 
Add,, 
(,, 
$str,, $
,,,$ %
typeof,,& ,
(,,, -
Byte,,- 1
),,1 2
),,2 3
;,,3 4

_sqlToCode-- 
.-- 
Add-- 
(-- 
$str-- -
,--- .
typeof--/ 5
(--5 6
Guid--6 :
)--: ;
)--; <
;--< =

_sqlToCode.. 
... 
Add.. 
(.. 
$str.. &
,..& '
typeof..( .
(... /
Byte../ 3
[..3 4
]..4 5
)..5 6
)..6 7
;..7 8

_sqlToCode// 
.// 
Add// 
(// 
$str// $
,//$ %
typeof//& ,
(//, -
String//- 3
)//3 4
)//4 5
;//5 6

_sqlToCode00 
.00 
Add00 
(00 
$str00 &
,00& '
typeof00( .
(00. /
	IGeometry00/ 8
)008 9
)009 :
;00: ;

_sqlToCode11 
.11 
Add11 
(11 
$str11 %
,11% &
typeof11' -
(11- .
	IGeometry11. 7
)117 8
)118 9
;119 :

_codeToSql22 
.22 
Add22 
(22 
typeof22 !
(22! "
DateTimeOffset22" 0
)220 1
,221 2
$str223 C
)22C D
;22D E

_codeToSql33 
.33 
Add33 
(33 
typeof33 !
(33! "
DateTime33" *
)33* +
,33+ ,
$str33- 7
)337 8
;338 9

_codeToSql44 
.44 
Add44 
(44 
typeof44 !
(44! "
TimeSpan44" *
)44* +
,44+ ,
$str44- 3
)443 4
;444 5

_codeToSql55 
.55 
Add55 
(55 
typeof55 !
(55! "
byte55" &
[55& '
]55' (
)55( )
,55) *
$str55+ ;
)55; <
;55< =

_codeToSql66 
.66 
Add66 
(66 
typeof66 !
(66! "
string66" (
)66( )
,66) *
$str66+ 5
)665 6
;666 7

_codeToSql77 
.77 
Add77 
(77 
typeof77 !
(77! "
decimal77" )
)77) *
,77* +
$str77, 5
)775 6
;776 7

_codeToSql88 
.88 
Add88 
(88 
typeof88 !
(88! "
Single88" (
)88( )
,88) *
$str88+ 1
)881 2
;882 3

_codeToSql99 
.99 
Add99 
(99 
typeof99 !
(99! "
bool99" &
)99& '
,99' (
$str99) .
)99. /
;99/ 0

_codeToSql:: 
.:: 
Add:: 
(:: 
typeof:: !
(::! "
Byte::" &
)::& '
,::' (
$str::) 2
)::2 3
;::3 4

_codeToSql;; 
.;; 
Add;; 
(;; 
typeof;; !
(;;! "
short;;" '
);;' (
,;;( )
$str;;* 4
);;4 5
;;;5 6

_codeToSql<< 
.<< 
Add<< 
(<< 
typeof<< !
(<<! "
int<<" %
)<<% &
,<<& '
$str<<( -
)<<- .
;<<. /

_codeToSql== 
.== 
Add== 
(== 
typeof== !
(==! "
long==" &
)==& '
,==' (
$str==) 1
)==1 2
;==2 3

_codeToSql>> 
.>> 
Add>> 
(>> 
typeof>> !
(>>! "
double>>" (
)>>( )
,>>) *
$str>>+ 2
)>>2 3
;>>3 4

_codeToSql?? 
.?? 
Add?? 
(?? 
typeof?? !
(??! "
Guid??" &
)??& '
,??' (
$str??) ;
)??; <
;??< =

_codeToSql@@ 
.@@ 
Add@@ 
(@@ 
typeof@@ !
(@@! "
	IGeometry@@" +
)@@+ ,
,@@, -
$str@@. 9
)@@9 :
;@@: ;
}BB 	
publicDD 
MssqlTypeMapperDD 
(DD 
)DD  
{EE 	

_wkbReaderFF 
=FF 
newFF 
NetTopologySuiteFF -
.FF- .
IOFF. 0
.FF0 1
	WKBReaderFF1 :
(FF: ;
)FF; <
;FF< =
}GG 	
publicII 
TypeII 
GetTypeII 
(II 
stringII "
sqlTypeII# *
)II* +
{JJ 	
returnKK 

_sqlToCodeKK 
[KK 
sqlTypeKK %
]KK% &
;KK& '
}LL 	
publicNN 
stringNN 

GetSqlTypeNN  
(NN  !
TypeNN! %
typeNN& *
,NN* +
intNN, /
?NN/ 0
lengthNN1 7
=NN8 9
nullNN: >
)NN> ?
{OO 	
ifPP 
(PP 
typePP 
.PP 
IsGenericTypePP "
&&PP# %
typePP& *
.PP* +$
GetGenericTypeDefinitionPP+ C
(PPC D
)PPD E
==PPF H
typeofPPI O
(PPO P
NullablePPP X
<PPX Y
>PPY Z
)PPZ [
)PP[ \
typeQQ 
=QQ 
NullableQQ 
.QQ  
GetUnderlyingTypeQQ  1
(QQ1 2
typeQQ2 6
)QQ6 7
;QQ7 8
ifSS 
(SS 
typeofSS 
(SS 
	IGeometrySS  
)SS  !
.SS! "
IsAssignableFromSS" 2
(SS2 3
typeSS3 7
)SS7 8
)SS8 9
typeTT 
=TT 
typeofTT 
(TT 
	IGeometryTT '
)TT' (
;TT( )
ifVV 
(VV 
typeVV 
==VV 
typeofVV 
(VV 
DBNullVV %
)VV% &
)VV& '
returnWW 
$strWW $
;WW$ %
ifYY 
(YY 
typeYY 
.YY 
IsEnumYY 
)YY 
returnZZ 
$strZZ $
;ZZ$ %
var\\ 
result\\ 
=\\ 

_codeToSql\\ #
[\\# $
type\\$ (
]\\( )
;\\) *
if]] 
(]] 
typeof]] 
(]] 
string]] 
)]] 
==]] !
type]]" &
)]]& '
result^^ 
=^^ 
string^^ 
.^^  
Format^^  &
(^^& '
$str^^' 1
,^^1 2
result^^3 9
,^^9 :
length^^; A
.^^A B
HasValue^^B J
?^^K L
length^^M S
:^^T U
$num^^V Y
)^^Y Z
;^^Z [
return__ 
result__ 
;__ 
}`` 	
publicbb 
stringbb 
FormatSqlByTypebb %
(bb% &
objectbb& ,
valbb- 0
)bb0 1
{cc 	
ifdd 
(dd 
valdd 
==dd 
nulldd 
)dd 
returnee 
$stree 
;ee 
ifgg 
(gg 
valgg 
==gg 
DBNullgg 
.gg 
Valuegg #
)gg# $
returnhh 
$strhh 
;hh 
varjj 
typejj 
=jj 
valjj 
.jj 
GetTypejj "
(jj" #
)jj# $
;jj$ %
ifkk 
(kk 
typeofkk 
(kk 
stringkk 
)kk 
==kk !
typekk" &
||kk' )
typeofll 
(ll 
Guidll 
)ll 
==ll 
typell  $
)ll$ %
returnmm 
stringmm 
.mm 
Formatmm $
(mm$ %
$strmm% ,
,mm, -
valmm. 1
)mm1 2
;mm2 3
ifoo 
(oo 
typeofoo 
(oo 
booloo 
)oo 
==oo 
typeoo  $
)oo$ %
returnpp 
(pp 
boolpp 
)pp 
valpp  
?pp! "
$strpp# &
:pp' (
$strpp) ,
;pp, -
ifrr 
(rr 
typeofrr 
(rr 
intrr 
)rr 
==rr 
typerr #
||rr$ &
typeofss 
(ss 
decimalss 
)ss 
==ss  "
typess# '
||ss( *
typeoftt 
(tt 
Singlett 
)tt 
==tt !
typett" &
||tt' )
typeofuu 
(uu 
byteuu 
)uu 
==uu 
typeuu  $
||uu% '
typeofvv 
(vv 
shortvv 
)vv 
==vv  
typevv! %
||vv& (
typeofww 
(ww 
longww 
)ww 
==ww 
typeww  $
||ww% '
typeofxx 
(xx 
doublexx 
)xx 
==xx !
typexx" &
)xx& '
returnyy 
valyy 
.yy 
ToStringyy #
(yy# $
)yy$ %
;yy% &
if{{ 
({{ 
type{{ 
.{{ 
IsEnum{{ 
){{ 
return|| 
val|| 
.|| 
ToString|| #
(||# $
)||$ %
;||% &
if~~ 
(~~ 
typeof~~ 
(~~ 
DateTime~~ 
)~~  
==~~! #
type~~$ (
)~~( )
return 
string 
. 
Format $
($ %
$str% ,
,, -
(. /
(/ 0
DateTime0 8
)8 9
val9 <
)< =
.= >
ToString> F
(F G
$strG ^
)^ _
)_ `
;` a
return
ÇÇ 
val
ÇÇ 
.
ÇÇ 
ToString
ÇÇ 
(
ÇÇ  
)
ÇÇ  !
;
ÇÇ! "
}
ÉÉ 	
public
ÖÖ 
object
ÖÖ 
ConvertFromSql
ÖÖ $
(
ÖÖ$ %
object
ÖÖ% +
obj
ÖÖ, /
)
ÖÖ/ 0
{
ÜÜ 	
if
áá 
(
áá 
obj
áá 
==
áá 
DBNull
áá 
.
áá 
Value
áá #
)
áá# $
return
áá% +
null
áá, 0
;
áá0 1
if
àà 
(
àà 
obj
àà 
.
àà 
GetType
àà 
(
àà 
)
àà 
.
àà 
Name
àà "
==
àà# %
$str
àà& 4
||
àà5 7
obj
àà8 ;
.
àà; <
GetType
àà< C
(
ààC D
)
ààD E
.
ààE F
Name
ààF J
==
ààK M
$str
ààN [
)
àà[ \
{
ââ 
var
ää 
val1
ää 
=
ää 
(
ää 
obj
ää 
.
ää  
GetType
ää  '
(
ää' (
)
ää( )
.
ää) *
	GetMethod
ää* 3
(
ää3 4
$str
ää4 @
)
ää@ A
.
ääA B
Invoke
ääB H
(
ääH I
obj
ääI L
,
ääL M
null
ääN R
)
ääR S
as
ääT V
SqlBytes
ääW _
)
ää_ `
.
ää` a
Value
ääa f
;
ääf g
	IGeometry
ãã 
geo
ãã 
=
ãã 

_wkbReader
ãã  *
.
ãã* +
Read
ãã+ /
(
ãã/ 0
val1
ãã0 4
)
ãã4 5
;
ãã5 6
return
åå 
geo
åå 
;
åå 
}
çç 
return
éé 
obj
éé 
;
éé 
}
èè 	
public
ëë 
object
ëë 
ConvertToSql
ëë "
(
ëë" #
object
ëë# )
obj
ëë* -
)
ëë- .
{
íí 	
if
ìì 
(
ìì 
obj
ìì 
==
ìì 
null
ìì 
)
ìì 
return
ìì #
DBNull
ìì$ *
.
ìì* +
Value
ìì+ 0
;
ìì0 1
if
îî 
(
îî 
typeof
îî 
(
îî 
	IGeometry
îî  
)
îî  !
.
îî! "
IsAssignableFrom
îî" 2
(
îî2 3
obj
îî3 6
.
îî6 7
GetType
îî7 >
(
îî> ?
)
îî? @
)
îî@ A
)
îîA B
{
ïï 
obj
ññ 
=
ññ 
GeometryValidator
ññ '
.
ññ' (
ReorientObject
ññ( 6
(
ññ6 7
obj
ññ7 :
as
ññ; =
	IGeometry
ññ> G
)
ññG H
;
ññH I
obj
óó 
=
óó 
GeometryValidator
óó '
.
óó' (
	MakeValid
óó( 1
(
óó1 2
obj
óó2 5
as
óó6 8
	IGeometry
óó9 B
)
óóB C
;
óóC D
return
ØØ 
(
ØØ 
(
ØØ 
	IGeometry
ØØ "
)
ØØ" #
obj
ØØ# &
)
ØØ& '
.
ØØ' (
AsText
ØØ( .
(
ØØ. /
)
ØØ/ 0
;
ØØ0 1
}
∞∞ 
return
±± 
obj
±± 
;
±± 
}
≤≤ 	
}
≥≥ 
}¥¥ ´ª	
£D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\DataBaseHelper\PostgisHelper\PostgisQueryBuilder.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Database %
.% &
Postgis& -
{		 
class

 	
PostgisQueryBuilder


 
:

 
IQueryBuilder

  -
{ 
private 
List 
< 
QueryParameter #
># $
_parameters% 0
;0 1
ITypeMapper 
_typeMapper 
;  
public 
PostgisQueryBuilder "
(" #
ITypeMapper# .

typeMapper/ 9
)9 :
{ 	
_parameters 
= 
new 
List "
<" #
QueryParameter# 1
>1 2
(2 3
)3 4
;4 5
_typeMapper 
= 

typeMapper $
;$ %
} 	
public 
Query 
ConvertToQuery #
(# $
string$ *
txt+ .
,. /
params0 6
object7 =
[= >
]> ?

parameters@ J
)J K
{ 	
string 
query 
; 
bool 
isStoredProcedure "
;" #
var 
parameterList 
= 
new  #
List$ (
<( )
QueryParameter) 7
>7 8
(8 9
)9 :
;: ;
var 
	nullCheck 
= 
new 

Dictionary  *
<* +
string+ 1
,1 2
bool3 7
>7 8
(8 9
)9 :
;: ;
isStoredProcedure 
= 
txt  #
.# $
IndexOf$ +
(+ ,
$char, /
)/ 0
==1 3
-4 5
$num5 6
?7 8
true9 =
:> ?
false@ E
;E F
if 
( 
isStoredProcedure !
)! "
{ 
for 
( 
int 
i 
= 
$num 
; 
i  !
<" #

parameters$ .
.. /
Length/ 5
;5 6
i7 8
++8 :
): ;
{   
var!! 
p!! 
=!! 
new!! 
QueryParameter!!  .
{!!/ 0
Name!!1 5
=!!6 7
$str!!8 <
+!!= >
i!!? @
.!!@ A
ToString!!A I
(!!I J
)!!J K
,!!K L
Value!!M R
=!!S T

parameters!!U _
[!!_ `
i!!` a
]!!a b
??!!c e
DBNull!!f l
.!!l m
Value!!m r
}!!s t
;!!t u
parameterList"" !
.""! "
Add""" %
(""% &
p""& '
)""' (
;""( )
}## 
query$$ 
=$$ 
txt$$ 
+$$ 
$str$$ !
+$$" #
string$$$ *
.$$* +
Join$$+ /
($$/ 0
$str$$0 3
,$$3 4
parameterList$$5 B
.$$B C
Select$$C I
($$I J
a$$J K
=>$$L N
a$$O P
.$$P Q
Name$$Q U
)$$U V
.$$V W
ToArray$$W ^
($$^ _
)$$_ `
)$$` a
;$$a b
}%% 
else&& 
{'' 
for(( 
((( 
int(( 
i(( 
=(( 
$num(( 
;(( 
i((  !
<((" #

parameters(($ .
.((. /
Length((/ 5
;((5 6
i((7 8
++((8 :
)((: ;
{)) 
var** 
p** 
=** 
new** 
QueryParameter**  .
(**. /
)**/ 0
;**0 1
p++ 
.++ 
Name++ 
=++ 
$str++ !
+++" #
i++$ %
.++% &
ToString++& .
(++. /
)++/ 0
;++0 1
p,, 
.,, 
Value,, 
=,, 

parameters,, (
[,,( )
i,,) *
],,* +
??,,, .
DBNull,,/ 5
.,,5 6
Value,,6 ;
;,,; <
parameterList-- !
.--! "
Add--" %
(--% &
p--& '
)--' (
;--( )
}.. 
if// 
(// 
parameterList// !
.//! "
Count//" '
>//( )
$num//* +
)//+ ,
query00 
=00 
string00 "
.00" #
Format00# )
(00) *
txt00* -
,00- .
parameterList00/ <
.00< =
Select00= C
(00C D
a00D E
=>00F H
a00I J
.00J K
Name00K O
)00O P
.00P Q
ToArray00Q X
(00X Y
)00Y Z
)00Z [
;00[ \
else11 
query22 
=22 
txt22 
;22  
}33 
return44 
new44 
Query44 
{44 
Command44 &
=44' (
query44) .
,44. /

Parameters440 :
=44; <
parameterList44= J
.44J K
ToArray44K R
(44R S
)44S T
,44T U
IsStoredProcedure44V g
=44h i
isStoredProcedure44j {
}44| }
;44} ~
}55 	
public66 
Query66 
GetFetchQuery66 "
(66" #
bool66# '

isFunction66( 2
,662 3
string664 :
	tableName66; D
,66D E
string66F L

schemaName66M W
,66W X
object66Y _
[66_ `
]66` a
functionParmeters66b s
,66s t
List66u y
<66y z
QueryStatement	66z à
>
66à â

statements
66ä î
,
66î ï
List
66ñ ö
<
66ö õ
object
66õ °
>
66° ¢

parameters
66£ ≠
)
66≠ Æ
{77 	
return88 
GetQuery88 
(88 

isFunction88 &
,88& '
	tableName88( 1
,881 2

schemaName883 =
,88= >
functionParmeters88? P
,88P Q

statements88R \
,88\ ]

parameters88^ h
,88h i
false88j o
)88o p
;88p q
}99 	
public:: 
string::  
GetFetchQueryForTest:: *
(::* +
bool::+ /

isFunction::0 :
,::: ;
string::< B
	tableName::C L
,::L M
string::N T

schemaName::U _
,::_ `
object::a g
[::g h
]::h i
functionParameters::j |
,::| }
List	::~ Ç
<
::Ç É
QueryStatement
::É ë
>
::ë í

statements
::ì ù
,
::ù û
List
::ü £
<
::£ §
object
::§ ™
>
::™ ´

parameters
::¨ ∂
)
::∂ ∑
{;; 	
var<< 
query<< 
=<< 
GetQuery<<  
(<<  !

isFunction<<! +
,<<+ ,
	tableName<<- 6
,<<6 7

schemaName<<8 B
,<<B C
functionParameters<<D V
,<<V W

statements<<X b
,<<b c

parameters<<d n
,<<n o
true<<p t
)<<t u
;<<u v
var== 
result== 
=== 
query== 
.== 
Command== &
;==& '
foreach>> 
(>> 
var>> 
par>> 
in>> 
query>>  %
.>>% &

Parameters>>& 0
)>>0 1
result?? 
=?? 
result?? 
.??  
Replace??  '
(??' (
par??( +
.??+ ,
Name??, 0
,??0 1
_typeMapper??2 =
.??= >
FormatSqlByType??> M
(??M N
par??N Q
.??Q R
Value??R W
)??W X
)??X Y
;??Y Z
return@@ 
result@@ 
;@@ 
}AA 	
privateBB 
QueryBB 
GetQueryBB 
(BB 
boolBB #

isFunctionBB$ .
,BB. /
stringBB0 6
	tableNameBB7 @
,BB@ A
stringBBB H

schemaNameBBI S
,BBS T
objectBBU [
[BB[ \
]BB\ ]
functionParametersBB^ p
,BBp q
ListBBr v
<BBv w
QueryStatement	BBw Ö
>
BBÖ Ü

statements
BBá ë
,
BBë í
List
BBì ó
<
BBó ò
object
BBò û
>
BBû ü

parameters
BB† ™
,
BB™ ´
bool
BB¨ ∞
	withSpace
BB± ∫
)
BB∫ ª
{CC 	
_parametersDD 
.DD 
ClearDD 
(DD 
)DD 
;DD  
varEE 
queriesEE 
=EE 
newEE 
ListEE "
<EE" #
SubQueryEE# +
>EE+ ,
(EE, -
)EE- .
;EE. /
varFF 
subQueryFF 
=FF 
newFF 
SubQueryFF '
(FF' (
)FF( )
{FF* +

IsFunctionFF, 6
=FF7 8

isFunctionFF9 C
,FFC D
	TableNameFFE N
=FFO P
	tableNameFFQ Z
,FFZ [
FunctionParametersFF\ n
=FFo p
functionParameters	FFq É
,
FFÉ Ñ

SchemaName
FFÖ è
=
FFê ë

schemaName
FFí ú
,
FFú ù
Level
FFû £
=
FF§ •
$num
FF¶ ß
}
FF® ©
;
FF© ™
forGG 
(GG 
intGG 
iGG 
=GG 
$numGG 
;GG 
iGG 
<GG 

statementsGG  *
.GG* +
CountGG+ 0
;GG0 1
iGG2 3
++GG3 5
)GG5 6
{HH 
varII 
statementTypeII !
=II" #

statementsII$ .
[II. /
iII/ 0
]II0 1
;II1 2
ifJJ 
(JJ 
statementTypeJJ !
==JJ" $
QueryStatementJJ% 3
.JJ3 4
SelectJJ4 :
)JJ: ;
{KK 
ifLL 
(LL 
!LL 
stringLL 
.LL  
IsNullOrEmptyLL  -
(LL- .
subQueryLL. 6
.LL6 7
SelectLL7 =
)LL= >
)LL> ?
{MM 
queriesNN 
.NN  
AddNN  #
(NN# $
subQueryNN$ ,
)NN, -
;NN- .
subQueryOO  
=OO! "
newOO# &
SubQueryOO' /
(OO/ 0
)OO0 1
{OO2 3

IsFunctionOO4 >
=OO? @

isFunctionOOA K
,OOK L
FunctionParametersOOM _
=OO` a
functionParametersOOb t
,OOt u
PreviousQuery	OOv É
=
OOÑ Ö
subQuery
OOÜ é
,
OOé è
Level
OOê ï
=
OOñ ó
subQuery
OOò †
.
OO† °
Level
OO° ¶
+
OOß ®
$num
OO© ™
}
OO´ ¨
;
OO¨ ≠
}PP 
subQueryQQ 
.QQ 
SelectQQ #
=QQ$ %
ProcessSelectQQ& 3
(QQ3 4

parametersQQ4 >
[QQ> ?
iQQ? @
]QQ@ A
asQQB D

INamedItemQQE O
[QQO P
]QQP Q
)QQQ R
;QQR S
}RR 
elseSS 
ifSS 
(SS 
statementTypeSS &
==SS' )
QueryStatementSS* 8
.SS8 9
WhereSS9 >
)SS> ?
{TT 
ifUU 
(UU 
!UU 
stringUU 
.UU  
IsNullOrEmptyUU  -
(UU- .
subQueryUU. 6
.UU6 7
WhereUU7 <
)UU< =
)UU= >
{VV 
queriesWW 
.WW  
AddWW  #
(WW# $
subQueryWW$ ,
)WW, -
;WW- .
subQueryXX  
=XX! "
newXX# &
SubQueryXX' /
(XX/ 0
)XX0 1
{XX2 3

IsFunctionXX4 >
=XX? @

isFunctionXXA K
,XXK L
FunctionParametersXXM _
=XX` a
functionParametersXXb t
,XXt u
PreviousQuery	XXv É
=
XXÑ Ö
subQuery
XXÜ é
,
XXé è
Level
XXê ï
=
XXñ ó
subQuery
XXò †
.
XX† °
Level
XX° ¶
+
XXß ®
$num
XX© ™
}
XX´ ¨
;
XX¨ ≠
}YY 
ifZZ 
(ZZ 

parametersZZ "
[ZZ" #
iZZ# $
]ZZ$ %
isZZ& (
BEXPZZ) -
)ZZ- .
subQuery[[  
.[[  !
Where[[! &
=[[' (
ProcessWhere[[) 5
([[5 6

parameters[[6 @
[[[@ A
i[[A B
][[B C
as[[D F
BEXP[[G K
)[[K L
;[[L M
else\\ 
if\\ 
(\\ 

parameters\\ '
[\\' (
i\\( )
]\\) *
.\\* +
GetType\\+ 2
(\\2 3
)\\3 4
.\\4 5
GetProperty\\5 @
(\\@ A
$str\\A G
)\\G H
!=\\I K
null\\L P
)\\P Q
{]] 
var^^ 
text^^  
=^^! "
(^^# $
string^^$ *
)^^* +

parameters^^+ 5
[^^5 6
i^^6 7
]^^7 8
.^^8 9
GetType^^9 @
(^^@ A
)^^A B
.^^B C
GetProperty^^C N
(^^N O
$str^^O U
)^^U V
.^^V W
GetValue^^W _
(^^_ `

parameters^^` j
[^^j k
i^^k l
]^^l m
)^^m n
;^^n o
var__ 
prms__  
=__! "
(__# $
object__$ *
[__* +
]__+ ,
)__, -

parameters__- 7
[__7 8
i__8 9
]__9 :
.__: ;
GetType__; B
(__B C
)__C D
.__D E
GetProperty__E P
(__P Q
$str__Q ]
)__] ^
.__^ _
GetValue___ g
(__g h

parameters__h r
[__r s
i__s t
]__t u
)__u v
;__v w
for`` 
(`` 
var``  
k``! "
=``# $
$num``% &
;``& '
k``( )
<``* +
prms``, 0
.``0 1
Length``1 7
;``7 8
k``9 :
++``: <
)``< =
{aa 
varbb 
namebb  $
=bb% &
stringbb' -
.bb- .
Formatbb. 4
(bb4 5
$strbb5 <
,bb< =
_parametersbb> I
.bbI J
CountbbJ O
)bbO P
;bbP Q
_parameterscc '
.cc' (
Addcc( +
(cc+ ,
newcc, /
QueryParametercc0 >
{cc? @
NameccA E
=ccF G
nameccH L
,ccL M
ValueccN S
=ccT U
prmsccV Z
[ccZ [
icc[ \
]cc\ ]
}cc^ _
)cc_ `
;cc` a
textdd  
=dd! "
textdd# '
.dd' (
Replacedd( /
(dd/ 0
stringdd0 6
.dd6 7
Formatdd7 =
(dd= >
$strdd> G
,ddG H
iddI J
)ddJ K
,ddK L
nameddM Q
)ddQ R
;ddR S
}ee 
subQueryff  
.ff  !
Whereff! &
=ff' (
textff) -
;ff- .
}gg 
}hh 
elseii 
ifii 
(ii 
statementTypeii &
==ii' )
QueryStatementii* 8
.ii8 9
GroupByii9 @
)ii@ A
{jj 
ifkk 
(kk 
!kk 
stringkk 
.kk  
IsNullOrEmptykk  -
(kk- .
subQuerykk. 6
.kk6 7
GroupBykk7 >
)kk> ?
)kk? @
{ll 
queriesmm 
.mm  
Addmm  #
(mm# $
subQuerymm$ ,
)mm, -
;mm- .
subQuerynn  
=nn! "
newnn# &
SubQuerynn' /
(nn/ 0
)nn0 1
{nn2 3

IsFunctionnn4 >
=nn? @

isFunctionnnA K
,nnK L
FunctionParametersnnM _
=nn` a
functionParametersnnb t
,nnt u
PreviousQuery	nnv É
=
nnÑ Ö
subQuery
nnÜ é
,
nné è
Level
nnê ï
=
nnñ ó
subQuery
nnò †
.
nn† °
Level
nn° ¶
+
nnß ®
$num
nn© ™
}
nn´ ¨
;
nn¨ ≠
}oo 
subQuerypp 
.pp 
GroupBypp $
=pp% &
ProcessGroupBypp' 5
(pp5 6

parameterspp6 @
[pp@ A
ippA B
]ppB C
asppD F

IQueryItemppG Q
[ppQ R
]ppR S
)ppS T
;ppT U
}qq 
elserr 
ifrr 
(rr 
statementTyperr &
==rr' )
QueryStatementrr* 8
.rr8 9
OrderByrr9 @
)rr@ A
{ss 
subQuerytt 
.tt 
OrderBytt $
=tt% &
ProcessOrderBytt' 5
(tt5 6

parameterstt6 @
[tt@ A
ittA B
]ttB C
asttD F
IQueryOrderItemttG V
[ttV W
]ttW X
)ttX Y
;ttY Z
}uu 
elsevv 
ifvv 
(vv 
statementTypevv &
==vv' )
QueryStatementvv* 8
.vv8 9
Skipvv9 =
)vv= >
{ww 
subQueryxx 
.xx 
Skipxx !
=xx" #

parametersxx$ .
[xx. /
ixx/ 0
]xx0 1
!=xx2 4
nullxx5 9
?xx: ;
(xx< =
intxx= @
?xx@ A
)xxA B
(xxB C

parametersxxC M
[xxM N
ixxN O
]xxO P
)xxP Q
:xxR S
nullxxT X
;xxX Y
}yy 
elsezz 
ifzz 
(zz 
statementTypezz &
==zz' )
QueryStatementzz* 8
.zz8 9
Takezz9 =
)zz= >
{{{ 
subQuery|| 
.|| 
Take|| !
=||" #

parameters||$ .
[||. /
i||/ 0
]||0 1
!=||2 4
null||5 9
?||: ;
(||< =
int||= @
?||@ A
)||A B
(||B C

parameters||C M
[||M N
i||N O
]||O P
)||P Q
:||R S
null||T X
;||X Y
}}} 
}~~ 
var 
query 
= 
! 
	withSpace "
?# $
subQuery% -
.- .

BuildQuery. 8
(8 9
)9 :
:; <
subQuery= E
.E F
BuildQueryWithSpaceF Y
(Y Z
)Z [
;[ \
return
ÄÄ 
new
ÄÄ 
Query
ÄÄ 
{
ÄÄ 
Command
ÄÄ &
=
ÄÄ' (
query
ÄÄ) .
,
ÄÄ. /

Parameters
ÄÄ0 :
=
ÄÄ; <
_parameters
ÄÄ= H
.
ÄÄH I
ToArray
ÄÄI P
(
ÄÄP Q
)
ÄÄQ R
}
ÄÄS T
;
ÄÄT U
}
ÅÅ 	
private
ÉÉ 
string
ÉÉ 
ProcessSelect
ÉÉ $
(
ÉÉ$ %

INamedItem
ÉÉ% /
[
ÉÉ/ 0
]
ÉÉ0 1
items
ÉÉ2 7
)
ÉÉ7 8
{
ÑÑ 	
var
ÖÖ 
columns
ÖÖ 
=
ÖÖ 
items
ÖÖ 
.
ÖÖ  
Select
ÖÖ  &
(
ÖÖ& '
a
ÖÖ' (
=>
ÖÖ) +
ProcessQueryItem
ÖÖ, <
(
ÖÖ< =
a
ÖÖ= >
)
ÖÖ> ?
)
ÖÖ? @
.
ÖÖ@ A
ToArray
ÖÖA H
(
ÖÖH I
)
ÖÖI J
;
ÖÖJ K
var
ÜÜ 
	statement
ÜÜ 
=
ÜÜ 
string
ÜÜ "
.
ÜÜ" #
Join
ÜÜ# '
(
ÜÜ' (
$str
ÜÜ( ,
,
ÜÜ, -
columns
ÜÜ. 5
)
ÜÜ5 6
;
ÜÜ6 7
return
áá 
	statement
áá 
;
áá 
}
àà 	
private
ââ 
string
ââ 
ProcessWhere
ââ #
(
ââ# $
BEXP
ââ$ (
exp
ââ) ,
)
ââ, -
{
ää 	
var
ãã 
	statement
ãã 
=
ãã 
ProcessBEXP
ãã '
(
ãã' (
exp
ãã( +
)
ãã+ ,
;
ãã, -
return
åå 
	statement
åå 
;
åå 
}
çç 	
private
éé 
string
éé 
ProcessOrderBy
éé %
(
éé% &
IQueryOrderItem
éé& 5
[
éé5 6
]
éé6 7
items
éé8 =
)
éé= >
{
èè 	
var
êê 
columns
êê 
=
êê 
items
êê 
.
êê  
Select
êê  &
(
êê& '
a
êê' (
=>
êê) +
ProcessQueryItem
êê, <
(
êê< =
a
êê= >
)
êê> ?
)
êê? @
.
êê@ A
ToArray
êêA H
(
êêH I
)
êêI J
;
êêJ K
var
ëë 
	statement
ëë 
=
ëë 
string
ëë "
.
ëë" #
Join
ëë# '
(
ëë' (
$str
ëë( ,
,
ëë, -
columns
ëë. 5
)
ëë5 6
;
ëë6 7
return
íí 
	statement
íí 
;
íí 
}
ìì 	
private
îî 
string
îî 
ProcessGroupBy
îî %
(
îî% &

IQueryItem
îî& 0
[
îî0 1
]
îî1 2
items
îî3 8
)
îî8 9
{
ïï 	
var
ññ 
columns
ññ 
=
ññ 
items
ññ 
.
ññ  
Select
ññ  &
(
ññ& '
a
ññ' (
=>
ññ) +
ProcessQueryItem
ññ, <
(
ññ< =
a
ññ= >
)
ññ> ?
)
ññ? @
.
ññ@ A
ToArray
ññA H
(
ññH I
)
ññI J
;
ññJ K
var
óó 
	statement
óó 
=
óó 
string
óó "
.
óó" #
Join
óó# '
(
óó' (
$str
óó( ,
,
óó, -
columns
óó. 5
)
óó5 6
;
óó6 7
return
òò 
	statement
òò 
;
òò 
}
ôô 	
private
öö 
string
öö 
ProcessQueryItem
öö '
(
öö' (

IQueryItem
öö( 2
item
öö3 7
)
öö7 8
{
õõ 	
if
úú 
(
úú 
item
úú 
==
úú 
null
úú 
)
úú 
return
úú $
$str
úú% '
;
úú' (
else
ùù 
if
ùù 
(
ùù 
item
ùù 
is
ùù 
BEXP
ùù !
)
ùù! "
return
ùù# )
ProcessBEXP
ùù* 5
(
ùù5 6
item
ùù6 :
as
ùù; =
BEXP
ùù> B
)
ùùB C
;
ùùC D
else
ûû 
if
ûû 
(
ûû 
item
ûû 
is
ûû 
TEXP
ûû !
)
ûû! "
return
ûû# )
ProcessTEXP
ûû* 5
(
ûû5 6
item
ûû6 :
as
ûû; =
TEXP
ûû> B
)
ûûB C
;
ûûC D
else
üü 
if
üü 
(
üü 
item
üü 
is
üü 
FEXP
üü !
)
üü! "
return
üü# )
ProcessFEXP
üü* 5
(
üü5 6
item
üü6 :
as
üü; =
FEXP
üü> B
)
üüB C
;
üüC D
else
†† 
if
†† 
(
†† 
item
†† 
is
†† 
NEXP
†† !
)
††! "
return
††# )
ProcessNEXP
††* 5
(
††5 6
item
††6 :
as
††; =
NEXP
††> B
)
††B C
;
††C D
else
°° 
if
°° 
(
°° 
item
°° 
is
°° 
COL
°°  
)
°°  !
return
°°" (

ProcessCOL
°°) 3
(
°°3 4
item
°°4 8
as
°°9 ;
COL
°°< ?
)
°°? @
;
°°@ A
else
¢¢ 
if
¢¢ 
(
¢¢ 
item
¢¢ 
is
¢¢ 
VAL
¢¢  
)
¢¢  !
return
¢¢" (

ProcessVAL
¢¢) 3
(
¢¢3 4
item
¢¢4 8
as
¢¢9 ;
VAL
¢¢< ?
)
¢¢? @
;
¢¢@ A
else
££ 
if
££ 
(
££ 
item
££ 
is
££ 
ARR
££  
)
££  !
return
££" (

ProcessARR
££) 3
(
££3 4
item
££4 8
as
££9 ;
ARR
££< ?
)
££? @
;
££@ A
else
§§ 
if
§§ 
(
§§ 
item
§§ 
is
§§ 
IQueryOrderItem
§§ ,
)
§§, -
return
§§. 4
ProcessOrderItem
§§5 E
(
§§E F
item
§§F J
as
§§K M
IQueryOrderItem
§§N ]
)
§§] ^
;
§§^ _
return
•• 
$str
•• 
;
•• 
}
ßß 	
private
®® 
string
®® 
ProcessBEXP
®® "
(
®®" #
BEXP
®®# '
exp
®®( +
)
®®+ ,
{
©© 	
var
™™ 
op
™™ 
=
™™ 
exp
™™ 
.
™™ 
Operator
™™ !
;
™™! "
var
´´ 
operand1
´´ 
=
´´ 
ProcessQueryItem
´´ +
(
´´+ ,
exp
´´, /
.
´´/ 0
Operand1
´´0 8
)
´´8 9
;
´´9 :
var
¨¨ 
operand2
¨¨ 
=
¨¨ 
ProcessQueryItem
¨¨ +
(
¨¨+ ,
exp
¨¨, /
.
¨¨/ 0
Operand2
¨¨0 8
)
¨¨8 9
;
¨¨9 :
switch
≠≠ 
(
≠≠ 
op
≠≠ 
)
≠≠ 
{
ÆÆ 
case
ØØ 
BinaryOperator
ØØ #
.
ØØ# $
And
ØØ$ '
:
ØØ' (
return
ØØ) /
string
ØØ0 6
.
ØØ6 7
Format
ØØ7 =
(
ØØ= >
$str
ØØ> M
,
ØØM N
operand1
ØØO W
,
ØØW X
operand2
ØØY a
)
ØØa b
;
ØØb c
case
∞∞ 
BinaryOperator
∞∞ #
.
∞∞# $
Or
∞∞$ &
:
∞∞& '
return
∞∞( .
string
∞∞/ 5
.
∞∞5 6
Format
∞∞6 <
(
∞∞< =
$str
∞∞= K
,
∞∞K L
operand1
∞∞M U
,
∞∞U V
operand2
∞∞W _
)
∞∞_ `
;
∞∞` a
case
±± 
BinaryOperator
±± #
.
±±# $
Not
±±$ '
:
±±' (
return
±±) /
string
±±0 6
.
±±6 7
Format
±±7 =
(
±±= >
$str
±±> K
,
±±K L
operand1
±±M U
)
±±U V
;
±±V W
case
≤≤ 
BinaryOperator
≤≤ #
.
≤≤# $
Equal
≤≤$ )
:
≤≤) *
return
≤≤+ 1
string
≤≤2 8
.
≤≤8 9
Format
≤≤9 ?
(
≤≤? @
$str
≤≤@ M
,
≤≤M N
operand1
≤≤O W
,
≤≤W X
operand2
≤≤Y a
)
≤≤a b
;
≤≤b c
case
≥≥ 
BinaryOperator
≥≥ #
.
≥≥# $
NotEqual
≥≥$ ,
:
≥≥, -
return
≥≥. 4
string
≥≥5 ;
.
≥≥; <
Format
≥≥< B
(
≥≥B C
$str
≥≥C Q
,
≥≥Q R
operand1
≥≥S [
,
≥≥[ \
operand2
≥≥] e
)
≥≥e f
;
≥≥f g
case
¥¥ 
BinaryOperator
¥¥ #
.
¥¥# $
LessThan
¥¥$ ,
:
¥¥, -
return
¥¥. 4
string
¥¥5 ;
.
¥¥; <
Format
¥¥< B
(
¥¥B C
$str
¥¥C P
,
¥¥P Q
operand1
¥¥R Z
,
¥¥Z [
operand2
¥¥\ d
)
¥¥d e
;
¥¥e f
case
µµ 
BinaryOperator
µµ #
.
µµ# $
GreaterThan
µµ$ /
:
µµ/ 0
return
µµ1 7
string
µµ8 >
.
µµ> ?
Format
µµ? E
(
µµE F
$str
µµF S
,
µµS T
operand1
µµU ]
,
µµ] ^
operand2
µµ_ g
)
µµg h
;
µµh i
case
∂∂ 
BinaryOperator
∂∂ #
.
∂∂# $
LessThanOrEqual
∂∂$ 3
:
∂∂3 4
return
∂∂5 ;
string
∂∂< B
.
∂∂B C
Format
∂∂C I
(
∂∂I J
$str
∂∂J X
,
∂∂X Y
operand1
∂∂Z b
,
∂∂b c
operand2
∂∂d l
)
∂∂l m
;
∂∂m n
case
∑∑ 
BinaryOperator
∑∑ #
.
∑∑# $ 
GreaterThanOrEqual
∑∑$ 6
:
∑∑6 7
return
∑∑8 >
string
∑∑? E
.
∑∑E F
Format
∑∑F L
(
∑∑L M
$str
∑∑M [
,
∑∑[ \
operand1
∑∑] e
,
∑∑e f
operand2
∑∑g o
)
∑∑o p
;
∑∑p q
case
∏∏ 
BinaryOperator
∏∏ #
.
∏∏# $
Like
∏∏$ (
:
∏∏( )
return
∏∏* 0
string
∏∏1 7
.
∏∏7 8
Format
∏∏8 >
(
∏∏> ?
$str
∏∏? O
,
∏∏O P
operand1
∏∏Q Y
,
∏∏Y Z
operand2
∏∏[ c
)
∏∏c d
;
∏∏d e
case
ππ 
BinaryOperator
ππ #
.
ππ# $
NotLike
ππ$ +
:
ππ+ ,
return
ππ- 3
string
ππ4 :
.
ππ: ;
Format
ππ; A
(
ππA B
$str
ππB V
,
ππV W
operand1
ππX `
,
ππ` a
operand2
ππb j
)
ππj k
;
ππk l
case
∫∫ 
BinaryOperator
∫∫ #
.
∫∫# $
IsNull
∫∫$ *
:
∫∫* +
return
∫∫, 2
string
∫∫3 9
.
∫∫9 :
Format
∫∫: @
(
∫∫@ A
$str
∫∫A P
,
∫∫P Q
operand1
∫∫R Z
)
∫∫Z [
;
∫∫[ \
case
ªª 
BinaryOperator
ªª #
.
ªª# $
	IsNotNull
ªª$ -
:
ªª- .
return
ªª/ 5
string
ªª6 <
.
ªª< =
Format
ªª= C
(
ªªC D
$str
ªªD W
,
ªªW X
operand1
ªªY a
)
ªªa b
;
ªªb c
case
ºº 
BinaryOperator
ºº #
.
ºº# $
In
ºº$ &
:
ºº& '
return
ºº( .
string
ºº/ 5
.
ºº5 6
Format
ºº6 <
(
ºº< =
$str
ºº= K
,
ººK L
operand1
ººM U
,
ººU V
operand2
ººW _
)
ºº_ `
;
ºº` a
default
ΩΩ 
:
ΩΩ 
throw
ΩΩ 
new
ΩΩ "!
QueryBuildException
ΩΩ# 6
(
ΩΩ6 7!
QueryBuildException
ΩΩ7 J
.
ΩΩJ K
ExceptionTypes
ΩΩK Y
.
ΩΩY Z
OperatorNotFound
ΩΩZ j
)
ΩΩj k
;
ΩΩk l
}
ææ 
}
øø 	
private
¿¿ 
string
¿¿ 
ProcessTEXP
¿¿ "
(
¿¿" #
TEXP
¿¿# '
exp
¿¿( +
)
¿¿+ ,
{
¡¡ 	
var
¬¬ 
op
¬¬ 
=
¬¬ 
exp
¬¬ 
.
¬¬ 
Operator
¬¬ !
;
¬¬! "
var
√√ 
operand1
√√ 
=
√√ 
ProcessQueryItem
√√ +
(
√√+ ,
exp
√√, /
.
√√/ 0
Operand1
√√0 8
)
√√8 9
;
√√9 :
var
ƒƒ 
operand2
ƒƒ 
=
ƒƒ 
ProcessQueryItem
ƒƒ +
(
ƒƒ+ ,
exp
ƒƒ, /
.
ƒƒ/ 0
Operand2
ƒƒ0 8
)
ƒƒ8 9
;
ƒƒ9 :
switch
≈≈ 
(
≈≈ 
op
≈≈ 
)
≈≈ 
{
∆∆ 
case
«« 
TransformOperator
«« &
.
««& '
Add
««' *
:
««* +
return
««, 2
string
««3 9
.
««9 :
Format
««: @
(
««@ A
$str
««A N
,
««N O
operand1
««P X
,
««X Y
operand2
««Z b
)
««b c
;
««c d
case
»» 
TransformOperator
»» &
.
»»& '
Divide
»»' -
:
»»- .
return
»»/ 5
string
»»6 <
.
»»< =
Format
»»= C
(
»»C D
$str
»»D Q
,
»»Q R
operand1
»»S [
,
»»[ \
operand2
»»] e
)
»»e f
;
»»f g
case
…… 
TransformOperator
…… &
.
……& '
Modulo
……' -
:
……- .
return
……/ 5
string
……6 <
.
……< =
Format
……= C
(
……C D
$str
……D Q
,
……Q R
operand1
……S [
,
……[ \
operand2
……] e
)
……e f
;
……f g
case
   
TransformOperator
   &
.
  & '
Multiply
  ' /
:
  / 0
return
  1 7
string
  8 >
.
  > ?
Format
  ? E
(
  E F
$str
  F S
,
  S T
operand1
  U ]
,
  ] ^
operand2
  _ g
)
  g h
;
  h i
case
ÀÀ 
TransformOperator
ÀÀ &
.
ÀÀ& '
Negate
ÀÀ' -
:
ÀÀ- .
return
ÀÀ/ 5
string
ÀÀ6 <
.
ÀÀ< =
Format
ÀÀ= C
(
ÀÀC D
$str
ÀÀD P
,
ÀÀP Q
operand1
ÀÀR Z
)
ÀÀZ [
;
ÀÀ[ \
case
ÃÃ 
TransformOperator
ÃÃ &
.
ÃÃ& '
Power
ÃÃ' ,
:
ÃÃ, -
return
ÃÃ. 4
string
ÃÃ5 ;
.
ÃÃ; <
Format
ÃÃ< B
(
ÃÃB C
$str
ÃÃC P
,
ÃÃP Q
operand1
ÃÃR Z
,
ÃÃZ [
operand2
ÃÃ\ d
)
ÃÃd e
;
ÃÃe f
case
ÕÕ 
TransformOperator
ÕÕ &
.
ÕÕ& '
Subtract
ÕÕ' /
:
ÕÕ/ 0
return
ÕÕ1 7
string
ÕÕ8 >
.
ÕÕ> ?
Format
ÕÕ? E
(
ÕÕE F
$str
ÕÕF S
,
ÕÕS T
operand1
ÕÕU ]
,
ÕÕ] ^
operand2
ÕÕ_ g
)
ÕÕg h
;
ÕÕh i
case
ŒŒ 
TransformOperator
ŒŒ &
.
ŒŒ& '
Lambda
ŒŒ' -
:
ŒŒ- .
throw
ŒŒ/ 4
new
ŒŒ5 8!
QueryBuildException
ŒŒ9 L
(
ŒŒL M!
QueryBuildException
ŒŒM `
.
ŒŒ` a
ExceptionTypes
ŒŒa o
.
ŒŒo p!
OperatorUnsuportedŒŒp Ç
)ŒŒÇ É
;ŒŒÉ Ñ
case
œœ 
TransformOperator
œœ &
.
œœ& '
Conditional
œœ' 2
:
œœ2 3
throw
œœ4 9
new
œœ: =!
QueryBuildException
œœ> Q
(
œœQ R!
QueryBuildException
œœR e
.
œœe f
ExceptionTypes
œœf t
.
œœt u!
OperatorUnsuportedœœu á
)œœá à
;œœà â
case
–– 
TransformOperator
–– &
.
––& '
ExclusiveOr
––' 2
:
––2 3
throw
––4 9
new
––: =!
QueryBuildException
––> Q
(
––Q R!
QueryBuildException
––R e
.
––e f
ExceptionTypes
––f t
.
––t u!
OperatorUnsuported––u á
)––á à
;––à â
case
—— 
TransformOperator
—— &
.
——& '
OnesComplement
——' 5
:
——5 6
throw
——7 <
new
——= @!
QueryBuildException
——A T
(
——T U!
QueryBuildException
——U h
.
——h i
ExceptionTypes
——i w
.
——w x!
OperatorUnsuported——x ä
)——ä ã
;——ã å
default
““ 
:
““ 
throw
““ 
new
““ "!
QueryBuildException
““# 6
(
““6 7!
QueryBuildException
““7 J
.
““J K
ExceptionTypes
““K Y
.
““Y Z
OperatorNotFound
““Z j
)
““j k
;
““k l
}
”” 
}
‘‘ 	
private
’’ 
string
’’ 
ProcessFEXP
’’ "
(
’’" #
FEXP
’’# '
exp
’’( +
)
’’+ ,
{
÷÷ 	
var
ÿÿ 
function
ÿÿ 
=
ÿÿ 
exp
ÿÿ 
.
ÿÿ 
Function
ÿÿ '
;
ÿÿ' (
var
ŸŸ 

parameters
ŸŸ 
=
ŸŸ 
exp
ŸŸ  
.
ŸŸ  !

Parameters
ŸŸ! +
!=
ŸŸ, .
null
ŸŸ/ 3
?
ŸŸ4 5
exp
ŸŸ6 9
.
ŸŸ9 :

Parameters
ŸŸ: D
.
ŸŸD E
Select
ŸŸE K
(
ŸŸK L
a
ŸŸL M
=>
ŸŸN P
ProcessQueryItem
ŸŸQ a
(
ŸŸa b
a
ŸŸb c
)
ŸŸc d
)
ŸŸd e
.
ŸŸe f
ToArray
ŸŸf m
(
ŸŸm n
)
ŸŸn o
:
ŸŸp q
new
ŸŸr u
string
ŸŸv |
[
ŸŸ| }
$num
ŸŸ} ~
]
ŸŸ~ 
;ŸŸ Ä
switch
⁄⁄ 
(
⁄⁄ 
function
⁄⁄ 
)
⁄⁄ 
{
€€ 
case
‹‹ 
QueryFunctions
‹‹ #
.
‹‹# $
Ascii
‹‹$ )
:
‹‹) *
return
‹‹+ 1
string
‹‹2 8
.
‹‹8 9
Format
‹‹9 ?
(
‹‹? @
$str
‹‹@ L
,
‹‹L M

parameters
‹‹N X
[
‹‹X Y
$num
‹‹Y Z
]
‹‹Z [
)
‹‹[ \
;
‹‹\ ]
case
›› 
QueryFunctions
›› #
.
››# $
Char
››$ (
:
››( )
return
››* 0
string
››1 7
.
››7 8
Format
››8 >
(
››> ?
$str
››? I
,
››I J

parameters
››K U
[
››U V
$num
››V W
]
››W X
)
››X Y
;
››Y Z
case
ﬁﬁ 
QueryFunctions
ﬁﬁ #
.
ﬁﬁ# $
	CharIndex
ﬁﬁ$ -
:
ﬁﬁ- .
if
ﬂﬂ 
(
ﬂﬂ 

parameters
ﬂﬂ "
.
ﬂﬂ" #
Length
ﬂﬂ# )
==
ﬂﬂ* ,
$num
ﬂﬂ- .
)
ﬂﬂ. /
return
ﬂﬂ0 6
string
ﬂﬂ7 =
.
ﬂﬂ= >
Format
ﬂﬂ> D
(
ﬂﬂD E
$str
ﬂﬂE [
,
ﬂﬂ[ \

parameters
ﬂﬂ] g
[
ﬂﬂg h
$num
ﬂﬂh i
]
ﬂﬂi j
,
ﬂﬂj k

parameters
ﬂﬂl v
[
ﬂﬂv w
$num
ﬂﬂw x
]
ﬂﬂx y
)
ﬂﬂy z
;
ﬂﬂz {
else
·· 
throw
·· 
new
·· "!
QueryBuildException
··# 6
(
··6 7!
QueryBuildException
··7 J
.
··J K
ExceptionTypes
··K Y
.
··Y Z#
ParameterCountIsWrong
··Z o
)
··o p
;
··p q
case
‚‚ 
QueryFunctions
‚‚ #
.
‚‚# $
Concat
‚‚$ *
:
‚‚* +
return
‚‚, 2
string
‚‚3 9
.
‚‚9 :
Format
‚‚: @
(
‚‚@ A
$str
‚‚A F
,
‚‚F G
string
‚‚H N
.
‚‚N O
Join
‚‚O S
(
‚‚S T
$str
‚‚T Z
,
‚‚Z [

parameters
‚‚\ f
)
‚‚f g
)
‚‚g h
;
‚‚h i
case
„„ 
QueryFunctions
„„ #
.
„„# $

Difference
„„$ .
:
„„. /
return
„„0 6
string
„„7 =
.
„„= >
Format
„„> D
(
„„D E
$str
„„E [
,
„„[ \

parameters
„„] g
[
„„g h
$num
„„h i
]
„„i j
,
„„j k

parameters
„„l v
[
„„v w
$num
„„w x
]
„„x y
)
„„y z
;
„„z {
;
„„| }
case
‰‰ 
QueryFunctions
‰‰ #
.
‰‰# $
Format
‰‰$ *
:
‰‰* +
if
ÂÂ 
(
ÂÂ 

parameters
ÂÂ "
.
ÂÂ" #
Length
ÂÂ# )
==
ÂÂ* ,
$num
ÂÂ- .
)
ÂÂ. /
return
ÂÂ0 6
string
ÂÂ7 =
.
ÂÂ= >
Format
ÂÂ> D
(
ÂÂD E
$str
ÂÂE W
,
ÂÂW X

parameters
ÂÂY c
[
ÂÂc d
$num
ÂÂd e
]
ÂÂe f
,
ÂÂf g

parameters
ÂÂh r
[
ÂÂr s
$num
ÂÂs t
]
ÂÂt u
)
ÂÂu v
;
ÂÂv w
else
ÊÊ 
if
ÊÊ 
(
ÊÊ 

parameters
ÊÊ '
.
ÊÊ' (
Length
ÊÊ( .
==
ÊÊ/ 1
$num
ÊÊ2 3
)
ÊÊ3 4
return
ÊÊ5 ;
string
ÊÊ< B
.
ÊÊB C
Format
ÊÊC I
(
ÊÊI J
$str
ÊÊJ a
,
ÊÊa b

parameters
ÊÊc m
[
ÊÊm n
$num
ÊÊn o
]
ÊÊo p
,
ÊÊp q

parameters
ÊÊr |
[
ÊÊ| }
$num
ÊÊ} ~
]
ÊÊ~ 
,ÊÊ Ä

parametersÊÊÅ ã
[ÊÊã å
$numÊÊå ç
]ÊÊç é
)ÊÊé è
;ÊÊè ê
else
ÁÁ 
throw
ÁÁ 
new
ÁÁ "!
QueryBuildException
ÁÁ# 6
(
ÁÁ6 7!
QueryBuildException
ÁÁ7 J
.
ÁÁJ K
ExceptionTypes
ÁÁK Y
.
ÁÁY Z#
ParameterCountIsWrong
ÁÁZ o
)
ÁÁo p
;
ÁÁp q
case
ËË 
QueryFunctions
ËË #
.
ËË# $
Left
ËË$ (
:
ËË( )
return
ËË* 0
string
ËË1 7
.
ËË7 8
Format
ËË8 >
(
ËË> ?
$str
ËË? O
,
ËËO P

parameters
ËËQ [
[
ËË[ \
$num
ËË\ ]
]
ËË] ^
,
ËË^ _

parameters
ËË` j
[
ËËj k
$num
ËËk l
]
ËËl m
)
ËËm n
;
ËËn o
case
ÈÈ 
QueryFunctions
ÈÈ #
.
ÈÈ# $
Len
ÈÈ$ '
:
ÈÈ' (
return
ÈÈ) /
string
ÈÈ0 6
.
ÈÈ6 7
Format
ÈÈ7 =
(
ÈÈ= >
$str
ÈÈ> K
,
ÈÈK L

parameters
ÈÈM W
[
ÈÈW X
$num
ÈÈX Y
]
ÈÈY Z
)
ÈÈZ [
;
ÈÈ[ \
case
ÍÍ 
QueryFunctions
ÍÍ #
.
ÍÍ# $
Lower
ÍÍ$ )
:
ÍÍ) *
return
ÍÍ+ 1
string
ÍÍ2 8
.
ÍÍ8 9
Format
ÍÍ9 ?
(
ÍÍ? @
$str
ÍÍ@ L
,
ÍÍL M

parameters
ÍÍN X
[
ÍÍX Y
$num
ÍÍY Z
]
ÍÍZ [
)
ÍÍ[ \
;
ÍÍ\ ]
case
ÎÎ 
QueryFunctions
ÎÎ #
.
ÎÎ# $
Ltrim
ÎÎ$ )
:
ÎÎ) *
return
ÎÎ+ 1
string
ÎÎ2 8
.
ÎÎ8 9
Format
ÎÎ9 ?
(
ÎÎ? @
$str
ÎÎ@ L
,
ÎÎL M

parameters
ÎÎN X
[
ÎÎX Y
$num
ÎÎY Z
]
ÎÎZ [
)
ÎÎ[ \
;
ÎÎ\ ]
case
ÏÏ 
QueryFunctions
ÏÏ #
.
ÏÏ# $
Nchar
ÏÏ$ )
:
ÏÏ) *
return
ÏÏ+ 1
string
ÏÏ2 8
.
ÏÏ8 9
Format
ÏÏ9 ?
(
ÏÏ? @
$str
ÏÏ@ L
,
ÏÏL M

parameters
ÏÏN X
[
ÏÏX Y
$num
ÏÏY Z
]
ÏÏZ [
)
ÏÏ[ \
;
ÏÏ\ ]
case
ÌÌ 
QueryFunctions
ÌÌ #
.
ÌÌ# $
Patindex
ÌÌ$ ,
:
ÌÌ, -
return
ÌÌ. 4
string
ÌÌ5 ;
.
ÌÌ; <
Format
ÌÌ< B
(
ÌÌB C
$str
ÌÌC W
,
ÌÌW X

parameters
ÌÌY c
[
ÌÌc d
$num
ÌÌd e
]
ÌÌe f
,
ÌÌf g

parameters
ÌÌh r
[
ÌÌr s
$num
ÌÌs t
]
ÌÌt u
)
ÌÌu v
;
ÌÌv w
case
ÓÓ 
QueryFunctions
ÓÓ #
.
ÓÓ# $
	Quotename
ÓÓ$ -
:
ÓÓ- .
if
ÔÔ 
(
ÔÔ 

parameters
ÔÔ "
.
ÔÔ" #
Length
ÔÔ# )
==
ÔÔ* ,
$num
ÔÔ- .
)
ÔÔ. /
return
ÔÔ0 6
string
ÔÔ7 =
.
ÔÔ= >
Format
ÔÔ> D
(
ÔÔD E
$str
ÔÔE U
,
ÔÔU V

parameters
ÔÔW a
[
ÔÔa b
$num
ÔÔb c
]
ÔÔc d
)
ÔÔd e
;
ÔÔe f
else
 
if
 
(
 

parameters
 '
.
' (
Length
( .
==
/ 1
$num
2 3
)
3 4
return
5 ;
string
< B
.
B C
Format
C I
(
I J
$str
J _
,
_ `

parameters
a k
[
k l
$num
l m
]
m n
,
n o

parameters
p z
[
z {
$num
{ |
]
| }
)
} ~
;
~ 
else
ÒÒ 
throw
ÒÒ 
new
ÒÒ "!
QueryBuildException
ÒÒ# 6
(
ÒÒ6 7!
QueryBuildException
ÒÒ7 J
.
ÒÒJ K
ExceptionTypes
ÒÒK Y
.
ÒÒY Z#
ParameterCountIsWrong
ÒÒZ o
)
ÒÒo p
;
ÒÒp q
case
ÚÚ 
QueryFunctions
ÚÚ #
.
ÚÚ# $
Replace
ÚÚ$ +
:
ÚÚ+ ,
return
ÚÚ- 3
string
ÚÚ4 :
.
ÚÚ: ;
Format
ÚÚ; A
(
ÚÚA B
$str
ÚÚB Z
,
ÚÚZ [

parameters
ÚÚ\ f
[
ÚÚf g
$num
ÚÚg h
]
ÚÚh i
,
ÚÚi j

parameters
ÚÚk u
[
ÚÚu v
$num
ÚÚv w
]
ÚÚw x
,
ÚÚx y

parametersÚÚz Ñ
[ÚÚÑ Ö
$numÚÚÖ Ü
]ÚÚÜ á
)ÚÚá à
;ÚÚà â
case
ÙÙ 
QueryFunctions
ÙÙ #
.
ÙÙ# $
Reverse
ÙÙ$ +
:
ÙÙ+ ,
return
ÙÙ- 3
string
ÙÙ4 :
.
ÙÙ: ;
Format
ÙÙ; A
(
ÙÙA B
$str
ÙÙB P
,
ÙÙP Q

parameters
ÙÙR \
[
ÙÙ\ ]
$num
ÙÙ] ^
]
ÙÙ^ _
)
ÙÙ_ `
;
ÙÙ` a
case
ıı 
QueryFunctions
ıı #
.
ıı# $
Right
ıı$ )
:
ıı) *
return
ıı+ 1
string
ıı2 8
.
ıı8 9
Format
ıı9 ?
(
ıı? @
$str
ıı@ Q
,
ııQ R

parameters
ııS ]
[
ıı] ^
$num
ıı^ _
]
ıı_ `
,
ıı` a

parameters
ııb l
[
ııl m
$num
ıım n
]
ıın o
)
ııo p
;
ııp q
case
ˆˆ 
QueryFunctions
ˆˆ #
.
ˆˆ# $
Rtrim
ˆˆ$ )
:
ˆˆ) *
return
ˆˆ+ 1
string
ˆˆ2 8
.
ˆˆ8 9
Format
ˆˆ9 ?
(
ˆˆ? @
$str
ˆˆ@ L
,
ˆˆL M

parameters
ˆˆN X
[
ˆˆX Y
$num
ˆˆY Z
]
ˆˆZ [
)
ˆˆ[ \
;
ˆˆ\ ]
case
˛˛ 
QueryFunctions
˛˛ #
.
˛˛# $
String_Escape
˛˛$ 1
:
˛˛1 2
return
˛˛3 9
string
˛˛: @
.
˛˛@ A
Format
˛˛A G
(
˛˛G H
$str
˛˛H a
,
˛˛a b

parameters
˛˛c m
[
˛˛m n
$num
˛˛n o
]
˛˛o p
,
˛˛p q

parameters
˛˛r |
[
˛˛| }
$num
˛˛} ~
]
˛˛~ 
)˛˛ Ä
;˛˛Ä Å
case
ˇˇ 
QueryFunctions
ˇˇ #
.
ˇˇ# $
String_Split
ˇˇ$ 0
:
ˇˇ0 1
return
ˇˇ2 8
string
ˇˇ9 ?
.
ˇˇ? @
Format
ˇˇ@ F
(
ˇˇF G
$str
ˇˇG _
,
ˇˇ_ `

parameters
ˇˇa k
[
ˇˇk l
$num
ˇˇl m
]
ˇˇm n
,
ˇˇn o

parameters
ˇˇp z
[
ˇˇz {
$num
ˇˇ{ |
]
ˇˇ| }
)
ˇˇ} ~
;
ˇˇ~ 
case
ÄÄ 
QueryFunctions
ÄÄ #
.
ÄÄ# $
Stuff
ÄÄ$ )
:
ÄÄ) *
return
ÄÄ+ 1
string
ÄÄ2 8
.
ÄÄ8 9
Format
ÄÄ9 ?
(
ÄÄ? @
$str
ÄÄ@ [
,
ÄÄ[ \

parameters
ÄÄ] g
[
ÄÄg h
$num
ÄÄh i
]
ÄÄi j
,
ÄÄj k

parameters
ÄÄl v
[
ÄÄv w
$num
ÄÄw x
]
ÄÄx y
,
ÄÄy z

parametersÄÄ{ Ö
[ÄÄÖ Ü
$numÄÄÜ á
]ÄÄá à
,ÄÄà â

parametersÄÄä î
[ÄÄî ï
$numÄÄï ñ
]ÄÄñ ó
)ÄÄó ò
;ÄÄò ô
case
ÅÅ 
QueryFunctions
ÅÅ #
.
ÅÅ# $
	Substring
ÅÅ$ -
:
ÅÅ- .
return
ÅÅ/ 5
string
ÅÅ6 <
.
ÅÅ< =
Format
ÅÅ= C
(
ÅÅC D
$str
ÅÅD e
,
ÅÅe f

parameters
ÅÅg q
[
ÅÅq r
$num
ÅÅr s
]
ÅÅs t
,
ÅÅt u

parametersÅÅv Ä
[ÅÅÄ Å
$numÅÅÅ Ç
]ÅÅÇ É
,ÅÅÉ Ñ

parametersÅÅÖ è
[ÅÅè ê
$numÅÅê ë
]ÅÅë í
)ÅÅí ì
;ÅÅì î
case
ÇÇ 
QueryFunctions
ÇÇ #
.
ÇÇ# $
Unicode
ÇÇ$ +
:
ÇÇ+ ,
return
ÇÇ- 3
string
ÇÇ4 :
.
ÇÇ: ;
Format
ÇÇ; A
(
ÇÇA B
$str
ÇÇB P
,
ÇÇP Q

parameters
ÇÇR \
[
ÇÇ\ ]
$num
ÇÇ] ^
]
ÇÇ^ _
)
ÇÇ_ `
;
ÇÇ` a
case
ÉÉ 
QueryFunctions
ÉÉ #
.
ÉÉ# $
Upper
ÉÉ$ )
:
ÉÉ) *
return
ÉÉ+ 1
string
ÉÉ2 8
.
ÉÉ8 9
Format
ÉÉ9 ?
(
ÉÉ? @
$str
ÉÉ@ L
,
ÉÉL M

parameters
ÉÉN X
[
ÉÉX Y
$num
ÉÉY Z
]
ÉÉZ [
)
ÉÉ[ \
;
ÉÉ\ ]
case
ÖÖ 
QueryFunctions
ÖÖ #
.
ÖÖ# $
Abs
ÖÖ$ '
:
ÖÖ' (
return
ÖÖ) /
string
ÖÖ0 6
.
ÖÖ6 7
Format
ÖÖ7 =
(
ÖÖ= >
$str
ÖÖ> H
,
ÖÖH I

parameters
ÖÖJ T
[
ÖÖT U
$num
ÖÖU V
]
ÖÖV W
)
ÖÖW X
;
ÖÖX Y
case
ÜÜ 
QueryFunctions
ÜÜ #
.
ÜÜ# $
Acos
ÜÜ$ (
:
ÜÜ( )
return
ÜÜ* 0
string
ÜÜ1 7
.
ÜÜ7 8
Format
ÜÜ8 >
(
ÜÜ> ?
$str
ÜÜ? J
,
ÜÜJ K

parameters
ÜÜL V
[
ÜÜV W
$num
ÜÜW X
]
ÜÜX Y
)
ÜÜY Z
;
ÜÜZ [
case
áá 
QueryFunctions
áá #
.
áá# $
Asin
áá$ (
:
áá( )
return
áá* 0
string
áá1 7
.
áá7 8
Format
áá8 >
(
áá> ?
$str
áá? J
,
ááJ K

parameters
ááL V
[
ááV W
$num
ááW X
]
ááX Y
)
ááY Z
;
ááZ [
case
àà 
QueryFunctions
àà #
.
àà# $
Atan
àà$ (
:
àà( )
return
àà* 0
string
àà1 7
.
àà7 8
Format
àà8 >
(
àà> ?
$str
àà? J
,
ààJ K

parameters
ààL V
[
ààV W
$num
ààW X
]
ààX Y
)
ààY Z
;
ààZ [
case
ââ 
QueryFunctions
ââ #
.
ââ# $
Atn2
ââ$ (
:
ââ( )
return
ââ* 0
string
ââ1 7
.
ââ7 8
Format
ââ8 >
(
ââ> ?
$str
ââ? P
,
ââP Q

parameters
ââR \
[
ââ\ ]
$num
ââ] ^
]
ââ^ _
,
ââ_ `

parameters
ââa k
[
ââk l
$num
ââl m
]
ââm n
)
âân o
;
ââo p
case
ää 
QueryFunctions
ää #
.
ää# $
Ceiling
ää$ +
:
ää+ ,
return
ää- 3
string
ää4 :
.
ää: ;
Format
ää; A
(
ääA B
$str
ääB P
,
ääP Q

parameters
ääR \
[
ää\ ]
$num
ää] ^
]
ää^ _
)
ää_ `
;
ää` a
case
ãã 
QueryFunctions
ãã #
.
ãã# $
Cos
ãã$ '
:
ãã' (
return
ãã) /
string
ãã0 6
.
ãã6 7
Format
ãã7 =
(
ãã= >
$str
ãã> H
,
ããH I

parameters
ããJ T
[
ããT U
$num
ããU V
]
ããV W
)
ããW X
;
ããX Y
case
åå 
QueryFunctions
åå #
.
åå# $
Cot
åå$ '
:
åå' (
return
åå) /
string
åå0 6
.
åå6 7
Format
åå7 =
(
åå= >
$str
åå> Q
,
ååQ R

parameters
ååS ]
[
åå] ^
$num
åå^ _
]
åå_ `
)
åå` a
;
ååa b
case
çç 
QueryFunctions
çç #
.
çç# $
Degrees
çç$ +
:
çç+ ,
return
çç- 3
string
çç4 :
.
çç: ;
Format
çç; A
(
ççA B
$str
ççB P
,
ççP Q

parameters
ççR \
[
çç\ ]
$num
çç] ^
]
çç^ _
)
çç_ `
;
çç` a
case
éé 
QueryFunctions
éé #
.
éé# $
Exp
éé$ '
:
éé' (
return
éé) /
string
éé0 6
.
éé6 7
Format
éé7 =
(
éé= >
$str
éé> H
,
ééH I

parameters
ééJ T
[
ééT U
$num
ééU V
]
ééV W
)
ééW X
;
ééX Y
case
èè 
QueryFunctions
èè #
.
èè# $
Floor
èè$ )
:
èè) *
return
èè+ 1
string
èè2 8
.
èè8 9
Format
èè9 ?
(
èè? @
$str
èè@ L
,
èèL M

parameters
èèN X
[
èèX Y
$num
èèY Z
]
èèZ [
)
èè[ \
;
èè\ ]
case
êê 
QueryFunctions
êê #
.
êê# $
Log
êê$ '
:
êê' (
if
ëë 
(
ëë 

parameters
ëë "
.
ëë" #
Length
ëë# )
==
ëë* ,
$num
ëë- .
)
ëë. /
return
ëë0 6
string
ëë7 =
.
ëë= >
Format
ëë> D
(
ëëD E
$str
ëëE N
,
ëëN O

parameters
ëëP Z
[
ëëZ [
$num
ëë[ \
]
ëë\ ]
)
ëë] ^
;
ëë^ _
else
íí 
if
íí 
(
íí 

parameters
íí '
.
íí' (
Length
íí( .
==
íí/ 1
$num
íí2 3
)
íí3 4
return
íí5 ;
string
íí< B
.
ííB C
Format
ííC I
(
ííI J
$str
ííJ Y
,
ííY Z

parameters
íí[ e
[
ííe f
$num
ííf g
]
ííg h
,
ííh i

parameters
ííj t
[
íít u
$num
ííu v
]
íív w
)
ííw x
;
ííx y
else
ìì 
throw
ìì 
new
ìì "!
QueryBuildException
ìì# 6
(
ìì6 7!
QueryBuildException
ìì7 J
.
ììJ K
ExceptionTypes
ììK Y
.
ììY Z#
ParameterCountIsWrong
ììZ o
)
ììo p
;
ììp q
case
îî 
QueryFunctions
îî #
.
îî# $
PI
îî$ &
:
îî& '
return
îî( .
$str
îî/ 5
;
îî5 6
case
ïï 
QueryFunctions
ïï #
.
ïï# $
Power
ïï$ )
:
ïï) *
return
ïï+ 1
string
ïï2 8
.
ïï8 9
Format
ïï9 ?
(
ïï? @
$str
ïï@ Q
,
ïïQ R

parameters
ïïS ]
[
ïï] ^
$num
ïï^ _
]
ïï_ `
,
ïï` a

parameters
ïïb l
[
ïïl m
$num
ïïm n
]
ïïn o
)
ïïo p
;
ïïp q
case
ññ 
QueryFunctions
ññ #
.
ññ# $
Radians
ññ$ +
:
ññ+ ,
return
ññ- 3
string
ññ4 :
.
ññ: ;
Format
ññ; A
(
ññA B
$str
ññB P
,
ññP Q

parameters
ññR \
[
ññ\ ]
$num
ññ] ^
]
ññ^ _
)
ññ_ `
;
ññ` a
case
óó 
QueryFunctions
óó #
.
óó# $
Rand
óó$ (
:
óó( )
if
òò 
(
òò 

parameters
òò "
.
òò" #
Length
òò# )
==
òò* ,
$num
òò- .
)
òò. /
return
òò0 6
$str
òò7 B
;
òòB C
else
öö 
throw
öö 
new
öö "!
QueryBuildException
öö# 6
(
öö6 7!
QueryBuildException
öö7 J
.
ööJ K
ExceptionTypes
ööK Y
.
ööY Z#
ParameterCountIsWrong
ööZ o
)
ööo p
;
ööp q
case
õõ 
QueryFunctions
õõ #
.
õõ# $
Round
õõ$ )
:
õõ) *
if
úú 
(
úú 

parameters
úú "
.
úú" #
Length
úú# )
==
úú* ,
$num
úú- .
)
úú. /
return
úú0 6
string
úú7 =
.
úú= >
Format
úú> D
(
úúD E
$str
úúE V
,
úúV W

parameters
úúX b
[
úúb c
$num
úúc d
]
úúd e
,
úúe f

parameters
úúg q
[
úúq r
$num
úúr s
]
úús t
)
úút u
;
úúu v
else
ûû 
if
ûû 
(
ûû 

parameters
ûû '
.
ûû' (
Length
ûû( .
==
ûû/ 1
$num
ûû2 3
)
ûû3 4
return
ûû5 ;
string
ûû< B
.
ûûB C
Format
ûûC I
(
ûûI J
$str
ûûJ V
,
ûûV W

parameters
ûûX b
[
ûûb c
$num
ûûc d
]
ûûd e
)
ûûe f
;
ûûf g
else
üü 
throw
üü 
new
üü "!
QueryBuildException
üü# 6
(
üü6 7!
QueryBuildException
üü7 J
.
üüJ K
ExceptionTypes
üüK Y
.
üüY Z#
ParameterCountIsWrong
üüZ o
)
üüo p
;
üüp q
case
†† 
QueryFunctions
†† #
.
††# $
Sign
††$ (
:
††( )
return
††* 0
string
††1 7
.
††7 8
Format
††8 >
(
††> ?
$str
††? J
,
††J K

parameters
††L V
[
††V W
$num
††W X
]
††X Y
)
††Y Z
;
††Z [
case
°° 
QueryFunctions
°° #
.
°°# $
Sin
°°$ '
:
°°' (
return
°°) /
string
°°0 6
.
°°6 7
Format
°°7 =
(
°°= >
$str
°°> H
,
°°H I

parameters
°°J T
[
°°T U
$num
°°U V
]
°°V W
)
°°W X
;
°°X Y
case
¢¢ 
QueryFunctions
¢¢ #
.
¢¢# $
Sqrt
¢¢$ (
:
¢¢( )
return
¢¢* 0
string
¢¢1 7
.
¢¢7 8
Format
¢¢8 >
(
¢¢> ?
$str
¢¢? J
,
¢¢J K

parameters
¢¢L V
[
¢¢V W
$num
¢¢W X
]
¢¢X Y
)
¢¢Y Z
;
¢¢Z [
case
££ 
QueryFunctions
££ #
.
££# $
Square
££$ *
:
££* +
return
££, 2
string
££3 9
.
££9 :
Format
££: @
(
££@ A
$str
££A L
,
££L M

parameters
££N X
[
££X Y
$num
££Y Z
]
££Z [
)
££[ \
;
££\ ]
case
§§ 
QueryFunctions
§§ #
.
§§# $
Tan
§§$ '
:
§§' (
return
§§) /
string
§§0 6
.
§§6 7
Format
§§7 =
(
§§= >
$str
§§> H
,
§§H I

parameters
§§J T
[
§§T U
$num
§§U V
]
§§V W
)
§§W X
;
§§X Y
case
¶¶ 
QueryFunctions
¶¶ #
.
¶¶# $
GetDate
¶¶$ +
:
¶¶+ ,
return
¶¶- 3
$str
¶¶4 ;
;
¶¶; <
case
®® 
QueryFunctions
®® #
.
®®# $
Avg
®®$ '
:
®®' (
return
®®) /
string
®®0 6
.
®®6 7
Format
®®7 =
(
®®= >
$str
®®> H
,
®®H I

parameters
®®J T
[
®®T U
$num
®®U V
]
®®V W
)
®®W X
;
®®X Y
case
©© 
QueryFunctions
©© #
.
©©# $
Max
©©$ '
:
©©' (
return
©©) /
string
©©0 6
.
©©6 7
Format
©©7 =
(
©©= >
$str
©©> H
,
©©H I

parameters
©©J T
[
©©T U
$num
©©U V
]
©©V W
)
©©W X
;
©©X Y
case
™™ 
QueryFunctions
™™ #
.
™™# $
Min
™™$ '
:
™™' (
return
™™) /
string
™™0 6
.
™™6 7
Format
™™7 =
(
™™= >
$str
™™> H
,
™™H I

parameters
™™J T
[
™™T U
$num
™™U V
]
™™V W
)
™™W X
;
™™X Y
case
´´ 
QueryFunctions
´´ #
.
´´# $
Sum
´´$ '
:
´´' (
return
´´) /
string
´´0 6
.
´´6 7
Format
´´7 =
(
´´= >
$str
´´> H
,
´´H I

parameters
´´J T
[
´´T U
$num
´´U V
]
´´V W
)
´´W X
;
´´X Y
case
¨¨ 
QueryFunctions
¨¨ #
.
¨¨# $
Stdev
¨¨$ )
:
¨¨) *
return
¨¨+ 1
string
¨¨2 8
.
¨¨8 9
Format
¨¨9 ?
(
¨¨? @
$str
¨¨@ M
,
¨¨M N

parameters
¨¨O Y
[
¨¨Y Z
$num
¨¨Z [
]
¨¨[ \
)
¨¨\ ]
;
¨¨] ^
case
≠≠ 
QueryFunctions
≠≠ #
.
≠≠# $
Stdevp
≠≠$ *
:
≠≠* +
return
≠≠, 2
string
≠≠3 9
.
≠≠9 :
Format
≠≠: @
(
≠≠@ A
$str
≠≠A R
,
≠≠R S

parameters
≠≠T ^
[
≠≠^ _
$num
≠≠_ `
]
≠≠` a
)
≠≠a b
;
≠≠b c
case
ÆÆ 
QueryFunctions
ÆÆ #
.
ÆÆ# $
Var
ÆÆ$ '
:
ÆÆ' (
return
ÆÆ) /
string
ÆÆ0 6
.
ÆÆ6 7
Format
ÆÆ7 =
(
ÆÆ= >
$str
ÆÆ> M
,
ÆÆM N

parameters
ÆÆO Y
[
ÆÆY Z
$num
ÆÆZ [
]
ÆÆ[ \
)
ÆÆ\ ]
;
ÆÆ] ^
case
ØØ 
QueryFunctions
ØØ #
.
ØØ# $
Varp
ØØ$ (
:
ØØ( )
return
ØØ* 0
string
ØØ1 7
.
ØØ7 8
Format
ØØ8 >
(
ØØ> ?
$str
ØØ? M
,
ØØM N

parameters
ØØO Y
[
ØØY Z
$num
ØØZ [
]
ØØ[ \
)
ØØ\ ]
;
ØØ] ^
case
∞∞ 
QueryFunctions
∞∞ #
.
∞∞# $
Count
∞∞$ )
:
∞∞) *
return
∞∞+ 1
string
∞∞2 8
.
∞∞8 9
Format
∞∞9 ?
(
∞∞? @
$str
∞∞@ L
,
∞∞L M

parameters
∞∞N X
[
∞∞X Y
$num
∞∞Y Z
]
∞∞Z [
)
∞∞[ \
;
∞∞\ ]
case
±± 
QueryFunctions
±± #
.
±±# $
	Count_Big
±±$ -
:
±±- .
return
±±/ 5
string
±±6 <
.
±±< =
Format
±±= C
(
±±C D
$str
±±D P
,
±±P Q

parameters
±±R \
[
±±\ ]
$num
±±] ^
]
±±^ _
)
±±_ `
;
±±` a
case
∂∂ 
QueryFunctions
∂∂ #
.
∂∂# $
STArea
∂∂$ *
:
∂∂* +
return
∂∂, 2
string
∂∂3 9
.
∂∂9 :
Format
∂∂: @
(
∂∂@ A
$str
∂∂A T
,
∂∂T U

parameters
∂∂V `
[
∂∂` a
$num
∂∂a b
]
∂∂b c
)
∂∂c d
;
∂∂d e
case
∑∑ 
QueryFunctions
∑∑ #
.
∑∑# $

STAsBinary
∑∑$ .
:
∑∑. /
return
∑∑0 6
string
∑∑7 =
.
∑∑= >
Format
∑∑> D
(
∑∑D E
$str
∑∑E W
,
∑∑W X

parameters
∑∑Y c
[
∑∑c d
$num
∑∑d e
]
∑∑e f
)
∑∑f g
;
∑∑g h
case
∏∏ 
QueryFunctions
∏∏ #
.
∏∏# $
STAsText
∏∏$ ,
:
∏∏, -
return
∏∏. 4
string
∏∏5 ;
.
∏∏; <
Format
∏∏< B
(
∏∏B C
$str
∏∏C S
,
∏∏S T

parameters
∏∏U _
[
∏∏_ `
$num
∏∏` a
]
∏∏a b
)
∏∏b c
;
∏∏c d
case
ππ 
QueryFunctions
ππ #
.
ππ# $

STBoundary
ππ$ .
:
ππ. /
return
ππ0 6
string
ππ7 =
.
ππ= >
Format
ππ> D
(
ππD E
$str
ππE W
,
ππW X

parameters
ππY c
[
ππc d
$num
ππd e
]
ππe f
)
ππf g
;
ππg h
case
∫∫ 
QueryFunctions
∫∫ #
.
∫∫# $
STBuffer
∫∫$ ,
:
∫∫, -
return
∫∫. 4
string
∫∫5 ;
.
∫∫; <
Format
∫∫< B
(
∫∫B C
$str
∫∫C X
,
∫∫X Y

parameters
∫∫Z d
[
∫∫d e
$num
∫∫e f
]
∫∫f g
,
∫∫g h

parameters
∫∫i s
[
∫∫s t
$num
∫∫t u
]
∫∫u v
)
∫∫v w
;
∫∫w x
case
ºº 
QueryFunctions
ºº #
.
ºº# $

STContains
ºº$ .
:
ºº. /
return
ºº0 6
string
ºº7 =
.
ºº= >
Format
ºº> D
(
ººD E
$str
ººE \
,
ºº\ ]

parameters
ºº^ h
[
ººh i
$num
ººi j
]
ººj k
,
ººk l

parameters
ººm w
[
ººw x
$num
ººx y
]
ººy z
)
ººz {
;
ºº{ |
case
ΩΩ 
QueryFunctions
ΩΩ #
.
ΩΩ# $
STConvexHull
ΩΩ$ 0
:
ΩΩ0 1
return
ΩΩ2 8
string
ΩΩ9 ?
.
ΩΩ? @
Format
ΩΩ@ F
(
ΩΩF G
$str
ΩΩG [
,
ΩΩ[ \

parameters
ΩΩ] g
[
ΩΩg h
$num
ΩΩh i
]
ΩΩi j
)
ΩΩj k
;
ΩΩk l
case
ææ 
QueryFunctions
ææ #
.
ææ# $
	STCrosses
ææ$ -
:
ææ- .
return
ææ/ 5
string
ææ6 <
.
ææ< =
Format
ææ= C
(
ææC D
$str
ææD Z
,
ææZ [

parameters
ææ\ f
[
ææf g
$num
ææg h
]
ææh i
,
ææi j

parameters
ææk u
[
ææu v
$num
ææv w
]
ææw x
)
ææx y
;
ææy z
case
¿¿ 
QueryFunctions
¿¿ #
.
¿¿# $
STCurveToLine
¿¿$ 1
:
¿¿1 2
return
¿¿3 9
string
¿¿: @
.
¿¿@ A
Format
¿¿A G
(
¿¿G H
$str
¿¿H ]
,
¿¿] ^

parameters
¿¿_ i
[
¿¿i j
$num
¿¿j k
]
¿¿k l
)
¿¿l m
;
¿¿m n
case
¡¡ 
QueryFunctions
¡¡ #
.
¡¡# $
STDifference
¡¡$ 0
:
¡¡0 1
return
¡¡2 8
string
¡¡9 ?
.
¡¡? @
Format
¡¡@ F
(
¡¡F G
$str
¡¡G `
,
¡¡` a

parameters
¡¡b l
[
¡¡l m
$num
¡¡m n
]
¡¡n o
,
¡¡o p

parameters
¡¡q {
[
¡¡{ |
$num
¡¡| }
]
¡¡} ~
)
¡¡~ 
;¡¡ Ä
case
¬¬ 
QueryFunctions
¬¬ #
.
¬¬# $
STDimension
¬¬$ /
:
¬¬/ 0
return
¬¬1 7
string
¬¬8 >
.
¬¬> ?
Format
¬¬? E
(
¬¬E F
$str
¬¬F Y
,
¬¬Y Z

parameters
¬¬[ e
[
¬¬e f
$num
¬¬f g
]
¬¬g h
)
¬¬h i
;
¬¬i j
case
√√ 
QueryFunctions
√√ #
.
√√# $

STDisjoint
√√$ .
:
√√. /
return
√√0 6
string
√√7 =
.
√√= >
Format
√√> D
(
√√D E
$str
√√E \
,
√√\ ]

parameters
√√^ h
[
√√h i
$num
√√i j
]
√√j k
,
√√k l

parameters
√√m w
[
√√w x
$num
√√x y
]
√√y z
)
√√z {
;
√√{ |
case
ƒƒ 
QueryFunctions
ƒƒ #
.
ƒƒ# $

STDistance
ƒƒ$ .
:
ƒƒ. /
return
ƒƒ0 6
string
ƒƒ7 =
.
ƒƒ= >
Format
ƒƒ> D
(
ƒƒD E
$str
ƒƒE \
,
ƒƒ\ ]

parameters
ƒƒ^ h
[
ƒƒh i
$num
ƒƒi j
]
ƒƒj k
,
ƒƒk l

parameters
ƒƒm w
[
ƒƒw x
$num
ƒƒx y
]
ƒƒy z
)
ƒƒz {
;
ƒƒ{ |
case
≈≈ 
QueryFunctions
≈≈ #
.
≈≈# $

STEndpoint
≈≈$ .
:
≈≈. /
return
≈≈0 6
string
≈≈7 =
.
≈≈= >
Format
≈≈> D
(
≈≈D E
$str
≈≈E W
,
≈≈W X

parameters
≈≈Y c
[
≈≈c d
$num
≈≈d e
]
≈≈e f
)
≈≈f g
;
≈≈g h
case
∆∆ 
QueryFunctions
∆∆ #
.
∆∆# $

STEnvelope
∆∆$ .
:
∆∆. /
return
∆∆0 6
string
∆∆7 =
.
∆∆= >
Format
∆∆> D
(
∆∆D E
$str
∆∆E W
,
∆∆W X

parameters
∆∆Y c
[
∆∆c d
$num
∆∆d e
]
∆∆e f
)
∆∆f g
;
∆∆g h
case
«« 
QueryFunctions
«« #
.
««# $
STEquals
««$ ,
:
««, -
return
««. 4
string
««5 ;
.
««; <
Format
««< B
(
««B C
$str
««C X
,
««X Y

parameters
««Z d
[
««d e
$num
««e f
]
««f g
,
««g h

parameters
««i s
[
««s t
$num
««t u
]
««u v
)
««v w
;
««w x
case
»» 
QueryFunctions
»» #
.
»»# $
STExteriorRing
»»$ 2
:
»»2 3
return
»»4 :
string
»»; A
.
»»A B
Format
»»B H
(
»»H I
$str
»»I _
,
»»_ `

parameters
»»a k
[
»»k l
$num
»»l m
]
»»m n
)
»»n o
;
»»o p
case
…… 
QueryFunctions
…… #
.
……# $
STGeometryN
……$ /
:
……/ 0
return
……1 7
string
……8 >
.
……> ?
Format
……? E
(
……E F
$str
……F `
,
……` a

parameters
……b l
[
……l m
$num
……m n
]
……n o
,
……o p

parameters
……q {
[
……{ |
$num
……| }
]
……} ~
)
……~ 
;…… Ä
case
   
QueryFunctions
   #
.
  # $
STGeometryType
  $ 2
:
  2 3
return
  4 :
string
  ; A
.
  A B
Format
  B H
(
  H I
$str
  I _
,
  _ `

parameters
  a k
[
  k l
$num
  l m
]
  m n
)
  n o
;
  o p
case
ÀÀ 
QueryFunctions
ÀÀ #
.
ÀÀ# $
STInteriorRingN
ÀÀ$ 3
:
ÀÀ3 4
return
ÀÀ5 ;
string
ÀÀ< B
.
ÀÀB C
Format
ÀÀC I
(
ÀÀI J
$str
ÀÀJ h
,
ÀÀh i

parameters
ÀÀj t
[
ÀÀt u
$num
ÀÀu v
]
ÀÀv w
,
ÀÀw x

parametersÀÀy É
[ÀÀÉ Ñ
$numÀÀÑ Ö
]ÀÀÖ Ü
)ÀÀÜ á
;ÀÀá à
case
ÃÃ 
QueryFunctions
ÃÃ #
.
ÃÃ# $
STIntersection
ÃÃ$ 2
:
ÃÃ2 3
return
ÃÃ4 :
string
ÃÃ; A
.
ÃÃA B
Format
ÃÃB H
(
ÃÃH I
$str
ÃÃI d
,
ÃÃd e

parameters
ÃÃf p
[
ÃÃp q
$num
ÃÃq r
]
ÃÃr s
,
ÃÃs t

parameters
ÃÃu 
[ÃÃ Ä
$numÃÃÄ Å
]ÃÃÅ Ç
)ÃÃÇ É
;ÃÃÉ Ñ
case
ÕÕ 
QueryFunctions
ÕÕ #
.
ÕÕ# $
STIntersects
ÕÕ$ 0
:
ÕÕ0 1
return
ÕÕ2 8
string
ÕÕ9 ?
.
ÕÕ? @
Format
ÕÕ@ F
(
ÕÕF G
$str
ÕÕG `
,
ÕÕ` a

parameters
ÕÕb l
[
ÕÕl m
$num
ÕÕm n
]
ÕÕn o
,
ÕÕo p

parameters
ÕÕq {
[
ÕÕ{ |
$num
ÕÕ| }
]
ÕÕ} ~
)
ÕÕ~ 
;ÕÕ Ä
case
ŒŒ 
QueryFunctions
ŒŒ #
.
ŒŒ# $

STIsClosed
ŒŒ$ .
:
ŒŒ. /
return
ŒŒ0 6
string
ŒŒ7 =
.
ŒŒ= >
Format
ŒŒ> D
(
ŒŒD E
$str
ŒŒE W
,
ŒŒW X

parameters
ŒŒY c
[
ŒŒc d
$num
ŒŒd e
]
ŒŒe f
)
ŒŒf g
;
ŒŒg h
case
œœ 
QueryFunctions
œœ #
.
œœ# $
	STIsEmpty
œœ$ -
:
œœ- .
return
œœ/ 5
string
œœ6 <
.
œœ< =
Format
œœ= C
(
œœC D
$str
œœD U
,
œœU V

parameters
œœW a
[
œœa b
$num
œœb c
]
œœc d
)
œœd e
;
œœe f
case
–– 
QueryFunctions
–– #
.
––# $
STIsRing
––$ ,
:
––, -
return
––. 4
string
––5 ;
.
––; <
Format
––< B
(
––B C
$str
––C S
,
––S T

parameters
––U _
[
––_ `
$num
––` a
]
––a b
)
––b c
;
––c d
case
—— 
QueryFunctions
—— #
.
——# $

STIsSimple
——$ .
:
——. /
return
——0 6
string
——7 =
.
——= >
Format
——> D
(
——D E
$str
——E W
,
——W X

parameters
——Y c
[
——c d
$num
——d e
]
——e f
)
——f g
;
——g h
case
““ 
QueryFunctions
““ #
.
““# $
	STIsValid
““$ -
:
““- .
return
““/ 5
string
““6 <
.
““< =
Format
““= C
(
““C D
$str
““D U
,
““U V

parameters
““W a
[
““a b
$num
““b c
]
““c d
)
““d e
;
““e f
case
”” 
QueryFunctions
”” #
.
””# $
STLength
””$ ,
:
””, -
return
””. 4
string
””5 ;
.
””; <
Format
””< B
(
””B C
$str
””C S
,
””S T

parameters
””U _
[
””_ `
$num
””` a
]
””a b
)
””b c
;
””c d
case
’’ 
QueryFunctions
’’ #
.
’’# $
STNumGeometries
’’$ 3
:
’’3 4
return
’’5 ;
string
’’< B
.
’’B C
Format
’’C I
(
’’I J
$str
’’J a
,
’’a b

parameters
’’c m
[
’’m n
$num
’’n o
]
’’o p
)
’’p q
;
’’q r
case
÷÷ 
QueryFunctions
÷÷ #
.
÷÷# $
STNumInteriorRing
÷÷$ 5
:
÷÷5 6
return
÷÷7 =
string
÷÷> D
.
÷÷D E
Format
÷÷E K
(
÷÷K L
$str
÷÷L e
,
÷÷e f

parameters
÷÷g q
[
÷÷q r
$num
÷÷r s
]
÷÷s t
)
÷÷t u
;
÷÷u v
case
◊◊ 
QueryFunctions
◊◊ #
.
◊◊# $
STNumPoints
◊◊$ /
:
◊◊/ 0
return
◊◊1 7
string
◊◊8 >
.
◊◊> ?
Format
◊◊? E
(
◊◊E F
$str
◊◊F Y
,
◊◊Y Z

parameters
◊◊[ e
[
◊◊e f
$num
◊◊f g
]
◊◊g h
)
◊◊h i
;
◊◊i j
case
ÿÿ 
QueryFunctions
ÿÿ #
.
ÿÿ# $

STOverlaps
ÿÿ$ .
:
ÿÿ. /
return
ÿÿ0 6
string
ÿÿ7 =
.
ÿÿ= >
Format
ÿÿ> D
(
ÿÿD E
$str
ÿÿE \
,
ÿÿ\ ]

parameters
ÿÿ^ h
[
ÿÿh i
$num
ÿÿi j
]
ÿÿj k
,
ÿÿk l

parameters
ÿÿm w
[
ÿÿw x
$num
ÿÿx y
]
ÿÿy z
)
ÿÿz {
;
ÿÿ{ |
case
ŸŸ 
QueryFunctions
ŸŸ #
.
ŸŸ# $
STPointN
ŸŸ$ ,
:
ŸŸ, -
return
ŸŸ. 4
string
ŸŸ5 ;
.
ŸŸ; <
Format
ŸŸ< B
(
ŸŸB C
$str
ŸŸC Z
,
ŸŸZ [

parameters
ŸŸ\ f
[
ŸŸf g
$num
ŸŸg h
]
ŸŸh i
,
ŸŸi j

parameters
ŸŸk u
[
ŸŸu v
$num
ŸŸv w
]
ŸŸw x
)
ŸŸx y
;
ŸŸy z
case
€€ 
QueryFunctions
€€ #
.
€€# $
STRelate
€€$ ,
:
€€, -
return
€€. 4
string
€€5 ;
.
€€; <
Format
€€< B
(
€€B C
$str
€€C ]
,
€€] ^

parameters
€€_ i
[
€€i j
$num
€€j k
]
€€k l
,
€€l m

parameters
€€n x
[
€€x y
$num
€€y z
]
€€z {
,
€€{ |

parameters€€} á
[€€á à
$num€€à â
]€€â ä
)€€ä ã
;€€ã å
case
‹‹ 
QueryFunctions
‹‹ #
.
‹‹# $
STSrid
‹‹$ *
:
‹‹* +
return
‹‹, 2
string
‹‹3 9
.
‹‹9 :
Format
‹‹: @
(
‹‹@ A
$str
‹‹A O
,
‹‹O P

parameters
‹‹Q [
[
‹‹[ \
$num
‹‹\ ]
]
‹‹] ^
)
‹‹^ _
;
‹‹_ `
case
›› 
QueryFunctions
›› #
.
››# $
STStartPoint
››$ 0
:
››0 1
return
››2 8
string
››9 ?
.
››? @
Format
››@ F
(
››F G
$str
››G [
,
››[ \

parameters
››] g
[
››g h
$num
››h i
]
››i j
)
››j k
;
››k l
case
ﬁﬁ 
QueryFunctions
ﬁﬁ #
.
ﬁﬁ# $
STSymDifference
ﬁﬁ$ 3
:
ﬁﬁ3 4
return
ﬁﬁ5 ;
string
ﬁﬁ< B
.
ﬁﬁB C
Format
ﬁﬁC I
(
ﬁﬁI J
$str
ﬁﬁJ f
,
ﬁﬁf g

parameters
ﬁﬁh r
[
ﬁﬁr s
$num
ﬁﬁs t
]
ﬁﬁt u
,
ﬁﬁu v

parametersﬁﬁw Å
[ﬁﬁÅ Ç
$numﬁﬁÇ É
]ﬁﬁÉ Ñ
)ﬁﬁÑ Ö
;ﬁﬁÖ Ü
case
ﬂﬂ 
QueryFunctions
ﬂﬂ #
.
ﬂﬂ# $
	STTouches
ﬂﬂ$ -
:
ﬂﬂ- .
return
ﬂﬂ/ 5
string
ﬂﬂ6 <
.
ﬂﬂ< =
Format
ﬂﬂ= C
(
ﬂﬂC D
$str
ﬂﬂD Z
,
ﬂﬂZ [

parameters
ﬂﬂ\ f
[
ﬂﬂf g
$num
ﬂﬂg h
]
ﬂﬂh i
,
ﬂﬂi j

parameters
ﬂﬂk u
[
ﬂﬂu v
$num
ﬂﬂv w
]
ﬂﬂw x
)
ﬂﬂx y
;
ﬂﬂy z
case
‡‡ 
QueryFunctions
‡‡ #
.
‡‡# $
STUnion
‡‡$ +
:
‡‡+ ,
return
‡‡- 3
string
‡‡4 :
.
‡‡: ;
Format
‡‡; A
(
‡‡A B
$str
‡‡B V
,
‡‡V W

parameters
‡‡X b
[
‡‡b c
$num
‡‡c d
]
‡‡d e
,
‡‡e f

parameters
‡‡g q
[
‡‡q r
$num
‡‡r s
]
‡‡s t
)
‡‡t u
;
‡‡u v
case
·· 
QueryFunctions
·· #
.
··# $
STWithin
··$ ,
:
··, -
return
··. 4
string
··5 ;
.
··; <
Format
··< B
(
··B C
$str
··C X
,
··X Y

parameters
··Z d
[
··d e
$num
··e f
]
··f g
,
··g h

parameters
··i s
[
··s t
$num
··t u
]
··u v
)
··v w
;
··w x
case
‚‚ 
QueryFunctions
‚‚ #
.
‚‚# $
STX
‚‚$ '
:
‚‚' (
return
‚‚) /
string
‚‚0 6
.
‚‚6 7
Format
‚‚7 =
(
‚‚= >
$str
‚‚> I
,
‚‚I J

parameters
‚‚K U
[
‚‚U V
$num
‚‚V W
]
‚‚W X
)
‚‚X Y
;
‚‚Y Z
case
„„ 
QueryFunctions
„„ #
.
„„# $
STY
„„$ '
:
„„' (
return
„„) /
string
„„0 6
.
„„6 7
Format
„„7 =
(
„„= >
$str
„„> I
,
„„I J

parameters
„„K U
[
„„U V
$num
„„V W
]
„„W X
)
„„X Y
;
„„Y Z
case
‰‰ 
QueryFunctions
‰‰ #
.
‰‰# $
STGeomFromText
‰‰$ 2
:
‰‰2 3
return
‰‰4 :
string
‰‰; A
.
‰‰A B
Format
‰‰B H
(
‰‰H I
$str
‰‰I d
,
‰‰d e

parameters
‰‰f p
[
‰‰p q
$num
‰‰q r
]
‰‰r s
,
‰‰s t

parameters
‰‰u 
[‰‰ Ä
$num‰‰Ä Å
]‰‰Å Ç
)‰‰Ç É
;‰‰É Ñ
case
ÂÂ 
QueryFunctions
ÂÂ #
.
ÂÂ# $
STPointFromText
ÂÂ$ 3
:
ÂÂ3 4
return
ÂÂ5 ;
string
ÂÂ< B
.
ÂÂB C
Format
ÂÂC I
(
ÂÂI J
$str
ÂÂJ f
,
ÂÂf g

parameters
ÂÂh r
[
ÂÂr s
$num
ÂÂs t
]
ÂÂt u
,
ÂÂu v

parametersÂÂw Å
[ÂÂÅ Ç
$numÂÂÇ É
]ÂÂÉ Ñ
)ÂÂÑ Ö
;ÂÂÖ Ü
case
ÊÊ 
QueryFunctions
ÊÊ #
.
ÊÊ# $
STLineFromText
ÊÊ$ 2
:
ÊÊ2 3
return
ÊÊ4 :
string
ÊÊ; A
.
ÊÊA B
Format
ÊÊB H
(
ÊÊH I
$str
ÊÊI d
,
ÊÊd e

parameters
ÊÊf p
[
ÊÊp q
$num
ÊÊq r
]
ÊÊr s
,
ÊÊs t

parameters
ÊÊu 
[ÊÊ Ä
$numÊÊÄ Å
]ÊÊÅ Ç
)ÊÊÇ É
;ÊÊÉ Ñ
case
ÁÁ 
QueryFunctions
ÁÁ #
.
ÁÁ# $
STPolyFromText
ÁÁ$ 2
:
ÁÁ2 3
return
ÁÁ4 :
string
ÁÁ; A
.
ÁÁA B
Format
ÁÁB H
(
ÁÁH I
$str
ÁÁI d
,
ÁÁd e

parameters
ÁÁf p
[
ÁÁp q
$num
ÁÁq r
]
ÁÁr s
,
ÁÁs t

parameters
ÁÁu 
[ÁÁ Ä
$numÁÁÄ Å
]ÁÁÅ Ç
)ÁÁÇ É
;ÁÁÉ Ñ
case
ËË 
QueryFunctions
ËË #
.
ËË# $
STMPointFromText
ËË$ 4
:
ËË4 5
return
ËË6 <
string
ËË= C
.
ËËC D
Format
ËËD J
(
ËËJ K
$str
ËËK h
,
ËËh i

parameters
ËËj t
[
ËËt u
$num
ËËu v
]
ËËv w
,
ËËw x

parametersËËy É
[ËËÉ Ñ
$numËËÑ Ö
]ËËÖ Ü
)ËËÜ á
;ËËá à
case
ÈÈ 
QueryFunctions
ÈÈ #
.
ÈÈ# $
STMLineFromText
ÈÈ$ 3
:
ÈÈ3 4
return
ÈÈ5 ;
string
ÈÈ< B
.
ÈÈB C
Format
ÈÈC I
(
ÈÈI J
$str
ÈÈJ f
,
ÈÈf g

parameters
ÈÈh r
[
ÈÈr s
$num
ÈÈs t
]
ÈÈt u
,
ÈÈu v

parametersÈÈw Å
[ÈÈÅ Ç
$numÈÈÇ É
]ÈÈÉ Ñ
)ÈÈÑ Ö
;ÈÈÖ Ü
case
ÍÍ 
QueryFunctions
ÍÍ #
.
ÍÍ# $
STMPolyFromText
ÍÍ$ 3
:
ÍÍ3 4
return
ÍÍ5 ;
string
ÍÍ< B
.
ÍÍB C
Format
ÍÍC I
(
ÍÍI J
$str
ÍÍJ f
,
ÍÍf g

parameters
ÍÍh r
[
ÍÍr s
$num
ÍÍs t
]
ÍÍt u
,
ÍÍu v

parametersÍÍw Å
[ÍÍÅ Ç
$numÍÍÇ É
]ÍÍÉ Ñ
)ÍÍÑ Ö
;ÍÍÖ Ü
case
ÎÎ 
QueryFunctions
ÎÎ #
.
ÎÎ# $ 
STGeomCollFromText
ÎÎ$ 6
:
ÎÎ6 7
return
ÎÎ8 >
string
ÎÎ? E
.
ÎÎE F
Format
ÎÎF L
(
ÎÎL M
$str
ÎÎM l
,
ÎÎl m

parameters
ÎÎn x
[
ÎÎx y
$num
ÎÎy z
]
ÎÎz {
,
ÎÎ{ |

parametersÎÎ} á
[ÎÎá à
$numÎÎà â
]ÎÎâ ä
)ÎÎä ã
;ÎÎã å
case
ÏÏ 
QueryFunctions
ÏÏ #
.
ÏÏ# $
STGeomFromWKB
ÏÏ$ 1
:
ÏÏ1 2
return
ÏÏ3 9
string
ÏÏ: @
.
ÏÏ@ A
Format
ÏÏA G
(
ÏÏG H
$str
ÏÏH b
,
ÏÏb c

parameters
ÏÏd n
[
ÏÏn o
$num
ÏÏo p
]
ÏÏp q
,
ÏÏq r

parameters
ÏÏs }
[
ÏÏ} ~
$num
ÏÏ~ 
]ÏÏ Ä
)ÏÏÄ Å
;ÏÏÅ Ç
case
ÌÌ 
QueryFunctions
ÌÌ #
.
ÌÌ# $
STPointFromWKB
ÌÌ$ 2
:
ÌÌ2 3
return
ÌÌ4 :
string
ÌÌ; A
.
ÌÌA B
Format
ÌÌB H
(
ÌÌH I
$str
ÌÌI d
,
ÌÌd e

parameters
ÌÌf p
[
ÌÌp q
$num
ÌÌq r
]
ÌÌr s
,
ÌÌs t

parameters
ÌÌu 
[ÌÌ Ä
$numÌÌÄ Å
]ÌÌÅ Ç
)ÌÌÇ É
;ÌÌÉ Ñ
case
ÓÓ 
QueryFunctions
ÓÓ #
.
ÓÓ# $
STLineFromWKB
ÓÓ$ 1
:
ÓÓ1 2
return
ÓÓ3 9
string
ÓÓ: @
.
ÓÓ@ A
Format
ÓÓA G
(
ÓÓG H
$str
ÓÓH b
,
ÓÓb c

parameters
ÓÓd n
[
ÓÓn o
$num
ÓÓo p
]
ÓÓp q
,
ÓÓq r

parameters
ÓÓs }
[
ÓÓ} ~
$num
ÓÓ~ 
]ÓÓ Ä
)ÓÓÄ Å
;ÓÓÅ Ç
case
ÔÔ 
QueryFunctions
ÔÔ #
.
ÔÔ# $
STPolyFromWKB
ÔÔ$ 1
:
ÔÔ1 2
return
ÔÔ3 9
string
ÔÔ: @
.
ÔÔ@ A
Format
ÔÔA G
(
ÔÔG H
$str
ÔÔH b
,
ÔÔb c

parameters
ÔÔd n
[
ÔÔn o
$num
ÔÔo p
]
ÔÔp q
,
ÔÔq r

parameters
ÔÔs }
[
ÔÔ} ~
$num
ÔÔ~ 
]ÔÔ Ä
)ÔÔÄ Å
;ÔÔÅ Ç
case
 
QueryFunctions
 #
.
# $
STMPointFromWKB
$ 3
:
3 4
return
5 ;
string
< B
.
B C
Format
C I
(
I J
$str
J f
,
f g

parameters
h r
[
r s
$num
s t
]
t u
,
u v

parametersw Å
[Å Ç
$numÇ É
]É Ñ
)Ñ Ö
;Ö Ü
case
ÒÒ 
QueryFunctions
ÒÒ #
.
ÒÒ# $
STMLineFromWKB
ÒÒ$ 2
:
ÒÒ2 3
return
ÒÒ4 :
string
ÒÒ; A
.
ÒÒA B
Format
ÒÒB H
(
ÒÒH I
$str
ÒÒI d
,
ÒÒd e

parameters
ÒÒf p
[
ÒÒp q
$num
ÒÒq r
]
ÒÒr s
,
ÒÒs t

parameters
ÒÒu 
[ÒÒ Ä
$numÒÒÄ Å
]ÒÒÅ Ç
)ÒÒÇ É
;ÒÒÉ Ñ
case
ÚÚ 
QueryFunctions
ÚÚ #
.
ÚÚ# $
STMPolyFromWKB
ÚÚ$ 2
:
ÚÚ2 3
return
ÚÚ4 :
string
ÚÚ; A
.
ÚÚA B
Format
ÚÚB H
(
ÚÚH I
$str
ÚÚI d
,
ÚÚd e

parameters
ÚÚf p
[
ÚÚp q
$num
ÚÚq r
]
ÚÚr s
,
ÚÚs t

parameters
ÚÚu 
[ÚÚ Ä
$numÚÚÄ Å
]ÚÚÅ Ç
)ÚÚÇ É
;ÚÚÉ Ñ
case
ÛÛ 
QueryFunctions
ÛÛ #
.
ÛÛ# $
STGeomCollFromWKB
ÛÛ$ 5
:
ÛÛ5 6
return
ÛÛ7 =
string
ÛÛ> D
.
ÛÛD E
Format
ÛÛE K
(
ÛÛK L
$str
ÛÛL j
,
ÛÛj k

parameters
ÛÛl v
[
ÛÛv w
$num
ÛÛw x
]
ÛÛx y
,
ÛÛy z

parametersÛÛ{ Ö
[ÛÛÖ Ü
$numÛÛÜ á
]ÛÛá à
)ÛÛà â
;ÛÛâ ä
case
ÙÙ 
QueryFunctions
ÙÙ #
.
ÙÙ# $
GeomFromGML
ÙÙ$ /
:
ÙÙ/ 0
return
ÙÙ1 7
string
ÙÙ8 >
.
ÙÙ> ?
Format
ÙÙ? E
(
ÙÙE F
$str
ÙÙF `
,
ÙÙ` a

parameters
ÙÙb l
[
ÙÙl m
$num
ÙÙm n
]
ÙÙn o
,
ÙÙo p

parameters
ÙÙq {
[
ÙÙ{ |
$num
ÙÙ| }
]
ÙÙ} ~
)
ÙÙ~ 
;ÙÙ Ä
case
ıı 
QueryFunctions
ıı #
.
ıı# $

AsBinaryZM
ıı$ .
:
ıı. /
return
ıı0 6
string
ıı7 =
.
ıı= >
Format
ıı> D
(
ııD E
$str
ııE W
,
ııW X

parameters
ııY c
[
ııc d
$num
ııd e
]
ııe f
)
ııf g
;
ııg h
case
ˆˆ 
QueryFunctions
ˆˆ #
.
ˆˆ# $
AsGml
ˆˆ$ )
:
ˆˆ) *
return
ˆˆ+ 1
string
ˆˆ2 8
.
ˆˆ8 9
Format
ˆˆ9 ?
(
ˆˆ? @
$str
ˆˆ@ O
,
ˆˆO P

parameters
ˆˆQ [
[
ˆˆ[ \
$num
ˆˆ\ ]
]
ˆˆ] ^
)
ˆˆ^ _
;
ˆˆ_ `
case
˜˜ 
QueryFunctions
˜˜ #
.
˜˜# $
AsTextZM
˜˜$ ,
:
˜˜, -
return
˜˜. 4
string
˜˜5 ;
.
˜˜; <
Format
˜˜< B
(
˜˜B C
$str
˜˜C S
,
˜˜S T

parameters
˜˜U _
[
˜˜_ `
$num
˜˜` a
]
˜˜a b
)
˜˜b c
;
˜˜c d
case
ÄÄ 
QueryFunctions
ÄÄ #
.
ÄÄ# $
IsValidDetailed
ÄÄ$ 3
:
ÄÄ3 4
return
ÄÄ5 ;
string
ÄÄ< B
.
ÄÄB C
Format
ÄÄC I
(
ÄÄI J
$str
ÄÄJ a
,
ÄÄa b

parameters
ÄÄc m
[
ÄÄm n
$num
ÄÄn o
]
ÄÄo p
)
ÄÄp q
;
ÄÄq r
case
ÅÅ 
QueryFunctions
ÅÅ #
.
ÅÅ# $
M
ÅÅ$ %
:
ÅÅ% &
return
ÅÅ' -
string
ÅÅ. 4
.
ÅÅ4 5
Format
ÅÅ5 ;
(
ÅÅ; <
$str
ÅÅ< G
,
ÅÅG H

parameters
ÅÅI S
[
ÅÅS T
$num
ÅÅT U
]
ÅÅU V
)
ÅÅV W
;
ÅÅW X
case
ÇÇ 
QueryFunctions
ÇÇ #
.
ÇÇ# $
	MakeValid
ÇÇ$ -
:
ÇÇ- .
return
ÇÇ/ 5
string
ÇÇ6 <
.
ÇÇ< =
Format
ÇÇ= C
(
ÇÇC D
$str
ÇÇD W
,
ÇÇW X

parameters
ÇÇY c
[
ÇÇc d
$num
ÇÇd e
]
ÇÇe f
)
ÇÇf g
;
ÇÇg h
case
ÖÖ 
QueryFunctions
ÖÖ #
.
ÖÖ# $
ShortestLineTo
ÖÖ$ 2
:
ÖÖ2 3
return
ÖÖ4 :
string
ÖÖ; A
.
ÖÖA B
Format
ÖÖB H
(
ÖÖH I
$str
ÖÖI d
,
ÖÖd e

parameters
ÖÖf p
[
ÖÖp q
$num
ÖÖq r
]
ÖÖr s
,
ÖÖs t

parameters
ÖÖu 
[ÖÖ Ä
$numÖÖÄ Å
]ÖÖÅ Ç
)ÖÖÇ É
;ÖÖÉ Ñ
case
ÜÜ 
QueryFunctions
ÜÜ #
.
ÜÜ# $
ToString
ÜÜ$ ,
:
ÜÜ, -
return
ÜÜ. 4
string
ÜÜ5 ;
.
ÜÜ; <
Format
ÜÜ< B
(
ÜÜB C
$str
ÜÜC S
,
ÜÜS T

parameters
ÜÜU _
[
ÜÜ_ `
$num
ÜÜ` a
]
ÜÜa b
)
ÜÜb c
;
ÜÜc d
case
áá 
QueryFunctions
áá #
.
áá# $
Z
áá$ %
:
áá% &
return
áá' -
string
áá. 4
.
áá4 5
Format
áá5 ;
(
áá; <
$str
áá< G
,
ááG H

parameters
ááI S
[
ááS T
$num
ááT U
]
ááU V
)
ááV W
;
ááW X
case
èè 
QueryFunctions
èè #
.
èè# $!
CollectionAggregate
èè$ 7
:
èè7 8
return
èè9 ?
string
èè@ F
.
èèF G
Format
èèG M
(
èèM N
$str
èèN _
,
èè_ `

parameters
èèa k
[
èèk l
$num
èèl m
]
èèm n
)
èèn o
;
èèo p
case
íí 
QueryFunctions
íí #
.
íí# $
UnionAggregate
íí$ 2
:
íí2 3
return
íí4 :
string
íí; A
.
ííA B
Format
ííB H
(
ííH I
$str
ííI X
,
ííX Y

parameters
ííZ d
[
ííd e
$num
ííe f
]
ííf g
)
ííg h
;
ííh i
default
îî 
:
îî 
throw
îî 
new
îî "!
QueryBuildException
îî# 6
(
îî6 7!
QueryBuildException
îî7 J
.
îîJ K
ExceptionTypes
îîK Y
.
îîY Z
OperatorNotFound
îîZ j
)
îîj k
;
îîk l
}
ïï 
throw
ññ 
new
ññ !
QueryBuildException
ññ )
(
ññ) *!
QueryBuildException
ññ* =
.
ññ= >
ExceptionTypes
ññ> L
.
ññL M 
OperatorUnsuported
ññM _
)
ññ_ `
;
ññ` a
}
óó 	
private
òò 
string
òò 
ProcessNEXP
òò "
(
òò" #
NEXP
òò# '
exp
òò( +
)
òò+ ,
{
ôô 	
var
öö 
name
öö 
=
öö 
exp
öö 
.
öö 
Name
öö 
;
öö  
var
õõ 

expression
õõ 
=
õõ 
ProcessQueryItem
õõ -
(
õõ- .
exp
õõ. 1
.
õõ1 2

Expression
õõ2 <
)
õõ< =
;
õõ= >
return
úú 
string
úú 
.
úú 
Format
úú  
(
úú  !
$str
úú! -
,
úú- .

expression
úú/ 9
,
úú9 :
name
úú; ?
)
úú? @
;
úú@ A
}
ùù 	
private
ûû 
string
ûû 

ProcessCOL
ûû !
(
ûû! "
COL
ûû" %
col
ûû& )
)
ûû) *
{
üü 	
if
†† 
(
†† 
col
†† 
.
†† 
Name
†† 
==
†† 
$str
†† 
)
††  
return
††! '
col
††( +
.
††+ ,
Name
††, 0
;
††0 1
return
°° 
string
°° 
.
°° 
Format
°°  
(
°°  !
$str
°°! &
,
°°& '
col
°°( +
.
°°+ ,
Name
°°, 0
)
°°0 1
;
°°1 2
}
¢¢ 	
private
££ 
string
££ 

ProcessVAL
££ !
(
££! "
VAL
££" %
val
££& )
)
££) *
{
§§ 	
var
•• 
parameterName
•• 
=
•• 
string
••  &
.
••& '
Format
••' -
(
••- .
$str
••. 5
,
••5 6
_parameters
••7 B
.
••B C
Count
••C H
)
••H I
;
••I J
_parameters
¶¶ 
.
¶¶ 
Add
¶¶ 
(
¶¶ 
new
¶¶ 
QueryParameter
¶¶  .
{
¶¶/ 0
Name
¶¶1 5
=
¶¶6 7
parameterName
¶¶8 E
,
¶¶E F
Value
¶¶G L
=
¶¶M N
val
¶¶O R
.
¶¶R S
Value
¶¶S X
}
¶¶Y Z
)
¶¶Z [
;
¶¶[ \
return
ßß 
parameterName
ßß  
;
ßß  !
}
®® 	
private
©© 
string
©© 

ProcessARR
©© !
(
©©! "
ARR
©©" %
arr
©©& )
)
©©) *
{
™™ 	
var
´´ 
values
´´ 
=
´´ 
arr
´´ 
.
´´ 
Values
´´ #
.
´´# $
Select
´´$ *
(
´´* +
a
´´+ ,
=>
´´- /
ProcessQueryItem
´´0 @
(
´´@ A
a
´´A B
)
´´B C
)
´´C D
.
´´D E
ToArray
´´E L
(
´´L M
)
´´M N
;
´´N O
return
¨¨ 
string
¨¨ 
.
¨¨ 
Format
¨¨  
(
¨¨  !
$str
¨¨! (
,
¨¨( )
string
¨¨* 0
.
¨¨0 1
Join
¨¨1 5
(
¨¨5 6
$str
¨¨6 9
,
¨¨9 :
values
¨¨; A
)
¨¨A B
)
¨¨B C
;
¨¨C D
}
≠≠ 	
private
ÆÆ 
string
ÆÆ 
ProcessOrderItem
ÆÆ '
(
ÆÆ' (
IQueryOrderItem
ÆÆ( 7
item
ÆÆ8 <
)
ÆÆ< =
{
ØØ 	
var
∞∞ 
value
∞∞ 
=
∞∞ 
ProcessQueryItem
∞∞ (
(
∞∞( )
item
∞∞) -
.
∞∞- .
Value
∞∞. 3
)
∞∞3 4
;
∞∞4 5
var
±± 
result
±± 
=
±± 
string
±± 
.
±±  
Format
±±  &
(
±±& '
$str
±±' 0
,
±±0 1
value
±±2 7
,
±±7 8
item
±±9 =
.
±±= >
Type
±±> B
==
±±C E
QueryOrderType
±±F T
.
±±T U
ASC
±±U X
?
±±Y Z
$str
±±[ `
:
±±a b
$str
±±c i
)
±±i j
;
±±j k
return
≤≤ 
result
≤≤ 
;
≤≤ 
}
≥≥ 	
class
∂∂ 
SubQuery
∂∂ 
{
∑∑ 	
public
∏∏ 
bool
∏∏ 

IsFunction
∏∏ "
{
∏∏# $
get
∏∏% (
;
∏∏( )
set
∏∏* -
;
∏∏- .
}
∏∏/ 0
public
ππ 
string
ππ 
	TableName
ππ #
{
ππ$ %
get
ππ& )
;
ππ) *
set
ππ+ .
;
ππ. /
}
ππ0 1
public
∫∫ 
string
∫∫ 

SchemaName
∫∫ $
{
∫∫% &
get
∫∫' *
;
∫∫* +
set
∫∫, /
;
∫∫/ 0
}
∫∫1 2
public
ªª 
object
ªª 
[
ªª 
]
ªª  
FunctionParameters
ªª .
{
ªª/ 0
get
ªª1 4
;
ªª4 5
set
ªª6 9
;
ªª9 :
}
ªª; <
public
ºº 
SubQuery
ºº 
PreviousQuery
ºº )
{
ºº* +
get
ºº, /
;
ºº/ 0
set
ºº1 4
;
ºº4 5
}
ºº6 7
public
ΩΩ 
int
ΩΩ 
Level
ΩΩ 
{
ΩΩ 
get
ΩΩ "
;
ΩΩ" #
set
ΩΩ$ '
;
ΩΩ' (
}
ΩΩ) *
public
ææ 
string
ææ 
Where
ææ 
{
ææ  !
get
ææ" %
;
ææ% &
set
ææ' *
;
ææ* +
}
ææ, -
public
øø 
string
øø 
GroupBy
øø !
{
øø" #
get
øø$ '
;
øø' (
set
øø) ,
;
øø, -
}
øø. /
public
¿¿ 
string
¿¿ 
Select
¿¿  
{
¿¿! "
get
¿¿# &
;
¿¿& '
set
¿¿( +
;
¿¿+ ,
}
¿¿- .
public
¡¡ 
string
¡¡ 
OrderBy
¡¡ !
{
¡¡" #
get
¡¡$ '
;
¡¡' (
set
¡¡) ,
;
¡¡, -
}
¡¡. /
public
¬¬ 
int
¬¬ 
?
¬¬ 
Skip
¬¬ 
{
¬¬ 
get
¬¬ "
;
¬¬" #
set
¬¬$ '
;
¬¬' (
}
¬¬) *
public
√√ 
int
√√ 
?
√√ 
Take
√√ 
{
√√ 
get
√√ "
;
√√" #
set
√√$ '
;
√√' (
}
√√) *
public
≈≈ 
string
≈≈ 

BuildQuery
≈≈ $
(
≈≈$ %
)
≈≈% &
{
∆∆ 
string
«« 
table
«« 
;
«« 
if
»» 
(
»» 
PreviousQuery
»» !
!=
»»" $
null
»»% )
)
»») *
table
…… 
=
…… 
string
…… "
.
……" #
Format
……# )
(
……) *
$str
……* =
,
……= >
PreviousQuery
……? L
.
……L M

BuildQuery
……M W
(
……W X
)
……X Y
,
……Y Z
Level
……[ `
)
……` a
;
……a b
else
   
table
ÀÀ 
=
ÀÀ 
string
ÀÀ "
.
ÀÀ" #
Format
ÀÀ# )
(
ÀÀ) *
$str
ÀÀ* 3
,
ÀÀ3 4

SchemaName
ÀÀ5 ?
!=
ÀÀ@ B
null
ÀÀC G
?
ÀÀH I
string
ÀÀJ P
.
ÀÀP Q
Format
ÀÀQ W
(
ÀÀW X
$str
ÀÀX ^
,
ÀÀ^ _

SchemaName
ÀÀ` j
)
ÀÀj k
:
ÀÀl m
$str
ÀÀn p
,
ÀÀp q
	TableName
ÀÀr {
)
ÀÀ{ |
;
ÀÀ| }
return
ÃÃ 
Combine
ÃÃ 
(
ÃÃ 
table
ÃÃ $
)
ÃÃ$ %
;
ÃÃ% &
}
ÕÕ 
public
ŒŒ 
string
ŒŒ !
BuildQueryWithSpace
ŒŒ -
(
ŒŒ- .
)
ŒŒ. /
{
œœ 
string
–– 
table
–– 
;
–– 
if
—— 
(
—— 
PreviousQuery
—— !
!=
——" $
null
——% )
)
——) *
table
““ 
=
““ 
string
““ "
.
““" #
Format
““# )
(
““) *
$str
““* Q
,
““Q R
string
”” 
.
”” 
Join
”” #
(
””# $
$str
””$ *
,
””* +
PreviousQuery
””, 9
.
””9 :!
BuildQueryWithSpace
””: M
(
””M N
)
””N O
.
””O P
Split
””P U
(
””U V
new
””V Y
char
””Z ^
[
””^ _
]
””_ `
{
””a b
$char
””c g
,
””g h
$char
””i m
}
””n o
,
””o p!
StringSplitOptions””q É
.””É Ñ"
RemoveEmptyEntries””Ñ ñ
)””ñ ó
.””ó ò
Select””ò û
(””û ü
a””ü †
=>””° £
$str””§ ®
+””© ™
a””´ ¨
)””¨ ≠
.””≠ Æ
ToArray””Æ µ
(””µ ∂
)””∂ ∑
)””∑ ∏
,””∏ π
Level””∫ ø
)””ø ¿
;””¿ ¡
else
‘‘ 
table
’’ 
=
’’ 
string
’’ "
.
’’" #
Format
’’# )
(
’’) *
$str
’’* 7
,
’’7 8

SchemaName
’’9 C
!=
’’D F
null
’’G K
?
’’L M
string
’’N T
.
’’T U
Format
’’U [
(
’’[ \
$str
’’\ b
,
’’b c

SchemaName
’’d n
)
’’n o
:
’’p q
$str
’’r t
,
’’t u
	TableName
’’v 
)’’ Ä
;’’Ä Å
return
÷÷ 
CombineWithSpace
÷÷ '
(
÷÷' (
table
÷÷( -
)
÷÷- .
;
÷÷. /
}
◊◊ 
private
ŸŸ 
string
ŸŸ 
Combine
ŸŸ "
(
ŸŸ" #
string
ŸŸ# )
table
ŸŸ* /
)
ŸŸ/ 0
{
⁄⁄ 
var
€€ 
selectStatement
€€ #
=
€€$ %
	GetSelect
€€& /
(
€€/ 0
)
€€0 1
;
€€1 2
var
‹‹ 
whereStatement
‹‹ "
=
‹‹# $
!
‹‹% &
string
‹‹& ,
.
‹‹, -
IsNullOrEmpty
‹‹- :
(
‹‹: ;
Where
‹‹; @
)
‹‹@ A
?
‹‹B C
$str
‹‹D L
+
‹‹M N
Where
‹‹O T
:
‹‹U V
$str
‹‹W Y
;
‹‹Y Z
var
›› 
groupByStatement
›› $
=
››% &
!
››' (
string
››( .
.
››. /
IsNullOrEmpty
››/ <
(
››< =
GroupBy
››= D
)
››D E
?
››F G
$str
››H S
+
››T U
GroupBy
››V ]
:
››^ _
$str
››` b
;
››b c
var
ﬁﬁ 
orderByStatement
ﬁﬁ $
=
ﬁﬁ% &
!
ﬁﬁ' (
string
ﬁﬁ( .
.
ﬁﬁ. /
IsNullOrEmpty
ﬁﬁ/ <
(
ﬁﬁ< =
OrderBy
ﬁﬁ= D
)
ﬁﬁD E
?
ﬁﬁF G
$str
ﬁﬁH S
+
ﬁﬁT U
OrderBy
ﬁﬁV ]
:
ﬁﬁ^ _
$str
ﬁﬁ` b
;
ﬁﬁb c
var
ﬂﬂ 
limitStatement
ﬂﬂ "
=
ﬂﬂ# $
Take
ﬂﬂ% )
!=
ﬂﬂ* ,
null
ﬂﬂ- 1
?
ﬂﬂ2 3
string
ﬂﬂ4 :
.
ﬂﬂ: ;
Format
ﬂﬂ; A
(
ﬂﬂA B
$str
ﬂﬂB N
,
ﬂﬂN O
Take
ﬂﬂP T
)
ﬂﬂT U
:
ﬂﬂV W
$str
ﬂﬂX Z
;
ﬂﬂZ [
var
‡‡ 
offsetStatement
‡‡ #
=
‡‡$ %
Skip
‡‡& *
!=
‡‡+ -
null
‡‡. 2
?
‡‡3 4
string
‡‡5 ;
.
‡‡; <
Format
‡‡< B
(
‡‡B C
$str
‡‡C P
,
‡‡P Q
Skip
‡‡R V
)
‡‡V W
:
‡‡X Y
$str
‡‡Z \
;
‡‡\ ]
var
‚‚ 
result
‚‚ 
=
‚‚ 
string
‚‚ #
.
‚‚# $
Format
‚‚$ *
(
‚‚* +
$str
‚‚+ T
,
‚‚T U
selectStatement
„„ #
,
„„# $
table
„„% *
,
„„* +
whereStatement
‰‰ "
,
‰‰" #
groupByStatement
‰‰$ 4
,
‰‰4 5
orderByStatement
‰‰6 F
,
‰‰F G
limitStatement
‰‰H V
,
‰‰V W
offsetStatement
‰‰X g
)
‰‰g h
;
‰‰h i
return
ÂÂ 
result
ÂÂ 
;
ÂÂ 
}
ÊÊ 
private
ÁÁ 
string
ÁÁ 
CombineWithSpace
ÁÁ +
(
ÁÁ+ ,
string
ÁÁ, 2
table
ÁÁ3 8
)
ÁÁ8 9
{
ËË 
var
ÈÈ 
selectStatement
ÈÈ #
=
ÈÈ$ %
	GetSelect
ÈÈ& /
(
ÈÈ/ 0
)
ÈÈ0 1
+
ÈÈ2 3
$str
ÈÈ4 :
;
ÈÈ: ;
var
ÍÍ 
whereStatement
ÍÍ "
=
ÍÍ# $
!
ÍÍ% &
string
ÍÍ& ,
.
ÍÍ, -
IsNullOrEmpty
ÍÍ- :
(
ÍÍ: ;
Where
ÍÍ; @
)
ÍÍ@ A
?
ÍÍB C
$str
ÍÍD L
+
ÍÍM N
Where
ÍÍO T
+
ÍÍU V
$str
ÍÍW ]
:
ÍÍ^ _
$str
ÍÍ` b
;
ÍÍb c
var
ÎÎ 
groupByStatement
ÎÎ $
=
ÎÎ% &
!
ÎÎ' (
string
ÎÎ( .
.
ÎÎ. /
IsNullOrEmpty
ÎÎ/ <
(
ÎÎ< =
GroupBy
ÎÎ= D
)
ÎÎD E
?
ÎÎF G
$str
ÎÎH S
+
ÎÎT U
GroupBy
ÎÎV ]
+
ÎÎ^ _
$str
ÎÎ` f
:
ÎÎg h
$str
ÎÎi k
;
ÎÎk l
var
ÏÏ 
orderByStatement
ÏÏ $
=
ÏÏ% &
!
ÏÏ' (
string
ÏÏ( .
.
ÏÏ. /
IsNullOrEmpty
ÏÏ/ <
(
ÏÏ< =
OrderBy
ÏÏ= D
)
ÏÏD E
?
ÏÏF G
$str
ÏÏH S
+
ÏÏT U
OrderBy
ÏÏV ]
+
ÏÏ^ _
$str
ÏÏ` f
:
ÏÏg h
$str
ÏÏi k
;
ÏÏk l
var
ÌÌ 
limitStatement
ÌÌ "
=
ÌÌ# $
Take
ÌÌ% )
!=
ÌÌ* ,
null
ÌÌ- 1
?
ÌÌ2 3
string
ÌÌ4 :
.
ÌÌ: ;
Format
ÌÌ; A
(
ÌÌA B
$str
ÌÌB N
,
ÌÌN O
Take
ÌÌP T
)
ÌÌT U
:
ÌÌV W
$str
ÌÌX Z
;
ÌÌZ [
var
ÓÓ 
offsetStatement
ÓÓ #
=
ÓÓ$ %
Skip
ÓÓ& *
!=
ÓÓ+ -
null
ÓÓ. 2
?
ÓÓ3 4
string
ÓÓ5 ;
.
ÓÓ; <
Format
ÓÓ< B
(
ÓÓB C
$str
ÓÓC P
,
ÓÓP Q
Skip
ÓÓR V
)
ÓÓV W
:
ÓÓX Y
$str
ÓÓZ \
;
ÓÓ\ ]
var
 
result
 
=
 
string
 #
.
# $
Format
$ *
(
* +
$str
+ N
,
N O
selectStatement
ÒÒ #
,
ÒÒ# $
table
ÒÒ% *
,
ÒÒ* +
whereStatement
ÚÚ "
,
ÚÚ" #
groupByStatement
ÚÚ$ 4
,
ÚÚ4 5
orderByStatement
ÚÚ6 F
,
ÚÚF G
limitStatement
ÚÚH V
,
ÚÚV W
offsetStatement
ÚÚX g
)
ÚÚg h
;
ÚÚh i
return
ÛÛ 
result
ÛÛ 
;
ÛÛ 
}
ÙÙ 
private
ıı 
string
ıı 
	GetSelect
ıı $
(
ıı$ %
)
ıı% &
{
ˆˆ 
if
˜˜ 
(
˜˜ 
!
˜˜ 
string
˜˜ 
.
˜˜ 
IsNullOrEmpty
˜˜ )
(
˜˜) *
Select
˜˜* 0
)
˜˜0 1
)
˜˜1 2
return
¯¯ 
Select
¯¯ !
;
¯¯! "
if
˙˙ 
(
˙˙ 
GroupBy
˙˙ 
!=
˙˙ 
null
˙˙ #
)
˙˙# $
{
˚˚ 
return
¸¸ 
GroupBy
¸¸ "
;
¸¸" #
}
˝˝ 
else
˛˛ 
return
ˇˇ 
$str
ˇˇ 
;
ˇˇ 
}
ÄÄ 
}
ÅÅ 	
public
ÑÑ 
Query
ÑÑ 
GetInsertQuery
ÑÑ #
(
ÑÑ# $
string
ÑÑ$ *
	tableName
ÑÑ+ 4
,
ÑÑ4 5
string
ÑÑ6 <

schemaName
ÑÑ= G
,
ÑÑG H

Dictionary
ÑÑI S
<
ÑÑS T
string
ÑÑT Z
,
ÑÑZ [
object
ÑÑ\ b
>
ÑÑb c
	parameter
ÑÑd m
,
ÑÑm n
string
ÑÑo u
[
ÑÑu v
]
ÑÑv w

exceptColsÑÑx Ç
)ÑÑÇ É
{
ÖÖ 	
if
ÜÜ 
(
ÜÜ 

exceptCols
ÜÜ 
==
ÜÜ 
null
ÜÜ "
)
ÜÜ" #

exceptCols
áá 
=
áá 
new
áá  
string
áá! '
[
áá' (
$num
áá( )
]
áá) *
;
áá* +
	tableName
ââ 
=
ââ 

schemaName
ââ "
==
ââ# %
null
ââ& *
?
ââ+ ,
	tableName
ââ- 6
:
ââ7 8
string
ââ9 ?
.
ââ? @
Format
ââ@ F
(
ââF G
$str
ââG P
,
ââP Q

schemaName
ââR \
,
ââ\ ]
	tableName
ââ^ g
)
ââg h
;
ââh i
var
ää 
parameterName
ää 
=
ää 
$str
ää  "
;
ää" #
var
ãã 
parameterValue
ãã 
=
ãã  
$str
ãã! #
;
ãã# $
var
åå 
param
åå 
=
åå 
new
åå 
List
åå  
<
åå  !
QueryParameter
åå! /
>
åå/ 0
(
åå0 1
)
åå1 2
;
åå2 3
foreach
çç 
(
çç 
KeyValuePair
çç !
<
çç! "
string
çç" (
,
çç( )
object
çç* 0
>
çç0 1
p
çç2 3
in
çç4 6
	parameter
çç7 @
)
çç@ A
{
éé 
if
èè 
(
èè 

exceptCols
èè 
.
èè 
Contains
èè '
(
èè' (
p
èè( )
.
èè) *
Key
èè* -
)
èè- .
)
èè. /
continue
èè0 8
;
èè8 9
parameterName
êê 
+=
êê  
$str
êê! $
+
êê% &
p
êê' (
.
êê( )
Key
êê) ,
;
êê, -
parameterValue
ëë 
+=
ëë !
$str
ëë" &
+
ëë' (
p
ëë) *
.
ëë* +
Key
ëë+ .
;
ëë. /
param
íí 
.
íí 
Add
íí 
(
íí 
new
íí 
QueryParameter
íí ,
{
íí- .
Name
íí/ 3
=
íí4 5
$str
íí6 9
+
íí: ;
p
íí< =
.
íí= >
Key
íí> A
,
ííA B
Value
ííC H
=
ííI J
_typeMapper
ííK V
.
ííV W
ConvertToSql
ííW c
(
ííc d
p
ííd e
.
ííe f
Value
ííf k
)
íík l
}
íím n
)
íín o
;
íío p
}
ìì 
parameterName
îî 
=
îî 
parameterName
îî )
.
îî) *
	Substring
îî* 3
(
îî3 4
$num
îî4 5
)
îî5 6
;
îî6 7
parameterValue
ïï 
=
ïï 
parameterValue
ïï +
.
ïï+ ,
	Substring
ïï, 5
(
ïï5 6
$num
ïï6 7
)
ïï7 8
;
ïï8 9
string
óó 
sql
óó 
=
óó 
null
óó 
;
óó 
if
òò 
(
òò 
parameterName
òò 
.
òò 
Length
òò $
>
òò% &
$num
òò' (
)
òò( )
sql
ôô 
=
ôô 
string
ôô 
.
ôô 
Format
ôô #
(
ôô# $
$str
ôô$ H
,
ôôH I
	tableName
ôôJ S
,
ôôS T
parameterName
ôôU b
,
ôôb c
parameterValue
ôôd r
)
ôôr s
;
ôôs t
return
öö 
new
öö 
Query
öö 
{
öö 
Command
öö &
=
öö' (
sql
öö) ,
,
öö, -

Parameters
öö. 8
=
öö9 :
param
öö; @
.
öö@ A
ToArray
ööA H
(
ööH I
)
ööI J
}
ööK L
;
ööL M
}
õõ 	
public
úú 
Query
úú 
GetUpdateQuery
úú #
(
úú# $
string
úú$ *
	tableName
úú+ 4
,
úú4 5
string
úú6 <

schemaName
úú= G
,
úúG H

Dictionary
úúI S
<
úúS T
string
úúT Z
,
úúZ [
object
úú\ b
>
úúb c
	parameter
úúd m
,
úúm n
string
úúo u
[
úúu v
]
úúv w
idCols
úúx ~
,
úú~ 
stringúúÄ Ü
[úúÜ á
]úúá à

exceptColsúúâ ì
=úúî ï
nullúúñ ö
,úúö õ
boolúúú †
setNullúú° ®
=úú© ™
falseúú´ ∞
)úú∞ ±
{
ùù 	
	tableName
ûû 
=
ûû 

schemaName
ûû "
==
ûû# %
null
ûû& *
?
ûû+ ,
	tableName
ûû- 6
:
ûû7 8
string
ûû9 ?
.
ûû? @
Format
ûû@ F
(
ûûF G
$str
ûûG P
,
ûûP Q

schemaName
ûûR \
,
ûû\ ]
	tableName
ûû^ g
)
ûûg h
;
ûûh i
var
üü 
parametrename
üü 
=
üü 
$str
üü  "
;
üü" #
var
†† 
param
†† 
=
†† 
new
†† 
List
††  
<
††  !
QueryParameter
††! /
>
††/ 0
(
††0 1
)
††1 2
;
††2 3
foreach
°° 
(
°° 
KeyValuePair
°° !
<
°°! "
string
°°" (
,
°°( )
object
°°* 0
>
°°0 1
p
°°2 3
in
°°4 6
	parameter
°°7 @
)
°°@ A
{
¢¢ 
if
££ 
(
££ 

exceptCols
££ 
.
££ 
Contains
££ '
(
££' (
p
££( )
.
££) *
Key
££* -
)
££- .
)
££. /
continue
££0 8
;
££8 9
parametrename
§§ 
+=
§§  
$str
§§! $
+
§§% &
p
§§' (
.
§§( )
Key
§§) ,
+
§§- .
$str
§§/ 3
+
§§4 5
p
§§6 7
.
§§7 8
Key
§§8 ;
;
§§; <
param
•• 
.
•• 
Add
•• 
(
•• 
new
•• 
QueryParameter
•• ,
{
••- .
Name
••/ 3
=
••4 5
$str
••6 9
+
••: ;
p
••< =
.
••= >
Key
••> A
,
••A B
Value
••C H
=
••I J
_typeMapper
••K V
.
••V W
ConvertToSql
••W c
(
••c d
p
••d e
.
••e f
Value
••f k
)
••k l
}
••m n
)
••n o
;
••o p
}
¶¶ 
if
ßß 
(
ßß 
parametrename
ßß 
.
ßß 
Length
ßß $
>
ßß% &
$num
ßß' (
)
ßß( )
parametrename
®® 
=
®® 
parametrename
®®  -
.
®®- .
	Substring
®®. 7
(
®®7 8
$num
®®8 9
)
®®9 :
;
®®: ;
var
™™ 
whereStatement
™™ 
=
™™  
$str
™™! #
;
™™# $
for
´´ 
(
´´ 
var
´´ 
i
´´ 
=
´´ 
$num
´´ 
;
´´ 
i
´´ 
<
´´ 
idCols
´´  &
.
´´& '
Length
´´' -
;
´´- .
i
´´/ 0
++
´´0 2
)
´´2 3
{
¨¨ 
var
≠≠ 
id
≠≠ 
=
≠≠ 
idCols
≠≠ 
[
≠≠  
i
≠≠  !
]
≠≠! "
;
≠≠" #
whereStatement
ÆÆ 
+=
ÆÆ !
$str
ÆÆ" )
+
ÆÆ* +
id
ÆÆ, .
+
ÆÆ/ 0
$str
ÆÆ1 6
+
ÆÆ7 8
i
ÆÆ9 :
;
ÆÆ: ;
param
ØØ 
.
ØØ 
Add
ØØ 
(
ØØ 
new
ØØ 
QueryParameter
ØØ ,
{
ØØ- .
Name
ØØ/ 3
=
ØØ4 5
$str
ØØ6 :
+
ØØ; <
i
ØØ= >
,
ØØ> ?
Value
ØØ@ E
=
ØØF G
_typeMapper
ØØH S
.
ØØS T
ConvertToSql
ØØT `
(
ØØ` a
	parameter
ØØa j
[
ØØj k
id
ØØk m
]
ØØm n
)
ØØn o
}
ØØp q
)
ØØq r
;
ØØr s
}
∞∞ 
if
±± 
(
±± 
whereStatement
±± 
.
±± 
Length
±± %
>
±±& '
$num
±±( )
)
±±) *
whereStatement
≤≤ 
=
≤≤  
whereStatement
≤≤! /
.
≤≤/ 0
	Substring
≤≤0 9
(
≤≤9 :
$num
≤≤: ;
)
≤≤; <
;
≤≤< =
whereStatement
≥≥ 
=
≥≥ 
whereStatement
≥≥ +
.
≥≥+ ,
Length
≥≥, 2
>
≥≥3 4
$num
≥≥5 6
?
≥≥7 8
$str
≥≥9 B
+
≥≥C D
whereStatement
≥≥E S
:
≥≥T U
$str
≥≥V X
;
≥≥X Y
string
µµ 
sql
µµ 
=
µµ 
null
µµ 
;
µµ 
if
∂∂ 
(
∂∂ 
parametrename
∂∂ 
.
∂∂ 
Length
∂∂ $
>
∂∂% &
$num
∂∂' (
)
∂∂( )
sql
∑∑ 
=
∑∑ 
string
∑∑ 
.
∑∑ 
Format
∑∑ #
(
∑∑# $
$str
∑∑$ <
,
∑∑< =
	tableName
∑∑> G
,
∑∑G H
parametrename
∑∑I V
,
∑∑V W
whereStatement
∑∑X f
)
∑∑f g
;
∑∑g h
return
∏∏ 
new
∏∏ 
Query
∏∏ 
{
∏∏ 
Command
∏∏ &
=
∏∏' (
sql
∏∏) ,
,
∏∏, -

Parameters
∏∏. 8
=
∏∏9 :
param
∏∏; @
.
∏∏@ A
ToArray
∏∏A H
(
∏∏H I
)
∏∏I J
}
∏∏K L
;
∏∏L M
}
ππ 	
public
∫∫ 
Query
∫∫ 
GetDeleteQuery
∫∫ #
(
∫∫# $
string
∫∫$ *
	tableName
∫∫+ 4
,
∫∫4 5
string
∫∫6 <

schemaName
∫∫= G
,
∫∫G H

Dictionary
∫∫I S
<
∫∫S T
string
∫∫T Z
,
∫∫Z [
object
∫∫\ b
>
∫∫b c
	parameter
∫∫d m
,
∫∫m n
string
∫∫o u
[
∫∫u v
]
∫∫v w
idCols
∫∫x ~
)
∫∫~ 
{
ªª 	
	tableName
ºº 
=
ºº 

schemaName
ºº "
==
ºº# %
null
ºº& *
?
ºº+ ,
	tableName
ºº- 6
:
ºº7 8
string
ºº9 ?
.
ºº? @
Format
ºº@ F
(
ººF G
$str
ººG P
,
ººP Q

schemaName
ººR \
,
ºº\ ]
	tableName
ºº^ g
)
ººg h
;
ººh i
var
ΩΩ 
whereStatement
ΩΩ 
=
ΩΩ  
$str
ΩΩ! #
;
ΩΩ# $
var
ææ 
param
ææ 
=
ææ 
new
ææ 
List
ææ  
<
ææ  !
QueryParameter
ææ! /
>
ææ/ 0
(
ææ0 1
)
ææ1 2
;
ææ2 3
for
øø 
(
øø 
var
øø 
i
øø 
=
øø 
$num
øø 
;
øø 
i
øø 
<
øø 
idCols
øø  &
.
øø& '
Length
øø' -
;
øø- .
i
øø/ 0
++
øø0 2
)
øø2 3
{
¿¿ 
var
¡¡ 
id
¡¡ 
=
¡¡ 
idCols
¡¡ 
[
¡¡  
i
¡¡  !
]
¡¡! "
;
¡¡" #
whereStatement
¬¬ 
+=
¬¬ !
$str
¬¬" )
+
¬¬* +
id
¬¬, .
+
¬¬/ 0
$str
¬¬1 6
+
¬¬7 8
i
¬¬9 :
;
¬¬: ;
param
√√ 
.
√√ 
Add
√√ 
(
√√ 
new
√√ 
QueryParameter
√√ ,
{
√√- .
Name
√√/ 3
=
√√4 5
$str
√√6 :
+
√√; <
i
√√= >
,
√√> ?
Value
√√@ E
=
√√F G
_typeMapper
√√H S
.
√√S T
ConvertToSql
√√T `
(
√√` a
	parameter
√√a j
[
√√j k
id
√√k m
]
√√m n
)
√√n o
}
√√p q
)
√√q r
;
√√r s
}
ƒƒ 
whereStatement
≈≈ 
=
≈≈ 
whereStatement
≈≈ +
.
≈≈+ ,
	Substring
≈≈, 5
(
≈≈5 6
$num
≈≈6 7
)
≈≈7 8
;
≈≈8 9
if
«« 
(
«« 
param
«« 
.
«« 
Count
«« 
==
«« 
$num
««  
)
««  !
throw
»» 
new
»» 
	Exception
»» #
(
»»# $
$str
»»$ W
)
»»W X
;
»»X Y
var
   
sql
   
=
   
string
   
.
   
Format
   #
(
  # $
$str
  $ ?
,
  ? @
	tableName
  A J
,
  J K
whereStatement
  L Z
)
  Z [
;
  [ \
return
ÀÀ 
new
ÀÀ 
Query
ÀÀ 
{
ÀÀ 
Command
ÀÀ &
=
ÀÀ' (
sql
ÀÀ) ,
,
ÀÀ, -

Parameters
ÀÀ. 8
=
ÀÀ9 :
param
ÀÀ; @
.
ÀÀ@ A
ToArray
ÀÀA H
(
ÀÀH I
)
ÀÀI J
}
ÀÀK L
;
ÀÀL M
}
ÃÃ 	
public
ŒŒ 
Query
ŒŒ 
GetInsertQuery
ŒŒ #
<
ŒŒ# $
T
ŒŒ$ %
>
ŒŒ% &
(
ŒŒ& '
string
ŒŒ' -
	tableName
ŒŒ. 7
,
ŒŒ7 8
string
ŒŒ9 ?

schemaName
ŒŒ@ J
,
ŒŒJ K
T
ŒŒL M
	parameter
ŒŒN W
,
ŒŒW X

Expression
ŒŒY c
<
ŒŒc d
Func
ŒŒd h
<
ŒŒh i
T
ŒŒi j
,
ŒŒj k
object
ŒŒl r
>
ŒŒr s
>
ŒŒs t

exceptCols
ŒŒu 
)ŒŒ Ä
{
œœ 	
	tableName
–– 
=
–– 

schemaName
–– "
==
––# %
null
––& *
?
––+ ,
	tableName
––- 6
:
––7 8
string
––9 ?
.
––? @
Format
––@ F
(
––F G
$str
––G P
,
––P Q

schemaName
––R \
,
––\ ]
	tableName
––^ g
)
––g h
;
––h i
IEnumerable
—— 
<
—— 
string
—— 
>
—— 
except
——  &
;
——& '
if
““ 
(
““ 

exceptCols
““ 
!=
““ 
null
““ "
)
““" #
except
”” 
=
”” 
ExpressionHelper
”” )
.
””) *
GetPropertyNames
””* :
<
””: ;
T
””; <
,
””< =
object
””> D
>
””D E
(
””E F

exceptCols
””F P
)
””P Q
;
””Q R
else
‘‘ 
except
‘‘ 
=
‘‘ 
new
‘‘ 
string
‘‘ $
[
‘‘$ %
$num
‘‘% &
]
‘‘& '
;
‘‘' (
var
÷÷ 
parameterName
÷÷ 
=
÷÷ 
$str
÷÷  "
;
÷÷" #
var
◊◊ 
parameterValue
◊◊ 
=
◊◊  
$str
◊◊! #
;
◊◊# $
var
ÿÿ 
param
ÿÿ 
=
ÿÿ 
new
ÿÿ 
List
ÿÿ  
<
ÿÿ  !
QueryParameter
ÿÿ! /
>
ÿÿ/ 0
(
ÿÿ0 1
)
ÿÿ1 2
;
ÿÿ2 3
foreach
ŸŸ 
(
ŸŸ 
var
ŸŸ 
p
ŸŸ 
in
ŸŸ 
typeof
ŸŸ $
(
ŸŸ$ %
T
ŸŸ% &
)
ŸŸ& '
.
ŸŸ' (
GetProperties
ŸŸ( 5
(
ŸŸ5 6
)
ŸŸ6 7
.
ŸŸ7 8
Where
ŸŸ8 =
(
ŸŸ= >
p
ŸŸ> ?
=>
ŸŸ@ B
p
ŸŸC D
.
ŸŸD E
GetValue
ŸŸE M
(
ŸŸM N
	parameter
ŸŸN W
,
ŸŸW X
null
ŸŸY ]
)
ŸŸ] ^
!=
ŸŸ_ a
null
ŸŸb f
)
ŸŸf g
)
ŸŸg h
{
⁄⁄ 
if
€€ 
(
€€ 
except
€€ 
.
€€ 
Contains
€€ #
(
€€# $
p
€€$ %
.
€€% &
Name
€€& *
)
€€* +
)
€€+ ,
continue
€€- 5
;
€€5 6
parameterName
‹‹ 
+=
‹‹  
$str
‹‹! $
+
‹‹% &
p
‹‹' (
.
‹‹( )
Name
‹‹) -
;
‹‹- .
parameterValue
›› 
+=
›› !
$str
››" &
+
››' (
p
››) *
.
››* +
Name
››+ /
;
››/ 0
param
ﬁﬁ 
.
ﬁﬁ 
Add
ﬁﬁ 
(
ﬁﬁ 
new
ﬁﬁ 
QueryParameter
ﬁﬁ ,
{
ﬁﬁ- .
Name
ﬁﬁ/ 3
=
ﬁﬁ4 5
$str
ﬁﬁ6 9
+
ﬁﬁ: ;
p
ﬁﬁ< =
.
ﬁﬁ= >
Name
ﬁﬁ> B
,
ﬁﬁB C
Value
ﬁﬁD I
=
ﬁﬁJ K
_typeMapper
ﬁﬁL W
.
ﬁﬁW X
ConvertToSql
ﬁﬁX d
(
ﬁﬁd e
p
ﬁﬁe f
.
ﬁﬁf g
GetValue
ﬁﬁg o
(
ﬁﬁo p
	parameter
ﬁﬁp y
)
ﬁﬁy z
)
ﬁﬁz {
}
ﬁﬁ| }
)
ﬁﬁ} ~
;
ﬁﬁ~ 
}
ﬂﬂ 
parameterName
‡‡ 
=
‡‡ 
parameterName
‡‡ )
.
‡‡) *
	Substring
‡‡* 3
(
‡‡3 4
$num
‡‡4 5
)
‡‡5 6
;
‡‡6 7
parameterValue
·· 
=
·· 
parameterValue
·· +
.
··+ ,
	Substring
··, 5
(
··5 6
$num
··6 7
)
··7 8
;
··8 9
string
„„ 
sql
„„ 
=
„„ 
null
„„ 
;
„„ 
if
‰‰ 
(
‰‰ 
parameterName
‰‰ 
.
‰‰ 
Length
‰‰ $
>
‰‰% &
$num
‰‰' (
)
‰‰( )
sql
ÂÂ 
=
ÂÂ 
string
ÂÂ 
.
ÂÂ 
Format
ÂÂ #
(
ÂÂ# $
$str
ÂÂ$ H
,
ÂÂH I
	tableName
ÂÂJ S
,
ÂÂS T
parameterName
ÂÂU b
,
ÂÂb c
parameterValue
ÂÂd r
)
ÂÂr s
;
ÂÂs t
return
ÊÊ 
new
ÊÊ 
Query
ÊÊ 
{
ÊÊ 
Command
ÊÊ &
=
ÊÊ' (
sql
ÊÊ) ,
,
ÊÊ, -

Parameters
ÊÊ. 8
=
ÊÊ9 :
param
ÊÊ; @
.
ÊÊ@ A
ToArray
ÊÊA H
(
ÊÊH I
)
ÊÊI J
}
ÊÊK L
;
ÊÊL M
}
ÁÁ 	
public
ËË 
Query
ËË 
GetUpdateQuery
ËË #
<
ËË# $
T
ËË$ %
>
ËË% &
(
ËË& '
string
ËË' -
	tableName
ËË. 7
,
ËË7 8
string
ËË9 ?

schemaName
ËË@ J
,
ËËJ K
T
ËËL M
	parameter
ËËN W
,
ËËW X

Expression
ËËY c
<
ËËc d
Func
ËËd h
<
ËËh i
T
ËËi j
,
ËËj k
object
ËËl r
>
ËËr s
>
ËËs t
idCols
ËËu {
,
ËË{ |

ExpressionËË} á
<ËËá à
FuncËËà å
<ËËå ç
TËËç é
,ËËé è
objectËËê ñ
>ËËñ ó
>ËËó ò

exceptColsËËô £
=ËË§ •
nullËË¶ ™
,ËË™ ´
boolËË¨ ∞
setNullËË± ∏
=ËËπ ∫
falseËËª ¿
)ËË¿ ¡
{
ÈÈ 	
	tableName
ÍÍ 
=
ÍÍ 

schemaName
ÍÍ "
==
ÍÍ# %
null
ÍÍ& *
?
ÍÍ+ ,
	tableName
ÍÍ- 6
:
ÍÍ7 8
string
ÍÍ9 ?
.
ÍÍ? @
Format
ÍÍ@ F
(
ÍÍF G
$str
ÍÍG P
,
ÍÍP Q

schemaName
ÍÍR \
,
ÍÍ\ ]
	tableName
ÍÍ^ g
)
ÍÍg h
;
ÍÍh i
IEnumerable
ÎÎ 
<
ÎÎ 
string
ÎÎ 
>
ÎÎ 
except
ÎÎ  &
;
ÎÎ& '
if
ÏÏ 
(
ÏÏ 

exceptCols
ÏÏ 
!=
ÏÏ 
null
ÏÏ "
)
ÏÏ" #
except
ÌÌ 
=
ÌÌ 
ExpressionHelper
ÌÌ )
.
ÌÌ) *
GetPropertyNames
ÌÌ* :
<
ÌÌ: ;
T
ÌÌ; <
,
ÌÌ< =
object
ÌÌ> D
>
ÌÌD E
(
ÌÌE F

exceptCols
ÌÌF P
)
ÌÌP Q
;
ÌÌQ R
else
ÓÓ 
except
ÓÓ 
=
ÓÓ 
new
ÓÓ 
string
ÓÓ $
[
ÓÓ$ %
$num
ÓÓ% &
]
ÓÓ& '
;
ÓÓ' (
var
 
parametrename
 
=
 
$str
  "
;
" #
var
ÒÒ 
param
ÒÒ 
=
ÒÒ 
new
ÒÒ 
List
ÒÒ  
<
ÒÒ  !
QueryParameter
ÒÒ! /
>
ÒÒ/ 0
(
ÒÒ0 1
)
ÒÒ1 2
;
ÒÒ2 3
foreach
ÚÚ 
(
ÚÚ 
var
ÚÚ 
p
ÚÚ 
in
ÚÚ 
typeof
ÚÚ $
(
ÚÚ$ %
T
ÚÚ% &
)
ÚÚ& '
.
ÚÚ' (
GetProperties
ÚÚ( 5
(
ÚÚ5 6
)
ÚÚ6 7
)
ÚÚ7 8
{
ÛÛ 
if
ÙÙ 
(
ÙÙ 
except
ÙÙ 
.
ÙÙ 
Contains
ÙÙ #
(
ÙÙ# $
p
ÙÙ$ %
.
ÙÙ% &
Name
ÙÙ& *
)
ÙÙ* +
)
ÙÙ+ ,
continue
ÙÙ- 5
;
ÙÙ5 6
parametrename
ıı 
+=
ıı  
$str
ıı! %
+
ıı& '
p
ıı( )
.
ıı) *
Name
ıı* .
+
ıı/ 0
$str
ıı1 6
+
ıı7 8
p
ıı9 :
.
ıı: ;
Name
ıı; ?
;
ıı? @
param
ˆˆ 
.
ˆˆ 
Add
ˆˆ 
(
ˆˆ 
new
ˆˆ 
QueryParameter
ˆˆ ,
{
ˆˆ- .
Name
ˆˆ/ 3
=
ˆˆ4 5
$str
ˆˆ6 9
+
ˆˆ: ;
p
ˆˆ< =
.
ˆˆ= >
Name
ˆˆ> B
,
ˆˆB C
Value
ˆˆD I
=
ˆˆJ K
_typeMapper
ˆˆL W
.
ˆˆW X
ConvertToSql
ˆˆX d
(
ˆˆd e
p
ˆˆe f
.
ˆˆf g
GetValue
ˆˆg o
(
ˆˆo p
	parameter
ˆˆp y
)
ˆˆy z
)
ˆˆz {
}
ˆˆ| }
)
ˆˆ} ~
;
ˆˆ~ 
}
˜˜ 
if
¯¯ 
(
¯¯ 
parametrename
¯¯ 
.
¯¯ 
Length
¯¯ $
>
¯¯% &
$num
¯¯' (
)
¯¯( )
parametrename
˘˘ 
=
˘˘ 
parametrename
˘˘  -
.
˘˘- .
	Substring
˘˘. 7
(
˘˘7 8
$num
˘˘8 9
)
˘˘9 :
;
˘˘: ;
IEnumerable
˚˚ 
<
˚˚ 
PropertyInfo
˚˚ $
>
˚˚$ %
ids
˚˚& )
;
˚˚) *
if
¸¸ 
(
¸¸ 

exceptCols
¸¸ 
!=
¸¸ 
null
¸¸ "
)
¸¸" #
ids
˝˝ 
=
˝˝ 
ExpressionHelper
˝˝ &
.
˝˝& '
GetProperties
˝˝' 4
<
˝˝4 5
T
˝˝5 6
,
˝˝6 7
object
˝˝8 >
>
˝˝> ?
(
˝˝? @
idCols
˝˝@ F
)
˝˝F G
;
˝˝G H
else
˛˛ 
ids
˛˛ 
=
˛˛ 
new
˛˛ 
PropertyInfo
˛˛ '
[
˛˛' (
$num
˛˛( )
]
˛˛) *
;
˛˛* +
var
ÅÅ 
whereStatement
ÅÅ 
=
ÅÅ  
$str
ÅÅ! #
;
ÅÅ# $
var
ÇÇ 
k
ÇÇ 
=
ÇÇ 
$num
ÇÇ 
;
ÇÇ 
foreach
ÉÉ 
(
ÉÉ 
var
ÉÉ 
id
ÉÉ 
in
ÉÉ 
ids
ÉÉ "
)
ÉÉ" #
{
ÑÑ 
whereStatement
ÖÖ 
+=
ÖÖ !
$str
ÖÖ" )
+
ÖÖ* +
id
ÖÖ, .
.
ÖÖ. /
Name
ÖÖ/ 3
+
ÖÖ4 5
$str
ÖÖ6 ;
+
ÖÖ< =
k
ÖÖ> ?
;
ÖÖ? @
param
ÜÜ 
.
ÜÜ 
Add
ÜÜ 
(
ÜÜ 
new
ÜÜ 
QueryParameter
ÜÜ ,
{
ÜÜ- .
Name
ÜÜ/ 3
=
ÜÜ4 5
$str
ÜÜ6 :
+
ÜÜ; <
k
ÜÜ= >
,
ÜÜ> ?
Value
ÜÜ@ E
=
ÜÜF G
_typeMapper
ÜÜH S
.
ÜÜS T
ConvertToSql
ÜÜT `
(
ÜÜ` a
id
ÜÜa c
.
ÜÜc d
GetValue
ÜÜd l
(
ÜÜl m
	parameter
ÜÜm v
,
ÜÜv w
null
ÜÜx |
)
ÜÜ| }
)
ÜÜ} ~
}ÜÜ Ä
)ÜÜÄ Å
;ÜÜÅ Ç
k
áá 
++
áá 
;
áá 
}
àà 
if
ââ 
(
ââ 
whereStatement
ââ 
.
ââ 
Length
ââ %
>
ââ& '
$num
ââ( )
)
ââ) *
whereStatement
ää 
=
ää  
whereStatement
ää! /
.
ää/ 0
	Substring
ää0 9
(
ää9 :
$num
ää: ;
)
ää; <
;
ää< =
whereStatement
ãã 
=
ãã 
whereStatement
ãã +
.
ãã+ ,
Length
ãã, 2
>
ãã3 4
$num
ãã5 6
?
ãã7 8
$str
ãã9 B
+
ããC D
whereStatement
ããE S
:
ããT U
$str
ããV X
;
ããX Y
string
çç 
sql
çç 
=
çç 
null
çç 
;
çç 
if
éé 
(
éé 
parametrename
éé 
.
éé 
Length
éé $
>
éé% &
$num
éé' (
)
éé( )
sql
èè 
=
èè 
string
èè 
.
èè 
Format
èè #
(
èè# $
$str
èè$ <
,
èè< =
	tableName
èè> G
,
èèG H
parametrename
èèI V
,
èèV W
whereStatement
èèX f
)
èèf g
;
èèg h
return
êê 
new
êê 
Query
êê 
{
êê 
Command
êê &
=
êê' (
sql
êê) ,
,
êê, -

Parameters
êê. 8
=
êê9 :
param
êê; @
.
êê@ A
ToArray
êêA H
(
êêH I
)
êêI J
}
êêK L
;
êêL M
}
ëë 	
public
íí 
Query
íí 
GetDeleteQuery
íí #
<
íí# $
T
íí$ %
>
íí% &
(
íí& '
string
íí' -
	tableName
íí. 7
,
íí7 8
string
íí9 ?

schemaName
íí@ J
,
ííJ K
T
ííL M
	parameter
ííN W
,
ííW X

Expression
ííY c
<
ííc d
Func
ííd h
<
ííh i
T
ííi j
,
ííj k
object
ííl r
>
íír s
>
íís t
idCols
ííu {
)
íí{ |
{
ìì 	
	tableName
îî 
=
îî 

schemaName
îî "
==
îî# %
null
îî& *
?
îî+ ,
	tableName
îî- 6
:
îî7 8
string
îî9 ?
.
îî? @
Format
îî@ F
(
îîF G
$str
îîG P
,
îîP Q

schemaName
îîR \
,
îî\ ]
	tableName
îî^ g
)
îîg h
;
îîh i
var
ïï 
idProperties
ïï 
=
ïï 
ExpressionHelper
ïï /
.
ïï/ 0
GetProperties
ïï0 =
<
ïï= >
T
ïï> ?
,
ïï? @
object
ïïA G
>
ïïG H
(
ïïH I
idCols
ïïI O
)
ïïO P
;
ïïP Q
var
óó 
whereStatement
óó 
=
óó  
$str
óó! #
;
óó# $
var
òò 
param
òò 
=
òò 
new
òò 
List
òò  
<
òò  !
QueryParameter
òò! /
>
òò/ 0
(
òò0 1
)
òò1 2
;
òò2 3
var
ôô 
k
ôô 
=
ôô 
$num
ôô 
;
ôô 
foreach
öö 
(
öö 
var
öö 
id
öö 
in
öö 
idProperties
öö +
)
öö+ ,
{
õõ 
whereStatement
úú 
+=
úú !
$str
úú" )
+
úú* +
id
úú, .
.
úú. /
Name
úú/ 3
+
úú4 5
$str
úú6 ;
+
úú< =
k
úú> ?
;
úú? @
param
ùù 
.
ùù 
Add
ùù 
(
ùù 
new
ùù 
QueryParameter
ùù ,
{
ùù- .
Name
ùù/ 3
=
ùù4 5
$str
ùù6 :
+
ùù; <
k
ùù= >
,
ùù> ?
Value
ùù@ E
=
ùùF G
_typeMapper
ùùH S
.
ùùS T
ConvertToSql
ùùT `
(
ùù` a
id
ùùa c
.
ùùc d
GetValue
ùùd l
(
ùùl m
	parameter
ùùm v
,
ùùv w
null
ùùx |
)
ùù| }
)
ùù} ~
}ùù Ä
)ùùÄ Å
;ùùÅ Ç
k
ûû 
++
ûû 
;
ûû 
}
üü 
whereStatement
†† 
=
†† 
whereStatement
†† +
.
††+ ,
	Substring
††, 5
(
††5 6
$num
††6 7
)
††7 8
;
††8 9
if
¢¢ 
(
¢¢ 
param
¢¢ 
.
¢¢ 
Count
¢¢ 
==
¢¢ 
$num
¢¢  
)
¢¢  !
throw
££ 
new
££ 
	Exception
££ #
(
££# $
$str
££$ W
)
££W X
;
££X Y
var
•• 
sql
•• 
=
•• 
string
•• 
.
•• 
Format
•• #
(
••# $
$str
••$ ?
,
••? @
	tableName
••A J
,
••J K
whereStatement
••L Z
)
••Z [
;
••[ \
return
¶¶ 
new
¶¶ 
Query
¶¶ 
{
¶¶ 
Command
¶¶ &
=
¶¶' (
sql
¶¶) ,
,
¶¶, -

Parameters
¶¶. 8
=
¶¶9 :
param
¶¶; @
.
¶¶@ A
ToArray
¶¶A H
(
¶¶H I
)
¶¶I J
}
¶¶K L
;
¶¶L M
}
ßß 	
public
©© 
Query
©© 
GetDeleteQuery
©© #
(
©©# $
string
©©$ *
	tableName
©©+ 4
,
©©4 5
string
©©6 <

schemaName
©©= G
,
©©G H
BEXP
©©I M
	condition
©©N W
)
©©W X
{
™™ 	
	tableName
´´ 
=
´´ 

schemaName
´´ "
==
´´# %
null
´´& *
?
´´+ ,
	tableName
´´- 6
:
´´7 8
string
´´9 ?
.
´´? @
Format
´´@ F
(
´´F G
$str
´´G P
,
´´P Q

schemaName
´´R \
,
´´\ ]
	tableName
´´^ g
)
´´g h
;
´´h i
if
¨¨ 
(
¨¨ 
	condition
¨¨ 
==
¨¨ 
null
¨¨ !
)
¨¨! "
throw
¨¨# (
new
¨¨) ,
	Exception
¨¨- 6
(
¨¨6 7
$str
¨¨7 a
)
¨¨a b
;
¨¨b c
_parameters
≠≠ 
.
≠≠ 
Clear
≠≠ 
(
≠≠ 
)
≠≠ 
;
≠≠  
var
ÆÆ 
whereStatement
ÆÆ 
=
ÆÆ  
ProcessWhere
ÆÆ! -
(
ÆÆ- .
	condition
ÆÆ. 7
as
ÆÆ8 :
BEXP
ÆÆ; ?
)
ÆÆ? @
;
ÆÆ@ A
var
ØØ 
sql
ØØ 
=
ØØ 
string
ØØ 
.
ØØ 
Format
ØØ #
(
ØØ# $
$str
ØØ$ ?
,
ØØ? @
	tableName
ØØA J
,
ØØJ K
whereStatement
ØØL Z
)
ØØZ [
;
ØØ[ \
return
∞∞ 
new
∞∞ 
Query
∞∞ 
{
∞∞ 
Command
∞∞ &
=
∞∞' (
sql
∞∞) ,
,
∞∞, -

Parameters
∞∞. 8
=
∞∞9 :
_parameters
∞∞; F
.
∞∞F G
ToArray
∞∞G N
(
∞∞N O
)
∞∞O P
}
∞∞Q R
;
∞∞R S
}
±± 	
public
≥≥ 
Query
≥≥ 
GetInsertQuery
≥≥ #
(
≥≥# $
string
≥≥$ *
	tableName
≥≥+ 4
,
≥≥4 5
string
≥≥6 <

schemaName
≥≥= G
,
≥≥G H
IFeature
≥≥I Q
feature
≥≥R Y
,
≥≥Y Z
string
≥≥[ a 
geometryColumnName
≥≥b t
)
≥≥t u
{
¥¥ 	
	tableName
µµ 
=
µµ 

schemaName
µµ "
==
µµ# %
null
µµ& *
?
µµ+ ,
	tableName
µµ- 6
:
µµ7 8
string
µµ9 ?
.
µµ? @
Format
µµ@ F
(
µµF G
$str
µµG P
,
µµP Q

schemaName
µµR \
,
µµ\ ]
	tableName
µµ^ g
)
µµg h
;
µµh i
var
ππ 
parameterName
ππ 
=
ππ 
$str
ππ  "
;
ππ" #
var
∫∫ 
parameterValue
∫∫ 
=
∫∫  
$str
∫∫! #
;
∫∫# $
var
ªª 
param
ªª 
=
ªª 
new
ªª 
List
ªª  
<
ªª  !
QueryParameter
ªª! /
>
ªª/ 0
(
ªª0 1
)
ªª1 2
;
ªª2 3
foreach
ºº 
(
ºº 
var
ºº 
name
ºº 
in
ºº  
feature
ºº! (
.
ºº( )

Attributes
ºº) 3
.
ºº3 4
GetNames
ºº4 <
(
ºº< =
)
ºº= >
)
ºº> ?
{
ΩΩ 
parameterName
øø 
+=
øø  
$str
øø! $
+
øø% &
name
øø' +
;
øø+ ,
parameterValue
¿¿ 
+=
¿¿ !
$str
¿¿" &
+
¿¿' (
name
¿¿) -
;
¿¿- .
param
¡¡ 
.
¡¡ 
Add
¡¡ 
(
¡¡ 
new
¡¡ 
QueryParameter
¡¡ ,
{
¡¡- .
Name
¡¡/ 3
=
¡¡4 5
$str
¡¡6 9
+
¡¡: ;
name
¡¡< @
,
¡¡@ A
Value
¡¡B G
=
¡¡H I
_typeMapper
¡¡J U
.
¡¡U V
ConvertToSql
¡¡V b
(
¡¡b c
feature
¡¡c j
.
¡¡j k

Attributes
¡¡k u
[
¡¡u v
name
¡¡v z
]
¡¡z {
)
¡¡{ |
}
¡¡} ~
)
¡¡~ 
;¡¡ Ä
}
¬¬ 
parameterName
√√ 
+=
√√ 
$str
√√  
+
√√! " 
geometryColumnName
√√# 5
+
√√6 7
$str
√√8 :
;
√√: ;
parameterValue
ƒƒ 
+=
ƒƒ 
$str
ƒƒ "
+
ƒƒ# $ 
geometryColumnName
ƒƒ% 7
;
ƒƒ7 8
param
≈≈ 
.
≈≈ 
Add
≈≈ 
(
≈≈ 
new
≈≈ 
QueryParameter
≈≈ (
{
≈≈) *
Name
≈≈+ /
=
≈≈0 1
$str
≈≈2 5
+
≈≈6 7 
geometryColumnName
≈≈8 J
,
≈≈J K
Value
≈≈L Q
=
≈≈R S
_typeMapper
≈≈T _
.
≈≈_ `
ConvertToSql
≈≈` l
(
≈≈l m
feature
≈≈m t
.
≈≈t u
Geometry
≈≈u }
)
≈≈} ~
}≈≈ Ä
)≈≈Ä Å
;≈≈Å Ç
parameterName
«« 
=
«« 
parameterName
«« )
.
««) *
	Substring
««* 3
(
««3 4
$num
««4 5
)
««5 6
;
««6 7
parameterValue
»» 
=
»» 
parameterValue
»» +
.
»»+ ,
	Substring
»», 5
(
»»5 6
$num
»»6 7
)
»»7 8
;
»»8 9
string
   
sql
   
=
   
null
   
;
   
if
ÀÀ 
(
ÀÀ 
parameterName
ÀÀ 
.
ÀÀ 
Length
ÀÀ $
>
ÀÀ% &
$num
ÀÀ' (
)
ÀÀ( )
sql
ÃÃ 
=
ÃÃ 
string
ÃÃ 
.
ÃÃ 
Format
ÃÃ #
(
ÃÃ# $
$str
ÃÃ$ H
,
ÃÃH I
	tableName
ÃÃJ S
,
ÃÃS T
parameterName
ÃÃU b
,
ÃÃb c
parameterValue
ÃÃd r
)
ÃÃr s
;
ÃÃs t
return
ÕÕ 
new
ÕÕ 
Query
ÕÕ 
{
ÕÕ 
Command
ÕÕ &
=
ÕÕ' (
sql
ÕÕ) ,
,
ÕÕ, -

Parameters
ÕÕ. 8
=
ÕÕ9 :
param
ÕÕ; @
.
ÕÕ@ A
ToArray
ÕÕA H
(
ÕÕH I
)
ÕÕI J
}
ÕÕK L
;
ÕÕL M
}
ŒŒ 	
public
–– 
Query
–– 
GetDropTableQuery
–– &
(
––& '
string
––' -
	tableName
––. 7
,
––7 8
string
––9 ?

schemaName
––@ J
)
––J K
{
—— 	
	tableName
““ 
=
““ 

schemaName
““ "
==
““# %
null
““& *
?
““+ ,
	tableName
““- 6
:
““7 8
string
““9 ?
.
““? @
Format
““@ F
(
““F G
$str
““G P
,
““P Q

schemaName
““R \
,
““\ ]
	tableName
““^ g
)
““g h
;
““h i
return
”” 
new
”” 
Query
”” 
{
”” 
Command
”” &
=
””' (
string
””) /
.
””/ 0
Format
””0 6
(
””6 7
$str
””7 G
,
””G H
	tableName
””I R
)
””R S
}
””T U
;
””U V
}
‘‘ 	
public
÷÷ 
Query
÷÷ !
GetTableExistsQuery
÷÷ (
(
÷÷( )
string
÷÷) /
	tableName
÷÷0 9
,
÷÷9 :
string
÷÷; A

schemaName
÷÷B L
)
÷÷L M
{
◊◊ 	
var
ÿÿ 
query
ÿÿ 
=
ÿÿ 
ConvertToQuery
ÿÿ &
(
ÿÿ& '
$strÿÿ' ´
,ÿÿ´ ¨
	tableNameÿÿ≠ ∂
.ÿÿ∂ ∑
ToLowerÿÿ∑ æ
(ÿÿæ ø
)ÿÿø ¿
,ÿÿ¿ ¡

schemaNameÿÿ¬ Ã
!=ÿÿÕ œ
nullÿÿ– ‘
?ÿÿ’ ÷

schemaNameÿÿ◊ ·
.ÿÿ· ‚
ToLowerÿÿ‚ È
(ÿÿÈ Í
)ÿÿÍ Î
:ÿÿÏ Ì

schemaNameÿÿÓ ¯
)ÿÿ¯ ˘
;ÿÿ˘ ˙
return
ŸŸ 
query
ŸŸ 
;
ŸŸ 
}
⁄⁄ 	
public
‹‹ 
Query
‹‹ 
GetUpdateQuery
‹‹ #
(
‹‹# $
string
‹‹$ *
	tableName
‹‹+ 4
,
‹‹4 5
string
‹‹6 <

schemaName
‹‹= G
,
‹‹G H
IFeature
‹‹I Q
feature
‹‹R Y
,
‹‹Y Z
string
‹‹[ a 
geometryColumnName
‹‹b t
,
‹‹t u
string
‹‹v |
[
‹‹| }
]
‹‹} ~
idCols‹‹ Ö
,‹‹Ö Ü
bool‹‹á ã
setNull‹‹å ì
=‹‹î ï
false‹‹ñ õ
)‹‹õ ú
{
›› 	
var
ﬂﬂ 
parametrename
ﬂﬂ 
=
ﬂﬂ 
$str
ﬂﬂ  "
;
ﬂﬂ" #
var
‡‡ 
param
‡‡ 
=
‡‡ 
new
‡‡ 
List
‡‡  
<
‡‡  !
QueryParameter
‡‡! /
>
‡‡/ 0
(
‡‡0 1
)
‡‡1 2
;
‡‡2 3
foreach
·· 
(
·· 
var
·· 
name
·· 
in
··  
feature
··! (
.
··( )

Attributes
··) 3
.
··3 4
GetNames
··4 <
(
··< =
)
··= >
)
··> ?
{
‚‚ 
var
„„ 
value
„„ 
=
„„ 
_typeMapper
„„ '
.
„„' (
ConvertToSql
„„( 4
(
„„4 5
feature
„„5 <
.
„„< =

Attributes
„„= G
[
„„G H
name
„„H L
]
„„L M
)
„„M N
;
„„N O
if
‰‰ 
(
‰‰ 
!
‰‰ 
setNull
‰‰ 
&&
‰‰ 
value
‰‰  %
==
‰‰& (
null
‰‰) -
)
‰‰- .
continue
‰‰/ 7
;
‰‰7 8
parametrename
ÊÊ 
+=
ÊÊ  
$str
ÊÊ! %
+
ÊÊ& '
name
ÊÊ( ,
+
ÊÊ- .
$str
ÊÊ/ 4
+
ÊÊ5 6
value
ÊÊ7 <
;
ÊÊ< =
param
ÁÁ 
.
ÁÁ 
Add
ÁÁ 
(
ÁÁ 
new
ÁÁ 
QueryParameter
ÁÁ ,
{
ÁÁ- .
Name
ÁÁ/ 3
=
ÁÁ4 5
$str
ÁÁ6 9
+
ÁÁ: ;
name
ÁÁ< @
,
ÁÁ@ A
Value
ÁÁB G
=
ÁÁH I
value
ÁÁJ O
}
ÁÁP Q
)
ÁÁQ R
;
ÁÁR S
}
ËË 
var
ÈÈ 
geometry
ÈÈ 
=
ÈÈ 
_typeMapper
ÈÈ &
.
ÈÈ& '
ConvertToSql
ÈÈ' 3
(
ÈÈ3 4
feature
ÈÈ4 ;
.
ÈÈ; <
Geometry
ÈÈ< D
)
ÈÈD E
;
ÈÈE F
if
ÎÎ 
(
ÎÎ 
setNull
ÎÎ 
||
ÎÎ 
geometry
ÎÎ #
!=
ÎÎ$ &
null
ÎÎ' +
)
ÎÎ+ ,
{
ÏÏ 
parametrename
ÌÌ 
+=
ÌÌ  
$str
ÌÌ! %
+
ÌÌ& ' 
geometryColumnName
ÌÌ( :
+
ÌÌ; <
$str
ÌÌ= B
+
ÌÌC D 
geometryColumnName
ÌÌE W
;
ÌÌW X
param
ÓÓ 
.
ÓÓ 
Add
ÓÓ 
(
ÓÓ 
new
ÓÓ 
QueryParameter
ÓÓ ,
{
ÓÓ- .
Name
ÓÓ/ 3
=
ÓÓ4 5
$str
ÓÓ6 9
+
ÓÓ: ; 
geometryColumnName
ÓÓ< N
,
ÓÓN O
Value
ÓÓP U
=
ÓÓV W
geometry
ÓÓX `
}
ÓÓa b
)
ÓÓb c
;
ÓÓc d
}
ÔÔ 
if
ÒÒ 
(
ÒÒ 
parametrename
ÒÒ 
.
ÒÒ 
Length
ÒÒ $
>
ÒÒ% &
$num
ÒÒ' (
)
ÒÒ( )
parametrename
ÚÚ 
=
ÚÚ 
parametrename
ÚÚ  -
.
ÚÚ- .
	Substring
ÚÚ. 7
(
ÚÚ7 8
$num
ÚÚ8 9
)
ÚÚ9 :
;
ÚÚ: ;
var
ÙÙ 
whereStatement
ÙÙ 
=
ÙÙ  
$str
ÙÙ! #
;
ÙÙ# $
for
ıı 
(
ıı 
var
ıı 
i
ıı 
=
ıı 
$num
ıı 
;
ıı 
i
ıı 
<
ıı 
idCols
ıı  &
.
ıı& '
Length
ıı' -
;
ıı- .
i
ıı/ 0
++
ıı0 2
)
ıı2 3
{
ˆˆ 
var
˜˜ 
id
˜˜ 
=
˜˜ 
idCols
˜˜ 
[
˜˜  
i
˜˜  !
]
˜˜! "
;
˜˜" #
whereStatement
¯¯ 
+=
¯¯ !
$str
¯¯" *
+
¯¯+ ,
id
¯¯- /
+
¯¯0 1
$str
¯¯2 8
+
¯¯9 :
i
¯¯; <
;
¯¯< =
param
˘˘ 
.
˘˘ 
Add
˘˘ 
(
˘˘ 
new
˘˘ 
QueryParameter
˘˘ ,
{
˘˘- .
Name
˘˘/ 3
=
˘˘4 5
$str
˘˘6 :
+
˘˘; <
i
˘˘= >
,
˘˘> ?
Value
˘˘@ E
=
˘˘F G
_typeMapper
˘˘H S
.
˘˘S T
ConvertToSql
˘˘T `
(
˘˘` a
feature
˘˘a h
.
˘˘h i

Attributes
˘˘i s
[
˘˘s t
id
˘˘t v
]
˘˘v w
)
˘˘w x
}
˘˘y z
)
˘˘z {
;
˘˘{ |
}
˙˙ 
if
˚˚ 
(
˚˚ 
whereStatement
˚˚ 
.
˚˚ 
Length
˚˚ %
>
˚˚& '
$num
˚˚( )
)
˚˚) *
whereStatement
¸¸ 
=
¸¸  
whereStatement
¸¸! /
.
¸¸/ 0
	Substring
¸¸0 9
(
¸¸9 :
$num
¸¸: ;
)
¸¸; <
;
¸¸< =
whereStatement
˝˝ 
=
˝˝ 
whereStatement
˝˝ +
.
˝˝+ ,
Length
˝˝, 2
>
˝˝3 4
$num
˝˝5 6
?
˝˝7 8
$str
˝˝9 B
+
˝˝C D
whereStatement
˝˝E S
:
˝˝T U
$str
˝˝V X
;
˝˝X Y
string
ˇˇ 
sql
ˇˇ 
=
ˇˇ 
null
ˇˇ 
;
ˇˇ 
if
ÄÄ 
(
ÄÄ 
parametrename
ÄÄ 
.
ÄÄ 
Length
ÄÄ $
>
ÄÄ% &
$num
ÄÄ' (
)
ÄÄ( )
sql
ÅÅ 
=
ÅÅ 
string
ÅÅ 
.
ÅÅ 
Format
ÅÅ #
(
ÅÅ# $
$str
ÅÅ$ >
,
ÅÅ> ?
	tableName
ÅÅ@ I
,
ÅÅI J
parametrename
ÅÅK X
,
ÅÅX Y
whereStatement
ÅÅZ h
)
ÅÅh i
;
ÅÅi j
return
ÇÇ 
new
ÇÇ 
Query
ÇÇ 
{
ÇÇ 
Command
ÇÇ &
=
ÇÇ' (
sql
ÇÇ) ,
,
ÇÇ, -

Parameters
ÇÇ. 8
=
ÇÇ9 :
param
ÇÇ; @
.
ÇÇ@ A
ToArray
ÇÇA H
(
ÇÇH I
)
ÇÇI J
}
ÇÇK L
;
ÇÇL M
}
ÉÉ 	
public
ÖÖ 
Query
ÖÖ &
GetUpdateQueryBulkUpdate
ÖÖ -
<
ÖÖ- .
T
ÖÖ. /
>
ÖÖ/ 0
(
ÖÖ0 1
string
ÖÖ1 7
	tableName
ÖÖ8 A
,
ÖÖA B
string
ÖÖC I

schemaName
ÖÖJ T
,
ÖÖT U
List
ÖÖV Z
<
ÖÖZ [
T
ÖÖ[ \
>
ÖÖ\ ]
	parameter
ÖÖ^ g
,
ÖÖg h

Expression
ÖÖi s
<
ÖÖs t
Func
ÖÖt x
<
ÖÖx y
T
ÖÖy z
,
ÖÖz {
objectÖÖ| Ç
>ÖÖÇ É
>ÖÖÉ Ñ
idColsÖÖÖ ã
,ÖÖã å

ExpressionÖÖç ó
<ÖÖó ò
FuncÖÖò ú
<ÖÖú ù
TÖÖù û
,ÖÖû ü
objectÖÖ† ¶
>ÖÖ¶ ß
>ÖÖß ®

exceptColsÖÖ© ≥
=ÖÖ¥ µ
nullÖÖ∂ ∫
,ÖÖ∫ ª
boolÖÖº ¿
setNullÖÖ¡ »
=ÖÖ…  
falseÖÖÀ –
)ÖÖ– —
{
ÜÜ 	
throw
áá 
new
áá %
NotImplementedException
áá -
(
áá- .
)
áá. /
;
áá/ 0
}
àà 	
public
ââ 
Query
ââ &
GetInsertQueryBulkInsert
ââ -
<
ââ- .
T
ââ. /
>
ââ/ 0
(
ââ0 1
string
ââ1 7
	tableName
ââ8 A
,
ââA B
string
ââC I

schemaName
ââJ T
,
ââT U
List
ââV Z
<
ââZ [
T
ââ[ \
>
ââ\ ]
	parameter
ââ^ g
,
ââg h
bool
ââi m
setNull
âân u
=
ââv w
false
ââx }
)
ââ} ~
{
ää 	
throw
ãã 
new
ãã %
NotImplementedException
ãã -
(
ãã- .
)
ãã. /
;
ãã/ 0
}
åå 	
}
çç 
}éé õÓ
§D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\DataBaseHelper\PostgisHelper\PostgisQueryExecutor.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Database %
.% &
Postgis& -
{ 
class 	 
PostgisQueryExecutor
 
:  
IQueryExecutor! /
{ 
NpgsqlConnection 
_connection $
;$ %
ITypeMapper 
_typeMapper 
;  
NpgsqlTransaction 
_transaction &
;& '
public 
static 
Action 
< 
Query "
," #
ResultStatus$ 0
>0 1
OnExecuionComplate2 D
{E F
getG J
;J K
setL O
;O P
}Q R
public 
string 

ServerName  
{! "
get# &
{' (
return) /
_connection0 ;
.; <

DataSource< F
;F G
}H I
}J K
public 
string 
DbName 
{ 
get "
{# $
return% +
_connection, 7
.7 8
Database8 @
;@ A
}B C
}D E
public 
bool 
IsTransactionOpen %
{& '
get( +
{, -
return. 4
_transaction5 A
!=B D
nullE I
&&J L
_transactionM Y
.Y Z

ConnectionZ d
!=e g
nullh l
;l m
}n o
}p q
public 
string 
ConnectionString &
{' (
get) ,
{- .
return/ 5
_connection6 A
.A B
ConnectionStringB R
;R S
}T U
}V W
public  
PostgisQueryExecutor #
(# $
string$ *
connectionString+ ;
,; <
ITypeMapper= H

typeMapperI S
,S T
DbTransactionU b
transactionc n
=o p
nullq u
)u v
{   	
_typeMapper!! 
=!! 

typeMapper!! $
;!!$ %
_transaction"" 
="" 
("" 
NpgsqlTransaction"" -
)""- .
transaction"". 9
;""9 :
_connection## 
=## 
_transaction## &
==##' )
null##* .
||##/ 1
_transaction##2 >
.##> ?

Connection##? I
==##J L
null##M Q
?##R S
new$$  #
NpgsqlConnection$$$ 4
($$4 5
connectionString$$5 E
)$$E F
:$$G H
_transaction%%  ,
.%%, -

Connection%%- 7
;%%7 8
}'' 	
public)) 
void)) 
Dispose)) 
()) 
))) 
{** 	
if++ 
(++ 
_transaction++ 
==++ 
null++  $
)++$ %
{,, 
_connection-- 
.-- 
Close-- !
(--! "
)--" #
;--# $
_connection.. 
... 
Dispose.. #
(..# $
)..$ %
;..% &
_connection// 
=// 
null// "
;//" #
}00 
}11 	
public44 
T44 
ExecuteScaler44 
<44 
T44  
>44  !
(44! "
Query44" '
query44( -
)44- .
{55 	
using66 
(66 
var66 
cmd66 
=66 

GetCommand66 '
(66' (
query66( -
)66- .
)66. /
{77 
var88 
ret88 
=88 
cmd88 
.88 
ExecuteScalar88 +
(88+ ,
)88, -
;88- .
return99 
ret99 
==99 
DBNull99 $
.99$ %
Value99% *
?99+ ,
default99- 4
(994 5
T995 6
)996 7
:998 9
(99: ;
T99; <
)99< =
Convert99= D
.99D E

ChangeType99E O
(99O P
ret99P S
,99S T
typeof99U [
(99[ \
T99\ ]
)99] ^
)99^ _
;99_ `
}:: 
};; 	
public== 
FeatureCollection==  
ExecuteFeature==! /
(==/ 0
Query==0 5
query==6 ;
)==; <
{>> 	
using?? 
(?? 
var?? 
cmd?? 
=?? 

GetCommand?? '
(??' (
query??( -
)??- .
)??. /
{@@ 
varAA 

collectionAA 
=AA  
newAA! $
FeatureCollectionAA% 6
(AA6 7
)AA7 8
;AA8 9
varBB 
	geoReaderBB 
=BB 
newBB  #
NetTopologySuiteBB$ 4
.BB4 5
IOBB5 7
.BB7 8
	WKBReaderBB8 A
(BBA B
)BBB C
;BBC D
usingCC 
(CC 
varCC 
readerCC !
=CC" #
cmdCC$ '
.CC' (
ExecuteReaderCC( 5
(CC5 6
)CC6 7
)CC7 8
{DD 
whileEE 
(EE 
readerEE !
.EE! "
ReadEE" &
(EE& '
)EE' (
)EE( )
{FF 
	IGeometryGG !
geometryGG" *
=GG+ ,
nullGG- 1
;GG1 2
IAttributesTableHH (
tableHH) .
=HH/ 0
newHH1 4
AttributesTableHH5 D
(HHD E
)HHE F
;HHF G
forII 
(II 
intII  
iII! "
=II# $
$numII% &
;II& '
iII( )
<II* +
readerII, 2
.II2 3

FieldCountII3 =
;II= >
iII? @
++II@ B
)IIB C
{JJ 
objectKK "
valKK# &
;KK& '
ifLL 
(LL  
!LL  !
typeofLL! '
(LL' (
NpgsqlTypesLL( 3
.LL3 4
PostgisGeometryLL4 C
)LLC D
.LLD E
IsAssignableFromLLE U
(LLU V
readerLLV \
.LL\ ]
GetFieldTypeLL] i
(LLi j
iLLj k
)LLk l
)LLl m
)LLm n
valMM  #
=MM$ %
_typeMapperMM& 1
.MM1 2
ConvertFromSqlMM2 @
(MM@ A
readerMMA G
.MMG H
GetValueMMH P
(MMP Q
iMMQ R
)MMR S
)MMS T
;MMT U
elseNN  
valNN! $
=NN% &
!NN' (
readerNN( .
.NN. /
IsDBNullNN/ 7
(NN7 8
iNN8 9
)NN9 :
?NN; <
	geoReaderNN= F
.NNF G
ReadNNG K
(NNK L
readerNNL R
.NNR S
GetFieldValueNNS `
<NN` a
byteNNa e
[NNe f
]NNf g
>NNg h
(NNh i
iNNi j
)NNj k
)NNk l
:NNm n
nullNNo s
;NNs t
ifPP 
(PP  
!PP  !
(PP! "
valPP" %
isPP& (
	IGeometryPP) 2
)PP2 3
)PP3 4
tableQQ  %
.QQ% &
AddAttributeQQ& 2
(QQ2 3
readerQQ3 9
.QQ9 :
GetNameQQ: A
(QQA B
iQQB C
)QQC D
,QQD E
valQQF I
)QQI J
;QQJ K
elseRR  
geometryRR! )
=RR* +
(RR, -
	IGeometryRR- 6
)RR6 7
valRR7 :
;RR: ;
}SS 

collectionTT "
.TT" #
AddTT# &
(TT& '
newTT' *
FeatureTT+ 2
(TT2 3
geometryTT3 ;
,TT; <
tableTT= B
)TTB C
)TTC D
;TTD E
}UU 
}VV 
returnWW 

collectionWW !
;WW! "
}XX 
}YY 	
public[[ 
IEnumerable[[ 
<[[ 
T[[ 
>[[ 
ExecuteReader[[ +
<[[+ ,
T[[, -
>[[- .
([[. /
Query[[/ 4
query[[5 :
)[[: ;
{\\ 	
using]] 
(]] 
var]] 
cmd]] 
=]] 

GetCommand]] '
(]]' (
query]]( -
)]]- .
)]]. /
{^^ 
using__ 
(__ 
var__ 
reader__ !
=__" #
cmd__$ '
.__' (
ExecuteReader__( 5
(__5 6
)__6 7
)__7 8
{`` 
varaa 
	geoReaderaa !
=aa" #
newaa$ '
NetTopologySuiteaa( 8
.aa8 9
IOaa9 ;
.aa; <
	WKBReaderaa< E
(aaE F
)aaF G
;aaG H
whilebb 
(bb 
readerbb !
.bb! "
Readbb" &
(bb& '
)bb' (
)bb( )
{cc 
ifdd 
(dd 
IsAnonymousdd '
(dd' (
typeofdd( .
(dd. /
Tdd/ 0
)dd0 1
)dd1 2
)dd2 3
{ee 
varff 
argsff  $
=ff% &
newff' *
Listff+ /
<ff/ 0
objectff0 6
>ff6 7
(ff7 8
)ff8 9
;ff9 :
forgg 
(gg  !
intgg! $
igg% &
=gg' (
$numgg) *
;gg* +
igg, -
<gg. /
readergg0 6
.gg6 7

FieldCountgg7 A
;ggA B
iggC D
++ggD F
)ggF G
{hh 
objectii  &
valii' *
;ii* +
ifjj  "
(jj# $
!jj$ %
typeofjj% +
(jj+ ,
NpgsqlTypesjj, 7
.jj7 8
PostgisGeometryjj8 G
)jjG H
.jjH I
IsAssignableFromjjI Y
(jjY Z
readerjjZ `
.jj` a
GetFieldTypejja m
(jjm n
ijjn o
)jjo p
)jjp q
)jjq r
valkk$ '
=kk( )
_typeMapperkk* 5
.kk5 6
ConvertFromSqlkk6 D
(kkD E
readerkkE K
.kkK L
GetValuekkL T
(kkT U
ikkU V
)kkV W
)kkW X
;kkX Y
elsell  $
valll% (
=ll) *
!ll+ ,
readerll, 2
.ll2 3
IsDBNullll3 ;
(ll; <
ill< =
)ll= >
?ll? @
	geoReaderllA J
.llJ K
ReadllK O
(llO P
readerllP V
.llV W
GetFieldValuellW d
<lld e
bytelle i
[lli j
]llj k
>llk l
(lll m
illm n
)lln o
)llo p
:llq r
nulllls w
;llw x
argsmm  $
.mm$ %
Addmm% (
(mm( )
valmm) ,
)mm, -
;mm- .
}nn 
Too 
retoo !
=oo" #
(oo$ %
Too% &
)oo& '
	Activatoroo' 0
.oo0 1
CreateInstanceoo1 ?
(oo? @
typeofoo@ F
(ooF G
TooG H
)ooH I
,ooI J
argsooK O
.ooO P
ToArrayooP W
(ooW X
)ooX Y
)ooY Z
;ooZ [
yieldpp !
returnpp" (
retpp) ,
;pp, -
}qq 
elserr 
{ss 
Ttt 
rettt !
=tt" #
(tt$ %
Ttt% &
)tt& '
	Activatortt' 0
.tt0 1
CreateInstancett1 ?
(tt? @
typeoftt@ F
(ttF G
TttG H
)ttH I
)ttI J
;ttJ K
foruu 
(uu  !
intuu! $
iuu% &
=uu' (
$numuu) *
;uu* +
iuu, -
<uu. /
readeruu0 6
.uu6 7

FieldCountuu7 A
;uuA B
iuuC D
++uuD F
)uuF G
{vv 
objectww  &
valww' *
;ww* +
ifxx  "
(xx# $
!xx$ %
typeofxx% +
(xx+ ,
NpgsqlTypesxx, 7
.xx7 8
PostgisGeometryxx8 G
)xxG H
.xxH I
IsAssignableFromxxI Y
(xxY Z
readerxxZ `
.xx` a
GetFieldTypexxa m
(xxm n
ixxn o
)xxo p
)xxp q
)xxq r
valyy$ '
=yy( )
_typeMapperyy* 5
.yy5 6
ConvertFromSqlyy6 D
(yyD E
readeryyE K
.yyK L
GetValueyyL T
(yyT U
iyyU V
)yyV W
)yyW X
;yyX Y
elsezz  $
valzz% (
=zz) *
!zz+ ,
readerzz, 2
.zz2 3
IsDBNullzz3 ;
(zz; <
izz< =
)zz= >
?zz? @
	geoReaderzzA J
.zzJ K
ReadzzK O
(zzO P
readerzzP V
.zzV W
GetFieldValuezzW d
<zzd e
bytezze i
[zzi j
]zzj k
>zzk l
(zzl m
izzm n
)zzn o
)zzo p
:zzq r
nullzzs w
;zzw x
var{{  #
info{{$ (
={{) *
ret{{+ .
.{{. /
GetType{{/ 6
({{6 7
){{7 8
.{{8 9
GetProperties{{9 F
({{F G
){{G H
.{{H I
Where{{I N
({{N O
a{{O P
=>{{Q S
a{{T U
.{{U V
Name{{V Z
.{{Z [
ToLower{{[ b
({{b c
){{c d
=={{e g
reader{{h n
.{{n o
GetName{{o v
({{v w
i{{w x
){{x y
){{y z
.{{z {
FirstOrDefault	{{{ â
(
{{â ä
)
{{ä ã
;
{{ã å
if||  "
(||# $
info||$ (
!=||) +
null||, 0
&&||1 3
val||4 7
!=||8 :
null||; ?
)||? @
info}}$ (
.}}( )
SetValue}}) 1
(}}1 2
ret}}2 5
,}}5 6
Convert}}7 >
.}}> ?

ChangeType}}? I
(}}I J
val}}J M
,}}M N"
GetTypeWithoutNullable}}O e
(}}e f
info}}f j
.}}j k
PropertyType}}k w
)}}w x
)}}x y
,}}y z
null}}{ 
)	}} Ä
;
}}Ä Å
}~~ 
yield !
return" (
ret) ,
;, -
}
ÄÄ 
}
ÅÅ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
private
ÜÜ 
Type
ÜÜ $
GetTypeWithoutNullable
ÜÜ +
(
ÜÜ+ ,
Type
ÜÜ, 0
type
ÜÜ1 5
)
ÜÜ5 6
{
áá 	
if
àà 
(
àà 
type
àà 
.
àà 
IsGenericType
àà "
&&
àà# %
type
àà& *
.
àà* +&
GetGenericTypeDefinition
àà+ C
(
ààC D
)
ààD E
.
ààE F
Equals
ààF L
(
ààL M
typeof
ààM S
(
ààS T
Nullable
ààT \
<
àà\ ]
>
àà] ^
)
àà^ _
)
àà_ `
)
àà` a
return
ââ 
Nullable
ââ 
.
ââ  
GetUnderlyingType
ââ  1
(
ââ1 2
type
ââ2 6
)
ââ6 7
;
ââ7 8
else
ää 
return
ãã 
type
ãã 
;
ãã 
}
åå 	
public
éé 
IEnumerable
éé 
<
éé 

Dictionary
éé %
<
éé% &
string
éé& ,
,
éé, -
object
éé. 4
>
éé4 5
>
éé5 6
ExecuteReader
éé7 D
(
ééD E
Query
ééE J
query
ééK P
)
ééP Q
{
èè 	
using
êê 
(
êê 
var
êê 
cmd
êê 
=
êê 

GetCommand
êê '
(
êê' (
query
êê( -
)
êê- .
)
êê. /
{
ëë 
cmd
ìì 
.
ìì &
AllResultTypesAreUnknown
ìì ,
=
ìì- .
true
ìì/ 3
;
ìì3 4
using
îî 
(
îî 
var
îî 
reader
îî !
=
îî" #
cmd
îî$ '
.
îî' (
ExecuteReader
îî( 5
(
îî5 6
)
îî6 7
)
îî7 8
{
ïï 
var
ññ 
	geoReader
ññ !
=
ññ" #
new
ññ$ '
NetTopologySuite
ññ( 8
.
ññ8 9
IO
ññ9 ;
.
ññ; <
	WKBReader
ññ< E
(
ññE F
)
ññF G
;
ññG H
while
óó 
(
óó 
reader
óó !
.
óó! "
Read
óó" &
(
óó& '
)
óó' (
)
óó( )
{
òò 
var
ôô 
ret
ôô 
=
ôô  !
new
ôô" %

Dictionary
ôô& 0
<
ôô0 1
string
ôô1 7
,
ôô7 8
object
ôô9 ?
>
ôô? @
(
ôô@ A
)
ôôA B
;
ôôB C
for
öö 
(
öö 
int
öö  
i
öö! "
=
öö# $
$num
öö% &
;
öö& '
i
öö( )
<
öö* +
reader
öö, 2
.
öö2 3

FieldCount
öö3 =
;
öö= >
i
öö? @
++
öö@ B
)
ööB C
{
õõ 
if
úú 
(
úú  
!
úú  !
typeof
úú! '
(
úú' (
NpgsqlTypes
úú( 3
.
úú3 4
PostgisGeometry
úú4 C
)
úúC D
.
úúD E
IsAssignableFrom
úúE U
(
úúU V
reader
úúV \
.
úú\ ]
GetFieldType
úú] i
(
úúi j
i
úúj k
)
úúk l
)
úúl m
)
úúm n
{
ùù 
var
ûû  #
name
ûû$ (
=
ûû) *
reader
ûû+ 1
.
ûû1 2
GetName
ûû2 9
(
ûû9 :
i
ûû: ;
)
ûû; <
;
ûû< =
if
üü  "
(
üü# $
name
üü$ (
==
üü) +
$str
üü, 3
)
üü3 4
{
††  !
}
††" #
var
¢¢  #
value
¢¢$ )
=
¢¢* +
_typeMapper
¢¢, 7
.
¢¢7 8
ConvertFromSql
¢¢8 F
(
¢¢F G
reader
¢¢G M
.
¢¢M N
GetValue
¢¢N V
(
¢¢V W
i
¢¢W X
)
¢¢X Y
)
¢¢Y Z
;
¢¢Z [
ret
££  #
[
££# $
name
££$ (
]
££( )
=
££* +
value
££, 1
;
££1 2
}
§§ 
else
••  
{
¶¶ 
var
ßß  #
name
ßß$ (
=
ßß) *
reader
ßß+ 1
.
ßß1 2
GetName
ßß2 9
(
ßß9 :
i
ßß: ;
)
ßß; <
;
ßß< =
var
®®  #
value
®®$ )
=
®®* +
!
®®, -
reader
®®- 3
.
®®3 4
IsDBNull
®®4 <
(
®®< =
i
®®= >
)
®®> ?
?
®®@ A
	geoReader
®®B K
.
®®K L
Read
®®L P
(
®®P Q
reader
®®Q W
.
®®W X
GetFieldValue
®®X e
<
®®e f
byte
®®f j
[
®®j k
]
®®k l
>
®®l m
(
®®m n
i
®®n o
)
®®o p
)
®®p q
:
®®r s
null
®®t x
;
®®x y
ret
©©  #
[
©©# $
name
©©$ (
]
©©( )
=
©©* +
value
©©, 1
;
©©1 2
}
™™ 
}
´´ 
yield
¨¨ 
return
¨¨ $
ret
¨¨% (
;
¨¨( )
}
≠≠ 
}
ÆÆ 
}
ØØ 
}
∞∞ 	
public
≤≤ 
ResultStatus
≤≤ 
ExecuteNonQuery
≤≤ +
(
≤≤+ ,
Query
≤≤, 1
query
≤≤2 7
)
≤≤7 8
{
≥≥ 	
try
¥¥ 
{
µµ 
using
∂∂ 
(
∂∂ 
var
∂∂ 
cmd
∂∂ 
=
∂∂  

GetCommand
∂∂! +
(
∂∂+ ,
query
∂∂, 1
)
∂∂1 2
)
∂∂2 3
{
∑∑ 
var
∏∏ 
tr
∏∏ 
=
∏∏ 
cmd
∏∏  
.
∏∏  !
ExecuteNonQuery
∏∏! 0
(
∏∏0 1
)
∏∏1 2
;
∏∏2 3
return
ππ 
new
ππ 
ResultStatus
ππ +
{
∫∫ 
message
ªª 
=
ªª  !
tr
ªª" $
.
ªª$ %
ToString
ªª% -
(
ªª- .
)
ªª. /
,
ªª/ 0
result
ºº 
=
ºº  
true
ºº! %
}
ΩΩ 
;
ΩΩ 
}
ææ 
}
øø 
catch
¿¿ 
(
¿¿ 
	Exception
¿¿ 
ex
¿¿ 
)
¿¿  
{
¡¡ 
return
¬¬ 
new
¬¬ 
ResultStatus
¬¬ '
{
√√ 
message
ƒƒ 
=
ƒƒ 
$str
ƒƒ 0
+
ƒƒ1 2
ex
ƒƒ3 5
.
ƒƒ5 6
ToString
ƒƒ6 >
(
ƒƒ> ?
)
ƒƒ? @
,
ƒƒ@ A
result
≈≈ 
=
≈≈ 
false
≈≈ "
}
∆∆ 
;
∆∆ 
}
«« 
}
»» 	
public
   
bool
   !
IsSupportBulkInsert
   '
{
  ( )
get
  * -
{
  . /
return
  0 6
true
  7 ;
;
  ; <
}
  = >
}
  ? @
public
ÕÕ 
ResultStatus
ÕÕ 
ExecuteBulkInsert
ÕÕ -
(
ÕÕ- .
string
ÕÕ. 4
	tableName
ÕÕ5 >
,
ÕÕ> ?
string
ÕÕ@ F

schemaName
ÕÕG Q
,
ÕÕQ R
FeatureCollection
ÕÕS d

collection
ÕÕe o
,
ÕÕo p
	TableInfo
ÕÕp y
	tableInfoÕÕz É
,ÕÕÉ Ñ
stringÕÕÖ ã
geomColNameÕÕå ó
)ÕÕó ò
{
ŒŒ 	
try
œœ 
{
–– 
if
—— 
(
—— 
_connection
—— 
.
——  
State
——  %
!=
——& (
ConnectionState
——) 8
.
——8 9
Open
——9 =
)
——= >
_connection
““ 
.
““  
Open
““  $
(
““$ %
)
““% &
;
““& '
	tableName
‘‘ 
=
‘‘ 

schemaName
‘‘ &
==
‘‘' )
null
‘‘* .
?
‘‘/ 0
	tableName
‘‘1 :
:
‘‘; <
string
‘‘= C
.
‘‘C D
Format
‘‘D J
(
‘‘J K
$str
‘‘K T
,
‘‘T U

schemaName
‘‘V `
,
‘‘` a
	tableName
‘‘b k
)
‘‘k l
;
‘‘l m
var
’’ 
columns
’’ 
=
’’ 
string
’’ $
.
’’$ %
Join
’’% )
(
’’) *
$str
’’* -
,
’’- .

collection
’’/ 9
.
’’9 :
Features
’’: B
[
’’B C
$num
’’C D
]
’’D E
.
’’E F

Attributes
’’F P
.
’’P Q
GetNames
’’Q Y
(
’’Y Z
)
’’Z [
)
’’[ \
.
’’\ ]
ToLower
’’] d
(
’’d e
CultureInfo
’’e p
.
’’p q
InvariantCulture’’q Å
)’’Å Ç
+’’É Ñ
$str’’Ö à
+’’â ä
geomColName’’ã ñ
;’’ñ ó
var
÷÷ 
command
÷÷ 
=
÷÷ 
string
÷÷ $
.
÷÷$ %
Format
÷÷% +
(
÷÷+ ,
$str
÷÷, W
,
÷÷W X
	tableName
÷÷Y b
,
÷÷b c
columns
÷÷d k
)
÷÷k l
;
÷÷l m
using
◊◊ 
(
◊◊ 
var
◊◊ 
writer
◊◊ !
=
◊◊" #
_connection
◊◊$ /
.
◊◊/ 0
BeginBinaryImport
◊◊0 A
(
◊◊A B
command
◊◊B I
)
◊◊I J
)
◊◊J K
{
ÿÿ 
foreach
ŸŸ 
(
ŸŸ 
var
ŸŸ  
feature
ŸŸ! (
in
ŸŸ) +

collection
ŸŸ, 6
.
ŸŸ6 7
Features
ŸŸ7 ?
)
ŸŸ? @
{
⁄⁄ 
writer
€€ 
.
€€ 
StartRow
€€ '
(
€€' (
)
€€( )
;
€€) *
foreach
‹‹ 
(
‹‹  !
var
‹‹! $
name
‹‹% )
in
‹‹* ,
feature
‹‹- 4
.
‹‹4 5

Attributes
‹‹5 ?
.
‹‹? @
GetNames
‹‹@ H
(
‹‹H I
)
‹‹I J
)
‹‹J K
if
›› 
(
››  
feature
››  '
.
››' (

Attributes
››( 2
[
››2 3
name
››3 7
]
››7 8
!=
››9 ;
null
››< @
)
››@ A
writer
ﬁﬁ  &
.
ﬁﬁ& '
Write
ﬁﬁ' ,
(
ﬁﬁ, -
feature
ﬁﬁ- 4
.
ﬁﬁ4 5

Attributes
ﬁﬁ5 ?
[
ﬁﬁ? @
name
ﬁﬁ@ D
]
ﬁﬁD E
)
ﬁﬁE F
;
ﬁﬁF G
else
ﬂﬂ  
writer
ﬂﬂ! '
.
ﬂﬂ' (
	WriteNull
ﬂﬂ( 1
(
ﬂﬂ1 2
)
ﬂﬂ2 3
;
ﬂﬂ3 4
writer
‡‡ 
.
‡‡ 
Write
‡‡ $
(
‡‡$ %
feature
‡‡% ,
.
‡‡, -
Geometry
‡‡- 5
.
‡‡5 6
AsBinary
‡‡6 >
(
‡‡> ?
)
‡‡? @
)
‡‡@ A
;
‡‡A B
}
·· 
}
‚‚ 
return
„„ 
new
„„ 
ResultStatus
„„ '
{
„„( )
result
„„* 0
=
„„1 2
true
„„3 7
}
„„8 9
;
„„9 :
}
‰‰ 
catch
ÂÂ 
(
ÂÂ 
	Exception
ÂÂ 
ex
ÂÂ 
)
ÂÂ  
{
ÊÊ 
return
ÁÁ 
new
ÁÁ 
ResultStatus
ÁÁ '
{
ÁÁ( )
result
ÁÁ* 0
=
ÁÁ1 2
false
ÁÁ3 8
,
ÁÁ8 9
message
ÁÁ: A
=
ÁÁB C
ex
ÁÁD F
.
ÁÁF G
Message
ÁÁG N
}
ÁÁO P
;
ÁÁP Q
}
ËË 
}
ÈÈ 	
public
ÎÎ 
DbTransaction
ÎÎ 
BeginTransaction
ÎÎ -
(
ÎÎ- .
)
ÎÎ. /
{
ÏÏ 	
if
ÌÌ 
(
ÌÌ 
_connection
ÌÌ 
.
ÌÌ 
State
ÌÌ !
!=
ÌÌ" $
ConnectionState
ÌÌ% 4
.
ÌÌ4 5
Open
ÌÌ5 9
)
ÌÌ9 :
_connection
ÓÓ 
.
ÓÓ 
Open
ÓÓ  
(
ÓÓ  !
)
ÓÓ! "
;
ÓÓ" #
_transaction
ÔÔ 
=
ÔÔ 
_connection
ÔÔ &
.
ÔÔ& '
BeginTransaction
ÔÔ' 7
(
ÔÔ7 8
)
ÔÔ8 9
;
ÔÔ9 :
return
 
_transaction
 
;
  
}
ÒÒ 	
public
ÛÛ 
void
ÛÛ 
Close
ÛÛ 
(
ÛÛ 
)
ÛÛ 
{
ÙÙ 	
if
ıı 
(
ıı 
_connection
ıı 
.
ıı 
State
ıı !
!=
ıı" $
ConnectionState
ıı% 4
.
ıı4 5
Closed
ıı5 ;
)
ıı; <
_connection
ˆˆ 
.
ˆˆ 
Close
ˆˆ !
(
ˆˆ! "
)
ˆˆ" #
;
ˆˆ# $
}
˜˜ 	
private
˘˘ 
static
˘˘ 
bool
˘˘ 
IsAnonymous
˘˘ '
(
˘˘' (
Type
˘˘( ,
type
˘˘- 1
)
˘˘1 2
{
˙˙ 	
if
˚˚ 
(
˚˚ 
type
˚˚ 
.
˚˚ 
IsGenericType
˚˚ "
)
˚˚" #
{
¸¸ 
var
˝˝ 
d
˝˝ 
=
˝˝ 
type
˝˝ 
.
˝˝ &
GetGenericTypeDefinition
˝˝ 5
(
˝˝5 6
)
˝˝6 7
;
˝˝7 8
if
˛˛ 
(
˛˛ 
d
˛˛ 
.
˛˛ 
IsClass
˛˛ 
&&
˛˛  
d
˛˛! "
.
˛˛" #
IsSealed
˛˛# +
&&
˛˛, .
d
˛˛/ 0
.
˛˛0 1

Attributes
˛˛1 ;
.
˛˛; <
HasFlag
˛˛< C
(
˛˛C D
TypeAttributes
˛˛D R
.
˛˛R S
	NotPublic
˛˛S \
)
˛˛\ ]
)
˛˛] ^
{
ˇˇ 
var
ÄÄ 

attributes
ÄÄ "
=
ÄÄ# $
d
ÄÄ% &
.
ÄÄ& '!
GetCustomAttributes
ÄÄ' :
(
ÄÄ: ;
typeof
ÄÄ; A
(
ÄÄA B(
CompilerGeneratedAttribute
ÄÄB \
)
ÄÄ\ ]
,
ÄÄ] ^
false
ÄÄ_ d
)
ÄÄd e
;
ÄÄe f
if
ÅÅ 
(
ÅÅ 

attributes
ÅÅ "
!=
ÅÅ# %
null
ÅÅ& *
&&
ÅÅ+ -

attributes
ÅÅ. 8
.
ÅÅ8 9
Length
ÅÅ9 ?
>
ÅÅ@ A
$num
ÅÅB C
)
ÅÅC D
{
ÇÇ 
return
ÉÉ 
true
ÉÉ #
;
ÉÉ# $
}
ÑÑ 
}
ÖÖ 
}
ÜÜ 
return
áá 
false
áá 
;
áá 
}
àà 	
private
ää 
NpgsqlCommand
ää 

GetCommand
ää (
(
ää( )
Query
ää) .
query
ää/ 4
)
ää4 5
{
ãã 	
if
åå 
(
åå 
_connection
åå 
.
åå 
State
åå !
!=
åå" $
ConnectionState
åå% 4
.
åå4 5
Open
åå5 9
)
åå9 :
_connection
çç 
.
çç 
Open
çç  
(
çç  !
)
çç! "
;
çç" #
var
èè 
cmd
èè 
=
èè 
_connection
èè !
.
èè! "
CreateCommand
èè" /
(
èè/ 0
)
èè0 1
;
èè1 2
if
êê 
(
êê 
_transaction
êê 
!=
êê 
null
êê  $
&&
êê% '
_transaction
êê( 4
.
êê4 5

Connection
êê5 ?
!=
êê@ B
null
êêC G
)
êêG H
cmd
ëë 
.
ëë 
Transaction
ëë 
=
ëë  !
_transaction
ëë" .
;
ëë. /
cmd
ìì 
.
ìì 
CommandText
ìì 
=
ìì 
query
ìì #
.
ìì# $
Command
ìì$ +
;
ìì+ ,
foreach
îî 
(
îî 
var
îî 
	parameter
îî "
in
îî# %
query
îî& +
.
îî+ ,

Parameters
îî, 6
)
îî6 7
cmd
ïï 
.
ïï 

Parameters
ïï 
.
ïï 
AddWithValue
ïï +
(
ïï+ ,
	parameter
ïï, 5
.
ïï5 6
Name
ïï6 :
,
ïï: ;
	parameter
ïï< E
.
ïïE F
Value
ïïF K
)
ïïK L
;
ïïL M
return
ññ 
cmd
ññ 
;
ññ 
}
óó 	
}
òò 
}ôô ªº
£D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\DataBaseHelper\PostgisHelper\PostgisTableCreator.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Database %
.% &
Postgis& -
{ 
public 

class 
PostgisTableCreator $
:% &
ITableCreator' 4
{ 
IQueryBuilder		 
_builder		 
;		 
IQueryExecutor

 
	_executor

  
;

  !
ITypeMapper 
_typeMapper 
;  
public 
PostgisTableCreator "
(" #
IQueryBuilder# 0
builder1 8
,8 9
IQueryExecutor: H
executorI Q
,Q R
ITypeMapperS ^

typeMapper_ i
)i j
: 
base 
( 
) 
{ 	
_builder 
= 
builder 
; 
	_executor 
= 
executor  
;  !
_typeMapper 
= 

typeMapper $
;$ %
} 	
public 
ResultStatus 
Alter !
(! "
	TableInfo" +
	tableInfo, 5
)5 6
{ 	
throw 
new #
NotImplementedException -
(- .
). /
;/ 0
} 	
public 
ResultStatus 
Create "
(" #
	TableInfo# ,
	tableInfo- 6
)6 7
{ 	
DbTransaction 
transaction %
=& '
null( ,
;, -
var 
opentransaction 
=  !
	_executor" +
.+ ,
IsTransactionOpen, =
;= >
if 
( 
! 
opentransaction  
)  !
transaction 
= 
	_executor '
.' (
BeginTransaction( 8
(8 9
)9 :
;: ;
try!! 
{"" 
Query## 
query## 
=## 
null## "
;##" #
ResultStatus$$ 
result$$ #
=$$$ %
null$$& *
;$$* +
string%% 
schema%% 
=%% 
	tableInfo%%  )
.%%) *

SchemaName%%* 4
!=%%5 7
null%%8 <
?%%= >
string%%? E
.%%E F
Format%%F L
(%%L M
$str%%M S
,%%S T
	tableInfo%%U ^
.%%^ _

SchemaName%%_ i
)%%i j
:%%k l
$str%%m o
;%%o p
foreach'' 
('' 
var'' 
col''  
in''! #
	tableInfo''$ -
.''- .
Columns''. 5
.''5 6
Where''6 ;
(''; <
a''< =
=>''> @
a''A B
.''B C
AutoIncrement''C P
!=''Q S
null''T X
)''X Y
)''Y Z
{(( 
var)) 
sequenceName)) $
=))% &
string))' -
.))- .
Format)). 4
())4 5
$str))5 B
,))B C
	tableInfo))D M
.))M N
	TableName))N W
,))W X
col))Y \
.))\ ]

ColumnName))] g
)))g h
;))h i
col** 
.** 
Default** 
=**  !
string**" (
.**( )
Format**) /
(**/ 0
$str**0 @
,**@ A
sequenceName**B N
)**N O
;**O P
query++ 
=++ 
_builder++ $
.++$ %
ConvertToQuery++% 3
(++3 4
$str	++4 é
,
++é è
sequenceName
++ê ú
)
++ú ù
;
++ù û
var,, 
sequenceExits,, %
=,,& '
	_executor,,( 1
.,,1 2
ExecuteScaler,,2 ?
<,,? @
bool,,@ D
>,,D E
(,,E F
query,,F K
),,K L
;,,L M
if-- 
(-- 
!-- 
sequenceExits-- &
)--& '
{.. 
query// 
=// 
new//  #
Query//$ )
{//* +
Command//, 3
=//4 5
string//6 <
.//< =
Format//= C
(//C D
$str//D y
,//y z
sequenceName	//{ á
,
//á à
col
//â å
.
//å ç
AutoIncrement
//ç ö
.
//ö õ
Start
//õ †
,
//† °
col
//¢ •
.
//• ¶
AutoIncrement
//¶ ≥
.
//≥ ¥
	Increment
//¥ Ω
)
//Ω æ
}
//ø ¿
;
//¿ ¡
	_executor00 !
.00! "
ExecuteNonQuery00" 1
(001 2
query002 7
)007 8
;008 9
}11 
}22 
SetDefaultFunctions66 #
(66# $
	tableInfo66$ -
)66- .
;66. /
var77 
queryString77 
=77  !
$str77" w
+77x y
(77z {
	tableInfo	77{ Ñ
.
77Ñ Ö

SchemaName
77Ö è
!=
77ê í
null
77ì ó
?
77ò ô
$str
77ö ≥
:
77¥ µ
$str
77∂ ∏
)
77∏ π
;
77π ∫
var88 
queryParams88 
=88  !
new88" %
object88& ,
[88, -
	tableInfo88- 6
.886 7

SchemaName887 A
!=88C E
null88F J
?88K L
$num88M N
:88O P
$num88Q R
]88R S
;88S T
queryParams99 
[99 
$num99 
]99 
=99  
	tableInfo99! *
.99* +
	TableName99+ 4
.994 5
ToLower995 <
(99< =
)99= >
;99> ?
if:: 
(:: 
	tableInfo:: 
.:: 

SchemaName:: (
!=::) +
null::, 0
)::0 1
queryParams;; 
[;;  
$num;;  !
];;! "
=;;# $
	tableInfo;;% .
.;;. /

SchemaName;;/ 9
.;;9 :
ToLower;;: A
(;;A B
);;B C
;;;C D
query== 
=== 
_builder==  
.==  !
ConvertToQuery==! /
(==/ 0
queryString==0 ;
,==; <
queryParams=== H
)==H I
;==I J
var>> 

tableExits>> 
=>>  
	_executor>>! *
.>>* +
ExecuteScaler>>+ 8
<>>8 9
bool>>9 =
>>>= >
(>>> ?
query>>? D
)>>D E
;>>E F
if?? 
(?? 

tableExits?? 
)?? 
{@@ 
ifAA 
(AA 
!AA 
opentransactionAA (
)AA( )
transactionBB #
.BB# $
CommitBB$ *
(BB* +
)BB+ ,
;BB, -
returnCC 
newCC 
ResultStatusCC +
{CC, -
resultCC. 4
=CC5 6
trueCC7 ;
,CC; <
messageCC= D
=CCE F
$strCCG Y
}CCZ [
;CC[ \
}DD 
varFF 
columnsFF 
=FF 
	tableInfoFF '
.FF' (
ColumnsFF( /
.FF/ 0
SelectFF0 6
(FF6 7
aFF7 8
=>FF9 ;
stringGG$ *
.GG* +
FormatGG+ 1
(GG1 2
$strGG2 D
,GGD E
aHH, -
.HH- .

ColumnNameHH. 8
,HH8 9
_typeMapperII, 7
.II7 8

GetSqlTypeII8 B
(IIB C
aIIC D
.IID E
TypeIIE I
)III J
,IIJ K
aJJ, -
.JJ- .
DefaultJJ. 5
!=JJ6 8
nullJJ9 =
?JJ> ?
stringJJ@ F
.JJF G
FormatJJG M
(JJM N
$strJJN [
,JJ[ \
aJJ] ^
.JJ^ _
DefaultJJ_ f
.JJf g
TextJJg k
)JJk l
:JJm n
$strJJo q
,JJq r
(KK, -
aKK- .
.KK. /
AutoIncrementKK/ <
!=KK= ?
nullKK@ D
||KKE G
	tableInfoKKH Q
.KKQ R

PrimaryKeyKKR \
.KK\ ]
ContainsKK] e
(KKe f
aKKf g
.KKg h

ColumnNameKKh r
)KKr s
?KKt u
$str	KKv Ä
:
KKÅ Ç
$str
KKÉ â
)
KKâ ä
)
KKä ã
)
KKã å
;
KKå ç
queryMM 
=MM 
newMM 
QueryMM !
{MM" #
CommandMM$ +
=MM, -
stringMM. 4
.MM4 5
FormatMM5 ;
(MM; <
$strMM< Z
,MMZ [
stringMM\ b
.MMb c
JoinMMc g
(MMg h
$strMMh k
,MMk l
columnsMMm t
)MMt u
,MMu v
	tableInfo	MMw Ä
.
MMÄ Å
	TableName
MMÅ ä
,
MMä ã
schema
MMå í
)
MMí ì
}
MMî ï
;
MMï ñ
resultNN 
=NN 
	_executorNN "
.NN" #
ExecuteNonQueryNN# 2
(NN2 3
queryNN3 8
)NN8 9
;NN9 :
ifOO 
(OO 
!OO 
resultOO 
.OO 
resultOO "
)OO" #
throwPP 
newPP !
QueryExecuteExceptionPP 3
(PP3 4!
QueryExecuteExceptionPP4 I
.PPI J
ExceptionTypesPPJ X
.PPX Y 
TableCreateExceptionPPY m
,PPm n
resultPPo u
.PPu v
messagePPv }
)PP} ~
;PP~ 
ifSS 
(SS 
	tableInfoSS 
.SS 

PrimaryKeySS (
.SS( )
CountSS) .
>SS/ 0
$numSS1 2
)SS2 3
{TT 
varUU 
columnsStringUU %
=UU& '
stringUU( .
.UU. /
JoinUU/ 3
(UU3 4
$strUU4 7
,UU7 8
	tableInfoUU9 B
.UUB C

PrimaryKeyUUC M
.UUM N
SelectUUN T
(UUT U
aUUU V
=>UUW Y
stringUUZ `
.UU` a
FormatUUa g
(UUg h
$strUUh m
,UUm n
aUUo p
)UUp q
)UUq r
.UUr s
ToArrayUUs z
(UUz {
)UU{ |
)UU| }
;UU} ~
queryVV 
=VV 
newVV 
QueryVV  %
{VV& '
CommandVV( /
=VV0 1
stringVV2 8
.VV8 9
FormatVV9 ?
(VV? @
$strVV@ l
,VVl m
	tableInfoVVn w
.VVw x
	TableName	VVx Å
,
VVÅ Ç
columnsString
VVÉ ê
,
VVê ë
schema
VVí ò
)
VVò ô
}
VVö õ
;
VVõ ú
resultWW 
=WW 
	_executorWW &
.WW& '
ExecuteNonQueryWW' 6
(WW6 7
queryWW7 <
)WW< =
;WW= >
ifXX 
(XX 
!XX 
resultXX 
.XX  
resultXX  &
)XX& '
throwYY 
newYY !!
QueryExecuteExceptionYY" 7
(YY7 8!
QueryExecuteExceptionYY8 M
.YYM N
ExceptionTypesYYN \
.YY\ ] 
TableCreateExceptionYY] q
,YYq r
resultYYs y
.YYy z
message	YYz Å
)
YYÅ Ç
;
YYÇ É
}ZZ 
foreach]] 
(]] 
var]] 
index]] "
in]]# %
	tableInfo]]& /
.]]/ 0
Indexes]]0 7
)]]7 8
{^^ 
index__ 
.__ 
Name__ 
=__  
string__! '
.__' (
Format__( .
(__. /
$str__/ <
,__< =
	tableInfo__> G
.__G H
	TableName__H Q
.__Q R
Replace__R Y
(__Y Z
$str__Z ]
,__] ^
$str___ b
)__b c
,__c d
string__e k
.__k l
Join__l p
(__p q
$str__q t
,__t u
index__v {
.__{ |
Columns	__| É
)
__É Ñ
)
__Ñ Ö
;
__Ö Ü
var`` 
	columText`` !
=``" #
string``$ *
.``* +
Join``+ /
(``/ 0
$str``0 3
,``3 4
index``5 :
.``: ;
Columns``; B
)``B C
;``C D
queryaa 
=aa 
newaa 
Queryaa  %
{aa& '
Commandaa( /
=aa0 1
stringaa2 8
.aa8 9
Formataa9 ?
(aa? @
$straa@ f
,aaf g
indexaah m
.aam n
Nameaan r
,aar s
	tableInfoaat }
.aa} ~
	TableName	aa~ á
,
aaá à
	columText
aaâ í
,
aaí ì
index
aaî ô
.
aaô ö
IsUnique
aaö ¢
?
aa£ §
$str
aa• ≠
:
aaÆ Ø
$str
aa∞ ≤
,
aa≤ ≥
schema
aa¥ ∫
)
aa∫ ª
}
aaº Ω
;
aaΩ æ
resultbb 
=bb 
	_executorbb &
.bb& '
ExecuteNonQuerybb' 6
(bb6 7
querybb7 <
)bb< =
;bb= >
ifcc 
(cc 
!cc 
resultcc 
.cc  
resultcc  &
)cc& '
throwdd 
newdd !!
QueryExecuteExceptiondd" 7
(dd7 8!
QueryExecuteExceptiondd8 M
.ddM N
ExceptionTypesddN \
.dd\ ] 
TableCreateExceptiondd] q
,ddq r
resultdds y
.ddy z
message	ddz Å
)
ddÅ Ç
;
ddÇ É
}ee 
ifgg 
(gg 
!gg 
opentransactiongg $
)gg$ %
transactionhh 
.hh  
Commithh  &
(hh& '
)hh' (
;hh( )
returnii 
newii 
ResultStatusii '
{ii( )
resultii* 0
=ii1 2
trueii3 7
}ii8 9
;ii9 :
}jj 
catchkk 
(kk 
	Exceptionkk 
exkk 
)kk  
{ll 
ifmm 
(mm 
!mm 
opentransactionmm $
)mm$ %
transactionnn 
.nn  
Rollbacknn  (
(nn( )
)nn) *
;nn* +
returnoo 
newoo 
ResultStatusoo '
{oo( )
resultoo* 0
=oo1 2
falseoo3 8
,oo8 9
messageoo: A
=ooB C
exooD F
.ooF G
MessageooG N
}ooO P
;ooP Q
}pp 
}qq 	
publicss 
	TableInfoss 
	GetSchemass "
(ss" #
stringss# )
	tableNamess* 3
,ss3 4
boolss5 9

onlyColumsss: D
=ssE F
falsessG L
)ssL M
{tt 	
Queryuu 
queryuu 
=uu 
nulluu 
;uu 
varvv 
	tableInfovv 
=vv 
newvv 
	TableInfovv  )
(vv) *
)vv* +
{vv, -
	TableNamevv. 7
=vv8 9
	tableNamevv: C
}vvD E
;vvE F
queryxx 
=xx 
_builderxx 
.xx 
ConvertToQueryxx +
(xx+ ,
$str	xx, ¨
,
xx¨ ≠
	tableName
xxÆ ∑
)
xx∑ ∏
;
xx∏ π
varyy 
columnsyy 
=yy 
	_executoryy #
.yy# $
ExecuteReaderyy$ 1
(yy1 2
queryyy2 7
)yy7 8
.yy8 9
ToArrayyy9 @
(yy@ A
)yyA B
;yyB C
ifzz 
(zz 
columnszz 
==zz 
nullzz 
||zz  "
columnszz# *
.zz* +
Countzz+ 0
(zz0 1
)zz1 2
==zz3 5
$numzz6 7
)zz7 8
returnzz9 ?
nullzz@ D
;zzD E
	tableInfo{{ 
.{{ 
Columns{{ 
={{ 
columns{{  '
.{{' (
Select{{( .
({{. /
a{{/ 0
=>{{1 3
new{{4 7
TableColumn{{8 C
{{{D E

ColumnName{{F P
={{Q R
a{{S T
[{{T U
$str{{U b
]{{b c
.{{c d
ToString{{d l
({{l m
){{m n
,{{n o
Type{{p t
={{u v
_typeMapper	{{w Ç
.
{{Ç É
GetType
{{É ä
(
{{ä ã
a
{{ã å
[
{{å ç
$str
{{ç ò
]
{{ò ô
.
{{ô ö
ToString
{{ö ¢
(
{{¢ £
)
{{£ §
)
{{§ •
,
{{• ¶
Default
{{ß Æ
=
{{Ø ∞$
SqlFunctionsFromString
{{± «
(
{{« »
a
{{» …
[
{{…  
$str
{{  ⁄
]
{{⁄ €
)
{{€ ‹
}
{{› ﬁ
)
{{ﬁ ﬂ
.
{{ﬂ ‡
ToList
{{‡ Ê
(
{{Ê Á
)
{{Á Ë
;
{{Ë È
query}} 
=}} 
_builder}} 
.}} 
ConvertToQuery}} +
(}}+ ,
$str	}Ä, 
,
ÄÄ 
	tableName
ÄÄ  )
.
ÄÄ) *
Replace
ÄÄ* 1
(
ÄÄ1 2
$str
ÄÄ2 5
,
ÄÄ5 6
$str
ÄÄ7 :
)
ÄÄ: ;
)
ÄÄ; <
;
ÄÄ< =
var
ÅÅ 
indexes
ÅÅ 
=
ÅÅ 
	_executor
ÅÅ #
.
ÅÅ# $
ExecuteReader
ÅÅ$ 1
(
ÅÅ1 2
query
ÅÅ2 7
)
ÅÅ7 8
.
ÅÅ8 9
ToArray
ÅÅ9 @
(
ÅÅ@ A
)
ÅÅA B
;
ÅÅB C
var
ÇÇ 

primaryKey
ÇÇ 
=
ÇÇ 
indexes
ÇÇ $
.
ÇÇ$ %
Where
ÇÇ% *
(
ÇÇ* +
a
ÇÇ+ ,
=>
ÇÇ- /
(
ÇÇ0 1
string
ÇÇ1 7
)
ÇÇ7 8
a
ÇÇ8 9
[
ÇÇ9 :
$str
ÇÇ: J
]
ÇÇJ K
==
ÇÇL N
$str
ÇÇO R
)
ÇÇR S
;
ÇÇS T
	tableInfo
ÉÉ 
.
ÉÉ 

PrimaryKey
ÉÉ  
=
ÉÉ! "

primaryKey
ÉÉ# -
.
ÉÉ- .
Select
ÉÉ. 4
(
ÉÉ4 5
a
ÉÉ5 6
=>
ÉÉ7 9
a
ÉÉ: ;
[
ÉÉ; <
$str
ÉÉ< I
]
ÉÉI J
)
ÉÉJ K
.
ÉÉK L
Cast
ÉÉL P
<
ÉÉP Q
string
ÉÉQ W
>
ÉÉW X
(
ÉÉX Y
)
ÉÉY Z
.
ÉÉZ [
ToList
ÉÉ[ a
(
ÉÉa b
)
ÉÉb c
;
ÉÉc d
var
ÖÖ 
groups
ÖÖ 
=
ÖÖ 
indexes
ÖÖ  
.
ÖÖ  !
Where
ÖÖ! &
(
ÖÖ& '
a
ÖÖ' (
=>
ÖÖ) +
(
ÖÖ, -
string
ÖÖ- 3
)
ÖÖ3 4
a
ÖÖ4 5
[
ÖÖ5 6
$str
ÖÖ6 F
]
ÖÖF G
==
ÖÖH J
$str
ÖÖK N
)
ÖÖN O
.
ÖÖO P
GroupBy
ÖÖP W
(
ÖÖW X
a
ÖÖX Y
=>
ÖÖZ \
new
ÖÖ] `
{
ÖÖa b

table_name
ÖÖc m
=
ÖÖn o
a
ÖÖp q
[
ÖÖq r
$str
ÖÖr ~
]
ÖÖ~ 
,ÖÖ Ä

index_nameÖÖÅ ã
=ÖÖå ç
aÖÖé è
[ÖÖè ê
$strÖÖê ú
]ÖÖú ù
,ÖÖù û
	is_uniqueÖÖü ®
=ÖÖ© ™
aÖÖ´ ¨
[ÖÖ¨ ≠
$strÖÖ≠ ∏
]ÖÖ∏ π
,ÖÖπ ∫
is_primary_keyÖÖª …
=ÖÖ  À
aÖÖÃ Õ
[ÖÖÕ Œ
$strÖÖŒ ﬁ
]ÖÖﬁ ﬂ
}ÖÖ‡ ·
)ÖÖ· ‚
.ÖÖ‚ „
ToArrayÖÖ„ Í
(ÖÖÍ Î
)ÖÖÎ Ï
;ÖÖÏ Ì
	tableInfo
ÜÜ 
.
ÜÜ 
Indexes
ÜÜ 
=
ÜÜ 
groups
ÜÜ  &
.
ÜÜ& '
Select
ÜÜ' -
(
ÜÜ- .
a
ÜÜ. /
=>
ÜÜ0 2
new
ÜÜ3 6

TableIndex
ÜÜ7 A
{
ÜÜB C
IsUnique
ÜÜD L
=
ÜÜM N
a
ÜÜO P
.
ÜÜP Q
Key
ÜÜQ T
.
ÜÜT U
	is_unique
ÜÜU ^
.
ÜÜ^ _
Equals
ÜÜ_ e
(
ÜÜe f
$str
ÜÜf i
)
ÜÜi j
,
ÜÜj k
Columns
ÜÜl s
=
ÜÜt u
a
ÜÜv w
.
ÜÜw x
Select
ÜÜx ~
(
ÜÜ~ 
bÜÜ Ä
=>ÜÜÅ É
bÜÜÑ Ö
[ÜÜÖ Ü
$strÜÜÜ ì
]ÜÜì î
)ÜÜî ï
.ÜÜï ñ
CastÜÜñ ö
<ÜÜö õ
stringÜÜõ °
>ÜÜ° ¢
(ÜÜ¢ £
)ÜÜ£ §
.ÜÜ§ •
ToArrayÜÜ• ¨
(ÜÜ¨ ≠
)ÜÜ≠ Æ
}ÜÜØ ∞
)ÜÜ∞ ±
.ÜÜ± ≤
ToListÜÜ≤ ∏
(ÜÜ∏ π
)ÜÜπ ∫
;ÜÜ∫ ª
return
àà 
	tableInfo
àà 
;
àà 
}
ââ 	
private
ãã 
void
ãã !
SetDefaultFunctions
ãã (
(
ãã( )
	TableInfo
ãã) 2
	tableInfo
ãã3 <
)
ãã< =
{
åå 	
foreach
çç 
(
çç 
var
çç 
col
çç 
in
çç 
	tableInfo
çç  )
.
çç) *
Columns
çç* 1
.
çç1 2
Where
çç2 7
(
çç7 8
a
çç8 9
=>
çç: <
a
çç= >
.
çç> ?
Default
çç? F
!=
ççG I
null
ççJ N
)
ççN O
)
ççO P
if
éé 
(
éé 
col
éé 
.
éé 
Default
éé 
.
éé  
Text
éé  $
==
éé% '
null
éé( ,
)
éé, -
switch
èè 
(
èè 
col
èè 
.
èè  
Default
èè  '
.
èè' (
Function
èè( 0
)
èè0 1
{
êê 
case
ëë 
SqlFunctions
ëë )
.
ëë) *
NEWID
ëë* /
:
ëë/ 0
col
íí 
.
íí  
Default
íí  '
.
íí' (
Text
íí( ,
=
íí- .
$str
íí/ C
;
ííC D
break
îî !
;
îî! "
case
ïï 
SqlFunctions
ïï )
.
ïï) *
GETDATE
ïï* 1
:
ïï1 2
col
ññ 
.
ññ  
Default
ññ  '
.
ññ' (
Text
ññ( ,
=
ññ- .
$str
ññ/ 6
;
ññ6 7
break
óó !
;
óó! "
default
òò 
:
òò  
break
ôô !
;
ôô! "
}
öö 
}
õõ 	
private
ùù  
ColumnDefaultValue
ùù "$
SqlFunctionsFromString
ùù# 9
(
ùù9 :
object
ùù: @
value
ùùA F
)
ùùF G
{
ûû 	
if
üü 
(
üü 
value
üü 
==
üü 
null
üü 
)
üü 
return
üü %
null
üü& *
;
üü* +
var
†† 
val
†† 
=
†† 
(
†† 
string
†† 
)
†† 
value
†† #
;
††# $
if
°° 
(
°° 
val
°° 
.
°° 
Trim
°° 
(
°° 
)
°° 
.
°° 
ToLower
°° "
(
°°" #
)
°°# $
==
°°% '
$str
°°( <
||
°°= ?
val
°°@ C
.
°°C D
Trim
°°D H
(
°°H I
)
°°I J
.
°°J K
ToLower
°°K R
(
°°R S
)
°°S T
==
°°U W
$str°°X É
)°°É Ñ
return
¢¢ 
SqlFunctions
¢¢ #
.
¢¢# $
NEWID
¢¢$ )
;
¢¢) *
else
££ 
if
££ 
(
££ 
val
££ 
.
££ 
Trim
££ 
(
££ 
)
££ 
.
££  
ToLower
££  '
(
££' (
)
££( )
==
££* ,
$str
££- 4
)
££4 5
return
§§ 
SqlFunctions
§§ #
.
§§# $
GETDATE
§§$ +
;
§§+ ,
return
•• 
value
•• 
.
•• 
ToString
•• !
(
••! "
)
••" #
;
••# $
}
¶¶ 	
}
ßß 
}®® èi
°D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\DataBaseHelper\PostgisHelper\PostgisTypeMapper.cs
	namespace		 	
Infoline		
 
.		 
	Framework		 
.		 
Database		 %
.		% &
Postgis		& -
{

 
public 

class 
PostgisTypeMapper "
:# $
ITypeMapper% 0
{ 
NetTopologySuite 
. 
IO 
. 
	WKBReader %

_wkbReader& 0
;0 1
static 

Dictionary 
< 
string  
,  !
Type" &
>& '

_sqlToCode( 2
=3 4
new5 8

Dictionary9 C
<C D
stringD J
,J K
TypeL P
>P Q
(Q R
)R S
;S T
static 

Dictionary 
< 
Type 
, 
string  &
>& '

_codeToSql( 2
=3 4
new5 8

Dictionary9 C
<C D
TypeD H
,H I
stringJ P
>P Q
(Q R
)R S
;S T
static 
PostgisTypeMapper  
(  !
)! "
{ 	

_sqlToCode 
. 
Add 
( 
$str $
,$ %
typeof& ,
(, -
bool- 1
)1 2
)2 3
;3 4

_sqlToCode 
. 
Add 
( 
$str %
,% &
typeof' -
(- .
short. 3
)3 4
)4 5
;5 6

_sqlToCode 
. 
Add 
( 
$str $
,$ %
typeof& ,
(, -
int- 0
)0 1
)1 2
;2 3

_sqlToCode 
. 
Add 
( 
$str #
,# $
typeof% +
(+ ,
long, 0
)0 1
)1 2
;2 3

_sqlToCode 
. 
Add 
( 
$str .
,. /
typeof0 6
(6 7
string7 =
)= >
)> ?
;? @

_sqlToCode 
. 
Add 
( 
$str !
,! "
typeof# )
() *
Guid* .
). /
)/ 0
;0 1

_sqlToCode 
. 
Add 
( 
$str $
,$ %
typeof& ,
(, -
double- 3
)3 4
)4 5
;5 6

_sqlToCode 
. 
Add 
( 
$str 8
,8 9
typeof: @
(@ A
DateTimeA I
)I J
)J K
;K L

_sqlToCode 
. 
Add 
( 
$str %
,% &
typeof' -
(- .
	IGeometry. 7
)7 8
)8 9
;9 :

_codeToSql 
. 
Add 
( 
typeof !
(! "
DateTimeOffset" 0
)0 1
,1 2
$str3 C
)C D
;D E

_codeToSql 
. 
Add 
( 
typeof !
(! "
TimeSpan" *
)* +
,+ ,
$str- 3
)3 4
;4 5

_codeToSql 
. 
Add 
( 
typeof !
(! "
byte" &
[& '
]' (
)( )
,) *
$str+ ;
); <
;< =

_codeToSql!! 
.!! 
Add!! 
(!! 
typeof!! !
(!!! "
DateTime!!" *
)!!* +
,!!+ ,
$str!!- J
)!!J K
;!!K L

_codeToSql"" 
."" 
Add"" 
("" 
typeof"" !
(""! "
Guid""" &
)""& '
,""' (
$str"") /
)""/ 0
;""0 1

_codeToSql## 
.## 
Add## 
(## 
typeof## !
(##! "
string##" (
)##( )
,##) *
$str##+ >
)##> ?
;##? @

_codeToSql$$ 
.$$ 
Add$$ 
($$ 
typeof$$ !
($$! "
bool$$" &
)$$& '
,$$' (
$str$$) 2
)$$2 3
;$$3 4

_codeToSql%% 
.%% 
Add%% 
(%% 
typeof%% !
(%%! "
short%%" '
)%%' (
,%%( )
$str%%* 4
)%%4 5
;%%5 6

_codeToSql&& 
.&& 
Add&& 
(&& 
typeof&& !
(&&! "
int&&" %
)&&% &
,&&& '
$str&&( 1
)&&1 2
;&&2 3

_codeToSql'' 
.'' 
Add'' 
('' 
typeof'' !
(''! "
long''" &
)''& '
,''' (
$str'') 1
)''1 2
;''2 3

_codeToSql(( 
.(( 
Add(( 
((( 
typeof(( !
(((! "
double((" (
)((( )
,(() *
$str((+ 4
)((4 5
;((5 6

_codeToSql)) 
.)) 
Add)) 
()) 
typeof)) !
())! "
	IGeometry))" +
)))+ ,
,)), -
$str)). 8
)))8 9
;))9 :

_codeToSql++ 
.++ 
Add++ 
(++ 
typeof++ !
(++! "
decimal++" )
)++) *
,++* +
$str++, 5
)++5 6
;++6 7

_codeToSql,, 
.,, 
Add,, 
(,, 
typeof,, !
(,,! "
Single,," (
),,( )
,,,) *
$str,,+ 1
),,1 2
;,,2 3

_codeToSql-- 
.-- 
Add-- 
(-- 
typeof-- !
(--! "
byte--" &
)--& '
,--' (
$str--) 2
)--2 3
;--3 4
}// 	
public00 
PostgisTypeMapper00  
(00  !
)00! "
{11 	

_wkbReader22 
=22 
new22 
NetTopologySuite22 -
.22- .
IO22. 0
.220 1
	WKBReader221 :
(22: ;
)22; <
;22< =
}33 	
public55 
Type55 
GetType55 
(55 
string55 "
sqlType55# *
)55* +
{66 	
return77 

_sqlToCode77 
[77 
sqlType77 %
]77% &
;77& '
}88 	
public99 
string99 

GetSqlType99  
(99  !
Type99! %
type99& *
,99* +
int99, /
?99/ 0
length991 7
=998 9
null99: >
)99> ?
{:: 	
if;; 
(;; 
type;; 
.;; 
IsGenericType;; "
&&;;# %
type;;& *
.;;* +$
GetGenericTypeDefinition;;+ C
(;;C D
);;D E
==;;F H
typeof;;I O
(;;O P
Nullable;;P X
<;;X Y
>;;Y Z
);;Z [
);;[ \
type<< 
=<< 
Nullable<< 
.<<  
GetUnderlyingType<<  1
(<<1 2
type<<2 6
)<<6 7
;<<7 8
if>> 
(>> 
typeof>> 
(>> 
	IGeometry>>  
)>>  !
.>>! "
IsAssignableFrom>>" 2
(>>2 3
type>>3 7
)>>7 8
)>>8 9
type?? 
=?? 
typeof?? 
(?? 
	IGeometry?? '
)??' (
;??( )
returnAA 

_codeToSqlAA 
[AA 
typeAA "
]AA" #
;AA# $
}BB 	
publicCC 
stringCC 
FormatSqlByTypeCC %
(CC% &
objectCC& ,
valCC- 0
)CC0 1
{DD 	
ifEE 
(EE 
valEE 
==EE 
nullEE 
)EE 
returnFF 
$strFF 
;FF 
varHH 
typeHH 
=HH 
valHH 
.HH 
GetTypeHH "
(HH" #
)HH# $
;HH$ %
ifII 
(II 
typeofII 
(II 
stringII 
)II 
==II !
typeII" &
||II' )
typeofJJ 
(JJ 
GuidJJ 
)JJ 
==JJ 
typeJJ  $
)JJ$ %
returnKK 
stringKK 
.KK 
FormatKK $
(KK$ %
$strKK% ,
,KK, -
valKK. 1
)KK1 2
;KK2 3
ifMM 
(MM 
typeofMM 
(MM 
boolMM 
)MM 
==MM 
typeMM  $
)MM$ %
returnNN 
(NN 
boolNN 
)NN 
valNN  
?NN! "
$strNN# (
:NN) *
$strNN+ 0
;NN0 1
ifPP 
(PP 
typeofPP 
(PP 
intPP 
)PP 
==PP 
typePP #
||PP$ &
typeofQQ 
(QQ 
decimalQQ 
)QQ 
==QQ  "
typeQQ# '
||QQ( *
typeofRR 
(RR 
SingleRR 
)RR 
==RR !
typeRR" &
||RR' )
typeofSS 
(SS 
byteSS 
)SS 
==SS 
typeSS  $
||SS% '
typeofTT 
(TT 
shortTT 
)TT 
==TT  
typeTT! %
||TT& (
typeofUU 
(UU 
longUU 
)UU 
==UU 
typeUU  $
||UU% '
typeofVV 
(VV 
doubleVV 
)VV 
==VV !
typeVV" &
)VV& '
returnWW 
valWW 
.WW 
ToStringWW #
(WW# $
)WW$ %
;WW% &
ifYY 
(YY 
typeofYY 
(YY 
DateTimeYY 
)YY  
==YY! #
typeYY$ (
)YY( )
returnZZ 
stringZZ 
.ZZ 
FormatZZ $
(ZZ$ %
$strZZ% ,
,ZZ, -
(ZZ. /
(ZZ/ 0
DateTimeZZ0 8
)ZZ8 9
valZZ9 <
)ZZ< =
.ZZ= >
ToStringZZ> F
(ZZF G
$strZZG ^
)ZZ^ _
)ZZ_ `
;ZZ` a
return]] 
val]] 
.]] 
ToString]] 
(]]  
)]]  !
;]]! "
}^^ 	
public__ 
object__ 
ConvertFromSql__ $
(__$ %
object__% +
obj__, /
)__/ 0
{`` 	
ifaa 
(aa 
objaa 
==aa 
DBNullaa 
.aa 
Valueaa #
)aa# $
returnaa% +
nullaa, 0
;aa0 1
ifbb 
(bb 
objbb 
.bb 
GetTypebb 
(bb 
)bb 
.bb 
Namebb "
==bb# %
$strbb& 4
||bb5 7
objbb8 ;
.bb; <
GetTypebb< C
(bbC D
)bbD E
.bbE F
NamebbF J
==bbK M
$strbbN [
)bb[ \
{cc 
vardd 
val1dd 
=dd 
(dd 
objdd 
.dd  
GetTypedd  '
(dd' (
)dd( )
.dd) *
	GetMethoddd* 3
(dd3 4
$strdd4 @
)dd@ A
.ddA B
InvokeddB H
(ddH I
objddI L
,ddL M
nullddN R
)ddR S
asddT V
SqlBytesddW _
)dd_ `
.dd` a
Valuedda f
;ddf g
	IGeometryee 
geoee 
=ee 

_wkbReaderee  *
.ee* +
Readee+ /
(ee/ 0
val1ee0 4
)ee4 5
;ee5 6
returnff 
geoff 
;ff 
}gg 
returnhh 
objhh 
;hh 
}ii 	
publicjj 
objectjj 
ConvertToSqljj "
(jj" #
objectjj# )
objjj* -
)jj- .
{kk 	
ifll 
(ll 
objll 
==ll 
nullll 
)ll 
returnll #
DBNullll$ *
.ll* +
Valuell+ 0
;ll0 1
ifmm 
(mm 
objmm 
==mm 
DBNullmm 
.mm 
Valuemm #
)mm# $
returnmm% +
nullmm, 0
;mm0 1
ifnn 
(nn 
typeofnn 
(nn 
	IGeometrynn  
)nn  !
.nn! "
IsAssignableFromnn" 2
(nn2 3
objnn3 6
.nn6 7
GetTypenn7 >
(nn> ?
)nn? @
)nn@ A
)nnA B
returnoo 
(oo 
(oo 
	IGeometryoo "
)oo" #
objoo# &
)oo& '
.oo' (
AsTextoo( .
(oo. /
)oo/ 0
;oo0 1
returnpp 
objpp 
;pp 
}qq 	
}rr 
}ss π¥
xD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\Query.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Database %
{		 
public 

class 
Query 
{ 
public 
string 
Command 
{ 
get  #
;# $
set% (
;( )
}* +
public 
QueryParameter 
[ 
] 

Parameters  *
{+ ,
get- 0
;0 1
set2 5
;5 6
}7 8
public 
bool 
IsStoredProcedure %
{& '
get( +
;+ ,
set- 0
;0 1
}2 3
public 
Query 
( 
) 
{ 	

Parameters 
= 
new 
QueryParameter +
[+ ,
$num, -
]- .
;. /
} 	
} 
public 

class 
QueryParameter 
{ 
public 
string 
Name 
{ 
get  
;  !
set" %
;% &
}' (
public 
object 
Value 
{ 
get !
;! "
set# &
;& '
}( )
public 
override 
string 
ToString '
(' (
)( )
{ 	
return 
string 
. 
Format  
(  !
$str! +
,+ ,
Name- 1
,1 2
Value3 8
)8 9
;9 :
} 	
} 
[!! 
Serializable!! 
]!! 
["" 
DataContract"" 
]"" 
public## 

class## 
SimpleQuery## 
{$$ 
[%% 	

DataMember%%	 
]%% 
public&& 

INamedItem&& 
[&& 
]&& 
Fields&& "
{&&# $
get&&% (
;&&( )
set&&* -
;&&- .
}&&/ 0
['' 	

DataMember''	 
]'' 
public(( 
BEXP(( 
Filter(( 
{(( 
get((  
;((  !
set((" %
;((% &
}((' (
[)) 	

DataMember))	 
])) 
public** 
IQueryOrderItem** 
[** 
]**  
Sort**! %
{**& '
get**( +
;**+ ,
set**- 0
;**0 1
}**2 3
[++ 	

DataMember++	 
]++ 
public,, 
int,, 
?,, 
Skip,, 
{,, 
get,, 
;,, 
set,,  #
;,,# $
},,% &
[-- 	

DataMember--	 
]-- 
public.. 
int.. 
?.. 
Take.. 
{.. 
get.. 
;.. 
set..  #
;..# $
}..% &
}// 
[11 
Serializable11 
]11 
public22 

class22 
	NamedItem22 
:22 

INamedItem22 '
{33 
public44 
string44 
Name44 
{44 
get44  
;44  !
set44" %
;44% &
}44' (
}55 
public:: 

	interface:: 
	Condition:: 
{;; 
	QuerySort<< 
Sort<< 
{<< 
get<< 
;<< 
set<< !
;<<! "
}<<# $
string== 
[== 
]== 
Fields== 
{== 
get== 
;== 
set== "
;==" #
}==$ %
int>> 
?>> 

StartIndex>> 
{>> 
get>> 
;>> 
set>> "
;>>" #
}>>$ %
int?? 
??? 
Count?? 
{?? 
get?? 
;?? 
set?? 
;?? 
}??  
}@@ 
publicBB 

classBB 
ConditionNewBB 
:BB 
	ConditionBB  )
{CC 
publicDD 
BEXPDD 
FilterDD 
{DD 
getDD  
;DD  !
setDD" %
;DD% &
}DD' (
publicEE 
	QuerySortEE 
SortEE 
{EE 
getEE  #
;EE# $
setEE% (
;EE( )
}EE* +
publicFF 
stringFF 
[FF 
]FF 
FieldsFF 
{FF  
getFF! $
;FF$ %
setFF& )
;FF) *
}FF+ ,
publicGG 
intGG 
?GG 

StartIndexGG 
{GG  
getGG! $
;GG$ %
setGG& )
;GG) *
}GG+ ,
publicHH 
intHH 
?HH 
CountHH 
{HH 
getHH 
;HH  
setHH! $
;HH$ %
}HH& '
}II 
publicLL 

classLL 
ConditionExLL 
:LL 
	ConditionLL (
{MM 
publicNN 
QueryConditionNN 
[NN 
]NN 
FilterNN  &
{NN' (
getNN) ,
;NN, -
setNN. 1
;NN1 2
}NN3 4
publicOO 
	QuerySortOO 
SortOO 
{OO 
getOO  #
;OO# $
setOO% (
;OO( )
}OO* +
publicPP 
stringPP 
[PP 
]PP 
FieldsPP 
{PP  
getPP! $
;PP$ %
setPP& )
;PP) *
}PP+ ,
publicQQ 
intQQ 
?QQ 

StartIndexQQ 
{QQ  
getQQ! $
;QQ$ %
setQQ& )
;QQ) *
}QQ+ ,
publicRR 
intRR 
?RR 
CountRR 
{RR 
getRR 
;RR  
setRR! $
;RR$ %
}RR& '
}SS 
publicVV 

classVV 
	QuerySortVV 
{WW 
publicXX 
stringXX 
FieldXX 
{XX 
getXX !
;XX! "
setXX# &
;XX& '
}XX( )
publicYY 
stringYY 
TypeYY 
{YY 
getYY  
;YY  !
setYY" %
;YY% &
}YY' (
}ZZ 
public]] 

class]] 
QueryCondition]] 
{^^ 
public__ 
string__ 
Field__ 
{__ 
get__ !
;__! "
set__# &
;__& '
}__( )
public`` 
string`` 
Operator`` 
{``  
get``! $
;``$ %
set``& )
;``) *
}``+ ,
publicaa 
objectaa 
Valueaa 
{aa 
getaa !
;aa! "
setaa# &
;aa& '
}aa( )
}bb 
publicff 

classff 
CondtionToQueryff  
{gg 
publichh 
statichh 
SimpleQueryhh !
Converthh" )
(hh) *
	Conditionhh* 3
	conditionhh4 =
)hh= >
{ii 	
SimpleQueryjj 
queryjj 
=jj 
newjj  #
SimpleQueryjj$ /
(jj/ 0
)jj0 1
;jj1 2
ifkk 
(kk 
	conditionkk 
!=kk 
nullkk !
)kk! "
{ll 
ifnn 
(nn 
	conditionnn 
isnn  
ConditionExnn! ,
)nn, -
{oo 
querypp 
.pp 
Filterpp  
=pp! "
ParseFilterpp# .
(pp. /
(pp/ 0
(pp0 1
ConditionExpp1 <
)pp< =
	conditionpp= F
)ppF G
.ppG H
FilterppH N
)ppN O
;ppO P
}qq 
ifss 
(ss 
	conditionss 
isss  
ConditionNewss! -
)ss- .
{tt 
queryuu 
.uu 
Filteruu  
=uu! "
(uu# $
(uu$ %
ConditionNewuu% 1
)uu1 2
	conditionuu2 ;
)uu; <
.uu< =
Filteruu= C
;uuC D
}vv 
queryyy 
.yy 
Fieldsyy 
=yy 
	conditionyy (
.yy( )
Fieldsyy) /
==yy0 2
nullyy3 7
?yy8 9
nullyy: >
:yy? @
	conditionyyA J
.yyJ K
FieldsyyK Q
.yyQ R
SelectyyR X
(yyX Y
ayyY Z
=>yy[ ]
newyy^ a
COLyyb e
(yye f
ayyf g
)yyg h
)yyh i
.yyi j
ToArrayyyj q
(yyq r
)yyr s
;yys t
ifzz 
(zz 
	conditionzz 
.zz 
Sortzz "
!=zz# %
nullzz& *
)zz* +
{{{ 
query|| 
.|| 
Sort|| 
=||  
new||! $
IQueryOrderItem||% 4
[||4 5
]||5 6
{||7 8
	condition}} 
.}} 
Sort}} "
.}}" #
Type}}# '
.}}' (
ToLower}}( /
(}}/ 0
)}}0 1
==}}2 4
$str}}5 :
?}}; <
(~~ 
IQueryOrderItem~~ (
)~~( )
new~~) ,
ASC~~- 0
(~~0 1
)~~1 2
{~~3 4
Value~~5 :
=~~; <
new~~= @
COL~~A D
(~~D E
	condition~~E N
.~~N O
Sort~~O S
.~~S T
Field~~T Y
??~~Z \
$str~~] f
)~~f g
}~~h i
:~~j k
( 
IQueryOrderItem (
)( )
new) ,
DESC- 1
(1 2
)2 3
{4 5
Value6 ;
=< =
new> A
COLB E
(E F
	conditionF O
.O P
SortP T
.T U
FieldU Z
??[ ]
$str_ h
)h i
}j k
}
ÄÄ 
;
ÄÄ 
}
ÅÅ 
else
ÇÇ 
{
ÉÉ 
query
ÑÑ 
.
ÑÑ 
Sort
ÑÑ 
=
ÑÑ  
new
ÑÑ! $
IQueryOrderItem
ÑÑ% 4
[
ÑÑ4 5
]
ÑÑ5 6
{
ÑÑ7 8
(
ÖÖ 
IQueryOrderItem
ÖÖ (
)
ÖÖ( )
new
ÖÖ) ,
DESC
ÖÖ- 1
(
ÖÖ1 2
)
ÖÖ2 3
{
ÖÖ4 5
Value
ÖÖ6 ;
=
ÖÖ< =
new
ÖÖ> A
COL
ÖÖB E
(
ÖÖE F
$str
ÖÖF O
)
ÖÖO P
}
ÖÖQ R
}
ÜÜ 
;
ÜÜ 
}
áá 
query
àà 
.
àà 
Skip
àà 
=
àà 
	condition
àà &
.
àà& '

StartIndex
àà' 1
??
àà2 4
$num
àà5 6
;
àà6 7
query
ââ 
.
ââ 
Take
ââ 
=
ââ 
	condition
ââ &
.
ââ& '
Count
ââ' ,
??
ââ- /
$num
ââ0 2
;
ââ2 3
}
ää 
return
ãã 
query
ãã 
;
ãã 
}
åå 	
private
éé 
static
éé 
BEXP
éé 
ParseFilter
éé '
(
éé' (
QueryCondition
éé( 6
[
éé6 7
]
éé7 8
	condition
éé9 B
)
ééB C
{
èè 	
BEXP
êê 
exp
êê 
=
êê 
null
êê 
;
êê 
if
ëë 
(
ëë 
	condition
ëë 
==
ëë 
null
ëë !
)
ëë! "
return
ëë# )
null
ëë* .
;
ëë. /
for
íí 
(
íí 
var
íí 
i
íí 
=
íí 
$num
íí 
;
íí 
i
íí 
<
íí 
	condition
íí  )
.
íí) *
Length
íí* 0
;
íí0 1
i
íí2 3
++
íí3 5
)
íí5 6
{
ìì 
var
îî 
cond
îî 
=
îî 
	condition
îî $
[
îî$ %
i
îî% &
]
îî& '
;
îî' (
BEXP
ïï 
exp2
ïï 
=
ïï !
ParseQueryCondition
ïï /
(
ïï/ 0
cond
ïï0 4
)
ïï4 5
;
ïï5 6
if
ññ 
(
ññ 
i
ññ 
==
ññ 
$num
ññ 
)
ññ 
exp
ññ 
=
ññ  !
exp2
ññ" &
;
ññ& '
else
óó 
exp
óó 
=
óó 
new
óó 
BEXP
óó #
{
óó$ %
Operand1
óó& .
=
óó/ 0
exp
óó1 4
,
óó4 5
Operand2
óó6 >
=
óó? @
exp2
óóA E
,
óóE F
Operator
óóG O
=
óóP Q
BinaryOperator
óóR `
.
óó` a
And
óóa d
}
óóe f
;
óóf g
}
òò 
return
ôô 
exp
ôô 
;
ôô 
}
öö 	
private
úú 
static
úú 
BEXP
úú !
ParseQueryCondition
úú /
(
úú/ 0
QueryCondition
úú0 >
cond
úú? C
)
úúC D
{
ùù 	
BEXP
ûû 
exp2
ûû 
;
ûû 
if
üü 
(
üü 
cond
üü 
.
üü 
Operator
üü 
==
üü  
ExpressionType
üü! /
.
üü/ 0
Equal
üü0 5
.
üü5 6
ToString
üü6 >
(
üü> ?
)
üü? @
||
üüA C
cond
üüD H
.
üüH I
Operator
üüI Q
==
üüR T
$str
üüU X
)
üüX Y
exp2
†† 
=
†† 
new
†† 
BEXP
†† 
{
††  !
Operand1
††" *
=
††+ ,
new
††- 0
COL
††1 4
(
††4 5
cond
††5 9
.
††9 :
Field
††: ?
)
††? @
,
††@ A
Operand2
††B J
=
††K L
new
††M P
VAL
††Q T
(
††T U
cond
††U Y
.
††Y Z
Value
††Z _
)
††_ `
,
††` a
Operator
††b j
=
††k l
BinaryOperator
††m {
.
††{ |
Equal††| Å
}††Ç É
;††É Ñ
else
°° 
if
°° 
(
°° 
cond
°° 
.
°° 
Operator
°° "
==
°°# %
ExpressionType
°°& 4
.
°°4 5
GreaterThan
°°5 @
.
°°@ A
ToString
°°A I
(
°°I J
)
°°J K
||
°°L N
cond
°°O S
.
°°S T
Operator
°°T \
==
°°] _
$str
°°` c
)
°°c d
exp2
¢¢ 
=
¢¢ 
new
¢¢ 
BEXP
¢¢ 
{
¢¢  !
Operand1
¢¢" *
=
¢¢+ ,
new
¢¢- 0
COL
¢¢1 4
(
¢¢4 5
cond
¢¢5 9
.
¢¢9 :
Field
¢¢: ?
)
¢¢? @
,
¢¢@ A
Operand2
¢¢B J
=
¢¢K L
new
¢¢M P
VAL
¢¢Q T
(
¢¢T U
cond
¢¢U Y
.
¢¢Y Z
Value
¢¢Z _
)
¢¢_ `
,
¢¢` a
Operator
¢¢b j
=
¢¢k l
BinaryOperator
¢¢m {
.
¢¢{ |
GreaterThan¢¢| á
}¢¢à â
;¢¢â ä
else
££ 
if
££ 
(
££ 
cond
££ 
.
££ 
Operator
££ "
==
££# %
ExpressionType
££& 4
.
££4 5 
GreaterThanOrEqual
££5 G
.
££G H
ToString
££H P
(
££P Q
)
££Q R
||
££S U
cond
££V Z
.
££Z [
Operator
££[ c
==
££d f
$str
££g k
)
££k l
exp2
§§ 
=
§§ 
new
§§ 
BEXP
§§ 
{
§§  !
Operand1
§§" *
=
§§+ ,
new
§§- 0
COL
§§1 4
(
§§4 5
cond
§§5 9
.
§§9 :
Field
§§: ?
)
§§? @
,
§§@ A
Operand2
§§B J
=
§§K L
new
§§M P
VAL
§§Q T
(
§§T U
cond
§§U Y
.
§§Y Z
Value
§§Z _
)
§§_ `
,
§§` a
Operator
§§b j
=
§§k l
BinaryOperator
§§m {
.
§§{ |!
GreaterThanOrEqual§§| é
}§§è ê
;§§ê ë
else
•• 
if
•• 
(
•• 
cond
•• 
.
•• 
Operator
•• "
==
••# %
ExpressionType
••& 4
.
••4 5
LessThan
••5 =
.
••= >
ToString
••> F
(
••F G
)
••G H
||
••I K
cond
••L P
.
••P Q
Operator
••Q Y
==
••Z \
$str
••] `
)
••` a
exp2
¶¶ 
=
¶¶ 
new
¶¶ 
BEXP
¶¶ 
{
¶¶  !
Operand1
¶¶" *
=
¶¶+ ,
new
¶¶- 0
COL
¶¶1 4
(
¶¶4 5
cond
¶¶5 9
.
¶¶9 :
Field
¶¶: ?
)
¶¶? @
,
¶¶@ A
Operand2
¶¶B J
=
¶¶K L
new
¶¶M P
VAL
¶¶Q T
(
¶¶T U
cond
¶¶U Y
.
¶¶Y Z
Value
¶¶Z _
)
¶¶_ `
,
¶¶` a
Operator
¶¶b j
=
¶¶k l
BinaryOperator
¶¶m {
.
¶¶{ |
LessThan¶¶| Ñ
}¶¶Ö Ü
;¶¶Ü á
else
ßß 
if
ßß 
(
ßß 
cond
ßß 
.
ßß 
Operator
ßß "
==
ßß# %
ExpressionType
ßß& 4
.
ßß4 5
LessThanOrEqual
ßß5 D
.
ßßD E
ToString
ßßE M
(
ßßM N
)
ßßN O
||
ßßP R
cond
ßßS W
.
ßßW X
Operator
ßßX `
==
ßßa c
$str
ßßd h
)
ßßh i
exp2
®® 
=
®® 
new
®® 
BEXP
®® 
{
®®  !
Operand1
®®" *
=
®®+ ,
new
®®- 0
COL
®®1 4
(
®®4 5
cond
®®5 9
.
®®9 :
Field
®®: ?
)
®®? @
,
®®@ A
Operand2
®®B J
=
®®K L
new
®®M P
VAL
®®Q T
(
®®T U
cond
®®U Y
.
®®Y Z
Value
®®Z _
)
®®_ `
,
®®` a
Operator
®®b j
=
®®k l
BinaryOperator
®®m {
.
®®{ |
LessThanOrEqual®®| ã
}®®å ç
;®®ç é
else
©© 
if
©© 
(
©© 
cond
©© 
.
©© 
Operator
©© "
==
©©# %
ExpressionType
©©& 4
.
©©4 5
Not
©©5 8
.
©©8 9
ToString
©©9 A
(
©©A B
)
©©B C
||
©©D F
cond
©©G K
.
©©K L
Operator
©©L T
==
©©U W
$str
©©X \
)
©©\ ]
exp2
™™ 
=
™™ 
new
™™ 
BEXP
™™ 
{
™™  !
Operand1
™™" *
=
™™+ ,
new
™™- 0
COL
™™1 4
(
™™4 5
cond
™™5 9
.
™™9 :
Field
™™: ?
)
™™? @
,
™™@ A
Operator
™™B J
=
™™K L
BinaryOperator
™™M [
.
™™[ \
Not
™™\ _
}
™™` a
;
™™a b
else
´´ 
if
´´ 
(
´´ 
cond
´´ 
.
´´ 
Operator
´´ "
==
´´# %
ExpressionType
´´& 4
.
´´4 5
NotEqual
´´5 =
.
´´= >
ToString
´´> F
(
´´F G
)
´´G H
||
´´I K
cond
´´L P
.
´´P Q
Operator
´´Q Y
==
´´Z \
$str
´´] a
)
´´a b
exp2
¨¨ 
=
¨¨ 
new
¨¨ 
BEXP
¨¨ 
{
¨¨  !
Operand1
¨¨" *
=
¨¨+ ,
new
¨¨- 0
COL
¨¨1 4
(
¨¨4 5
cond
¨¨5 9
.
¨¨9 :
Field
¨¨: ?
)
¨¨? @
,
¨¨@ A
Operand2
¨¨B J
=
¨¨K L
new
¨¨M P
VAL
¨¨Q T
(
¨¨T U
cond
¨¨U Y
.
¨¨Y Z
Value
¨¨Z _
)
¨¨_ `
,
¨¨` a
Operator
¨¨b j
=
¨¨k l
BinaryOperator
¨¨m {
.
¨¨{ |
NotEqual¨¨| Ñ
}¨¨Ö Ü
;¨¨Ü á
else
≠≠ 
if
≠≠ 
(
≠≠ 
cond
≠≠ 
.
≠≠ 
Operator
≠≠ "
==
≠≠# %
$str
≠≠& 0
||
≠≠1 3
cond
≠≠4 8
.
≠≠8 9
Operator
≠≠9 A
==
≠≠B D
$str
≠≠E K
)
≠≠K L
exp2
ÆÆ 
=
ÆÆ 
new
ÆÆ 
BEXP
ÆÆ 
{
ÆÆ  !
Operand1
ÆÆ" *
=
ÆÆ+ ,
new
ÆÆ- 0
COL
ÆÆ1 4
(
ÆÆ4 5
cond
ÆÆ5 9
.
ÆÆ9 :
Field
ÆÆ: ?
)
ÆÆ? @
,
ÆÆ@ A
Operand2
ÆÆB J
=
ÆÆK L
new
ÆÆM P
VAL
ÆÆQ T
(
ÆÆT U
$str
ÆÆU X
+
ÆÆY Z
cond
ÆÆ[ _
.
ÆÆ_ `
Value
ÆÆ` e
+
ÆÆf g
$str
ÆÆh k
)
ÆÆk l
,
ÆÆl m
Operator
ÆÆn v
=
ÆÆw x
BinaryOperatorÆÆy á
.ÆÆá à
LikeÆÆà å
}ÆÆç é
;ÆÆé è
else
ØØ 
if
ØØ 
(
ØØ 
cond
ØØ 
.
ØØ 
Operator
ØØ "
==
ØØ# %
$str
ØØ& *
)
ØØ* +
exp2
∞∞ 
=
∞∞ 
new
∞∞ 
BEXP
∞∞ 
{
∞∞  !
Operand1
∞∞" *
=
∞∞+ ,
new
∞∞- 0
COL
∞∞1 4
(
∞∞4 5
cond
∞∞5 9
.
∞∞9 :
Field
∞∞: ?
)
∞∞? @
,
∞∞@ A
Operand2
∞∞B J
=
∞∞K L
new
∞∞M P
ARR
∞∞Q T
(
∞∞T U
)
∞∞U V
{
∞∞W X
Values
∞∞Y _
=
∞∞` a
(
∞∞b c
(
∞∞c d
Array
∞∞d i
)
∞∞i j
cond
∞∞j n
.
∞∞n o
Value
∞∞o t
)
∞∞t u
.
∞∞u v
Cast
∞∞v z
<
∞∞z {
object∞∞{ Å
>∞∞Å Ç
(∞∞Ç É
)∞∞É Ñ
.∞∞Ñ Ö
Select∞∞Ö ã
(∞∞ã å
a∞∞å ç
=>∞∞é ê
new∞∞ë î
VAL∞∞ï ò
(∞∞ò ô
a∞∞ô ö
)∞∞ö õ
)∞∞õ ú
.∞∞ú ù
ToArray∞∞ù §
(∞∞§ •
)∞∞• ¶
}∞∞ß ®
,∞∞® ©
Operator∞∞™ ≤
=∞∞≥ ¥
BinaryOperator∞∞µ √
.∞∞√ ƒ
In∞∞ƒ ∆
}∞∞« »
;∞∞» …
else
±± 
throw
≤≤ 
new
≤≤ 
	Exception
≤≤ #
(
≤≤# $
$str
≤≤$ 6
)
≤≤6 7
;
≤≤7 8
return
≥≥ 
exp2
≥≥ 
;
≥≥ 
}
¥¥ 	
}
–– 
}÷÷ Ó=
èD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\DataBaseHelper\IQueryBuilder.cs
	namespace		 	
Infoline		
 
.		 
	Framework		 
.		 
Database		 %
{

 
public 

	interface 
IQueryBuilder "
{ 
Query 
ConvertToQuery 
( 
string #
txt$ '
,' (
params) /
object0 6
[6 7
]7 8

parameters9 C
)C D
;D E
Query 
GetFetchQuery 
( 
bool  

isFunction! +
,+ ,
string- 3
	tableName4 =
,= >
string? E

schemaNameF P
,P Q
objectR X
[X Y
]Y Z
functionParameters[ m
,m n
Listo s
<s t
QueryStatement	t Ç
>
Ç É

statements
Ñ é
,
é è
List
ê î
<
î ï
object
ï õ
>
õ ú

parameters
ù ß
)
ß ®
;
® ©
string  
GetFetchQueryForTest #
(# $
bool$ (

isFunction) 3
,3 4
string5 ;
	tableName< E
,E F
stringG M

schemaNameN X
,X Y
objectZ `
[` a
]a b
functionParametersc u
,u v
Listw {
<{ |
QueryStatement	| ä
>
ä ã

statements
å ñ
,
ñ ó
List
ò ú
<
ú ù
object
ù £
>
£ §

parameters
• Ø
)
Ø ∞
;
∞ ±
Query 
GetInsertQuery 
( 
string #
	tableName$ -
,- .
string/ 5

schemaName6 @
,@ A

DictionaryB L
<L M
stringM S
,S T
objectU [
>[ \
	parameter] f
,f g
stringh n
[n o
]o p

exceptColsq {
){ |
;| }
Query 
GetUpdateQuery 
( 
string #
	tableName$ -
,- .
string/ 5

schemaName6 @
,@ A

DictionaryB L
<L M
stringM S
,S T
objectU [
>[ \
	parameter] f
,f g
stringh n
[n o
]o p
idColsq w
,w x
stringy 
[	 Ä
]
Ä Å

exceptCols
Ç å
=
ç é
null
è ì
,
ì î
bool
ï ô
setNull
ö °
=
¢ £
false
§ ©
)
© ™
;
™ ´
Query 
GetDeleteQuery 
( 
string #
	tableName$ -
,- .
string/ 5

schemaName6 @
,@ A

DictionaryB L
<L M
stringM S
,S T
objectU [
>[ \
	parameter] f
,f g
stringh n
[n o
]o p
idColsq w
)w x
;x y
Query 
GetDeleteQuery 
( 
string #
	tableName$ -
,- .
string/ 5

schemaName6 @
,@ A
BEXPB F
	conditionG P
)P Q
;Q R
Query 
GetInsertQuery 
< 
T 
> 
(  
string  &
	tableName' 0
,0 1
string2 8

schemaName9 C
,C D
TE F
	parameterG P
,P Q

ExpressionR \
<\ ]
Func] a
<a b
Tb c
,c d
objecte k
>k l
>l m

exceptColsn x
)x y
;y z
Query!! 
GetUpdateQuery!! 
<!! 
T!! 
>!! 
(!!  
string!!  &
	tableName!!' 0
,!!0 1
string!!2 8

schemaName!!9 C
,!!C D
T!!E F
	parameter!!G P
,!!P Q

Expression!!R \
<!!\ ]
Func!!] a
<!!a b
T!!b c
,!!c d
object!!e k
>!!k l
>!!l m
idCols!!n t
,!!t u

Expression	!!v Ä
<
!!Ä Å
Func
!!Å Ö
<
!!Ö Ü
T
!!Ü á
,
!!á à
object
!!â è
>
!!è ê
>
!!ê ë

exceptCols
!!í ú
=
!!ù û
null
!!ü £
,
!!£ §
bool
!!• ©
setNull
!!™ ±
=
!!≤ ≥
false
!!¥ π
)
!!π ∫
;
!!∫ ª
Query## $
GetUpdateQueryBulkUpdate## &
<##& '
T##' (
>##( )
(##) *
string##* 0
	tableName##1 :
,##: ;
string##< B

schemaName##C M
,##M N
List##O S
<##S T
T##T U
>##U V
	parameter##W `
,##` a

Expression##b l
<##l m
Func##m q
<##q r
T##r s
,##s t
object##u {
>##{ |
>##| }
idCols	##~ Ñ
,
##Ñ Ö

Expression
##Ü ê
<
##ê ë
Func
##ë ï
<
##ï ñ
T
##ñ ó
,
##ó ò
object
##ô ü
>
##ü †
>
##† °

exceptCols
##¢ ¨
=
##≠ Æ
null
##Ø ≥
,
##≥ ¥
bool
##µ π
setNull
##∫ ¡
=
##¬ √
false
##ƒ …
)
##…  
;
##  À
Query%% $
GetInsertQueryBulkInsert%% &
<%%& '
T%%' (
>%%( )
(%%) *
string%%* 0
	tableName%%1 :
,%%: ;
string%%< B

schemaName%%C M
,%%M N
List%%O S
<%%S T
T%%T U
>%%U V
	parameter%%W `
,%%` a
bool%%b f
setNull%%g n
=%%o p
false%%q v
)%%v w
;%%w x
Query&& 
GetDeleteQuery&& 
<&& 
T&& 
>&& 
(&&  
string&&  &
	tableName&&' 0
,&&0 1
string&&2 8

schemaName&&9 C
,&&C D
T&&E F
	parameter&&G P
,&&P Q

Expression&&R \
<&&\ ]
Func&&] a
<&&a b
T&&b c
,&&c d
object&&e k
>&&k l
>&&l m
idCols&&n t
)&&t u
;&&u v
Query(( 
GetInsertQuery(( 
((( 
string(( #
	tableName(($ -
,((- .
string((/ 5

schemaName((6 @
,((@ A
IFeature((B J
feature((K R
,((R S
string((T Z
geometryColumnName(([ m
)((m n
;((n o
Query** 
GetUpdateQuery** 
(** 
string** #
	tableName**$ -
,**- .
string**/ 5

schemaName**6 @
,**@ A
IFeature**B J
feature**K R
,**R S
string**T Z
geometryColumnName**[ m
,**m n
string**o u
[**u v
]**v w
idCols**x ~
,**~ 
bool
**Ä Ñ
setNull
**Ö å
=
**ç é
false
**è î
)
**î ï
;
**ï ñ
Query,, 
GetDropTableQuery,, 
(,,  
string,,  &
	tableName,,' 0
,,,0 1
string,,2 8

schemaName,,9 C
),,C D
;,,D E
Query.. 
GetTableExistsQuery.. !
(..! "
string.." (
	tableName..) 2
,..2 3
string..4 :

schemaName..; E
)..E F
;..F G
}// 
}22 Œ
êD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\DataBaseHelper\IQueryExecutor.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Database %
{ 
public 

	interface 
IQueryExecutor #
:$ %
IDisposable& 1
{ 
string 
ConnectionString 
{  !
get" %
;% &
}' (
bool 
IsTransactionOpen 
{  
get! $
;$ %
}& '
bool 
IsSupportBulkInsert  
{! "
get# &
;& '
}( )
string 

ServerName 
{ 
get 
;  
}! "
string 
DbName 
{ 
get 
; 
} 
T 	
ExecuteScaler
 
< 
T 
> 
( 
Query  
query! &
)& '
;' (
FeatureCollection 
ExecuteFeature (
(( )
Query) .
query/ 4
)4 5
;5 6
IEnumerable!! 
<!! 
T!! 
>!! 
ExecuteReader!! $
<!!$ %
T!!% &
>!!& '
(!!' (
Query!!( -
query!!. 3
)!!3 4
;!!4 5
IEnumerable## 
<## 

Dictionary## 
<## 
string## %
,##% &
object##' -
>##- .
>##. /
ExecuteReader##0 =
(##= >
Query##> C
query##D I
)##I J
;##J K
ResultStatus&& 
ExecuteNonQuery&& $
(&&$ %
Query&&% *
query&&+ 0
)&&0 1
;&&1 2
ResultStatus(( 
ExecuteBulkInsert(( &
(((& '
string((' -
	tableName((. 7
,((7 8
string((9 ?

schemaName((@ J
,((J K
FeatureCollection((L ]
	parametre((^ g
,((g h
	TableInfo((i r
	tableInfo((s |
,((| }
string	((} É
geomColName
((Ñ è
)
((è ê
;
((ê ë
DbTransaction** 
BeginTransaction** &
(**& '
)**' (
;**( )
void,, 
Close,, 
(,, 
),, 
;,, 
}-- 
}.. ΩÍ
ÇD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\QueryExtensions.cs
	namespace		 	
Infoline		
 
.		 
	Framework		 
.		 
Database		 %
{

 
public 

static 
class 
QueryExtensions '
{ 
public 
static 
bool 
In 
( 
this "
object# )
item* .
,. /
Array0 5
array6 ;
); <
{ 	
foreach 
( 
var 
a 
in 
array #
)# $
if 
( 
a 
. 
Equals 
( 
item !
)! "
)" #
return$ *
false+ 0
;0 1
return 
true 
; 
} 	
public 
static 
decimal 
Abs !
(! "
this" &
decimal' .
value/ 4
)4 5
{6 7
return8 >
Math? C
.C D
AbsD G
(G H
valueH M
)M N
;N O
}P Q
public 
static 
double 
Abs  
(  !
this! %
double& ,
value- 2
)2 3
{4 5
return6 <
Math= A
.A B
AbsB E
(E F
valueF K
)K L
;L M
}N O
public 
static 
float 
Abs 
(  
this  $
float% *
value+ 0
)0 1
{2 3
return4 :
Math; ?
.? @
Abs@ C
(C D
valueD I
)I J
;J K
}L M
public 
static 
int 
Abs 
( 
this "
int# &
value' ,
), -
{. /
return0 6
Math7 ;
.; <
Abs< ?
(? @
value@ E
)E F
;F G
}H I
public 
static 
long 
Abs 
( 
this #
long$ (
value) .
). /
{0 1
return2 8
Math9 =
.= >
Abs> A
(A B
valueB G
)G H
;H I
}J K
public 
static 
sbyte 
Abs 
(  
this  $
sbyte% *
value+ 0
)0 1
{2 3
return4 :
Math; ?
.? @
Abs@ C
(C D
valueD I
)I J
;J K
}L M
public 
static 
short 
Abs 
(  
this  $
short% *
value+ 0
)0 1
{2 3
return4 :
Math; ?
.? @
Abs@ C
(C D
valueD I
)I J
;J K
}L M
public 
static 
decimal 
? 
Abs "
(" #
this# '
decimal( /
?/ 0
value1 6
)6 7
{8 9
if: <
(= >
value> C
.C D
HasValueD L
)L M
returnN T
MathU Y
.Y Z
AbsZ ]
(] ^
value^ c
.c d
Valued i
)i j
;j k
returnl r
nulls w
;w x
}y z
public 
static 
double 
? 
Abs !
(! "
this" &
double' -
?- .
value/ 4
)4 5
{6 7
if8 :
(; <
value< A
.A B
HasValueB J
)J K
returnL R
MathS W
.W X
AbsX [
([ \
value\ a
.a b
Valueb g
)g h
;h i
returnj p
nullq u
;u v
}w x
public 
static 
float 
? 
Abs  
(  !
this! %
float& +
?+ ,
value- 2
)2 3
{4 5
if6 8
(9 :
value: ?
.? @
HasValue@ H
)H I
returnJ P
MathQ U
.U V
AbsV Y
(Y Z
valueZ _
._ `
Value` e
)e f
;f g
returnh n
nullo s
;s t
}u v
public   
static   
int   
?   
Abs   
(   
this   #
int  $ '
?  ' (
value  ) .
)  . /
{  0 1
if  2 4
(  5 6
value  6 ;
.  ; <
HasValue  < D
)  D E
return  F L
Math  M Q
.  Q R
Abs  R U
(  U V
value  V [
.  [ \
Value  \ a
)  a b
;  b c
return  d j
null  k o
;  o p
}  q r
public!! 
static!! 
long!! 
?!! 
Abs!! 
(!!  
this!!  $
long!!% )
?!!) *
value!!+ 0
)!!0 1
{!!2 3
if!!4 6
(!!7 8
value!!8 =
.!!= >
HasValue!!> F
)!!F G
return!!H N
Math!!O S
.!!S T
Abs!!T W
(!!W X
value!!X ]
.!!] ^
Value!!^ c
)!!c d
;!!d e
return!!f l
null!!m q
;!!q r
}!!s t
public"" 
static"" 
sbyte"" 
?"" 
Abs""  
(""  !
this""! %
sbyte""& +
?""+ ,
value""- 2
)""2 3
{""4 5
if""6 8
(""9 :
value"": ?
.""? @
HasValue""@ H
)""H I
return""J P
Math""Q U
.""U V
Abs""V Y
(""Y Z
value""Z _
.""_ `
Value""` e
)""e f
;""f g
return""h n
null""o s
;""s t
}""u v
public## 
static## 
short## 
?## 
Abs##  
(##  !
this##! %
short##& +
?##+ ,
value##- 2
)##2 3
{##4 5
if##6 8
(##9 :
value##: ?
.##? @
HasValue##@ H
)##H I
return##J P
Math##Q U
.##U V
Abs##V Y
(##Y Z
value##Z _
.##_ `
Value##` e
)##e f
;##f g
return##h n
null##o s
;##s t
}##u v
public&& 
static&& 
decimal&& 
Ceiling&& %
(&&% &
this&&& *
decimal&&+ 2
value&&3 8
)&&8 9
{&&: ;
return&&< B
Math&&C G
.&&G H
Ceiling&&H O
(&&O P
value&&P U
)&&U V
;&&V W
}&&X Y
public'' 
static'' 
double'' 
Ceiling'' $
(''$ %
this''% )
double''* 0
value''1 6
)''6 7
{''8 9
return'': @
Math''A E
.''E F
Ceiling''F M
(''M N
value''N S
)''S T
;''T U
}''V W
public(( 
static(( 
double(( 
Ceiling(( $
((($ %
this((% )
float((* /
value((0 5
)((5 6
{((7 8
return((9 ?
Math((@ D
.((D E
Ceiling((E L
(((L M
value((M R
)((R S
;((S T
}((U V
public)) 
static)) 
decimal)) 
?)) 
Ceiling)) &
())& '
this))' +
decimal)), 3
?))3 4
value))5 :
))): ;
{))< =
if))> @
())A B
value))B G
.))G H
HasValue))H P
)))P Q
return))R X
Math))Y ]
.))] ^
Ceiling))^ e
())e f
value))f k
.))k l
Value))l q
)))q r
;))r s
return))t z
null)){ 
;	)) Ä
}
))Å Ç
public** 
static** 
double** 
?** 
Ceiling** %
(**% &
this**& *
double**+ 1
?**1 2
value**3 8
)**8 9
{**: ;
if**< >
(**? @
value**@ E
.**E F
HasValue**F N
)**N O
return**P V
Math**W [
.**[ \
Ceiling**\ c
(**c d
value**d i
.**i j
Value**j o
)**o p
;**p q
return**r x
null**y }
;**} ~
}	** Ä
public++ 
static++ 
double++ 
?++ 
Ceiling++ %
(++% &
this++& *
float+++ 0
?++0 1
value++2 7
)++7 8
{++9 :
if++; =
(++> ?
value++? D
.++D E
HasValue++E M
)++M N
return++O U
Math++V Z
.++Z [
Ceiling++[ b
(++b c
value++c h
.++h i
Value++i n
)++n o
;++o p
return++q w
null++x |
;++| }
}++~ 
public.. 
static.. 
decimal.. 
Floor.. #
(..# $
this..$ (
decimal..) 0
value..1 6
)..6 7
{..8 9
return..: @
Math..A E
...E F
Floor..F K
(..K L
value..L Q
)..Q R
;..R S
}..T U
public// 
static// 
double// 
Floor// "
(//" #
this//# '
double//( .
value/// 4
)//4 5
{//6 7
return//8 >
Math//? C
.//C D
Floor//D I
(//I J
value//J O
)//O P
;//P Q
}//R S
public00 
static00 
double00 
Floor00 "
(00" #
this00# '
float00( -
value00. 3
)003 4
{005 6
return007 =
Math00> B
.00B C
Floor00C H
(00H I
value00I N
)00N O
;00O P
}00Q R
public11 
static11 
decimal11 
?11 
Floor11 $
(11$ %
this11% )
decimal11* 1
?111 2
value113 8
)118 9
{11: ;
if11< >
(11? @
value11@ E
.11E F
HasValue11F N
)11N O
return11P V
Math11W [
.11[ \
Floor11\ a
(11a b
value11b g
.11g h
Value11h m
)11m n
;11n o
return11p v
null11w {
;11{ |
}11} ~
public22 
static22 
double22 
?22 
Floor22 #
(22# $
this22$ (
double22) /
?22/ 0
value221 6
)226 7
{228 9
if22: <
(22= >
value22> C
.22C D
HasValue22D L
)22L M
return22N T
Math22U Y
.22Y Z
Floor22Z _
(22_ `
value22` e
.22e f
Value22f k
)22k l
;22l m
return22n t
null22u y
;22y z
}22{ |
public33 
static33 
double33 
?33 
Floor33 #
(33# $
this33$ (
float33) .
?33. /
value330 5
)335 6
{337 8
if339 ;
(33< =
value33= B
.33B C
HasValue33C K
)33K L
return33M S
Math33T X
.33X Y
Floor33Y ^
(33^ _
value33_ d
.33d e
Value33e j
)33j k
;33k l
return33m s
null33t x
;33x y
}33z {
public66 
static66 
double66 
Acos66 !
(66! "
this66" &
double66' -
value66. 3
)663 4
{665 6
return667 =
Math66> B
.66B C
Acos66C G
(66G H
value66H M
)66M N
;66N O
}66P Q
public77 
static77 
double77 
Acos77 !
(77! "
this77" &
float77' ,
value77- 2
)772 3
{774 5
return776 <
Math77= A
.77A B
Acos77B F
(77F G
value77G L
)77L M
;77M N
}77O P
public88 
static88 
double88 
Acos88 !
(88! "
this88" &
int88' *
value88+ 0
)880 1
{882 3
return884 :
Math88; ?
.88? @
Acos88@ D
(88D E
value88E J
)88J K
;88K L
}88M N
public99 
static99 
double99 
Acos99 !
(99! "
this99" &
long99' +
value99, 1
)991 2
{993 4
return995 ;
Math99< @
.99@ A
Acos99A E
(99E F
value99F K
)99K L
;99L M
}99N O
public:: 
static:: 
double:: 
Acos:: !
(::! "
this::" &
sbyte::' ,
value::- 2
)::2 3
{::4 5
return::6 <
Math::= A
.::A B
Acos::B F
(::F G
value::G L
)::L M
;::M N
}::O P
public;; 
static;; 
double;; 
Acos;; !
(;;! "
this;;" &
short;;' ,
value;;- 2
);;2 3
{;;4 5
return;;6 <
Math;;= A
.;;A B
Acos;;B F
(;;F G
value;;G L
);;L M
;;;M N
};;O P
public<< 
static<< 
double<< 
?<< 
Acos<< "
(<<" #
this<<# '
double<<( .
?<<. /
value<<0 5
)<<5 6
{<<7 8
if<<9 ;
(<<< =
value<<= B
.<<B C
HasValue<<C K
)<<K L
return<<M S
Math<<T X
.<<X Y
Acos<<Y ]
(<<] ^
value<<^ c
.<<c d
Value<<d i
)<<i j
;<<j k
return<<l r
null<<s w
;<<w x
}<<y z
public== 
static== 
double== 
?== 
Acos== "
(==" #
this==# '
float==( -
?==- .
value==/ 4
)==4 5
{==6 7
if==8 :
(==; <
value==< A
.==A B
HasValue==B J
)==J K
return==L R
Math==S W
.==W X
Acos==X \
(==\ ]
value==] b
.==b c
Value==c h
)==h i
;==i j
return==k q
null==r v
;==v w
}==x y
public>> 
static>> 
double>> 
?>> 
Acos>> "
(>>" #
this>># '
int>>( +
?>>+ ,
value>>- 2
)>>2 3
{>>4 5
if>>6 8
(>>9 :
value>>: ?
.>>? @
HasValue>>@ H
)>>H I
return>>J P
Math>>Q U
.>>U V
Acos>>V Z
(>>Z [
value>>[ `
.>>` a
Value>>a f
)>>f g
;>>g h
return>>i o
null>>p t
;>>t u
}>>v w
public?? 
static?? 
double?? 
??? 
Acos?? "
(??" #
this??# '
long??( ,
???, -
value??. 3
)??3 4
{??5 6
if??7 9
(??: ;
value??; @
.??@ A
HasValue??A I
)??I J
return??K Q
Math??R V
.??V W
Acos??W [
(??[ \
value??\ a
.??a b
Value??b g
)??g h
;??h i
return??j p
null??q u
;??u v
}??w x
public@@ 
static@@ 
double@@ 
?@@ 
Acos@@ "
(@@" #
this@@# '
sbyte@@( -
?@@- .
value@@/ 4
)@@4 5
{@@6 7
if@@8 :
(@@; <
value@@< A
.@@A B
HasValue@@B J
)@@J K
return@@L R
Math@@S W
.@@W X
Acos@@X \
(@@\ ]
value@@] b
.@@b c
Value@@c h
)@@h i
;@@i j
return@@k q
null@@r v
;@@v w
}@@x y
publicAA 
staticAA 
doubleAA 
?AA 
AcosAA "
(AA" #
thisAA# '
shortAA( -
?AA- .
valueAA/ 4
)AA4 5
{AA6 7
ifAA8 :
(AA; <
valueAA< A
.AAA B
HasValueAAB J
)AAJ K
returnAAL R
MathAAS W
.AAW X
AcosAAX \
(AA\ ]
valueAA] b
.AAb c
ValueAAc h
)AAh i
;AAi j
returnAAk q
nullAAr v
;AAv w
}AAx y
publicDD 
staticDD 
doubleDD 
AsinDD !
(DD! "
thisDD" &
doubleDD' -
valueDD. 3
)DD3 4
{DD5 6
returnDD7 =
MathDD> B
.DDB C
AsinDDC G
(DDG H
valueDDH M
)DDM N
;DDN O
}DDP Q
publicEE 
staticEE 
doubleEE 
AsinEE !
(EE! "
thisEE" &
floatEE' ,
valueEE- 2
)EE2 3
{EE4 5
returnEE6 <
MathEE= A
.EEA B
AsinEEB F
(EEF G
valueEEG L
)EEL M
;EEM N
}EEO P
publicFF 
staticFF 
doubleFF 
AsinFF !
(FF! "
thisFF" &
intFF' *
valueFF+ 0
)FF0 1
{FF2 3
returnFF4 :
MathFF; ?
.FF? @
AsinFF@ D
(FFD E
valueFFE J
)FFJ K
;FFK L
}FFM N
publicGG 
staticGG 
doubleGG 
AsinGG !
(GG! "
thisGG" &
longGG' +
valueGG, 1
)GG1 2
{GG3 4
returnGG5 ;
MathGG< @
.GG@ A
AsinGGA E
(GGE F
valueGGF K
)GGK L
;GGL M
}GGN O
publicHH 
staticHH 
doubleHH 
AsinHH !
(HH! "
thisHH" &
sbyteHH' ,
valueHH- 2
)HH2 3
{HH4 5
returnHH6 <
MathHH= A
.HHA B
AsinHHB F
(HHF G
valueHHG L
)HHL M
;HHM N
}HHO P
publicII 
staticII 
doubleII 
AsinII !
(II! "
thisII" &
shortII' ,
valueII- 2
)II2 3
{II4 5
returnII6 <
MathII= A
.IIA B
AsinIIB F
(IIF G
valueIIG L
)IIL M
;IIM N
}IIO P
publicJJ 
staticJJ 
doubleJJ 
?JJ 
AsinJJ "
(JJ" #
thisJJ# '
doubleJJ( .
?JJ. /
valueJJ0 5
)JJ5 6
{JJ7 8
ifJJ9 ;
(JJ< =
valueJJ= B
.JJB C
HasValueJJC K
)JJK L
returnJJM S
MathJJT X
.JJX Y
AsinJJY ]
(JJ] ^
valueJJ^ c
.JJc d
ValueJJd i
)JJi j
;JJj k
returnJJl r
nullJJs w
;JJw x
}JJy z
publicKK 
staticKK 
doubleKK 
?KK 
AsinKK "
(KK" #
thisKK# '
floatKK( -
?KK- .
valueKK/ 4
)KK4 5
{KK6 7
ifKK8 :
(KK; <
valueKK< A
.KKA B
HasValueKKB J
)KKJ K
returnKKL R
MathKKS W
.KKW X
AsinKKX \
(KK\ ]
valueKK] b
.KKb c
ValueKKc h
)KKh i
;KKi j
returnKKk q
nullKKr v
;KKv w
}KKx y
publicLL 
staticLL 
doubleLL 
?LL 
AsinLL "
(LL" #
thisLL# '
intLL( +
?LL+ ,
valueLL- 2
)LL2 3
{LL4 5
ifLL6 8
(LL9 :
valueLL: ?
.LL? @
HasValueLL@ H
)LLH I
returnLLJ P
MathLLQ U
.LLU V
AsinLLV Z
(LLZ [
valueLL[ `
.LL` a
ValueLLa f
)LLf g
;LLg h
returnLLi o
nullLLp t
;LLt u
}LLv w
publicMM 
staticMM 
doubleMM 
?MM 
AsinMM "
(MM" #
thisMM# '
longMM( ,
?MM, -
valueMM. 3
)MM3 4
{MM5 6
ifMM7 9
(MM: ;
valueMM; @
.MM@ A
HasValueMMA I
)MMI J
returnMMK Q
MathMMR V
.MMV W
AsinMMW [
(MM[ \
valueMM\ a
.MMa b
ValueMMb g
)MMg h
;MMh i
returnMMj p
nullMMq u
;MMu v
}MMw x
publicNN 
staticNN 
doubleNN 
?NN 
AsinNN "
(NN" #
thisNN# '
sbyteNN( -
?NN- .
valueNN/ 4
)NN4 5
{NN6 7
ifNN8 :
(NN; <
valueNN< A
.NNA B
HasValueNNB J
)NNJ K
returnNNL R
MathNNS W
.NNW X
AsinNNX \
(NN\ ]
valueNN] b
.NNb c
ValueNNc h
)NNh i
;NNi j
returnNNk q
nullNNr v
;NNv w
}NNx y
publicOO 
staticOO 
doubleOO 
?OO 
AsinOO "
(OO" #
thisOO# '
shortOO( -
?OO- .
valueOO/ 4
)OO4 5
{OO6 7
ifOO8 :
(OO; <
valueOO< A
.OOA B
HasValueOOB J
)OOJ K
returnOOL R
MathOOS W
.OOW X
AsinOOX \
(OO\ ]
valueOO] b
.OOb c
ValueOOc h
)OOh i
;OOi j
returnOOk q
nullOOr v
;OOv w
}OOx y
publicRR 
staticRR 
doubleRR 
AtanRR !
(RR! "
thisRR" &
doubleRR' -
valueRR. 3
)RR3 4
{RR5 6
returnRR7 =
MathRR> B
.RRB C
AtanRRC G
(RRG H
valueRRH M
)RRM N
;RRN O
}RRP Q
publicSS 
staticSS 
doubleSS 
AtanSS !
(SS! "
thisSS" &
floatSS' ,
valueSS- 2
)SS2 3
{SS4 5
returnSS6 <
MathSS= A
.SSA B
AtanSSB F
(SSF G
valueSSG L
)SSL M
;SSM N
}SSO P
publicTT 
staticTT 
doubleTT 
AtanTT !
(TT! "
thisTT" &
intTT' *
valueTT+ 0
)TT0 1
{TT2 3
returnTT4 :
MathTT; ?
.TT? @
AtanTT@ D
(TTD E
valueTTE J
)TTJ K
;TTK L
}TTM N
publicUU 
staticUU 
doubleUU 
AtanUU !
(UU! "
thisUU" &
longUU' +
valueUU, 1
)UU1 2
{UU3 4
returnUU5 ;
MathUU< @
.UU@ A
AtanUUA E
(UUE F
valueUUF K
)UUK L
;UUL M
}UUN O
publicVV 
staticVV 
doubleVV 
AtanVV !
(VV! "
thisVV" &
sbyteVV' ,
valueVV- 2
)VV2 3
{VV4 5
returnVV6 <
MathVV= A
.VVA B
AtanVVB F
(VVF G
valueVVG L
)VVL M
;VVM N
}VVO P
publicWW 
staticWW 
doubleWW 
AtanWW !
(WW! "
thisWW" &
shortWW' ,
valueWW- 2
)WW2 3
{WW4 5
returnWW6 <
MathWW= A
.WWA B
AtanWWB F
(WWF G
valueWWG L
)WWL M
;WWM N
}WWO P
publicXX 
staticXX 
doubleXX 
?XX 
AtanXX "
(XX" #
thisXX# '
doubleXX( .
?XX. /
valueXX0 5
)XX5 6
{XX7 8
ifXX9 ;
(XX< =
valueXX= B
.XXB C
HasValueXXC K
)XXK L
returnXXM S
MathXXT X
.XXX Y
AtanXXY ]
(XX] ^
valueXX^ c
.XXc d
ValueXXd i
)XXi j
;XXj k
returnXXl r
nullXXs w
;XXw x
}XXy z
publicYY 
staticYY 
doubleYY 
?YY 
AtanYY "
(YY" #
thisYY# '
floatYY( -
?YY- .
valueYY/ 4
)YY4 5
{YY6 7
ifYY8 :
(YY; <
valueYY< A
.YYA B
HasValueYYB J
)YYJ K
returnYYL R
MathYYS W
.YYW X
AtanYYX \
(YY\ ]
valueYY] b
.YYb c
ValueYYc h
)YYh i
;YYi j
returnYYk q
nullYYr v
;YYv w
}YYx y
publicZZ 
staticZZ 
doubleZZ 
?ZZ 
AtanZZ "
(ZZ" #
thisZZ# '
intZZ( +
?ZZ+ ,
valueZZ- 2
)ZZ2 3
{ZZ4 5
ifZZ6 8
(ZZ9 :
valueZZ: ?
.ZZ? @
HasValueZZ@ H
)ZZH I
returnZZJ P
MathZZQ U
.ZZU V
AtanZZV Z
(ZZZ [
valueZZ[ `
.ZZ` a
ValueZZa f
)ZZf g
;ZZg h
returnZZi o
nullZZp t
;ZZt u
}ZZv w
public[[ 
static[[ 
double[[ 
?[[ 
Atan[[ "
([[" #
this[[# '
long[[( ,
?[[, -
value[[. 3
)[[3 4
{[[5 6
if[[7 9
([[: ;
value[[; @
.[[@ A
HasValue[[A I
)[[I J
return[[K Q
Math[[R V
.[[V W
Atan[[W [
([[[ \
value[[\ a
.[[a b
Value[[b g
)[[g h
;[[h i
return[[j p
null[[q u
;[[u v
}[[w x
public\\ 
static\\ 
double\\ 
?\\ 
Atan\\ "
(\\" #
this\\# '
sbyte\\( -
?\\- .
value\\/ 4
)\\4 5
{\\6 7
if\\8 :
(\\; <
value\\< A
.\\A B
HasValue\\B J
)\\J K
return\\L R
Math\\S W
.\\W X
Atan\\X \
(\\\ ]
value\\] b
.\\b c
Value\\c h
)\\h i
;\\i j
return\\k q
null\\r v
;\\v w
}\\x y
public]] 
static]] 
double]] 
?]] 
Atan]] "
(]]" #
this]]# '
short]]( -
?]]- .
value]]/ 4
)]]4 5
{]]6 7
if]]8 :
(]]; <
value]]< A
.]]A B
HasValue]]B J
)]]J K
return]]L R
Math]]S W
.]]W X
Atan]]X \
(]]\ ]
value]]] b
.]]b c
Value]]c h
)]]h i
;]]i j
return]]k q
null]]r v
;]]v w
}]]x y
publiccc 
staticcc 
doublecc 
Coscc  
(cc  !
thiscc! %
doublecc& ,
valuecc- 2
)cc2 3
{cc4 5
returncc6 <
Mathcc= A
.ccA B
CosccB E
(ccE F
valueccF K
)ccK L
;ccL M
}ccN O
publicdd 
staticdd 
doubledd 
Cosdd  
(dd  !
thisdd! %
floatdd& +
valuedd, 1
)dd1 2
{dd3 4
returndd5 ;
Mathdd< @
.dd@ A
CosddA D
(ddD E
valueddE J
)ddJ K
;ddK L
}ddM N
publicee 
staticee 
doubleee 
Cosee  
(ee  !
thisee! %
intee& )
valueee* /
)ee/ 0
{ee1 2
returnee3 9
Mathee: >
.ee> ?
Cosee? B
(eeB C
valueeeC H
)eeH I
;eeI J
}eeK L
publicff 
staticff 
doubleff 
Cosff  
(ff  !
thisff! %
longff& *
valueff+ 0
)ff0 1
{ff2 3
returnff4 :
Mathff; ?
.ff? @
Cosff@ C
(ffC D
valueffD I
)ffI J
;ffJ K
}ffL M
publicgg 
staticgg 
doublegg 
Cosgg  
(gg  !
thisgg! %
sbytegg& +
valuegg, 1
)gg1 2
{gg3 4
returngg5 ;
Mathgg< @
.gg@ A
CosggA D
(ggD E
valueggE J
)ggJ K
;ggK L
}ggM N
publichh 
statichh 
doublehh 
Coshh  
(hh  !
thishh! %
shorthh& +
valuehh, 1
)hh1 2
{hh3 4
returnhh5 ;
Mathhh< @
.hh@ A
CoshhA D
(hhD E
valuehhE J
)hhJ K
;hhK L
}hhM N
publicii 
staticii 
doubleii 
?ii 
Cosii !
(ii! "
thisii" &
doubleii' -
?ii- .
valueii/ 4
)ii4 5
{ii6 7
ifii8 :
(ii; <
valueii< A
.iiA B
HasValueiiB J
)iiJ K
returniiL R
MathiiS W
.iiW X
CosiiX [
(ii[ \
valueii\ a
.iia b
Valueiib g
)iig h
;iih i
returniij p
nulliiq u
;iiu v
}iiw x
publicjj 
staticjj 
doublejj 
?jj 
Cosjj !
(jj! "
thisjj" &
floatjj' ,
?jj, -
valuejj. 3
)jj3 4
{jj5 6
ifjj7 9
(jj: ;
valuejj; @
.jj@ A
HasValuejjA I
)jjI J
returnjjK Q
MathjjR V
.jjV W
CosjjW Z
(jjZ [
valuejj[ `
.jj` a
Valuejja f
)jjf g
;jjg h
returnjji o
nulljjp t
;jjt u
}jjv w
publickk 
statickk 
doublekk 
?kk 
Coskk !
(kk! "
thiskk" &
intkk' *
?kk* +
valuekk, 1
)kk1 2
{kk3 4
ifkk5 7
(kk8 9
valuekk9 >
.kk> ?
HasValuekk? G
)kkG H
returnkkI O
MathkkP T
.kkT U
CoskkU X
(kkX Y
valuekkY ^
.kk^ _
Valuekk_ d
)kkd e
;kke f
returnkkg m
nullkkn r
;kkr s
}kkt u
publicll 
staticll 
doublell 
?ll 
Cosll !
(ll! "
thisll" &
longll' +
?ll+ ,
valuell- 2
)ll2 3
{ll4 5
ifll6 8
(ll9 :
valuell: ?
.ll? @
HasValuell@ H
)llH I
returnllJ P
MathllQ U
.llU V
CosllV Y
(llY Z
valuellZ _
.ll_ `
Valuell` e
)lle f
;llf g
returnllh n
nullllo s
;lls t
}llu v
publicmm 
staticmm 
doublemm 
?mm 
Cosmm !
(mm! "
thismm" &
sbytemm' ,
?mm, -
valuemm. 3
)mm3 4
{mm5 6
ifmm7 9
(mm: ;
valuemm; @
.mm@ A
HasValuemmA I
)mmI J
returnmmK Q
MathmmR V
.mmV W
CosmmW Z
(mmZ [
valuemm[ `
.mm` a
Valuemma f
)mmf g
;mmg h
returnmmi o
nullmmp t
;mmt u
}mmv w
publicnn 
staticnn 
doublenn 
?nn 
Cosnn !
(nn! "
thisnn" &
shortnn' ,
?nn, -
valuenn. 3
)nn3 4
{nn5 6
ifnn7 9
(nn: ;
valuenn; @
.nn@ A
HasValuennA I
)nnI J
returnnnK Q
MathnnR V
.nnV W
CosnnW Z
(nnZ [
valuenn[ `
.nn` a
Valuenna f
)nnf g
;nng h
returnnni o
nullnnp t
;nnt u
}nnv w
publicqq 
staticqq 
doubleqq 
Expqq  
(qq  !
thisqq! %
doubleqq& ,
valueqq- 2
)qq2 3
{qq4 5
returnqq6 <
Mathqq= A
.qqA B
ExpqqB E
(qqE F
valueqqF K
)qqK L
;qqL M
}qqN O
publicrr 
staticrr 
doublerr 
Exprr  
(rr  !
thisrr! %
floatrr& +
valuerr, 1
)rr1 2
{rr3 4
returnrr5 ;
Mathrr< @
.rr@ A
ExprrA D
(rrD E
valuerrE J
)rrJ K
;rrK L
}rrM N
publicss 
staticss 
doubless 
Expss  
(ss  !
thisss! %
intss& )
valuess* /
)ss/ 0
{ss1 2
returnss3 9
Mathss: >
.ss> ?
Expss? B
(ssB C
valuessC H
)ssH I
;ssI J
}ssK L
publictt 
statictt 
doublett 
Exptt  
(tt  !
thistt! %
longtt& *
valuett+ 0
)tt0 1
{tt2 3
returntt4 :
Mathtt; ?
.tt? @
Exptt@ C
(ttC D
valuettD I
)ttI J
;ttJ K
}ttL M
publicuu 
staticuu 
doubleuu 
Expuu  
(uu  !
thisuu! %
sbyteuu& +
valueuu, 1
)uu1 2
{uu3 4
returnuu5 ;
Mathuu< @
.uu@ A
ExpuuA D
(uuD E
valueuuE J
)uuJ K
;uuK L
}uuM N
publicvv 
staticvv 
doublevv 
Expvv  
(vv  !
thisvv! %
shortvv& +
valuevv, 1
)vv1 2
{vv3 4
returnvv5 ;
Mathvv< @
.vv@ A
ExpvvA D
(vvD E
valuevvE J
)vvJ K
;vvK L
}vvM N
publicww 
staticww 
doubleww 
?ww 
Expww !
(ww! "
thisww" &
doubleww' -
?ww- .
valueww/ 4
)ww4 5
{ww6 7
ifww8 :
(ww; <
valueww< A
.wwA B
HasValuewwB J
)wwJ K
returnwwL R
MathwwS W
.wwW X
ExpwwX [
(ww[ \
valueww\ a
.wwa b
Valuewwb g
)wwg h
;wwh i
returnwwj p
nullwwq u
;wwu v
}www x
publicxx 
staticxx 
doublexx 
?xx 
Expxx !
(xx! "
thisxx" &
floatxx' ,
?xx, -
valuexx. 3
)xx3 4
{xx5 6
ifxx7 9
(xx: ;
valuexx; @
.xx@ A
HasValuexxA I
)xxI J
returnxxK Q
MathxxR V
.xxV W
ExpxxW Z
(xxZ [
valuexx[ `
.xx` a
Valuexxa f
)xxf g
;xxg h
returnxxi o
nullxxp t
;xxt u
}xxv w
publicyy 
staticyy 
doubleyy 
?yy 
Expyy !
(yy! "
thisyy" &
intyy' *
?yy* +
valueyy, 1
)yy1 2
{yy3 4
ifyy5 7
(yy8 9
valueyy9 >
.yy> ?
HasValueyy? G
)yyG H
returnyyI O
MathyyP T
.yyT U
ExpyyU X
(yyX Y
valueyyY ^
.yy^ _
Valueyy_ d
)yyd e
;yye f
returnyyg m
nullyyn r
;yyr s
}yyt u
publiczz 
staticzz 
doublezz 
?zz 
Expzz !
(zz! "
thiszz" &
longzz' +
?zz+ ,
valuezz- 2
)zz2 3
{zz4 5
ifzz6 8
(zz9 :
valuezz: ?
.zz? @
HasValuezz@ H
)zzH I
returnzzJ P
MathzzQ U
.zzU V
ExpzzV Y
(zzY Z
valuezzZ _
.zz_ `
Valuezz` e
)zze f
;zzf g
returnzzh n
nullzzo s
;zzs t
}zzu v
public{{ 
static{{ 
double{{ 
?{{ 
Exp{{ !
({{! "
this{{" &
sbyte{{' ,
?{{, -
value{{. 3
){{3 4
{{{5 6
if{{7 9
({{: ;
value{{; @
.{{@ A
HasValue{{A I
){{I J
return{{K Q
Math{{R V
.{{V W
Exp{{W Z
({{Z [
value{{[ `
.{{` a
Value{{a f
){{f g
;{{g h
return{{i o
null{{p t
;{{t u
}{{v w
public|| 
static|| 
double|| 
?|| 
Exp|| !
(||! "
this||" &
short||' ,
?||, -
value||. 3
)||3 4
{||5 6
if||7 9
(||: ;
value||; @
.||@ A
HasValue||A I
)||I J
return||K Q
Math||R V
.||V W
Exp||W Z
(||Z [
value||[ `
.||` a
Value||a f
)||f g
;||g h
return||i o
null||p t
;||t u
}||v w
public 
static 
double 
Sqrt !
(! "
this" &
double' -
value. 3
)3 4
{5 6
return7 =
Math> B
.B C
SqrtC G
(G H
valueH M
)M N
;N O
}P Q
public
ÄÄ 
static
ÄÄ 
double
ÄÄ 
Sqrt
ÄÄ !
(
ÄÄ! "
this
ÄÄ" &
float
ÄÄ' ,
value
ÄÄ- 2
)
ÄÄ2 3
{
ÄÄ4 5
return
ÄÄ6 <
Math
ÄÄ= A
.
ÄÄA B
Sqrt
ÄÄB F
(
ÄÄF G
value
ÄÄG L
)
ÄÄL M
;
ÄÄM N
}
ÄÄO P
public
ÅÅ 
static
ÅÅ 
double
ÅÅ 
Sqrt
ÅÅ !
(
ÅÅ! "
this
ÅÅ" &
int
ÅÅ' *
value
ÅÅ+ 0
)
ÅÅ0 1
{
ÅÅ2 3
return
ÅÅ4 :
Math
ÅÅ; ?
.
ÅÅ? @
Sqrt
ÅÅ@ D
(
ÅÅD E
value
ÅÅE J
)
ÅÅJ K
;
ÅÅK L
}
ÅÅM N
public
ÇÇ 
static
ÇÇ 
double
ÇÇ 
Sqrt
ÇÇ !
(
ÇÇ! "
this
ÇÇ" &
long
ÇÇ' +
value
ÇÇ, 1
)
ÇÇ1 2
{
ÇÇ3 4
return
ÇÇ5 ;
Math
ÇÇ< @
.
ÇÇ@ A
Sqrt
ÇÇA E
(
ÇÇE F
value
ÇÇF K
)
ÇÇK L
;
ÇÇL M
}
ÇÇN O
public
ÉÉ 
static
ÉÉ 
double
ÉÉ 
Sqrt
ÉÉ !
(
ÉÉ! "
this
ÉÉ" &
sbyte
ÉÉ' ,
value
ÉÉ- 2
)
ÉÉ2 3
{
ÉÉ4 5
return
ÉÉ6 <
Math
ÉÉ= A
.
ÉÉA B
Sqrt
ÉÉB F
(
ÉÉF G
value
ÉÉG L
)
ÉÉL M
;
ÉÉM N
}
ÉÉO P
public
ÑÑ 
static
ÑÑ 
double
ÑÑ 
Sqrt
ÑÑ !
(
ÑÑ! "
this
ÑÑ" &
short
ÑÑ' ,
value
ÑÑ- 2
)
ÑÑ2 3
{
ÑÑ4 5
return
ÑÑ6 <
Math
ÑÑ= A
.
ÑÑA B
Sqrt
ÑÑB F
(
ÑÑF G
value
ÑÑG L
)
ÑÑL M
;
ÑÑM N
}
ÑÑO P
public
ÖÖ 
static
ÖÖ 
double
ÖÖ 
?
ÖÖ 
Sqrt
ÖÖ "
(
ÖÖ" #
this
ÖÖ# '
double
ÖÖ( .
?
ÖÖ. /
value
ÖÖ0 5
)
ÖÖ5 6
{
ÖÖ7 8
if
ÖÖ9 ;
(
ÖÖ< =
value
ÖÖ= B
.
ÖÖB C
HasValue
ÖÖC K
)
ÖÖK L
return
ÖÖM S
Math
ÖÖT X
.
ÖÖX Y
Sqrt
ÖÖY ]
(
ÖÖ] ^
value
ÖÖ^ c
.
ÖÖc d
Value
ÖÖd i
)
ÖÖi j
;
ÖÖj k
return
ÖÖl r
null
ÖÖs w
;
ÖÖw x
}
ÖÖy z
public
ÜÜ 
static
ÜÜ 
double
ÜÜ 
?
ÜÜ 
Sqrt
ÜÜ "
(
ÜÜ" #
this
ÜÜ# '
float
ÜÜ( -
?
ÜÜ- .
value
ÜÜ/ 4
)
ÜÜ4 5
{
ÜÜ6 7
if
ÜÜ8 :
(
ÜÜ; <
value
ÜÜ< A
.
ÜÜA B
HasValue
ÜÜB J
)
ÜÜJ K
return
ÜÜL R
Math
ÜÜS W
.
ÜÜW X
Sqrt
ÜÜX \
(
ÜÜ\ ]
value
ÜÜ] b
.
ÜÜb c
Value
ÜÜc h
)
ÜÜh i
;
ÜÜi j
return
ÜÜk q
null
ÜÜr v
;
ÜÜv w
}
ÜÜx y
public
áá 
static
áá 
double
áá 
?
áá 
Sqrt
áá "
(
áá" #
this
áá# '
int
áá( +
?
áá+ ,
value
áá- 2
)
áá2 3
{
áá4 5
if
áá6 8
(
áá9 :
value
áá: ?
.
áá? @
HasValue
áá@ H
)
ááH I
return
ááJ P
Math
ááQ U
.
ááU V
Sqrt
ááV Z
(
ááZ [
value
áá[ `
.
áá` a
Value
ááa f
)
ááf g
;
áág h
return
áái o
null
ááp t
;
áát u
}
ááv w
public
àà 
static
àà 
double
àà 
?
àà 
Sqrt
àà "
(
àà" #
this
àà# '
long
àà( ,
?
àà, -
value
àà. 3
)
àà3 4
{
àà5 6
if
àà7 9
(
àà: ;
value
àà; @
.
àà@ A
HasValue
ààA I
)
ààI J
return
ààK Q
Math
ààR V
.
ààV W
Sqrt
ààW [
(
àà[ \
value
àà\ a
.
ààa b
Value
ààb g
)
ààg h
;
ààh i
return
ààj p
null
ààq u
;
ààu v
}
ààw x
public
ââ 
static
ââ 
double
ââ 
?
ââ 
Sqrt
ââ "
(
ââ" #
this
ââ# '
sbyte
ââ( -
?
ââ- .
value
ââ/ 4
)
ââ4 5
{
ââ6 7
if
ââ8 :
(
ââ; <
value
ââ< A
.
ââA B
HasValue
ââB J
)
ââJ K
return
ââL R
Math
ââS W
.
ââW X
Sqrt
ââX \
(
ââ\ ]
value
ââ] b
.
ââb c
Value
ââc h
)
ââh i
;
ââi j
return
ââk q
null
ââr v
;
ââv w
}
ââx y
public
ää 
static
ää 
double
ää 
?
ää 
Sqrt
ää "
(
ää" #
this
ää# '
short
ää( -
?
ää- .
value
ää/ 4
)
ää4 5
{
ää6 7
if
ää8 :
(
ää; <
value
ää< A
.
ääA B
HasValue
ääB J
)
ääJ K
return
ääL R
Math
ääS W
.
ääW X
Sqrt
ääX \
(
ää\ ]
value
ää] b
.
ääb c
Value
ääc h
)
ääh i
;
ääi j
return
ääk q
null
äär v
;
ääv w
}
ääx y
public
çç 
static
çç 
double
çç 
Square
çç #
(
çç# $
this
çç$ (
double
çç) /
value
çç0 5
)
çç5 6
{
çç7 8
return
çç9 ?
(
çç@ A
value
ççA F
*
ççG H
value
ççI N
)
ççN O
;
ççO P
}
ççQ R
public
éé 
static
éé 
double
éé 
Square
éé #
(
éé# $
this
éé$ (
float
éé) .
value
éé/ 4
)
éé4 5
{
éé6 7
return
éé8 >
(
éé? @
value
éé@ E
*
ééF G
value
ééH M
)
ééM N
;
ééN O
}
ééP Q
public
èè 
static
èè 
double
èè 
Square
èè #
(
èè# $
this
èè$ (
int
èè) ,
value
èè- 2
)
èè2 3
{
èè4 5
return
èè6 <
(
èè= >
value
èè> C
*
èèD E
value
èèF K
)
èèK L
;
èèL M
}
èèN O
public
êê 
static
êê 
double
êê 
Square
êê #
(
êê# $
this
êê$ (
long
êê) -
value
êê. 3
)
êê3 4
{
êê5 6
return
êê7 =
(
êê> ?
value
êê? D
*
êêE F
value
êêG L
)
êêL M
;
êêM N
}
êêO P
public
ëë 
static
ëë 
double
ëë 
Square
ëë #
(
ëë# $
this
ëë$ (
sbyte
ëë) .
value
ëë/ 4
)
ëë4 5
{
ëë6 7
return
ëë8 >
(
ëë? @
value
ëë@ E
*
ëëF G
value
ëëH M
)
ëëM N
;
ëëN O
}
ëëP Q
public
íí 
static
íí 
double
íí 
Square
íí #
(
íí# $
this
íí$ (
short
íí) .
value
íí/ 4
)
íí4 5
{
íí6 7
return
íí8 >
(
íí? @
value
íí@ E
*
ííF G
value
ííH M
)
ííM N
;
ííN O
}
ííP Q
public
ìì 
static
ìì 
double
ìì 
?
ìì 
Square
ìì $
(
ìì$ %
this
ìì% )
double
ìì* 0
?
ìì0 1
value
ìì2 7
)
ìì7 8
{
ìì9 :
if
ìì; =
(
ìì> ?
value
ìì? D
.
ììD E
HasValue
ììE M
)
ììM N
return
ììO U
(
ììV W
value
ììW \
.
ìì\ ]
Value
ìì] b
*
ììc d
value
ììe j
.
ììj k
Value
ììk p
)
ììp q
;
ììq r
return
ììs y
null
ììz ~
;
ìì~ 
}ììÄ Å
public
îî 
static
îî 
double
îî 
?
îî 
Square
îî $
(
îî$ %
this
îî% )
float
îî* /
?
îî/ 0
value
îî1 6
)
îî6 7
{
îî8 9
if
îî: <
(
îî= >
value
îî> C
.
îîC D
HasValue
îîD L
)
îîL M
return
îîN T
(
îîU V
value
îîV [
.
îî[ \
Value
îî\ a
*
îîb c
value
îîd i
.
îîi j
Value
îîj o
)
îîo p
;
îîp q
return
îîr x
null
îîy }
;
îî} ~
}îî Ä
public
ïï 
static
ïï 
double
ïï 
?
ïï 
Square
ïï $
(
ïï$ %
this
ïï% )
int
ïï* -
?
ïï- .
value
ïï/ 4
)
ïï4 5
{
ïï6 7
if
ïï8 :
(
ïï; <
value
ïï< A
.
ïïA B
HasValue
ïïB J
)
ïïJ K
return
ïïL R
(
ïïS T
value
ïïT Y
.
ïïY Z
Value
ïïZ _
*
ïï` a
value
ïïb g
.
ïïg h
Value
ïïh m
)
ïïm n
;
ïïn o
return
ïïp v
null
ïïw {
;
ïï{ |
}
ïï} ~
public
ññ 
static
ññ 
double
ññ 
?
ññ 
Square
ññ $
(
ññ$ %
this
ññ% )
long
ññ* .
?
ññ. /
value
ññ0 5
)
ññ5 6
{
ññ7 8
if
ññ9 ;
(
ññ< =
value
ññ= B
.
ññB C
HasValue
ññC K
)
ññK L
return
ññM S
(
ññT U
value
ññU Z
.
ññZ [
Value
ññ[ `
*
ñña b
value
ññc h
.
ññh i
Value
ññi n
)
ññn o
;
ñño p
return
ññq w
null
ññx |
;
ññ| }
}
ññ~ 
public
óó 
static
óó 
double
óó 
?
óó 
Square
óó $
(
óó$ %
this
óó% )
sbyte
óó* /
?
óó/ 0
value
óó1 6
)
óó6 7
{
óó8 9
if
óó: <
(
óó= >
value
óó> C
.
óóC D
HasValue
óóD L
)
óóL M
return
óóN T
(
óóU V
value
óóV [
.
óó[ \
Value
óó\ a
*
óób c
value
óód i
.
óói j
Value
óój o
)
óóo p
;
óóp q
return
óór x
null
óóy }
;
óó} ~
}óó Ä
public
òò 
static
òò 
double
òò 
?
òò 
Square
òò $
(
òò$ %
this
òò% )
short
òò* /
?
òò/ 0
value
òò1 6
)
òò6 7
{
òò8 9
if
òò: <
(
òò= >
value
òò> C
.
òòC D
HasValue
òòD L
)
òòL M
return
òòN T
(
òòU V
value
òòV [
.
òò[ \
Value
òò\ a
*
òòb c
value
òòd i
.
òòi j
Value
òòj o
)
òòo p
;
òòp q
return
òòr x
null
òòy }
;
òò} ~
}òò Ä
public
õõ 
static
õõ 
double
õõ 
Sin
õõ  
(
õõ  !
this
õõ! %
double
õõ& ,
value
õõ- 2
)
õõ2 3
{
õõ4 5
return
õõ6 <
Math
õõ= A
.
õõA B
Sin
õõB E
(
õõE F
value
õõF K
)
õõK L
;
õõL M
}
õõN O
public
úú 
static
úú 
double
úú 
Sin
úú  
(
úú  !
this
úú! %
float
úú& +
value
úú, 1
)
úú1 2
{
úú3 4
return
úú5 ;
Math
úú< @
.
úú@ A
Sin
úúA D
(
úúD E
value
úúE J
)
úúJ K
;
úúK L
}
úúM N
public
ùù 
static
ùù 
double
ùù 
Sin
ùù  
(
ùù  !
this
ùù! %
int
ùù& )
value
ùù* /
)
ùù/ 0
{
ùù1 2
return
ùù3 9
Math
ùù: >
.
ùù> ?
Sin
ùù? B
(
ùùB C
value
ùùC H
)
ùùH I
;
ùùI J
}
ùùK L
public
ûû 
static
ûû 
double
ûû 
Sin
ûû  
(
ûû  !
this
ûû! %
long
ûû& *
value
ûû+ 0
)
ûû0 1
{
ûû2 3
return
ûû4 :
Math
ûû; ?
.
ûû? @
Sin
ûû@ C
(
ûûC D
value
ûûD I
)
ûûI J
;
ûûJ K
}
ûûL M
public
üü 
static
üü 
double
üü 
Sin
üü  
(
üü  !
this
üü! %
sbyte
üü& +
value
üü, 1
)
üü1 2
{
üü3 4
return
üü5 ;
Math
üü< @
.
üü@ A
Sin
üüA D
(
üüD E
value
üüE J
)
üüJ K
;
üüK L
}
üüM N
public
†† 
static
†† 
double
†† 
Sin
††  
(
††  !
this
††! %
short
††& +
value
††, 1
)
††1 2
{
††3 4
return
††5 ;
Math
††< @
.
††@ A
Sin
††A D
(
††D E
value
††E J
)
††J K
;
††K L
}
††M N
public
°° 
static
°° 
double
°° 
?
°° 
Sin
°° !
(
°°! "
this
°°" &
double
°°' -
?
°°- .
value
°°/ 4
)
°°4 5
{
°°6 7
if
°°8 :
(
°°; <
value
°°< A
.
°°A B
HasValue
°°B J
)
°°J K
return
°°L R
Math
°°S W
.
°°W X
Sin
°°X [
(
°°[ \
value
°°\ a
.
°°a b
Value
°°b g
)
°°g h
;
°°h i
return
°°j p
null
°°q u
;
°°u v
}
°°w x
public
¢¢ 
static
¢¢ 
double
¢¢ 
?
¢¢ 
Sin
¢¢ !
(
¢¢! "
this
¢¢" &
float
¢¢' ,
?
¢¢, -
value
¢¢. 3
)
¢¢3 4
{
¢¢5 6
if
¢¢7 9
(
¢¢: ;
value
¢¢; @
.
¢¢@ A
HasValue
¢¢A I
)
¢¢I J
return
¢¢K Q
Math
¢¢R V
.
¢¢V W
Sin
¢¢W Z
(
¢¢Z [
value
¢¢[ `
.
¢¢` a
Value
¢¢a f
)
¢¢f g
;
¢¢g h
return
¢¢i o
null
¢¢p t
;
¢¢t u
}
¢¢v w
public
££ 
static
££ 
double
££ 
?
££ 
Sin
££ !
(
££! "
this
££" &
int
££' *
?
££* +
value
££, 1
)
££1 2
{
££3 4
if
££5 7
(
££8 9
value
££9 >
.
££> ?
HasValue
££? G
)
££G H
return
££I O
Math
££P T
.
££T U
Sin
££U X
(
££X Y
value
££Y ^
.
££^ _
Value
££_ d
)
££d e
;
££e f
return
££g m
null
££n r
;
££r s
}
££t u
public
§§ 
static
§§ 
double
§§ 
?
§§ 
Sin
§§ !
(
§§! "
this
§§" &
long
§§' +
?
§§+ ,
value
§§- 2
)
§§2 3
{
§§4 5
if
§§6 8
(
§§9 :
value
§§: ?
.
§§? @
HasValue
§§@ H
)
§§H I
return
§§J P
Math
§§Q U
.
§§U V
Sin
§§V Y
(
§§Y Z
value
§§Z _
.
§§_ `
Value
§§` e
)
§§e f
;
§§f g
return
§§h n
null
§§o s
;
§§s t
}
§§u v
public
•• 
static
•• 
double
•• 
?
•• 
Sin
•• !
(
••! "
this
••" &
sbyte
••' ,
?
••, -
value
••. 3
)
••3 4
{
••5 6
if
••7 9
(
••: ;
value
••; @
.
••@ A
HasValue
••A I
)
••I J
return
••K Q
Math
••R V
.
••V W
Sin
••W Z
(
••Z [
value
••[ `
.
••` a
Value
••a f
)
••f g
;
••g h
return
••i o
null
••p t
;
••t u
}
••v w
public
¶¶ 
static
¶¶ 
double
¶¶ 
?
¶¶ 
Sin
¶¶ !
(
¶¶! "
this
¶¶" &
short
¶¶' ,
?
¶¶, -
value
¶¶. 3
)
¶¶3 4
{
¶¶5 6
if
¶¶7 9
(
¶¶: ;
value
¶¶; @
.
¶¶@ A
HasValue
¶¶A I
)
¶¶I J
return
¶¶K Q
Math
¶¶R V
.
¶¶V W
Sin
¶¶W Z
(
¶¶Z [
value
¶¶[ `
.
¶¶` a
Value
¶¶a f
)
¶¶f g
;
¶¶g h
return
¶¶i o
null
¶¶p t
;
¶¶t u
}
¶¶v w
public
©© 
static
©© 
int
©© 
Sign
©© 
(
©© 
this
©© #
decimal
©©$ +
value
©©, 1
)
©©1 2
{
©©3 4
return
©©5 ;
Math
©©< @
.
©©@ A
Sign
©©A E
(
©©E F
value
©©F K
)
©©K L
;
©©L M
}
©©N O
public
™™ 
static
™™ 
int
™™ 
Sign
™™ 
(
™™ 
this
™™ #
double
™™$ *
value
™™+ 0
)
™™0 1
{
™™2 3
return
™™4 :
Math
™™; ?
.
™™? @
Sign
™™@ D
(
™™D E
value
™™E J
)
™™J K
;
™™K L
}
™™M N
public
´´ 
static
´´ 
int
´´ 
Sign
´´ 
(
´´ 
this
´´ #
float
´´$ )
value
´´* /
)
´´/ 0
{
´´1 2
return
´´3 9
Math
´´: >
.
´´> ?
Sign
´´? C
(
´´C D
value
´´D I
)
´´I J
;
´´J K
}
´´L M
public
¨¨ 
static
¨¨ 
int
¨¨ 
Sign
¨¨ 
(
¨¨ 
this
¨¨ #
int
¨¨$ '
value
¨¨( -
)
¨¨- .
{
¨¨/ 0
return
¨¨1 7
Math
¨¨8 <
.
¨¨< =
Sign
¨¨= A
(
¨¨A B
value
¨¨B G
)
¨¨G H
;
¨¨H I
}
¨¨J K
public
≠≠ 
static
≠≠ 
int
≠≠ 
Sign
≠≠ 
(
≠≠ 
this
≠≠ #
long
≠≠$ (
value
≠≠) .
)
≠≠. /
{
≠≠0 1
return
≠≠2 8
Math
≠≠9 =
.
≠≠= >
Sign
≠≠> B
(
≠≠B C
value
≠≠C H
)
≠≠H I
;
≠≠I J
}
≠≠K L
public
ÆÆ 
static
ÆÆ 
int
ÆÆ 
Sign
ÆÆ 
(
ÆÆ 
this
ÆÆ #
sbyte
ÆÆ$ )
value
ÆÆ* /
)
ÆÆ/ 0
{
ÆÆ1 2
return
ÆÆ3 9
Math
ÆÆ: >
.
ÆÆ> ?
Sign
ÆÆ? C
(
ÆÆC D
value
ÆÆD I
)
ÆÆI J
;
ÆÆJ K
}
ÆÆL M
public
ØØ 
static
ØØ 
int
ØØ 
Sign
ØØ 
(
ØØ 
this
ØØ #
short
ØØ$ )
value
ØØ* /
)
ØØ/ 0
{
ØØ1 2
return
ØØ3 9
Math
ØØ: >
.
ØØ> ?
Sign
ØØ? C
(
ØØC D
value
ØØD I
)
ØØI J
;
ØØJ K
}
ØØL M
public
∞∞ 
static
∞∞ 
int
∞∞ 
?
∞∞ 
Sign
∞∞ 
(
∞∞  
this
∞∞  $
decimal
∞∞% ,
?
∞∞, -
value
∞∞. 3
)
∞∞3 4
{
∞∞5 6
if
∞∞7 9
(
∞∞: ;
value
∞∞; @
.
∞∞@ A
HasValue
∞∞A I
)
∞∞I J
return
∞∞K Q
Math
∞∞R V
.
∞∞V W
Sign
∞∞W [
(
∞∞[ \
value
∞∞\ a
.
∞∞a b
Value
∞∞b g
)
∞∞g h
;
∞∞h i
return
∞∞j p
null
∞∞q u
;
∞∞u v
}
∞∞w x
public
±± 
static
±± 
int
±± 
?
±± 
Sign
±± 
(
±±  
this
±±  $
double
±±% +
?
±±+ ,
value
±±- 2
)
±±2 3
{
±±4 5
if
±±6 8
(
±±9 :
value
±±: ?
.
±±? @
HasValue
±±@ H
)
±±H I
return
±±J P
Math
±±Q U
.
±±U V
Sign
±±V Z
(
±±Z [
value
±±[ `
.
±±` a
Value
±±a f
)
±±f g
;
±±g h
return
±±i o
null
±±p t
;
±±t u
}
±±v w
public
≤≤ 
static
≤≤ 
int
≤≤ 
?
≤≤ 
Sign
≤≤ 
(
≤≤  
this
≤≤  $
float
≤≤% *
?
≤≤* +
value
≤≤, 1
)
≤≤1 2
{
≤≤3 4
if
≤≤5 7
(
≤≤8 9
value
≤≤9 >
.
≤≤> ?
HasValue
≤≤? G
)
≤≤G H
return
≤≤I O
Math
≤≤P T
.
≤≤T U
Sign
≤≤U Y
(
≤≤Y Z
value
≤≤Z _
.
≤≤_ `
Value
≤≤` e
)
≤≤e f
;
≤≤f g
return
≤≤h n
null
≤≤o s
;
≤≤s t
}
≤≤u v
public
≥≥ 
static
≥≥ 
int
≥≥ 
?
≥≥ 
Sign
≥≥ 
(
≥≥  
this
≥≥  $
int
≥≥% (
?
≥≥( )
value
≥≥* /
)
≥≥/ 0
{
≥≥1 2
if
≥≥3 5
(
≥≥6 7
value
≥≥7 <
.
≥≥< =
HasValue
≥≥= E
)
≥≥E F
return
≥≥G M
Math
≥≥N R
.
≥≥R S
Sign
≥≥S W
(
≥≥W X
value
≥≥X ]
.
≥≥] ^
Value
≥≥^ c
)
≥≥c d
;
≥≥d e
return
≥≥f l
null
≥≥m q
;
≥≥q r
}
≥≥s t
public
¥¥ 
static
¥¥ 
int
¥¥ 
?
¥¥ 
Sign
¥¥ 
(
¥¥  
this
¥¥  $
long
¥¥% )
?
¥¥) *
value
¥¥+ 0
)
¥¥0 1
{
¥¥2 3
if
¥¥4 6
(
¥¥7 8
value
¥¥8 =
.
¥¥= >
HasValue
¥¥> F
)
¥¥F G
return
¥¥H N
Math
¥¥O S
.
¥¥S T
Sign
¥¥T X
(
¥¥X Y
value
¥¥Y ^
.
¥¥^ _
Value
¥¥_ d
)
¥¥d e
;
¥¥e f
return
¥¥g m
null
¥¥n r
;
¥¥r s
}
¥¥t u
public
µµ 
static
µµ 
int
µµ 
?
µµ 
Sign
µµ 
(
µµ  
this
µµ  $
sbyte
µµ% *
?
µµ* +
value
µµ, 1
)
µµ1 2
{
µµ3 4
if
µµ5 7
(
µµ8 9
value
µµ9 >
.
µµ> ?
HasValue
µµ? G
)
µµG H
return
µµI O
Math
µµP T
.
µµT U
Sign
µµU Y
(
µµY Z
value
µµZ _
.
µµ_ `
Value
µµ` e
)
µµe f
;
µµf g
return
µµh n
null
µµo s
;
µµs t
}
µµu v
public
∂∂ 
static
∂∂ 
int
∂∂ 
?
∂∂ 
Sign
∂∂ 
(
∂∂  
this
∂∂  $
short
∂∂% *
?
∂∂* +
value
∂∂, 1
)
∂∂1 2
{
∂∂3 4
if
∂∂5 7
(
∂∂8 9
value
∂∂9 >
.
∂∂> ?
HasValue
∂∂? G
)
∂∂G H
return
∂∂I O
Math
∂∂P T
.
∂∂T U
Sign
∂∂U Y
(
∂∂Y Z
value
∂∂Z _
.
∂∂_ `
Value
∂∂` e
)
∂∂e f
;
∂∂f g
return
∂∂h n
null
∂∂o s
;
∂∂s t
}
∂∂u v
public
ππ 
static
ππ 
double
ππ 
Tan
ππ  
(
ππ  !
this
ππ! %
double
ππ& ,
value
ππ- 2
)
ππ2 3
{
ππ4 5
return
ππ6 <
Math
ππ= A
.
ππA B
Tan
ππB E
(
ππE F
value
ππF K
)
ππK L
;
ππL M
}
ππN O
public
∫∫ 
static
∫∫ 
double
∫∫ 
Tan
∫∫  
(
∫∫  !
this
∫∫! %
float
∫∫& +
value
∫∫, 1
)
∫∫1 2
{
∫∫3 4
return
∫∫5 ;
Math
∫∫< @
.
∫∫@ A
Tan
∫∫A D
(
∫∫D E
value
∫∫E J
)
∫∫J K
;
∫∫K L
}
∫∫M N
public
ªª 
static
ªª 
double
ªª 
Tan
ªª  
(
ªª  !
this
ªª! %
int
ªª& )
value
ªª* /
)
ªª/ 0
{
ªª1 2
return
ªª3 9
Math
ªª: >
.
ªª> ?
Tan
ªª? B
(
ªªB C
value
ªªC H
)
ªªH I
;
ªªI J
}
ªªK L
public
ºº 
static
ºº 
double
ºº 
Tan
ºº  
(
ºº  !
this
ºº! %
long
ºº& *
value
ºº+ 0
)
ºº0 1
{
ºº2 3
return
ºº4 :
Math
ºº; ?
.
ºº? @
Tan
ºº@ C
(
ººC D
value
ººD I
)
ººI J
;
ººJ K
}
ººL M
public
ΩΩ 
static
ΩΩ 
double
ΩΩ 
Tan
ΩΩ  
(
ΩΩ  !
this
ΩΩ! %
sbyte
ΩΩ& +
value
ΩΩ, 1
)
ΩΩ1 2
{
ΩΩ3 4
return
ΩΩ5 ;
Math
ΩΩ< @
.
ΩΩ@ A
Tan
ΩΩA D
(
ΩΩD E
value
ΩΩE J
)
ΩΩJ K
;
ΩΩK L
}
ΩΩM N
public
ææ 
static
ææ 
double
ææ 
Tan
ææ  
(
ææ  !
this
ææ! %
short
ææ& +
value
ææ, 1
)
ææ1 2
{
ææ3 4
return
ææ5 ;
Math
ææ< @
.
ææ@ A
Tan
ææA D
(
ææD E
value
ææE J
)
ææJ K
;
ææK L
}
ææM N
public
øø 
static
øø 
double
øø 
?
øø 
Tan
øø !
(
øø! "
this
øø" &
double
øø' -
?
øø- .
value
øø/ 4
)
øø4 5
{
øø6 7
if
øø8 :
(
øø; <
value
øø< A
.
øøA B
HasValue
øøB J
)
øøJ K
return
øøL R
Math
øøS W
.
øøW X
Tan
øøX [
(
øø[ \
value
øø\ a
.
øøa b
Value
øøb g
)
øøg h
;
øøh i
return
øøj p
null
øøq u
;
øøu v
}
øøw x
public
¿¿ 
static
¿¿ 
double
¿¿ 
?
¿¿ 
Tan
¿¿ !
(
¿¿! "
this
¿¿" &
float
¿¿' ,
?
¿¿, -
value
¿¿. 3
)
¿¿3 4
{
¿¿5 6
if
¿¿7 9
(
¿¿: ;
value
¿¿; @
.
¿¿@ A
HasValue
¿¿A I
)
¿¿I J
return
¿¿K Q
Math
¿¿R V
.
¿¿V W
Tan
¿¿W Z
(
¿¿Z [
value
¿¿[ `
.
¿¿` a
Value
¿¿a f
)
¿¿f g
;
¿¿g h
return
¿¿i o
null
¿¿p t
;
¿¿t u
}
¿¿v w
public
¡¡ 
static
¡¡ 
double
¡¡ 
?
¡¡ 
Tan
¡¡ !
(
¡¡! "
this
¡¡" &
int
¡¡' *
?
¡¡* +
value
¡¡, 1
)
¡¡1 2
{
¡¡3 4
if
¡¡5 7
(
¡¡8 9
value
¡¡9 >
.
¡¡> ?
HasValue
¡¡? G
)
¡¡G H
return
¡¡I O
Math
¡¡P T
.
¡¡T U
Tan
¡¡U X
(
¡¡X Y
value
¡¡Y ^
.
¡¡^ _
Value
¡¡_ d
)
¡¡d e
;
¡¡e f
return
¡¡g m
null
¡¡n r
;
¡¡r s
}
¡¡t u
public
¬¬ 
static
¬¬ 
double
¬¬ 
?
¬¬ 
Tan
¬¬ !
(
¬¬! "
this
¬¬" &
long
¬¬' +
?
¬¬+ ,
value
¬¬- 2
)
¬¬2 3
{
¬¬4 5
if
¬¬6 8
(
¬¬9 :
value
¬¬: ?
.
¬¬? @
HasValue
¬¬@ H
)
¬¬H I
return
¬¬J P
Math
¬¬Q U
.
¬¬U V
Tan
¬¬V Y
(
¬¬Y Z
value
¬¬Z _
.
¬¬_ `
Value
¬¬` e
)
¬¬e f
;
¬¬f g
return
¬¬h n
null
¬¬o s
;
¬¬s t
}
¬¬u v
public
√√ 
static
√√ 
double
√√ 
?
√√ 
Tan
√√ !
(
√√! "
this
√√" &
sbyte
√√' ,
?
√√, -
value
√√. 3
)
√√3 4
{
√√5 6
if
√√7 9
(
√√: ;
value
√√; @
.
√√@ A
HasValue
√√A I
)
√√I J
return
√√K Q
Math
√√R V
.
√√V W
Tan
√√W Z
(
√√Z [
value
√√[ `
.
√√` a
Value
√√a f
)
√√f g
;
√√g h
return
√√i o
null
√√p t
;
√√t u
}
√√v w
public
ƒƒ 
static
ƒƒ 
double
ƒƒ 
?
ƒƒ 
Tan
ƒƒ !
(
ƒƒ! "
this
ƒƒ" &
short
ƒƒ' ,
?
ƒƒ, -
value
ƒƒ. 3
)
ƒƒ3 4
{
ƒƒ5 6
if
ƒƒ7 9
(
ƒƒ: ;
value
ƒƒ; @
.
ƒƒ@ A
HasValue
ƒƒA I
)
ƒƒI J
return
ƒƒK Q
Math
ƒƒR V
.
ƒƒV W
Tan
ƒƒW Z
(
ƒƒZ [
value
ƒƒ[ `
.
ƒƒ` a
Value
ƒƒa f
)
ƒƒf g
;
ƒƒg h
return
ƒƒi o
null
ƒƒp t
;
ƒƒt u
}
ƒƒv w
public
«« 
static
«« 
double
«« 
Radians
«« $
(
««$ %
this
««% )
double
««* 0
value
««1 6
)
««6 7
{
««8 9
return
««: @
(
««A B
$num
««B O
*
««P Q
value
««R W
)
««W X
;
««X Y
}
««Z [
public
»» 
static
»» 
double
»» 
Radians
»» $
(
»»$ %
this
»»% )
float
»»* /
value
»»0 5
)
»»5 6
{
»»7 8
return
»»9 ?
(
»»@ A
$num
»»A N
*
»»O P
value
»»Q V
)
»»V W
;
»»W X
}
»»Y Z
public
…… 
static
…… 
double
…… 
Radians
…… $
(
……$ %
this
……% )
int
……* -
value
……. 3
)
……3 4
{
……5 6
return
……7 =
(
……> ?
$num
……? L
*
……M N
value
……O T
)
……T U
;
……U V
}
……W X
public
   
static
   
double
   
Radians
   $
(
  $ %
this
  % )
long
  * .
value
  / 4
)
  4 5
{
  6 7
return
  8 >
(
  ? @
$num
  @ M
*
  N O
value
  P U
)
  U V
;
  V W
}
  X Y
public
ÀÀ 
static
ÀÀ 
double
ÀÀ 
Radians
ÀÀ $
(
ÀÀ$ %
this
ÀÀ% )
sbyte
ÀÀ* /
value
ÀÀ0 5
)
ÀÀ5 6
{
ÀÀ7 8
return
ÀÀ9 ?
(
ÀÀ@ A
$num
ÀÀA N
*
ÀÀO P
value
ÀÀQ V
)
ÀÀV W
;
ÀÀW X
}
ÀÀY Z
public
ÃÃ 
static
ÃÃ 
double
ÃÃ 
Radians
ÃÃ $
(
ÃÃ$ %
this
ÃÃ% )
short
ÃÃ* /
value
ÃÃ0 5
)
ÃÃ5 6
{
ÃÃ7 8
return
ÃÃ9 ?
(
ÃÃ@ A
$num
ÃÃA N
*
ÃÃO P
value
ÃÃQ V
)
ÃÃV W
;
ÃÃW X
}
ÃÃY Z
public
ÕÕ 
static
ÕÕ 
double
ÕÕ 
?
ÕÕ 
Radians
ÕÕ %
(
ÕÕ% &
this
ÕÕ& *
double
ÕÕ+ 1
?
ÕÕ1 2
value
ÕÕ3 8
)
ÕÕ8 9
{
ÕÕ: ;
if
ÕÕ< >
(
ÕÕ? @
value
ÕÕ@ E
.
ÕÕE F
HasValue
ÕÕF N
)
ÕÕN O
return
ÕÕP V
(
ÕÕW X
$num
ÕÕX e
*
ÕÕf g
value
ÕÕh m
.
ÕÕm n
Value
ÕÕn s
)
ÕÕs t
;
ÕÕt u
return
ÕÕv |
nullÕÕ} Å
;ÕÕÅ Ç
}ÕÕÉ Ñ
public
ŒŒ 
static
ŒŒ 
double
ŒŒ 
?
ŒŒ 
Radians
ŒŒ %
(
ŒŒ% &
this
ŒŒ& *
float
ŒŒ+ 0
?
ŒŒ0 1
value
ŒŒ2 7
)
ŒŒ7 8
{
ŒŒ9 :
if
ŒŒ; =
(
ŒŒ> ?
value
ŒŒ? D
.
ŒŒD E
HasValue
ŒŒE M
)
ŒŒM N
return
ŒŒO U
(
ŒŒV W
$num
ŒŒW d
*
ŒŒe f
value
ŒŒg l
.
ŒŒl m
Value
ŒŒm r
)
ŒŒr s
;
ŒŒs t
return
ŒŒu {
nullŒŒ| Ä
;ŒŒÄ Å
}ŒŒÇ É
public
œœ 
static
œœ 
double
œœ 
?
œœ 
Radians
œœ %
(
œœ% &
this
œœ& *
int
œœ+ .
?
œœ. /
value
œœ0 5
)
œœ5 6
{
œœ7 8
if
œœ9 ;
(
œœ< =
value
œœ= B
.
œœB C
HasValue
œœC K
)
œœK L
return
œœM S
(
œœT U
$num
œœU b
*
œœc d
value
œœe j
.
œœj k
Value
œœk p
)
œœp q
;
œœq r
return
œœs y
null
œœz ~
;
œœ~ 
}œœÄ Å
public
–– 
static
–– 
double
–– 
?
–– 
Radians
–– %
(
––% &
this
––& *
long
––+ /
?
––/ 0
value
––1 6
)
––6 7
{
––8 9
if
––: <
(
––= >
value
––> C
.
––C D
HasValue
––D L
)
––L M
return
––N T
(
––U V
$num
––V c
*
––d e
value
––f k
.
––k l
Value
––l q
)
––q r
;
––r s
return
––t z
null
––{ 
;–– Ä
}––Å Ç
public
—— 
static
—— 
double
—— 
?
—— 
Radians
—— %
(
——% &
this
——& *
sbyte
——+ 0
?
——0 1
value
——2 7
)
——7 8
{
——9 :
if
——; =
(
——> ?
value
——? D
.
——D E
HasValue
——E M
)
——M N
return
——O U
(
——V W
$num
——W d
*
——e f
value
——g l
.
——l m
Value
——m r
)
——r s
;
——s t
return
——u {
null——| Ä
;——Ä Å
}——Ç É
public
““ 
static
““ 
double
““ 
?
““ 
Radians
““ %
(
““% &
this
““& *
short
““+ 0
?
““0 1
value
““2 7
)
““7 8
{
““9 :
if
““; =
(
““> ?
value
““? D
.
““D E
HasValue
““E M
)
““M N
return
““O U
(
““V W
$num
““W d
*
““e f
value
““g l
.
““l m
Value
““m r
)
““r s
;
““s t
return
““u {
null““| Ä
;““Ä Å
}““Ç É
public
’’ 
static
’’ 
double
’’ 
Degrees
’’ $
(
’’$ %
this
’’% )
double
’’* 0
value
’’1 6
)
’’6 7
{
’’8 9
return
’’: @
(
’’A B
$num
’’B K
*
’’L M
value
’’N S
)
’’S T
;
’’T U
}
’’V W
public
÷÷ 
static
÷÷ 
double
÷÷ 
Degrees
÷÷ $
(
÷÷$ %
this
÷÷% )
float
÷÷* /
value
÷÷0 5
)
÷÷5 6
{
÷÷7 8
return
÷÷9 ?
(
÷÷@ A
$num
÷÷A J
*
÷÷K L
value
÷÷M R
)
÷÷R S
;
÷÷S T
}
÷÷U V
public
◊◊ 
static
◊◊ 
double
◊◊ 
Degrees
◊◊ $
(
◊◊$ %
this
◊◊% )
int
◊◊* -
value
◊◊. 3
)
◊◊3 4
{
◊◊5 6
return
◊◊7 =
(
◊◊> ?
$num
◊◊? H
*
◊◊I J
value
◊◊K P
)
◊◊P Q
;
◊◊Q R
}
◊◊S T
public
ÿÿ 
static
ÿÿ 
double
ÿÿ 
Degrees
ÿÿ $
(
ÿÿ$ %
this
ÿÿ% )
long
ÿÿ* .
value
ÿÿ/ 4
)
ÿÿ4 5
{
ÿÿ6 7
return
ÿÿ8 >
(
ÿÿ? @
$num
ÿÿ@ I
*
ÿÿJ K
value
ÿÿL Q
)
ÿÿQ R
;
ÿÿR S
}
ÿÿT U
public
ŸŸ 
static
ŸŸ 
double
ŸŸ 
Degrees
ŸŸ $
(
ŸŸ$ %
this
ŸŸ% )
sbyte
ŸŸ* /
value
ŸŸ0 5
)
ŸŸ5 6
{
ŸŸ7 8
return
ŸŸ9 ?
(
ŸŸ@ A
$num
ŸŸA J
*
ŸŸK L
value
ŸŸM R
)
ŸŸR S
;
ŸŸS T
}
ŸŸU V
public
⁄⁄ 
static
⁄⁄ 
double
⁄⁄ 
Degrees
⁄⁄ $
(
⁄⁄$ %
this
⁄⁄% )
short
⁄⁄* /
value
⁄⁄0 5
)
⁄⁄5 6
{
⁄⁄7 8
return
⁄⁄9 ?
(
⁄⁄@ A
$num
⁄⁄A J
*
⁄⁄K L
value
⁄⁄M R
)
⁄⁄R S
;
⁄⁄S T
}
⁄⁄U V
public
€€ 
static
€€ 
double
€€ 
?
€€ 
Degrees
€€ %
(
€€% &
this
€€& *
double
€€+ 1
?
€€1 2
value
€€3 8
)
€€8 9
{
€€: ;
if
€€< >
(
€€? @
value
€€@ E
.
€€E F
HasValue
€€F N
)
€€N O
return
€€P V
(
€€W X
$num
€€X a
*
€€b c
value
€€d i
.
€€i j
Value
€€j o
)
€€o p
;
€€p q
return
€€r x
null
€€y }
;
€€} ~
}€€ Ä
public
‹‹ 
static
‹‹ 
double
‹‹ 
?
‹‹ 
Degrees
‹‹ %
(
‹‹% &
this
‹‹& *
float
‹‹+ 0
?
‹‹0 1
value
‹‹2 7
)
‹‹7 8
{
‹‹9 :
if
‹‹; =
(
‹‹> ?
value
‹‹? D
.
‹‹D E
HasValue
‹‹E M
)
‹‹M N
return
‹‹O U
(
‹‹V W
$num
‹‹W `
*
‹‹a b
value
‹‹c h
.
‹‹h i
Value
‹‹i n
)
‹‹n o
;
‹‹o p
return
‹‹q w
null
‹‹x |
;
‹‹| }
}
‹‹~ 
public
›› 
static
›› 
double
›› 
?
›› 
Degrees
›› %
(
››% &
this
››& *
int
››+ .
?
››. /
value
››0 5
)
››5 6
{
››7 8
if
››9 ;
(
››< =
value
››= B
.
››B C
HasValue
››C K
)
››K L
return
››M S
(
››T U
$num
››U ^
*
››_ `
value
››a f
.
››f g
Value
››g l
)
››l m
;
››m n
return
››o u
null
››v z
;
››z {
}
››| }
public
ﬁﬁ 
static
ﬁﬁ 
double
ﬁﬁ 
?
ﬁﬁ 
Degrees
ﬁﬁ %
(
ﬁﬁ% &
this
ﬁﬁ& *
long
ﬁﬁ+ /
?
ﬁﬁ/ 0
value
ﬁﬁ1 6
)
ﬁﬁ6 7
{
ﬁﬁ8 9
if
ﬁﬁ: <
(
ﬁﬁ= >
value
ﬁﬁ> C
.
ﬁﬁC D
HasValue
ﬁﬁD L
)
ﬁﬁL M
return
ﬁﬁN T
(
ﬁﬁU V
$num
ﬁﬁV _
*
ﬁﬁ` a
value
ﬁﬁb g
.
ﬁﬁg h
Value
ﬁﬁh m
)
ﬁﬁm n
;
ﬁﬁn o
return
ﬁﬁp v
null
ﬁﬁw {
;
ﬁﬁ{ |
}
ﬁﬁ} ~
public
ﬂﬂ 
static
ﬂﬂ 
double
ﬂﬂ 
?
ﬂﬂ 
Degrees
ﬂﬂ %
(
ﬂﬂ% &
this
ﬂﬂ& *
sbyte
ﬂﬂ+ 0
?
ﬂﬂ0 1
value
ﬂﬂ2 7
)
ﬂﬂ7 8
{
ﬂﬂ9 :
if
ﬂﬂ; =
(
ﬂﬂ> ?
value
ﬂﬂ? D
.
ﬂﬂD E
HasValue
ﬂﬂE M
)
ﬂﬂM N
return
ﬂﬂO U
(
ﬂﬂV W
$num
ﬂﬂW `
*
ﬂﬂa b
value
ﬂﬂc h
.
ﬂﬂh i
Value
ﬂﬂi n
)
ﬂﬂn o
;
ﬂﬂo p
return
ﬂﬂq w
null
ﬂﬂx |
;
ﬂﬂ| }
}
ﬂﬂ~ 
public
‡‡ 
static
‡‡ 
double
‡‡ 
?
‡‡ 
Degrees
‡‡ %
(
‡‡% &
this
‡‡& *
short
‡‡+ 0
?
‡‡0 1
value
‡‡2 7
)
‡‡7 8
{
‡‡9 :
if
‡‡; =
(
‡‡> ?
value
‡‡? D
.
‡‡D E
HasValue
‡‡E M
)
‡‡M N
return
‡‡O U
(
‡‡V W
$num
‡‡W `
*
‡‡a b
value
‡‡c h
.
‡‡h i
Value
‡‡i n
)
‡‡n o
;
‡‡o p
return
‡‡q w
null
‡‡x |
;
‡‡| }
}
‡‡~ 
public
‚‚ 
static
‚‚ 
	IGeometry
‚‚ 
STGeomFromText
‚‚  .
(
‚‚. /
this
‚‚/ 3
string
‚‚4 :
text
‚‚; ?
,
‚‚? @
int
‚‚A D
srid
‚‚E I
)
‚‚I J
{
„„ 	
var
‰‰ 
	wktReader
‰‰ 
=
‰‰ 
new
‰‰ 
NetTopologySuite
‰‰  0
.
‰‰0 1
IO
‰‰1 3
.
‰‰3 4
	WKTReader
‰‰4 =
(
‰‰= >
)
‰‰> ?
;
‰‰? @
var
ÂÂ 
val
ÂÂ 
=
ÂÂ 
	wktReader
ÂÂ 
.
ÂÂ  
Read
ÂÂ  $
(
ÂÂ$ %
text
ÂÂ% )
)
ÂÂ) *
;
ÂÂ* +
val
ÊÊ 
.
ÊÊ 
SRID
ÊÊ 
=
ÊÊ 
srid
ÊÊ 
;
ÊÊ 
return
ÁÁ 
val
ÁÁ 
;
ÁÁ 
}
ËË 	
public
ÈÈ 
static
ÈÈ 
	IGeometry
ÈÈ 
STPointFromText
ÈÈ  /
(
ÈÈ/ 0
this
ÈÈ0 4
string
ÈÈ5 ;
text
ÈÈ< @
,
ÈÈ@ A
int
ÈÈB E
srid
ÈÈF J
)
ÈÈJ K
{
ÍÍ 	
var
ÎÎ 
	wktReader
ÎÎ 
=
ÎÎ 
new
ÎÎ 
NetTopologySuite
ÎÎ  0
.
ÎÎ0 1
IO
ÎÎ1 3
.
ÎÎ3 4
	WKTReader
ÎÎ4 =
(
ÎÎ= >
)
ÎÎ> ?
;
ÎÎ? @
var
ÏÏ 
val
ÏÏ 
=
ÏÏ 
	wktReader
ÏÏ 
.
ÏÏ  
Read
ÏÏ  $
(
ÏÏ$ %
text
ÏÏ% )
)
ÏÏ) *
;
ÏÏ* +
val
ÌÌ 
.
ÌÌ 
SRID
ÌÌ 
=
ÌÌ 
srid
ÌÌ 
;
ÌÌ 
return
ÓÓ 
val
ÓÓ 
;
ÓÓ 
}
ÔÔ 	
public
 
static
 
	IGeometry
 
STLineFromText
  .
(
. /
this
/ 3
string
4 :
text
; ?
,
? @
int
A D
srid
E I
)
I J
{
ÒÒ 	
var
ÚÚ 
	wktReader
ÚÚ 
=
ÚÚ 
new
ÚÚ 
NetTopologySuite
ÚÚ  0
.
ÚÚ0 1
IO
ÚÚ1 3
.
ÚÚ3 4
	WKTReader
ÚÚ4 =
(
ÚÚ= >
)
ÚÚ> ?
;
ÚÚ? @
var
ÛÛ 
val
ÛÛ 
=
ÛÛ 
	wktReader
ÛÛ 
.
ÛÛ  
Read
ÛÛ  $
(
ÛÛ$ %
text
ÛÛ% )
)
ÛÛ) *
;
ÛÛ* +
val
ÙÙ 
.
ÙÙ 
SRID
ÙÙ 
=
ÙÙ 
srid
ÙÙ 
;
ÙÙ 
return
ıı 
val
ıı 
;
ıı 
}
ˆˆ 	
public
˜˜ 
static
˜˜ 
	IGeometry
˜˜ 
STPolyFromText
˜˜  .
(
˜˜. /
this
˜˜/ 3
string
˜˜4 :
text
˜˜; ?
,
˜˜? @
int
˜˜A D
srid
˜˜E I
)
˜˜I J
{
¯¯ 	
var
˘˘ 
	wktReader
˘˘ 
=
˘˘ 
new
˘˘ 
NetTopologySuite
˘˘  0
.
˘˘0 1
IO
˘˘1 3
.
˘˘3 4
	WKTReader
˘˘4 =
(
˘˘= >
)
˘˘> ?
;
˘˘? @
var
˙˙ 
val
˙˙ 
=
˙˙ 
	wktReader
˙˙ 
.
˙˙  
Read
˙˙  $
(
˙˙$ %
text
˙˙% )
)
˙˙) *
;
˙˙* +
val
˚˚ 
.
˚˚ 
SRID
˚˚ 
=
˚˚ 
srid
˚˚ 
;
˚˚ 
return
¸¸ 
val
¸¸ 
;
¸¸ 
}
˝˝ 	
public
˛˛ 
static
˛˛ 
	IGeometry
˛˛ 
STMPointFromText
˛˛  0
(
˛˛0 1
this
˛˛1 5
string
˛˛6 <
text
˛˛= A
,
˛˛A B
int
˛˛C F
srid
˛˛G K
)
˛˛K L
{
ˇˇ 	
var
ÄÄ 
	wktReader
ÄÄ 
=
ÄÄ 
new
ÄÄ 
NetTopologySuite
ÄÄ  0
.
ÄÄ0 1
IO
ÄÄ1 3
.
ÄÄ3 4
	WKTReader
ÄÄ4 =
(
ÄÄ= >
)
ÄÄ> ?
;
ÄÄ? @
var
ÅÅ 
val
ÅÅ 
=
ÅÅ 
	wktReader
ÅÅ 
.
ÅÅ  
Read
ÅÅ  $
(
ÅÅ$ %
text
ÅÅ% )
)
ÅÅ) *
;
ÅÅ* +
val
ÇÇ 
.
ÇÇ 
SRID
ÇÇ 
=
ÇÇ 
srid
ÇÇ 
;
ÇÇ 
return
ÉÉ 
val
ÉÉ 
;
ÉÉ 
}
ÑÑ 	
public
ÖÖ 
static
ÖÖ 
	IGeometry
ÖÖ 
STMLineFromText
ÖÖ  /
(
ÖÖ/ 0
this
ÖÖ0 4
string
ÖÖ5 ;
text
ÖÖ< @
,
ÖÖ@ A
int
ÖÖB E
srid
ÖÖF J
)
ÖÖJ K
{
ÜÜ 	
var
áá 
	wktReader
áá 
=
áá 
new
áá 
NetTopologySuite
áá  0
.
áá0 1
IO
áá1 3
.
áá3 4
	WKTReader
áá4 =
(
áá= >
)
áá> ?
;
áá? @
var
àà 
val
àà 
=
àà 
	wktReader
àà 
.
àà  
Read
àà  $
(
àà$ %
text
àà% )
)
àà) *
;
àà* +
val
ââ 
.
ââ 
SRID
ââ 
=
ââ 
srid
ââ 
;
ââ 
return
ää 
val
ää 
;
ää 
}
ãã 	
public
åå 
static
åå 
	IGeometry
åå 
STMPolyFromText
åå  /
(
åå/ 0
this
åå0 4
string
åå5 ;
text
åå< @
,
åå@ A
int
ååB E
srid
ååF J
)
ååJ K
{
çç 	
var
éé 
	wktReader
éé 
=
éé 
new
éé 
NetTopologySuite
éé  0
.
éé0 1
IO
éé1 3
.
éé3 4
	WKTReader
éé4 =
(
éé= >
)
éé> ?
;
éé? @
var
èè 
val
èè 
=
èè 
	wktReader
èè 
.
èè  
Read
èè  $
(
èè$ %
text
èè% )
)
èè) *
;
èè* +
val
êê 
.
êê 
SRID
êê 
=
êê 
srid
êê 
;
êê 
return
ëë 
val
ëë 
;
ëë 
}
íí 	
public
ìì 
static
ìì 
	IGeometry
ìì  
STGeomCollFromText
ìì  2
(
ìì2 3
this
ìì3 7
string
ìì8 >
text
ìì? C
,
ììC D
int
ììE H
srid
ììI M
)
ììM N
{
îî 	
var
ïï 
	wktReader
ïï 
=
ïï 
new
ïï 
NetTopologySuite
ïï  0
.
ïï0 1
IO
ïï1 3
.
ïï3 4
	WKTReader
ïï4 =
(
ïï= >
)
ïï> ?
;
ïï? @
var
ññ 
val
ññ 
=
ññ 
	wktReader
ññ 
.
ññ  
Read
ññ  $
(
ññ$ %
text
ññ% )
)
ññ) *
;
ññ* +
val
óó 
.
óó 
SRID
óó 
=
óó 
srid
óó 
;
óó 
return
òò 
val
òò 
;
òò 
}
ôô 	
public
öö 
static
öö 
	IGeometry
öö 
STGeomFromWKB
öö  -
(
öö- .
this
öö. 2
byte
öö3 7
[
öö7 8
]
öö8 9
text
öö: >
,
öö> ?
int
öö@ C
srid
ööD H
)
ööH I
{
õõ 	
var
úú 
	wkbReader
úú 
=
úú 
new
úú 
NetTopologySuite
úú  0
.
úú0 1
IO
úú1 3
.
úú3 4
	WKBReader
úú4 =
(
úú= >
)
úú> ?
;
úú? @
var
ùù 
val
ùù 
=
ùù 
	wkbReader
ùù 
.
ùù  
Read
ùù  $
(
ùù$ %
text
ùù% )
)
ùù) *
;
ùù* +
val
ûû 
.
ûû 
SRID
ûû 
=
ûû 
srid
ûû 
;
ûû 
return
üü 
val
üü 
;
üü 
}
†† 	
public
°° 
static
°° 
	IGeometry
°° 
STPointFromWKB
°°  .
(
°°. /
this
°°/ 3
byte
°°4 8
[
°°8 9
]
°°9 :
text
°°; ?
,
°°? @
int
°°A D
srid
°°E I
)
°°I J
{
¢¢ 	
var
££ 
	wkbReader
££ 
=
££ 
new
££ 
NetTopologySuite
££  0
.
££0 1
IO
££1 3
.
££3 4
	WKBReader
££4 =
(
££= >
)
££> ?
;
££? @
var
§§ 
val
§§ 
=
§§ 
	wkbReader
§§ 
.
§§  
Read
§§  $
(
§§$ %
text
§§% )
)
§§) *
;
§§* +
val
•• 
.
•• 
SRID
•• 
=
•• 
srid
•• 
;
•• 
return
¶¶ 
val
¶¶ 
;
¶¶ 
}
ßß 	
public
®® 
static
®® 
	IGeometry
®® 
STLineFromWKB
®®  -
(
®®- .
this
®®. 2
byte
®®3 7
[
®®7 8
]
®®8 9
text
®®: >
,
®®> ?
int
®®@ C
srid
®®D H
)
®®H I
{
©© 	
var
™™ 
	wkbReader
™™ 
=
™™ 
new
™™ 
NetTopologySuite
™™  0
.
™™0 1
IO
™™1 3
.
™™3 4
	WKBReader
™™4 =
(
™™= >
)
™™> ?
;
™™? @
var
´´ 
val
´´ 
=
´´ 
	wkbReader
´´ 
.
´´  
Read
´´  $
(
´´$ %
text
´´% )
)
´´) *
;
´´* +
val
¨¨ 
.
¨¨ 
SRID
¨¨ 
=
¨¨ 
srid
¨¨ 
;
¨¨ 
return
≠≠ 
val
≠≠ 
;
≠≠ 
}
ÆÆ 	
public
ØØ 
static
ØØ 
	IGeometry
ØØ 
STPolyFromWKB
ØØ  -
(
ØØ- .
this
ØØ. 2
byte
ØØ3 7
[
ØØ7 8
]
ØØ8 9
text
ØØ: >
,
ØØ> ?
int
ØØ@ C
srid
ØØD H
)
ØØH I
{
∞∞ 	
var
±± 
	wkbReader
±± 
=
±± 
new
±± 
NetTopologySuite
±±  0
.
±±0 1
IO
±±1 3
.
±±3 4
	WKBReader
±±4 =
(
±±= >
)
±±> ?
;
±±? @
var
≤≤ 
val
≤≤ 
=
≤≤ 
	wkbReader
≤≤ 
.
≤≤  
Read
≤≤  $
(
≤≤$ %
text
≤≤% )
)
≤≤) *
;
≤≤* +
val
≥≥ 
.
≥≥ 
SRID
≥≥ 
=
≥≥ 
srid
≥≥ 
;
≥≥ 
return
¥¥ 
val
¥¥ 
;
¥¥ 
}
µµ 	
public
∂∂ 
static
∂∂ 
	IGeometry
∂∂ 
STMPointFromWKB
∂∂  /
(
∂∂/ 0
this
∂∂0 4
byte
∂∂5 9
[
∂∂9 :
]
∂∂: ;
text
∂∂< @
,
∂∂@ A
int
∂∂B E
srid
∂∂F J
)
∂∂J K
{
∑∑ 	
var
∏∏ 
	wkbReader
∏∏ 
=
∏∏ 
new
∏∏ 
NetTopologySuite
∏∏  0
.
∏∏0 1
IO
∏∏1 3
.
∏∏3 4
	WKBReader
∏∏4 =
(
∏∏= >
)
∏∏> ?
;
∏∏? @
var
ππ 
val
ππ 
=
ππ 
	wkbReader
ππ 
.
ππ  
Read
ππ  $
(
ππ$ %
text
ππ% )
)
ππ) *
;
ππ* +
val
∫∫ 
.
∫∫ 
SRID
∫∫ 
=
∫∫ 
srid
∫∫ 
;
∫∫ 
return
ªª 
val
ªª 
;
ªª 
}
ºº 	
public
ΩΩ 
static
ΩΩ 
	IGeometry
ΩΩ 
STMLineFromWKB
ΩΩ  .
(
ΩΩ. /
this
ΩΩ/ 3
byte
ΩΩ4 8
[
ΩΩ8 9
]
ΩΩ9 :
text
ΩΩ; ?
,
ΩΩ? @
int
ΩΩA D
srid
ΩΩE I
)
ΩΩI J
{
ææ 	
var
øø 
	wkbReader
øø 
=
øø 
new
øø 
NetTopologySuite
øø  0
.
øø0 1
IO
øø1 3
.
øø3 4
	WKBReader
øø4 =
(
øø= >
)
øø> ?
;
øø? @
var
¿¿ 
val
¿¿ 
=
¿¿ 
	wkbReader
¿¿ 
.
¿¿  
Read
¿¿  $
(
¿¿$ %
text
¿¿% )
)
¿¿) *
;
¿¿* +
val
¡¡ 
.
¡¡ 
SRID
¡¡ 
=
¡¡ 
srid
¡¡ 
;
¡¡ 
return
¬¬ 
val
¬¬ 
;
¬¬ 
}
√√ 	
public
ƒƒ 
static
ƒƒ 
	IGeometry
ƒƒ 
STMPolyFromWKB
ƒƒ  .
(
ƒƒ. /
this
ƒƒ/ 3
byte
ƒƒ4 8
[
ƒƒ8 9
]
ƒƒ9 :
text
ƒƒ; ?
,
ƒƒ? @
int
ƒƒA D
srid
ƒƒE I
)
ƒƒI J
{
≈≈ 	
var
∆∆ 
	wkbReader
∆∆ 
=
∆∆ 
new
∆∆ 
NetTopologySuite
∆∆  0
.
∆∆0 1
IO
∆∆1 3
.
∆∆3 4
	WKBReader
∆∆4 =
(
∆∆= >
)
∆∆> ?
;
∆∆? @
var
«« 
val
«« 
=
«« 
	wkbReader
«« 
.
««  
Read
««  $
(
««$ %
text
««% )
)
««) *
;
««* +
val
»» 
.
»» 
SRID
»» 
=
»» 
srid
»» 
;
»» 
return
…… 
val
…… 
;
…… 
}
   	
public
ÀÀ 
static
ÀÀ 
	IGeometry
ÀÀ 
STGeomCollFromWKB
ÀÀ  1
(
ÀÀ1 2
this
ÀÀ2 6
byte
ÀÀ7 ;
[
ÀÀ; <
]
ÀÀ< =
text
ÀÀ> B
,
ÀÀB C
int
ÀÀD G
srid
ÀÀH L
)
ÀÀL M
{
ÃÃ 	
var
ÕÕ 
	wkbReader
ÕÕ 
=
ÕÕ 
new
ÕÕ 
NetTopologySuite
ÕÕ  0
.
ÕÕ0 1
IO
ÕÕ1 3
.
ÕÕ3 4
	WKBReader
ÕÕ4 =
(
ÕÕ= >
)
ÕÕ> ?
;
ÕÕ? @
var
ŒŒ 
val
ŒŒ 
=
ŒŒ 
	wkbReader
ŒŒ 
.
ŒŒ  
Read
ŒŒ  $
(
ŒŒ$ %
text
ŒŒ% )
)
ŒŒ) *
;
ŒŒ* +
val
œœ 
.
œœ 
SRID
œœ 
=
œœ 
srid
œœ 
;
œœ 
return
–– 
val
–– 
;
–– 
}
—— 	
public
““ 
static
““ 
	IGeometry
““ 
GeomFromGML
““  +
(
““+ ,
this
““, 0
string
““1 7
text
““8 <
,
““< =
int
““> A
srid
““B F
)
““F G
{
”” 	
var
‘‘ 
	wktReader
‘‘ 
=
‘‘ 
new
‘‘ 
NetTopologySuite
‘‘  0
.
‘‘0 1
IO
‘‘1 3
.
‘‘3 4
GML2
‘‘4 8
.
‘‘8 9
	GMLReader
‘‘9 B
(
‘‘B C
)
‘‘C D
;
‘‘D E
var
’’ 
val
’’ 
=
’’ 
	wktReader
’’ 
.
’’  
Read
’’  $
(
’’$ %
text
’’% )
)
’’) *
;
’’* +
val
÷÷ 
.
÷÷ 
SRID
÷÷ 
=
÷÷ 
srid
÷÷ 
;
÷÷ 
return
◊◊ 
val
◊◊ 
;
◊◊ 
}
ÿÿ 	
}
ŸŸ 
}⁄⁄ √Ì
ÅD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\QueryProcessor.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Database %
{ 
public 

	interface 
IExecutable  
{ 
IEnumerable 
< 

Dictionary 
< 
string %
,% &
object' -
>- .
>. /
Execute0 7
(7 8
)8 9
;9 :
IEnumerable 
< 
T 
> 
Execute 
< 
T  
>  !
(! "
)" #
;# $
FeatureCollection 
ExecuteFeature (
(( )
)) *
;* +
T 	
ExecuteScaler
 
< 
T 
> 
( 
) 
; 
string 
GetQueryForTest 
( 
)  
;  !
} 
public 

	interface 
ISelect 
: 
IExecutable *
,* +
IQuery, 2
{ 
ISelect 
Select 
( 
params 

INamedItem (
[( )
]) *
columns+ 2
)2 3
;3 4
IWhere 
Where 
( 
BEXP 
logical_expression ,
), -
;- .
IWhere 
Where 
( 
string 
text  
,  !
params" (
object) /
[/ 0
]0 1

parameters2 <
)< =
;= >
IGroupBy 
GroupBy 
( 
params 

IQueryItem  *
[* +
]+ ,
group_columns- :
): ;
;; <
IOrderBy   
OrderBy   
(   
params   
IQueryOrderItem    /
[  / 0
]  0 1
columns  2 9
)  9 :
;  : ;
ISkip!! 
Skip!! 
(!! 
int!! 
?!! 
start!! 
)!! 
;!! 
ITake"" 
Take"" 
("" 
int"" 
?"" 
count"" 
)"" 
;"" 
}## 
public$$ 

	interface$$ 
IWhere$$ 
:$$ 
IExecutable$$ )
{%% 
ISelect&& 
Select&& 
(&& 
params&& 

INamedItem&& (
[&&( )
]&&) *
columns&&+ 2
)&&2 3
;&&3 4
int'' 
Count'' 
('' 
)'' 
;'' 
IWhere(( 
Where(( 
((( 
BEXP(( 
logical_expression(( ,
)((, -
;((- .
IWhere)) 
Where)) 
()) 
string)) 
text))  
,))  !
params))" (
object))) /
[))/ 0
]))0 1

parameters))2 <
)))< =
;))= >
IGroupBy** 
GroupBy** 
(** 
params** 

IQueryItem**  *
[*** +
]**+ ,
group_columns**- :
)**: ;
;**; <
IOrderBy++ 
OrderBy++ 
(++ 
params++ 
IQueryOrderItem++  /
[++/ 0
]++0 1
columns++2 9
)++9 :
;++: ;
ITake,, 
Take,, 
(,, 
int,, 
?,, 
count,, 
),, 
;,, 
}-- 
public.. 

	interface.. 
IGroupBy.. 
:.. 
IExecutable..  +
{// 
ISelect00 
Select00 
(00 
params00 

INamedItem00 (
[00( )
]00) *
columns00+ 2
)002 3
;003 4
IWhere11 
Where11 
(11 
BEXP11 
logical_expression11 ,
)11, -
;11- .
IWhere22 
Where22 
(22 
string22 
text22  
,22  !
params22" (
object22) /
[22/ 0
]220 1

parameters222 <
)22< =
;22= >
IGroupBy33 
GroupBy33 
(33 
params33 

IQueryItem33  *
[33* +
]33+ ,
group_columns33- :
)33: ;
;33; <
IOrderBy44 
OrderBy44 
(44 
params44 
IQueryOrderItem44  /
[44/ 0
]440 1
columns442 9
)449 :
;44: ;
ITake55 
Take55 
(55 
int55 
?55 
count55 
)55 
;55 
}66 
public77 

	interface77 
IOrderBy77 
:77 
IExecutable77  +
{88 
ISkip99 
Skip99 
(99 
int99 
?99 
start99 
)99 
;99 
ITake:: 
Take:: 
(:: 
int:: 
?:: 
count:: 
):: 
;:: 
};; 
public<< 

	interface<< 
ISkip<< 
:<< 
IExecutable<< (
{== 
ITake>> 
Take>> 
(>> 
int>> 
?>> 
count>> 
)>> 
;>> 
}?? 
public@@ 

	interface@@ 
ITake@@ 
:@@ 
IExecutable@@ (
{AA 
}CC 
publicDD 

	interfaceDD 
	IGetTableDD 
:DD  
IExecutableDD! ,
{EE 
ISelectFF 
SelectFF 
(FF 
paramsFF 

INamedItemFF (
[FF( )
]FF) *
columnsFF+ 2
)FF2 3
;FF3 4
intGG 
CountGG 
(GG 
)GG 
;GG 
IWhereHH 
WhereHH 
(HH 
BEXPHH 
logical_expressionHH ,
)HH, -
;HH- .
IWhereII 
WhereII 
(II 
stringII 
textII  
,II  !
paramsII" (
objectII) /
[II/ 0
]II0 1

parametersII2 <
)II< =
;II= >
IGroupByJJ 
GroupByJJ 
(JJ 
paramsJJ 

IQueryItemJJ  *
[JJ* +
]JJ+ ,
group_columnsJJ- :
)JJ: ;
;JJ; <
IOrderByKK 
OrderByKK 
(KK 
paramsKK 
IQueryOrderItemKK  /
[KK/ 0
]KK0 1
columnsKK2 9
)KK9 :
;KK: ;
ISkipLL 
SkipLL 
(LL 
intLL 
?LL 
startLL 
)LL 
;LL 
ITakeMM 
TakeMM 
(MM 
intMM 
?MM 
countMM 
)MM 
;MM 
IEnumerableNN 
<NN 
TNN 
>NN 
ExecuteSimpleQueryNN )
<NN) *
TNN* +
>NN+ ,
(NN, -
SimpleQueryNN- 8
simpleQueryNN9 D
)NND E
;NNE F
ResultStatusPP 
InsertPP 
(PP 

DictionaryPP &
<PP& '
stringPP' -
,PP- .
objectPP/ 5
>PP5 6
	parameterPP7 @
,PP@ A
stringPPB H
[PPH I
]PPI J

exceptColsPPK U
=PPV W
nullPPX \
)PP\ ]
;PP] ^
ResultStatusQQ 
UpdateQQ 
(QQ 

DictionaryQQ &
<QQ& '
stringQQ' -
,QQ- .
objectQQ/ 5
>QQ5 6
	parameterQQ7 @
,QQ@ A
stringQQB H
[QQH I
]QQI J
idColsQQK Q
,QQQ R
stringQQS Y
[QQY Z
]QQZ [

exceptColsQQ\ f
=QQg h
nullQQi m
,QQm n
boolQQo s
setNullQQt {
=QQ| }
false	QQ~ É
)
QQÉ Ñ
;
QQÑ Ö
ResultStatusRR 
DeleteRR 
(RR 

DictionaryRR &
<RR& '
stringRR' -
,RR- .
objectRR/ 5
>RR5 6
	parameterRR7 @
,RR@ A
stringRRB H
[RRH I
]RRI J
idColsRRK Q
)RRQ R
;RRR S
ResultStatusSS 
DeleteSS 
(SS 
BEXPSS  
	conditionSS! *
)SS* +
;SS+ ,
ResultStatusUU 
InsertUU 
(UU 
IEnumerableUU '
<UU' (

DictionaryUU( 2
<UU2 3
stringUU3 9
,UU9 :
objectUU; A
>UUA B
>UUB C
	parameterUUD M
,UUM N
stringUUO U
[UUU V
]UUV W

exceptColsUUX b
=UUc d
nullUUe i
)UUi j
;UUj k
ResultStatusVV 
UpdateVV 
(VV 
IEnumerableVV '
<VV' (

DictionaryVV( 2
<VV2 3
stringVV3 9
,VV9 :
objectVV; A
>VVA B
>VVB C
	parameterVVD M
,VVM N
stringVVO U
[VVU V
]VVV W
idColsVVX ^
,VV^ _
stringVV` f
[VVf g
]VVg h

exceptColsVVi s
=VVt u
nullVVv z
,VVz {
bool	VV| Ä
setNull
VVÅ à
=
VVâ ä
false
VVã ê
)
VVê ë
;
VVë í
ResultStatusWW 
DeleteWW 
(WW 
IEnumerableWW '
<WW' (

DictionaryWW( 2
<WW2 3
stringWW3 9
,WW9 :
objectWW; A
>WWA B
>WWB C
	parameterWWD M
,WWM N
stringWWO U
[WWU V
]WWV W
idColsWWX ^
)WW^ _
;WW_ `
ResultStatusYY 
InsertYY 
(YY 
IFeatureYY $
featureYY% ,
,YY, -
stringYY. 4
geometryColumnNameYY5 G
)YYG H
;YYH I
ResultStatusZZ 
UpdateZZ 
(ZZ 
IFeatureZZ $
featureZZ% ,
,ZZ, -
stringZZ. 4
geometryColumnNameZZ5 G
,ZZG H
stringZZI O
[ZZO P
]ZZP Q
idColsZZR X
,ZZX Y
boolZZZ ^
setNullZZ_ f
=ZZg h
falseZZi n
)ZZn o
;ZZo p
ResultStatus[[ 
Insert[[ 
([[ 
FeatureCollection[[ -

collection[[. 8
,[[8 9
string[[: @
geometryColumnName[[A S
)[[S T
;[[T U
ResultStatus\\ 

BulkInsert\\ 
(\\  
FeatureCollection\\  1

collection\\2 <
,\\< =
	TableInfo\\> G
	tableInfo\\H Q
,\\Q R
string\\S Y 
gEOMETRY_COLUMN_NAME\\Z n
)\\n o
;\\o p
}]] 
public^^ 

	interface^^ 
IGetTableFunction^^ &
:^^' (
IExecutable^^) 4
{__ 
ISelect`` 
Select`` 
(`` 
params`` 

INamedItem`` (
[``( )
]``) *
columns``+ 2
)``2 3
;``3 4
intaa 
Countaa 
(aa 
)aa 
;aa 
IWherebb 
Wherebb 
(bb 
BEXPbb 
logical_expressionbb ,
)bb, -
;bb- .
IWherecc 
Wherecc 
(cc 
stringcc 
textcc  
,cc  !
paramscc" (
objectcc) /
[cc/ 0
]cc0 1

parameterscc2 <
)cc< =
;cc= >
IGroupBydd 
GroupBydd 
(dd 
paramsdd 

IQueryItemdd  *
[dd* +
]dd+ ,
group_columnsdd- :
)dd: ;
;dd; <
IOrderByee 
OrderByee 
(ee 
paramsee 
IQueryOrderItemee  /
[ee/ 0
]ee0 1
columnsee2 9
)ee9 :
;ee: ;
ISkipff 
Skipff 
(ff 
intff 
?ff 
startff 
)ff 
;ff 
ITakegg 
Takegg 
(gg 
intgg 
?gg 
countgg 
)gg 
;gg 
IEnumerablehh 
<hh 
Thh 
>hh 
ExecuteSimpleQueryhh )
<hh) *
Thh* +
>hh+ ,
(hh, -
SimpleQueryhh- 8
simpleQueryhh9 D
)hhD E
;hhE F
ResultStatusjj 
Insertjj 
(jj 

Dictionaryjj &
<jj& '
stringjj' -
,jj- .
objectjj/ 5
>jj5 6
	parameterjj7 @
,jj@ A
stringjjB H
[jjH I
]jjI J

exceptColsjjK U
=jjV W
nulljjX \
)jj\ ]
;jj] ^
ResultStatuskk 
Updatekk 
(kk 

Dictionarykk &
<kk& '
stringkk' -
,kk- .
objectkk/ 5
>kk5 6
	parameterkk7 @
,kk@ A
stringkkB H
[kkH I
]kkI J
idColskkK Q
,kkQ R
stringkkS Y
[kkY Z
]kkZ [

exceptColskk\ f
=kkg h
nullkki m
,kkm n
boolkko s
setNullkkt {
=kk| }
false	kk~ É
)
kkÉ Ñ
;
kkÑ Ö
ResultStatusll 
Deletell 
(ll 

Dictionaryll &
<ll& '
stringll' -
,ll- .
objectll/ 5
>ll5 6
	parameterll7 @
,ll@ A
stringllB H
[llH I
]llI J
idColsllK Q
)llQ R
;llR S
ResultStatusnn 
Insertnn 
(nn 
IEnumerablenn '
<nn' (

Dictionarynn( 2
<nn2 3
stringnn3 9
,nn9 :
objectnn; A
>nnA B
>nnB C
	parameternnD M
,nnM N
stringnnO U
[nnU V
]nnV W

exceptColsnnX b
=nnc d
nullnne i
)nni j
;nnj k
ResultStatusoo 
Updateoo 
(oo 
IEnumerableoo '
<oo' (

Dictionaryoo( 2
<oo2 3
stringoo3 9
,oo9 :
objectoo; A
>ooA B
>ooB C
	parameterooD M
,ooM N
stringooO U
[ooU V
]ooV W
idColsooX ^
,oo^ _
stringoo` f
[oof g
]oog h

exceptColsooi s
=oot u
nulloov z
,ooz {
bool	oo| Ä
setNull
ooÅ à
=
ooâ ä
false
ooã ê
)
ooê ë
;
ooë í
ResultStatuspp 
Deletepp 
(pp 
IEnumerablepp '
<pp' (

Dictionarypp( 2
<pp2 3
stringpp3 9
,pp9 :
objectpp; A
>ppA B
>ppB C
	parameterppD M
,ppM N
stringppO U
[ppU V
]ppV W
idColsppX ^
)pp^ _
;pp_ `
ResultStatusrr 
Insertrr 
(rr 
IFeaturerr $
featurerr% ,
,rr, -
stringrr. 4
geometryColumnNamerr5 G
)rrG H
;rrH I
ResultStatusss 
Insertss 
(ss 
FeatureCollectionss -

collectionss. 8
,ss8 9
stringss: @
geometryColumnNamessA S
)ssS T
;ssT U
ResultStatustt 

BulkInserttt 
(tt  
FeatureCollectiontt  1

collectiontt2 <
,tt< =
	TableInfott> G
	tableInfottH Q
,ttQ R
stringttS Y 
gEOMETRY_COLUMN_NAMEttZ n
)ttn o
;tto p
}uu 
publicxx 

classxx 
QueryProcessorxx 
:xx  !
IExecutablexx" -
,xx- .
IGetTableFunctionxx/ @
,xx@ A
	IGetTablexxB K
,xxK L
ISelectxxM T
,xxT U
IWherexxV \
,xx\ ]
IGroupByxx^ f
,xxf g
IOrderByxxh p
,xxp q
ISkipxxr w
,xxw x
ITakexxy ~
{yy 
privatezz 
boolzz 
_isFunctionzz  
=zz! "
falsezz# (
;zz( )
private{{ 
string{{ 

_tableName{{ !
;{{! "
private|| 
string|| 
_schemaName|| "
;||" #
private}} 
object}} 
[}} 
]}} 
_functionParameters}} ,
;}}, -
private~~ 
List~~ 
<~~ 
QueryStatement~~ #
>~~# $
_statements~~% 0
;~~0 1
private 
List 
< 
object 
> 
_parameters (
;( )
private
ÄÄ 
IQueryBuilder
ÄÄ 
_builder
ÄÄ &
;
ÄÄ& '
private
ÅÅ 
IQueryExecutor
ÅÅ 
	_executor
ÅÅ (
;
ÅÅ( )
private
ÇÇ 
ITypeMapper
ÇÇ 
_typeMapper
ÇÇ '
;
ÇÇ' (
public
ÖÖ 
QueryProcessor
ÖÖ 
(
ÖÖ 
string
ÖÖ $
	tableName
ÖÖ% .
,
ÖÖ. /
string
ÖÖ0 6

schemaName
ÖÖ7 A
,
ÖÖA B
IQueryBuilder
ÖÖC P
builder
ÖÖQ X
,
ÖÖX Y
IQueryExecutor
ÖÖZ h
executor
ÖÖi q
,
ÖÖq r
ITypeMapper
ÖÖs ~

typeMapperÖÖ â
)ÖÖâ ä
{
ÜÜ 	
_isFunction
áá 
=
áá 
false
áá 
;
áá  

_tableName
àà 
=
àà 
	tableName
àà "
;
àà" #
_schemaName
ââ 
=
ââ 

schemaName
ââ $
;
ââ$ %
_statements
ää 
=
ää 
new
ää 
List
ää "
<
ää" #
QueryStatement
ää# 1
>
ää1 2
(
ää2 3
)
ää3 4
;
ää4 5
_parameters
ãã 
=
ãã 
new
ãã 
List
ãã "
<
ãã" #
object
ãã# )
>
ãã) *
(
ãã* +
)
ãã+ ,
;
ãã, -
_builder
åå 
=
åå 
builder
åå 
;
åå 
	_executor
çç 
=
çç 
executor
çç  
;
çç  !
_typeMapper
éé 
=
éé 

typeMapper
éé $
;
éé$ %
}
èè 	
public
êê 
QueryProcessor
êê 
(
êê 
string
êê $
functionName
êê% 1
,
êê1 2
string
êê3 9

schemaName
êê: D
,
êêD E
object
êêF L
[
êêL M
]
êêM N

parameters
êêO Y
,
êêY Z
IQueryBuilder
êê[ h
builder
êêi p
,
êêp q
IQueryExecutorêêr Ä
executorêêÅ â
,êêâ ä
ITypeMapperêêã ñ

typeMapperêêó °
)êê° ¢
{
ëë 	
_isFunction
íí 
=
íí 
true
íí 
;
íí 

_tableName
ìì 
=
ìì 
functionName
ìì %
;
ìì% &
_schemaName
îî 
=
îî 

schemaName
îî $
;
îî$ %!
_functionParameters
ïï 
=
ïï  !

parameters
ïï" ,
;
ïï, -
_statements
ññ 
=
ññ 
new
ññ 
List
ññ "
<
ññ" #
QueryStatement
ññ# 1
>
ññ1 2
(
ññ2 3
)
ññ3 4
;
ññ4 5
_parameters
óó 
=
óó 
new
óó 
List
óó "
<
óó" #
object
óó# )
>
óó) *
(
óó* +
)
óó+ ,
;
óó, -
_builder
òò 
=
òò 
builder
òò 
;
òò 
	_executor
ôô 
=
ôô 
executor
ôô  
;
ôô  !
_typeMapper
öö 
=
öö 

typeMapper
öö $
;
öö$ %
}
õõ 	
public
úú 
ISelect
úú 
Select
úú 
(
úú 
params
úú $

INamedItem
úú% /
[
úú/ 0
]
úú0 1
columns
úú2 9
)
úú9 :
{
ùù 	
if
ûû 
(
ûû 
columns
ûû 
==
ûû 
null
ûû 
)
ûû  
return
üü 
this
üü 
;
üü 
_statements
†† 
.
†† 
Add
†† 
(
†† 
QueryStatement
†† *
.
††* +
Select
††+ 1
)
††1 2
;
††2 3
_parameters
°° 
.
°° 
Add
°° 
(
°° 
columns
°° #
)
°°# $
;
°°$ %
return
¢¢ 
this
¢¢ 
;
¢¢ 
}
££ 	
public
§§ 
int
§§ 
Count
§§ 
(
§§ 
)
§§ 
{
•• 	
_statements
¶¶ 
.
¶¶ 
Add
¶¶ 
(
¶¶ 
QueryStatement
¶¶ *
.
¶¶* +
Select
¶¶+ 1
)
¶¶1 2
;
¶¶2 3
_parameters
ßß 
.
ßß 
Add
ßß 
(
ßß 
new
ßß 

INamedItem
ßß  *
[
ßß* +
]
ßß+ ,
{
ßß- .
new
ßß/ 2
NEXP
ßß3 7
(
ßß7 8
)
ßß8 9
{
ßß: ;
Name
ßß< @
=
ßßA B
$str
ßßC J
,
ßßJ K

Expression
ßßL V
=
ßßW X
COL
ßßY \
.
ßß\ ]
ALL
ßß] `
.
ßß` a
COUNT
ßßa f
(
ßßf g
)
ßßg h
}
ßßi j
}
ßßk l
)
ßßl m
;
ßßm n
return
®® 
ExecuteScaler
®®  
<
®®  !
int
®®! $
>
®®$ %
(
®®% &
)
®®& '
;
®®' (
}
©© 	
public
™™ 
IWhere
™™ 
Where
™™ 
(
™™ 
BEXP
™™   
logical_expression
™™! 3
)
™™3 4
{
´´ 	
if
¨¨ 
(
¨¨  
logical_expression
¨¨ "
==
¨¨# %
null
¨¨& *
)
¨¨* +
return
≠≠ 
this
≠≠ 
;
≠≠ 
_statements
ÆÆ 
.
ÆÆ 
Add
ÆÆ 
(
ÆÆ 
QueryStatement
ÆÆ *
.
ÆÆ* +
Where
ÆÆ+ 0
)
ÆÆ0 1
;
ÆÆ1 2
_parameters
ØØ 
.
ØØ 
Add
ØØ 
(
ØØ  
logical_expression
ØØ .
)
ØØ. /
;
ØØ/ 0
return
∞∞ 
this
∞∞ 
;
∞∞ 
}
±± 	
public
≤≤ 
IWhere
≤≤ 
Where
≤≤ 
(
≤≤ 
string
≤≤ "
text
≤≤# '
,
≤≤' (
params
≤≤) /
object
≤≤0 6
[
≤≤6 7
]
≤≤7 8

parameters
≤≤9 C
)
≤≤C D
{
≥≥ 	
if
¥¥ 
(
¥¥ 
!
¥¥ 
string
¥¥ 
.
¥¥ 
IsNullOrEmpty
¥¥ %
(
¥¥% &
text
¥¥& *
)
¥¥* +
)
¥¥+ ,
{
µµ 
_statements
∂∂ 
.
∂∂ 
Add
∂∂ 
(
∂∂  
QueryStatement
∂∂  .
.
∂∂. /
Where
∂∂/ 4
)
∂∂4 5
;
∂∂5 6
_parameters
∑∑ 
.
∑∑ 
Add
∑∑ 
(
∑∑  
new
∑∑  #
{
∑∑$ %
Text
∑∑& *
=
∑∑+ ,
text
∑∑- 1
,
∑∑1 2

Parameters
∑∑3 =
=
∑∑> ?

parameters
∑∑@ J
}
∑∑K L
)
∑∑L M
;
∑∑M N
}
∏∏ 
return
ππ 
this
ππ 
;
ππ 
}
∫∫ 	
public
ªª 
IGroupBy
ªª 
GroupBy
ªª 
(
ªª  
params
ªª  &

IQueryItem
ªª' 1
[
ªª1 2
]
ªª2 3
group_columns
ªª4 A
)
ªªA B
{
ºº 	
_statements
ΩΩ 
.
ΩΩ 
Add
ΩΩ 
(
ΩΩ 
QueryStatement
ΩΩ *
.
ΩΩ* +
GroupBy
ΩΩ+ 2
)
ΩΩ2 3
;
ΩΩ3 4
_parameters
ææ 
.
ææ 
Add
ææ 
(
ææ 
group_columns
ææ )
)
ææ) *
;
ææ* +
return
øø 
this
øø 
;
øø 
}
¿¿ 	
public
¡¡ 
IOrderBy
¡¡ 
OrderBy
¡¡ 
(
¡¡  
params
¡¡  &
IQueryOrderItem
¡¡' 6
[
¡¡6 7
]
¡¡7 8
columns
¡¡9 @
)
¡¡@ A
{
¬¬ 	
if
√√ 
(
√√ 
columns
√√ 
==
√√ 
null
√√ 
)
√√  
return
ƒƒ 
this
ƒƒ 
;
ƒƒ 
if
≈≈ 
(
≈≈ 
_statements
≈≈ 
.
≈≈ 
Contains
≈≈ $
(
≈≈$ %
QueryStatement
≈≈% 3
.
≈≈3 4
OrderBy
≈≈4 ;
)
≈≈; <
)
≈≈< =
{
∆∆ 
var
«« 
index
«« 
=
«« 
_statements
«« '
.
««' (
IndexOf
««( /
(
««/ 0
QueryStatement
««0 >
.
««> ?
OrderBy
««? F
)
««F G
;
««G H
_parameters
»» 
[
»» 
index
»» !
]
»»! "
=
»»# $
(
»»% &
(
»»& '
IQueryOrderItem
»»' 6
[
»»6 7
]
»»7 8
)
»»8 9
_parameters
»»9 D
[
»»D E
index
»»E J
]
»»J K
)
»»K L
.
»»L M
Union
»»M R
(
»»R S
columns
»»S Z
)
»»Z [
.
»»[ \
ToArray
»»\ c
(
»»c d
)
»»d e
;
»»e f
return
…… 
this
…… 
;
…… 
}
   
_statements
ÀÀ 
.
ÀÀ 
Add
ÀÀ 
(
ÀÀ 
QueryStatement
ÀÀ *
.
ÀÀ* +
OrderBy
ÀÀ+ 2
)
ÀÀ2 3
;
ÀÀ3 4
;
ÀÀ5 6
_parameters
ÃÃ 
.
ÃÃ 
Add
ÃÃ 
(
ÃÃ 
columns
ÃÃ #
)
ÃÃ# $
;
ÃÃ$ %
return
ÕÕ 
this
ÕÕ 
;
ÕÕ 
}
ŒŒ 	
public
œœ 
ISkip
œœ 
Skip
œœ 
(
œœ 
int
œœ 
?
œœ 
start
œœ $
)
œœ$ %
{
–– 	
if
—— 
(
—— 
start
—— 
.
—— 
HasValue
—— 
)
—— 
{
““ 
_statements
”” 
.
”” 
Add
”” 
(
””  
QueryStatement
””  .
.
””. /
Skip
””/ 3
)
””3 4
;
””4 5
_parameters
‘‘ 
.
‘‘ 
Add
‘‘ 
(
‘‘  
start
‘‘  %
.
‘‘% &
Value
‘‘& +
)
‘‘+ ,
;
‘‘, -
}
’’ 
return
÷÷ 
this
÷÷ 
;
÷÷ 
}
◊◊ 	
public
ÿÿ 
ITake
ÿÿ 
Take
ÿÿ 
(
ÿÿ 
int
ÿÿ 
?
ÿÿ 
count
ÿÿ $
)
ÿÿ$ %
{
ŸŸ 	
if
⁄⁄ 
(
⁄⁄ 
count
⁄⁄ 
.
⁄⁄ 
HasValue
⁄⁄ 
)
⁄⁄ 
{
€€ 
_statements
‹‹ 
.
‹‹ 
Add
‹‹ 
(
‹‹  
QueryStatement
‹‹  .
.
‹‹. /
Take
‹‹/ 3
)
‹‹3 4
;
‹‹4 5
_parameters
›› 
.
›› 
Add
›› 
(
››  
count
››  %
.
››% &
Value
››& +
)
››+ ,
;
››, -
}
ﬁﬁ 
return
ﬂﬂ 
this
ﬂﬂ 
;
ﬂﬂ 
}
‡‡ 	
public
‚‚ 
IEnumerable
‚‚ 
<
‚‚ 

Dictionary
‚‚ %
<
‚‚% &
string
‚‚& ,
,
‚‚, -
object
‚‚. 4
>
‚‚4 5
>
‚‚5 6
Execute
‚‚7 >
(
‚‚> ?
)
‚‚? @
{
„„ 	
var
‰‰ 
query
‰‰ 
=
‰‰ 
_builder
‰‰  
.
‰‰  !
GetFetchQuery
‰‰! .
(
‰‰. /
_isFunction
‰‰/ :
,
‰‰: ;

_tableName
‰‰< F
,
‰‰F G
_schemaName
‰‰H S
,
‰‰S T!
_functionParameters
‰‰U h
,
‰‰h i
_statements
‰‰j u
,
‰‰u v
_parameters‰‰w Ç
)‰‰Ç É
;‰‰É Ñ
return
ÂÂ 
	_executor
ÂÂ 
.
ÂÂ 
ExecuteReader
ÂÂ *
(
ÂÂ* +
query
ÂÂ+ 0
)
ÂÂ0 1
;
ÂÂ1 2
}
ÊÊ 	
public
ÁÁ 
IEnumerable
ÁÁ 
<
ÁÁ 
T
ÁÁ 
>
ÁÁ 
Execute
ÁÁ %
<
ÁÁ% &
T
ÁÁ& '
>
ÁÁ' (
(
ÁÁ( )
)
ÁÁ) *
{
ËË 	
var
ÈÈ 
query
ÈÈ 
=
ÈÈ 
_builder
ÈÈ  
.
ÈÈ  !
GetFetchQuery
ÈÈ! .
(
ÈÈ. /
_isFunction
ÈÈ/ :
,
ÈÈ: ;

_tableName
ÈÈ< F
,
ÈÈF G
_schemaName
ÈÈH S
,
ÈÈS T!
_functionParameters
ÈÈU h
,
ÈÈh i
_statements
ÈÈj u
,
ÈÈu v
_parametersÈÈw Ç
)ÈÈÇ É
;ÈÈÉ Ñ
return
ÍÍ 
	_executor
ÍÍ 
.
ÍÍ 
ExecuteReader
ÍÍ *
<
ÍÍ* +
T
ÍÍ+ ,
>
ÍÍ, -
(
ÍÍ- .
query
ÍÍ. 3
)
ÍÍ3 4
;
ÍÍ4 5
}
ÎÎ 	
public
ÏÏ 
T
ÏÏ 
ExecuteScaler
ÏÏ 
<
ÏÏ 
T
ÏÏ  
>
ÏÏ  !
(
ÏÏ! "
)
ÏÏ" #
{
ÌÌ 	
var
ÓÓ 
query
ÓÓ 
=
ÓÓ 
_builder
ÓÓ  
.
ÓÓ  !
GetFetchQuery
ÓÓ! .
(
ÓÓ. /
_isFunction
ÓÓ/ :
,
ÓÓ: ;

_tableName
ÓÓ< F
,
ÓÓF G
_schemaName
ÓÓH S
,
ÓÓS T!
_functionParameters
ÓÓU h
,
ÓÓh i
_statements
ÓÓj u
,
ÓÓu v
_parametersÓÓw Ç
)ÓÓÇ É
;ÓÓÉ Ñ
return
ÔÔ 
	_executor
ÔÔ 
.
ÔÔ 
ExecuteScaler
ÔÔ *
<
ÔÔ* +
T
ÔÔ+ ,
>
ÔÔ, -
(
ÔÔ- .
query
ÔÔ. 3
)
ÔÔ3 4
;
ÔÔ4 5
}
 	
public
ÒÒ 
string
ÒÒ 
GetQueryForTest
ÒÒ %
(
ÒÒ% &
)
ÒÒ& '
{
ÚÚ 	
return
ÛÛ 
_builder
ÛÛ 
.
ÛÛ "
GetFetchQueryForTest
ÛÛ 0
(
ÛÛ0 1
_isFunction
ÛÛ1 <
,
ÛÛ< =

_tableName
ÛÛ> H
,
ÛÛH I
_schemaName
ÛÛJ U
,
ÛÛU V!
_functionParameters
ÛÛW j
,
ÛÛj k
_statements
ÛÛl w
,
ÛÛw x
_parametersÛÛy Ñ
)ÛÛÑ Ö
;ÛÛÖ Ü
}
ÙÙ 	
public
˜˜ 
ResultStatus
˜˜ 
Insert
˜˜ "
(
˜˜" #

Dictionary
˜˜# -
<
˜˜- .
string
˜˜. 4
,
˜˜4 5
object
˜˜6 <
>
˜˜< =
	parameter
˜˜> G
,
˜˜G H
string
˜˜I O
[
˜˜O P
]
˜˜P Q

exceptCols
˜˜R \
)
˜˜\ ]
{
¯¯ 	
var
˘˘ 
query
˘˘ 
=
˘˘ 
_builder
˘˘  
.
˘˘  !
GetInsertQuery
˘˘! /
(
˘˘/ 0

_tableName
˘˘0 :
,
˘˘: ;
_schemaName
˘˘< G
,
˘˘G H
	parameter
˘˘I R
,
˘˘R S

exceptCols
˘˘T ^
)
˘˘^ _
;
˘˘_ `
return
˙˙ 
	_executor
˙˙ 
.
˙˙ 
ExecuteNonQuery
˙˙ ,
(
˙˙, -
query
˙˙- 2
)
˙˙2 3
;
˙˙3 4
}
˚˚ 	
public
¸¸ 
ResultStatus
¸¸ 
Update
¸¸ "
(
¸¸" #

Dictionary
¸¸# -
<
¸¸- .
string
¸¸. 4
,
¸¸4 5
object
¸¸6 <
>
¸¸< =
	parameter
¸¸> G
,
¸¸G H
string
¸¸I O
[
¸¸O P
]
¸¸P Q
idCols
¸¸R X
,
¸¸X Y
string
¸¸Z `
[
¸¸` a
]
¸¸a b

exceptCols
¸¸c m
=
¸¸n o
null
¸¸p t
,
¸¸t u
bool
¸¸v z
setNull¸¸{ Ç
=¸¸É Ñ
false¸¸Ö ä
)¸¸ä ã
{
˝˝ 	
var
˛˛ 
query
˛˛ 
=
˛˛ 
_builder
˛˛  
.
˛˛  !
GetUpdateQuery
˛˛! /
(
˛˛/ 0

_tableName
˛˛0 :
,
˛˛: ;
_schemaName
˛˛< G
,
˛˛G H
	parameter
˛˛I R
,
˛˛R S
idCols
˛˛T Z
,
˛˛Z [

exceptCols
˛˛\ f
,
˛˛f g
setNull
˛˛h o
)
˛˛o p
;
˛˛p q
return
ˇˇ 
	_executor
ˇˇ 
.
ˇˇ 
ExecuteNonQuery
ˇˇ ,
(
ˇˇ, -
query
ˇˇ- 2
)
ˇˇ2 3
;
ˇˇ3 4
}
ÄÄ 	
public
ÅÅ 
ResultStatus
ÅÅ 
Delete
ÅÅ "
(
ÅÅ" #

Dictionary
ÅÅ# -
<
ÅÅ- .
string
ÅÅ. 4
,
ÅÅ4 5
object
ÅÅ6 <
>
ÅÅ< =
	parameter
ÅÅ> G
,
ÅÅG H
string
ÅÅI O
[
ÅÅO P
]
ÅÅP Q
idCols
ÅÅR X
)
ÅÅX Y
{
ÇÇ 	
var
ÉÉ 
query
ÉÉ 
=
ÉÉ 
_builder
ÉÉ  
.
ÉÉ  !
GetDeleteQuery
ÉÉ! /
(
ÉÉ/ 0

_tableName
ÉÉ0 :
,
ÉÉ: ;
_schemaName
ÉÉ< G
,
ÉÉG H
	parameter
ÉÉI R
,
ÉÉR S
idCols
ÉÉT Z
)
ÉÉZ [
;
ÉÉ[ \
return
ÑÑ 
	_executor
ÑÑ 
.
ÑÑ 
ExecuteNonQuery
ÑÑ ,
(
ÑÑ, -
query
ÑÑ- 2
)
ÑÑ2 3
;
ÑÑ3 4
}
ÖÖ 	
public
ÜÜ 
ResultStatus
ÜÜ 
Delete
ÜÜ "
(
ÜÜ" #
BEXP
ÜÜ# '
	condition
ÜÜ( 1
)
ÜÜ1 2
{
áá 	
var
àà 
query
àà 
=
àà 
_builder
àà  
.
àà  !
GetDeleteQuery
àà! /
(
àà/ 0

_tableName
àà0 :
,
àà: ;
_schemaName
àà< G
,
ààG H
	condition
ààI R
)
ààR S
;
ààS T
return
ââ 
	_executor
ââ 
.
ââ 
ExecuteNonQuery
ââ ,
(
ââ, -
query
ââ- 2
)
ââ2 3
;
ââ3 4
}
ää 	
public
ãã 
ResultStatus
ãã 
Insert
ãã "
(
ãã" #
IEnumerable
ãã# .
<
ãã. /

Dictionary
ãã/ 9
<
ãã9 :
string
ãã: @
,
ãã@ A
object
ããB H
>
ããH I
>
ããI J
	parameter
ããK T
,
ããT U
string
ããV \
[
ãã\ ]
]
ãã] ^

exceptCols
ãã_ i
=
ããj k
null
ããl p
)
ããp q
{
åå 	
DbTransaction
çç 
transaction
çç %
=
çç& '
null
çç( ,
;
çç, -
var
éé 
result
éé 
=
éé 
true
éé 
;
éé 
var
èè 
opentransaction
èè 
=
èè  !
	_executor
èè" +
.
èè+ ,
IsTransactionOpen
èè, =
;
èè= >
if
êê 
(
êê 
!
êê 
opentransaction
êê  
)
êê  !
transaction
ëë 
=
ëë 
	_executor
ëë '
.
ëë' (
BeginTransaction
ëë( 8
(
ëë8 9
)
ëë9 :
;
ëë: ;
var
íí 
i
íí 
=
íí 
$num
íí 
;
íí 
foreach
ìì 
(
ìì 
var
ìì 
p
ìì 
in
ìì 
	parameter
ìì '
)
ìì' (
{
îî 
result
ïï 
=
ïï 
result
ïï 
&
ïï  !
Insert
ïï" (
(
ïï( )
p
ïï) *
,
ïï* +

exceptCols
ïï, 6
)
ïï6 7
.
ïï7 8
result
ïï8 >
;
ïï> ?
if
ññ 
(
ññ 
result
ññ 
==
ññ 
false
ññ #
)
ññ# $
break
ññ% *
;
ññ* +
i
óó 
++
óó 
;
óó 
}
òò 
if
ôô 
(
ôô 
!
ôô 
opentransaction
ôô  
)
ôô  !
{
öö 
if
õõ 
(
õõ 
result
õõ 
)
õõ 
transaction
õõ '
.
õõ' (
Commit
õõ( .
(
õõ. /
)
õõ/ 0
;
õõ0 1
else
úú 
transaction
úú  
.
úú  !
Rollback
úú! )
(
úú) *
)
úú* +
;
úú+ ,
}
ùù 
return
ûû 
new
ûû 
ResultStatus
ûû #
{
ûû$ %
result
ûû& ,
=
ûû- .
result
ûû/ 5
,
ûû5 6
message
ûû7 >
=
ûû? @
i
ûûA B
.
ûûB C
ToString
ûûC K
(
ûûK L
)
ûûL M
}
ûûN O
;
ûûO P
}
üü 	
public
†† 
ResultStatus
†† 
Update
†† "
(
††" #
IEnumerable
††# .
<
††. /

Dictionary
††/ 9
<
††9 :
string
††: @
,
††@ A
object
††B H
>
††H I
>
††I J
	parameter
††K T
,
††T U
string
††V \
[
††\ ]
]
††] ^
idCols
††_ e
,
††e f
string
††g m
[
††m n
]
††n o

exceptCols
††p z
=
††{ |
null††} Å
,††Å Ç
bool††É á
setNull††à è
=††ê ë
false††í ó
)††ó ò
{
°° 	
DbTransaction
¢¢ 
transaction
¢¢ %
=
¢¢& '
null
¢¢( ,
;
¢¢, -
var
££ 
result
££ 
=
££ 
true
££ 
;
££ 
var
§§ 
opentransaction
§§ 
=
§§  !
	_executor
§§" +
.
§§+ ,
IsTransactionOpen
§§, =
;
§§= >
if
•• 
(
•• 
!
•• 
opentransaction
••  
)
••  !
transaction
¶¶ 
=
¶¶ 
	_executor
¶¶ '
.
¶¶' (
BeginTransaction
¶¶( 8
(
¶¶8 9
)
¶¶9 :
;
¶¶: ;
var
ßß 
i
ßß 
=
ßß 
$num
ßß 
;
ßß 
foreach
®® 
(
®® 
var
®® 
p
®® 
in
®® 
	parameter
®® '
)
®®' (
{
©© 
result
™™ 
=
™™ 
result
™™ 
&
™™  !
Update
™™" (
(
™™( )
p
™™) *
,
™™* +
idCols
™™, 2
,
™™2 3

exceptCols
™™4 >
,
™™> ?
setNull
™™@ G
)
™™G H
.
™™H I
result
™™I O
;
™™O P
if
´´ 
(
´´ 
result
´´ 
==
´´ 
false
´´ #
)
´´# $
break
´´% *
;
´´* +
i
¨¨ 
++
¨¨ 
;
¨¨ 
}
≠≠ 
if
ÆÆ 
(
ÆÆ 
!
ÆÆ 
opentransaction
ÆÆ  
)
ÆÆ  !
{
ØØ 
if
∞∞ 
(
∞∞ 
result
∞∞ 
)
∞∞ 
transaction
∞∞ '
.
∞∞' (
Commit
∞∞( .
(
∞∞. /
)
∞∞/ 0
;
∞∞0 1
else
±± 
transaction
±±  
.
±±  !
Rollback
±±! )
(
±±) *
)
±±* +
;
±±+ ,
}
≤≤ 
return
≥≥ 
new
≥≥ 
ResultStatus
≥≥ #
{
≥≥$ %
result
≥≥& ,
=
≥≥- .
result
≥≥/ 5
,
≥≥5 6
message
≥≥7 >
=
≥≥? @
i
≥≥A B
.
≥≥B C
ToString
≥≥C K
(
≥≥K L
)
≥≥L M
}
≥≥N O
;
≥≥O P
}
¥¥ 	
public
µµ 
ResultStatus
µµ 
Delete
µµ "
(
µµ" #
IEnumerable
µµ# .
<
µµ. /

Dictionary
µµ/ 9
<
µµ9 :
string
µµ: @
,
µµ@ A
object
µµB H
>
µµH I
>
µµI J
	parameter
µµK T
,
µµT U
string
µµV \
[
µµ\ ]
]
µµ] ^
idCols
µµ_ e
)
µµe f
{
∂∂ 	
DbTransaction
∑∑ 
transaction
∑∑ %
=
∑∑& '
null
∑∑( ,
;
∑∑, -
var
∏∏ 
result
∏∏ 
=
∏∏ 
true
∏∏ 
;
∏∏ 
var
ππ 
opentransaction
ππ 
=
ππ  !
	_executor
ππ" +
.
ππ+ ,
IsTransactionOpen
ππ, =
;
ππ= >
if
∫∫ 
(
∫∫ 
!
∫∫ 
opentransaction
∫∫  
)
∫∫  !
transaction
ªª 
=
ªª 
	_executor
ªª '
.
ªª' (
BeginTransaction
ªª( 8
(
ªª8 9
)
ªª9 :
;
ªª: ;
var
ºº 
i
ºº 
=
ºº 
$num
ºº 
;
ºº 
foreach
ΩΩ 
(
ΩΩ 
var
ΩΩ 
p
ΩΩ 
in
ΩΩ 
	parameter
ΩΩ '
)
ΩΩ' (
{
ææ 
result
øø 
=
øø 
result
øø 
&
øø  !
Delete
øø" (
(
øø( )
p
øø) *
,
øø* +
idCols
øø, 2
)
øø2 3
.
øø3 4
result
øø4 :
;
øø: ;
if
¿¿ 
(
¿¿ 
result
¿¿ 
==
¿¿ 
false
¿¿ #
)
¿¿# $
break
¿¿% *
;
¿¿* +
i
¡¡ 
++
¡¡ 
;
¡¡ 
}
¬¬ 
if
√√ 
(
√√ 
!
√√ 
opentransaction
√√  
)
√√  !
{
ƒƒ 
if
≈≈ 
(
≈≈ 
result
≈≈ 
)
≈≈ 
transaction
≈≈ '
.
≈≈' (
Commit
≈≈( .
(
≈≈. /
)
≈≈/ 0
;
≈≈0 1
else
∆∆ 
transaction
∆∆  
.
∆∆  !
Rollback
∆∆! )
(
∆∆) *
)
∆∆* +
;
∆∆+ ,
}
«« 
return
»» 
new
»» 
ResultStatus
»» #
{
»»$ %
result
»»& ,
=
»»- .
result
»»/ 5
,
»»5 6
message
»»7 >
=
»»? @
i
»»A B
.
»»B C
ToString
»»C K
(
»»K L
)
»»L M
}
»»N O
;
»»O P
}
…… 	
public
ÀÀ 
IEnumerable
ÀÀ 
<
ÀÀ 
T
ÀÀ 
>
ÀÀ  
ExecuteSimpleQuery
ÀÀ 0
<
ÀÀ0 1
T
ÀÀ1 2
>
ÀÀ2 3
(
ÀÀ3 4
SimpleQuery
ÀÀ4 ?
simpleQuery
ÀÀ@ K
)
ÀÀK L
{
ÃÃ 	
if
ÕÕ 
(
ÕÕ 
simpleQuery
ÕÕ 
.
ÕÕ 
Skip
ÕÕ  
.
ÕÕ  !
HasValue
ÕÕ! )
&&
ÕÕ* ,
simpleQuery
ÕÕ- 8
.
ÕÕ8 9
Take
ÕÕ9 =
.
ÕÕ= >
HasValue
ÕÕ> F
)
ÕÕF G
return
ŒŒ 
Where
ŒŒ 
(
ŒŒ 
simpleQuery
ŒŒ (
.
ŒŒ( )
Filter
ŒŒ) /
)
ŒŒ/ 0
.
œœ 
Select
œœ #
(
œœ# $
simpleQuery
œœ$ /
.
œœ/ 0
Fields
œœ0 6
)
œœ6 7
.
–– 
OrderBy
–– $
(
––$ %
simpleQuery
––% 0
.
––0 1
Sort
––1 5
)
––5 6
.
—— 
Skip
—— !
(
——! "
simpleQuery
——" -
.
——- .
Skip
——. 2
.
——2 3
Value
——3 8
)
——8 9
.
““ 
Take
““ !
(
““! "
simpleQuery
““" -
.
““- .
Take
““. 2
.
““2 3
Value
““3 8
)
““8 9
.
““9 :
Execute
““: A
<
““A B
T
““B C
>
““C D
(
““D E
)
““E F
;
““F G
else
”” 
if
”” 
(
”” 
simpleQuery
””  
.
””  !
Skip
””! %
.
””% &
HasValue
””& .
)
””. /
return
‘‘ 
Where
‘‘ 
(
‘‘ 
simpleQuery
‘‘ (
.
‘‘( )
Filter
‘‘) /
)
‘‘/ 0
.
’’ 
Select
’’ #
(
’’# $
simpleQuery
’’$ /
.
’’/ 0
Fields
’’0 6
)
’’6 7
.
÷÷ 
OrderBy
÷÷ $
(
÷÷$ %
simpleQuery
÷÷% 0
.
÷÷0 1
Sort
÷÷1 5
)
÷÷5 6
.
◊◊ 
Skip
◊◊ !
(
◊◊! "
simpleQuery
◊◊" -
.
◊◊- .
Skip
◊◊. 2
.
◊◊2 3
Value
◊◊3 8
)
◊◊8 9
.
◊◊9 :
Execute
◊◊: A
<
◊◊A B
T
◊◊B C
>
◊◊C D
(
◊◊D E
)
◊◊E F
;
◊◊F G
else
ÿÿ 
if
ÿÿ 
(
ÿÿ 
simpleQuery
ÿÿ  
.
ÿÿ  !
Take
ÿÿ! %
.
ÿÿ% &
HasValue
ÿÿ& .
)
ÿÿ. /
return
ŸŸ 
Where
ŸŸ 
(
ŸŸ 
simpleQuery
ŸŸ (
.
ŸŸ( )
Filter
ŸŸ) /
)
ŸŸ/ 0
.
⁄⁄ 
Select
⁄⁄ #
(
⁄⁄# $
simpleQuery
⁄⁄$ /
.
⁄⁄/ 0
Fields
⁄⁄0 6
)
⁄⁄6 7
.
€€ 
OrderBy
€€ $
(
€€$ %
simpleQuery
€€% 0
.
€€0 1
Sort
€€1 5
)
€€5 6
.
‹‹ 
Take
‹‹ !
(
‹‹! "
simpleQuery
‹‹" -
.
‹‹- .
Take
‹‹. 2
.
‹‹2 3
Value
‹‹3 8
)
‹‹8 9
.
‹‹9 :
Execute
‹‹: A
<
‹‹A B
T
‹‹B C
>
‹‹C D
(
‹‹D E
)
‹‹E F
;
‹‹F G
else
›› 
return
ﬁﬁ 
Where
ﬁﬁ 
(
ﬁﬁ 
simpleQuery
ﬁﬁ (
.
ﬁﬁ( )
Filter
ﬁﬁ) /
)
ﬁﬁ/ 0
.
ﬂﬂ 
Select
ﬂﬂ #
(
ﬂﬂ# $
simpleQuery
ﬂﬂ$ /
.
ﬂﬂ/ 0
Fields
ﬂﬂ0 6
)
ﬂﬂ6 7
.
‡‡ 
OrderBy
‡‡ $
(
‡‡$ %
simpleQuery
‡‡% 0
.
‡‡0 1
Sort
‡‡1 5
)
‡‡5 6
.
‡‡6 7
Execute
‡‡7 >
<
‡‡> ?
T
‡‡? @
>
‡‡@ A
(
‡‡A B
)
‡‡B C
;
‡‡C D
}
·· 	
public
„„ 
FeatureCollection
„„  
ExecuteFeature
„„! /
(
„„/ 0
)
„„0 1
{
‰‰ 	
var
ÂÂ 
query
ÂÂ 
=
ÂÂ 
_builder
ÂÂ  
.
ÂÂ  !
GetFetchQuery
ÂÂ! .
(
ÂÂ. /
_isFunction
ÂÂ/ :
,
ÂÂ: ;

_tableName
ÂÂ< F
,
ÂÂF G
_schemaName
ÂÂH S
,
ÂÂS T!
_functionParameters
ÂÂU h
,
ÂÂh i
_statements
ÂÂj u
,
ÂÂu v
_parametersÂÂw Ç
)ÂÂÇ É
;ÂÂÉ Ñ
return
ÊÊ 
	_executor
ÊÊ 
.
ÊÊ 
ExecuteFeature
ÊÊ +
(
ÊÊ+ ,
query
ÊÊ, 1
)
ÊÊ1 2
;
ÊÊ2 3
}
ÁÁ 	
public
ÈÈ 
ResultStatus
ÈÈ 
Insert
ÈÈ "
(
ÈÈ" #
IFeature
ÈÈ# +
feature
ÈÈ, 3
,
ÈÈ3 4
string
ÈÈ5 ; 
geometryColumnName
ÈÈ< N
)
ÈÈN O
{
ÍÍ 	
var
ÎÎ 
query
ÎÎ 
=
ÎÎ 
_builder
ÎÎ  
.
ÎÎ  !
GetInsertQuery
ÎÎ! /
(
ÎÎ/ 0

_tableName
ÎÎ0 :
,
ÎÎ: ;
_schemaName
ÎÎ< G
,
ÎÎG H
feature
ÎÎI P
,
ÎÎP Q 
geometryColumnName
ÎÎR d
)
ÎÎd e
;
ÎÎe f
return
ÏÏ 
	_executor
ÏÏ 
.
ÏÏ 
ExecuteNonQuery
ÏÏ ,
(
ÏÏ, -
query
ÏÏ- 2
)
ÏÏ2 3
;
ÏÏ3 4
}
ÌÌ 	
public
ÔÔ 
ResultStatus
ÔÔ 
Insert
ÔÔ "
(
ÔÔ" #
FeatureCollection
ÔÔ# 4

collection
ÔÔ5 ?
,
ÔÔ? @
string
ÔÔA G 
geometryColumnName
ÔÔH Z
)
ÔÔZ [
{
 	
if
ÒÒ 
(
ÒÒ 
	_executor
ÒÒ 
.
ÒÒ !
IsSupportBulkInsert
ÒÒ -
)
ÒÒ- .
return
ÚÚ 
	_executor
ÚÚ  
.
ÚÚ  !
ExecuteBulkInsert
ÚÚ! 2
(
ÚÚ2 3

_tableName
ÚÚ3 =
,
ÚÚ= >
_schemaName
ÚÚ? J
,
ÚÚJ K

collection
ÚÚL V
,
ÚÚV W
null
ÚÚX \
,
ÚÚ\ ] 
geometryColumnName
ÚÚ^ p
)
ÚÚp q
;
ÚÚq r
else
ÛÛ 
{
ÙÙ 
DbTransaction
ıı 
transaction
ıı )
=
ıı* +
null
ıı, 0
;
ıı0 1
var
ˆˆ 
result
ˆˆ 
=
ˆˆ 
true
ˆˆ !
;
ˆˆ! "
var
˜˜ 
opentransaction
˜˜ #
=
˜˜$ %
	_executor
˜˜& /
.
˜˜/ 0
IsTransactionOpen
˜˜0 A
;
˜˜A B
if
¯¯ 
(
¯¯ 
!
¯¯ 
opentransaction
¯¯ $
)
¯¯$ %
transaction
˘˘ 
=
˘˘  !
	_executor
˘˘" +
.
˘˘+ ,
BeginTransaction
˘˘, <
(
˘˘< =
)
˘˘= >
;
˘˘> ?
var
˙˙ 
i
˙˙ 
=
˙˙ 
$num
˙˙ 
;
˙˙ 
foreach
˚˚ 
(
˚˚ 
var
˚˚ 
feature
˚˚ $
in
˚˚% '

collection
˚˚( 2
.
˚˚2 3
Features
˚˚3 ;
)
˚˚; <
{
¸¸ 
result
˝˝ 
=
˝˝ 
result
˝˝ #
&
˝˝$ %
Insert
˝˝& ,
(
˝˝, -
feature
˝˝- 4
,
˝˝4 5 
geometryColumnName
˝˝6 H
)
˝˝H I
.
˝˝I J
result
˝˝J P
;
˝˝P Q
if
˛˛ 
(
˛˛ 
result
˛˛ 
==
˛˛ !
false
˛˛" '
)
˛˛' (
break
˛˛) .
;
˛˛. /
i
ˇˇ 
++
ˇˇ 
;
ˇˇ 
}
ÄÄ 
if
ÅÅ 
(
ÅÅ 
!
ÅÅ 
opentransaction
ÅÅ $
)
ÅÅ$ %
{
ÇÇ 
if
ÉÉ 
(
ÉÉ 
result
ÉÉ 
)
ÉÉ 
transaction
ÉÉ  +
.
ÉÉ+ ,
Commit
ÉÉ, 2
(
ÉÉ2 3
)
ÉÉ3 4
;
ÉÉ4 5
else
ÑÑ 
transaction
ÑÑ $
.
ÑÑ$ %
Rollback
ÑÑ% -
(
ÑÑ- .
)
ÑÑ. /
;
ÑÑ/ 0
}
ÖÖ 
return
ÜÜ 
new
ÜÜ 
ResultStatus
ÜÜ '
{
ÜÜ( )
result
ÜÜ* 0
=
ÜÜ1 2
result
ÜÜ3 9
,
ÜÜ9 :
message
ÜÜ; B
=
ÜÜC D
i
ÜÜE F
.
ÜÜF G
ToString
ÜÜG O
(
ÜÜO P
)
ÜÜP Q
}
ÜÜR S
;
ÜÜS T
}
áá 
}
õõ 	
public
ùù 
ResultStatus
ùù 

BulkInsert
ùù &
(
ùù& '
FeatureCollection
ùù' 8

collection
ùù9 C
,
ùùC D
	TableInfo
ùùE N
	tableInfo
ùùO X
,
ùùX Y
string
ùùZ ` 
geometryColumnName
ùùa s
)
ùùs t
{
ûû 	
return
üü 
	_executor
üü 
.
üü 
ExecuteBulkInsert
üü .
(
üü. /

_tableName
üü/ 9
,
üü9 :
_schemaName
üü; F
,
üüF G

collection
üüH R
,
üüR S
	tableInfo
üüT ]
,
üü] ^ 
geometryColumnName
üü_ q
)
üüq r
;
üür s
}
†† 	
public
¢¢ 
ResultStatus
¢¢ 
Update
¢¢ "
(
¢¢" #
IFeature
¢¢# +
feature
¢¢, 3
,
¢¢3 4
string
¢¢5 ; 
geometryColumnName
¢¢< N
,
¢¢N O
string
¢¢P V
[
¢¢V W
]
¢¢W X
idCols
¢¢Y _
,
¢¢_ `
bool
¢¢a e
setNull
¢¢f m
=
¢¢n o
false
¢¢p u
)
¢¢u v
{
££ 	
var
§§ 
query
§§ 
=
§§ 
_builder
§§  
.
§§  !
GetUpdateQuery
§§! /
(
§§/ 0

_tableName
§§0 :
,
§§: ;
_schemaName
§§< G
,
§§G H
feature
§§I P
,
§§P Q 
geometryColumnName
§§R d
,
§§d e
idCols
§§f l
,
§§l m
setNull
§§n u
)
§§u v
;
§§v w
return
•• 
	_executor
•• 
.
•• 
ExecuteNonQuery
•• ,
(
••, -
query
••- 2
)
••2 3
;
••3 4
}
¶¶ 	
}
ææ 
public
øø 

enum
øø 
QueryStatement
øø 
{
¿¿ 
Select
¡¡ 
,
¡¡ 
Where
¬¬ 
,
¬¬ 
GroupBy
√√ 
,
√√ 
OrderBy
ƒƒ 
,
ƒƒ 
Skip
≈≈ 
,
≈≈ 
Take
∆∆ 
,
∆∆ 
}
«« 
public
   

	interface
   

IQueryItem
   
{
ÀÀ 
}
ÕÕ 
public
ŒŒ 

	interface
ŒŒ 

INamedItem
ŒŒ 
:
ŒŒ  !

IQueryItem
ŒŒ" ,
{
œœ 
string
–– 
Name
–– 
{
–– 
get
–– 
;
–– 
set
–– 
;
–– 
}
––  !
}
—— 
public
““ 

	interface
““ 
IQueryValue
““  
:
““! "

IQueryItem
““# -
{
”” 
NEXP
‘‘ 
this
‘‘ 
[
‘‘ 
string
‘‘ 
val
‘‘ 
]
‘‘ 
{
‘‘ 
get
‘‘  #
;
‘‘# $
}
‘‘% &
}
’’ 
public
÷÷ 

	interface
÷÷ 
IExpression
÷÷  
{
◊◊ 
}
ŸŸ 
public
⁄⁄ 

	interface
⁄⁄ 
IQueryOrderItem
⁄⁄ $
:
⁄⁄% &

IQueryItem
⁄⁄' 1
{
€€ 
IQueryValue
‹‹ 
Value
‹‹ 
{
‹‹ 
get
‹‹ 
;
‹‹  
set
‹‹! $
;
‹‹$ %
}
‹‹& '
QueryOrderType
›› 
Type
›› 
{
›› 
get
›› !
;
››! "
}
››# $
}
ﬁﬁ 
public
·· 

class
·· 
COL
·· 
:
·· 

IQueryItem
·· !
,
··! "
IQueryValue
··# .
,
··. /

INamedItem
··0 :
{
‚‚ 
public
„„ 
string
„„ 
Name
„„ 
{
„„ 
get
„„  
;
„„  !
set
„„" %
;
„„% &
}
„„' (
public
‰‰ 
object
‰‰ 
Value
‰‰ 
{
‰‰ 
get
‰‰ !
;
‰‰! "
set
‰‰# &
;
‰‰& '
}
‰‰( )
public
ÊÊ 
static
ÊÊ 
COL
ÊÊ 
ALL
ÊÊ 
{
ÊÊ 
get
ÊÊ  #
{
ÊÊ$ %
return
ÊÊ& ,
(
ÊÊ- .
COL
ÊÊ. 1
)
ÊÊ1 2
$str
ÊÊ2 5
;
ÊÊ5 6
}
ÊÊ7 8
}
ÊÊ9 :
public
ËË 
COL
ËË 
(
ËË 
string
ËË 
name
ËË 
)
ËË 
{
ÈÈ 	
Name
ÍÍ 
=
ÍÍ 
name
ÍÍ 
;
ÍÍ 
}
ÎÎ 	
public
ÏÏ 
COL
ÏÏ 
(
ÏÏ 
string
ÏÏ 
name
ÏÏ 
,
ÏÏ 
object
ÏÏ  &
val
ÏÏ' *
)
ÏÏ* +
{
ÌÌ 	
Name
ÓÓ 
=
ÓÓ 
name
ÓÓ 
;
ÓÓ 
Value
ÔÔ 
=
ÔÔ 
val
ÔÔ 
;
ÔÔ 
}
 	
public
ÚÚ 
static
ÚÚ 
implicit
ÚÚ 
operator
ÚÚ '
COL
ÚÚ( +
(
ÚÚ+ ,
string
ÚÚ, 2
name
ÚÚ3 7
)
ÚÚ7 8
{
ÛÛ 	
return
ÙÙ 
new
ÙÙ 
COL
ÙÙ 
(
ÙÙ 
name
ÙÙ 
)
ÙÙ  
;
ÙÙ  !
}
ıı 	
public
˜˜ 
static
˜˜ 
BEXP
˜˜ 
operator
˜˜ #
>
˜˜$ %
(
˜˜% &
COL
˜˜& )
op1
˜˜* -
,
˜˜- .
IQueryValue
˜˜/ :
op2
˜˜; >
)
˜˜> ?
{
¯¯ 	
return
˘˘ 
new
˘˘ 
BEXP
˘˘ 
{
˘˘ 
Operand1
˘˘ &
=
˘˘' (
op1
˘˘) ,
,
˘˘, -
Operand2
˘˘. 6
=
˘˘7 8
op2
˘˘9 <
,
˘˘< =
Operator
˘˘> F
=
˘˘G H
BinaryOperator
˘˘I W
.
˘˘W X
GreaterThan
˘˘X c
}
˘˘d e
;
˘˘e f
}
˙˙ 	
public
˚˚ 
static
˚˚ 
BEXP
˚˚ 
operator
˚˚ #
<
˚˚$ %
(
˚˚% &
COL
˚˚& )
op1
˚˚* -
,
˚˚- .
IQueryValue
˚˚/ :
op2
˚˚; >
)
˚˚> ?
{
¸¸ 	
return
˝˝ 
new
˝˝ 
BEXP
˝˝ 
{
˝˝ 
Operand1
˝˝ &
=
˝˝' (
op1
˝˝) ,
,
˝˝, -
Operand2
˝˝. 6
=
˝˝7 8
op2
˝˝9 <
,
˝˝< =
Operator
˝˝> F
=
˝˝G H
BinaryOperator
˝˝I W
.
˝˝W X
LessThan
˝˝X `
}
˝˝a b
;
˝˝b c
}
˛˛ 	
public
ˇˇ 
static
ˇˇ 
BEXP
ˇˇ 
operator
ˇˇ #
<=
ˇˇ$ &
(
ˇˇ& '
COL
ˇˇ' *
op1
ˇˇ+ .
,
ˇˇ. /
IQueryValue
ˇˇ0 ;
op2
ˇˇ< ?
)
ˇˇ? @
{
ÄÄ 	
return
ÅÅ 
new
ÅÅ 
BEXP
ÅÅ 
{
ÅÅ 
Operand1
ÅÅ &
=
ÅÅ' (
op1
ÅÅ) ,
,
ÅÅ, -
Operand2
ÅÅ. 6
=
ÅÅ7 8
op2
ÅÅ9 <
,
ÅÅ< =
Operator
ÅÅ> F
=
ÅÅG H
BinaryOperator
ÅÅI W
.
ÅÅW X
LessThanOrEqual
ÅÅX g
}
ÅÅh i
;
ÅÅi j
}
ÇÇ 	
public
ÉÉ 
static
ÉÉ 
BEXP
ÉÉ 
operator
ÉÉ #
>=
ÉÉ$ &
(
ÉÉ& '
COL
ÉÉ' *
op1
ÉÉ+ .
,
ÉÉ. /
IQueryValue
ÉÉ0 ;
op2
ÉÉ< ?
)
ÉÉ? @
{
ÑÑ 	
return
ÖÖ 
new
ÖÖ 
BEXP
ÖÖ 
{
ÖÖ 
Operand1
ÖÖ &
=
ÖÖ' (
op1
ÖÖ) ,
,
ÖÖ, -
Operand2
ÖÖ. 6
=
ÖÖ7 8
op2
ÖÖ9 <
,
ÖÖ< =
Operator
ÖÖ> F
=
ÖÖG H
BinaryOperator
ÖÖI W
.
ÖÖW X 
GreaterThanOrEqual
ÖÖX j
}
ÖÖk l
;
ÖÖl m
}
ÜÜ 	
public
áá 
static
áá 
BEXP
áá 
operator
áá #
==
áá$ &
(
áá& '
COL
áá' *
op1
áá+ .
,
áá. /
IQueryValue
áá0 ;
op2
áá< ?
)
áá? @
{
àà 	
return
ââ 
new
ââ 
BEXP
ââ 
{
ââ 
Operand1
ââ &
=
ââ' (
op1
ââ) ,
,
ââ, -
Operand2
ââ. 6
=
ââ7 8
op2
ââ9 <
,
ââ< =
Operator
ââ> F
=
ââG H
BinaryOperator
ââI W
.
ââW X
Equal
ââX ]
}
ââ^ _
;
ââ_ `
}
ää 	
public
ãã 
static
ãã 
BEXP
ãã 
operator
ãã #
!=
ãã$ &
(
ãã& '
COL
ãã' *
op1
ãã+ .
,
ãã. /
IQueryValue
ãã0 ;
op2
ãã< ?
)
ãã? @
{
åå 	
return
çç 
new
çç 
BEXP
çç 
{
çç 
Operand1
çç &
=
çç' (
op1
çç) ,
,
çç, -
Operand2
çç. 6
=
çç7 8
op2
çç9 <
,
çç< =
Operator
çç> F
=
ççG H
BinaryOperator
ççI W
.
ççW X
NotEqual
ççX `
}
çça b
;
ççb c
}
éé 	
public
êê 
static
êê 
BEXP
êê 
operator
êê #
>
êê$ %
(
êê% &
COL
êê& )
op1
êê* -
,
êê- .
VAL
êê/ 2
op2
êê3 6
)
êê6 7
{
ëë 	
return
íí 
new
íí 
BEXP
íí 
{
íí 
Operand1
íí &
=
íí' (
op1
íí) ,
,
íí, -
Operand2
íí. 6
=
íí7 8
op2
íí9 <
,
íí< =
Operator
íí> F
=
ííG H
BinaryOperator
ííI W
.
ííW X
GreaterThan
ííX c
}
ííd e
;
ííe f
}
ìì 	
public
îî 
static
îî 
BEXP
îî 
operator
îî #
<
îî$ %
(
îî% &
COL
îî& )
op1
îî* -
,
îî- .
VAL
îî/ 2
op2
îî3 6
)
îî6 7
{
ïï 	
return
ññ 
new
ññ 
BEXP
ññ 
{
ññ 
Operand1
ññ &
=
ññ' (
op1
ññ) ,
,
ññ, -
Operand2
ññ. 6
=
ññ7 8
op2
ññ9 <
,
ññ< =
Operator
ññ> F
=
ññG H
BinaryOperator
ññI W
.
ññW X
LessThan
ññX `
}
ñña b
;
ññb c
}
óó 	
public
òò 
static
òò 
BEXP
òò 
operator
òò #
<=
òò$ &
(
òò& '
COL
òò' *
op1
òò+ .
,
òò. /
VAL
òò0 3
op2
òò4 7
)
òò7 8
{
ôô 	
return
öö 
new
öö 
BEXP
öö 
{
öö 
Operand1
öö &
=
öö' (
op1
öö) ,
,
öö, -
Operand2
öö. 6
=
öö7 8
op2
öö9 <
,
öö< =
Operator
öö> F
=
ööG H
BinaryOperator
ööI W
.
ööW X
LessThanOrEqual
ööX g
}
ööh i
;
ööi j
}
õõ 	
public
úú 
static
úú 
BEXP
úú 
operator
úú #
>=
úú$ &
(
úú& '
COL
úú' *
op1
úú+ .
,
úú. /
VAL
úú0 3
op2
úú4 7
)
úú7 8
{
ùù 	
return
ûû 
new
ûû 
BEXP
ûû 
{
ûû 
Operand1
ûû &
=
ûû' (
op1
ûû) ,
,
ûû, -
Operand2
ûû. 6
=
ûû7 8
op2
ûû9 <
,
ûû< =
Operator
ûû> F
=
ûûG H
BinaryOperator
ûûI W
.
ûûW X 
GreaterThanOrEqual
ûûX j
}
ûûk l
;
ûûl m
}
üü 	
public
†† 
static
†† 
BEXP
†† 
operator
†† #
==
††$ &
(
††& '
COL
††' *
op1
††+ .
,
††. /
VAL
††0 3
op2
††4 7
)
††7 8
{
°° 	
return
¢¢ 
new
¢¢ 
BEXP
¢¢ 
{
¢¢ 
Operand1
¢¢ &
=
¢¢' (
op1
¢¢) ,
,
¢¢, -
Operand2
¢¢. 6
=
¢¢7 8
op2
¢¢9 <
,
¢¢< =
Operator
¢¢> F
=
¢¢G H
BinaryOperator
¢¢I W
.
¢¢W X
Equal
¢¢X ]
}
¢¢^ _
;
¢¢_ `
}
££ 	
public
§§ 
static
§§ 
BEXP
§§ 
operator
§§ #
!=
§§$ &
(
§§& '
COL
§§' *
op1
§§+ .
,
§§. /
VAL
§§0 3
op2
§§4 7
)
§§7 8
{
•• 	
return
¶¶ 
new
¶¶ 
BEXP
¶¶ 
{
¶¶ 
Operand1
¶¶ &
=
¶¶' (
op1
¶¶) ,
,
¶¶, -
Operand2
¶¶. 6
=
¶¶7 8
op2
¶¶9 <
,
¶¶< =
Operator
¶¶> F
=
¶¶G H
BinaryOperator
¶¶I W
.
¶¶W X
NotEqual
¶¶X `
}
¶¶a b
;
¶¶b c
}
ßß 	
public
´´ 
static
´´ 
TEXP
´´ 
operator
´´ #
+
´´$ %
(
´´% &
COL
´´& )
op1
´´* -
,
´´- .
IQueryValue
´´/ :
op2
´´; >
)
´´> ?
{
¨¨ 	
return
≠≠ 
new
≠≠ 
TEXP
≠≠ 
{
≠≠ 
Operand1
≠≠ &
=
≠≠' (
op1
≠≠) ,
,
≠≠, -
Operand2
≠≠. 6
=
≠≠7 8
op2
≠≠9 <
,
≠≠< =
Operator
≠≠> F
=
≠≠G H
TransformOperator
≠≠I Z
.
≠≠Z [
Add
≠≠[ ^
}
≠≠_ `
;
≠≠` a
}
ÆÆ 	
public
ØØ 
static
ØØ 
TEXP
ØØ 
operator
ØØ #
-
ØØ$ %
(
ØØ% &
COL
ØØ& )
op1
ØØ* -
,
ØØ- .
IQueryValue
ØØ/ :
op2
ØØ; >
)
ØØ> ?
{
∞∞ 	
return
±± 
new
±± 
TEXP
±± 
{
±± 
Operand1
±± &
=
±±' (
op1
±±) ,
,
±±, -
Operand2
±±. 6
=
±±7 8
op2
±±9 <
,
±±< =
Operator
±±> F
=
±±G H
TransformOperator
±±I Z
.
±±Z [
Subtract
±±[ c
}
±±d e
;
±±e f
}
≤≤ 	
public
≥≥ 
static
≥≥ 
TEXP
≥≥ 
operator
≥≥ #
*
≥≥$ %
(
≥≥% &
COL
≥≥& )
op1
≥≥* -
,
≥≥- .
IQueryValue
≥≥/ :
op2
≥≥; >
)
≥≥> ?
{
¥¥ 	
return
µµ 
new
µµ 
TEXP
µµ 
{
µµ 
Operand1
µµ &
=
µµ' (
op1
µµ) ,
,
µµ, -
Operand2
µµ. 6
=
µµ7 8
op2
µµ9 <
,
µµ< =
Operator
µµ> F
=
µµG H
TransformOperator
µµI Z
.
µµZ [
Multiply
µµ[ c
}
µµd e
;
µµe f
}
∂∂ 	
public
∑∑ 
static
∑∑ 
TEXP
∑∑ 
operator
∑∑ #
/
∑∑$ %
(
∑∑% &
COL
∑∑& )
op1
∑∑* -
,
∑∑- .
IQueryValue
∑∑/ :
op2
∑∑; >
)
∑∑> ?
{
∏∏ 	
return
ππ 
new
ππ 
TEXP
ππ 
{
ππ 
Operand1
ππ &
=
ππ' (
op1
ππ) ,
,
ππ, -
Operand2
ππ. 6
=
ππ7 8
op2
ππ9 <
,
ππ< =
Operator
ππ> F
=
ππG H
TransformOperator
ππI Z
.
ππZ [
Divide
ππ[ a
}
ππb c
;
ππc d
}
∫∫ 	
public
ªª 
static
ªª 
TEXP
ªª 
operator
ªª #
%
ªª$ %
(
ªª% &
COL
ªª& )
op1
ªª* -
,
ªª- .
IQueryValue
ªª/ :
op2
ªª; >
)
ªª> ?
{
ºº 	
return
ΩΩ 
new
ΩΩ 
TEXP
ΩΩ 
{
ΩΩ 
Operand1
ΩΩ &
=
ΩΩ' (
op1
ΩΩ) ,
,
ΩΩ, -
Operand2
ΩΩ. 6
=
ΩΩ7 8
op2
ΩΩ9 <
,
ΩΩ< =
Operator
ΩΩ> F
=
ΩΩG H
TransformOperator
ΩΩI Z
.
ΩΩZ [
Modulo
ΩΩ[ a
}
ΩΩb c
;
ΩΩc d
}
ææ 	
public
¡¡ 
NEXP
¡¡ 
this
¡¡ 
[
¡¡ 
string
¡¡ 
val
¡¡  #
]
¡¡# $
{
¬¬ 	
get
√√ 
{
√√ 
return
√√ 
new
√√ 
NEXP
√√ !
{
√√" #
Name
√√$ (
=
√√) *
val
√√+ .
,
√√. /

Expression
√√0 :
=
√√; <
this
√√= A
}
√√B C
;
√√C D
}
√√E F
}
ƒƒ 	
public
∆∆ 
override
∆∆ 
string
∆∆ 
ToString
∆∆ '
(
∆∆' (
)
∆∆( )
{
«« 	
return
»» 
Name
»» 
;
»» 
}
…… 	
public
ÀÀ 
override
ÀÀ 
bool
ÀÀ 
Equals
ÀÀ #
(
ÀÀ# $
object
ÀÀ$ *
obj
ÀÀ+ .
)
ÀÀ. /
{
ÃÃ 	
return
ÕÕ 
base
ÕÕ 
.
ÕÕ 
Equals
ÕÕ 
(
ÕÕ 
obj
ÕÕ "
)
ÕÕ" #
;
ÕÕ# $
}
ŒŒ 	
public
–– 
override
–– 
int
–– 
GetHashCode
–– '
(
––' (
)
––( )
{
—— 	
return
““ 
base
““ 
.
““ 
GetHashCode
““ #
(
““# $
)
““$ %
;
““% &
}
”” 	
}
‘‘ 
public
’’ 

class
’’ 
VAL
’’ 
:
’’ 

IQueryItem
’’ !
,
’’! "
IQueryValue
’’# .
{
÷÷ 
private
◊◊ 
object
◊◊ 
_value
◊◊ 
;
◊◊ 
public
ŸŸ 
object
ŸŸ 
Value
ŸŸ 
{
⁄⁄ 	
get
€€ 
{
€€ 
return
€€ 
_value
€€ 
??
€€  "
DBNull
€€# )
.
€€) *
Value
€€* /
;
€€/ 0
}
€€1 2
set
‹‹ 
{
‹‹ 
_value
‹‹ 
=
‹‹ 
value
‹‹  
;
‹‹  !
}
‹‹" #
}
›› 	
public
ﬂﬂ 
VAL
ﬂﬂ 
(
ﬂﬂ 
)
ﬂﬂ 
{
‡‡ 	
}
‚‚ 	
public
„„ 
VAL
„„ 
(
„„ 
object
„„ 
value
„„ 
)
„„  
{
‰‰ 	
_value
ÂÂ 
=
ÂÂ 
value
ÂÂ 
;
ÂÂ 
}
ÊÊ 	
public
ËË 
static
ËË 
explicit
ËË 
operator
ËË '
VAL
ËË( +
(
ËË+ ,
string
ËË, 2
value
ËË3 8
)
ËË8 9
{
ÈÈ 	
return
ÍÍ 
new
ÍÍ 
VAL
ÍÍ 
(
ÍÍ 
value
ÍÍ  
)
ÍÍ  !
;
ÍÍ! "
}
ÎÎ 	
public
ÏÏ 
static
ÏÏ 
implicit
ÏÏ 
operator
ÏÏ '
VAL
ÏÏ( +
(
ÏÏ+ ,
int
ÏÏ, /
value
ÏÏ0 5
)
ÏÏ5 6
{
ÌÌ 	
return
ÓÓ 
new
ÓÓ 
VAL
ÓÓ 
(
ÓÓ 
value
ÓÓ  
)
ÓÓ  !
;
ÓÓ! "
}
ÔÔ 	
public
 
static
 
implicit
 
operator
 '
VAL
( +
(
+ ,
float
, 1
value
2 7
)
7 8
{
ÒÒ 	
return
ÚÚ 
new
ÚÚ 
VAL
ÚÚ 
(
ÚÚ 
value
ÚÚ  
)
ÚÚ  !
;
ÚÚ! "
}
ÛÛ 	
public
ÙÙ 
static
ÙÙ 
implicit
ÙÙ 
operator
ÙÙ '
VAL
ÙÙ( +
(
ÙÙ+ ,
double
ÙÙ, 2
value
ÙÙ3 8
)
ÙÙ8 9
{
ıı 	
return
ˆˆ 
new
ˆˆ 
VAL
ˆˆ 
(
ˆˆ 
value
ˆˆ  
)
ˆˆ  !
;
ˆˆ! "
}
˜˜ 	
public
¯¯ 
static
¯¯ 
implicit
¯¯ 
operator
¯¯ '
VAL
¯¯( +
(
¯¯+ ,
bool
¯¯, 0
value
¯¯1 6
)
¯¯6 7
{
˘˘ 	
return
˙˙ 
new
˙˙ 
VAL
˙˙ 
(
˙˙ 
value
˙˙  
)
˙˙  !
;
˙˙! "
}
˚˚ 	
public
¸¸ 
static
¸¸ 
implicit
¸¸ 
operator
¸¸ '
VAL
¸¸( +
(
¸¸+ ,
decimal
¸¸, 3
value
¸¸4 9
)
¸¸9 :
{
˝˝ 	
return
˛˛ 
new
˛˛ 
VAL
˛˛ 
(
˛˛ 
value
˛˛  
)
˛˛  !
;
˛˛! "
}
ˇˇ 	
public
ÄÄ 
static
ÄÄ 
implicit
ÄÄ 
operator
ÄÄ '
VAL
ÄÄ( +
(
ÄÄ+ ,
char
ÄÄ, 0
value
ÄÄ1 6
)
ÄÄ6 7
{
ÅÅ 	
return
ÇÇ 
new
ÇÇ 
VAL
ÇÇ 
(
ÇÇ 
value
ÇÇ  
)
ÇÇ  !
;
ÇÇ! "
}
ÉÉ 	
public
ÑÑ 
static
ÑÑ 
implicit
ÑÑ 
operator
ÑÑ '
VAL
ÑÑ( +
(
ÑÑ+ ,
Guid
ÑÑ, 0
value
ÑÑ1 6
)
ÑÑ6 7
{
ÖÖ 	
return
ÜÜ 
new
ÜÜ 
VAL
ÜÜ 
(
ÜÜ 
value
ÜÜ  
)
ÜÜ  !
;
ÜÜ! "
}
áá 	
public
àà 
static
àà 
implicit
àà 
operator
àà '
VAL
àà( +
(
àà+ ,
DateTime
àà, 4
value
àà5 :
)
àà: ;
{
ââ 	
return
ää 
new
ää 
VAL
ää 
(
ää 
value
ää  
)
ää  !
;
ää! "
}
ãã 	
public
çç 
static
çç 
BEXP
çç 
operator
çç #
>
çç$ %
(
çç% &
VAL
çç& )
op1
çç* -
,
çç- .
IQueryValue
çç/ :
op2
çç; >
)
çç> ?
{
éé 	
return
èè 
new
èè 
BEXP
èè 
{
èè 
Operand1
èè &
=
èè' (
op1
èè) ,
,
èè, -
Operand2
èè. 6
=
èè7 8
op2
èè9 <
,
èè< =
Operator
èè> F
=
èèG H
BinaryOperator
èèI W
.
èèW X
GreaterThan
èèX c
}
èèd e
;
èèe f
}
êê 	
public
ëë 
static
ëë 
BEXP
ëë 
operator
ëë #
<
ëë$ %
(
ëë% &
VAL
ëë& )
op1
ëë* -
,
ëë- .
IQueryValue
ëë/ :
op2
ëë; >
)
ëë> ?
{
íí 	
return
ìì 
new
ìì 
BEXP
ìì 
{
ìì 
Operand1
ìì &
=
ìì' (
op1
ìì) ,
,
ìì, -
Operand2
ìì. 6
=
ìì7 8
op2
ìì9 <
,
ìì< =
Operator
ìì> F
=
ììG H
BinaryOperator
ììI W
.
ììW X
LessThan
ììX `
}
ììa b
;
ììb c
}
îî 	
public
ïï 
static
ïï 
BEXP
ïï 
operator
ïï #
<=
ïï$ &
(
ïï& '
VAL
ïï' *
op1
ïï+ .
,
ïï. /
IQueryValue
ïï0 ;
op2
ïï< ?
)
ïï? @
{
ññ 	
return
óó 
new
óó 
BEXP
óó 
{
óó 
Operand1
óó &
=
óó' (
op1
óó) ,
,
óó, -
Operand2
óó. 6
=
óó7 8
op2
óó9 <
,
óó< =
Operator
óó> F
=
óóG H
BinaryOperator
óóI W
.
óóW X
LessThanOrEqual
óóX g
}
óóh i
;
óói j
}
òò 	
public
ôô 
static
ôô 
BEXP
ôô 
operator
ôô #
>=
ôô$ &
(
ôô& '
VAL
ôô' *
op1
ôô+ .
,
ôô. /
IQueryValue
ôô0 ;
op2
ôô< ?
)
ôô? @
{
öö 	
return
õõ 
new
õõ 
BEXP
õõ 
{
õõ 
Operand1
õõ &
=
õõ' (
op1
õõ) ,
,
õõ, -
Operand2
õõ. 6
=
õõ7 8
op2
õõ9 <
,
õõ< =
Operator
õõ> F
=
õõG H
BinaryOperator
õõI W
.
õõW X 
GreaterThanOrEqual
õõX j
}
õõk l
;
õõl m
}
úú 	
public
ùù 
static
ùù 
BEXP
ùù 
operator
ùù #
==
ùù$ &
(
ùù& '
VAL
ùù' *
op1
ùù+ .
,
ùù. /
IQueryValue
ùù0 ;
op2
ùù< ?
)
ùù? @
{
ûû 	
return
üü 
new
üü 
BEXP
üü 
{
üü 
Operand1
üü &
=
üü' (
op1
üü) ,
,
üü, -
Operand2
üü. 6
=
üü7 8
op2
üü9 <
,
üü< =
Operator
üü> F
=
üüG H
BinaryOperator
üüI W
.
üüW X
Equal
üüX ]
}
üü^ _
;
üü_ `
}
†† 	
public
°° 
static
°° 
BEXP
°° 
operator
°° #
!=
°°$ &
(
°°& '
VAL
°°' *
op1
°°+ .
,
°°. /
IQueryValue
°°0 ;
op2
°°< ?
)
°°? @
{
¢¢ 	
return
££ 
new
££ 
BEXP
££ 
{
££ 
Operand1
££ &
=
££' (
op1
££) ,
,
££, -
Operand2
££. 6
=
££7 8
op2
££9 <
,
££< =
Operator
££> F
=
££G H
BinaryOperator
££I W
.
££W X
NotEqual
££X `
}
££a b
;
££b c
}
§§ 	
public
ßß 
static
ßß 
FEXP
ßß 
PI
ßß 
(
ßß 
)
ßß 
{
®® 	
return
©© 
new
©© 
FEXP
©© 
{
©© 
Function
©© &
=
©©' (
QueryFunctions
©©) 7
.
©©7 8
PI
©©8 :
}
©©; <
;
©©< =
}
™™ 	
public
´´ 
static
´´ 
FEXP
´´ 
RAND
´´ 
(
´´  
)
´´  !
{
¨¨ 	
return
≠≠ 
new
≠≠ 
FEXP
≠≠ 
{
≠≠ 
Function
≠≠ &
=
≠≠' (
QueryFunctions
≠≠) 7
.
≠≠7 8
Rand
≠≠8 <
}
≠≠= >
;
≠≠> ?
}
ÆÆ 	
public
ØØ 
static
ØØ 
FEXP
ØØ 
GETDATE
ØØ "
(
ØØ" #
)
ØØ# $
{
∞∞ 	
return
±± 
new
±± 
FEXP
±± 
{
±± 
Function
±± &
=
±±' (
QueryFunctions
±±) 7
.
±±7 8
GetDate
±±8 ?
}
±±@ A
;
±±A B
}
≤≤ 	
public
µµ 
NEXP
µµ 
this
µµ 
[
µµ 
string
µµ 
val
µµ  #
]
µµ# $
{
∂∂ 	
get
∑∑ 
{
∑∑ 
return
∑∑ 
new
∑∑ 
NEXP
∑∑ !
{
∑∑" #
Name
∑∑$ (
=
∑∑) *
val
∑∑+ .
,
∑∑. /

Expression
∑∑0 :
=
∑∑; <
this
∑∑= A
}
∑∑B C
;
∑∑C D
}
∑∑E F
}
∏∏ 	
public
∫∫ 
override
∫∫ 
string
∫∫ 
ToString
∫∫ '
(
∫∫' (
)
∫∫( )
{
ªª 	
return
ºº 
Value
ºº 
.
ºº 
ToString
ºº !
(
ºº! "
)
ºº" #
;
ºº# $
}
ΩΩ 	
public
øø 
override
øø 
bool
øø 
Equals
øø #
(
øø# $
object
øø$ *
obj
øø+ .
)
øø. /
{
¿¿ 	
return
¡¡ 
base
¡¡ 
.
¡¡ 
Equals
¡¡ 
(
¡¡ 
obj
¡¡ "
)
¡¡" #
;
¡¡# $
}
¬¬ 	
public
ƒƒ 
override
ƒƒ 
int
ƒƒ 
GetHashCode
ƒƒ '
(
ƒƒ' (
)
ƒƒ( )
{
≈≈ 	
return
∆∆ 
base
∆∆ 
.
∆∆ 
GetHashCode
∆∆ #
(
∆∆# $
)
∆∆$ %
;
∆∆% &
}
«« 	
}
»» 
public
…… 

class
…… 
ARR
…… 
:
…… 

IQueryItem
…… !
{
   
public
ÀÀ 
IQueryValue
ÀÀ 
[
ÀÀ 
]
ÀÀ 
Values
ÀÀ #
{
ÀÀ$ %
get
ÀÀ& )
;
ÀÀ) *
set
ÀÀ+ .
;
ÀÀ. /
}
ÀÀ0 1
}
ÕÕ 
[
ŒŒ 
Serializable
ŒŒ 
]
ŒŒ 
public
œœ 

class
œœ 
BEXP
œœ 
:
œœ 

IQueryItem
œœ "
,
œœ" #
IExpression
œœ$ /
{
–– 
public
—— 

IQueryItem
—— 
Operand1
—— "
{
——# $
get
——% (
;
——( )
set
——* -
;
——- .
}
——/ 0
public
”” 

IQueryItem
”” 
Operand2
”” "
{
””# $
get
””% (
;
””( )
set
””* -
;
””- .
}
””/ 0
public
’’ 
BinaryOperator
’’ 
Operator
’’ &
{
’’' (
get
’’) ,
;
’’, -
set
’’. 1
;
’’1 2
}
’’3 4
public
◊◊ 
static
◊◊ 
BEXP
◊◊ 
operator
◊◊ #
&
◊◊$ %
(
◊◊% &
BEXP
◊◊& *
op1
◊◊+ .
,
◊◊. /
BEXP
◊◊0 4
op2
◊◊5 8
)
◊◊8 9
{
ÿÿ 	
if
ŸŸ 
(
ŸŸ 
op1
ŸŸ 
!=
ŸŸ 
null
ŸŸ 
&&
ŸŸ 
op2
ŸŸ "
!=
ŸŸ# %
null
ŸŸ& *
)
ŸŸ* +
return
ŸŸ, 2
new
ŸŸ3 6
BEXP
ŸŸ7 ;
{
ŸŸ< =
Operand1
ŸŸ> F
=
ŸŸG H
op1
ŸŸI L
,
ŸŸL M
Operand2
ŸŸN V
=
ŸŸW X
op2
ŸŸY \
,
ŸŸ\ ]
Operator
ŸŸ^ f
=
ŸŸg h
BinaryOperator
ŸŸi w
.
ŸŸw x
And
ŸŸx {
}
ŸŸ| }
;
ŸŸ} ~
if
⁄⁄ 
(
⁄⁄ 
op1
⁄⁄ 
!=
⁄⁄ 
null
⁄⁄ 
)
⁄⁄ 
return
⁄⁄ #
op1
⁄⁄$ '
;
⁄⁄' (
if
€€ 
(
€€ 
op2
€€ 
!=
€€ 
null
€€ 
)
€€ 
return
€€ #
op2
€€$ '
;
€€' (
return
‹‹ 
null
‹‹ 
;
‹‹ 
}
›› 	
public
ﬁﬁ 
static
ﬁﬁ 
BEXP
ﬁﬁ 
operator
ﬁﬁ #
|
ﬁﬁ$ %
(
ﬁﬁ% &
BEXP
ﬁﬁ& *
op1
ﬁﬁ+ .
,
ﬁﬁ. /
BEXP
ﬁﬁ0 4
op2
ﬁﬁ5 8
)
ﬁﬁ8 9
{
ﬂﬂ 	
if
‡‡ 
(
‡‡ 
op1
‡‡ 
!=
‡‡ 
null
‡‡ 
&&
‡‡ 
op2
‡‡ "
!=
‡‡# %
null
‡‡& *
)
‡‡* +
return
‡‡, 2
new
‡‡3 6
BEXP
‡‡7 ;
{
‡‡< =
Operand1
‡‡> F
=
‡‡G H
op1
‡‡I L
,
‡‡L M
Operand2
‡‡N V
=
‡‡W X
op2
‡‡Y \
,
‡‡\ ]
Operator
‡‡^ f
=
‡‡g h
BinaryOperator
‡‡i w
.
‡‡w x
Or
‡‡x z
}
‡‡{ |
;
‡‡| }
if
·· 
(
·· 
op1
·· 
!=
·· 
null
·· 
)
·· 
return
·· #
op1
··$ '
;
··' (
if
‚‚ 
(
‚‚ 
op2
‚‚ 
!=
‚‚ 
null
‚‚ 
)
‚‚ 
return
‚‚ #
op2
‚‚$ '
;
‚‚' (
return
„„ 
null
„„ 
;
„„ 
}
‰‰ 	
public
ÂÂ 
static
ÂÂ 
BEXP
ÂÂ 
operator
ÂÂ #
!
ÂÂ$ %
(
ÂÂ% &
BEXP
ÂÂ& *
op1
ÂÂ+ .
)
ÂÂ. /
{
ÊÊ 	
return
ÁÁ 
new
ÁÁ 
BEXP
ÁÁ 
{
ÁÁ 
Operand1
ÁÁ &
=
ÁÁ' (
op1
ÁÁ) ,
,
ÁÁ, -
Operator
ÁÁ. 6
=
ÁÁ7 8
BinaryOperator
ÁÁ9 G
.
ÁÁG H
Not
ÁÁH K
}
ÁÁL M
;
ÁÁM N
}
ËË 	
public
ÍÍ 
override
ÍÍ 
string
ÍÍ 
ToString
ÍÍ '
(
ÍÍ' (
)
ÍÍ( )
{
ÎÎ 	
switch
ÏÏ 
(
ÏÏ 
Operator
ÏÏ 
)
ÏÏ 
{
ÌÌ 
case
ÓÓ 
BinaryOperator
ÓÓ #
.
ÓÓ# $
And
ÓÓ$ '
:
ÓÓ' (
return
ÓÓ) /
string
ÓÓ0 6
.
ÓÓ6 7
Format
ÓÓ7 =
(
ÓÓ= >
$str
ÓÓ> K
,
ÓÓK L
Operand1
ÓÓM U
,
ÓÓU V
Operand2
ÓÓW _
)
ÓÓ_ `
;
ÓÓ` a
case
ÔÔ 
BinaryOperator
ÔÔ #
.
ÔÔ# $
Or
ÔÔ$ &
:
ÔÔ& '
return
ÔÔ( .
string
ÔÔ/ 5
.
ÔÔ5 6
Format
ÔÔ6 <
(
ÔÔ< =
$str
ÔÔ= I
,
ÔÔI J
Operand1
ÔÔK S
,
ÔÔS T
Operand2
ÔÔU ]
)
ÔÔ] ^
;
ÔÔ^ _
case
 
BinaryOperator
 #
.
# $
Not
$ '
:
' (
return
) /
string
0 6
.
6 7
Format
7 =
(
= >
$str
> G
,
G H
Operand1
I Q
)
Q R
;
R S
case
ÒÒ 
BinaryOperator
ÒÒ #
.
ÒÒ# $
Equal
ÒÒ$ )
:
ÒÒ) *
return
ÒÒ+ 1
string
ÒÒ2 8
.
ÒÒ8 9
Format
ÒÒ9 ?
(
ÒÒ? @
$str
ÒÒ@ K
,
ÒÒK L
Operand1
ÒÒM U
,
ÒÒU V
Operand2
ÒÒW _
)
ÒÒ_ `
;
ÒÒ` a
case
ÚÚ 
BinaryOperator
ÚÚ #
.
ÚÚ# $
GreaterThan
ÚÚ$ /
:
ÚÚ/ 0
return
ÚÚ1 7
string
ÚÚ8 >
.
ÚÚ> ?
Format
ÚÚ? E
(
ÚÚE F
$str
ÚÚF Q
,
ÚÚQ R
Operand1
ÚÚS [
,
ÚÚ[ \
Operand2
ÚÚ] e
)
ÚÚe f
;
ÚÚf g
case
ÛÛ 
BinaryOperator
ÛÛ #
.
ÛÛ# $ 
GreaterThanOrEqual
ÛÛ$ 6
:
ÛÛ6 7
return
ÛÛ8 >
string
ÛÛ? E
.
ÛÛE F
Format
ÛÛF L
(
ÛÛL M
$str
ÛÛM Y
,
ÛÛY Z
Operand1
ÛÛ[ c
,
ÛÛc d
Operand2
ÛÛe m
)
ÛÛm n
;
ÛÛn o
case
ÙÙ 
BinaryOperator
ÙÙ #
.
ÙÙ# $
LessThan
ÙÙ$ ,
:
ÙÙ, -
return
ÙÙ. 4
string
ÙÙ5 ;
.
ÙÙ; <
Format
ÙÙ< B
(
ÙÙB C
$str
ÙÙC N
,
ÙÙN O
Operand1
ÙÙP X
,
ÙÙX Y
Operand2
ÙÙZ b
)
ÙÙb c
;
ÙÙc d
case
ıı 
BinaryOperator
ıı #
.
ıı# $
LessThanOrEqual
ıı$ 3
:
ıı3 4
return
ıı5 ;
string
ıı< B
.
ııB C
Format
ııC I
(
ııI J
$str
ııJ V
,
ııV W
Operand1
ııX `
,
ıı` a
Operand2
ııb j
)
ııj k
;
ıık l
case
ˆˆ 
BinaryOperator
ˆˆ #
.
ˆˆ# $
NotEqual
ˆˆ$ ,
:
ˆˆ, -
return
ˆˆ. 4
string
ˆˆ5 ;
.
ˆˆ; <
Format
ˆˆ< B
(
ˆˆB C
$str
ˆˆC O
,
ˆˆO P
Operand1
ˆˆQ Y
,
ˆˆY Z
Operand2
ˆˆ[ c
)
ˆˆc d
;
ˆˆd e
case
˜˜ 
BinaryOperator
˜˜ #
.
˜˜# $
Like
˜˜$ (
:
˜˜( )
return
˜˜* 0
string
˜˜1 7
.
˜˜7 8
Format
˜˜8 >
(
˜˜> ?
$str
˜˜? M
,
˜˜M N
Operand1
˜˜O W
,
˜˜W X
Operand2
˜˜Y a
)
˜˜a b
;
˜˜b c
case
¯¯ 
BinaryOperator
¯¯ #
.
¯¯# $
NotLike
¯¯$ +
:
¯¯+ ,
return
¯¯- 3
string
¯¯4 :
.
¯¯: ;
Format
¯¯; A
(
¯¯A B
$str
¯¯B T
,
¯¯T U
Operand1
¯¯V ^
,
¯¯^ _
Operand2
¯¯` h
)
¯¯h i
;
¯¯i j
case
˘˘ 
BinaryOperator
˘˘ #
.
˘˘# $
In
˘˘$ &
:
˘˘& '
return
˘˘( .
string
˘˘/ 5
.
˘˘5 6
Format
˘˘6 <
(
˘˘< =
$str
˘˘= I
,
˘˘I J
Operand1
˘˘K S
,
˘˘S T
Operand2
˘˘U ]
)
˘˘] ^
;
˘˘^ _
default
˙˙ 
:
˙˙ 
break
˚˚ 
;
˚˚ 
}
¸¸ 
return
˝˝ 
$str
˝˝ 
;
˝˝ 
}
˛˛ 	
public
ÅÅ 
object
ÅÅ  
GetSerializeObject
ÅÅ (
(
ÅÅ( )
)
ÅÅ) *
{
ÇÇ 	
return
ÉÉ 
new
ÉÉ 
{
ÑÑ 
Operator
ÖÖ 
=
ÖÖ 
Operator
ÖÖ #
.
ÖÖ# $
ToString
ÖÖ$ ,
(
ÖÖ, -
)
ÖÖ- .
,
ÖÖ. /
Operand1
ÜÜ 
=
ÜÜ 
(
ÜÜ 
Operand1
ÜÜ $
is
ÜÜ% '
BEXP
ÜÜ( ,
?
ÜÜ- .
(
ÜÜ/ 0
(
ÜÜ0 1
BEXP
ÜÜ1 5
)
ÜÜ5 6
Operand1
ÜÜ6 >
)
ÜÜ> ?
.
ÜÜ? @ 
GetSerializeObject
ÜÜ@ R
(
ÜÜR S
)
ÜÜS T
:
ÜÜU V
(
ÜÜW X
(
ÜÜX Y
COL
ÜÜY \
)
ÜÜ\ ]
Operand1
ÜÜ] e
)
ÜÜe f
.
ÜÜf g
Name
ÜÜg k
)
ÜÜk l
,
ÜÜl m
Operand2
áá 
=
áá 
(
áá 
Operand2
áá $
is
áá% '
BEXP
áá( ,
?
áá- .
(
áá/ 0
(
áá0 1
BEXP
áá1 5
)
áá5 6
Operand2
áá6 >
)
áá> ?
.
áá? @ 
GetSerializeObject
áá@ R
(
ááR S
)
ááS T
:
ááU V
(
ááW X
(
ááX Y
VAL
ááY \
)
áá\ ]
Operand2
áá] e
)
ááe f
.
ááf g
Value
áág l
)
áál m
}
àà 
;
àà 
}
ââ 	
}
åå 
public
çç 

class
çç 
TEXP
çç 
:
çç 

IQueryItem
çç "
,
çç" #
IQueryValue
çç$ /
,
çç/ 0
IExpression
çç1 <
{
éé 
public
èè 

IQueryItem
èè 
Operand1
èè "
{
èè# $
get
èè% (
;
èè( )
set
èè* -
;
èè- .
}
èè/ 0
public
êê 

IQueryItem
êê 
Operand2
êê "
{
êê# $
get
êê% (
;
êê( )
set
êê* -
;
êê- .
}
êê/ 0
public
ëë 
TransformOperator
ëë  
Operator
ëë! )
{
ëë* +
get
ëë, /
;
ëë/ 0
set
ëë1 4
;
ëë4 5
}
ëë6 7
public
ìì 
static
ìì 
BEXP
ìì 
operator
ìì #
>
ìì$ %
(
ìì% &
TEXP
ìì& *
op1
ìì+ .
,
ìì. /
IQueryValue
ìì0 ;
op2
ìì< ?
)
ìì? @
{
îî 	
return
ïï 
new
ïï 
BEXP
ïï 
{
ïï 
Operand1
ïï &
=
ïï' (
op1
ïï) ,
,
ïï, -
Operand2
ïï. 6
=
ïï7 8
op2
ïï9 <
,
ïï< =
Operator
ïï> F
=
ïïG H
BinaryOperator
ïïI W
.
ïïW X
GreaterThan
ïïX c
}
ïïd e
;
ïïe f
}
ññ 	
public
óó 
static
óó 
BEXP
óó 
operator
óó #
<
óó$ %
(
óó% &
TEXP
óó& *
op1
óó+ .
,
óó. /
IQueryValue
óó0 ;
op2
óó< ?
)
óó? @
{
òò 	
return
ôô 
new
ôô 
BEXP
ôô 
{
ôô 
Operand1
ôô &
=
ôô' (
op1
ôô) ,
,
ôô, -
Operand2
ôô. 6
=
ôô7 8
op2
ôô9 <
,
ôô< =
Operator
ôô> F
=
ôôG H
BinaryOperator
ôôI W
.
ôôW X
LessThan
ôôX `
}
ôôa b
;
ôôb c
}
öö 	
public
õõ 
static
õõ 
BEXP
õõ 
operator
õõ #
<=
õõ$ &
(
õõ& '
TEXP
õõ' +
op1
õõ, /
,
õõ/ 0
IQueryValue
õõ1 <
op2
õõ= @
)
õõ@ A
{
úú 	
return
ùù 
new
ùù 
BEXP
ùù 
{
ùù 
Operand1
ùù &
=
ùù' (
op1
ùù) ,
,
ùù, -
Operand2
ùù. 6
=
ùù7 8
op2
ùù9 <
,
ùù< =
Operator
ùù> F
=
ùùG H
BinaryOperator
ùùI W
.
ùùW X
LessThanOrEqual
ùùX g
}
ùùh i
;
ùùi j
}
ûû 	
public
üü 
static
üü 
BEXP
üü 
operator
üü #
>=
üü$ &
(
üü& '
TEXP
üü' +
op1
üü, /
,
üü/ 0
IQueryValue
üü1 <
op2
üü= @
)
üü@ A
{
†† 	
return
°° 
new
°° 
BEXP
°° 
{
°° 
Operand1
°° &
=
°°' (
op1
°°) ,
,
°°, -
Operand2
°°. 6
=
°°7 8
op2
°°9 <
,
°°< =
Operator
°°> F
=
°°G H
BinaryOperator
°°I W
.
°°W X 
GreaterThanOrEqual
°°X j
}
°°k l
;
°°l m
}
¢¢ 	
public
££ 
static
££ 
BEXP
££ 
operator
££ #
==
££$ &
(
££& '
TEXP
££' +
op1
££, /
,
££/ 0
IQueryValue
££1 <
op2
££= @
)
££@ A
{
§§ 	
return
•• 
new
•• 
BEXP
•• 
{
•• 
Operand1
•• &
=
••' (
op1
••) ,
,
••, -
Operand2
••. 6
=
••7 8
op2
••9 <
,
••< =
Operator
••> F
=
••G H
BinaryOperator
••I W
.
••W X
Equal
••X ]
}
••^ _
;
••_ `
}
¶¶ 	
public
ßß 
static
ßß 
BEXP
ßß 
operator
ßß #
!=
ßß$ &
(
ßß& '
TEXP
ßß' +
op1
ßß, /
,
ßß/ 0
IQueryValue
ßß1 <
op2
ßß= @
)
ßß@ A
{
®® 	
return
©© 
new
©© 
BEXP
©© 
{
©© 
Operand1
©© &
=
©©' (
op1
©©) ,
,
©©, -
Operand2
©©. 6
=
©©7 8
op2
©©9 <
,
©©< =
Operator
©©> F
=
©©G H
BinaryOperator
©©I W
.
©©W X
NotEqual
©©X `
}
©©a b
;
©©b c
}
™™ 	
public
≠≠ 
static
≠≠ 
TEXP
≠≠ 
operator
≠≠ #
+
≠≠$ %
(
≠≠% &
TEXP
≠≠& *
op1
≠≠+ .
,
≠≠. /
IQueryValue
≠≠0 ;
op2
≠≠< ?
)
≠≠? @
{
ÆÆ 	
return
ØØ 
new
ØØ 
TEXP
ØØ 
{
ØØ 
Operand1
ØØ &
=
ØØ' (
op1
ØØ) ,
,
ØØ, -
Operand2
ØØ. 6
=
ØØ7 8
op2
ØØ9 <
,
ØØ< =
Operator
ØØ> F
=
ØØG H
TransformOperator
ØØI Z
.
ØØZ [
Add
ØØ[ ^
}
ØØ_ `
;
ØØ` a
}
∞∞ 	
public
±± 
static
±± 
TEXP
±± 
operator
±± #
-
±±$ %
(
±±% &
TEXP
±±& *
op1
±±+ .
,
±±. /
IQueryValue
±±0 ;
op2
±±< ?
)
±±? @
{
≤≤ 	
return
≥≥ 
new
≥≥ 
TEXP
≥≥ 
{
≥≥ 
Operand1
≥≥ &
=
≥≥' (
op1
≥≥) ,
,
≥≥, -
Operand2
≥≥. 6
=
≥≥7 8
op2
≥≥9 <
,
≥≥< =
Operator
≥≥> F
=
≥≥G H
TransformOperator
≥≥I Z
.
≥≥Z [
Subtract
≥≥[ c
}
≥≥d e
;
≥≥e f
}
¥¥ 	
public
µµ 
static
µµ 
TEXP
µµ 
operator
µµ #
*
µµ$ %
(
µµ% &
TEXP
µµ& *
op1
µµ+ .
,
µµ. /
IQueryValue
µµ0 ;
op2
µµ< ?
)
µµ? @
{
∂∂ 	
return
∑∑ 
new
∑∑ 
TEXP
∑∑ 
{
∑∑ 
Operand1
∑∑ &
=
∑∑' (
op1
∑∑) ,
,
∑∑, -
Operand2
∑∑. 6
=
∑∑7 8
op2
∑∑9 <
,
∑∑< =
Operator
∑∑> F
=
∑∑G H
TransformOperator
∑∑I Z
.
∑∑Z [
Multiply
∑∑[ c
}
∑∑d e
;
∑∑e f
}
∏∏ 	
public
ππ 
static
ππ 
TEXP
ππ 
operator
ππ #
/
ππ$ %
(
ππ% &
TEXP
ππ& *
op1
ππ+ .
,
ππ. /
IQueryValue
ππ0 ;
op2
ππ< ?
)
ππ? @
{
∫∫ 	
return
ªª 
new
ªª 
TEXP
ªª 
{
ªª 
Operand1
ªª &
=
ªª' (
op1
ªª) ,
,
ªª, -
Operand2
ªª. 6
=
ªª7 8
op2
ªª9 <
,
ªª< =
Operator
ªª> F
=
ªªG H
TransformOperator
ªªI Z
.
ªªZ [
Divide
ªª[ a
}
ªªb c
;
ªªc d
}
ºº 	
public
ΩΩ 
static
ΩΩ 
TEXP
ΩΩ 
operator
ΩΩ #
%
ΩΩ$ %
(
ΩΩ% &
TEXP
ΩΩ& *
op1
ΩΩ+ .
,
ΩΩ. /
IQueryValue
ΩΩ0 ;
op2
ΩΩ< ?
)
ΩΩ? @
{
ææ 	
return
øø 
new
øø 
TEXP
øø 
{
øø 
Operand1
øø &
=
øø' (
op1
øø) ,
,
øø, -
Operand2
øø. 6
=
øø7 8
op2
øø9 <
,
øø< =
Operator
øø> F
=
øøG H
TransformOperator
øøI Z
.
øøZ [
Modulo
øø[ a
}
øøb c
;
øøc d
}
¿¿ 	
public
√√ 
NEXP
√√ 
this
√√ 
[
√√ 
string
√√ 
val
√√  #
]
√√# $
{
ƒƒ 	
get
≈≈ 
{
≈≈ 
return
≈≈ 
new
≈≈ 
NEXP
≈≈ !
{
≈≈" #
Name
≈≈$ (
=
≈≈) *
val
≈≈+ .
,
≈≈. /

Expression
≈≈0 :
=
≈≈; <
this
≈≈= A
}
≈≈B C
;
≈≈C D
}
≈≈E F
}
∆∆ 	
public
»» 
override
»» 
string
»» 
ToString
»» '
(
»»' (
)
»»( )
{
…… 	
switch
   
(
   
Operator
   
)
   
{
ÀÀ 
case
ÃÃ 
TransformOperator
ÃÃ &
.
ÃÃ& '
Add
ÃÃ' *
:
ÃÃ* +
return
ÃÃ, 2
string
ÃÃ3 9
.
ÃÃ9 :
Format
ÃÃ: @
(
ÃÃ@ A
$str
ÃÃA L
,
ÃÃL M
Operand1
ÃÃN V
,
ÃÃV W
Operand2
ÃÃX `
)
ÃÃ` a
;
ÃÃa b
case
ÕÕ 
TransformOperator
ÕÕ &
.
ÕÕ& '
Divide
ÕÕ' -
:
ÕÕ- .
return
ÕÕ/ 5
string
ÕÕ6 <
.
ÕÕ< =
Format
ÕÕ= C
(
ÕÕC D
$str
ÕÕD O
,
ÕÕO P
Operand1
ÕÕQ Y
,
ÕÕY Z
Operand2
ÕÕ[ c
)
ÕÕc d
;
ÕÕd e
case
ŒŒ 
TransformOperator
ŒŒ &
.
ŒŒ& '
Modulo
ŒŒ' -
:
ŒŒ- .
return
ŒŒ/ 5
string
ŒŒ6 <
.
ŒŒ< =
Format
ŒŒ= C
(
ŒŒC D
$str
ŒŒD O
,
ŒŒO P
Operand1
ŒŒQ Y
,
ŒŒY Z
Operand2
ŒŒ[ c
)
ŒŒc d
;
ŒŒd e
case
œœ 
TransformOperator
œœ &
.
œœ& '
Multiply
œœ' /
:
œœ/ 0
return
œœ1 7
string
œœ8 >
.
œœ> ?
Format
œœ? E
(
œœE F
$str
œœF Q
,
œœQ R
Operand1
œœS [
,
œœ[ \
Operand2
œœ] e
)
œœe f
;
œœf g
case
–– 
TransformOperator
–– &
.
––& '
Negate
––' -
:
––- .
return
––/ 5
string
––6 <
.
––< =
Format
––= C
(
––C D
$str
––D N
,
––N O
Operand1
––P X
)
––X Y
;
––Y Z
case
—— 
TransformOperator
—— &
.
——& '
Power
——' ,
:
——, -
return
——. 4
string
——5 ;
.
——; <
Format
——< B
(
——B C
$str
——C N
,
——N O
Operand1
——P X
,
——X Y
Operand2
——Z b
)
——b c
;
——c d
case
““ 
TransformOperator
““ &
.
““& '
Subtract
““' /
:
““/ 0
return
““1 7
string
““8 >
.
““> ?
Format
““? E
(
““E F
$str
““F Q
,
““Q R
Operand1
““S [
,
““[ \
Operand2
““] e
)
““e f
;
““f g
case
”” 
TransformOperator
”” &
.
””& '
Lambda
””' -
:
””- .
break
‘‘ 
;
‘‘ 
case
’’ 
TransformOperator
’’ &
.
’’& '
Conditional
’’' 2
:
’’2 3
break
÷÷ 
;
÷÷ 
case
◊◊ 
TransformOperator
◊◊ &
.
◊◊& '
OnesComplement
◊◊' 5
:
◊◊5 6
break
ÿÿ 
;
ÿÿ 
case
ŸŸ 
TransformOperator
ŸŸ &
.
ŸŸ& '
ExclusiveOr
ŸŸ' 2
:
ŸŸ2 3
break
⁄⁄ 
;
⁄⁄ 
default
€€ 
:
€€ 
break
‹‹ 
;
‹‹ 
}
›› 
return
ﬁﬁ 
string
ﬁﬁ 
.
ﬁﬁ 
Format
ﬁﬁ  
(
ﬁﬁ  !
$str
ﬁﬁ! N
,
ﬁﬁN O
Operator
ﬁﬁP X
,
ﬁﬁX Y
Operand1
ﬁﬁZ b
,
ﬁﬁb c
Operand2
ﬁﬁd l
)
ﬁﬁl m
;
ﬁﬁm n
}
ﬂﬂ 	
public
·· 
override
·· 
bool
·· 
Equals
·· #
(
··# $
object
··$ *
obj
··+ .
)
··. /
{
‚‚ 	
return
„„ 
base
„„ 
.
„„ 
Equals
„„ 
(
„„ 
obj
„„ "
)
„„" #
;
„„# $
}
‰‰ 	
public
ÊÊ 
override
ÊÊ 
int
ÊÊ 
GetHashCode
ÊÊ '
(
ÊÊ' (
)
ÊÊ( )
{
ÁÁ 	
return
ËË 
base
ËË 
.
ËË 
GetHashCode
ËË #
(
ËË# $
)
ËË$ %
;
ËË% &
}
ÈÈ 	
}
 
public
ÒÒ 

class
ÒÒ 
FEXP
ÒÒ 
:
ÒÒ 

IQueryItem
ÒÒ "
,
ÒÒ" #
IQueryValue
ÒÒ$ /
,
ÒÒ/ 0
IExpression
ÒÒ1 <
{
ÚÚ 
public
ÛÛ 
QueryFunctions
ÛÛ 
Function
ÛÛ &
{
ÛÛ' (
get
ÛÛ) ,
;
ÛÛ, -
set
ÛÛ. 1
;
ÛÛ1 2
}
ÛÛ3 4
public
ÙÙ 
IQueryValue
ÙÙ 
[
ÙÙ 
]
ÙÙ 

Parameters
ÙÙ '
{
ÙÙ( )
get
ÙÙ* -
;
ÙÙ- .
set
ÙÙ/ 2
;
ÙÙ2 3
}
ÙÙ4 5
public
ˆˆ 
NEXP
ˆˆ 
this
ˆˆ 
[
ˆˆ 
string
ˆˆ 
val
ˆˆ  #
]
ˆˆ# $
{
˜˜ 	
get
¯¯ 
{
¯¯ 
return
¯¯ 
new
¯¯ 
NEXP
¯¯ !
{
¯¯" #
Name
¯¯$ (
=
¯¯) *
val
¯¯+ .
,
¯¯. /

Expression
¯¯0 :
=
¯¯; <
this
¯¯= A
}
¯¯B C
;
¯¯C D
}
¯¯E F
}
˘˘ 	
public
¸¸ 
static
¸¸ 
BEXP
¸¸ 
operator
¸¸ #
>
¸¸$ %
(
¸¸% &
FEXP
¸¸& *
op1
¸¸+ .
,
¸¸. /
IQueryValue
¸¸0 ;
op2
¸¸< ?
)
¸¸? @
{
˝˝ 	
return
˛˛ 
new
˛˛ 
BEXP
˛˛ 
{
˛˛ 
Operand1
˛˛ &
=
˛˛' (
op1
˛˛) ,
,
˛˛, -
Operand2
˛˛. 6
=
˛˛7 8
op2
˛˛9 <
,
˛˛< =
Operator
˛˛> F
=
˛˛G H
BinaryOperator
˛˛I W
.
˛˛W X
GreaterThan
˛˛X c
}
˛˛d e
;
˛˛e f
}
ˇˇ 	
public
ÄÄ 
static
ÄÄ 
BEXP
ÄÄ 
operator
ÄÄ #
<
ÄÄ$ %
(
ÄÄ% &
FEXP
ÄÄ& *
op1
ÄÄ+ .
,
ÄÄ. /
IQueryValue
ÄÄ0 ;
op2
ÄÄ< ?
)
ÄÄ? @
{
ÅÅ 	
return
ÇÇ 
new
ÇÇ 
BEXP
ÇÇ 
{
ÇÇ 
Operand1
ÇÇ &
=
ÇÇ' (
op1
ÇÇ) ,
,
ÇÇ, -
Operand2
ÇÇ. 6
=
ÇÇ7 8
op2
ÇÇ9 <
,
ÇÇ< =
Operator
ÇÇ> F
=
ÇÇG H
BinaryOperator
ÇÇI W
.
ÇÇW X
LessThan
ÇÇX `
}
ÇÇa b
;
ÇÇb c
}
ÉÉ 	
public
ÑÑ 
static
ÑÑ 
BEXP
ÑÑ 
operator
ÑÑ #
<=
ÑÑ$ &
(
ÑÑ& '
FEXP
ÑÑ' +
op1
ÑÑ, /
,
ÑÑ/ 0
IQueryValue
ÑÑ1 <
op2
ÑÑ= @
)
ÑÑ@ A
{
ÖÖ 	
return
ÜÜ 
new
ÜÜ 
BEXP
ÜÜ 
{
ÜÜ 
Operand1
ÜÜ &
=
ÜÜ' (
op1
ÜÜ) ,
,
ÜÜ, -
Operand2
ÜÜ. 6
=
ÜÜ7 8
op2
ÜÜ9 <
,
ÜÜ< =
Operator
ÜÜ> F
=
ÜÜG H
BinaryOperator
ÜÜI W
.
ÜÜW X
LessThanOrEqual
ÜÜX g
}
ÜÜh i
;
ÜÜi j
}
áá 	
public
àà 
static
àà 
BEXP
àà 
operator
àà #
>=
àà$ &
(
àà& '
FEXP
àà' +
op1
àà, /
,
àà/ 0
IQueryValue
àà1 <
op2
àà= @
)
àà@ A
{
ââ 	
return
ää 
new
ää 
BEXP
ää 
{
ää 
Operand1
ää &
=
ää' (
op1
ää) ,
,
ää, -
Operand2
ää. 6
=
ää7 8
op2
ää9 <
,
ää< =
Operator
ää> F
=
ääG H
BinaryOperator
ääI W
.
ääW X 
GreaterThanOrEqual
ääX j
}
ääk l
;
ääl m
}
ãã 	
public
åå 
static
åå 
BEXP
åå 
operator
åå #
==
åå$ &
(
åå& '
FEXP
åå' +
op1
åå, /
,
åå/ 0
IQueryValue
åå1 <
op2
åå= @
)
åå@ A
{
çç 	
return
éé 
new
éé 
BEXP
éé 
{
éé 
Operand1
éé &
=
éé' (
op1
éé) ,
,
éé, -
Operand2
éé. 6
=
éé7 8
op2
éé9 <
,
éé< =
Operator
éé> F
=
ééG H
BinaryOperator
ééI W
.
ééW X
Equal
ééX ]
}
éé^ _
;
éé_ `
}
èè 	
public
êê 
static
êê 
BEXP
êê 
operator
êê #
!=
êê$ &
(
êê& '
FEXP
êê' +
op1
êê, /
,
êê/ 0
IQueryValue
êê1 <
op2
êê= @
)
êê@ A
{
ëë 	
return
íí 
new
íí 
BEXP
íí 
{
íí 
Operand1
íí &
=
íí' (
op1
íí) ,
,
íí, -
Operand2
íí. 6
=
íí7 8
op2
íí9 <
,
íí< =
Operator
íí> F
=
ííG H
BinaryOperator
ííI W
.
ííW X
NotEqual
ííX `
}
íía b
;
ííb c
}
ìì 	
public
ññ 
static
ññ 
TEXP
ññ 
operator
ññ #
+
ññ$ %
(
ññ% &
FEXP
ññ& *
op1
ññ+ .
,
ññ. /
IQueryValue
ññ0 ;
op2
ññ< ?
)
ññ? @
{
óó 	
return
òò 
new
òò 
TEXP
òò 
{
òò 
Operand1
òò &
=
òò' (
op1
òò) ,
,
òò, -
Operand2
òò. 6
=
òò7 8
op2
òò9 <
,
òò< =
Operator
òò> F
=
òòG H
TransformOperator
òòI Z
.
òòZ [
Add
òò[ ^
}
òò_ `
;
òò` a
}
ôô 	
public
öö 
static
öö 
TEXP
öö 
operator
öö #
-
öö$ %
(
öö% &
FEXP
öö& *
op1
öö+ .
,
öö. /
IQueryValue
öö0 ;
op2
öö< ?
)
öö? @
{
õõ 	
return
úú 
new
úú 
TEXP
úú 
{
úú 
Operand1
úú &
=
úú' (
op1
úú) ,
,
úú, -
Operand2
úú. 6
=
úú7 8
op2
úú9 <
,
úú< =
Operator
úú> F
=
úúG H
TransformOperator
úúI Z
.
úúZ [
Subtract
úú[ c
}
úúd e
;
úúe f
}
ùù 	
public
ûû 
static
ûû 
TEXP
ûû 
operator
ûû #
*
ûû$ %
(
ûû% &
FEXP
ûû& *
op1
ûû+ .
,
ûû. /
IQueryValue
ûû0 ;
op2
ûû< ?
)
ûû? @
{
üü 	
return
†† 
new
†† 
TEXP
†† 
{
†† 
Operand1
†† &
=
††' (
op1
††) ,
,
††, -
Operand2
††. 6
=
††7 8
op2
††9 <
,
††< =
Operator
††> F
=
††G H
TransformOperator
††I Z
.
††Z [
Multiply
††[ c
}
††d e
;
††e f
}
°° 	
public
¢¢ 
static
¢¢ 
TEXP
¢¢ 
operator
¢¢ #
/
¢¢$ %
(
¢¢% &
FEXP
¢¢& *
op1
¢¢+ .
,
¢¢. /
IQueryValue
¢¢0 ;
op2
¢¢< ?
)
¢¢? @
{
££ 	
return
§§ 
new
§§ 
TEXP
§§ 
{
§§ 
Operand1
§§ &
=
§§' (
op1
§§) ,
,
§§, -
Operand2
§§. 6
=
§§7 8
op2
§§9 <
,
§§< =
Operator
§§> F
=
§§G H
TransformOperator
§§I Z
.
§§Z [
Divide
§§[ a
}
§§b c
;
§§c d
}
•• 	
public
¶¶ 
static
¶¶ 
TEXP
¶¶ 
operator
¶¶ #
%
¶¶$ %
(
¶¶% &
FEXP
¶¶& *
op1
¶¶+ .
,
¶¶. /
IQueryValue
¶¶0 ;
op2
¶¶< ?
)
¶¶? @
{
ßß 	
return
®® 
new
®® 
TEXP
®® 
{
®® 
Operand1
®® &
=
®®' (
op1
®®) ,
,
®®, -
Operand2
®®. 6
=
®®7 8
op2
®®9 <
,
®®< =
Operator
®®> F
=
®®G H
TransformOperator
®®I Z
.
®®Z [
Modulo
®®[ a
}
®®b c
;
®®c d
}
©© 	
public
´´ 
override
´´ 
string
´´ 
ToString
´´ '
(
´´' (
)
´´( )
{
¨¨ 	
return
≠≠ 
base
≠≠ 
.
≠≠ 
ToString
≠≠  
(
≠≠  !
)
≠≠! "
;
≠≠" #
}
ÆÆ 	
public
∞∞ 
override
∞∞ 
bool
∞∞ 
Equals
∞∞ #
(
∞∞# $
object
∞∞$ *
obj
∞∞+ .
)
∞∞. /
{
±± 	
return
≤≤ 
base
≤≤ 
.
≤≤ 
Equals
≤≤ 
(
≤≤ 
obj
≤≤ "
)
≤≤" #
;
≤≤# $
}
≥≥ 	
public
µµ 
override
µµ 
int
µµ 
GetHashCode
µµ '
(
µµ' (
)
µµ( )
{
∂∂ 	
return
∑∑ 
base
∑∑ 
.
∑∑ 
GetHashCode
∑∑ #
(
∑∑# $
)
∑∑$ %
;
∑∑% &
}
∏∏ 	
}
ππ 
public
∫∫ 

class
∫∫ 
NEXP
∫∫ 
:
∫∫ 

IQueryItem
∫∫ "
,
∫∫" #
IQueryValue
∫∫$ /
,
∫∫/ 0

INamedItem
∫∫1 ;
{
ªª 
public
ºº 
string
ºº 
Name
ºº 
{
ºº 
get
ºº  
;
ºº  !
set
ºº" %
;
ºº% &
}
ºº' (
public
ΩΩ 
IQueryValue
ΩΩ 

Expression
ΩΩ %
{
ΩΩ& '
get
ΩΩ( +
;
ΩΩ+ ,
set
ΩΩ- 0
;
ΩΩ0 1
}
ΩΩ2 3
public
øø 
NEXP
øø 
this
øø 
[
øø 
string
øø 
val
øø  #
]
øø# $
{
¿¿ 	
get
¡¡ 
{
¡¡ 
return
¡¡ 
new
¡¡ 
NEXP
¡¡ !
{
¡¡" #
Name
¡¡$ (
=
¡¡) *
val
¡¡+ .
,
¡¡. /

Expression
¡¡0 :
=
¡¡; <
this
¡¡= A
}
¡¡B C
;
¡¡C D
}
¡¡E F
}
¬¬ 	
}
ƒƒ 
public
«« 

class
«« 
Sort
«« 
:
«« 
IQueryOrderItem
«« '
{
»» 
public
…… 
IQueryValue
…… 
Value
……  
{
……! "
get
……# &
;
……& '
set
……( +
;
……+ ,
}
……- .
public
   
QueryOrderType
   
Type
   "
{
  # $
get
  % (
;
  ( )
set
  * -
;
  - .
}
  / 0
}
ÀÀ 
public
ÕÕ 

class
ÕÕ 
ASC
ÕÕ 
:
ÕÕ 
IQueryOrderItem
ÕÕ &
{
ŒŒ 
public
œœ 
IQueryValue
œœ 
Value
œœ  
{
œœ! "
get
œœ# &
;
œœ& '
set
œœ( +
;
œœ+ ,
}
œœ- .
public
–– 
QueryOrderType
–– 
Type
–– "
{
––# $
get
––% (
{
––) *
return
––+ 1
QueryOrderType
––2 @
.
––@ A
ASC
––A D
;
––D E
}
––F G
}
––H I
public
““ 
static
““ 
explicit
““ 
operator
““ '
ASC
““( +
(
““+ ,
COL
““, /
value
““0 5
)
““5 6
{
”” 	
return
‘‘ 
new
‘‘ 
ASC
‘‘ 
{
‘‘ 
Value
‘‘ "
=
‘‘# $
value
‘‘% *
}
‘‘+ ,
;
‘‘, -
}
’’ 	
public
÷÷ 
static
÷÷ 
explicit
÷÷ 
operator
÷÷ '
ASC
÷÷( +
(
÷÷+ ,
VAL
÷÷, /
value
÷÷0 5
)
÷÷5 6
{
◊◊ 	
return
ÿÿ 
new
ÿÿ 
ASC
ÿÿ 
{
ÿÿ 
Value
ÿÿ "
=
ÿÿ# $
value
ÿÿ% *
}
ÿÿ+ ,
;
ÿÿ, -
}
ŸŸ 	
public
⁄⁄ 
static
⁄⁄ 
explicit
⁄⁄ 
operator
⁄⁄ '
ASC
⁄⁄( +
(
⁄⁄+ ,
TEXP
⁄⁄, 0
value
⁄⁄1 6
)
⁄⁄6 7
{
€€ 	
return
‹‹ 
new
‹‹ 
ASC
‹‹ 
{
‹‹ 
Value
‹‹ "
=
‹‹# $
value
‹‹% *
}
‹‹+ ,
;
‹‹, -
}
›› 	
public
ﬁﬁ 
static
ﬁﬁ 
explicit
ﬁﬁ 
operator
ﬁﬁ '
ASC
ﬁﬁ( +
(
ﬁﬁ+ ,
NEXP
ﬁﬁ, 0
value
ﬁﬁ1 6
)
ﬁﬁ6 7
{
ﬂﬂ 	
return
‡‡ 
new
‡‡ 
ASC
‡‡ 
{
‡‡ 
Value
‡‡ "
=
‡‡# $
value
‡‡% *
}
‡‡+ ,
;
‡‡, -
}
·· 	
}
‚‚ 
public
„„ 

class
„„ 
DESC
„„ 
:
„„ 
IQueryOrderItem
„„ '
{
‰‰ 
public
ÂÂ 
IQueryValue
ÂÂ 
Value
ÂÂ  
{
ÂÂ! "
get
ÂÂ# &
;
ÂÂ& '
set
ÂÂ( +
;
ÂÂ+ ,
}
ÂÂ- .
public
ÊÊ 
QueryOrderType
ÊÊ 
Type
ÊÊ "
{
ÊÊ# $
get
ÊÊ% (
{
ÊÊ) *
return
ÊÊ+ 1
QueryOrderType
ÊÊ2 @
.
ÊÊ@ A
DESC
ÊÊA E
;
ÊÊE F
}
ÊÊG H
}
ÊÊI J
public
ËË 
static
ËË 
explicit
ËË 
operator
ËË '
DESC
ËË( ,
(
ËË, -
COL
ËË- 0
value
ËË1 6
)
ËË6 7
{
ÈÈ 	
return
ÍÍ 
new
ÍÍ 
DESC
ÍÍ 
{
ÍÍ 
Value
ÍÍ #
=
ÍÍ$ %
value
ÍÍ& +
}
ÍÍ, -
;
ÍÍ- .
}
ÎÎ 	
public
ÏÏ 
static
ÏÏ 
explicit
ÏÏ 
operator
ÏÏ '
DESC
ÏÏ( ,
(
ÏÏ, -
VAL
ÏÏ- 0
value
ÏÏ1 6
)
ÏÏ6 7
{
ÌÌ 	
return
ÓÓ 
new
ÓÓ 
DESC
ÓÓ 
{
ÓÓ 
Value
ÓÓ #
=
ÓÓ$ %
value
ÓÓ& +
}
ÓÓ, -
;
ÓÓ- .
}
ÔÔ 	
public
 
static
 
explicit
 
operator
 '
DESC
( ,
(
, -
TEXP
- 1
value
2 7
)
7 8
{
ÒÒ 	
return
ÚÚ 
new
ÚÚ 
DESC
ÚÚ 
{
ÚÚ 
Value
ÚÚ #
=
ÚÚ$ %
value
ÚÚ& +
}
ÚÚ, -
;
ÚÚ- .
}
ÛÛ 	
public
ÙÙ 
static
ÙÙ 
explicit
ÙÙ 
operator
ÙÙ '
DESC
ÙÙ( ,
(
ÙÙ, -
NEXP
ÙÙ- 1
value
ÙÙ2 7
)
ÙÙ7 8
{
ıı 	
return
ˆˆ 
new
ˆˆ 
DESC
ˆˆ 
{
ˆˆ 
Value
ˆˆ #
=
ˆˆ$ %
value
ˆˆ& +
}
ˆˆ, -
;
ˆˆ- .
}
˜˜ 	
}
¯¯ 
public
˘˘ 

enum
˘˘ 
QueryOrderType
˘˘ 
{
˙˙ 
ASC
˚˚ 
,
˚˚ 
DESC
¸¸ 
,
¸¸ 
}
˝˝ 
public
ˇˇ 

enum
ˇˇ 
BinaryOperator
ˇˇ 
{
ÄÄ 
And
ÅÅ 
,
ÅÅ 
Or
ÇÇ 

,
ÇÇ
 
Not
ÉÉ 
,
ÉÉ 
Equal
ÖÖ 
,
ÖÖ 
GreaterThan
ÜÜ 
,
ÜÜ  
GreaterThanOrEqual
áá 
,
áá 
LessThan
àà 
,
àà 
LessThanOrEqual
ââ 
,
ââ 
NotEqual
ää 
,
ää 
Like
ãã 
,
ãã 
NotLike
åå 
,
åå 
In
éé 

,
éé
 
IsNull
èè 
,
èè 
	IsNotNull
êê 
,
êê 
}
ëë 
public
íí 

enum
íí 
TransformOperator
íí !
{
ìì 
Add
îî 
,
îî 
Divide
ïï 
,
ïï 
Modulo
ññ 
,
ññ 
Multiply
óó 
,
óó 
Negate
òò 
,
òò 
Power
ôô 
,
ôô 
Subtract
öö 
,
öö 
Lambda
õõ 
,
õõ 
Conditional
úú 
,
úú 
OnesComplement
ùù 
,
ùù 
ExclusiveOr
ûû 
,
ûû 
}
üü 
public
°° 

enum
°° 
Datepart
°° 
{
¢¢ 
YEAR
££ 
,
££ 
MONTH
§§ 
,
§§ 
DAY
•• 
,
•• 
HOUR
¶¶ 
,
¶¶ 
}
ßß 
public
©© 

enum
©© 
QueryFunctions
©© 
{
™™ 
Ascii
≠≠ 
,
≠≠ 
Char
ÆÆ 
,
ÆÆ 
	CharIndex
ØØ 
,
ØØ 
Concat
∞∞ 
,
∞∞ 

Difference
±± 
,
±± 
Format
≤≤ 
,
≤≤ 
Left
≥≥ 
,
≥≥ 
Len
¥¥ 
,
¥¥ 
Lower
µµ 
,
µµ 
Ltrim
∂∂ 
,
∂∂ 
Nchar
∑∑ 
,
∑∑ 
Patindex
∏∏ 
,
∏∏ 
	Quotename
ππ 
,
ππ 
Replace
∫∫ 
,
∫∫ 
	Replicate
ªª 
,
ªª 
Reverse
ºº 
,
ºº 
Right
ΩΩ 
,
ΩΩ 
Rtrim
ææ 
,
ææ 
Trim
øø 
,
øø 
Soundex
¿¿ 
,
¿¿ 
Space
¡¡ 
,
¡¡ 
Str
¬¬ 
,
¬¬ 
String_Escape
√√ 
,
√√ 
String_Split
ƒƒ 
,
ƒƒ 
Stuff
≈≈ 
,
≈≈ 
	Substring
∆∆ 
,
∆∆ 
Unicode
«« 
,
«« 
Upper
»» 
,
»» 
Abs
ÀÀ 
,
ÀÀ 
Acos
ÃÃ 
,
ÃÃ 
Asin
ÕÕ 
,
ÕÕ 
Atan
ŒŒ 
,
ŒŒ 
Atn2
œœ 
,
œœ 
Ceiling
–– 
,
–– 
Cos
—— 
,
—— 
Cot
““ 
,
““ 
Degrees
”” 
,
”” 
Exp
‘‘ 
,
‘‘ 
Floor
’’ 
,
’’ 
Log
÷÷ 
,
÷÷ 
PI
◊◊ 

,
◊◊
 
Power
ÿÿ 
,
ÿÿ 
Radians
ŸŸ 
,
ŸŸ 
Rand
⁄⁄ 
,
⁄⁄ 
Round
€€ 
,
€€ 
Sign
‹‹ 
,
‹‹ 
Sin
›› 
,
›› 
Sqrt
ﬁﬁ 
,
ﬁﬁ 
Square
ﬂﬂ 
,
ﬂﬂ 
Tan
‡‡ 
,
‡‡ 
GetDate
„„ 
,
„„ 
Datepart
‰‰ 
,
‰‰ 
STArea
ÁÁ 
,
ÁÁ 

STAsBinary
ËË 
,
ËË 
STAsText
ÈÈ 
,
ÈÈ 

STBoundary
ÍÍ 
,
ÍÍ 
STBuffer
ÎÎ 
,
ÎÎ 

STCentroid
ÏÏ 
,
ÏÏ 

STContains
ÌÌ 
,
ÌÌ 
STConvexHull
ÓÓ 
,
ÓÓ 
	STCrosses
ÔÔ 
,
ÔÔ 
STCurveN
 
,
 
STCurveToLine
ÒÒ 
,
ÒÒ 
STDifference
ÚÚ 
,
ÚÚ 
STDimension
ÛÛ 
,
ÛÛ 

STDisjoint
ÙÙ 
,
ÙÙ 

STDistance
ıı 
,
ıı 

STEndpoint
ˆˆ 
,
ˆˆ 

STEnvelope
˜˜ 
,
˜˜ 
STEquals
¯¯ 
,
¯¯ 
STExteriorRing
˘˘ 
,
˘˘ 
STGeometryN
˙˙ 
,
˙˙ 
STGeometryType
˚˚ 
,
˚˚ 
STInteriorRingN
¸¸ 
,
¸¸ 
STIntersection
˝˝ 
,
˝˝ 
STIntersects
˛˛ 
,
˛˛ 

STIsClosed
ˇˇ 
,
ˇˇ 
	STIsEmpty
Ä	Ä	 
,
Ä	Ä	 
STIsRing
Å	Å	 
,
Å	Å	 

STIsSimple
Ç	Ç	 
,
Ç	Ç	 
	STIsValid
É	É	 
,
É	É	 
STLength
Ñ	Ñ	 
,
Ñ	Ñ	 
STNumCurves
Ö	Ö	 
,
Ö	Ö	 
STNumGeometries
Ü	Ü	 
,
Ü	Ü	 
STNumInteriorRing
á	á	 
,
á	á	 
STNumPoints
à	à	 
,
à	à	 

STOverlaps
â	â	 
,
â	â	 
STPointN
ä	ä	 
,
ä	ä	 
STPointOnSurface
ã	ã	 
,
ã	ã	 
STRelate
å	å	 
,
å	å	 
STSrid
ç	ç	 
,
ç	ç	 
STStartPoint
é	é	 
,
é	é	 
STSymDifference
è	è	 
,
è	è	 
	STTouches
ê	ê	 
,
ê	ê	 
STUnion
ë	ë	 
,
ë	ë	 
STWithin
í	í	 
,
í	í	 
STX
ì	ì	 
,
ì	ì	 
STY
î	î	 
,
î	î	 
STGeomFromText
ï	ï	 
,
ï	ï	 
STPointFromText
ñ	ñ	 
,
ñ	ñ	 
STLineFromText
ó	ó	 
,
ó	ó	 
STPolyFromText
ò	ò	 
,
ò	ò	 
STMPointFromText
ô	ô	 
,
ô	ô	 
STMLineFromText
ö	ö	 
,
ö	ö	 
STMPolyFromText
õ	õ	 
,
õ	õ	  
STGeomCollFromText
ú	ú	 
,
ú	ú	 
STGeomFromWKB
ù	ù	 
,
ù	ù	 
STPointFromWKB
û	û	 
,
û	û	 
STLineFromWKB
ü	ü	 
,
ü	ü	 
STPolyFromWKB
†	†	 
,
†	†	 
STMPointFromWKB
°	°	 
,
°	°	 
STMLineFromWKB
¢	¢	 
,
¢	¢	 
STMPolyFromWKB
£	£	 
,
£	£	 
STGeomCollFromWKB
§	§	 
,
§	§	 
GeomFromGML
•	•	 
,
•	•	 

AsBinaryZM
¶	¶	 
,
¶	¶	 
AsGml
ß	ß	 
,
ß	ß	 
AsTextZM
®	®	 
,
®	®	 
BufferWithCurves
©	©	 
,
©	©	 !
BufferWithTolerance
™	™	 
,
™	™	 &
CurveToLineWithTolerance
´	´	  
,
´	´	  !

InstanceOf
¨	¨	 
,
¨	¨	 
Filter
≠	≠	 
,
≠	≠	 
HasM
Æ	Æ	 
,
Æ	Æ	 
HasZ
Ø	Ø	 
,
Ø	Ø	 
IsNull
∞	∞	 
,
∞	∞	 
IsValidDetailed
±	±	 
,
±	±	 
M
≤	≤	 	
,
≤	≤		 

	MakeValid
≥	≥	 
,
≥	≥	 %
MinDbCompatibilityLevel
¥	¥	 
,
¥	¥	  
Reduce
µ	µ	 
,
µ	µ	 
ShortestLineTo
∂	∂	 
,
∂	∂	 
ToString
∑	∑	 
,
∑	∑	 
Z
∏	∏	 	
,
∏	∏		 

EnvelopeAngle
π	π	 
,
π	π	 
EnvelopeCenter
∫	∫	 
,
∫	∫	 
Lat
ª	ª	 
,
ª	ª	 
Long
º	º	 
,
º	º	 
NumRing
Ω	Ω	 
,
Ω	Ω	 
ReorientObject
æ	æ	 
,
æ	æ	 
RingN
ø	ø	 
,
ø	ø	 
Avg
√	√	 
,
√	√	 
Checksum_Agg
ƒ	ƒ	 
,
ƒ	ƒ	 
Count
≈	≈	 
,
≈	≈	 
	Count_Big
∆	∆	 
,
∆	∆	 
Grouping
«	«	 
,
«	«	 
Grouping_Id
»	»	 
,
»	»	 
Max
…	…	 
,
…	…	 
Min
 	 	 
,
 	 	 
Sum
À	À	 
,
À	À	 
Stdev
Ã	Ã	 
,
Ã	Ã	 
Stdevp
Õ	Õ	 
,
Õ	Õ	 
Var
Œ	Œ	 
,
Œ	Œ	 
Varp
œ	œ	 
,
œ	œ	 !
CollectionAggregate
–	–	 
,
–	–	 !
ConvexHullAggregate
—	—	 
,
—	—	 
EnvelopeAggregate
“	“	 
,
“	“	 
UnionAggregate
”	”	 
,
”	”	 
}
‘	‘	 
public
’	’	 

static
’	’	 
class
’	’	 
QueryFunctionExp
’	’	 (
{
÷	÷	 
public
◊	◊	 
static
◊	◊	 
BEXP
◊	◊	 
LIKE
◊	◊	 
(
◊	◊	  
this
◊	◊	  $
IQueryValue
◊	◊	% 0
op1
◊	◊	1 4
,
◊	◊	4 5
IQueryValue
◊	◊	6 A
op2
◊	◊	B E
)
◊	◊	E F
{
ÿ	ÿ	 	
return
Ÿ	Ÿ	 
new
Ÿ	Ÿ	 
BEXP
Ÿ	Ÿ	 
{
Ÿ	Ÿ	 
Operand1
Ÿ	Ÿ	 &
=
Ÿ	Ÿ	' (
op1
Ÿ	Ÿ	) ,
,
Ÿ	Ÿ	, -
Operand2
Ÿ	Ÿ	. 6
=
Ÿ	Ÿ	7 8
op2
Ÿ	Ÿ	9 <
,
Ÿ	Ÿ	< =
Operator
Ÿ	Ÿ	> F
=
Ÿ	Ÿ	G H
BinaryOperator
Ÿ	Ÿ	I W
.
Ÿ	Ÿ	W X
Like
Ÿ	Ÿ	X \
}
Ÿ	Ÿ	] ^
;
Ÿ	Ÿ	^ _
}
⁄	⁄	 	
public
€	€	 
static
€	€	 
BEXP
€	€	 
IN
€	€	 
(
€	€	 
this
€	€	 "
IQueryValue
€	€	# .
op1
€	€	/ 2
,
€	€	2 3
params
€	€	4 :
IQueryValue
€	€	; F
[
€	€	F G
]
€	€	G H
op2
€	€	I L
)
€	€	L M
{
‹	‹	 	
return
›	›	 
new
›	›	 
BEXP
›	›	 
{
›	›	 
Operand1
›	›	 &
=
›	›	' (
op1
›	›	) ,
,
›	›	, -
Operand2
›	›	. 6
=
›	›	7 8
new
›	›	9 <
ARR
›	›	= @
{
›	›	A B
Values
›	›	C I
=
›	›	J K
op2
›	›	L O
.
›	›	O P
ToArray
›	›	P W
(
›	›	W X
)
›	›	X Y
}
›	›	Z [
,
›	›	[ \
Operator
›	›	] e
=
›	›	f g
BinaryOperator
›	›	h v
.
›	›	v w
In
›	›	w y
}
›	›	z {
;
›	›	{ |
}
ﬁ	ﬁ	 	
public
ﬂ	ﬂ	 
static
ﬂ	ﬂ	 
BEXP
ﬂ	ﬂ	 
IN
ﬂ	ﬂ	 
(
ﬂ	ﬂ	 
this
ﬂ	ﬂ	 "
IQueryValue
ﬂ	ﬂ	# .
op1
ﬂ	ﬂ	/ 2
,
ﬂ	ﬂ	2 3
IEnumerable
ﬂ	ﬂ	4 ?
<
ﬂ	ﬂ	? @
IQueryValue
ﬂ	ﬂ	@ K
>
ﬂ	ﬂ	K L
op2
ﬂ	ﬂ	M P
)
ﬂ	ﬂ	P Q
{
‡	‡	 	
return
·	·	 
new
·	·	 
BEXP
·	·	 
{
·	·	 
Operand1
·	·	 &
=
·	·	' (
op1
·	·	) ,
,
·	·	, -
Operand2
·	·	. 6
=
·	·	7 8
new
·	·	9 <
ARR
·	·	= @
{
·	·	A B
Values
·	·	C I
=
·	·	J K
op2
·	·	L O
.
·	·	O P
ToArray
·	·	P W
(
·	·	W X
)
·	·	X Y
}
·	·	Z [
,
·	·	[ \
Operator
·	·	] e
=
·	·	f g
BinaryOperator
·	·	h v
.
·	·	v w
In
·	·	w y
}
·	·	z {
;
·	·	{ |
}
‚	‚	 	
public
Á	Á	 
static
Á	Á	 
TEXP
Á	Á	 
LOOKUP
Á	Á	 !
(
Á	Á	! "
this
Á	Á	" &
IQueryValue
Á	Á	' 2
op
Á	Á	3 5
,
Á	Á	5 6
string
Á	Á	7 =
returnValue
Á	Á	> I
,
Á	Á	I J
string
Á	Á	K Q
destinationTable
Á	Á	R b
,
Á	Á	b c
string
Á	Á	d j
destinationColumn
Á	Á	k |
)
Á	Á	| }
{
Ë	Ë	 	
throw
È	È	 
new
È	È	 %
NotImplementedException
È	È	 -
(
È	È	- .
)
È	È	. /
;
È	È	/ 0
}
Í	Í	 	
public
Î	Î	 
static
Î	Î	 
BEXP
Î	Î	 
ISNULL
Î	Î	 !
(
Î	Î	! "
this
Î	Î	" &
IQueryValue
Î	Î	' 2
op1
Î	Î	3 6
)
Î	Î	6 7
{
Ï	Ï	 	
return
Ì	Ì	 
new
Ì	Ì	 
BEXP
Ì	Ì	 
{
Ì	Ì	 
Operator
Ì	Ì	 &
=
Ì	Ì	' (
BinaryOperator
Ì	Ì	) 7
.
Ì	Ì	7 8
IsNull
Ì	Ì	8 >
,
Ì	Ì	> ?
Operand1
Ì	Ì	@ H
=
Ì	Ì	I J
op1
Ì	Ì	K N
}
Ì	Ì	O P
;
Ì	Ì	P Q
}
Ó	Ó	 	
public
Ô	Ô	 
static
Ô	Ô	 
BEXP
Ô	Ô	 
	ISNOTNULL
Ô	Ô	 $
(
Ô	Ô	$ %
this
Ô	Ô	% )
IQueryValue
Ô	Ô	* 5
op1
Ô	Ô	6 9
)
Ô	Ô	9 :
{
		 	
return
Ò	Ò	 
new
Ò	Ò	 
BEXP
Ò	Ò	 
{
Ò	Ò	 
Operator
Ò	Ò	 &
=
Ò	Ò	' (
BinaryOperator
Ò	Ò	) 7
.
Ò	Ò	7 8
	IsNotNull
Ò	Ò	8 A
,
Ò	Ò	A B
Operand1
Ò	Ò	C K
=
Ò	Ò	L M
op1
Ò	Ò	N Q
}
Ò	Ò	R S
;
Ò	Ò	S T
}
Ú	Ú	 	
public
˙	˙	 
static
˙	˙	 
FEXP
˙	˙	 
ASCII
˙	˙	  
(
˙	˙	  !
this
˙	˙	! %
IQueryValue
˙	˙	& 1"
character_expression
˙	˙	2 F
)
˙	˙	F G
{
˚	˚	 	
return
¸	¸	 
new
¸	¸	 
FEXP
¸	¸	 
{
¸	¸	 
Function
¸	¸	 &
=
¸	¸	' (
QueryFunctions
¸	¸	) 7
.
¸	¸	7 8
Ascii
¸	¸	8 =
,
¸	¸	= >

Parameters
¸	¸	? I
=
¸	¸	J K
new
¸	¸	L O
[
¸	¸	O P
]
¸	¸	P Q
{
¸	¸	R S"
character_expression
¸	¸	T h
}
¸	¸	i j
}
¸	¸	k l
;
¸	¸	l m
}
˝	˝	 	
public
Ñ
Ñ
 
static
Ñ
Ñ
 
FEXP
Ñ
Ñ
 
CHAR
Ñ
Ñ
 
(
Ñ
Ñ
  
this
Ñ
Ñ
  $
IQueryValue
Ñ
Ñ
% 0 
integer_expression
Ñ
Ñ
1 C
)
Ñ
Ñ
C D
{
Ö
Ö
 	
return
Ü
Ü
 
new
Ü
Ü
 
FEXP
Ü
Ü
 
{
Ü
Ü
 
Function
Ü
Ü
 &
=
Ü
Ü
' (
QueryFunctions
Ü
Ü
) 7
.
Ü
Ü
7 8
Char
Ü
Ü
8 <
,
Ü
Ü
< =

Parameters
Ü
Ü
> H
=
Ü
Ü
I J
new
Ü
Ü
K N
[
Ü
Ü
N O
]
Ü
Ü
O P
{
Ü
Ü
Q R 
integer_expression
Ü
Ü
S e
}
Ü
Ü
f g
}
Ü
Ü
h i
;
Ü
Ü
i j
}
á
á
 	
public
è
è
 
static
è
è
 
FEXP
è
è
 
	CHARINDEX
è
è
 $
(
è
è
$ %
this
è
è
% )
IQueryValue
è
è
* 5
expressionToFind
è
è
6 F
,
è
è
F G
IQueryValue
è
è
H S 
expressionToSearch
è
è
T f
)
è
è
f g
{
ê
ê
 	
return
ë
ë
 
new
ë
ë
 
FEXP
ë
ë
 
{
ë
ë
 
Function
ë
ë
 &
=
ë
ë
' (
QueryFunctions
ë
ë
) 7
.
ë
ë
7 8
	CharIndex
ë
ë
8 A
,
ë
ë
A B

Parameters
ë
ë
C M
=
ë
ë
N O
new
ë
ë
P S
[
ë
ë
S T
]
ë
ë
T U
{
ë
ë
V W
expressionToFind
ë
ë
X h
,
ë
ë
h i 
expressionToSearch
ë
ë
j |
}
ë
ë
} ~
}ë
ë
 Ä
;ë
ë
Ä Å
}
í
í
 	
public
õ
õ
 
static
õ
õ
 
FEXP
õ
õ
 
	CHARINDEX
õ
õ
 $
(
õ
õ
$ %
this
õ
õ
% )
IQueryValue
õ
õ
* 5
expressionToFind
õ
õ
6 F
,
õ
õ
F G
IQueryValue
õ
õ
H S 
expressionToSearch
õ
õ
T f
,
õ
õ
f g
IQueryValue
õ
õ
h s
start_locationõ
õ
t Ç
)õ
õ
Ç É
{
ú
ú
 	
return
ù
ù
 
new
ù
ù
 
FEXP
ù
ù
 
{
ù
ù
 
Function
ù
ù
 &
=
ù
ù
' (
QueryFunctions
ù
ù
) 7
.
ù
ù
7 8
	CharIndex
ù
ù
8 A
,
ù
ù
A B

Parameters
ù
ù
C M
=
ù
ù
N O
new
ù
ù
P S
[
ù
ù
S T
]
ù
ù
T U
{
ù
ù
V W
expressionToFind
ù
ù
X h
,
ù
ù
h i 
expressionToSearch
ù
ù
j |
,
ù
ù
| }
start_locationù
ù
~ å
}ù
ù
ç é
}ù
ù
è ê
;ù
ù
ê ë
}
û
û
 	
public
ß
ß
 
static
ß
ß
 
FEXP
ß
ß
 
CONCAT
ß
ß
 !
(
ß
ß
! "
this
ß
ß
" &
IQueryValue
ß
ß
' 2
string_value1
ß
ß
3 @
,
ß
ß
@ A
IQueryValue
ß
ß
B M
string_value2
ß
ß
N [
,
ß
ß
[ \
params
ß
ß
] c
IQueryValue
ß
ß
d o
[
ß
ß
o p
]
ß
ß
p q
string_valueN
ß
ß
r 
)ß
ß
 Ä
{
®
®
 	
return
©
©
 
new
©
©
 
FEXP
©
©
 
{
©
©
 
Function
©
©
 &
=
©
©
' (
QueryFunctions
©
©
) 7
.
©
©
7 8
Concat
©
©
8 >
,
©
©
> ?

Parameters
©
©
@ J
=
©
©
K L
new
©
©
M P
[
©
©
P Q
]
©
©
Q R
{
©
©
S T
string_value1
©
©
U b
,
©
©
b c
string_value2
©
©
d q
}
©
©
r s
.
©
©
s t
Union
©
©
t y
(
©
©
y z
string_valueN©
©
z á
)©
©
á à
.©
©
à â
ToArray©
©
â ê
(©
©
ê ë
)©
©
ë í
}©
©
ì î
;©
©
î ï
}
™
™
 	
public
≤
≤
 
static
≤
≤
 
FEXP
≤
≤
 

DIFFERENCE
≤
≤
 %
(
≤
≤
% &
this
≤
≤
& *
IQueryValue
≤
≤
+ 6#
character_expression1
≤
≤
7 L
,
≤
≤
L M
IQueryValue
≤
≤
N Y#
character_expression2
≤
≤
Z o
)
≤
≤
o p
{
≥
≥
 	
return
¥
¥
 
new
¥
¥
 
FEXP
¥
¥
 
{
¥
¥
 
Function
¥
¥
 &
=
¥
¥
' (
QueryFunctions
¥
¥
) 7
.
¥
¥
7 8

Difference
¥
¥
8 B
,
¥
¥
B C

Parameters
¥
¥
D N
=
¥
¥
O P
new
¥
¥
Q T
[
¥
¥
T U
]
¥
¥
U V
{
¥
¥
W X#
character_expression1
¥
¥
Y n
,
¥
¥
n o$
character_expression2¥
¥
p Ö
}¥
¥
Ü á
}¥
¥
à â
;¥
¥
â ä
}
µ
µ
 	
public
Ω
Ω
 
static
Ω
Ω
 
FEXP
Ω
Ω
 
FORMAT
Ω
Ω
 !
(
Ω
Ω
! "
this
Ω
Ω
" &
IQueryValue
Ω
Ω
' 2
value
Ω
Ω
3 8
,
Ω
Ω
8 9
IQueryValue
Ω
Ω
: E
format
Ω
Ω
F L
)
Ω
Ω
L M
{
æ
æ
 	
return
ø
ø
 
new
ø
ø
 
FEXP
ø
ø
 
{
ø
ø
 
Function
ø
ø
 &
=
ø
ø
' (
QueryFunctions
ø
ø
) 7
.
ø
ø
7 8
Format
ø
ø
8 >
,
ø
ø
> ?

Parameters
ø
ø
@ J
=
ø
ø
K L
new
ø
ø
M P
[
ø
ø
P Q
]
ø
ø
Q R
{
ø
ø
S T
value
ø
ø
U Z
,
ø
ø
Z [
format
ø
ø
\ b
}
ø
ø
c d
}
ø
ø
e f
;
ø
ø
f g
}
¿
¿
 	
public
…
…
 
static
…
…
 
FEXP
…
…
 
FORMAT
…
…
 !
(
…
…
! "
this
…
…
" &
IQueryValue
…
…
' 2
value
…
…
3 8
,
…
…
8 9
IQueryValue
…
…
: E
format
…
…
F L
,
…
…
L M
IQueryValue
…
…
N Y
culture
…
…
Z a
)
…
…
a b
{
 
 
 	
return
À
À
 
new
À
À
 
FEXP
À
À
 
{
À
À
 
Function
À
À
 &
=
À
À
' (
QueryFunctions
À
À
) 7
.
À
À
7 8
Format
À
À
8 >
,
À
À
> ?

Parameters
À
À
@ J
=
À
À
K L
new
À
À
M P
[
À
À
P Q
]
À
À
Q R
{
À
À
S T
value
À
À
U Z
,
À
À
Z [
format
À
À
\ b
,
À
À
b c
culture
À
À
d k
}
À
À
l m
}
À
À
n o
;
À
À
o p
}
Ã
Ã
 	
public
‘
‘
 
static
‘
‘
 
FEXP
‘
‘
 
LEFT
‘
‘
 
(
‘
‘
  
this
‘
‘
  $
IQueryValue
‘
‘
% 0"
character_expression
‘
‘
1 E
,
‘
‘
E F
IQueryValue
‘
‘
G R 
integer_expression
‘
‘
S e
)
‘
‘
e f
{
’
’
 	
return
÷
÷
 
new
÷
÷
 
FEXP
÷
÷
 
{
÷
÷
 
Function
÷
÷
 &
=
÷
÷
' (
QueryFunctions
÷
÷
) 7
.
÷
÷
7 8
Left
÷
÷
8 <
,
÷
÷
< =

Parameters
÷
÷
> H
=
÷
÷
I J
new
÷
÷
K N
[
÷
÷
N O
]
÷
÷
O P
{
÷
÷
Q R"
character_expression
÷
÷
S g
,
÷
÷
g h 
integer_expression
÷
÷
i {
}
÷
÷
| }
}
÷
÷
~ 
;÷
÷
 Ä
}
◊
◊
 	
public
ﬁ
ﬁ
 
static
ﬁ
ﬁ
 
FEXP
ﬁ
ﬁ
 
LEN
ﬁ
ﬁ
 
(
ﬁ
ﬁ
 
this
ﬁ
ﬁ
 #
IQueryValue
ﬁ
ﬁ
$ /
string_expression
ﬁ
ﬁ
0 A
)
ﬁ
ﬁ
A B
{
ﬂ
ﬂ
 	
return
‡
‡
 
new
‡
‡
 
FEXP
‡
‡
 
{
‡
‡
 
Function
‡
‡
 &
=
‡
‡
' (
QueryFunctions
‡
‡
) 7
.
‡
‡
7 8
Len
‡
‡
8 ;
,
‡
‡
; <

Parameters
‡
‡
= G
=
‡
‡
H I
new
‡
‡
J M
[
‡
‡
M N
]
‡
‡
N O
{
‡
‡
P Q
string_expression
‡
‡
R c
}
‡
‡
d e
}
‡
‡
f g
;
‡
‡
g h
}
·
·
 	
public
Ë
Ë
 
static
Ë
Ë
 
FEXP
Ë
Ë
 
LOWER
Ë
Ë
  
(
Ë
Ë
  !
this
Ë
Ë
! %
IQueryValue
Ë
Ë
& 1"
character_expression
Ë
Ë
2 F
)
Ë
Ë
F G
{
È
È
 	
return
Í
Í
 
new
Í
Í
 
FEXP
Í
Í
 
{
Í
Í
 
Function
Í
Í
 &
=
Í
Í
' (
QueryFunctions
Í
Í
) 7
.
Í
Í
7 8
Lower
Í
Í
8 =
,
Í
Í
= >

Parameters
Í
Í
? I
=
Í
Í
J K
new
Í
Í
L O
[
Í
Í
O P
]
Í
Í
P Q
{
Í
Í
R S"
character_expression
Í
Í
T h
}
Í
Í
i j
}
Í
Í
k l
;
Í
Í
l m
}
Î
Î
 	
public
Ú
Ú
 
static
Ú
Ú
 
FEXP
Ú
Ú
 
LTRIM
Ú
Ú
  
(
Ú
Ú
  !
this
Ú
Ú
! %
IQueryValue
Ú
Ú
& 1"
character_expression
Ú
Ú
2 F
)
Ú
Ú
F G
{
Û
Û
 	
return
Ù
Ù
 
new
Ù
Ù
 
FEXP
Ù
Ù
 
{
Ù
Ù
 
Function
Ù
Ù
 &
=
Ù
Ù
' (
QueryFunctions
Ù
Ù
) 7
.
Ù
Ù
7 8
Ltrim
Ù
Ù
8 =
,
Ù
Ù
= >

Parameters
Ù
Ù
? I
=
Ù
Ù
J K
new
Ù
Ù
L O
[
Ù
Ù
O P
]
Ù
Ù
P Q
{
Ù
Ù
R S"
character_expression
Ù
Ù
T h
}
Ù
Ù
i j
}
Ù
Ù
k l
;
Ù
Ù
l m
}
ı
ı
 	
public
¸
¸
 
static
¸
¸
 
FEXP
¸
¸
 
TRIM
¸
¸
 
(
¸
¸
  
this
¸
¸
  $
IQueryValue
¸
¸
% 0"
character_expression
¸
¸
1 E
)
¸
¸
E F
{
˝
˝
 	
return
˛
˛
 
new
˛
˛
 
FEXP
˛
˛
 
{
˛
˛
 
Function
˛
˛
 &
=
˛
˛
' (
QueryFunctions
˛
˛
) 7
.
˛
˛
7 8
Trim
˛
˛
8 <
,
˛
˛
< =

Parameters
˛
˛
> H
=
˛
˛
I J
new
˛
˛
K N
[
˛
˛
N O
]
˛
˛
O P
{
˛
˛
Q R"
character_expression
˛
˛
S g
}
˛
˛
h i
}
˛
˛
j k
;
˛
˛
k l
}
ˇ
ˇ
 	
public
ÜÜ 
static
ÜÜ 
FEXP
ÜÜ 
NCHAR
ÜÜ  
(
ÜÜ  !
this
ÜÜ! %
IQueryValue
ÜÜ& 1 
integer_expression
ÜÜ2 D
)
ÜÜD E
{
áá 	
return
àà 
new
àà 
FEXP
àà 
{
àà 
Function
àà &
=
àà' (
QueryFunctions
àà) 7
.
àà7 8
Nchar
àà8 =
,
àà= >

Parameters
àà? I
=
ààJ K
new
ààL O
[
ààO P
]
ààP Q
{
ààR S 
integer_expression
ààT f
}
ààg h
}
àài j
;
ààj k
}
ââ 	
public
ëë 
static
ëë 
FEXP
ëë 
PATINDEX
ëë #
(
ëë# $
this
ëë$ (
IQueryValue
ëë) 4
pattern
ëë5 <
,
ëë< =
IQueryValue
ëë> I

expression
ëëJ T
)
ëëT U
{
íí 	
return
ìì 
new
ìì 
FEXP
ìì 
{
ìì 
Function
ìì &
=
ìì' (
QueryFunctions
ìì) 7
.
ìì7 8
Patindex
ìì8 @
,
ìì@ A

Parameters
ììB L
=
ììM N
new
ììO R
[
ììR S
]
ììS T
{
ììU V
pattern
ììW ^
,
ìì^ _

expression
ìì` j
}
ììk l
}
ììm n
;
ììn o
}
îî 	
public
õõ 
static
õõ 
FEXP
õõ 
	QUOTENAME
õõ $
(
õõ$ %
this
õõ% )
IQueryValue
õõ* 5
character_string
õõ6 F
)
õõF G
{
úú 	
return
ùù 
new
ùù 
FEXP
ùù 
{
ùù 
Function
ùù &
=
ùù' (
QueryFunctions
ùù) 7
.
ùù7 8
	Quotename
ùù8 A
,
ùùA B

Parameters
ùùC M
=
ùùN O
new
ùùP S
[
ùùS T
]
ùùT U
{
ùùV W
character_string
ùùX h
}
ùùi j
}
ùùk l
;
ùùl m
}
ûû 	
public
¶¶ 
static
¶¶ 
FEXP
¶¶ 
	QUOTENAME
¶¶ $
(
¶¶$ %
this
¶¶% )
IQueryValue
¶¶* 5
character_string
¶¶6 F
,
¶¶F G
IQueryValue
¶¶H S
quote_character
¶¶T c
)
¶¶c d
{
ßß 	
return
®® 
new
®® 
FEXP
®® 
{
®® 
Function
®® &
=
®®' (
QueryFunctions
®®) 7
.
®®7 8
	Quotename
®®8 A
,
®®A B

Parameters
®®C M
=
®®N O
new
®®P S
[
®®S T
]
®®T U
{
®®V W
character_string
®®X h
,
®®h i
quote_character
®®j y
}
®®z {
}
®®| }
;
®®} ~
}
©© 	
public
≤≤ 
static
≤≤ 
FEXP
≤≤ 
REPLACE
≤≤ "
(
≤≤" #
this
≤≤# '
IQueryValue
≤≤( 3
string_expression
≤≤4 E
,
≤≤E F
IQueryValue
≤≤G R
string_pattern
≤≤S a
,
≤≤a b
IQueryValue
≤≤c n!
string_replacement≤≤o Å
)≤≤Å Ç
{
≥≥ 	
return
¥¥ 
new
¥¥ 
FEXP
¥¥ 
{
¥¥ 
Function
¥¥ &
=
¥¥' (
QueryFunctions
¥¥) 7
.
¥¥7 8
Replace
¥¥8 ?
,
¥¥? @

Parameters
¥¥A K
=
¥¥L M
new
¥¥N Q
[
¥¥Q R
]
¥¥R S
{
¥¥T U
string_expression
¥¥V g
,
¥¥g h
string_pattern
¥¥i w
,
¥¥w x!
string_replacement¥¥y ã
}¥¥å ç
}¥¥é è
;¥¥è ê
}
µµ 	
public
ΩΩ 
static
ΩΩ 
FEXP
ΩΩ 
	REPLICATE
ΩΩ $
(
ΩΩ$ %
this
ΩΩ% )
IQueryValue
ΩΩ* 5
string_expression
ΩΩ6 G
,
ΩΩG H
IQueryValue
ΩΩI T 
integer_expression
ΩΩU g
)
ΩΩg h
{
ææ 	
return
øø 
new
øø 
FEXP
øø 
{
øø 
Function
øø &
=
øø' (
QueryFunctions
øø) 7
.
øø7 8
	Replicate
øø8 A
,
øøA B

Parameters
øøC M
=
øøN O
new
øøP S
[
øøS T
]
øøT U
{
øøV W
string_expression
øøX i
,
øøi j 
integer_expression
øøk }
}
øø~ 
}øøÄ Å
;øøÅ Ç
}
¿¿ 	
public
«« 
static
«« 
FEXP
«« 
REVERSE
«« "
(
««" #
this
««# '
IQueryValue
««( 3
string_expression
««4 E
)
««E F
{
»» 	
return
…… 
new
…… 
FEXP
…… 
{
…… 
Function
…… &
=
……' (
QueryFunctions
……) 7
.
……7 8
Reverse
……8 ?
,
……? @

Parameters
……A K
=
……L M
new
……N Q
[
……Q R
]
……R S
{
……T U
string_expression
……V g
}
……h i
}
……j k
;
……k l
}
   	
public
““ 
static
““ 
FEXP
““ 
RIGHT
““  
(
““  !
this
““! %
IQueryValue
““& 1"
character_expression
““2 F
,
““F G
IQueryValue
““H S 
integer_expression
““T f
)
““f g
{
”” 	
return
‘‘ 
new
‘‘ 
FEXP
‘‘ 
{
‘‘ 
Function
‘‘ &
=
‘‘' (
QueryFunctions
‘‘) 7
.
‘‘7 8
Right
‘‘8 =
,
‘‘= >

Parameters
‘‘? I
=
‘‘J K
new
‘‘L O
[
‘‘O P
]
‘‘P Q
{
‘‘R S"
character_expression
‘‘T h
,
‘‘h i 
integer_expression
‘‘j |
}
‘‘} ~
}‘‘ Ä
;‘‘Ä Å
}
’’ 	
public
‹‹ 
static
‹‹ 
FEXP
‹‹ 
RTRIM
‹‹  
(
‹‹  !
this
‹‹! %
IQueryValue
‹‹& 1"
character_expression
‹‹2 F
)
‹‹F G
{
›› 	
return
ﬁﬁ 
new
ﬁﬁ 
FEXP
ﬁﬁ 
{
ﬁﬁ 
Function
ﬁﬁ &
=
ﬁﬁ' (
QueryFunctions
ﬁﬁ) 7
.
ﬁﬁ7 8
Rtrim
ﬁﬁ8 =
,
ﬁﬁ= >

Parameters
ﬁﬁ? I
=
ﬁﬁJ K
new
ﬁﬁL O
[
ﬁﬁO P
]
ﬁﬁP Q
{
ﬁﬁR S"
character_expression
ﬁﬁT h
}
ﬁﬁi j
}
ﬁﬁk l
;
ﬁﬁl m
}
ﬂﬂ 	
public
ÊÊ 
static
ÊÊ 
FEXP
ÊÊ 
SOUNDEX
ÊÊ "
(
ÊÊ" #
this
ÊÊ# '
IQueryValue
ÊÊ( 3"
character_expression
ÊÊ4 H
)
ÊÊH I
{
ÁÁ 	
return
ËË 
new
ËË 
FEXP
ËË 
{
ËË 
Function
ËË &
=
ËË' (
QueryFunctions
ËË) 7
.
ËË7 8
Soundex
ËË8 ?
,
ËË? @

Parameters
ËËA K
=
ËËL M
new
ËËN Q
[
ËËQ R
]
ËËR S
{
ËËT U"
character_expression
ËËV j
}
ËËk l
}
ËËm n
;
ËËn o
}
ÈÈ 	
public
 
static
 
FEXP
 
SPACE
  
(
  !
this
! %
IQueryValue
& 1 
integer_expression
2 D
)
D E
{
ÒÒ 	
return
ÚÚ 
new
ÚÚ 
FEXP
ÚÚ 
{
ÚÚ 
Function
ÚÚ &
=
ÚÚ' (
QueryFunctions
ÚÚ) 7
.
ÚÚ7 8
Space
ÚÚ8 =
,
ÚÚ= >

Parameters
ÚÚ? I
=
ÚÚJ K
new
ÚÚL O
[
ÚÚO P
]
ÚÚP Q
{
ÚÚR S 
integer_expression
ÚÚT f
}
ÚÚg h
}
ÚÚi j
;
ÚÚj k
}
ÛÛ 	
public
˙˙ 
static
˙˙ 
FEXP
˙˙ 
STR
˙˙ 
(
˙˙ 
this
˙˙ #
IQueryValue
˙˙$ /
float_expression
˙˙0 @
)
˙˙@ A
{
˚˚ 	
return
¸¸ 
new
¸¸ 
FEXP
¸¸ 
{
¸¸ 
Function
¸¸ &
=
¸¸' (
QueryFunctions
¸¸) 7
.
¸¸7 8
Str
¸¸8 ;
,
¸¸; <

Parameters
¸¸= G
=
¸¸H I
new
¸¸J M
[
¸¸M N
]
¸¸N O
{
¸¸P Q
float_expression
¸¸R b
}
¸¸c d
}
¸¸e f
;
¸¸f g
}
˝˝ 	
public
ÖÖ 
static
ÖÖ 
FEXP
ÖÖ 
STR
ÖÖ 
(
ÖÖ 
this
ÖÖ #
IQueryValue
ÖÖ$ /
float_expression
ÖÖ0 @
,
ÖÖ@ A
IQueryValue
ÖÖB M
length
ÖÖN T
)
ÖÖT U
{
ÜÜ 	
return
áá 
new
áá 
FEXP
áá 
{
áá 
Function
áá &
=
áá' (
QueryFunctions
áá) 7
.
áá7 8
Str
áá8 ;
,
áá; <

Parameters
áá= G
=
ááH I
new
ááJ M
[
ááM N
]
ááN O
{
ááP Q
float_expression
ááR b
,
ááb c
length
áád j
}
áák l
}
áám n
;
áán o
}
àà 	
public
íí 
static
íí 
FEXP
íí 
STR
íí 
(
íí 
this
íí #
IQueryValue
íí$ /
float_expression
íí0 @
,
íí@ A
IQueryValue
ííB M
length
ííN T
,
ííT U
IQueryValue
ííV a
decima
ííb h
)
ííh i
{
ìì 	
return
îî 
new
îî 
FEXP
îî 
{
îî 
Function
îî &
=
îî' (
QueryFunctions
îî) 7
.
îî7 8
Str
îî8 ;
,
îî; <

Parameters
îî= G
=
îîH I
new
îîJ M
[
îîM N
]
îîN O
{
îîP Q
float_expression
îîR b
,
îîb c
length
îîd j
,
îîj k
decima
îîl r
}
îîs t
}
îîu v
;
îîv w
}
ïï 	
public
ûû 
static
ûû 
FEXP
ûû 
STRING_ESCAPE
ûû (
(
ûû( )
this
ûû) -
IQueryValue
ûû. 9
text
ûû: >
,
ûû> ?
IQueryValue
ûû@ K
type
ûûL P
)
ûûP Q
{
üü 	
return
†† 
new
†† 
FEXP
†† 
{
†† 
Function
†† &
=
††' (
QueryFunctions
††) 7
.
††7 8
String_Escape
††8 E
,
††E F

Parameters
††G Q
=
††R S
new
††T W
[
††W X
]
††X Y
{
††Z [
text
††\ `
,
††` a
type
††b f
}
††g h
}
††i j
;
††j k
}
°° 	
public
´´ 
static
´´ 
FEXP
´´ 
STRING_SPLIT
´´ '
(
´´' (
this
´´( ,
IQueryValue
´´- 8
string_expression
´´9 J
,
´´J K
IQueryValue
´´L W
	separator
´´X a
)
´´a b
{
¨¨ 	
return
≠≠ 
new
≠≠ 
FEXP
≠≠ 
{
≠≠ 
Function
≠≠ &
=
≠≠' (
QueryFunctions
≠≠) 7
.
≠≠7 8
String_Split
≠≠8 D
,
≠≠D E

Parameters
≠≠F P
=
≠≠Q R
new
≠≠S V
[
≠≠V W
]
≠≠W X
{
≠≠Y Z
string_expression
≠≠[ l
,
≠≠l m
	separator
≠≠n w
}
≠≠x y
}
≠≠z {
;
≠≠{ |
}
ÆÆ 	
public
∏∏ 
static
∏∏ 
FEXP
∏∏ 
STUFF
∏∏  
(
∏∏  !
this
∏∏! %
IQueryValue
∏∏& 1"
character_expression
∏∏2 F
,
∏∏F G
IQueryValue
∏∏H S
start
∏∏T Y
,
∏∏Y Z
IQueryValue
∏∏[ f
length
∏∏g m
,
∏∏m n
IQueryValue
∏∏o z%
replaceWith_expression∏∏{ ë
)∏∏ë í
{
ππ 	
return
∫∫ 
new
∫∫ 
FEXP
∫∫ 
{
∫∫ 
Function
∫∫ &
=
∫∫' (
QueryFunctions
∫∫) 7
.
∫∫7 8
Stuff
∫∫8 =
,
∫∫= >

Parameters
∫∫? I
=
∫∫J K
new
∫∫L O
[
∫∫O P
]
∫∫P Q
{
∫∫R S"
character_expression
∫∫T h
,
∫∫h i
start
∫∫j o
,
∫∫o p
length
∫∫q w
,
∫∫w x%
replaceWith_expression∫∫y è
}∫∫ê ë
}∫∫í ì
;∫∫ì î
}
ªª 	
public
√√ 
static
√√ 
FEXP
√√ 
	SUBSTRING
√√ $
(
√√$ %
this
√√% )
IQueryValue
√√* 5

expression
√√6 @
,
√√@ A
IQueryValue
√√B M
start
√√N S
)
√√S T
{
ƒƒ 	
return
≈≈ 
new
≈≈ 
FEXP
≈≈ 
{
≈≈ 
Function
≈≈ &
=
≈≈' (
QueryFunctions
≈≈) 7
.
≈≈7 8
	Substring
≈≈8 A
,
≈≈A B

Parameters
≈≈C M
=
≈≈N O
new
≈≈P S
[
≈≈S T
]
≈≈T U
{
≈≈V W

expression
≈≈X b
,
≈≈b c
start
≈≈d i
}
≈≈j k
}
≈≈l m
;
≈≈m n
}
∆∆ 	
public
œœ 
static
œœ 
FEXP
œœ 
	SUBSTRING
œœ $
(
œœ$ %
this
œœ% )
IQueryValue
œœ* 5

expression
œœ6 @
,
œœ@ A
IQueryValue
œœB M
start
œœN S
,
œœS T
IQueryValue
œœU `
length
œœa g
)
œœg h
{
–– 	
return
—— 
new
—— 
FEXP
—— 
{
—— 
Function
—— &
=
——' (
QueryFunctions
——) 7
.
——7 8
	Substring
——8 A
,
——A B

Parameters
——C M
=
——N O
new
——P S
[
——S T
]
——T U
{
——V W

expression
——X b
,
——b c
start
——d i
,
——i j
length
——k q
}
——r s
}
——t u
;
——u v
}
““ 	
public
ŸŸ 
static
ŸŸ 
FEXP
ŸŸ 
UNICODE
ŸŸ "
(
ŸŸ" #
this
ŸŸ# '
IQueryValue
ŸŸ( 3#
ncharacter_expression
ŸŸ4 I
)
ŸŸI J
{
⁄⁄ 	
return
€€ 
new
€€ 
FEXP
€€ 
{
€€ 
Function
€€ &
=
€€' (
QueryFunctions
€€) 7
.
€€7 8
Unicode
€€8 ?
,
€€? @

Parameters
€€A K
=
€€L M
new
€€N Q
[
€€Q R
]
€€R S
{
€€T U#
ncharacter_expression
€€V k
}
€€l m
}
€€n o
;
€€o p
}
‹‹ 	
public
„„ 
static
„„ 
FEXP
„„ 
UPPER
„„  
(
„„  !
this
„„! %
IQueryValue
„„& 1"
character_expression
„„2 F
)
„„F G
{
‰‰ 	
return
ÂÂ 
new
ÂÂ 
FEXP
ÂÂ 
{
ÂÂ 
Function
ÂÂ &
=
ÂÂ' (
QueryFunctions
ÂÂ) 7
.
ÂÂ7 8
Upper
ÂÂ8 =
,
ÂÂ= >

Parameters
ÂÂ? I
=
ÂÂJ K
new
ÂÂL O
[
ÂÂO P
]
ÂÂP Q
{
ÂÂR S"
character_expression
ÂÂT h
}
ÂÂi j
}
ÂÂk l
;
ÂÂl m
}
ÊÊ 	
public
 
static
 
FEXP
 
ACOS
 
(
  
this
  $
IQueryValue
% 0
float_expression
1 A
)
A B
{
ÒÒ 	
return
ÚÚ 
new
ÚÚ 
FEXP
ÚÚ 
{
ÚÚ 
Function
ÚÚ &
=
ÚÚ' (
QueryFunctions
ÚÚ) 7
.
ÚÚ7 8
Acos
ÚÚ8 <
,
ÚÚ< =

Parameters
ÚÚ> H
=
ÚÚI J
new
ÚÚK N
[
ÚÚN O
]
ÚÚO P
{
ÚÚQ R
float_expression
ÚÚS c
}
ÚÚd e
}
ÚÚf g
;
ÚÚg h
}
ÛÛ 	
public
˙˙ 
static
˙˙ 
FEXP
˙˙ 
ASIN
˙˙ 
(
˙˙  
this
˙˙  $
IQueryValue
˙˙% 0
float_expression
˙˙1 A
)
˙˙A B
{
˚˚ 	
return
¸¸ 
new
¸¸ 
FEXP
¸¸ 
{
¸¸ 
Function
¸¸ &
=
¸¸' (
QueryFunctions
¸¸) 7
.
¸¸7 8
Asin
¸¸8 <
,
¸¸< =

Parameters
¸¸> H
=
¸¸I J
new
¸¸K N
[
¸¸N O
]
¸¸O P
{
¸¸Q R
float_expression
¸¸S c
}
¸¸d e
}
¸¸f g
;
¸¸g h
}
˝˝ 	
public
ÑÑ 
static
ÑÑ 
FEXP
ÑÑ 
ATAN
ÑÑ 
(
ÑÑ  
this
ÑÑ  $
IQueryValue
ÑÑ% 0
float_expression
ÑÑ1 A
)
ÑÑA B
{
ÖÖ 	
return
ÜÜ 
new
ÜÜ 
FEXP
ÜÜ 
{
ÜÜ 
Function
ÜÜ &
=
ÜÜ' (
QueryFunctions
ÜÜ) 7
.
ÜÜ7 8
Atan
ÜÜ8 <
,
ÜÜ< =

Parameters
ÜÜ> H
=
ÜÜI J
new
ÜÜK N
[
ÜÜN O
]
ÜÜO P
{
ÜÜQ R
float_expression
ÜÜS c
}
ÜÜd e
}
ÜÜf g
;
ÜÜg h
}
áá 	
public
èè 
static
èè 
FEXP
èè 
ATN2
èè 
(
èè  
this
èè  $
IQueryValue
èè% 0
float_expression1
èè1 B
,
èèB C
IQueryValue
èèD O
float_expression2
èèP a
)
èèa b
{
êê 	
return
ëë 
new
ëë 
FEXP
ëë 
{
ëë 
Function
ëë &
=
ëë' (
QueryFunctions
ëë) 7
.
ëë7 8
Atn2
ëë8 <
,
ëë< =

Parameters
ëë> H
=
ëëI J
new
ëëK N
[
ëëN O
]
ëëO P
{
ëëQ R
float_expression1
ëëS d
,
ëëd e
float_expression2
ëëf w
}
ëëx y
}
ëëz {
;
ëë{ |
}
íí 	
public
ôô 
static
ôô 
FEXP
ôô 
COS
ôô 
(
ôô 
this
ôô #
IQueryValue
ôô$ /
float_expression
ôô0 @
)
ôô@ A
{
öö 	
return
õõ 
new
õõ 
FEXP
õõ 
{
õõ 
Function
õõ &
=
õõ' (
QueryFunctions
õõ) 7
.
õõ7 8
Cos
õõ8 ;
,
õõ; <

Parameters
õõ= G
=
õõH I
new
õõJ M
[
õõM N
]
õõN O
{
õõP Q
float_expression
õõR b
}
õõc d
}
õõe f
;
õõf g
}
úú 	
public
££ 
static
££ 
FEXP
££ 
COT
££ 
(
££ 
this
££ #
IQueryValue
££$ /
float_expression
££0 @
)
££@ A
{
§§ 	
return
•• 
new
•• 
FEXP
•• 
{
•• 
Function
•• &
=
••' (
QueryFunctions
••) 7
.
••7 8
Cot
••8 ;
,
••; <

Parameters
••= G
=
••H I
new
••J M
[
••M N
]
••N O
{
••P Q
float_expression
••R b
}
••c d
}
••e f
;
••f g
}
¶¶ 	
public
≠≠ 
static
≠≠ 
FEXP
≠≠ 
SIN
≠≠ 
(
≠≠ 
this
≠≠ #
IQueryValue
≠≠$ /
float_expression
≠≠0 @
)
≠≠@ A
{
ÆÆ 	
return
ØØ 
new
ØØ 
FEXP
ØØ 
{
ØØ 
Function
ØØ &
=
ØØ' (
QueryFunctions
ØØ) 7
.
ØØ7 8
Sin
ØØ8 ;
,
ØØ; <

Parameters
ØØ= G
=
ØØH I
new
ØØJ M
[
ØØM N
]
ØØN O
{
ØØP Q
float_expression
ØØR b
}
ØØc d
}
ØØe f
;
ØØf g
}
∞∞ 	
public
∑∑ 
static
∑∑ 
FEXP
∑∑ 
TAN
∑∑ 
(
∑∑ 
this
∑∑ #
IQueryValue
∑∑$ /
float_expression
∑∑0 @
)
∑∑@ A
{
∏∏ 	
return
ππ 
new
ππ 
FEXP
ππ 
{
ππ 
Function
ππ &
=
ππ' (
QueryFunctions
ππ) 7
.
ππ7 8
Tan
ππ8 ;
,
ππ; <

Parameters
ππ= G
=
ππH I
new
ππJ M
[
ππM N
]
ππN O
{
ππP Q
float_expression
ππR b
}
ππc d
}
ππe f
;
ππf g
}
∫∫ 	
public
¡¡ 
static
¡¡ 
FEXP
¡¡ 
DEGREES
¡¡ "
(
¡¡" #
this
¡¡# '
IQueryValue
¡¡( 3 
numeric_expression
¡¡4 F
)
¡¡F G
{
¬¬ 	
return
√√ 
new
√√ 
FEXP
√√ 
{
√√ 
Function
√√ &
=
√√' (
QueryFunctions
√√) 7
.
√√7 8
Degrees
√√8 ?
,
√√? @

Parameters
√√A K
=
√√L M
new
√√N Q
[
√√Q R
]
√√R S
{
√√T U 
numeric_expression
√√V h
}
√√i j
}
√√k l
;
√√l m
}
ƒƒ 	
public
ÀÀ 
static
ÀÀ 
FEXP
ÀÀ 
RADIANS
ÀÀ "
(
ÀÀ" #
this
ÀÀ# '
IQueryValue
ÀÀ( 3 
numeric_expression
ÀÀ4 F
)
ÀÀF G
{
ÃÃ 	
return
ÕÕ 
new
ÕÕ 
FEXP
ÕÕ 
{
ÕÕ 
Function
ÕÕ &
=
ÕÕ' (
QueryFunctions
ÕÕ) 7
.
ÕÕ7 8
Radians
ÕÕ8 ?
,
ÕÕ? @

Parameters
ÕÕA K
=
ÕÕL M
new
ÕÕN Q
[
ÕÕQ R
]
ÕÕR S
{
ÕÕT U 
numeric_expression
ÕÕV h
}
ÕÕi j
}
ÕÕk l
;
ÕÕl m
}
ŒŒ 	
public
÷÷ 
static
÷÷ 
FEXP
÷÷ 
ABS
÷÷ 
(
÷÷ 
this
÷÷ #
IQueryValue
÷÷$ / 
numeric_expression
÷÷0 B
)
÷÷B C
{
◊◊ 	
return
ÿÿ 
new
ÿÿ 
FEXP
ÿÿ 
{
ÿÿ 
Function
ÿÿ &
=
ÿÿ' (
QueryFunctions
ÿÿ) 7
.
ÿÿ7 8
Abs
ÿÿ8 ;
,
ÿÿ; <

Parameters
ÿÿ= G
=
ÿÿH I
new
ÿÿJ M
[
ÿÿM N
]
ÿÿN O
{
ÿÿP Q 
numeric_expression
ÿÿR d
}
ÿÿe f
}
ÿÿg h
;
ÿÿh i
}
ŸŸ 	
public
‡‡ 
static
‡‡ 
FEXP
‡‡ 
CEILING
‡‡ "
(
‡‡" #
this
‡‡# '
IQueryValue
‡‡( 3 
numeric_expression
‡‡4 F
)
‡‡F G
{
·· 	
return
‚‚ 
new
‚‚ 
FEXP
‚‚ 
{
‚‚ 
Function
‚‚ &
=
‚‚' (
QueryFunctions
‚‚) 7
.
‚‚7 8
Ceiling
‚‚8 ?
,
‚‚? @

Parameters
‚‚A K
=
‚‚L M
new
‚‚N Q
[
‚‚Q R
]
‚‚R S
{
‚‚T U 
numeric_expression
‚‚V h
}
‚‚i j
}
‚‚k l
;
‚‚l m
}
„„ 	
public
ÍÍ 
static
ÍÍ 
FEXP
ÍÍ 
FLOOR
ÍÍ  
(
ÍÍ  !
this
ÍÍ! %
IQueryValue
ÍÍ& 1 
numeric_expression
ÍÍ2 D
)
ÍÍD E
{
ÎÎ 	
return
ÏÏ 
new
ÏÏ 
FEXP
ÏÏ 
{
ÏÏ 
Function
ÏÏ &
=
ÏÏ' (
QueryFunctions
ÏÏ) 7
.
ÏÏ7 8
Floor
ÏÏ8 =
,
ÏÏ= >

Parameters
ÏÏ? I
=
ÏÏJ K
new
ÏÏL O
[
ÏÏO P
]
ÏÏP Q
{
ÏÏR S 
numeric_expression
ÏÏT f
}
ÏÏg h
}
ÏÏi j
;
ÏÏj k
}
ÌÌ 	
public
ÙÙ 
static
ÙÙ 
FEXP
ÙÙ 
ROUND
ÙÙ  
(
ÙÙ  !
this
ÙÙ! %
IQueryValue
ÙÙ& 1 
numeric_expression
ÙÙ2 D
)
ÙÙD E
{
ıı 	
return
ˆˆ 
new
ˆˆ 
FEXP
ˆˆ 
{
ˆˆ 
Function
ˆˆ &
=
ˆˆ' (
QueryFunctions
ˆˆ) 7
.
ˆˆ7 8
Round
ˆˆ8 =
,
ˆˆ= >

Parameters
ˆˆ? I
=
ˆˆJ K
new
ˆˆL O
[
ˆˆO P
]
ˆˆP Q
{
ˆˆR S 
numeric_expression
ˆˆT f
}
ˆˆg h
}
ˆˆi j
;
ˆˆj k
}
˜˜ 	
public
ˇˇ 
static
ˇˇ 
FEXP
ˇˇ 
ROUND
ˇˇ  
(
ˇˇ  !
this
ˇˇ! %
IQueryValue
ˇˇ& 1 
numeric_expression
ˇˇ2 D
,
ˇˇD E
IQueryValue
ˇˇF Q
length
ˇˇR X
)
ˇˇX Y
{
ÄÄ 	
return
ÅÅ 
new
ÅÅ 
FEXP
ÅÅ 
{
ÅÅ 
Function
ÅÅ &
=
ÅÅ' (
QueryFunctions
ÅÅ) 7
.
ÅÅ7 8
Round
ÅÅ8 =
,
ÅÅ= >

Parameters
ÅÅ? I
=
ÅÅJ K
new
ÅÅL O
[
ÅÅO P
]
ÅÅP Q
{
ÅÅR S 
numeric_expression
ÅÅT f
,
ÅÅf g
length
ÅÅh n
}
ÅÅo p
}
ÅÅq r
;
ÅÅr s
}
ÇÇ 	
public
ãã 
static
ãã 
FEXP
ãã 
ROUND
ãã  
(
ãã  !
this
ãã! %
IQueryValue
ãã& 1 
numeric_expression
ãã2 D
,
ããD E
IQueryValue
ããF Q
length
ããR X
,
ããX Y
IQueryValue
ããZ e
truncate
ããf n
)
ããn o
{
åå 	
return
çç 
new
çç 
FEXP
çç 
{
çç 
Function
çç &
=
çç' (
QueryFunctions
çç) 7
.
çç7 8
Round
çç8 =
,
çç= >

Parameters
çç? I
=
ççJ K
new
ççL O
[
ççO P
]
ççP Q
{
ççR S 
numeric_expression
ççT f
,
ççf g
length
ççh n
,
ççn o
truncate
ççp x
}
ççy z
}
çç{ |
;
çç| }
}
éé 	
public
ïï 
static
ïï 
FEXP
ïï 
SIGN
ïï 
(
ïï  
this
ïï  $
IQueryValue
ïï% 0 
numeric_expression
ïï1 C
)
ïïC D
{
ññ 	
return
óó 
new
óó 
FEXP
óó 
{
óó 
Function
óó &
=
óó' (
QueryFunctions
óó) 7
.
óó7 8
Sign
óó8 <
,
óó< =

Parameters
óó> H
=
óóI J
new
óóK N
[
óóN O
]
óóO P
{
óóQ R 
numeric_expression
óóS e
}
óóf g
}
óóh i
;
óói j
}
òò 	
public
†† 
static
†† 
FEXP
†† 
EXP
†† 
(
†† 
this
†† #
IQueryValue
††$ /
float_expression
††0 @
)
††@ A
{
°° 	
return
¢¢ 
new
¢¢ 
FEXP
¢¢ 
{
¢¢ 
Function
¢¢ &
=
¢¢' (
QueryFunctions
¢¢) 7
.
¢¢7 8
Exp
¢¢8 ;
,
¢¢; <

Parameters
¢¢= G
=
¢¢H I
new
¢¢J M
[
¢¢M N
]
¢¢N O
{
¢¢P Q
float_expression
¢¢R b
}
¢¢c d
}
¢¢e f
;
¢¢f g
}
££ 	
public
™™ 
static
™™ 
FEXP
™™ 
LOG
™™ 
(
™™ 
this
™™ #
IQueryValue
™™$ /
float_expression
™™0 @
)
™™@ A
{
´´ 	
return
¨¨ 
new
¨¨ 
FEXP
¨¨ 
{
¨¨ 
Function
¨¨ &
=
¨¨' (
QueryFunctions
¨¨) 7
.
¨¨7 8
Log
¨¨8 ;
,
¨¨; <

Parameters
¨¨= G
=
¨¨H I
new
¨¨J M
[
¨¨M N
]
¨¨N O
{
¨¨P Q
float_expression
¨¨R b
}
¨¨c d
}
¨¨e f
;
¨¨f g
}
≠≠ 	
public
µµ 
static
µµ 
FEXP
µµ 
LOG
µµ 
(
µµ 
this
µµ #
IQueryValue
µµ$ /
float_expression
µµ0 @
,
µµ@ A
IQueryValue
µµB M
base1
µµN S
)
µµS T
{
∂∂ 	
return
∑∑ 
new
∑∑ 
FEXP
∑∑ 
{
∑∑ 
Function
∑∑ &
=
∑∑' (
QueryFunctions
∑∑) 7
.
∑∑7 8
Log
∑∑8 ;
,
∑∑; <

Parameters
∑∑= G
=
∑∑H I
new
∑∑J M
[
∑∑M N
]
∑∑N O
{
∑∑P Q
float_expression
∑∑R b
,
∑∑b c
base1
∑∑d i
}
∑∑j k
}
∑∑l m
;
∑∑m n
}
∏∏ 	
public
¿¿ 
static
¿¿ 
FEXP
¿¿ 
POWER
¿¿  
(
¿¿  !
this
¿¿! %
IQueryValue
¿¿& 1
float_expression
¿¿2 B
,
¿¿B C
IQueryValue
¿¿D O
y
¿¿P Q
)
¿¿Q R
{
¡¡ 	
return
¬¬ 
new
¬¬ 
FEXP
¬¬ 
{
¬¬ 
Function
¬¬ &
=
¬¬' (
QueryFunctions
¬¬) 7
.
¬¬7 8
Power
¬¬8 =
,
¬¬= >

Parameters
¬¬? I
=
¬¬J K
new
¬¬L O
[
¬¬O P
]
¬¬P Q
{
¬¬R S
float_expression
¬¬T d
,
¬¬d e
y
¬¬f g
}
¬¬h i
}
¬¬j k
;
¬¬k l
}
√√ 	
public
   
static
   
FEXP
   
SQRT
   
(
    
this
    $
IQueryValue
  % 0
float_expression
  1 A
)
  A B
{
ÀÀ 	
return
ÃÃ 
new
ÃÃ 
FEXP
ÃÃ 
{
ÃÃ 
Function
ÃÃ &
=
ÃÃ' (
QueryFunctions
ÃÃ) 7
.
ÃÃ7 8
Sqrt
ÃÃ8 <
,
ÃÃ< =

Parameters
ÃÃ> H
=
ÃÃI J
new
ÃÃK N
[
ÃÃN O
]
ÃÃO P
{
ÃÃQ R
float_expression
ÃÃS c
}
ÃÃd e
}
ÃÃf g
;
ÃÃg h
}
ÕÕ 	
public
‘‘ 
static
‘‘ 
FEXP
‘‘ 
SQUARE
‘‘ !
(
‘‘! "
this
‘‘" &
IQueryValue
‘‘' 2
float_expression
‘‘3 C
)
‘‘C D
{
’’ 	
return
÷÷ 
new
÷÷ 
FEXP
÷÷ 
{
÷÷ 
Function
÷÷ &
=
÷÷' (
QueryFunctions
÷÷) 7
.
÷÷7 8
Square
÷÷8 >
,
÷÷> ?

Parameters
÷÷@ J
=
÷÷K L
new
÷÷M P
[
÷÷P Q
]
÷÷Q R
{
÷÷S T
float_expression
÷÷U e
}
÷÷f g
}
÷÷h i
;
÷÷i j
}
◊◊ 	
public
‹‹ 
static
‹‹ 
FEXP
‹‹ 
STArea
‹‹ !
(
‹‹! "
this
‹‹" &
IQueryValue
‹‹' 2
col
‹‹3 6
)
‹‹6 7
{
‹‹8 9
return
‹‹: @
new
‹‹A D
FEXP
‹‹E I
{
‹‹J K
Function
‹‹L T
=
‹‹U V
QueryFunctions
‹‹W e
.
‹‹e f
STArea
‹‹f l
,
‹‹l m

Parameters
‹‹n x
=
‹‹y z
new
‹‹{ ~
[
‹‹~ 
]‹‹ Ä
{‹‹Å Ç
col‹‹É Ü
}‹‹á à
}‹‹â ä
;‹‹ä ã
}‹‹å ç
public
›› 
static
›› 
FEXP
›› 

STAsBinary
›› %
(
››% &
this
››& *
IQueryValue
››+ 6
col
››7 :
)
››: ;
{
››< =
return
››> D
new
››E H
FEXP
››I M
{
››N O
Function
››P X
=
››Y Z
QueryFunctions
››[ i
.
››i j

STAsBinary
››j t
,
››t u

Parameters››v Ä
=››Å Ç
new››É Ü
[››Ü á
]››á à
{››â ä
col››ã é
}››è ê
}››ë í
;››í ì
}››î ï
public
ﬁﬁ 
static
ﬁﬁ 
FEXP
ﬁﬁ 
STAsText
ﬁﬁ #
(
ﬁﬁ# $
this
ﬁﬁ$ (
IQueryValue
ﬁﬁ) 4
col
ﬁﬁ5 8
)
ﬁﬁ8 9
{
ﬁﬁ: ;
return
ﬁﬁ< B
new
ﬁﬁC F
FEXP
ﬁﬁG K
{
ﬁﬁL M
Function
ﬁﬁN V
=
ﬁﬁW X
QueryFunctions
ﬁﬁY g
.
ﬁﬁg h
STAsText
ﬁﬁh p
,
ﬁﬁp q

Parameters
ﬁﬁr |
=
ﬁﬁ} ~
newﬁﬁ Ç
[ﬁﬁÇ É
]ﬁﬁÉ Ñ
{ﬁﬁÖ Ü
colﬁﬁá ä
}ﬁﬁã å
}ﬁﬁç é
;ﬁﬁé è
}ﬁﬁê ë
public
ﬂﬂ 
static
ﬂﬂ 
FEXP
ﬂﬂ 

STBoundary
ﬂﬂ %
(
ﬂﬂ% &
this
ﬂﬂ& *
IQueryValue
ﬂﬂ+ 6
col
ﬂﬂ7 :
)
ﬂﬂ: ;
{
ﬂﬂ< =
return
ﬂﬂ> D
new
ﬂﬂE H
FEXP
ﬂﬂI M
{
ﬂﬂN O
Function
ﬂﬂP X
=
ﬂﬂY Z
QueryFunctions
ﬂﬂ[ i
.
ﬂﬂi j

STBoundary
ﬂﬂj t
,
ﬂﬂt u

Parametersﬂﬂv Ä
=ﬂﬂÅ Ç
newﬂﬂÉ Ü
[ﬂﬂÜ á
]ﬂﬂá à
{ﬂﬂâ ä
colﬂﬂã é
}ﬂﬂè ê
}ﬂﬂë í
;ﬂﬂí ì
}ﬂﬂî ï
public
‡‡ 
static
‡‡ 
FEXP
‡‡ 
STBuffer
‡‡ #
(
‡‡# $
this
‡‡$ (
IQueryValue
‡‡) 4
col
‡‡5 8
,
‡‡8 9
IQueryValue
‡‡: E
distance
‡‡F N
)
‡‡N O
{
‡‡P Q
return
‡‡R X
new
‡‡Y \
FEXP
‡‡] a
{
‡‡b c
Function
‡‡d l
=
‡‡m n
QueryFunctions
‡‡o }
.
‡‡} ~
STBuffer‡‡~ Ü
,‡‡Ü á

Parameters‡‡à í
=‡‡ì î
new‡‡ï ò
[‡‡ò ô
]‡‡ô ö
{‡‡õ ú
col‡‡ù †
,‡‡† °
distance‡‡¢ ™
}‡‡´ ¨
}‡‡≠ Æ
;‡‡Æ Ø
}‡‡∞ ±
public
·· 
static
·· 
FEXP
·· 

STCentroid
·· %
(
··% &
this
··& *
IQueryValue
··+ 6
col
··7 :
)
··: ;
{
··< =
return
··> D
new
··E H
FEXP
··I M
{
··N O
Function
··P X
=
··Y Z
QueryFunctions
··[ i
.
··i j

STCentroid
··j t
,
··t u

Parameters··v Ä
=··Å Ç
new··É Ü
[··Ü á
]··á à
{··â ä
col··ã é
}··è ê
}··ë í
;··í ì
}··î ï
public
‚‚ 
static
‚‚ 
FEXP
‚‚ 

STContains
‚‚ %
(
‚‚% &
this
‚‚& *
IQueryValue
‚‚+ 6
col
‚‚7 :
,
‚‚: ;
IQueryValue
‚‚< G
other_geometry
‚‚H V
)
‚‚V W
{
‚‚X Y
return
‚‚Z `
new
‚‚a d
FEXP
‚‚e i
{
‚‚j k
Function
‚‚l t
=
‚‚u v
QueryFunctions‚‚w Ö
.‚‚Ö Ü

STContains‚‚Ü ê
,‚‚ê ë

Parameters‚‚í ú
=‚‚ù û
new‚‚ü ¢
[‚‚¢ £
]‚‚£ §
{‚‚• ¶
col‚‚ß ™
,‚‚™ ´
other_geometry‚‚¨ ∫
}‚‚ª º
}‚‚Ω æ
;‚‚æ ø
}‚‚¿ ¡
public
„„ 
static
„„ 
FEXP
„„ 
STConvexHull
„„ '
(
„„' (
this
„„( ,
IQueryValue
„„- 8
col
„„9 <
)
„„< =
{
„„> ?
return
„„@ F
new
„„G J
FEXP
„„K O
{
„„P Q
Function
„„R Z
=
„„[ \
QueryFunctions
„„] k
.
„„k l
STConvexHull
„„l x
,
„„x y

Parameters„„z Ñ
=„„Ö Ü
new„„á ä
[„„ä ã
]„„ã å
{„„ç é
col„„è í
}„„ì î
}„„ï ñ
;„„ñ ó
}„„ò ô
public
‰‰ 
static
‰‰ 
FEXP
‰‰ 
	STCrosses
‰‰ $
(
‰‰$ %
this
‰‰% )
IQueryValue
‰‰* 5
col
‰‰6 9
,
‰‰9 :
IQueryValue
‰‰; F
other_geometry
‰‰G U
)
‰‰U V
{
‰‰W X
return
‰‰Y _
new
‰‰` c
FEXP
‰‰d h
{
‰‰i j
Function
‰‰k s
=
‰‰t u
QueryFunctions‰‰v Ñ
.‰‰Ñ Ö
	STCrosses‰‰Ö é
,‰‰é è

Parameters‰‰ê ö
=‰‰õ ú
new‰‰ù †
[‰‰† °
]‰‰° ¢
{‰‰£ §
col‰‰• ®
,‰‰® ©
other_geometry‰‰™ ∏
}‰‰π ∫
}‰‰ª º
;‰‰º Ω
}‰‰æ ø
public
ÂÂ 
static
ÂÂ 
FEXP
ÂÂ 
STCurveN
ÂÂ #
(
ÂÂ# $
this
ÂÂ$ (
IQueryValue
ÂÂ) 4
col
ÂÂ5 8
,
ÂÂ8 9
IQueryValue
ÂÂ: E
curve_index
ÂÂF Q
)
ÂÂQ R
{
ÂÂS T
return
ÂÂU [
new
ÂÂ\ _
FEXP
ÂÂ` d
{
ÂÂe f
Function
ÂÂg o
=
ÂÂp q
QueryFunctionsÂÂr Ä
.ÂÂÄ Å
STCurveNÂÂÅ â
,ÂÂâ ä

ParametersÂÂã ï
=ÂÂñ ó
newÂÂò õ
[ÂÂõ ú
]ÂÂú ù
{ÂÂû ü
colÂÂ† £
,ÂÂ£ §
curve_indexÂÂ• ∞
}ÂÂ± ≤
}ÂÂ≥ ¥
;ÂÂ¥ µ
}ÂÂ∂ ∑
public
ÊÊ 
static
ÊÊ 
FEXP
ÊÊ 
STCurveToLine
ÊÊ (
(
ÊÊ( )
this
ÊÊ) -
IQueryValue
ÊÊ. 9
col
ÊÊ: =
)
ÊÊ= >
{
ÊÊ? @
return
ÊÊA G
new
ÊÊH K
FEXP
ÊÊL P
{
ÊÊQ R
Function
ÊÊS [
=
ÊÊ\ ]
QueryFunctions
ÊÊ^ l
.
ÊÊl m
STCurveToLine
ÊÊm z
,
ÊÊz {

ParametersÊÊ| Ü
=ÊÊá à
newÊÊâ å
[ÊÊå ç
]ÊÊç é
{ÊÊè ê
colÊÊë î
}ÊÊï ñ
}ÊÊó ò
;ÊÊò ô
}ÊÊö õ
public
ÁÁ 
static
ÁÁ 
FEXP
ÁÁ 
STDifference
ÁÁ '
(
ÁÁ' (
this
ÁÁ( ,
IQueryValue
ÁÁ- 8
col
ÁÁ9 <
,
ÁÁ< =
IQueryValue
ÁÁ> I
other_geometry
ÁÁJ X
)
ÁÁX Y
{
ÁÁZ [
return
ÁÁ\ b
new
ÁÁc f
FEXP
ÁÁg k
{
ÁÁl m
Function
ÁÁn v
=
ÁÁw x
QueryFunctionsÁÁy á
.ÁÁá à
STDifferenceÁÁà î
,ÁÁî ï

ParametersÁÁñ †
=ÁÁ° ¢
newÁÁ£ ¶
[ÁÁ¶ ß
]ÁÁß ®
{ÁÁ© ™
colÁÁ´ Æ
,ÁÁÆ Ø
other_geometryÁÁ∞ æ
}ÁÁø ¿
}ÁÁ¡ ¬
;ÁÁ¬ √
}ÁÁƒ ≈
public
ËË 
static
ËË 
FEXP
ËË 
STDimension
ËË &
(
ËË& '
this
ËË' +
IQueryValue
ËË, 7
col
ËË8 ;
)
ËË; <
{
ËË= >
return
ËË? E
new
ËËF I
FEXP
ËËJ N
{
ËËO P
Function
ËËQ Y
=
ËËZ [
QueryFunctions
ËË\ j
.
ËËj k
STDimension
ËËk v
,
ËËv w

ParametersËËx Ç
=ËËÉ Ñ
newËËÖ à
[ËËà â
]ËËâ ä
{ËËã å
colËËç ê
}ËËë í
}ËËì î
;ËËî ï
}ËËñ ó
public
ÈÈ 
static
ÈÈ 
FEXP
ÈÈ 

STDisjoint
ÈÈ %
(
ÈÈ% &
this
ÈÈ& *
IQueryValue
ÈÈ+ 6
col
ÈÈ7 :
,
ÈÈ: ;
IQueryValue
ÈÈ< G
other_geometry
ÈÈH V
)
ÈÈV W
{
ÈÈX Y
return
ÈÈZ `
new
ÈÈa d
FEXP
ÈÈe i
{
ÈÈj k
Function
ÈÈl t
=
ÈÈu v
QueryFunctionsÈÈw Ö
.ÈÈÖ Ü

STDisjointÈÈÜ ê
,ÈÈê ë

ParametersÈÈí ú
=ÈÈù û
newÈÈü ¢
[ÈÈ¢ £
]ÈÈ£ §
{ÈÈ• ¶
colÈÈß ™
,ÈÈ™ ´
other_geometryÈÈ¨ ∫
}ÈÈª º
}ÈÈΩ æ
;ÈÈæ ø
}ÈÈ¿ ¡
public
ÍÍ 
static
ÍÍ 
FEXP
ÍÍ 

STDistance
ÍÍ %
(
ÍÍ% &
this
ÍÍ& *
IQueryValue
ÍÍ+ 6
col
ÍÍ7 :
,
ÍÍ: ;
IQueryValue
ÍÍ< G
other_geometry
ÍÍH V
)
ÍÍV W
{
ÍÍX Y
return
ÍÍZ `
new
ÍÍa d
FEXP
ÍÍe i
{
ÍÍj k
Function
ÍÍl t
=
ÍÍu v
QueryFunctionsÍÍw Ö
.ÍÍÖ Ü

STDistanceÍÍÜ ê
,ÍÍê ë

ParametersÍÍí ú
=ÍÍù û
newÍÍü ¢
[ÍÍ¢ £
]ÍÍ£ §
{ÍÍ• ¶
colÍÍß ™
,ÍÍ™ ´
other_geometryÍÍ¨ ∫
}ÍÍª º
}ÍÍΩ æ
;ÍÍæ ø
}ÍÍ¿ ¡
public
ÎÎ 
static
ÎÎ 
FEXP
ÎÎ 

STEndpoint
ÎÎ %
(
ÎÎ% &
this
ÎÎ& *
IQueryValue
ÎÎ+ 6
col
ÎÎ7 :
)
ÎÎ: ;
{
ÎÎ< =
return
ÎÎ> D
new
ÎÎE H
FEXP
ÎÎI M
{
ÎÎN O
Function
ÎÎP X
=
ÎÎY Z
QueryFunctions
ÎÎ[ i
.
ÎÎi j

STEndpoint
ÎÎj t
,
ÎÎt u

ParametersÎÎv Ä
=ÎÎÅ Ç
newÎÎÉ Ü
[ÎÎÜ á
]ÎÎá à
{ÎÎâ ä
colÎÎã é
}ÎÎè ê
}ÎÎë í
;ÎÎí ì
}ÎÎî ï
public
ÏÏ 
static
ÏÏ 
FEXP
ÏÏ 

STEnvelope
ÏÏ %
(
ÏÏ% &
this
ÏÏ& *
IQueryValue
ÏÏ+ 6
col
ÏÏ7 :
)
ÏÏ: ;
{
ÏÏ< =
return
ÏÏ> D
new
ÏÏE H
FEXP
ÏÏI M
{
ÏÏN O
Function
ÏÏP X
=
ÏÏY Z
QueryFunctions
ÏÏ[ i
.
ÏÏi j

STEnvelope
ÏÏj t
,
ÏÏt u

ParametersÏÏv Ä
=ÏÏÅ Ç
newÏÏÉ Ü
[ÏÏÜ á
]ÏÏá à
{ÏÏâ ä
colÏÏã é
}ÏÏè ê
}ÏÏë í
;ÏÏí ì
}ÏÏî ï
public
ÌÌ 
static
ÌÌ 
FEXP
ÌÌ 
STEquals
ÌÌ #
(
ÌÌ# $
this
ÌÌ$ (
IQueryValue
ÌÌ) 4
col
ÌÌ5 8
,
ÌÌ8 9
IQueryValue
ÌÌ: E
other_geometry
ÌÌF T
)
ÌÌT U
{
ÌÌV W
return
ÌÌX ^
new
ÌÌ_ b
FEXP
ÌÌc g
{
ÌÌh i
Function
ÌÌj r
=
ÌÌs t
QueryFunctionsÌÌu É
.ÌÌÉ Ñ
STEqualsÌÌÑ å
,ÌÌå ç

ParametersÌÌé ò
=ÌÌô ö
newÌÌõ û
[ÌÌû ü
]ÌÌü †
{ÌÌ° ¢
colÌÌ£ ¶
,ÌÌ¶ ß
other_geometryÌÌ® ∂
}ÌÌ∑ ∏
}ÌÌπ ∫
;ÌÌ∫ ª
}ÌÌº Ω
public
ÓÓ 
static
ÓÓ 
FEXP
ÓÓ 
STExteriorRing
ÓÓ )
(
ÓÓ) *
this
ÓÓ* .
IQueryValue
ÓÓ/ :
col
ÓÓ; >
)
ÓÓ> ?
{
ÓÓ@ A
return
ÓÓB H
new
ÓÓI L
FEXP
ÓÓM Q
{
ÓÓR S
Function
ÓÓT \
=
ÓÓ] ^
QueryFunctions
ÓÓ_ m
.
ÓÓm n
STExteriorRing
ÓÓn |
,
ÓÓ| }

ParametersÓÓ~ à
=ÓÓâ ä
newÓÓã é
[ÓÓé è
]ÓÓè ê
{ÓÓë í
colÓÓì ñ
}ÓÓó ò
}ÓÓô ö
;ÓÓö õ
}ÓÓú ù
public
ÔÔ 
static
ÔÔ 
FEXP
ÔÔ 
STGeometryN
ÔÔ &
(
ÔÔ& '
this
ÔÔ' +
IQueryValue
ÔÔ, 7
col
ÔÔ8 ;
,
ÔÔ; <
IQueryValue
ÔÔ= H

expression
ÔÔI S
)
ÔÔS T
{
ÔÔU V
return
ÔÔW ]
new
ÔÔ^ a
FEXP
ÔÔb f
{
ÔÔg h
Function
ÔÔi q
=
ÔÔr s
QueryFunctionsÔÔt Ç
.ÔÔÇ É
STGeometryNÔÔÉ é
,ÔÔé è

ParametersÔÔê ö
=ÔÔõ ú
newÔÔù †
[ÔÔ† °
]ÔÔ° ¢
{ÔÔ£ §
colÔÔ• ®
,ÔÔ® ©

expressionÔÔ™ ¥
}ÔÔµ ∂
}ÔÔ∑ ∏
;ÔÔ∏ π
}ÔÔ∫ ª
public
 
static
 
FEXP
 
STGeometryType
 )
(
) *
this
* .
IQueryValue
/ :
col
; >
)
> ?
{
@ A
return
B H
new
I L
FEXP
M Q
{
R S
Function
T \
=
] ^
QueryFunctions
_ m
.
m n
STGeometryType
n |
,
| }

Parameters~ à
=â ä
newã é
[é è
]è ê
{ë í
colì ñ
}ó ò
}ô ö
;ö õ
}ú ù
public
ÒÒ 
static
ÒÒ 
FEXP
ÒÒ 
STInteriorRingN
ÒÒ *
(
ÒÒ* +
this
ÒÒ+ /
IQueryValue
ÒÒ0 ;
col
ÒÒ< ?
,
ÒÒ? @
IQueryValue
ÒÒA L

expression
ÒÒM W
)
ÒÒW X
{
ÒÒY Z
return
ÒÒ[ a
new
ÒÒb e
FEXP
ÒÒf j
{
ÒÒk l
Function
ÒÒm u
=
ÒÒv w
QueryFunctionsÒÒx Ü
.ÒÒÜ á
STInteriorRingNÒÒá ñ
,ÒÒñ ó

ParametersÒÒò ¢
=ÒÒ£ §
newÒÒ• ®
[ÒÒ® ©
]ÒÒ© ™
{ÒÒ´ ¨
colÒÒ≠ ∞
,ÒÒ∞ ±

expressionÒÒ≤ º
}ÒÒΩ æ
}ÒÒø ¿
;ÒÒ¿ ¡
}ÒÒ¬ √
public
ÚÚ 
static
ÚÚ 
FEXP
ÚÚ 
STIntersection
ÚÚ )
(
ÚÚ) *
this
ÚÚ* .
IQueryValue
ÚÚ/ :
col
ÚÚ; >
,
ÚÚ> ?
IQueryValue
ÚÚ@ K
other_geometry
ÚÚL Z
)
ÚÚZ [
{
ÚÚ\ ]
return
ÚÚ^ d
new
ÚÚe h
FEXP
ÚÚi m
{
ÚÚn o
Function
ÚÚp x
=
ÚÚy z
QueryFunctionsÚÚ{ â
.ÚÚâ ä
STIntersectionÚÚä ò
,ÚÚò ô

ParametersÚÚö §
=ÚÚ• ¶
newÚÚß ™
[ÚÚ™ ´
]ÚÚ´ ¨
{ÚÚ≠ Æ
colÚÚØ ≤
,ÚÚ≤ ≥
other_geometryÚÚ¥ ¬
}ÚÚ√ ƒ
}ÚÚ≈ ∆
;ÚÚ∆ «
}ÚÚ» …
public
ÛÛ 
static
ÛÛ 
FEXP
ÛÛ 
STIntersects
ÛÛ '
(
ÛÛ' (
this
ÛÛ( ,
IQueryValue
ÛÛ- 8
col
ÛÛ9 <
,
ÛÛ< =
IQueryValue
ÛÛ> I
other_geometry
ÛÛJ X
)
ÛÛX Y
{
ÛÛZ [
return
ÛÛ\ b
new
ÛÛc f
FEXP
ÛÛg k
{
ÛÛl m
Function
ÛÛn v
=
ÛÛw x
QueryFunctionsÛÛy á
.ÛÛá à
STIntersectsÛÛà î
,ÛÛî ï

ParametersÛÛñ †
=ÛÛ° ¢
newÛÛ£ ¶
[ÛÛ¶ ß
]ÛÛß ®
{ÛÛ© ™
colÛÛ´ Æ
,ÛÛÆ Ø
other_geometryÛÛ∞ æ
}ÛÛø ¿
}ÛÛ¡ ¬
;ÛÛ¬ √
}ÛÛƒ ≈
public
ÙÙ 
static
ÙÙ 
FEXP
ÙÙ 

STIsClosed
ÙÙ %
(
ÙÙ% &
this
ÙÙ& *
IQueryValue
ÙÙ+ 6
col
ÙÙ7 :
)
ÙÙ: ;
{
ÙÙ< =
return
ÙÙ> D
new
ÙÙE H
FEXP
ÙÙI M
{
ÙÙN O
Function
ÙÙP X
=
ÙÙY Z
QueryFunctions
ÙÙ[ i
.
ÙÙi j

STIsClosed
ÙÙj t
,
ÙÙt u

ParametersÙÙv Ä
=ÙÙÅ Ç
newÙÙÉ Ü
[ÙÙÜ á
]ÙÙá à
{ÙÙâ ä
colÙÙã é
}ÙÙè ê
}ÙÙë í
;ÙÙí ì
}ÙÙî ï
public
ıı 
static
ıı 
FEXP
ıı 
	STIsEmpty
ıı $
(
ıı$ %
this
ıı% )
IQueryValue
ıı* 5
col
ıı6 9
)
ıı9 :
{
ıı; <
return
ıı= C
new
ııD G
FEXP
ııH L
{
ııM N
Function
ııO W
=
ııX Y
QueryFunctions
ııZ h
.
ııh i
	STIsEmpty
ııi r
,
ıır s

Parameters
ııt ~
=ıı Ä
newııÅ Ñ
[ııÑ Ö
]ııÖ Ü
{ııá à
colııâ å
}ııç é
}ııè ê
;ııê ë
}ııí ì
public
ˆˆ 
static
ˆˆ 
FEXP
ˆˆ 
STIsRing
ˆˆ #
(
ˆˆ# $
this
ˆˆ$ (
IQueryValue
ˆˆ) 4
col
ˆˆ5 8
)
ˆˆ8 9
{
ˆˆ: ;
return
ˆˆ< B
new
ˆˆC F
FEXP
ˆˆG K
{
ˆˆL M
Function
ˆˆN V
=
ˆˆW X
QueryFunctions
ˆˆY g
.
ˆˆg h
STIsRing
ˆˆh p
,
ˆˆp q

Parameters
ˆˆr |
=
ˆˆ} ~
newˆˆ Ç
[ˆˆÇ É
]ˆˆÉ Ñ
{ˆˆÖ Ü
colˆˆá ä
}ˆˆã å
}ˆˆç é
;ˆˆé è
}ˆˆê ë
public
˜˜ 
static
˜˜ 
FEXP
˜˜ 

STIsSimple
˜˜ %
(
˜˜% &
this
˜˜& *
IQueryValue
˜˜+ 6
col
˜˜7 :
)
˜˜: ;
{
˜˜< =
return
˜˜> D
new
˜˜E H
FEXP
˜˜I M
{
˜˜N O
Function
˜˜P X
=
˜˜Y Z
QueryFunctions
˜˜[ i
.
˜˜i j

STIsSimple
˜˜j t
,
˜˜t u

Parameters˜˜v Ä
=˜˜Å Ç
new˜˜É Ü
[˜˜Ü á
]˜˜á à
{˜˜â ä
col˜˜ã é
}˜˜è ê
}˜˜ë í
;˜˜í ì
}˜˜î ï
public
¯¯ 
static
¯¯ 
FEXP
¯¯ 
	STIsValid
¯¯ $
(
¯¯$ %
this
¯¯% )
IQueryValue
¯¯* 5
col
¯¯6 9
)
¯¯9 :
{
¯¯; <
return
¯¯= C
new
¯¯D G
FEXP
¯¯H L
{
¯¯M N
Function
¯¯O W
=
¯¯X Y
QueryFunctions
¯¯Z h
.
¯¯h i
	STIsValid
¯¯i r
,
¯¯r s

Parameters
¯¯t ~
=¯¯ Ä
new¯¯Å Ñ
[¯¯Ñ Ö
]¯¯Ö Ü
{¯¯á à
col¯¯â å
}¯¯ç é
}¯¯è ê
;¯¯ê ë
}¯¯í ì
public
˘˘ 
static
˘˘ 
FEXP
˘˘ 
STLength
˘˘ #
(
˘˘# $
this
˘˘$ (
IQueryValue
˘˘) 4
col
˘˘5 8
)
˘˘8 9
{
˘˘: ;
return
˘˘< B
new
˘˘C F
FEXP
˘˘G K
{
˘˘L M
Function
˘˘N V
=
˘˘W X
QueryFunctions
˘˘Y g
.
˘˘g h
STLength
˘˘h p
,
˘˘p q

Parameters
˘˘r |
=
˘˘} ~
new˘˘ Ç
[˘˘Ç É
]˘˘É Ñ
{˘˘Ö Ü
col˘˘á ä
}˘˘ã å
}˘˘ç é
;˘˘é è
}˘˘ê ë
public
˙˙ 
static
˙˙ 
FEXP
˙˙ 
STNumCurves
˙˙ &
(
˙˙& '
this
˙˙' +
IQueryValue
˙˙, 7
col
˙˙8 ;
)
˙˙; <
{
˙˙= >
return
˙˙? E
new
˙˙F I
FEXP
˙˙J N
{
˙˙O P
Function
˙˙Q Y
=
˙˙Z [
QueryFunctions
˙˙\ j
.
˙˙j k
STNumCurves
˙˙k v
,
˙˙v w

Parameters˙˙x Ç
=˙˙É Ñ
new˙˙Ö à
[˙˙à â
]˙˙â ä
{˙˙ã å
col˙˙ç ê
}˙˙ë í
}˙˙ì î
;˙˙î ï
}˙˙ñ ó
public
˚˚ 
static
˚˚ 
FEXP
˚˚ 
STNumGeometries
˚˚ *
(
˚˚* +
this
˚˚+ /
IQueryValue
˚˚0 ;
col
˚˚< ?
)
˚˚? @
{
˚˚A B
return
˚˚C I
new
˚˚J M
FEXP
˚˚N R
{
˚˚S T
Function
˚˚U ]
=
˚˚^ _
QueryFunctions
˚˚` n
.
˚˚n o
STNumGeometries
˚˚o ~
,
˚˚~ 

Parameters˚˚Ä ä
=˚˚ã å
new˚˚ç ê
[˚˚ê ë
]˚˚ë í
{˚˚ì î
col˚˚ï ò
}˚˚ô ö
}˚˚õ ú
;˚˚ú ù
}˚˚û ü
public
¸¸ 
static
¸¸ 
FEXP
¸¸ 
STNumInteriorRing
¸¸ ,
(
¸¸, -
this
¸¸- 1
IQueryValue
¸¸2 =
col
¸¸> A
)
¸¸A B
{
¸¸C D
return
¸¸E K
new
¸¸L O
FEXP
¸¸P T
{
¸¸U V
Function
¸¸W _
=
¸¸` a
QueryFunctions
¸¸b p
.
¸¸p q 
STNumInteriorRing¸¸q Ç
,¸¸Ç É

Parameters¸¸Ñ é
=¸¸è ê
new¸¸ë î
[¸¸î ï
]¸¸ï ñ
{¸¸ó ò
col¸¸ô ú
}¸¸ù û
}¸¸ü †
;¸¸† °
}¸¸¢ £
public
˝˝ 
static
˝˝ 
FEXP
˝˝ 
STNumPoints
˝˝ &
(
˝˝& '
this
˝˝' +
IQueryValue
˝˝, 7
col
˝˝8 ;
)
˝˝; <
{
˝˝= >
return
˝˝? E
new
˝˝F I
FEXP
˝˝J N
{
˝˝O P
Function
˝˝Q Y
=
˝˝Z [
QueryFunctions
˝˝\ j
.
˝˝j k
STNumPoints
˝˝k v
,
˝˝v w

Parameters˝˝x Ç
=˝˝É Ñ
new˝˝Ö à
[˝˝à â
]˝˝â ä
{˝˝ã å
col˝˝ç ê
}˝˝ë í
}˝˝ì î
;˝˝î ï
}˝˝ñ ó
public
˛˛ 
static
˛˛ 
FEXP
˛˛ 

STOverlaps
˛˛ %
(
˛˛% &
this
˛˛& *
IQueryValue
˛˛+ 6
col
˛˛7 :
,
˛˛: ;
IQueryValue
˛˛< G
other_geometry
˛˛H V
)
˛˛V W
{
˛˛X Y
return
˛˛Z `
new
˛˛a d
FEXP
˛˛e i
{
˛˛j k
Function
˛˛l t
=
˛˛u v
QueryFunctions˛˛w Ö
.˛˛Ö Ü

STOverlaps˛˛Ü ê
,˛˛ê ë

Parameters˛˛í ú
=˛˛ù û
new˛˛ü ¢
[˛˛¢ £
]˛˛£ §
{˛˛• ¶
col˛˛ß ™
,˛˛™ ´
other_geometry˛˛¨ ∫
}˛˛ª º
}˛˛Ω æ
;˛˛æ ø
}˛˛¿ ¡
public
ˇˇ 
static
ˇˇ 
FEXP
ˇˇ 
STPointN
ˇˇ #
(
ˇˇ# $
this
ˇˇ$ (
IQueryValue
ˇˇ) 4
col
ˇˇ5 8
,
ˇˇ8 9
IQueryValue
ˇˇ: E

expression
ˇˇF P
)
ˇˇP Q
{
ˇˇR S
return
ˇˇT Z
new
ˇˇ[ ^
FEXP
ˇˇ_ c
{
ˇˇd e
Function
ˇˇf n
=
ˇˇo p
QueryFunctions
ˇˇq 
.ˇˇ Ä
STPointNˇˇÄ à
,ˇˇà â

Parametersˇˇä î
=ˇˇï ñ
newˇˇó ö
[ˇˇö õ
]ˇˇõ ú
{ˇˇù û
colˇˇü ¢
,ˇˇ¢ £

expressionˇˇ§ Æ
}ˇˇØ ∞
}ˇˇ± ≤
;ˇˇ≤ ≥
}ˇˇ¥ µ
public
ÄÄ 
static
ÄÄ 
FEXP
ÄÄ 
STPointOnSurface
ÄÄ +
(
ÄÄ+ ,
this
ÄÄ, 0
IQueryValue
ÄÄ1 <
col
ÄÄ= @
)
ÄÄ@ A
{
ÄÄB C
return
ÄÄD J
new
ÄÄK N
FEXP
ÄÄO S
{
ÄÄT U
Function
ÄÄV ^
=
ÄÄ_ `
QueryFunctions
ÄÄa o
.
ÄÄo p
STPointOnSurfaceÄÄp Ä
,ÄÄÄ Å

ParametersÄÄÇ å
=ÄÄç é
newÄÄè í
[ÄÄí ì
]ÄÄì î
{ÄÄï ñ
colÄÄó ö
}ÄÄõ ú
}ÄÄù û
;ÄÄû ü
}ÄÄ† °
public
ÅÅ 
static
ÅÅ 
FEXP
ÅÅ 
STRelate
ÅÅ #
(
ÅÅ# $
this
ÅÅ$ (
IQueryValue
ÅÅ) 4
col
ÅÅ5 8
,
ÅÅ8 9
IQueryValue
ÅÅ: E
other_geometry
ÅÅF T
,
ÅÅT U
IQueryValue
ÅÅV a)
intersection_pattern_matrix
ÅÅb }
)
ÅÅ} ~
{ÅÅ Ä
returnÅÅÅ á
newÅÅà ã
FEXPÅÅå ê
{ÅÅë í
FunctionÅÅì õ
=ÅÅú ù
QueryFunctionsÅÅû ¨
.ÅÅ¨ ≠
STRelateÅÅ≠ µ
,ÅÅµ ∂

ParametersÅÅ∑ ¡
=ÅÅ¬ √
newÅÅƒ «
[ÅÅ« »
]ÅÅ» …
{ÅÅ  À
colÅÅÃ œ
,ÅÅœ –
other_geometryÅÅ— ﬂ
,ÅÅﬂ ‡+
intersection_pattern_matrixÅÅ· ¸
}ÅÅ˝ ˛
}ÅÅˇ Ä
;ÅÅÄ Å
}ÅÅÇ É
public
ÇÇ 
static
ÇÇ 
FEXP
ÇÇ 
STSrid
ÇÇ !
(
ÇÇ! "
this
ÇÇ" &
IQueryValue
ÇÇ' 2
col
ÇÇ3 6
)
ÇÇ6 7
{
ÇÇ8 9
return
ÇÇ: @
new
ÇÇA D
FEXP
ÇÇE I
{
ÇÇJ K
Function
ÇÇL T
=
ÇÇU V
QueryFunctions
ÇÇW e
.
ÇÇe f
STSrid
ÇÇf l
,
ÇÇl m

Parameters
ÇÇn x
=
ÇÇy z
new
ÇÇ{ ~
[
ÇÇ~ 
]ÇÇ Ä
{ÇÇÅ Ç
colÇÇÉ Ü
}ÇÇá à
}ÇÇâ ä
;ÇÇä ã
}ÇÇå ç
public
ÉÉ 
static
ÉÉ 
FEXP
ÉÉ 
STStartPoint
ÉÉ '
(
ÉÉ' (
this
ÉÉ( ,
IQueryValue
ÉÉ- 8
col
ÉÉ9 <
)
ÉÉ< =
{
ÉÉ> ?
return
ÉÉ@ F
new
ÉÉG J
FEXP
ÉÉK O
{
ÉÉP Q
Function
ÉÉR Z
=
ÉÉ[ \
QueryFunctions
ÉÉ] k
.
ÉÉk l
STStartPoint
ÉÉl x
,
ÉÉx y

ParametersÉÉz Ñ
=ÉÉÖ Ü
newÉÉá ä
[ÉÉä ã
]ÉÉã å
{ÉÉç é
colÉÉè í
}ÉÉì î
}ÉÉï ñ
;ÉÉñ ó
}ÉÉò ô
public
ÑÑ 
static
ÑÑ 
FEXP
ÑÑ 
STSymDifference
ÑÑ *
(
ÑÑ* +
this
ÑÑ+ /
IQueryValue
ÑÑ0 ;
col
ÑÑ< ?
,
ÑÑ? @
IQueryValue
ÑÑA L
other_geometry
ÑÑM [
)
ÑÑ[ \
{
ÑÑ] ^
return
ÑÑ_ e
new
ÑÑf i
FEXP
ÑÑj n
{
ÑÑo p
Function
ÑÑq y
=
ÑÑz {
QueryFunctionsÑÑ| ä
.ÑÑä ã
STSymDifferenceÑÑã ö
,ÑÑö õ

ParametersÑÑú ¶
=ÑÑß ®
newÑÑ© ¨
[ÑÑ¨ ≠
]ÑÑ≠ Æ
{ÑÑØ ∞
colÑÑ± ¥
,ÑÑ¥ µ
other_geometryÑÑ∂ ƒ
}ÑÑ≈ ∆
}ÑÑ« »
;ÑÑ» …
}ÑÑ  À
public
ÖÖ 
static
ÖÖ 
FEXP
ÖÖ 
	STTouches
ÖÖ $
(
ÖÖ$ %
this
ÖÖ% )
IQueryValue
ÖÖ* 5
col
ÖÖ6 9
,
ÖÖ9 :
IQueryValue
ÖÖ; F
other_geometry
ÖÖG U
)
ÖÖU V
{
ÖÖW X
return
ÖÖY _
new
ÖÖ` c
FEXP
ÖÖd h
{
ÖÖi j
Function
ÖÖk s
=
ÖÖt u
QueryFunctionsÖÖv Ñ
.ÖÖÑ Ö
	STTouchesÖÖÖ é
,ÖÖé è

ParametersÖÖê ö
=ÖÖõ ú
newÖÖù †
[ÖÖ† °
]ÖÖ° ¢
{ÖÖ£ §
colÖÖ• ®
,ÖÖ® ©
other_geometryÖÖ™ ∏
}ÖÖπ ∫
}ÖÖª º
;ÖÖº Ω
}ÖÖæ ø
public
ÜÜ 
static
ÜÜ 
FEXP
ÜÜ 
STUnion
ÜÜ "
(
ÜÜ" #
this
ÜÜ# '
IQueryValue
ÜÜ( 3
col
ÜÜ4 7
,
ÜÜ7 8
IQueryValue
ÜÜ9 D
other_geometry
ÜÜE S
)
ÜÜS T
{
ÜÜU V
return
ÜÜW ]
new
ÜÜ^ a
FEXP
ÜÜb f
{
ÜÜg h
Function
ÜÜi q
=
ÜÜr s
QueryFunctionsÜÜt Ç
.ÜÜÇ É
STUnionÜÜÉ ä
,ÜÜä ã

ParametersÜÜå ñ
=ÜÜó ò
newÜÜô ú
[ÜÜú ù
]ÜÜù û
{ÜÜü †
colÜÜ° §
,ÜÜ§ •
other_geometryÜÜ¶ ¥
}ÜÜµ ∂
}ÜÜ∑ ∏
;ÜÜ∏ π
}ÜÜ∫ ª
public
áá 
static
áá 
FEXP
áá 
STWithin
áá #
(
áá# $
this
áá$ (
IQueryValue
áá) 4
col
áá5 8
,
áá8 9
IQueryValue
áá: E
other_geometry
ááF T
)
ááT U
{
ááV W
return
ááX ^
new
áá_ b
FEXP
áác g
{
ááh i
Function
ááj r
=
áás t
QueryFunctionsááu É
.ááÉ Ñ
STWithinááÑ å
,ááå ç

Parametersááé ò
=ááô ö
newááõ û
[ááû ü
]ááü †
{áá° ¢
coláá£ ¶
,áá¶ ß
other_geometryáá® ∂
}áá∑ ∏
}ááπ ∫
;áá∫ ª
}ááº Ω
public
àà 
static
àà 
FEXP
àà 
STX
àà 
(
àà 
this
àà #
IQueryValue
àà$ /
col
àà0 3
)
àà3 4
{
àà5 6
return
àà7 =
new
àà> A
FEXP
ààB F
{
ààG H
Function
ààI Q
=
ààR S
QueryFunctions
ààT b
.
ààb c
STX
ààc f
,
ààf g

Parameters
ààh r
=
ààs t
new
ààu x
[
ààx y
]
àày z
{
àà{ |
colàà} Ä
}ààÅ Ç
}ààÉ Ñ
;ààÑ Ö
}ààÜ á
public
ââ 
static
ââ 
FEXP
ââ 
STY
ââ 
(
ââ 
this
ââ #
IQueryValue
ââ$ /
col
ââ0 3
)
ââ3 4
{
ââ5 6
return
ââ7 =
new
ââ> A
FEXP
ââB F
{
ââG H
Function
ââI Q
=
ââR S
QueryFunctions
ââT b
.
ââb c
STY
ââc f
,
ââf g

Parameters
ââh r
=
ââs t
new
ââu x
[
ââx y
]
âây z
{
ââ{ |
colââ} Ä
}ââÅ Ç
}ââÉ Ñ
;ââÑ Ö
}ââÜ á
public
ãã 
static
ãã 
FEXP
ãã !
CollectionAggregate
ãã .
(
ãã. /
this
ãã/ 3
IQueryValue
ãã4 ?
col
ãã@ C
)
ããC D
{
ããE F
return
ããG M
new
ããN Q
FEXP
ããR V
{
ããW X
Function
ããY a
=
ããb c
QueryFunctions
ããd r
.
ããr s"
CollectionAggregateããs Ü
,ããÜ á

Parametersããà í
=ããì î
newããï ò
[ããò ô
]ããô ö
{ããõ ú
colããù †
}ãã° ¢
}ãã£ §
;ãã§ •
}ãã¶ ß
public
åå 
static
åå 
FEXP
åå !
ConvexHullAggregate
åå .
(
åå. /
this
åå/ 3
IQueryValue
åå4 ?
col
åå@ C
)
ååC D
{
ååE F
return
ååG M
new
ååN Q
FEXP
ååR V
{
ååW X
Function
ååY a
=
ååb c
QueryFunctions
ååd r
.
åår s"
ConvexHullAggregateåås Ü
,ååÜ á

Parametersååà í
=ååì î
newååï ò
[ååò ô
]ååô ö
{ååõ ú
colååù †
}åå° ¢
}åå£ §
;åå§ •
}åå¶ ß
public
çç 
static
çç 
FEXP
çç 
EnvelopeAggregate
çç ,
(
çç, -
this
çç- 1
IQueryValue
çç2 =
col
çç> A
)
ççA B
{
ççC D
return
ççE K
new
ççL O
FEXP
ççP T
{
ççU V
Function
ççW _
=
çç` a
QueryFunctions
ççb p
.
ççp q 
EnvelopeAggregateççq Ç
,ççÇ É

ParametersççÑ é
=ççè ê
newççë î
[ççî ï
]ççï ñ
{ççó ò
colççô ú
}ççù û
}ççü †
;çç† °
}çç¢ £
public
éé 
static
éé 
FEXP
éé 
UnionAggregate
éé )
(
éé) *
this
éé* .
IQueryValue
éé/ :
col
éé; >
)
éé> ?
{
éé@ A
return
ééB H
new
ééI L
FEXP
ééM Q
{
ééR S
Function
ééT \
=
éé] ^
QueryFunctions
éé_ m
.
éém n
UnionAggregate
één |
,
éé| }

Parameterséé~ à
=ééâ ä
newééã é
[ééé è
]ééè ê
{ééë í
colééì ñ
}ééó ò
}ééô ö
;ééö õ
}ééú ù
public
êê 
static
êê 
FEXP
êê 
STGeomFromText
êê )
(
êê) *
this
êê* .
IQueryValue
êê/ :
col
êê; >
,
êê> ?
IQueryValue
êê@ K
SRID
êêL P
)
êêP Q
{
êêR S
return
êêT Z
new
êê[ ^
FEXP
êê_ c
{
êêd e
Function
êêf n
=
êêo p
QueryFunctions
êêq 
.êê Ä
STGeomFromTextêêÄ é
,êêé è

Parametersêêê ö
=êêõ ú
newêêù †
[êê† °
]êê° ¢
{êê£ §
colêê• ®
,êê® ©
SRIDêê™ Æ
}êêØ ∞
}êê± ≤
;êê≤ ≥
}êê¥ µ
public
ëë 
static
ëë 
FEXP
ëë 
STPointFromText
ëë *
(
ëë* +
this
ëë+ /
IQueryValue
ëë0 ;
col
ëë< ?
,
ëë? @
IQueryValue
ëëA L
SRID
ëëM Q
)
ëëQ R
{
ëëS T
return
ëëU [
new
ëë\ _
FEXP
ëë` d
{
ëëe f
Function
ëëg o
=
ëëp q
QueryFunctionsëër Ä
.ëëÄ Å
STPointFromTextëëÅ ê
,ëëê ë

Parametersëëí ú
=ëëù û
newëëü ¢
[ëë¢ £
]ëë£ §
{ëë• ¶
colëëß ™
,ëë™ ´
SRIDëë¨ ∞
}ëë± ≤
}ëë≥ ¥
;ëë¥ µ
}ëë∂ ∑
public
íí 
static
íí 
FEXP
íí 
STLineFromText
íí )
(
íí) *
this
íí* .
IQueryValue
íí/ :
col
íí; >
,
íí> ?
IQueryValue
íí@ K
SRID
ííL P
)
ííP Q
{
ííR S
return
ííT Z
new
íí[ ^
FEXP
íí_ c
{
ííd e
Function
ííf n
=
íío p
QueryFunctions
ííq 
.íí Ä
STLineFromTextííÄ é
,ííé è

Parametersííê ö
=ííõ ú
newííù †
[íí† °
]íí° ¢
{íí£ §
colíí• ®
,íí® ©
SRIDíí™ Æ
}ííØ ∞
}íí± ≤
;íí≤ ≥
}íí¥ µ
public
ìì 
static
ìì 
FEXP
ìì 
STPolyFromText
ìì )
(
ìì) *
this
ìì* .
IQueryValue
ìì/ :
col
ìì; >
,
ìì> ?
IQueryValue
ìì@ K
SRID
ììL P
)
ììP Q
{
ììR S
return
ììT Z
new
ìì[ ^
FEXP
ìì_ c
{
ììd e
Function
ììf n
=
ììo p
QueryFunctions
ììq 
.ìì Ä
STPolyFromTextììÄ é
,ììé è

Parametersììê ö
=ììõ ú
newììù †
[ìì† °
]ìì° ¢
{ìì£ §
colìì• ®
,ìì® ©
SRIDìì™ Æ
}ììØ ∞
}ìì± ≤
;ìì≤ ≥
}ìì¥ µ
public
îî 
static
îî 
FEXP
îî 
STMPointFromText
îî +
(
îî+ ,
this
îî, 0
IQueryValue
îî1 <
col
îî= @
,
îî@ A
IQueryValue
îîB M
SRID
îîN R
)
îîR S
{
îîT U
return
îîV \
new
îî] `
FEXP
îîa e
{
îîf g
Function
îîh p
=
îîq r
QueryFunctionsîîs Å
.îîÅ Ç 
STMPointFromTextîîÇ í
,îîí ì

Parametersîîî û
=îîü †
newîî° §
[îî§ •
]îî• ¶
{îîß ®
colîî© ¨
,îî¨ ≠
SRIDîîÆ ≤
}îî≥ ¥
}îîµ ∂
;îî∂ ∑
}îî∏ π
public
ïï 
static
ïï 
FEXP
ïï 
STMLineFromText
ïï *
(
ïï* +
this
ïï+ /
IQueryValue
ïï0 ;
col
ïï< ?
,
ïï? @
IQueryValue
ïïA L
SRID
ïïM Q
)
ïïQ R
{
ïïS T
return
ïïU [
new
ïï\ _
FEXP
ïï` d
{
ïïe f
Function
ïïg o
=
ïïp q
QueryFunctionsïïr Ä
.ïïÄ Å
STMLineFromTextïïÅ ê
,ïïê ë

Parametersïïí ú
=ïïù û
newïïü ¢
[ïï¢ £
]ïï£ §
{ïï• ¶
colïïß ™
,ïï™ ´
SRIDïï¨ ∞
}ïï± ≤
}ïï≥ ¥
;ïï¥ µ
}ïï∂ ∑
public
ññ 
static
ññ 
FEXP
ññ 
STMPolyFromText
ññ *
(
ññ* +
this
ññ+ /
IQueryValue
ññ0 ;
col
ññ< ?
,
ññ? @
IQueryValue
ññA L
SRID
ññM Q
)
ññQ R
{
ññS T
return
ññU [
new
ññ\ _
FEXP
ññ` d
{
ññe f
Function
ññg o
=
ññp q
QueryFunctionsññr Ä
.ññÄ Å
STMPolyFromTextññÅ ê
,ññê ë

Parametersññí ú
=ññù û
newññü ¢
[ññ¢ £
]ññ£ §
{ññ• ¶
colññß ™
,ññ™ ´
SRIDññ¨ ∞
}ññ± ≤
}ññ≥ ¥
;ññ¥ µ
}ññ∂ ∑
public
óó 
static
óó 
FEXP
óó  
STGeomCollFromText
óó -
(
óó- .
this
óó. 2
IQueryValue
óó3 >
col
óó? B
,
óóB C
IQueryValue
óóD O
SRID
óóP T
)
óóT U
{
óóV W
return
óóX ^
new
óó_ b
FEXP
óóc g
{
óóh i
Function
óój r
=
óós t
QueryFunctionsóóu É
.óóÉ Ñ"
STGeomCollFromTextóóÑ ñ
,óóñ ó

Parametersóóò ¢
=óó£ §
newóó• ®
[óó® ©
]óó© ™
{óó´ ¨
colóó≠ ∞
,óó∞ ±
SRIDóó≤ ∂
}óó∑ ∏
}óóπ ∫
;óó∫ ª
}óóº Ω
public
òò 
static
òò 
FEXP
òò 
STGeomFromWKB
òò (
(
òò( )
this
òò) -
IQueryValue
òò. 9
col
òò: =
,
òò= >
IQueryValue
òò? J
SRID
òòK O
)
òòO P
{
òòQ R
return
òòS Y
new
òòZ ]
FEXP
òò^ b
{
òòc d
Function
òòe m
=
òòn o
QueryFunctions
òòp ~
.
òò~ 
STGeomFromWKBòò å
,òòå ç

Parametersòòé ò
=òòô ö
newòòõ û
[òòû ü
]òòü †
{òò° ¢
colòò£ ¶
,òò¶ ß
SRIDòò® ¨
}òò≠ Æ
}òòØ ∞
;òò∞ ±
}òò≤ ≥
public
ôô 
static
ôô 
FEXP
ôô 
STPointFromWKB
ôô )
(
ôô) *
this
ôô* .
IQueryValue
ôô/ :
col
ôô; >
,
ôô> ?
IQueryValue
ôô@ K
SRID
ôôL P
)
ôôP Q
{
ôôR S
return
ôôT Z
new
ôô[ ^
FEXP
ôô_ c
{
ôôd e
Function
ôôf n
=
ôôo p
QueryFunctions
ôôq 
.ôô Ä
STPointFromWKBôôÄ é
,ôôé è

Parametersôôê ö
=ôôõ ú
newôôù †
[ôô† °
]ôô° ¢
{ôô£ §
colôô• ®
,ôô® ©
SRIDôô™ Æ
}ôôØ ∞
}ôô± ≤
;ôô≤ ≥
}ôô¥ µ
public
öö 
static
öö 
FEXP
öö 
STLineFromWKB
öö (
(
öö( )
this
öö) -
IQueryValue
öö. 9
col
öö: =
,
öö= >
IQueryValue
öö? J
SRID
ööK O
)
ööO P
{
ööQ R
return
ööS Y
new
ööZ ]
FEXP
öö^ b
{
ööc d
Function
ööe m
=
öön o
QueryFunctions
ööp ~
.
öö~ 
STLineFromWKBöö å
,ööå ç

Parametersööé ò
=ööô ö
newööõ û
[ööû ü
]ööü †
{öö° ¢
colöö£ ¶
,öö¶ ß
SRIDöö® ¨
}öö≠ Æ
}ööØ ∞
;öö∞ ±
}öö≤ ≥
public
õõ 
static
õõ 
FEXP
õõ 
STPolyFromWKB
õõ (
(
õõ( )
this
õõ) -
IQueryValue
õõ. 9
col
õõ: =
,
õõ= >
IQueryValue
õõ? J
SRID
õõK O
)
õõO P
{
õõQ R
return
õõS Y
new
õõZ ]
FEXP
õõ^ b
{
õõc d
Function
õõe m
=
õõn o
QueryFunctions
õõp ~
.
õõ~ 
STPolyFromWKBõõ å
,õõå ç

Parametersõõé ò
=õõô ö
newõõõ û
[õõû ü
]õõü †
{õõ° ¢
colõõ£ ¶
,õõ¶ ß
SRIDõõ® ¨
}õõ≠ Æ
}õõØ ∞
;õõ∞ ±
}õõ≤ ≥
public
úú 
static
úú 
FEXP
úú 
STMPointFromWKB
úú *
(
úú* +
this
úú+ /
IQueryValue
úú0 ;
col
úú< ?
,
úú? @
IQueryValue
úúA L
SRID
úúM Q
)
úúQ R
{
úúS T
return
úúU [
new
úú\ _
FEXP
úú` d
{
úúe f
Function
úúg o
=
úúp q
QueryFunctionsúúr Ä
.úúÄ Å
STMPointFromWKBúúÅ ê
,úúê ë

Parametersúúí ú
=úúù û
newúúü ¢
[úú¢ £
]úú£ §
{úú• ¶
colúúß ™
,úú™ ´
SRIDúú¨ ∞
}úú± ≤
}úú≥ ¥
;úú¥ µ
}úú∂ ∑
public
ùù 
static
ùù 
FEXP
ùù 
STMLineFromWKB
ùù )
(
ùù) *
this
ùù* .
IQueryValue
ùù/ :
col
ùù; >
,
ùù> ?
IQueryValue
ùù@ K
SRID
ùùL P
)
ùùP Q
{
ùùR S
return
ùùT Z
new
ùù[ ^
FEXP
ùù_ c
{
ùùd e
Function
ùùf n
=
ùùo p
QueryFunctions
ùùq 
.ùù Ä
STMLineFromWKBùùÄ é
,ùùé è

Parametersùùê ö
=ùùõ ú
newùùù †
[ùù† °
]ùù° ¢
{ùù£ §
colùù• ®
,ùù® ©
SRIDùù™ Æ
}ùùØ ∞
}ùù± ≤
;ùù≤ ≥
}ùù¥ µ
public
ûû 
static
ûû 
FEXP
ûû 
STMPolyFromWKB
ûû )
(
ûû) *
this
ûû* .
IQueryValue
ûû/ :
col
ûû; >
,
ûû> ?
IQueryValue
ûû@ K
SRID
ûûL P
)
ûûP Q
{
ûûR S
return
ûûT Z
new
ûû[ ^
FEXP
ûû_ c
{
ûûd e
Function
ûûf n
=
ûûo p
QueryFunctions
ûûq 
.ûû Ä
STMPolyFromWKBûûÄ é
,ûûé è

Parametersûûê ö
=ûûõ ú
newûûù †
[ûû† °
]ûû° ¢
{ûû£ §
colûû• ®
,ûû® ©
SRIDûû™ Æ
}ûûØ ∞
}ûû± ≤
;ûû≤ ≥
}ûû¥ µ
public
üü 
static
üü 
FEXP
üü 
STGeomCollFromWKB
üü ,
(
üü, -
this
üü- 1
IQueryValue
üü2 =
col
üü> A
,
üüA B
IQueryValue
üüC N
SRID
üüO S
)
üüS T
{
üüU V
return
üüW ]
new
üü^ a
FEXP
üüb f
{
üüg h
Function
üüi q
=
üür s
QueryFunctionsüüt Ç
.üüÇ É!
STGeomCollFromWKBüüÉ î
,üüî ï

Parametersüüñ †
=üü° ¢
newüü£ ¶
[üü¶ ß
]üüß ®
{üü© ™
colüü´ Æ
,üüÆ Ø
SRIDüü∞ ¥
}üüµ ∂
}üü∑ ∏
;üü∏ π
}üü∫ ª
public
†† 
static
†† 
FEXP
†† 
GeomFromGML
†† &
(
††& '
this
††' +
IQueryValue
††, 7
col
††8 ;
,
††; <
IQueryValue
††= H
SRID
††I M
)
††M N
{
††O P
return
††Q W
new
††X [
FEXP
††\ `
{
††a b
Function
††c k
=
††l m
QueryFunctions
††n |
.
††| }
GeomFromGML††} à
,††à â

Parameters††ä î
=††ï ñ
new††ó ö
[††ö õ
]††õ ú
{††ù û
col††ü ¢
,††¢ £
SRID††§ ®
}††© ™
}††´ ¨
;††¨ ≠
}††Æ Ø
public
££ 
static
££ 
FEXP
££ 

AsBinaryZM
££ %
(
££% &
this
££& *
IQueryValue
££+ 6
col
££7 :
)
££: ;
{
££< =
return
££> D
new
££E H
FEXP
££I M
{
££N O
Function
££P X
=
££Y Z
QueryFunctions
££[ i
.
££i j

AsBinaryZM
££j t
,
££t u

Parameters££v Ä
=££Å Ç
new££É Ü
[££Ü á
]££á à
{££â ä
col££ã é
}££è ê
}££ë í
;££í ì
}££î ï
public
§§ 
static
§§ 
FEXP
§§ 
AsGml
§§  
(
§§  !
this
§§! %
IQueryValue
§§& 1
col
§§2 5
)
§§5 6
{
§§7 8
return
§§9 ?
new
§§@ C
FEXP
§§D H
{
§§I J
Function
§§K S
=
§§T U
QueryFunctions
§§V d
.
§§d e
AsGml
§§e j
,
§§j k

Parameters
§§l v
=
§§w x
new
§§y |
[
§§| }
]
§§} ~
{§§ Ä
col§§Å Ñ
}§§Ö Ü
}§§á à
;§§à â
}§§ä ã
public
•• 
static
•• 
FEXP
•• 
AsTextZM
•• #
(
••# $
this
••$ (
IQueryValue
••) 4
col
••5 8
)
••8 9
{
••: ;
return
••< B
new
••C F
FEXP
••G K
{
••L M
Function
••N V
=
••W X
QueryFunctions
••Y g
.
••g h
AsTextZM
••h p
,
••p q

Parameters
••r |
=
••} ~
new•• Ç
[••Ç É
]••É Ñ
{••Ö Ü
col••á ä
}••ã å
}••ç é
;••é è
}••ê ë
public
¶¶ 
static
¶¶ 
FEXP
¶¶ 
BufferWithCurves
¶¶ +
(
¶¶+ ,
this
¶¶, 0
IQueryValue
¶¶1 <
col
¶¶= @
,
¶¶@ A
IQueryValue
¶¶B M
distance
¶¶N V
)
¶¶V W
{
¶¶X Y
return
¶¶Z `
new
¶¶a d
FEXP
¶¶e i
{
¶¶j k
Function
¶¶l t
=
¶¶u v
QueryFunctions¶¶w Ö
.¶¶Ö Ü 
BufferWithCurves¶¶Ü ñ
,¶¶ñ ó

Parameters¶¶ò ¢
=¶¶£ §
new¶¶• ®
[¶¶® ©
]¶¶© ™
{¶¶´ ¨
col¶¶≠ ∞
,¶¶∞ ±
distance¶¶≤ ∫
}¶¶ª º
}¶¶Ω æ
;¶¶æ ø
}¶¶¿ ¡
public
ßß 
static
ßß 
FEXP
ßß !
BufferWithTolerance
ßß .
(
ßß. /
this
ßß/ 3
IQueryValue
ßß4 ?
col
ßß@ C
,
ßßC D
IQueryValue
ßßE P
	tolerance
ßßQ Z
,
ßßZ [
IQueryValue
ßß\ g
relative
ßßh p
)
ßßp q
{
ßßr s
return
ßßt z
new
ßß{ ~
FEXPßß É
{ßßÑ Ö
FunctionßßÜ é
=ßßè ê
QueryFunctionsßßë ü
.ßßü †#
BufferWithToleranceßß† ≥
,ßß≥ ¥

Parametersßßµ ø
=ßß¿ ¡
newßß¬ ≈
[ßß≈ ∆
]ßß∆ «
{ßß» …
colßß  Õ
,ßßÕ Œ
	toleranceßßœ ÿ
,ßßÿ Ÿ
relativeßß⁄ ‚
}ßß„ ‰
}ßßÂ Ê
;ßßÊ Á
}ßßË È
public
®® 
static
®® 
FEXP
®® &
CurveToLineWithTolerance
®® 3
(
®®3 4
this
®®4 8
IQueryValue
®®9 D
col
®®E H
,
®®H I
IQueryValue
®®J U
	tolerance
®®V _
,
®®_ `
IQueryValue
®®a l
relative
®®m u
)
®®u v
{
®®w x
return
®®y 
new®®Ä É
FEXP®®Ñ à
{®®â ä
Function®®ã ì
=®®î ï
QueryFunctions®®ñ §
.®®§ •(
CurveToLineWithTolerance®®• Ω
,®®Ω æ

Parameters®®ø …
=®®  À
new®®Ã œ
[®®œ –
]®®– —
{®®“ ”
col®®‘ ◊
,®®◊ ÿ
	tolerance®®Ÿ ‚
,®®‚ „
relative®®‰ Ï
}®®Ì Ó
}®®Ô 
;®® Ò
}®®Ú Û
public
©© 
static
©© 
FEXP
©© 

InstanceOf
©© %
(
©©% &
this
©©& *
IQueryValue
©©+ 6
col
©©7 :
,
©©: ;
IQueryValue
©©< G
geometry_type
©©H U
)
©©U V
{
©©W X
return
©©Y _
new
©©` c
FEXP
©©d h
{
©©i j
Function
©©k s
=
©©t u
QueryFunctions©©v Ñ
.©©Ñ Ö

InstanceOf©©Ö è
,©©è ê

Parameters©©ë õ
=©©ú ù
new©©û °
[©©° ¢
]©©¢ £
{©©§ •
col©©¶ ©
,©©© ™
geometry_type©©´ ∏
}©©π ∫
}©©ª º
;©©º Ω
}©©æ ø
public
™™ 
static
™™ 
FEXP
™™ 
Filter
™™ !
(
™™! "
this
™™" &
IQueryValue
™™' 2
col
™™3 6
,
™™6 7
IQueryValue
™™8 C
other_geometry
™™D R
)
™™R S
{
™™T U
return
™™V \
new
™™] `
FEXP
™™a e
{
™™f g
Function
™™h p
=
™™q r
QueryFunctions™™s Å
.™™Å Ç
Filter™™Ç à
,™™à â

Parameters™™ä î
=™™ï ñ
new™™ó ö
[™™ö õ
]™™õ ú
{™™ù û
col™™ü ¢
,™™¢ £
other_geometry™™§ ≤
}™™≥ ¥
}™™µ ∂
;™™∂ ∑
}™™∏ π
public
´´ 
static
´´ 
FEXP
´´ 
HasM
´´ 
(
´´  
this
´´  $
IQueryValue
´´% 0
col
´´1 4
)
´´4 5
{
´´6 7
return
´´8 >
new
´´? B
FEXP
´´C G
{
´´H I
Function
´´J R
=
´´S T
QueryFunctions
´´U c
.
´´c d
HasM
´´d h
,
´´h i

Parameters
´´j t
=
´´u v
new
´´w z
[
´´z {
]
´´{ |
{
´´} ~
col´´ Ç
}´´É Ñ
}´´Ö Ü
;´´Ü á
}´´à â
public
¨¨ 
static
¨¨ 
FEXP
¨¨ 
HasZ
¨¨ 
(
¨¨  
this
¨¨  $
IQueryValue
¨¨% 0
col
¨¨1 4
)
¨¨4 5
{
¨¨6 7
return
¨¨8 >
new
¨¨? B
FEXP
¨¨C G
{
¨¨H I
Function
¨¨J R
=
¨¨S T
QueryFunctions
¨¨U c
.
¨¨c d
HasZ
¨¨d h
,
¨¨h i

Parameters
¨¨j t
=
¨¨u v
new
¨¨w z
[
¨¨z {
]
¨¨{ |
{
¨¨} ~
col¨¨ Ç
}¨¨É Ñ
}¨¨Ö Ü
;¨¨Ü á
}¨¨à â
public
≠≠ 
static
≠≠ 
FEXP
≠≠ 
IsGeometryNull
≠≠ )
(
≠≠) *
this
≠≠* .
IQueryValue
≠≠/ :
col
≠≠; >
)
≠≠> ?
{
≠≠@ A
return
≠≠B H
new
≠≠I L
FEXP
≠≠M Q
{
≠≠R S
Function
≠≠T \
=
≠≠] ^
QueryFunctions
≠≠_ m
.
≠≠m n
IsNull
≠≠n t
,
≠≠t u

Parameters≠≠v Ä
=≠≠Å Ç
new≠≠É Ü
[≠≠Ü á
]≠≠á à
{≠≠â ä
col≠≠ã é
}≠≠è ê
}≠≠ë í
;≠≠í ì
}≠≠î ï
public
ÆÆ 
static
ÆÆ 
FEXP
ÆÆ 
IsValidDetailed
ÆÆ *
(
ÆÆ* +
this
ÆÆ+ /
IQueryValue
ÆÆ0 ;
col
ÆÆ< ?
)
ÆÆ? @
{
ÆÆA B
return
ÆÆC I
new
ÆÆJ M
FEXP
ÆÆN R
{
ÆÆS T
Function
ÆÆU ]
=
ÆÆ^ _
QueryFunctions
ÆÆ` n
.
ÆÆn o
IsValidDetailed
ÆÆo ~
,
ÆÆ~ 

ParametersÆÆÄ ä
=ÆÆã å
newÆÆç ê
[ÆÆê ë
]ÆÆë í
{ÆÆì î
colÆÆï ò
}ÆÆô ö
}ÆÆõ ú
;ÆÆú ù
}ÆÆû ü
public
ØØ 
static
ØØ 
FEXP
ØØ 
M
ØØ 
(
ØØ 
this
ØØ !
IQueryValue
ØØ" -
col
ØØ. 1
)
ØØ1 2
{
ØØ3 4
return
ØØ5 ;
new
ØØ< ?
FEXP
ØØ@ D
{
ØØE F
Function
ØØG O
=
ØØP Q
QueryFunctions
ØØR `
.
ØØ` a
M
ØØa b
,
ØØb c

Parameters
ØØd n
=
ØØo p
new
ØØq t
[
ØØt u
]
ØØu v
{
ØØw x
col
ØØy |
}
ØØ} ~
}ØØ Ä
;ØØÄ Å
}ØØÇ É
public
∞∞ 
static
∞∞ 
FEXP
∞∞ 
	MakeValid
∞∞ $
(
∞∞$ %
this
∞∞% )
IQueryValue
∞∞* 5
col
∞∞6 9
)
∞∞9 :
{
∞∞; <
return
∞∞= C
new
∞∞D G
FEXP
∞∞H L
{
∞∞M N
Function
∞∞O W
=
∞∞X Y
QueryFunctions
∞∞Z h
.
∞∞h i
	MakeValid
∞∞i r
,
∞∞r s

Parameters
∞∞t ~
=∞∞ Ä
new∞∞Å Ñ
[∞∞Ñ Ö
]∞∞Ö Ü
{∞∞á à
col∞∞â å
}∞∞ç é
}∞∞è ê
;∞∞ê ë
}∞∞í ì
public
±± 
static
±± 
FEXP
±± %
MinDbCompatibilityLevel
±± 2
(
±±2 3
this
±±3 7
IQueryValue
±±8 C
col
±±D G
)
±±G H
{
±±I J
return
±±K Q
new
±±R U
FEXP
±±V Z
{
±±[ \
Function
±±] e
=
±±f g
QueryFunctions
±±h v
.
±±v w&
MinDbCompatibilityLevel±±w é
,±±é è

Parameters±±ê ö
=±±õ ú
new±±ù †
[±±† °
]±±° ¢
{±±£ §
col±±• ®
}±±© ™
}±±´ ¨
;±±¨ ≠
}±±Æ Ø
public
≤≤ 
static
≤≤ 
FEXP
≤≤ 
Reduce
≤≤ !
(
≤≤! "
this
≤≤" &
IQueryValue
≤≤' 2
col
≤≤3 6
,
≤≤6 7
IQueryValue
≤≤8 C
	tolerance
≤≤D M
)
≤≤M N
{
≤≤O P
return
≤≤Q W
new
≤≤X [
FEXP
≤≤\ `
{
≤≤a b
Function
≤≤c k
=
≤≤l m
QueryFunctions
≤≤n |
.
≤≤| }
Reduce≤≤} É
,≤≤É Ñ

Parameters≤≤Ö è
=≤≤ê ë
new≤≤í ï
[≤≤ï ñ
]≤≤ñ ó
{≤≤ò ô
col≤≤ö ù
,≤≤ù û
	tolerance≤≤ü ®
}≤≤© ™
}≤≤´ ¨
;≤≤¨ ≠
}≤≤Æ Ø
public
≥≥ 
static
≥≥ 
FEXP
≥≥ 
ShortestLineTo
≥≥ )
(
≥≥) *
this
≥≥* .
IQueryValue
≥≥/ :
col
≥≥; >
,
≥≥> ?
IQueryValue
≥≥@ K
geography_other
≥≥L [
)
≥≥[ \
{
≥≥] ^
return
≥≥_ e
new
≥≥f i
FEXP
≥≥j n
{
≥≥o p
Function
≥≥q y
=
≥≥z {
QueryFunctions≥≥| ä
.≥≥ä ã
ShortestLineTo≥≥ã ô
,≥≥ô ö

Parameters≥≥õ •
=≥≥¶ ß
new≥≥® ´
[≥≥´ ¨
]≥≥¨ ≠
{≥≥Æ Ø
col≥≥∞ ≥
,≥≥≥ ¥
geography_other≥≥µ ƒ
}≥≥≈ ∆
}≥≥« »
;≥≥» …
}≥≥  À
public
¥¥ 
static
¥¥ 
FEXP
¥¥ 
ToString
¥¥ #
(
¥¥# $
this
¥¥$ (
IQueryValue
¥¥) 4
col
¥¥5 8
)
¥¥8 9
{
¥¥: ;
return
¥¥< B
new
¥¥C F
FEXP
¥¥G K
{
¥¥L M
Function
¥¥N V
=
¥¥W X
QueryFunctions
¥¥Y g
.
¥¥g h
ToString
¥¥h p
,
¥¥p q

Parameters
¥¥r |
=
¥¥} ~
new¥¥ Ç
[¥¥Ç É
]¥¥É Ñ
{¥¥Ö Ü
col¥¥á ä
}¥¥ã å
}¥¥ç é
;¥¥é è
}¥¥ê ë
public
µµ 
static
µµ 
FEXP
µµ 
Z
µµ 
(
µµ 
this
µµ !
IQueryValue
µµ" -
col
µµ. 1
)
µµ1 2
{
µµ3 4
return
µµ5 ;
new
µµ< ?
FEXP
µµ@ D
{
µµE F
Function
µµG O
=
µµP Q
QueryFunctions
µµR `
.
µµ` a
Z
µµa b
,
µµb c

Parameters
µµd n
=
µµo p
new
µµq t
[
µµt u
]
µµu v
{
µµw x
col
µµy |
}
µµ} ~
}µµ Ä
;µµÄ Å
}µµÇ É
public
∂∂ 
static
∂∂ 
FEXP
∂∂ 
EnvelopeAngle
∂∂ (
(
∂∂( )
this
∂∂) -
IQueryValue
∂∂. 9
col
∂∂: =
)
∂∂= >
{
∂∂? @
return
∂∂A G
new
∂∂H K
FEXP
∂∂L P
{
∂∂Q R
Function
∂∂S [
=
∂∂\ ]
QueryFunctions
∂∂^ l
.
∂∂l m
EnvelopeAngle
∂∂m z
,
∂∂z {

Parameters∂∂| Ü
=∂∂á à
new∂∂â å
[∂∂å ç
]∂∂ç é
{∂∂è ê
col∂∂ë î
}∂∂ï ñ
}∂∂ó ò
;∂∂ò ô
}∂∂ö õ
public
∑∑ 
static
∑∑ 
FEXP
∑∑ 
EnvelopeCenter
∑∑ )
(
∑∑) *
this
∑∑* .
IQueryValue
∑∑/ :
col
∑∑; >
)
∑∑> ?
{
∑∑@ A
return
∑∑B H
new
∑∑I L
FEXP
∑∑M Q
{
∑∑R S
Function
∑∑T \
=
∑∑] ^
QueryFunctions
∑∑_ m
.
∑∑m n
EnvelopeCenter
∑∑n |
,
∑∑| }

Parameters∑∑~ à
=∑∑â ä
new∑∑ã é
[∑∑é è
]∑∑è ê
{∑∑ë í
col∑∑ì ñ
}∑∑ó ò
}∑∑ô ö
;∑∑ö õ
}∑∑ú ù
public
∏∏ 
static
∏∏ 
FEXP
∏∏ 
Lat
∏∏ 
(
∏∏ 
this
∏∏ #
IQueryValue
∏∏$ /
col
∏∏0 3
)
∏∏3 4
{
∏∏5 6
return
∏∏7 =
new
∏∏> A
FEXP
∏∏B F
{
∏∏G H
Function
∏∏I Q
=
∏∏R S
QueryFunctions
∏∏T b
.
∏∏b c
Lat
∏∏c f
,
∏∏f g

Parameters
∏∏h r
=
∏∏s t
new
∏∏u x
[
∏∏x y
]
∏∏y z
{
∏∏{ |
col∏∏} Ä
}∏∏Å Ç
}∏∏É Ñ
;∏∏Ñ Ö
}∏∏Ü á
public
ππ 
static
ππ 
FEXP
ππ 
Long
ππ 
(
ππ  
this
ππ  $
IQueryValue
ππ% 0
col
ππ1 4
)
ππ4 5
{
ππ6 7
return
ππ8 >
new
ππ? B
FEXP
ππC G
{
ππH I
Function
ππJ R
=
ππS T
QueryFunctions
ππU c
.
ππc d
Long
ππd h
,
ππh i

Parameters
ππj t
=
ππu v
new
ππw z
[
ππz {
]
ππ{ |
{
ππ} ~
colππ Ç
}ππÉ Ñ
}ππÖ Ü
;ππÜ á
}ππà â
public
∫∫ 
static
∫∫ 
FEXP
∫∫ 
NumRing
∫∫ "
(
∫∫" #
this
∫∫# '
IQueryValue
∫∫( 3
col
∫∫4 7
)
∫∫7 8
{
∫∫9 :
return
∫∫; A
new
∫∫B E
FEXP
∫∫F J
{
∫∫K L
Function
∫∫M U
=
∫∫V W
QueryFunctions
∫∫X f
.
∫∫f g
NumRing
∫∫g n
,
∫∫n o

Parameters
∫∫p z
=
∫∫{ |
new∫∫} Ä
[∫∫Ä Å
]∫∫Å Ç
{∫∫É Ñ
col∫∫Ö à
}∫∫â ä
}∫∫ã å
;∫∫å ç
}∫∫é è
public
ªª 
static
ªª 
FEXP
ªª 
ReorientObject
ªª )
(
ªª) *
this
ªª* .
IQueryValue
ªª/ :
col
ªª; >
)
ªª> ?
{
ªª@ A
return
ªªB H
new
ªªI L
FEXP
ªªM Q
{
ªªR S
Function
ªªT \
=
ªª] ^
QueryFunctions
ªª_ m
.
ªªm n
ReorientObject
ªªn |
,
ªª| }

Parametersªª~ à
=ªªâ ä
newªªã é
[ªªé è
]ªªè ê
{ªªë í
colªªì ñ
}ªªó ò
}ªªô ö
;ªªö õ
}ªªú ù
public
ºº 
static
ºº 
FEXP
ºº 
RingN
ºº  
(
ºº  !
this
ºº! %
IQueryValue
ºº& 1
col
ºº2 5
,
ºº5 6
IQueryValue
ºº7 B

expression
ººC M
)
ººM N
{
ººO P
return
ººQ W
new
ººX [
FEXP
ºº\ `
{
ººa b
Function
ººc k
=
ººl m
QueryFunctions
ººn |
.
ºº| }
RingNºº} Ç
,ººÇ É

ParametersººÑ é
=ººè ê
newººë î
[ººî ï
]ººï ñ
{ººó ò
colººô ú
,ººú ù

expressionººû ®
}ºº© ™
}ºº´ ¨
;ºº¨ ≠
}ººÆ Ø
public
¿¿ 
static
¿¿ 
FEXP
¿¿ 
AVG
¿¿ 
(
¿¿ 
this
¿¿ #
IQueryValue
¿¿$ /

expression
¿¿0 :
)
¿¿: ;
{
¿¿< =
return
¿¿> D
new
¿¿E H
FEXP
¿¿I M
{
¿¿N O
Function
¿¿P X
=
¿¿Y Z
QueryFunctions
¿¿[ i
.
¿¿i j
Avg
¿¿j m
,
¿¿m n

Parameters
¿¿o y
=
¿¿z {
new
¿¿| 
[¿¿ Ä
]¿¿Ä Å
{¿¿Ç É

expression¿¿Ñ é
}¿¿è ê
}¿¿ë í
;¿¿í ì
}¿¿î ï
public
¡¡ 
static
¡¡ 
FEXP
¡¡ 
CHECKSUM_AGG
¡¡ '
(
¡¡' (
this
¡¡( ,
IQueryValue
¡¡- 8

expression
¡¡9 C
)
¡¡C D
{
¡¡E F
return
¡¡G M
new
¡¡N Q
FEXP
¡¡R V
{
¡¡W X
Function
¡¡Y a
=
¡¡b c
QueryFunctions
¡¡d r
.
¡¡r s
Checksum_Agg
¡¡s 
,¡¡ Ä

Parameters¡¡Å ã
=¡¡å ç
new¡¡é ë
[¡¡ë í
]¡¡í ì
{¡¡î ï

expression¡¡ñ †
}¡¡° ¢
}¡¡£ §
;¡¡§ •
}¡¡¶ ß
public
¬¬ 
static
¬¬ 
FEXP
¬¬ 
COUNT
¬¬  
(
¬¬  !
this
¬¬! %
IQueryValue
¬¬& 1

expression
¬¬2 <
)
¬¬< =
{
¬¬> ?
return
¬¬@ F
new
¬¬G J
FEXP
¬¬K O
{
¬¬P Q
Function
¬¬R Z
=
¬¬[ \
QueryFunctions
¬¬] k
.
¬¬k l
Count
¬¬l q
,
¬¬q r

Parameters
¬¬s }
=
¬¬~ 
new¬¬Ä É
[¬¬É Ñ
]¬¬Ñ Ö
{¬¬Ü á

expression¬¬à í
}¬¬ì î
}¬¬ï ñ
;¬¬ñ ó
}¬¬ò ô
public
√√ 
static
√√ 
FEXP
√√ 
	COUNT_BIG
√√ $
(
√√$ %
this
√√% )
IQueryValue
√√* 5

expression
√√6 @
)
√√@ A
{
√√B C
return
√√D J
new
√√K N
FEXP
√√O S
{
√√T U
Function
√√V ^
=
√√_ `
QueryFunctions
√√a o
.
√√o p
	Count_Big
√√p y
,
√√y z

Parameters√√{ Ö
=√√Ü á
new√√à ã
[√√ã å
]√√å ç
{√√é è

expression√√ê ö
}√√õ ú
}√√ù û
;√√û ü
}√√† °
public
ƒƒ 
static
ƒƒ 
FEXP
ƒƒ 
GROUPING
ƒƒ #
(
ƒƒ# $
this
ƒƒ$ (
IQueryValue
ƒƒ) 4

expression
ƒƒ5 ?
)
ƒƒ? @
{
ƒƒA B
return
ƒƒC I
new
ƒƒJ M
FEXP
ƒƒN R
{
ƒƒS T
Function
ƒƒU ]
=
ƒƒ^ _
QueryFunctions
ƒƒ` n
.
ƒƒn o
Grouping
ƒƒo w
,
ƒƒw x

Parametersƒƒy É
=ƒƒÑ Ö
newƒƒÜ â
[ƒƒâ ä
]ƒƒä ã
{ƒƒå ç

expressionƒƒé ò
}ƒƒô ö
}ƒƒõ ú
;ƒƒú ù
}ƒƒû ü
public
≈≈ 
static
≈≈ 
FEXP
≈≈ 
GROUPING_ID
≈≈ &
(
≈≈& '
this
≈≈' +
IQueryValue
≈≈, 7

expression
≈≈8 B
)
≈≈B C
{
≈≈D E
return
≈≈F L
new
≈≈M P
FEXP
≈≈Q U
{
≈≈V W
Function
≈≈X `
=
≈≈a b
QueryFunctions
≈≈c q
.
≈≈q r
Grouping_Id
≈≈r }
,
≈≈} ~

Parameters≈≈ â
=≈≈ä ã
new≈≈å è
[≈≈è ê
]≈≈ê ë
{≈≈í ì

expression≈≈î û
}≈≈ü †
}≈≈° ¢
;≈≈¢ £
}≈≈§ •
public
∆∆ 
static
∆∆ 
FEXP
∆∆ 
MAX
∆∆ 
(
∆∆ 
this
∆∆ #
IQueryValue
∆∆$ /

expression
∆∆0 :
)
∆∆: ;
{
∆∆< =
return
∆∆> D
new
∆∆E H
FEXP
∆∆I M
{
∆∆N O
Function
∆∆P X
=
∆∆Y Z
QueryFunctions
∆∆[ i
.
∆∆i j
Max
∆∆j m
,
∆∆m n

Parameters
∆∆o y
=
∆∆z {
new
∆∆| 
[∆∆ Ä
]∆∆Ä Å
{∆∆Ç É

expression∆∆Ñ é
}∆∆è ê
}∆∆ë í
;∆∆í ì
}∆∆î ï
public
«« 
static
«« 
FEXP
«« 
MIN
«« 
(
«« 
this
«« #
IQueryValue
««$ /

expression
««0 :
)
««: ;
{
««< =
return
««> D
new
««E H
FEXP
««I M
{
««N O
Function
««P X
=
««Y Z
QueryFunctions
««[ i
.
««i j
Min
««j m
,
««m n

Parameters
««o y
=
««z {
new
««| 
[«« Ä
]««Ä Å
{««Ç É

expression««Ñ é
}««è ê
}««ë í
;««í ì
}««î ï
public
»» 
static
»» 
FEXP
»» 
SUM
»» 
(
»» 
this
»» #
IQueryValue
»»$ /

expression
»»0 :
)
»»: ;
{
»»< =
return
»»> D
new
»»E H
FEXP
»»I M
{
»»N O
Function
»»P X
=
»»Y Z
QueryFunctions
»»[ i
.
»»i j
Sum
»»j m
,
»»m n

Parameters
»»o y
=
»»z {
new
»»| 
[»» Ä
]»»Ä Å
{»»Ç É

expression»»Ñ é
}»»è ê
}»»ë í
;»»í ì
}»»î ï
public
…… 
static
…… 
FEXP
…… 
STDEV
……  
(
……  !
this
……! %
IQueryValue
……& 1

expression
……2 <
)
……< =
{
……> ?
return
……@ F
new
……G J
FEXP
……K O
{
……P Q
Function
……R Z
=
……[ \
QueryFunctions
……] k
.
……k l
Stdev
……l q
,
……q r

Parameters
……s }
=
……~ 
new……Ä É
[……É Ñ
]……Ñ Ö
{……Ü á

expression……à í
}……ì î
}……ï ñ
;……ñ ó
}……ò ô
public
   
static
   
FEXP
   
STDEVP
   !
(
  ! "
this
  " &
IQueryValue
  ' 2

expression
  3 =
)
  = >
{
  ? @
return
  A G
new
  H K
FEXP
  L P
{
  Q R
Function
  S [
=
  \ ]
QueryFunctions
  ^ l
.
  l m
Stdevp
  m s
,
  s t

Parameters
  u 
=  Ä Å
new  Ç Ö
[  Ö Ü
]  Ü á
{  à â

expression  ä î
}  ï ñ
}  ó ò
;  ò ô
}  ö õ
public
ÀÀ 
static
ÀÀ 
FEXP
ÀÀ 
VAR
ÀÀ 
(
ÀÀ 
this
ÀÀ #
IQueryValue
ÀÀ$ /

expression
ÀÀ0 :
)
ÀÀ: ;
{
ÀÀ< =
return
ÀÀ> D
new
ÀÀE H
FEXP
ÀÀI M
{
ÀÀN O
Function
ÀÀP X
=
ÀÀY Z
QueryFunctions
ÀÀ[ i
.
ÀÀi j
Var
ÀÀj m
,
ÀÀm n

Parameters
ÀÀo y
=
ÀÀz {
new
ÀÀ| 
[ÀÀ Ä
]ÀÀÄ Å
{ÀÀÇ É

expressionÀÀÑ é
}ÀÀè ê
}ÀÀë í
;ÀÀí ì
}ÀÀî ï
public
ÃÃ 
static
ÃÃ 
FEXP
ÃÃ 
VARP
ÃÃ 
(
ÃÃ  
this
ÃÃ  $
IQueryValue
ÃÃ% 0

expression
ÃÃ1 ;
)
ÃÃ; <
{
ÃÃ= >
return
ÃÃ? E
new
ÃÃF I
FEXP
ÃÃJ N
{
ÃÃO P
Function
ÃÃQ Y
=
ÃÃZ [
QueryFunctions
ÃÃ\ j
.
ÃÃj k
Varp
ÃÃk o
,
ÃÃo p

Parameters
ÃÃq {
=
ÃÃ| }
newÃÃ~ Å
[ÃÃÅ Ç
]ÃÃÇ É
{ÃÃÑ Ö

expressionÃÃÜ ê
}ÃÃë í
}ÃÃì î
;ÃÃî ï
}ÃÃñ ó
}
ŒŒ 
}““ Ü€
àD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\QueryProcessorGeneric.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Database %
{ 
public 

	interface 
IGroupObject !
<! "
TKey" &
,& '
TElement( 0
>0 1
{ 
TKey 
Key 
{ 
get 
; 
set 
; 
} 
int 
Count 
( 
) 
; 
decimal 
? 
Sum 
( 
Func 
< 
TElement "
," #
decimal$ +
?+ ,
>, -
column. 4
)4 5
;5 6
R 	
Max
 
< 
R 
> 
( 
Func 
< 
TElement 
, 
R  !
>! "
column# )
)) *
;* +
R 	
Min
 
< 
R 
> 
( 
Func 
< 
TElement 
, 
R  !
>! "
column# )
)) *
;* +
	IGeometry 
CollectionAggregate %
(% &
Func& *
<* +
TElement+ 3
,3 4
	IGeometry5 >
>> ?
column@ F
)F G
;G H
	IGeometry 
ConvexHullAggregate %
(% &
Func& *
<* +
TElement+ 3
,3 4
	IGeometry5 >
>> ?
column@ F
)F G
;G H
	IGeometry 
EnvelopeAggregate #
(# $
Func$ (
<( )
TElement) 1
,1 2
	IGeometry3 <
>< =
column> D
)D E
;E F
	IGeometry 
UnionAggregate  
(  !
Func! %
<% &
TElement& .
,. /
	IGeometry0 9
>9 :
column; A
)A B
;B C
} 
public 

	interface 
IQuery 
{ 
} 
public   

	interface   
IExecutable    
<    !
TKey  ! %
>  % &
{!! 
IEnumerable"" 
<"" 
TKey"" 
>"" 
Execute"" !
(""! "
)""" #
;""# $
IEnumerable## 
<## 
T## 
>## 
Execute## 
<## 
T##  
>##  !
(##! "
)##" #
;### $
T$$ 	
ExecuteScaler$$
 
<$$ 
T$$ 
>$$ 
($$ 
)$$ 
;$$ 
string%% 
GetQueryForTest%% 
(%% 
)%%  
;%%  !
}&& 
public'' 

	interface'' 
ISelect'' 
<'' 
TKey'' !
,''! "
TPrev''# (
>''( )
:''* +
IQuery'', 2
,''2 3
IExecutable''4 ?
<''? @
TKey''@ D
>''D E
{(( 
IWhere)) 
<)) 
TKey)) 
,)) 
TKey)) 
>)) 
Where))  
())  !

Expression))! +
<))+ ,
Func)), 0
<))0 1
TKey))1 5
,))5 6
bool))7 ;
>)); <
>))< =
	condition))> G
)))G H
;))H I
IOrderBy** 
<** 
TKey** 
,** 
TKey** 
>** 
OrderBy** $
(**$ %

Expression**% /
<**/ 0
Func**0 4
<**4 5
TKey**5 9
,**9 :
object**; A
>**A B
>**B C
columns**D K
)**K L
;**L M
IOrderBy++ 
<++ 
TKey++ 
,++ 
TKey++ 
>++ 
OrderByDesc++ (
(++( )

Expression++) 3
<++3 4
Func++4 8
<++8 9
TKey++9 =
,++= >
object++? E
>++E F
>++F G
columns++H O
)++O P
;++P Q
ISkip,, 
<,, 
TKey,, 
,,, 
TKey,, 
>,, 
Skip,, 
(,, 
int,, "
?,," #
start,,$ )
),,) *
;,,* +
ITake-- 
<-- 
TKey-- 
,-- 
TKey-- 
>-- 
Take-- 
(-- 
int-- "
?--" #
count--$ )
)--) *
;--* +
IEnumerable.. 
<.. 
TKey.. 
>.. 
ExecuteSimpleQuery.. ,
(.., -
SimpleQuery..- 8
simpleQuery..9 D
)..D E
;..E F
}// 
public00 

	interface00 
IWhere00 
<00 
TKey00  
,00  !
TPrev00" '
>00' (
:00) *
IExecutable00+ 6
<006 7
TKey007 ;
>00; <
{11 
ISelect22 
<22 
TResult22 
,22 
TKey22 
>22 
Select22 %
<22% &
TResult22& -
>22- .
(22. /

Expression22/ 9
<229 :
Func22: >
<22> ?
TKey22? C
,22C D
TResult22E L
>22L M
>22M N
columns22O V
=22W X
null22Y ]
)22] ^
;22^ _
IGroupBy33 
<33 
TResult33 
,33 
TKey33 
>33 
GroupBy33  '
<33' (
TResult33( /
>33/ 0
(330 1

Expression331 ;
<33; <
Func33< @
<33@ A
TKey33A E
,33E F
TResult33G N
>33N O
>33O P
columns33Q X
)33X Y
;33Y Z
ISkip44 
<44 
TKey44 
,44 
TKey44 
>44 
Skip44 
(44 
int44 "
?44" #
start44$ )
)44) *
;44* +
ITake55 
<55 
TKey55 
,55 
TKey55 
>55 
Take55 
(55 
int55 "
?55" #
count55$ )
)55) *
;55* +
IOrderBy66 
<66 
TKey66 
,66 
TKey66 
>66 
OrderBy66 $
(66$ %

Expression66% /
<66/ 0
Func660 4
<664 5
TKey665 9
,669 :
object66; A
>66A B
>66B C
columns66D K
)66K L
;66L M
IOrderBy77 
<77 
TKey77 
,77 
TKey77 
>77 
OrderByDesc77 (
(77( )

Expression77) 3
<773 4
Func774 8
<778 9
TKey779 =
,77= >
object77? E
>77E F
>77F G
columns77H O
)77O P
;77P Q
int88 
Count88 
(88 
)88 
;88 
}99 
public:: 

	interface:: 
IGroupBy:: 
<:: 
TKey:: "
,::" #
TElement::$ ,
>::, -
:::. /
IExecutable::0 ;
<::; <
TKey::< @
>::@ A
{;; 
ISelect<< 
<<< 
TResult<< 
,<< 
TKey<< 
><< 
Select<< %
<<<% &
TResult<<& -
><<- .
(<<. /

Expression<</ 9
<<<9 :
Func<<: >
<<<> ?
IGroupObject<<? K
<<<K L
TKey<<L P
,<<P Q
TElement<<R Z
><<Z [
,<<[ \
TResult<<] d
><<d e
><<e f
columns<<g n
=<<o p
null<<q u
)<<u v
;<<v w
int== 
Count== 
(== 
)== 
;== 
}>> 
public?? 

	interface?? 
IOrderBy?? 
<?? 
TKey?? "
,??" #
TPrev??$ )
>??) *
:??+ ,
IExecutable??- 8
<??8 9
TKey??9 =
>??= >
{@@ 
IOrderByAA 
<AA 
TKeyAA 
,AA 
TKeyAA 
>AA 
OrderByAA $
(AA$ %

ExpressionAA% /
<AA/ 0
FuncAA0 4
<AA4 5
TKeyAA5 9
,AA9 :
objectAA; A
>AAA B
>AAB C
columnsAAD K
)AAK L
;AAL M
IOrderByBB 
<BB 
TKeyBB 
,BB 
TKeyBB 
>BB 
OrderByDescBB (
(BB( )

ExpressionBB) 3
<BB3 4
FuncBB4 8
<BB8 9
TKeyBB9 =
,BB= >
objectBB? E
>BBE F
>BBF G
columnsBBH O
)BBO P
;BBP Q
ISkipCC 
<CC 
TKeyCC 
,CC 
TKeyCC 
>CC 
SkipCC 
(CC 
intCC "
?CC" #
startCC$ )
)CC) *
;CC* +
ITakeDD 
<DD 
TKeyDD 
,DD 
TKeyDD 
>DD 
TakeDD 
(DD 
intDD "
?DD" #
countDD$ )
)DD) *
;DD* +
}GG 
publicHH 

	interfaceHH 
ISkipHH 
<HH 
TKeyHH 
,HH  
TPrevHH! &
>HH& '
:HH( )
IExecutableHH* 5
<HH5 6
TKeyHH6 :
>HH: ;
{II 
ITakeJJ 
<JJ 
TKeyJJ 
,JJ 
TKeyJJ 
>JJ 
TakeJJ 
(JJ 
intJJ "
?JJ" #
countJJ$ )
)JJ) *
;JJ* +
}KK 
publicLL 

	interfaceLL 
ITakeLL 
<LL 
TKeyLL 
,LL  
TPrevLL! &
>LL& '
:LL( )
IExecutableLL* 5
<LL5 6
TKeyLL6 :
>LL: ;
{MM 
}PP 
publicRR 

	interfaceRR 
ICallFunctionRR "
<RR" #
TResultRR# *
>RR* +
{SS 
}UU 
publicWW 

	interfaceWW 
	IGetTableWW 
<WW 
TKeyWW #
>WW# $
:WW% &
IExecutableWW' 2
<WW2 3
TKeyWW3 7
>WW7 8
{XX 
ISelectYY 
<YY 
TResultYY 
,YY 
TKeyYY 
>YY 
SelectYY %
<YY% &
TResultYY& -
>YY- .
(YY. /

ExpressionYY/ 9
<YY9 :
FuncYY: >
<YY> ?
TKeyYY? C
,YYC D
TResultYYE L
>YYL M
>YYM N
columnsYYO V
=YYW X
nullYYY ]
)YY] ^
;YY^ _
IWhereZZ 
<ZZ 
TKeyZZ 
,ZZ 
TKeyZZ 
>ZZ 
WhereZZ  
(ZZ  !

ExpressionZZ! +
<ZZ+ ,
FuncZZ, 0
<ZZ0 1
TKeyZZ1 5
,ZZ5 6
boolZZ7 ;
>ZZ; <
>ZZ< =
	conditionZZ> G
)ZZG H
;ZZH I
IGroupBy[[ 
<[[ 
TResult[[ 
,[[ 
TKey[[ 
>[[ 
GroupBy[[  '
<[[' (
TResult[[( /
>[[/ 0
([[0 1

Expression[[1 ;
<[[; <
Func[[< @
<[[@ A
TKey[[A E
,[[E F
TResult[[G N
>[[N O
>[[O P
columns[[Q X
)[[X Y
;[[Y Z
IOrderBy\\ 
<\\ 
TKey\\ 
,\\ 
TKey\\ 
>\\ 
OrderBy\\ $
(\\$ %

Expression\\% /
<\\/ 0
Func\\0 4
<\\4 5
TKey\\5 9
,\\9 :
object\\; A
>\\A B
>\\B C
columns\\D K
)\\K L
;\\L M
IOrderBy]] 
<]] 
TKey]] 
,]] 
TKey]] 
>]] 
OrderByDesc]] (
(]]( )

Expression]]) 3
<]]3 4
Func]]4 8
<]]8 9
TKey]]9 =
,]]= >
object]]? E
>]]E F
>]]F G
columns]]H O
)]]O P
;]]P Q
ISkip^^ 
<^^ 
TKey^^ 
,^^ 
TKey^^ 
>^^ 
Skip^^ 
(^^ 
int^^ "
?^^" #
start^^$ )
)^^) *
;^^* +
ITake__ 
<__ 
TKey__ 
,__ 
TKey__ 
>__ 
Take__ 
(__ 
int__ "
?__" #
count__$ )
)__) *
;__* +
int`` 
Count`` 
(`` 
)`` 
;`` 
IEnumerableaa 
<aa 
TKeyaa 
>aa 
ExecuteSimpleQueryaa ,
(aa, -
SimpleQueryaa- 8
simpleQueryaa9 D
)aaD E
;aaE F
ResultStatuscc 
Insertcc 
(cc 
TKeycc  
	parametercc! *
,cc* +

Expressioncc, 6
<cc6 7
Funccc7 ;
<cc; <
TKeycc< @
,cc@ A
objectccB H
>ccH I
>ccI J

exceptColsccK U
=ccV W
nullccX \
)cc\ ]
;cc] ^
ResultStatusdd 
Updatedd 
(dd 
TKeydd  
	parameterdd! *
,dd* +

Expressiondd, 6
<dd6 7
Funcdd7 ;
<dd; <
TKeydd< @
,dd@ A
objectddB H
>ddH I
>ddI J
idColsddK Q
,ddQ R

ExpressionddS ]
<dd] ^
Funcdd^ b
<ddb c
TKeyddc g
,ddg h
objectddi o
>ddo p
>ddp q

exceptColsddr |
=dd} ~
null	dd É
,
ddÉ Ñ
bool
ddÖ â
setNull
ddä ë
=
ddí ì
false
ddî ô
)
ddô ö
;
ddö õ
ResultStatusee 
Deleteee 
(ee 
TKeyee  
	parameteree! *
,ee* +

Expressionee, 6
<ee6 7
Funcee7 ;
<ee; <
TKeyee< @
,ee@ A
objecteeB H
>eeH I
>eeI J
idColseeK Q
)eeQ R
;eeR S
ResultStatusff 
Deleteff 
(ff 

Expressionff &
<ff& '
Funcff' +
<ff+ ,
TKeyff, 0
,ff0 1
boolff2 6
>ff6 7
>ff7 8
	conditionff9 B
)ffB C
;ffC D
ResultStatusgg 
Insertgg 
(gg 
IEnumerablegg '
<gg' (
TKeygg( ,
>gg, -
	parametergg. 7
,gg7 8

Expressiongg9 C
<ggC D
FuncggD H
<ggH I
TKeyggI M
,ggM N
objectggO U
>ggU V
>ggV W

exceptColsggX b
=ggc d
nullgge i
)ggi j
;ggj k
ResultStatushh 
Updatehh 
(hh 
IEnumerablehh '
<hh' (
TKeyhh( ,
>hh, -
	parameterhh. 7
,hh7 8

Expressionhh9 C
<hhC D
FunchhD H
<hhH I
TKeyhhI M
,hhM N
objecthhO U
>hhU V
>hhV W
idColshhX ^
,hh^ _

Expressionhh` j
<hhj k
Funchhk o
<hho p
TKeyhhp t
,hht u
objecthhv |
>hh| }
>hh} ~

exceptCols	hh â
=
hhä ã
null
hhå ê
,
hhê ë
bool
hhí ñ
setNull
hhó û
=
hhü †
false
hh° ¶
)
hh¶ ß
;
hhß ®
ResultStatusii 
UpdateManyColumnii %
(ii% &
IEnumerableii& 1
<ii1 2
TKeyii2 6
>ii6 7
	parameterii8 A
,iiA B

ExpressioniiC M
<iiM N
FunciiN R
<iiR S
TKeyiiS W
,iiW X
objectiiY _
>ii_ `
>ii` a
idColsiib h
,iih i

Expressioniij t
<iit u
Funciiu y
<iiy z
TKeyiiz ~
,ii~ 
object
iiÄ Ü
>
iiÜ á
>
iiá à

exceptCols
iiâ ì
=
iiî ï
null
iiñ ö
,
iiö õ
bool
iiú †
setNull
ii° ®
=
ii© ™
false
ii´ ∞
)
ii∞ ±
;
ii± ≤
ResultStatusjj 
InsertManyColumnjj %
(jj% &
IEnumerablejj& 1
<jj1 2
TKeyjj2 6
>jj6 7
	parameterjj8 A
,jjA B
booljjC G
setNulljjH O
=jjP Q
falsejjR W
)jjW X
;jjX Y
ResultStatuskk 
Deletekk 
(kk 
IEnumerablekk '
<kk' (
TKeykk( ,
>kk, -
	parameterkk. 7
,kk7 8

Expressionkk9 C
<kkC D
FunckkD H
<kkH I
TKeykkI M
,kkM N
objectkkO U
>kkU V
>kkV W
idColskkX ^
)kk^ _
;kk_ `
}mm 
publicnn 

	interfacenn 
IGetTableFunctionnn &
<nn& '
TKeynn' +
>nn+ ,
:nn- .
IExecutablenn/ :
<nn: ;
TKeynn; ?
>nn? @
{oo 
ISelectpp 
<pp 
TResultpp 
,pp 
TKeypp 
>pp 
Selectpp %
<pp% &
TResultpp& -
>pp- .
(pp. /

Expressionpp/ 9
<pp9 :
Funcpp: >
<pp> ?
TKeypp? C
,ppC D
TResultppE L
>ppL M
>ppM N
columnsppO V
=ppW X
nullppY ]
)pp] ^
;pp^ _
IWhereqq 
<qq 
TKeyqq 
,qq 
TKeyqq 
>qq 
Whereqq  
(qq  !

Expressionqq! +
<qq+ ,
Funcqq, 0
<qq0 1
TKeyqq1 5
,qq5 6
boolqq7 ;
>qq; <
>qq< =
	conditionqq> G
)qqG H
;qqH I
IGroupByrr 
<rr 
TResultrr 
,rr 
TKeyrr 
>rr 
GroupByrr  '
<rr' (
TResultrr( /
>rr/ 0
(rr0 1

Expressionrr1 ;
<rr; <
Funcrr< @
<rr@ A
TKeyrrA E
,rrE F
TResultrrG N
>rrN O
>rrO P
columnsrrQ X
)rrX Y
;rrY Z
IOrderByss 
<ss 
TKeyss 
,ss 
TKeyss 
>ss 
OrderByss $
(ss$ %

Expressionss% /
<ss/ 0
Funcss0 4
<ss4 5
TKeyss5 9
,ss9 :
objectss; A
>ssA B
>ssB C
columnsssD K
)ssK L
;ssL M
IOrderBytt 
<tt 
TKeytt 
,tt 
TKeytt 
>tt 
OrderByDesctt (
(tt( )

Expressiontt) 3
<tt3 4
Functt4 8
<tt8 9
TKeytt9 =
,tt= >
objecttt? E
>ttE F
>ttF G
columnsttH O
)ttO P
;ttP Q
ISkipuu 
<uu 
TKeyuu 
,uu 
TKeyuu 
>uu 
Skipuu 
(uu 
intuu "
?uu" #
startuu$ )
)uu) *
;uu* +
ITakevv 
<vv 
TKeyvv 
,vv 
TKeyvv 
>vv 
Takevv 
(vv 
intvv "
?vv" #
countvv$ )
)vv) *
;vv* +
intww 
Countww 
(ww 
)ww 
;ww 
IEnumerablexx 
<xx 
TKeyxx 
>xx 
ExecuteSimpleQueryxx ,
(xx, -
SimpleQueryxx- 8
simpleQueryxx9 D
)xxD E
;xxE F
ResultStatuszz 
Insertzz 
(zz 
TKeyzz  
	parameterzz! *
,zz* +

Expressionzz, 6
<zz6 7
Funczz7 ;
<zz; <
TKeyzz< @
,zz@ A
objectzzB H
>zzH I
>zzI J

exceptColszzK U
=zzV W
nullzzX \
)zz\ ]
;zz] ^
ResultStatus{{ 
Update{{ 
({{ 
TKey{{  
	parameter{{! *
,{{* +

Expression{{, 6
<{{6 7
Func{{7 ;
<{{; <
TKey{{< @
,{{@ A
object{{B H
>{{H I
>{{I J
idCols{{K Q
,{{Q R

Expression{{S ]
<{{] ^
Func{{^ b
<{{b c
TKey{{c g
,{{g h
object{{i o
>{{o p
>{{p q

exceptCols{{r |
={{} ~
null	{{ É
,
{{É Ñ
bool
{{Ö â
setNull
{{ä ë
=
{{í ì
false
{{î ô
)
{{ô ö
;
{{ö õ
ResultStatus|| 
Delete|| 
(|| 
TKey||  
	parameter||! *
,||* +

Expression||, 6
<||6 7
Func||7 ;
<||; <
TKey||< @
,||@ A
object||B H
>||H I
>||I J
idCols||K Q
)||Q R
;||R S
ResultStatus}} 
Delete}} 
(}} 

Expression}} &
<}}& '
Func}}' +
<}}+ ,
TKey}}, 0
,}}0 1
bool}}2 6
>}}6 7
>}}7 8
	condition}}9 B
)}}B C
;}}C D
ResultStatus~~ 
Insert~~ 
(~~ 
IEnumerable~~ '
<~~' (
TKey~~( ,
>~~, -
	parameter~~. 7
,~~7 8

Expression~~9 C
<~~C D
Func~~D H
<~~H I
TKey~~I M
,~~M N
object~~O U
>~~U V
>~~V W

exceptCols~~X b
=~~c d
null~~e i
)~~i j
;~~j k
ResultStatus 
Update 
( 
IEnumerable '
<' (
TKey( ,
>, -
	parameter. 7
,7 8

Expression9 C
<C D
FuncD H
<H I
TKeyI M
,M N
objectO U
>U V
>V W
idColsX ^
,^ _

Expression` j
<j k
Funck o
<o p
TKeyp t
,t u
objectv |
>| }
>} ~

exceptCols	 â
=
ä ã
null
å ê
,
ê ë
bool
í ñ
setNull
ó û
=
ü †
false
° ¶
)
¶ ß
;
ß ®
ResultStatus
ÄÄ 
Delete
ÄÄ 
(
ÄÄ 
IEnumerable
ÄÄ '
<
ÄÄ' (
TKey
ÄÄ( ,
>
ÄÄ, -
	parameter
ÄÄ. 7
,
ÄÄ7 8

Expression
ÄÄ9 C
<
ÄÄC D
Func
ÄÄD H
<
ÄÄH I
TKey
ÄÄI M
,
ÄÄM N
object
ÄÄO U
>
ÄÄU V
>
ÄÄV W
idCols
ÄÄX ^
)
ÄÄ^ _
;
ÄÄ_ `
}
ÇÇ 
public
ÑÑ 

class
ÑÑ 
QueryProcessor
ÑÑ 
<
ÑÑ  
TKey
ÑÑ  $
,
ÑÑ$ %
TPrev
ÑÑ& +
>
ÑÑ+ ,
:
ÑÑ- .
IExecutable
ÑÑ/ :
<
ÑÑ: ;
TKey
ÑÑ; ?
>
ÑÑ? @
,
ÑÑ@ A
	IGetTable
ÑÑB K
<
ÑÑK L
TKey
ÑÑL P
>
ÑÑP Q
,
ÑÑQ R
IGetTableFunction
ÑÑS d
<
ÑÑd e
TKey
ÑÑe i
>
ÑÑi j
,
ÑÑj k
ISelect
ÑÑl s
<
ÑÑs t
TKey
ÑÑt x
,
ÑÑx y
TPrev
ÑÑz 
>ÑÑ Ä
,ÑÑÄ Å
IWhereÑÑÇ à
<ÑÑà â
TKeyÑÑâ ç
,ÑÑç é
TPrevÑÑè î
>ÑÑî ï
,ÑÑï ñ
IGroupByÑÑó ü
<ÑÑü †
TKeyÑÑ† §
,ÑÑ§ •
TPrevÑÑ¶ ´
>ÑÑ´ ¨
,ÑÑ¨ ≠
IOrderByÑÑÆ ∂
<ÑÑ∂ ∑
TKeyÑÑ∑ ª
,ÑÑª º
TPrevÑÑΩ ¬
>ÑÑ¬ √
,ÑÑ√ ƒ
ISkipÑÑ≈  
<ÑÑ  À
TKeyÑÑÀ œ
,ÑÑœ –
TPrevÑÑ— ÷
>ÑÑ÷ ◊
,ÑÑ◊ ÿ
ITakeÑÑŸ ﬁ
<ÑÑﬁ ﬂ
TKeyÑÑﬂ „
,ÑÑ„ ‰
TPrevÑÑÂ Í
>ÑÑÍ Î
{
ÖÖ 
private
ÜÜ 
string
ÜÜ 

_tableName
ÜÜ !
;
ÜÜ! "
private
áá 
string
áá 
_schemaName
áá "
;
áá" #
private
àà 
QueryProcessor
àà 
_queryProcessor
àà .
;
àà. /
private
ââ 
IQueryBuilder
ââ 
_builder
ââ &
;
ââ& '
private
ää 
IQueryExecutor
ää 
	_executor
ää (
;
ää( )
public
åå 
QueryProcessor
åå 
(
åå 
string
åå $
	tableName
åå% .
,
åå. /
string
åå0 6

schemaName
åå7 A
,
ååA B
QueryProcessor
ååC Q
queryProcessor
ååR `
,
åå` a
IQueryBuilder
ååb o
builder
ååp w
,
ååw x
IQueryExecutorååy á
executorååà ê
)ååê ë
{
çç 	

_tableName
éé 
=
éé 
	tableName
éé "
;
éé" #
_schemaName
èè 
=
èè 

schemaName
èè $
;
èè$ %
_queryProcessor
êê 
=
êê 
queryProcessor
êê ,
;
êê, -
_builder
ëë 
=
ëë 
builder
ëë 
;
ëë 
	_executor
íí 
=
íí 
executor
íí  
;
íí  !
}
ìì 	
public
ïï 
QueryProcessor
ïï 
(
ïï 
string
ïï $
functionName
ïï% 1
,
ïï1 2
string
ïï3 9

schemaName
ïï: D
,
ïïD E
object
ïïF L
[
ïïL M
]
ïïM N

parameters
ïïO Y
,
ïïY Z
QueryProcessor
ïï[ i
queryProcessor
ïïj x
,
ïïx y
IQueryBuilderïïz á
builderïïà è
,ïïè ê
IQueryExecutorïïë ü
executorïï† ®
)ïï® ©
{
ññ 	

_tableName
óó 
=
óó 
functionName
óó %
;
óó% &
_schemaName
òò 
=
òò 

schemaName
òò $
;
òò$ %
_queryProcessor
ôô 
=
ôô 
queryProcessor
ôô ,
;
ôô, -
_builder
öö 
=
öö 
builder
öö 
;
öö 
	_executor
õõ 
=
õõ 
executor
õõ  
;
õõ  !
}
ùù 	
public
üü 
	IGetTable
üü 
<
üü 
TKey
üü 
>
üü 
GetTableFunction
üü /
(
üü/ 0
string
üü0 6

schemaName
üü7 A
,
üüA B
string
üüC I
	tableName
üüJ S
,
üüS T
params
üüU [
object
üü\ b
[
üüb c
]
üüc d

parameters
üüe o
)
üüo p
{
†† 	

_tableName
°° 
=
°° 
	tableName
°° "
;
°°" #
_schemaName
¢¢ 
=
¢¢ 

schemaName
¢¢ $
;
¢¢$ %
return
§§ 
this
§§ 
;
§§ 
}
•• 	
public
ßß 
IEnumerable
ßß 
<
ßß 
TKey
ßß 
>
ßß  
Execute
ßß! (
(
ßß( )
)
ßß) *
{
®® 	
return
©© 
_queryProcessor
©© "
.
©©" #
Execute
©©# *
<
©©* +
TKey
©©+ /
>
©©/ 0
(
©©0 1
)
©©1 2
;
©©2 3
}
™™ 	
public
´´ 
IEnumerable
´´ 
<
´´ 
T
´´ 
>
´´ 
Execute
´´ %
<
´´% &
T
´´& '
>
´´' (
(
´´( )
)
´´) *
{
¨¨ 	
return
≠≠ 
_queryProcessor
≠≠ "
.
≠≠" #
Execute
≠≠# *
<
≠≠* +
T
≠≠+ ,
>
≠≠, -
(
≠≠- .
)
≠≠. /
;
≠≠/ 0
}
ÆÆ 	
public
ØØ 
T
ØØ 
ExecuteScaler
ØØ 
<
ØØ 
T
ØØ  
>
ØØ  !
(
ØØ! "
)
ØØ" #
{
∞∞ 	
return
±± 
_queryProcessor
±± "
.
±±" #
ExecuteScaler
±±# 0
<
±±0 1
T
±±1 2
>
±±2 3
(
±±3 4
)
±±4 5
;
±±5 6
}
≤≤ 	
public
≥≥ 
string
≥≥ 
GetQueryForTest
≥≥ %
(
≥≥% &
)
≥≥& '
{
¥¥ 	
return
µµ 
_queryProcessor
µµ "
.
µµ" #
GetQueryForTest
µµ# 2
(
µµ2 3
)
µµ3 4
;
µµ4 5
}
∂∂ 	
public
∏∏ 
IGroupBy
∏∏ 
<
∏∏ 
TResult
∏∏ 
,
∏∏  
TKey
∏∏! %
>
∏∏% &
GroupBy
∏∏' .
<
∏∏. /
TResult
∏∏/ 6
>
∏∏6 7
(
∏∏7 8

Expression
∏∏8 B
<
∏∏B C
Func
∏∏C G
<
∏∏G H
TKey
∏∏H L
,
∏∏L M
TResult
∏∏N U
>
∏∏U V
>
∏∏V W
columns
∏∏X _
)
∏∏_ `
{
ππ 	
var
∫∫ 
result
∫∫ 
=
∫∫ 
Process
∫∫  
(
∫∫  !
columns
∫∫! (
.
∫∫( )
Body
∫∫) -
)
∫∫- .
;
∫∫. /
_queryProcessor
ªª 
.
ªª 
GroupBy
ªª #
(
ªª# $
result
ªª$ *
)
ªª* +
;
ªª+ ,
return
ºº 
new
ºº 
QueryProcessor
ºº %
<
ºº% &
TResult
ºº& -
,
ºº- .
TKey
ºº/ 3
>
ºº3 4
(
ºº4 5

_tableName
ºº5 ?
,
ºº? @
_schemaName
ººA L
,
ººL M
_queryProcessor
ººN ]
,
ºº] ^
_builder
ºº_ g
,
ººg h
	_executor
ººi r
)
ººr s
;
ººs t
}
ΩΩ 	
public
ææ 
ISelect
ææ 
<
ææ 
TResult
ææ 
,
ææ 
TKey
ææ  $
>
ææ$ %
Select
ææ& ,
<
ææ, -
TResult
ææ- 4
>
ææ4 5
(
ææ5 6

Expression
ææ6 @
<
ææ@ A
Func
ææA E
<
ææE F
TKey
ææF J
,
ææJ K
TResult
ææL S
>
ææS T
>
ææT U
columns
ææV ]
=
ææ^ _
null
ææ` d
)
ææd e
{
øø 	
var
¿¿ 
result
¿¿ 
=
¿¿ 
Process
¿¿  
(
¿¿  !
columns
¿¿! (
.
¿¿( )
Body
¿¿) -
,
¿¿- .
true
¿¿/ 3
)
¿¿3 4
;
¿¿4 5
_queryProcessor
¡¡ 
.
¡¡ 
Select
¡¡ "
(
¡¡" #
result
¡¡# )
.
¡¡) *
Cast
¡¡* .
<
¡¡. /

INamedItem
¡¡/ 9
>
¡¡9 :
(
¡¡: ;
)
¡¡; <
.
¡¡< =
ToArray
¡¡= D
(
¡¡D E
)
¡¡E F
)
¡¡F G
;
¡¡G H
return
¬¬ 
new
¬¬ 
QueryProcessor
¬¬ %
<
¬¬% &
TResult
¬¬& -
,
¬¬- .
TKey
¬¬/ 3
>
¬¬3 4
(
¬¬4 5

_tableName
¬¬5 ?
,
¬¬? @
_schemaName
¬¬A L
,
¬¬L M
_queryProcessor
¬¬N ]
,
¬¬] ^
_builder
¬¬_ g
,
¬¬g h
	_executor
¬¬i r
)
¬¬r s
;
¬¬s t
}
√√ 	
public
ƒƒ 
ISelect
ƒƒ 
<
ƒƒ 
TResult
ƒƒ 
,
ƒƒ 
TKey
ƒƒ  $
>
ƒƒ$ %
Select
ƒƒ& ,
<
ƒƒ, -
TResult
ƒƒ- 4
>
ƒƒ4 5
(
ƒƒ5 6

Expression
ƒƒ6 @
<
ƒƒ@ A
Func
ƒƒA E
<
ƒƒE F
IGroupObject
ƒƒF R
<
ƒƒR S
TKey
ƒƒS W
,
ƒƒW X
TPrev
ƒƒY ^
>
ƒƒ^ _
,
ƒƒ_ `
TResult
ƒƒa h
>
ƒƒh i
>
ƒƒi j
columns
ƒƒk r
=
ƒƒs t
null
ƒƒu y
)
ƒƒy z
{
≈≈ 	
var
∆∆ 
result
∆∆ 
=
∆∆ 
Process
∆∆  
(
∆∆  !
columns
∆∆! (
.
∆∆( )
Body
∆∆) -
,
∆∆- .
true
∆∆/ 3
)
∆∆3 4
;
∆∆4 5
_queryProcessor
«« 
.
«« 
Select
«« "
(
««" #
result
««# )
.
««) *
Cast
««* .
<
««. /

INamedItem
««/ 9
>
««9 :
(
««: ;
)
««; <
.
««< =
ToArray
««= D
(
««D E
)
««E F
)
««F G
;
««G H
return
»» 
new
»» 
QueryProcessor
»» %
<
»»% &
TResult
»»& -
,
»»- .
TKey
»»/ 3
>
»»3 4
(
»»4 5

_tableName
»»5 ?
,
»»? @
_schemaName
»»A L
,
»»L M
_queryProcessor
»»N ]
,
»»] ^
_builder
»»_ g
,
»»g h
	_executor
»»i r
)
»»r s
;
»»s t
}
…… 	
public
   
IWhere
   
<
   
TKey
   
,
   
TKey
    
>
    !
Where
  " '
(
  ' (

Expression
  ( 2
<
  2 3
Func
  3 7
<
  7 8
TKey
  8 <
,
  < =
bool
  > B
>
  B C
>
  C D
	condition
  E N
)
  N O
{
ÀÀ 	
var
ÃÃ 
result
ÃÃ 
=
ÃÃ 
ProcessItem
ÃÃ $
(
ÃÃ$ %
	condition
ÃÃ% .
.
ÃÃ. /
Body
ÃÃ/ 3
)
ÃÃ3 4
;
ÃÃ4 5
_queryProcessor
ÕÕ 
.
ÕÕ 
Where
ÕÕ !
(
ÕÕ! "
result
ÕÕ" (
as
ÕÕ) +
BEXP
ÕÕ, 0
)
ÕÕ0 1
;
ÕÕ1 2
return
ŒŒ 
new
ŒŒ 
QueryProcessor
ŒŒ %
<
ŒŒ% &
TKey
ŒŒ& *
,
ŒŒ* +
TKey
ŒŒ, 0
>
ŒŒ0 1
(
ŒŒ1 2

_tableName
ŒŒ2 <
,
ŒŒ< =
_schemaName
ŒŒ> I
,
ŒŒI J
_queryProcessor
ŒŒK Z
,
ŒŒZ [
_builder
ŒŒ\ d
,
ŒŒd e
	_executor
ŒŒf o
)
ŒŒo p
;
ŒŒp q
}
œœ 	
public
–– 
IOrderBy
–– 
<
–– 
TKey
–– 
,
–– 
TKey
–– "
>
––" #
OrderBy
––$ +
(
––+ ,

Expression
––, 6
<
––6 7
Func
––7 ;
<
––; <
TKey
––< @
,
––@ A
object
––B H
>
––H I
>
––I J
columns
––K R
)
––R S
{
—— 	
var
““ 
result
““ 
=
““ 
Process
““  
(
““  !
columns
““! (
.
““( )
Body
““) -
)
““- .
;
““. /
_queryProcessor
”” 
.
”” 
OrderBy
”” #
(
””# $
result
””$ *
.
””* +
Cast
””+ /
<
””/ 0
IQueryValue
””0 ;
>
””; <
(
””< =
)
””= >
.
””> ?
Select
””? E
(
””E F
a
””F G
=>
””H J
new
””K N
ASC
””O R
{
””S T
Value
””U Z
=
””[ \
a
””] ^
}
””_ `
)
””` a
.
””a b
Cast
””b f
<
””f g
IQueryOrderItem
””g v
>
””v w
(
””w x
)
””x y
.
””y z
ToArray””z Å
(””Å Ç
)””Ç É
)””É Ñ
;””Ñ Ö
return
‘‘ 
new
‘‘ 
QueryProcessor
‘‘ %
<
‘‘% &
TKey
‘‘& *
,
‘‘* +
TKey
‘‘, 0
>
‘‘0 1
(
‘‘1 2

_tableName
‘‘2 <
,
‘‘< =
_schemaName
‘‘> I
,
‘‘I J
_queryProcessor
‘‘K Z
,
‘‘Z [
_builder
‘‘\ d
,
‘‘d e
	_executor
‘‘f o
)
‘‘o p
;
‘‘p q
}
’’ 	
public
÷÷ 
IOrderBy
÷÷ 
<
÷÷ 
TKey
÷÷ 
,
÷÷ 
TKey
÷÷ "
>
÷÷" #
OrderByDesc
÷÷$ /
(
÷÷/ 0

Expression
÷÷0 :
<
÷÷: ;
Func
÷÷; ?
<
÷÷? @
TKey
÷÷@ D
,
÷÷D E
object
÷÷F L
>
÷÷L M
>
÷÷M N
columns
÷÷O V
)
÷÷V W
{
◊◊ 	
var
ÿÿ 
result
ÿÿ 
=
ÿÿ 
Process
ÿÿ  
(
ÿÿ  !
columns
ÿÿ! (
.
ÿÿ( )
Body
ÿÿ) -
)
ÿÿ- .
;
ÿÿ. /
_queryProcessor
ŸŸ 
.
ŸŸ 
OrderBy
ŸŸ #
(
ŸŸ# $
result
ŸŸ$ *
.
ŸŸ* +
Cast
ŸŸ+ /
<
ŸŸ/ 0
IQueryValue
ŸŸ0 ;
>
ŸŸ; <
(
ŸŸ< =
)
ŸŸ= >
.
ŸŸ> ?
Select
ŸŸ? E
(
ŸŸE F
a
ŸŸF G
=>
ŸŸH J
new
ŸŸK N
DESC
ŸŸO S
{
ŸŸT U
Value
ŸŸV [
=
ŸŸ\ ]
a
ŸŸ^ _
}
ŸŸ` a
)
ŸŸa b
.
ŸŸb c
Cast
ŸŸc g
<
ŸŸg h
IQueryOrderItem
ŸŸh w
>
ŸŸw x
(
ŸŸx y
)
ŸŸy z
.
ŸŸz {
ToArrayŸŸ{ Ç
(ŸŸÇ É
)ŸŸÉ Ñ
)ŸŸÑ Ö
;ŸŸÖ Ü
return
⁄⁄ 
new
⁄⁄ 
QueryProcessor
⁄⁄ %
<
⁄⁄% &
TKey
⁄⁄& *
,
⁄⁄* +
TKey
⁄⁄, 0
>
⁄⁄0 1
(
⁄⁄1 2

_tableName
⁄⁄2 <
,
⁄⁄< =
_schemaName
⁄⁄> I
,
⁄⁄I J
_queryProcessor
⁄⁄K Z
,
⁄⁄Z [
_builder
⁄⁄\ d
,
⁄⁄d e
	_executor
⁄⁄f o
)
⁄⁄o p
;
⁄⁄p q
}
€€ 	
public
‡‡ 
ISkip
‡‡ 
<
‡‡ 
TKey
‡‡ 
,
‡‡ 
TKey
‡‡ 
>
‡‡  
Skip
‡‡! %
(
‡‡% &
int
‡‡& )
?
‡‡) *
start
‡‡+ 0
)
‡‡0 1
{
·· 	
_queryProcessor
‚‚ 
.
‚‚ 
Skip
‚‚  
(
‚‚  !
start
‚‚! &
)
‚‚& '
;
‚‚' (
return
„„ 
new
„„ 
QueryProcessor
„„ %
<
„„% &
TKey
„„& *
,
„„* +
TKey
„„, 0
>
„„0 1
(
„„1 2

_tableName
„„2 <
,
„„< =
_schemaName
„„> I
,
„„I J
_queryProcessor
„„K Z
,
„„Z [
_builder
„„\ d
,
„„d e
	_executor
„„f o
)
„„o p
;
„„p q
}
‰‰ 	
public
ÂÂ 
ITake
ÂÂ 
<
ÂÂ 
TKey
ÂÂ 
,
ÂÂ 
TKey
ÂÂ 
>
ÂÂ  
Take
ÂÂ! %
(
ÂÂ% &
int
ÂÂ& )
?
ÂÂ) *
count
ÂÂ+ 0
)
ÂÂ0 1
{
ÊÊ 	
_queryProcessor
ÁÁ 
.
ÁÁ 
Take
ÁÁ  
(
ÁÁ  !
count
ÁÁ! &
)
ÁÁ& '
;
ÁÁ' (
return
ËË 
new
ËË 
QueryProcessor
ËË %
<
ËË% &
TKey
ËË& *
,
ËË* +
TKey
ËË, 0
>
ËË0 1
(
ËË1 2

_tableName
ËË2 <
,
ËË< =
_schemaName
ËË> I
,
ËËI J
_queryProcessor
ËËK Z
,
ËËZ [
_builder
ËË\ d
,
ËËd e
	_executor
ËËf o
)
ËËo p
;
ËËp q
}
ÈÈ 	
static
ÎÎ 

Dictionary
ÎÎ 
<
ÎÎ 
ExpressionType
ÎÎ (
,
ÎÎ( )
BinaryOperator
ÎÎ* 8
>
ÎÎ8 9
binaryOperators
ÎÎ: I
;
ÎÎI J
static
ÏÏ 

Dictionary
ÏÏ 
<
ÏÏ 
ExpressionType
ÏÏ (
,
ÏÏ( )
TransformOperator
ÏÏ* ;
>
ÏÏ; < 
transformOperators
ÏÏ= O
;
ÏÏO P
static
ÌÌ 

Dictionary
ÌÌ 
<
ÌÌ 
string
ÌÌ  
,
ÌÌ  !
QueryFunctions
ÌÌ" 0
>
ÌÌ0 1
staticFunctions
ÌÌ2 A
;
ÌÌA B
static
ÓÓ 

Dictionary
ÓÓ 
<
ÓÓ 
string
ÓÓ  
,
ÓÓ  !
QueryFunctions
ÓÓ" 0
>
ÓÓ0 1
aggregteFunctions
ÓÓ2 C
;
ÓÓC D
static
ÔÔ 

Dictionary
ÔÔ 
<
ÔÔ 
string
ÔÔ  
,
ÔÔ  !
QueryFunctions
ÔÔ" 0
>
ÔÔ0 1
instanceFunctions
ÔÔ2 C
;
ÔÔC D
static
 

Dictionary
 
<
 
FunctionProperty
 *
,
* +
QueryFunctions
, :
>
: ; 
functionProperties
< N
;
N O
class
ÒÒ 
FunctionProperty
ÒÒ 
{
ÚÚ 	
public
ÛÛ 
Type
ÛÛ 

ObjectType
ÛÛ "
{
ÛÛ# $
get
ÛÛ% (
;
ÛÛ( )
set
ÛÛ* -
;
ÛÛ- .
}
ÛÛ/ 0
public
ÙÙ 
string
ÙÙ 
FunctionName
ÙÙ &
{
ÙÙ' (
get
ÙÙ) ,
;
ÙÙ, -
set
ÙÙ. 1
;
ÙÙ1 2
}
ÙÙ3 4
}
ıı 	
static
ˆˆ 
QueryProcessor
ˆˆ 
(
ˆˆ 
)
ˆˆ 
{
˜˜ 	
binaryOperators
¯¯ 
=
¯¯ 
new
¯¯ !

Dictionary
¯¯" ,
<
¯¯, -
ExpressionType
¯¯- ;
,
¯¯; <
BinaryOperator
¯¯= K
>
¯¯K L
(
¯¯L M
)
¯¯M N
;
¯¯N O
binaryOperators
˘˘ 
.
˘˘ 
Add
˘˘ 
(
˘˘  
ExpressionType
˘˘  .
.
˘˘. /
And
˘˘/ 2
,
˘˘2 3
BinaryOperator
˘˘4 B
.
˘˘B C
And
˘˘C F
)
˘˘F G
;
˘˘G H
binaryOperators
˙˙ 
.
˙˙ 
Add
˙˙ 
(
˙˙  
ExpressionType
˙˙  .
.
˙˙. /
AndAlso
˙˙/ 6
,
˙˙6 7
BinaryOperator
˙˙8 F
.
˙˙F G
And
˙˙G J
)
˙˙J K
;
˙˙K L
binaryOperators
˚˚ 
.
˚˚ 
Add
˚˚ 
(
˚˚  
ExpressionType
˚˚  .
.
˚˚. /
Or
˚˚/ 1
,
˚˚1 2
BinaryOperator
˚˚3 A
.
˚˚A B
Or
˚˚B D
)
˚˚D E
;
˚˚E F
binaryOperators
¸¸ 
.
¸¸ 
Add
¸¸ 
(
¸¸  
ExpressionType
¸¸  .
.
¸¸. /
OrElse
¸¸/ 5
,
¸¸5 6
BinaryOperator
¸¸7 E
.
¸¸E F
Or
¸¸F H
)
¸¸H I
;
¸¸I J
binaryOperators
˝˝ 
.
˝˝ 
Add
˝˝ 
(
˝˝  
ExpressionType
˝˝  .
.
˝˝. /
Equal
˝˝/ 4
,
˝˝4 5
BinaryOperator
˝˝6 D
.
˝˝D E
Equal
˝˝E J
)
˝˝J K
;
˝˝K L
binaryOperators
˛˛ 
.
˛˛ 
Add
˛˛ 
(
˛˛  
ExpressionType
˛˛  .
.
˛˛. /
NotEqual
˛˛/ 7
,
˛˛7 8
BinaryOperator
˛˛9 G
.
˛˛G H
NotEqual
˛˛H P
)
˛˛P Q
;
˛˛Q R
binaryOperators
ˇˇ 
.
ˇˇ 
Add
ˇˇ 
(
ˇˇ  
ExpressionType
ˇˇ  .
.
ˇˇ. /
GreaterThan
ˇˇ/ :
,
ˇˇ: ;
BinaryOperator
ˇˇ< J
.
ˇˇJ K
GreaterThan
ˇˇK V
)
ˇˇV W
;
ˇˇW X
binaryOperators
ÄÄ 
.
ÄÄ 
Add
ÄÄ 
(
ÄÄ  
ExpressionType
ÄÄ  .
.
ÄÄ. / 
GreaterThanOrEqual
ÄÄ/ A
,
ÄÄA B
BinaryOperator
ÄÄC Q
.
ÄÄQ R 
GreaterThanOrEqual
ÄÄR d
)
ÄÄd e
;
ÄÄe f
binaryOperators
ÅÅ 
.
ÅÅ 
Add
ÅÅ 
(
ÅÅ  
ExpressionType
ÅÅ  .
.
ÅÅ. /
LessThan
ÅÅ/ 7
,
ÅÅ7 8
BinaryOperator
ÅÅ9 G
.
ÅÅG H
LessThan
ÅÅH P
)
ÅÅP Q
;
ÅÅQ R
binaryOperators
ÇÇ 
.
ÇÇ 
Add
ÇÇ 
(
ÇÇ  
ExpressionType
ÇÇ  .
.
ÇÇ. /
LessThanOrEqual
ÇÇ/ >
,
ÇÇ> ?
BinaryOperator
ÇÇ@ N
.
ÇÇN O
LessThanOrEqual
ÇÇO ^
)
ÇÇ^ _
;
ÇÇ_ ` 
transformOperators
ÑÑ 
=
ÑÑ  
new
ÑÑ! $

Dictionary
ÑÑ% /
<
ÑÑ/ 0
ExpressionType
ÑÑ0 >
,
ÑÑ> ?
TransformOperator
ÑÑ@ Q
>
ÑÑQ R
(
ÑÑR S
)
ÑÑS T
;
ÑÑT U 
transformOperators
ÖÖ 
.
ÖÖ 
Add
ÖÖ "
(
ÖÖ" #
ExpressionType
ÖÖ# 1
.
ÖÖ1 2
Add
ÖÖ2 5
,
ÖÖ5 6
TransformOperator
ÖÖ7 H
.
ÖÖH I
Add
ÖÖI L
)
ÖÖL M
;
ÖÖM N 
transformOperators
ÜÜ 
.
ÜÜ 
Add
ÜÜ "
(
ÜÜ" #
ExpressionType
ÜÜ# 1
.
ÜÜ1 2
Subtract
ÜÜ2 :
,
ÜÜ: ;
TransformOperator
ÜÜ< M
.
ÜÜM N
Subtract
ÜÜN V
)
ÜÜV W
;
ÜÜW X 
transformOperators
áá 
.
áá 
Add
áá "
(
áá" #
ExpressionType
áá# 1
.
áá1 2
Multiply
áá2 :
,
áá: ;
TransformOperator
áá< M
.
ááM N
Multiply
ááN V
)
ááV W
;
ááW X 
transformOperators
àà 
.
àà 
Add
àà "
(
àà" #
ExpressionType
àà# 1
.
àà1 2
Divide
àà2 8
,
àà8 9
TransformOperator
àà: K
.
ààK L
Divide
ààL R
)
ààR S
;
ààS T 
transformOperators
ââ 
.
ââ 
Add
ââ "
(
ââ" #
ExpressionType
ââ# 1
.
ââ1 2
Modulo
ââ2 8
,
ââ8 9
TransformOperator
ââ: K
.
ââK L
Modulo
ââL R
)
ââR S
;
ââS T 
transformOperators
ää 
.
ää 
Add
ää "
(
ää" #
ExpressionType
ää# 1
.
ää1 2
Power
ää2 7
,
ää7 8
TransformOperator
ää9 J
.
ääJ K
Power
ääK P
)
ääP Q
;
ääQ R
staticFunctions
åå 
=
åå 
new
åå !

Dictionary
åå" ,
<
åå, -
string
åå- 3
,
åå3 4
QueryFunctions
åå5 C
>
ååC D
(
ååD E
)
ååE F
;
ååF G
staticFunctions
çç 
.
çç 
Add
çç 
(
çç  
$str
çç  %
,
çç% &
QueryFunctions
çç' 5
.
çç5 6
Abs
çç6 9
)
çç9 :
;
çç: ;
staticFunctions
éé 
.
éé 
Add
éé 
(
éé  
$str
éé  )
,
éé) *
QueryFunctions
éé+ 9
.
éé9 :
Ceiling
éé: A
)
ééA B
;
ééB C
staticFunctions
èè 
.
èè 
Add
èè 
(
èè  
$str
èè  '
,
èè' (
QueryFunctions
èè) 7
.
èè7 8
Floor
èè8 =
)
èè= >
;
èè> ?
staticFunctions
êê 
.
êê 
Add
êê 
(
êê  
$str
êê  &
,
êê& '
QueryFunctions
êê( 6
.
êê6 7
Sqrt
êê7 ;
)
êê; <
;
êê< =
staticFunctions
ëë 
.
ëë 
Add
ëë 
(
ëë  
$str
ëë  &
,
ëë& '
QueryFunctions
ëë( 6
.
ëë6 7
Sign
ëë7 ;
)
ëë; <
;
ëë< =
staticFunctions
íí 
.
íí 
Add
íí 
(
íí  
$str
íí  &
,
íí& '
QueryFunctions
íí( 6
.
íí6 7
Acos
íí7 ;
)
íí; <
;
íí< =
staticFunctions
ìì 
.
ìì 
Add
ìì 
(
ìì  
$str
ìì  &
,
ìì& '
QueryFunctions
ìì( 6
.
ìì6 7
Asin
ìì7 ;
)
ìì; <
;
ìì< =
staticFunctions
îî 
.
îî 
Add
îî 
(
îî  
$str
îî  &
,
îî& '
QueryFunctions
îî( 6
.
îî6 7
Atan
îî7 ;
)
îî; <
;
îî< =
staticFunctions
ïï 
.
ïï 
Add
ïï 
(
ïï  
$str
ïï  %
,
ïï% &
QueryFunctions
ïï' 5
.
ïï5 6
Exp
ïï6 9
)
ïï9 :
;
ïï: ;
staticFunctions
ññ 
.
ññ 
Add
ññ 
(
ññ  
$str
ññ  %
,
ññ% &
QueryFunctions
ññ' 5
.
ññ5 6
Cos
ññ6 9
)
ññ9 :
;
ññ: ;
staticFunctions
óó 
.
óó 
Add
óó 
(
óó  
$str
óó  %
,
óó% &
QueryFunctions
óó' 5
.
óó5 6
Sin
óó6 9
)
óó9 :
;
óó: ;
staticFunctions
òò 
.
òò 
Add
òò 
(
òò  
$str
òò  %
,
òò% &
QueryFunctions
òò' 5
.
òò5 6
Tan
òò6 9
)
òò9 :
;
òò: ;
staticFunctions
ôô 
.
ôô 
Add
ôô 
(
ôô  
$str
ôô  (
,
ôô( )
QueryFunctions
ôô* 8
.
ôô8 9
Square
ôô9 ?
)
ôô? @
;
ôô@ A
staticFunctions
öö 
.
öö 
Add
öö 
(
öö  
$str
öö  )
,
öö) *
QueryFunctions
öö+ 9
.
öö9 :
Radians
öö: A
)
ööA B
;
ööB C
staticFunctions
õõ 
.
õõ 
Add
õõ 
(
õõ  
$str
õõ  )
,
õõ) *
QueryFunctions
õõ+ 9
.
õõ9 :
Degrees
õõ: A
)
õõA B
;
õõB C
staticFunctions
úú 
.
úú 
Add
úú 
(
úú  
$str
úú  0
,
úú0 1
QueryFunctions
úú2 @
.
úú@ A
STGeomFromText
úúA O
)
úúO P
;
úúP Q
staticFunctions
ùù 
.
ùù 
Add
ùù 
(
ùù  
$str
ùù  1
,
ùù1 2
QueryFunctions
ùù3 A
.
ùùA B
STPointFromText
ùùB Q
)
ùùQ R
;
ùùR S
staticFunctions
ûû 
.
ûû 
Add
ûû 
(
ûû  
$str
ûû  0
,
ûû0 1
QueryFunctions
ûû2 @
.
ûû@ A
STLineFromText
ûûA O
)
ûûO P
;
ûûP Q
staticFunctions
üü 
.
üü 
Add
üü 
(
üü  
$str
üü  0
,
üü0 1
QueryFunctions
üü2 @
.
üü@ A
STPolyFromText
üüA O
)
üüO P
;
üüP Q
staticFunctions
†† 
.
†† 
Add
†† 
(
††  
$str
††  2
,
††2 3
QueryFunctions
††4 B
.
††B C
STMPointFromText
††C S
)
††S T
;
††T U
staticFunctions
°° 
.
°° 
Add
°° 
(
°°  
$str
°°  1
,
°°1 2
QueryFunctions
°°3 A
.
°°A B
STMLineFromText
°°B Q
)
°°Q R
;
°°R S
staticFunctions
¢¢ 
.
¢¢ 
Add
¢¢ 
(
¢¢  
$str
¢¢  1
,
¢¢1 2
QueryFunctions
¢¢3 A
.
¢¢A B
STMPolyFromText
¢¢B Q
)
¢¢Q R
;
¢¢R S
staticFunctions
££ 
.
££ 
Add
££ 
(
££  
$str
££  4
,
££4 5
QueryFunctions
££6 D
.
££D E 
STGeomCollFromText
££E W
)
££W X
;
££X Y
staticFunctions
§§ 
.
§§ 
Add
§§ 
(
§§  
$str
§§  /
,
§§/ 0
QueryFunctions
§§1 ?
.
§§? @
STGeomFromWKB
§§@ M
)
§§M N
;
§§N O
staticFunctions
•• 
.
•• 
Add
•• 
(
••  
$str
••  0
,
••0 1
QueryFunctions
••2 @
.
••@ A
STPointFromWKB
••A O
)
••O P
;
••P Q
staticFunctions
¶¶ 
.
¶¶ 
Add
¶¶ 
(
¶¶  
$str
¶¶  /
,
¶¶/ 0
QueryFunctions
¶¶1 ?
.
¶¶? @
STLineFromWKB
¶¶@ M
)
¶¶M N
;
¶¶N O
staticFunctions
ßß 
.
ßß 
Add
ßß 
(
ßß  
$str
ßß  /
,
ßß/ 0
QueryFunctions
ßß1 ?
.
ßß? @
STPolyFromWKB
ßß@ M
)
ßßM N
;
ßßN O
staticFunctions
®® 
.
®® 
Add
®® 
(
®®  
$str
®®  1
,
®®1 2
QueryFunctions
®®3 A
.
®®A B
STMPointFromWKB
®®B Q
)
®®Q R
;
®®R S
staticFunctions
©© 
.
©© 
Add
©© 
(
©©  
$str
©©  0
,
©©0 1
QueryFunctions
©©2 @
.
©©@ A
STMLineFromWKB
©©A O
)
©©O P
;
©©P Q
staticFunctions
™™ 
.
™™ 
Add
™™ 
(
™™  
$str
™™  0
,
™™0 1
QueryFunctions
™™2 @
.
™™@ A
STMPolyFromWKB
™™A O
)
™™O P
;
™™P Q
staticFunctions
´´ 
.
´´ 
Add
´´ 
(
´´  
$str
´´  3
,
´´3 4
QueryFunctions
´´5 C
.
´´C D
STGeomCollFromWKB
´´D U
)
´´U V
;
´´V W
staticFunctions
¨¨ 
.
¨¨ 
Add
¨¨ 
(
¨¨  
$str
¨¨  -
,
¨¨- .
QueryFunctions
¨¨/ =
.
¨¨= >
GeomFromGML
¨¨> I
)
¨¨I J
;
¨¨J K
instanceFunctions
ÆÆ 
=
ÆÆ 
new
ÆÆ  #

Dictionary
ÆÆ$ .
<
ÆÆ. /
string
ÆÆ/ 5
,
ÆÆ5 6
QueryFunctions
ÆÆ7 E
>
ÆÆE F
(
ÆÆF G
)
ÆÆG H
;
ÆÆH I
instanceFunctions
ØØ 
.
ØØ 
Add
ØØ !
(
ØØ! "
$str
ØØ" -
,
ØØ- .
QueryFunctions
ØØ/ =
.
ØØ= >
	Substring
ØØ> G
)
ØØG H
;
ØØH I
instanceFunctions
∞∞ 
.
∞∞ 
Add
∞∞ !
(
∞∞! "
$str
∞∞" +
,
∞∞+ ,
QueryFunctions
∞∞- ;
.
∞∞; <
Lower
∞∞< A
)
∞∞A B
;
∞∞B C
instanceFunctions
±± 
.
±± 
Add
±± !
(
±±! "
$str
±±" +
,
±±+ ,
QueryFunctions
±±- ;
.
±±; <
Upper
±±< A
)
±±A B
;
±±B C
instanceFunctions
≤≤ 
.
≤≤ 
Add
≤≤ !
(
≤≤! "
$str
≤≤" +
,
≤≤+ ,
QueryFunctions
≤≤- ;
.
≤≤; <
Replace
≤≤< C
)
≤≤C D
;
≤≤D E
instanceFunctions
≥≥ 
.
≥≥ 
Add
≥≥ !
(
≥≥! "
$str
≥≥" +
,
≥≥+ ,
QueryFunctions
≥≥- ;
.
≥≥; <
Rtrim
≥≥< A
)
≥≥A B
;
≥≥B C
instanceFunctions
¥¥ 
.
¥¥ 
Add
¥¥ !
(
¥¥! "
$str
¥¥" -
,
¥¥- .
QueryFunctions
¥¥/ =
.
¥¥= >
Ltrim
¥¥> C
)
¥¥C D
;
¥¥D E
instanceFunctions
µµ 
.
µµ 
Add
µµ !
(
µµ! "
$str
µµ" (
,
µµ( )
QueryFunctions
µµ* 8
.
µµ8 9
Trim
µµ9 =
)
µµ= >
;
µµ> ?
instanceFunctions
∂∂ 
.
∂∂ 
Add
∂∂ !
(
∂∂! "
$str
∂∂" +
,
∂∂+ ,
QueryFunctions
∂∂- ;
.
∂∂; <
Reverse
∂∂< C
)
∂∂C D
;
∂∂D E
instanceFunctions
∑∑ 
.
∑∑ 
Add
∑∑ !
(
∑∑! "
$str
∑∑" ,
,
∑∑, -
QueryFunctions
∑∑. <
.
∑∑< =

STAsBinary
∑∑= G
)
∑∑G H
;
∑∑H I
instanceFunctions
∏∏ 
.
∏∏ 
Add
∏∏ !
(
∏∏! "
$str
∏∏" *
,
∏∏* +
QueryFunctions
∏∏, :
.
∏∏: ;
STAsText
∏∏; C
)
∏∏C D
;
∏∏D E
instanceFunctions
ππ 
.
ππ 
Add
ππ !
(
ππ! "
$str
ππ" *
,
ππ* +
QueryFunctions
ππ, :
.
ππ: ;
STBuffer
ππ; C
)
ππC D
;
ππD E
instanceFunctions
ªª 
.
ªª 
Add
ªª !
(
ªª! "
$str
ªª" .
,
ªª. /
QueryFunctions
ªª0 >
.
ªª> ?
STConvexHull
ªª? K
)
ªªK L
;
ªªL M
instanceFunctions
ºº 
.
ºº 
Add
ºº !
(
ºº! "
$str
ºº" +
,
ºº+ ,
QueryFunctions
ºº- ;
.
ºº; <
	STCrosses
ºº< E
)
ººE F
;
ººF G
instanceFunctions
ΩΩ 
.
ΩΩ 
Add
ΩΩ !
(
ΩΩ! "
$str
ΩΩ" .
,
ΩΩ. /
QueryFunctions
ΩΩ0 >
.
ΩΩ> ?
STDifference
ΩΩ? K
)
ΩΩK L
;
ΩΩL M
instanceFunctions
ææ 
.
ææ 
Add
ææ !
(
ææ! "
$str
ææ" ,
,
ææ, -
QueryFunctions
ææ. <
.
ææ< =

STDisjoint
ææ= G
)
ææG H
;
ææH I
instanceFunctions
øø 
.
øø 
Add
øø !
(
øø! "
$str
øø" ,
,
øø, -
QueryFunctions
øø. <
.
øø< =

STDistance
øø= G
)
øøG H
;
øøH I
instanceFunctions
¿¿ 
.
¿¿ 
Add
¿¿ !
(
¿¿! "
$str
¿¿" ,
,
¿¿, -
QueryFunctions
¿¿. <
.
¿¿< =

STEnvelope
¿¿= G
)
¿¿G H
;
¿¿H I
instanceFunctions
¡¡ 
.
¡¡ 
Add
¡¡ !
(
¡¡! "
$str
¡¡" 0
,
¡¡0 1
QueryFunctions
¡¡2 @
.
¡¡@ A
STGeometryN
¡¡A L
)
¡¡L M
;
¡¡M N
instanceFunctions
¬¬ 
.
¬¬ 
Add
¬¬ !
(
¬¬! "
$str
¬¬" 0
,
¬¬0 1
QueryFunctions
¬¬2 @
.
¬¬@ A
STIntersection
¬¬A O
)
¬¬O P
;
¬¬P Q
instanceFunctions
√√ 
.
√√ 
Add
√√ !
(
√√! "
$str
√√" .
,
√√. /
QueryFunctions
√√0 >
.
√√> ?
STIntersects
√√? K
)
√√K L
;
√√L M
instanceFunctions
ƒƒ 
.
ƒƒ 
Add
ƒƒ !
(
ƒƒ! "
$str
ƒƒ" ,
,
ƒƒ, -
QueryFunctions
ƒƒ. <
.
ƒƒ< =

STOverlaps
ƒƒ= G
)
ƒƒG H
;
ƒƒH I
instanceFunctions
≈≈ 
.
≈≈ 
Add
≈≈ !
(
≈≈! "
$str
≈≈" *
,
≈≈* +
QueryFunctions
≈≈, :
.
≈≈: ;
STRelate
≈≈; C
)
≈≈C D
;
≈≈D E
instanceFunctions
∆∆ 
.
∆∆ 
Add
∆∆ !
(
∆∆! "
$str
∆∆" 7
,
∆∆7 8
QueryFunctions
∆∆9 G
.
∆∆G H
STSymDifference
∆∆H W
)
∆∆W X
;
∆∆X Y
instanceFunctions
«« 
.
«« 
Add
«« !
(
««! "
$str
««" +
,
««+ ,
QueryFunctions
««- ;
.
««; <
	STTouches
««< E
)
««E F
;
««F G
instanceFunctions
»» 
.
»» 
Add
»» !
(
»»! "
$str
»»" )
,
»») *
QueryFunctions
»»+ 9
.
»»9 :
STUnion
»»: A
)
»»A B
;
»»B C
instanceFunctions
…… 
.
…… 
Add
…… !
(
……! "
$str
……" *
,
……* +
QueryFunctions
……, :
.
……: ;
STWithin
……; C
)
……C D
;
……D E
aggregteFunctions
ÀÀ 
=
ÀÀ 
new
ÀÀ  #

Dictionary
ÀÀ$ .
<
ÀÀ. /
string
ÀÀ/ 5
,
ÀÀ5 6
QueryFunctions
ÀÀ7 E
>
ÀÀE F
(
ÀÀF G
)
ÀÀG H
;
ÀÀH I
aggregteFunctions
ÃÃ 
.
ÃÃ 
Add
ÃÃ !
(
ÃÃ! "
$str
ÃÃ" )
,
ÃÃ) *
QueryFunctions
ÃÃ+ 9
.
ÃÃ9 :
Count
ÃÃ: ?
)
ÃÃ? @
;
ÃÃ@ A
aggregteFunctions
ÕÕ 
.
ÕÕ 
Add
ÕÕ !
(
ÕÕ! "
$str
ÕÕ" '
,
ÕÕ' (
QueryFunctions
ÕÕ) 7
.
ÕÕ7 8
Max
ÕÕ8 ;
)
ÕÕ; <
;
ÕÕ< =
aggregteFunctions
ŒŒ 
.
ŒŒ 
Add
ŒŒ !
(
ŒŒ! "
$str
ŒŒ" '
,
ŒŒ' (
QueryFunctions
ŒŒ) 7
.
ŒŒ7 8
Min
ŒŒ8 ;
)
ŒŒ; <
;
ŒŒ< =
aggregteFunctions
œœ 
.
œœ 
Add
œœ !
(
œœ! "
$str
œœ" 2
,
œœ2 3
QueryFunctions
œœ4 B
.
œœB C
UnionAggregate
œœC Q
)
œœQ R
;
œœR S
aggregteFunctions
–– 
.
–– 
Add
–– !
(
––! "
$str
––" 7
,
––7 8
QueryFunctions
––9 G
.
––G H!
CollectionAggregate
––H [
)
––[ \
;
––\ ]
aggregteFunctions
—— 
.
—— 
Add
—— !
(
——! "
$str
——" 7
,
——7 8
QueryFunctions
——9 G
.
——G H!
ConvexHullAggregate
——H [
)
——[ \
;
——\ ]
aggregteFunctions
““ 
.
““ 
Add
““ !
(
““! "
$str
““" 5
,
““5 6
QueryFunctions
““7 E
.
““E F
EnvelopeAggregate
““F W
)
““W X
;
““X Y 
functionProperties
‘‘ 
=
‘‘  
new
‘‘! $

Dictionary
‘‘% /
<
‘‘/ 0
FunctionProperty
‘‘0 @
,
‘‘@ A
QueryFunctions
‘‘B P
>
‘‘P Q
(
‘‘Q R
)
‘‘R S
;
‘‘S T 
functionProperties
’’ 
.
’’ 
Add
’’ "
(
’’" #
new
’’# &
FunctionProperty
’’' 7
{
’’8 9

ObjectType
’’: D
=
’’E F
typeof
’’G M
(
’’M N
string
’’N T
)
’’T U
,
’’U V
FunctionName
’’W c
=
’’d e
$str
’’f n
}
’’o p
,
’’p q
QueryFunctions’’r Ä
.’’Ä Å
Len’’Å Ñ
)’’Ñ Ö
;’’Ö Ü 
functionProperties
÷÷ 
.
÷÷ 
Add
÷÷ "
(
÷÷" #
new
÷÷# &
FunctionProperty
÷÷' 7
{
÷÷8 9

ObjectType
÷÷: D
=
÷÷E F
typeof
÷÷G M
(
÷÷M N
	IGeometry
÷÷N W
)
÷÷W X
,
÷÷X Y
FunctionName
÷÷Z f
=
÷÷g h
$str
÷÷i o
}
÷÷p q
,
÷÷q r
QueryFunctions÷÷s Å
.÷÷Å Ç
STArea÷÷Ç à
)÷÷à â
;÷÷â ä 
functionProperties
◊◊ 
.
◊◊ 
Add
◊◊ "
(
◊◊" #
new
◊◊# &
FunctionProperty
◊◊' 7
{
◊◊8 9

ObjectType
◊◊: D
=
◊◊E F
typeof
◊◊G M
(
◊◊M N
	IGeometry
◊◊N W
)
◊◊W X
,
◊◊X Y
FunctionName
◊◊Z f
=
◊◊g h
$str
◊◊i s
}
◊◊t u
,
◊◊u v
QueryFunctions◊◊w Ö
.◊◊Ö Ü

STBoundary◊◊Ü ê
)◊◊ê ë
;◊◊ë í 
functionProperties
ÿÿ 
.
ÿÿ 
Add
ÿÿ "
(
ÿÿ" #
new
ÿÿ# &
FunctionProperty
ÿÿ' 7
{
ÿÿ8 9

ObjectType
ÿÿ: D
=
ÿÿE F
typeof
ÿÿG M
(
ÿÿM N
	IGeometry
ÿÿN W
)
ÿÿW X
,
ÿÿX Y
FunctionName
ÿÿZ f
=
ÿÿg h
$str
ÿÿi s
}
ÿÿt u
,
ÿÿu v
QueryFunctionsÿÿw Ö
.ÿÿÖ Ü

STCentroidÿÿÜ ê
)ÿÿê ë
;ÿÿë í 
functionProperties
ŸŸ 
.
ŸŸ 
Add
ŸŸ "
(
ŸŸ" #
new
ŸŸ# &
FunctionProperty
ŸŸ' 7
{
ŸŸ8 9

ObjectType
ŸŸ: D
=
ŸŸE F
typeof
ŸŸG M
(
ŸŸM N
	IGeometry
ŸŸN W
)
ŸŸW X
,
ŸŸX Y
FunctionName
ŸŸZ f
=
ŸŸg h
$str
ŸŸi t
}
ŸŸu v
,
ŸŸv w
QueryFunctionsŸŸx Ü
.ŸŸÜ á
STDimensionŸŸá í
)ŸŸí ì
;ŸŸì î 
functionProperties
⁄⁄ 
.
⁄⁄ 
Add
⁄⁄ "
(
⁄⁄" #
new
⁄⁄# &
FunctionProperty
⁄⁄' 7
{
⁄⁄8 9

ObjectType
⁄⁄: D
=
⁄⁄E F
typeof
⁄⁄G M
(
⁄⁄M N
	IGeometry
⁄⁄N W
)
⁄⁄W X
,
⁄⁄X Y
FunctionName
⁄⁄Z f
=
⁄⁄g h
$str
⁄⁄i r
}
⁄⁄s t
,
⁄⁄t u
QueryFunctions⁄⁄v Ñ
.⁄⁄Ñ Ö
	STIsEmpty⁄⁄Ö é
)⁄⁄é è
;⁄⁄è ê 
functionProperties
€€ 
.
€€ 
Add
€€ "
(
€€" #
new
€€# &
FunctionProperty
€€' 7
{
€€8 9

ObjectType
€€: D
=
€€E F
typeof
€€G M
(
€€M N
	IGeometry
€€N W
)
€€W X
,
€€X Y
FunctionName
€€Z f
=
€€g h
$str
€€i s
}
€€t u
,
€€u v
QueryFunctions€€w Ö
.€€Ö Ü

STIsSimple€€Ü ê
)€€ê ë
;€€ë í 
functionProperties
‹‹ 
.
‹‹ 
Add
‹‹ "
(
‹‹" #
new
‹‹# &
FunctionProperty
‹‹' 7
{
‹‹8 9

ObjectType
‹‹: D
=
‹‹E F
typeof
‹‹G M
(
‹‹M N
	IGeometry
‹‹N W
)
‹‹W X
,
‹‹X Y
FunctionName
‹‹Z f
=
‹‹g h
$str
‹‹i r
}
‹‹s t
,
‹‹t u
QueryFunctions‹‹v Ñ
.‹‹Ñ Ö
	STIsValid‹‹Ö é
)‹‹é è
;‹‹è ê 
functionProperties
›› 
.
›› 
Add
›› "
(
››" #
new
››# &
FunctionProperty
››' 7
{
››8 9

ObjectType
››: D
=
››E F
typeof
››G M
(
››M N
	IGeometry
››N W
)
››W X
,
››X Y
FunctionName
››Z f
=
››g h
$str
››i q
}
››r s
,
››s t
QueryFunctions››u É
.››É Ñ
STLength››Ñ å
)››å ç
;››ç é 
functionProperties
ﬁﬁ 
.
ﬁﬁ 
Add
ﬁﬁ "
(
ﬁﬁ" #
new
ﬁﬁ# &
FunctionProperty
ﬁﬁ' 7
{
ﬁﬁ8 9

ObjectType
ﬁﬁ: D
=
ﬁﬁE F
typeof
ﬁﬁG M
(
ﬁﬁM N
	IGeometry
ﬁﬁN W
)
ﬁﬁW X
,
ﬁﬁX Y
FunctionName
ﬁﬁZ f
=
ﬁﬁg h
$str
ﬁﬁi x
}
ﬁﬁy z
,
ﬁﬁz {
QueryFunctionsﬁﬁ| ä
.ﬁﬁä ã
STNumGeometriesﬁﬁã ö
)ﬁﬁö õ
;ﬁﬁõ ú 
functionProperties
ﬂﬂ 
.
ﬂﬂ 
Add
ﬂﬂ "
(
ﬂﬂ" #
new
ﬂﬂ# &
FunctionProperty
ﬂﬂ' 7
{
ﬂﬂ8 9

ObjectType
ﬂﬂ: D
=
ﬂﬂE F
typeof
ﬂﬂG M
(
ﬂﬂM N
	IGeometry
ﬂﬂN W
)
ﬂﬂW X
,
ﬂﬂX Y
FunctionName
ﬂﬂZ f
=
ﬂﬂg h
$str
ﬂﬂi t
}
ﬂﬂu v
,
ﬂﬂv w
QueryFunctionsﬂﬂx Ü
.ﬂﬂÜ á
STNumPointsﬂﬂá í
)ﬂﬂí ì
;ﬂﬂì î 
functionProperties
‡‡ 
.
‡‡ 
Add
‡‡ "
(
‡‡" #
new
‡‡# &
FunctionProperty
‡‡' 7
{
‡‡8 9

ObjectType
‡‡: D
=
‡‡E F
typeof
‡‡G M
(
‡‡M N
	IGeometry
‡‡N W
)
‡‡W X
,
‡‡X Y
FunctionName
‡‡Z f
=
‡‡g h
$str
‡‡i y
}
‡‡z {
,
‡‡{ |
QueryFunctions‡‡} ã
.‡‡ã å
STNumPoints‡‡å ó
)‡‡ó ò
;‡‡ò ô 
functionProperties
·· 
.
·· 
Add
·· "
(
··" #
new
··# &
FunctionProperty
··' 7
{
··8 9

ObjectType
··: D
=
··E F
typeof
··G M
(
··M N
	IGeometry
··N W
)
··W X
,
··X Y
FunctionName
··Z f
=
··g h
$str
··i o
}
··p q
,
··q r
QueryFunctions··s Å
.··Å Ç
STSrid··Ç à
)··à â
;··â ä
}
‰‰ 	
private
ÁÁ 

IQueryItem
ÁÁ 
ProcessItem
ÁÁ &
(
ÁÁ& '

Expression
ÁÁ' 1

expression
ÁÁ2 <
)
ÁÁ< =
{
ËË 	
BinaryOperator
ÈÈ 
binaryOp
ÈÈ #
;
ÈÈ# $
TransformOperator
ÍÍ 
transformOp
ÍÍ )
;
ÍÍ) *
QueryFunctions
ÎÎ 
function
ÎÎ #
;
ÎÎ# $
if
ÏÏ 
(
ÏÏ 
binaryOperators
ÏÏ 
.
ÏÏ  
TryGetValue
ÏÏ  +
(
ÏÏ+ ,

expression
ÏÏ, 6
.
ÏÏ6 7
NodeType
ÏÏ7 ?
,
ÏÏ? @
out
ÏÏA D
binaryOp
ÏÏE M
)
ÏÏM N
)
ÏÏN O
{
ÌÌ 
var
ÓÓ 
left
ÓÓ 
=
ÓÓ 
ProcessItem
ÓÓ &
(
ÓÓ& '
(
ÓÓ' (

expression
ÓÓ( 2
as
ÓÓ3 5
BinaryExpression
ÓÓ6 F
)
ÓÓF G
.
ÓÓG H
Left
ÓÓH L
)
ÓÓL M
;
ÓÓM N
var
ÔÔ 
right
ÔÔ 
=
ÔÔ 
ProcessItem
ÔÔ '
(
ÔÔ' (
(
ÔÔ( )

expression
ÔÔ) 3
as
ÔÔ4 6
BinaryExpression
ÔÔ7 G
)
ÔÔG H
.
ÔÔH I
Right
ÔÔI N
)
ÔÔN O
;
ÔÔO P
if
ÒÒ 
(
ÒÒ 
(
ÒÒ 
left
ÒÒ 
is
ÒÒ 
VAL
ÒÒ  
&&
ÒÒ! #
(
ÒÒ$ %
left
ÒÒ% )
as
ÒÒ* ,
VAL
ÒÒ- 0
)
ÒÒ0 1
.
ÒÒ1 2
Value
ÒÒ2 7
==
ÒÒ8 :
DBNull
ÒÒ; A
.
ÒÒA B
Value
ÒÒB G
)
ÒÒG H
)
ÒÒH I
{
ÚÚ 
if
ÛÛ 
(
ÛÛ 
binaryOp
ÛÛ  
==
ÛÛ! #
BinaryOperator
ÛÛ$ 2
.
ÛÛ2 3
Equal
ÛÛ3 8
)
ÛÛ8 9
return
ÙÙ 
new
ÙÙ "
BEXP
ÙÙ# '
{
ÙÙ( )
Operand1
ÙÙ* 2
=
ÙÙ3 4
right
ÙÙ5 :
,
ÙÙ: ;
Operator
ÙÙ< D
=
ÙÙE F
BinaryOperator
ÙÙG U
.
ÙÙU V
IsNull
ÙÙV \
}
ÙÙ] ^
;
ÙÙ^ _
else
ıı 
if
ıı 
(
ıı 
binaryOp
ıı %
==
ıı& (
BinaryOperator
ıı) 7
.
ıı7 8
NotEqual
ıı8 @
)
ıı@ A
return
ˆˆ 
new
ˆˆ "
BEXP
ˆˆ# '
{
ˆˆ( )
Operand1
ˆˆ* 2
=
ˆˆ3 4
right
ˆˆ5 :
,
ˆˆ: ;
Operator
ˆˆ< D
=
ˆˆE F
BinaryOperator
ˆˆG U
.
ˆˆU V
	IsNotNull
ˆˆV _
}
ˆˆ` a
;
ˆˆa b
}
˜˜ 
if
˘˘ 
(
˘˘ 
(
˘˘ 
right
˘˘ 
is
˘˘ 
VAL
˘˘ !
&&
˘˘" $
(
˘˘% &
right
˘˘& +
as
˘˘, .
VAL
˘˘/ 2
)
˘˘2 3
.
˘˘3 4
Value
˘˘4 9
==
˘˘: <
DBNull
˘˘= C
.
˘˘C D
Value
˘˘D I
)
˘˘I J
)
˘˘J K
{
˙˙ 
if
˚˚ 
(
˚˚ 
binaryOp
˚˚  
==
˚˚! #
BinaryOperator
˚˚$ 2
.
˚˚2 3
Equal
˚˚3 8
)
˚˚8 9
return
¸¸ 
new
¸¸ "
BEXP
¸¸# '
{
¸¸( )
Operand1
¸¸* 2
=
¸¸3 4
left
¸¸5 9
,
¸¸9 :
Operator
¸¸; C
=
¸¸D E
BinaryOperator
¸¸F T
.
¸¸T U
IsNull
¸¸U [
}
¸¸\ ]
;
¸¸] ^
else
˝˝ 
if
˝˝ 
(
˝˝ 
binaryOp
˝˝ %
==
˝˝& (
BinaryOperator
˝˝) 7
.
˝˝7 8
NotEqual
˝˝8 @
)
˝˝@ A
return
˛˛ 
new
˛˛ "
BEXP
˛˛# '
{
˛˛( )
Operand1
˛˛* 2
=
˛˛3 4
left
˛˛5 9
,
˛˛9 :
Operator
˛˛; C
=
˛˛D E
BinaryOperator
˛˛F T
.
˛˛T U
	IsNotNull
˛˛U ^
}
˛˛_ `
;
˛˛` a
}
ˇˇ 
return
ÅÅ 
new
ÅÅ 
BEXP
ÅÅ 
{
ÅÅ  !
Operand1
ÅÅ" *
=
ÅÅ+ ,
left
ÅÅ- 1
,
ÅÅ1 2
Operand2
ÅÅ3 ;
=
ÅÅ< =
right
ÅÅ> C
,
ÅÅC D
Operator
ÅÅE M
=
ÅÅN O
binaryOp
ÅÅP X
}
ÅÅY Z
;
ÅÅZ [
}
ÇÇ 
else
ÉÉ 
if
ÉÉ 
(
ÉÉ 

expression
ÉÉ 
.
ÉÉ  
NodeType
ÉÉ  (
==
ÉÉ) +
ExpressionType
ÉÉ, :
.
ÉÉ: ;
Not
ÉÉ; >
)
ÉÉ> ?
{
ÑÑ 
var
ÖÖ 
left
ÖÖ 
=
ÖÖ 
ProcessItem
ÖÖ &
(
ÖÖ& '
(
ÖÖ' (

expression
ÖÖ( 2
as
ÖÖ3 5
UnaryExpression
ÖÖ6 E
)
ÖÖE F
.
ÖÖF G
Operand
ÖÖG N
)
ÖÖN O
;
ÖÖO P
return
ÜÜ 
new
ÜÜ 
BEXP
ÜÜ 
{
ÜÜ  !
Operand1
ÜÜ" *
=
ÜÜ+ ,
left
ÜÜ- 1
,
ÜÜ1 2
Operator
ÜÜ3 ;
=
ÜÜ< =
BinaryOperator
ÜÜ> L
.
ÜÜL M
Not
ÜÜM P
}
ÜÜQ R
;
ÜÜR S
}
áá 
else
àà 
if
àà 
(
àà  
transformOperators
àà '
.
àà' (
TryGetValue
àà( 3
(
àà3 4

expression
àà4 >
.
àà> ?
NodeType
àà? G
,
ààG H
out
ààI L
transformOp
ààM X
)
ààX Y
)
ààY Z
{
ââ 
var
ää 
left
ää 
=
ää 
ProcessItem
ää &
(
ää& '
(
ää' (

expression
ää( 2
as
ää3 5
BinaryExpression
ää6 F
)
ääF G
.
ääG H
Left
ääH L
)
ääL M
;
ääM N
var
ãã 
right
ãã 
=
ãã 
ProcessItem
ãã '
(
ãã' (
(
ãã( )

expression
ãã) 3
as
ãã4 6
BinaryExpression
ãã7 G
)
ããG H
.
ããH I
Right
ããI N
)
ããN O
;
ããO P
return
çç 
new
çç 
TEXP
çç 
{
çç  !
Operand1
çç" *
=
çç+ ,
left
çç- 1
,
çç1 2
Operand2
çç3 ;
=
çç< =
right
çç> C
,
ççC D
Operator
ççE M
=
ççN O
transformOp
ççP [
}
çç\ ]
;
çç] ^
}
éé 
else
èè 
if
èè 
(
èè 

expression
èè 
.
èè  
NodeType
èè  (
==
èè) +
ExpressionType
èè, :
.
èè: ;
Negate
èè; A
)
èèA B
{
êê 
var
ëë 
left
ëë 
=
ëë 
ProcessItem
ëë &
(
ëë& '
(
ëë' (

expression
ëë( 2
as
ëë3 5
BinaryExpression
ëë6 F
)
ëëF G
.
ëëG H
Left
ëëH L
)
ëëL M
;
ëëM N
return
íí 
new
íí 
TEXP
íí 
{
íí  !
Operand1
íí" *
=
íí+ ,
left
íí- 1
,
íí1 2
Operator
íí3 ;
=
íí< =
TransformOperator
íí> O
.
ííO P
Negate
ííP V
}
ííW X
;
ííX Y
}
ìì 
else
îî 
if
îî 
(
îî 

expression
îî 
is
îî  "
MemberExpression
îî# 3
)
îî3 4
{
ïï 
var
ññ 
exp
ññ 
=
ññ 
(
ññ 

expression
ññ %
as
ññ& (
MemberExpression
ññ) 9
)
ññ9 :
;
ññ: ;
var
óó 
propFunc
óó 
=
óó  
functionProperties
óó 1
.
óó1 2
Where
óó2 7
(
óó7 8
a
óó8 9
=>
óó: <
a
óó= >
.
óó> ?
Key
óó? B
.
óóB C
FunctionName
óóC O
==
óóP R
exp
óóS V
.
óóV W
Member
óóW ]
.
óó] ^
Name
óó^ b
.
óób c
ToLower
óóc j
(
óój k
)
óók l
&&
óóm o
a
óóp q
.
óóq r
Key
óór u
.
óóu v

ObjectTypeóóv Ä
.óóÄ Å 
IsAssignableFromóóÅ ë
(óóë í
expóóí ï
.óóï ñ

Expressionóóñ †
.óó† °
Typeóó° •
)óó• ¶
)óó¶ ß
.óóß ®
ToArrayóó® Ø
(óóØ ∞
)óó∞ ±
;óó± ≤
if
òò 
(
òò 
propFunc
òò 
.
òò 
Length
òò #
>
òò$ %
$num
òò& '
)
òò' (
{
ôô 
var
öö 
param
öö 
=
öö 
ProcessItem
öö  +
(
öö+ ,
exp
öö, /
.
öö/ 0

Expression
öö0 :
)
öö: ;
;
öö; <
return
õõ 
new
õõ 
FEXP
õõ #
{
õõ$ %
Function
õõ& .
=
õõ/ 0
propFunc
õõ1 9
[
õõ9 :
$num
õõ: ;
]
õõ; <
.
õõ< =
Value
õõ= B
,
õõB C

Parameters
õõD N
=
õõO P
new
õõQ T
IQueryValue
õõU `
[
õõ` a
]
õõa b
{
õõc d
(
õõe f
IQueryValue
õõf q
)
õõq r
param
õõr w
}
õõx y
}
õõz {
;
õõ{ |
}
úú 
if
ùù 
(
ùù 
exp
ùù 
.
ùù 

Expression
ùù "
is
ùù# %!
ParameterExpression
ùù& 9
||
ùù: <
(
ùù= >
exp
ùù> A
.
ùùA B

Expression
ùùB L
is
ùùM O
MemberExpression
ùùP `
&&
ùùa c
(
ùùd e
exp
ùùe h
.
ùùh i

Expression
ùùi s
as
ùùt v
MemberExpressionùùw á
)ùùá à
.ùùà â

Expressionùùâ ì
isùùî ñ#
ParameterExpressionùùó ™
)ùù™ ´
)ùù´ ¨
{
ûû 
var
üü 
col
üü 
=
üü 
new
üü !
COL
üü" %
(
üü% &
exp
üü& )
.
üü) *
Member
üü* 0
.
üü0 1
Name
üü1 5
)
üü5 6
;
üü6 7
return
†† 
col
†† 
;
†† 
}
°° 
var
§§ 
val
§§ 
=
§§ 

Expression
§§ $
.
§§$ %
Lambda
§§% +
(
§§+ ,

expression
§§, 6
)
§§6 7
.
§§7 8
Compile
§§8 ?
(
§§? @
)
§§@ A
.
§§A B
DynamicInvoke
§§B O
(
§§O P
)
§§P Q
;
§§Q R
if
•• 
(
•• 
val
•• 
==
•• 
null
•• 
)
••  
return
¶¶ 
new
¶¶ 
VAL
¶¶ "
{
¶¶# $
Value
¶¶% *
=
¶¶+ ,
DBNull
¶¶- 3
.
¶¶3 4
Value
¶¶4 9
}
¶¶: ;
;
¶¶; <
if
ßß 
(
ßß 
!
ßß 
val
ßß 
.
ßß 
GetType
ßß  
(
ßß  !
)
ßß! "
.
ßß" #
IsArray
ßß# *
)
ßß* +
return
®® 
new
®® 
VAL
®® "
{
®®# $
Value
®®% *
=
®®+ ,
val
®®- 0
}
®®1 2
;
®®2 3
else
©© 
return
©© 
new
©© 
ARR
©©  #
{
©©$ %
Values
©©& ,
=
©©- .
(
©©/ 0
(
©©0 1
Array
©©1 6
)
©©6 7
val
©©7 :
)
©©: ;
.
©©; <
Cast
©©< @
<
©©@ A
object
©©A G
>
©©G H
(
©©H I
)
©©I J
.
©©J K
Select
©©K Q
(
©©Q R
a
©©R S
=>
©©T V
new
©©W Z
VAL
©©[ ^
{
©©_ `
Value
©©a f
=
©©g h
a
©©i j
}
©©k l
)
©©l m
.
©©m n
ToArray
©©n u
(
©©u v
)
©©v w
}
©©x y
;
©©y z
}
¨¨ 
else
≠≠ 
if
≠≠ 
(
≠≠ 

expression
≠≠ 
is
≠≠  "
UnaryExpression
≠≠# 2
)
≠≠2 3
{
ÆÆ 
return
ØØ 
ProcessItem
ØØ "
(
ØØ" #
(
ØØ# $

expression
ØØ$ .
as
ØØ/ 1
UnaryExpression
ØØ2 A
)
ØØA B
.
ØØB C
Operand
ØØC J
)
ØØJ K
;
ØØK L
}
≤≤ 
else
≥≥ 
if
≥≥ 
(
≥≥ 

expression
≥≥ 
is
≥≥  " 
ConstantExpression
≥≥# 5
)
≥≥5 6
{
¥¥ 
var
µµ 
val
µµ 
=
µµ 
new
µµ 
VAL
µµ !
{
µµ" #
Value
µµ$ )
=
µµ* +

Expression
µµ, 6
.
µµ6 7
Lambda
µµ7 =
(
µµ= >

expression
µµ> H
)
µµH I
.
µµI J
Compile
µµJ Q
(
µµQ R
)
µµR S
.
µµS T
DynamicInvoke
µµT a
(
µµa b
)
µµb c
}
µµd e
;
µµe f
return
∂∂ 
val
∂∂ 
;
∂∂ 
}
∑∑ 
else
∏∏ 
if
∏∏ 
(
∏∏ 

expression
∏∏ 
is
∏∏  ""
MethodCallExpression
∏∏# 7
)
∏∏7 8
{
ππ 
var
∫∫ 
exp
∫∫ 
=
∫∫ 
(
∫∫ "
MethodCallExpression
∫∫ /
)
∫∫/ 0

expression
∫∫0 :
;
∫∫: ;
if
ªª 
(
ªª 
aggregteFunctions
ªª %
.
ªª% &
TryGetValue
ªª& 1
(
ªª1 2
exp
ªª2 5
.
ªª5 6
Method
ªª6 <
.
ªª< =
Name
ªª= A
.
ªªA B
ToLower
ªªB I
(
ªªI J
CultureInfo
ªªJ U
.
ªªU V
InvariantCulture
ªªV f
)
ªªf g
,
ªªg h
out
ªªi l
function
ªªm u
)
ªªu v
&&
ªªw y
exp
ªªz }
.
ªª} ~
Objectªª~ Ñ
isªªÖ á#
ParameterExpressionªªà õ
)ªªõ ú
{
ºº 
var
ΩΩ 
	arguments
ΩΩ !
=
ΩΩ" #
new
ΩΩ$ '
List
ΩΩ( ,
<
ΩΩ, -

IQueryItem
ΩΩ- 7
>
ΩΩ7 8
(
ΩΩ8 9
)
ΩΩ9 :
;
ΩΩ: ;
foreach
ææ 
(
ææ 
var
ææ  
arg
ææ! $
in
ææ% '
exp
ææ( +
.
ææ+ ,
	Arguments
ææ, 5
)
ææ5 6
	arguments
øø !
.
øø! "
Add
øø" %
(
øø% &
ProcessItem
øø& 1
(
øø1 2
(
øø2 3
arg
øø3 6
as
øø7 9
LambdaExpression
øø: J
)
øøJ K
.
øøK L
Body
øøL P
)
øøP Q
)
øøQ R
;
øøR S
if
¿¿ 
(
¿¿ 
exp
¿¿ 
.
¿¿ 
Method
¿¿ "
.
¿¿" #
Name
¿¿# '
.
¿¿' (
ToLower
¿¿( /
(
¿¿/ 0
)
¿¿0 1
==
¿¿2 4
$str
¿¿5 <
)
¿¿< =
	arguments
¡¡ !
.
¡¡! "
Add
¡¡" %
(
¡¡% &
COL
¡¡& )
.
¡¡) *
ALL
¡¡* -
)
¡¡- .
;
¡¡. /
return
¬¬ 
new
¬¬ 
FEXP
¬¬ #
{
¬¬$ %
Function
¬¬& .
=
¬¬/ 0
function
¬¬1 9
,
¬¬9 :

Parameters
¬¬; E
=
¬¬F G
	arguments
¬¬H Q
.
¬¬Q R
Where
¬¬R W
(
¬¬W X
a
¬¬X Y
=>
¬¬Z \
a
¬¬] ^
is
¬¬_ a
IQueryValue
¬¬b m
)
¬¬m n
.
¬¬n o
Cast
¬¬o s
<
¬¬s t
IQueryValue
¬¬t 
>¬¬ Ä
(¬¬Ä Å
)¬¬Å Ç
.¬¬Ç É
ToArray¬¬É ä
(¬¬ä ã
)¬¬ã å
}¬¬ç é
;¬¬é è
}
√√ 
else
ƒƒ 
if
ƒƒ 
(
ƒƒ 
exp
ƒƒ 
.
ƒƒ 
Method
ƒƒ #
.
ƒƒ# $
Name
ƒƒ$ (
.
ƒƒ( )
ToLower
ƒƒ) 0
(
ƒƒ0 1
CultureInfo
ƒƒ1 <
.
ƒƒ< =
InvariantCulture
ƒƒ= M
)
ƒƒM N
==
ƒƒO Q
$str
ƒƒR W
)
ƒƒW X
{
≈≈ 
var
∆∆ 
	arguments
∆∆ !
=
∆∆" #
new
∆∆$ '
List
∆∆( ,
<
∆∆, -

IQueryItem
∆∆- 7
>
∆∆7 8
(
∆∆8 9
)
∆∆9 :
;
∆∆: ;
foreach
«« 
(
«« 
var
««  
arg
««! $
in
««% '
(
««( )

expression
««) 3
as
««4 6"
MethodCallExpression
««7 K
)
««K L
.
««L M
	Arguments
««M V
)
««V W
	arguments
»» !
.
»»! "
Add
»»" %
(
»»% &
ProcessItem
»»& 1
(
»»1 2
(
»»2 3
arg
»»3 6
as
»»7 9
LambdaExpression
»»: J
)
»»J K
.
»»K L
Body
»»L P
)
»»P Q
)
»»Q R
;
»»R S
return
…… 
new
…… 
ASC
…… "
{
……# $
Value
……% *
=
……+ ,
(
……- .
IQueryValue
……. 9
)
……9 :
	arguments
……: C
[
……C D
$num
……D E
]
……E F
}
……G H
;
……H I
}
   
else
ÀÀ 
if
ÀÀ 
(
ÀÀ 
exp
ÀÀ 
.
ÀÀ 
Method
ÀÀ #
.
ÀÀ# $
Name
ÀÀ$ (
.
ÀÀ( )
ToLower
ÀÀ) 0
(
ÀÀ0 1
CultureInfo
ÀÀ1 <
.
ÀÀ< =
InvariantCulture
ÀÀ= M
)
ÀÀM N
==
ÀÀO Q
$str
ÀÀR X
)
ÀÀX Y
{
ÃÃ 
var
ÕÕ 
	arguments
ÕÕ !
=
ÕÕ" #
new
ÕÕ$ '
List
ÕÕ( ,
<
ÕÕ, -

IQueryItem
ÕÕ- 7
>
ÕÕ7 8
(
ÕÕ8 9
)
ÕÕ9 :
;
ÕÕ: ;
foreach
ŒŒ 
(
ŒŒ 
var
ŒŒ  
arg
ŒŒ! $
in
ŒŒ% '
(
ŒŒ( )

expression
ŒŒ) 3
as
ŒŒ4 6"
MethodCallExpression
ŒŒ7 K
)
ŒŒK L
.
ŒŒL M
	Arguments
ŒŒM V
)
ŒŒV W
	arguments
œœ !
.
œœ! "
Add
œœ" %
(
œœ% &
ProcessItem
œœ& 1
(
œœ1 2
(
œœ2 3
arg
œœ3 6
as
œœ7 9
LambdaExpression
œœ: J
)
œœJ K
.
œœK L
Body
œœL P
)
œœP Q
)
œœQ R
;
œœR S
return
–– 
new
–– 
DESC
–– #
{
––$ %
Value
––& +
=
––, -
(
––. /
IQueryValue
––/ :
)
––: ;
	arguments
––; D
[
––D E
$num
––E F
]
––F G
}
––H I
;
––I J
}
—— 
else
““ 
if
““ 
(
““ 
staticFunctions
““ (
.
““( )
TryGetValue
““) 4
(
““4 5
exp
““5 8
.
““8 9
Method
““9 ?
.
““? @
Name
““@ D
.
““D E
ToLower
““E L
(
““L M
CultureInfo
““M X
.
““X Y
InvariantCulture
““Y i
)
““i j
,
““j k
out
““l o
function
““p x
)
““x y
)
““y z
{
”” 
var
‘‘ 
	arguments
‘‘ !
=
‘‘" #
new
‘‘$ '
List
‘‘( ,
<
‘‘, -

IQueryItem
‘‘- 7
>
‘‘7 8
(
‘‘8 9
)
‘‘9 :
;
‘‘: ;
foreach
’’ 
(
’’ 
var
’’  
arg
’’! $
in
’’% '
(
’’( )

expression
’’) 3
as
’’4 6"
MethodCallExpression
’’7 K
)
’’K L
.
’’L M
	Arguments
’’M V
)
’’V W
	arguments
÷÷ !
.
÷÷! "
Add
÷÷" %
(
÷÷% &
ProcessItem
÷÷& 1
(
÷÷1 2
arg
÷÷2 5
)
÷÷5 6
)
÷÷6 7
;
÷÷7 8
return
◊◊ 
new
◊◊ 
FEXP
◊◊ #
{
◊◊$ %
Function
◊◊& .
=
◊◊/ 0
function
◊◊1 9
,
◊◊9 :

Parameters
◊◊; E
=
◊◊F G
	arguments
◊◊H Q
.
◊◊Q R
Where
◊◊R W
(
◊◊W X
a
◊◊X Y
=>
◊◊Z \
a
◊◊] ^
is
◊◊_ a
IQueryValue
◊◊b m
)
◊◊m n
.
◊◊n o
Cast
◊◊o s
<
◊◊s t
IQueryValue
◊◊t 
>◊◊ Ä
(◊◊Ä Å
)◊◊Å Ç
.◊◊Ç É
ToArray◊◊É ä
(◊◊ä ã
)◊◊ã å
}◊◊ç é
;◊◊é è
}
ÿÿ 
else
ŸŸ 
if
ŸŸ 
(
ŸŸ 
instanceFunctions
ŸŸ *
.
ŸŸ* +
TryGetValue
ŸŸ+ 6
(
ŸŸ6 7
exp
ŸŸ7 :
.
ŸŸ: ;
Method
ŸŸ; A
.
ŸŸA B
Name
ŸŸB F
.
ŸŸF G
ToLower
ŸŸG N
(
ŸŸN O
CultureInfo
ŸŸO Z
.
ŸŸZ [
InvariantCulture
ŸŸ[ k
)
ŸŸk l
,
ŸŸl m
out
ŸŸn q
function
ŸŸr z
)
ŸŸz {
)
ŸŸ{ |
{
⁄⁄ 
var
€€ 
	arguments
€€ !
=
€€" #
new
€€$ '
List
€€( ,
<
€€, -

IQueryItem
€€- 7
>
€€7 8
(
€€8 9
)
€€9 :
;
€€: ;
	arguments
‹‹ 
.
‹‹ 
Add
‹‹ !
(
‹‹! "
ProcessItem
‹‹" -
(
‹‹- .
(
‹‹. /

expression
‹‹/ 9
as
‹‹: <"
MethodCallExpression
‹‹= Q
)
‹‹Q R
.
‹‹R S
Object
‹‹S Y
)
‹‹Y Z
)
‹‹Z [
;
‹‹[ \
foreach
›› 
(
›› 
var
››  
arg
››! $
in
››% '
(
››( )

expression
››) 3
as
››4 6"
MethodCallExpression
››7 K
)
››K L
.
››L M
	Arguments
››M V
)
››V W
	arguments
ﬁﬁ !
.
ﬁﬁ! "
Add
ﬁﬁ" %
(
ﬁﬁ% &
ProcessItem
ﬁﬁ& 1
(
ﬁﬁ1 2
arg
ﬁﬁ2 5
)
ﬁﬁ5 6
)
ﬁﬁ6 7
;
ﬁﬁ7 8
return
ﬂﬂ 
new
ﬂﬂ 
FEXP
ﬂﬂ #
{
ﬂﬂ$ %
Function
ﬂﬂ& .
=
ﬂﬂ/ 0
function
ﬂﬂ1 9
,
ﬂﬂ9 :

Parameters
ﬂﬂ; E
=
ﬂﬂF G
	arguments
ﬂﬂH Q
.
ﬂﬂQ R
Where
ﬂﬂR W
(
ﬂﬂW X
a
ﬂﬂX Y
=>
ﬂﬂZ \
a
ﬂﬂ] ^
is
ﬂﬂ_ a
IQueryValue
ﬂﬂb m
)
ﬂﬂm n
.
ﬂﬂn o
Cast
ﬂﬂo s
<
ﬂﬂs t
IQueryValue
ﬂﬂt 
>ﬂﬂ Ä
(ﬂﬂÄ Å
)ﬂﬂÅ Ç
.ﬂﬂÇ É
ToArrayﬂﬂÉ ä
(ﬂﬂä ã
)ﬂﬂã å
}ﬂﬂç é
;ﬂﬂé è
}
‡‡ 
else
·· 
if
·· 
(
·· 
exp
·· 
.
·· 
Method
·· #
.
··# $
Name
··$ (
.
··( )
ToLower
··) 0
(
··0 1
CultureInfo
··1 <
.
··< =
InvariantCulture
··= M
)
··M N
==
··O Q
$str
··R V
)
··V W
{
‚‚ 
var
„„ 
p1
„„ 
=
„„ 
ProcessItem
„„ (
(
„„( )
(
„„) *

expression
„„* 4
as
„„5 7"
MethodCallExpression
„„8 L
)
„„L M
.
„„M N
	Arguments
„„N W
[
„„W X
$num
„„X Y
]
„„Y Z
)
„„Z [
;
„„[ \
var
‰‰ 
p2
‰‰ 
=
‰‰ 
ProcessItem
‰‰ (
(
‰‰( )
(
‰‰) *

expression
‰‰* 4
as
‰‰5 7"
MethodCallExpression
‰‰8 L
)
‰‰L M
.
‰‰M N
	Arguments
‰‰N W
[
‰‰W X
$num
‰‰X Y
]
‰‰Y Z
)
‰‰Z [
;
‰‰[ \
return
ÂÂ 
new
ÂÂ 
BEXP
ÂÂ #
{
ÂÂ$ %
Operand1
ÂÂ& .
=
ÂÂ/ 0
p1
ÂÂ1 3
,
ÂÂ3 4
Operand2
ÂÂ5 =
=
ÂÂ> ?
p2
ÂÂ@ B
,
ÂÂB C
Operator
ÂÂD L
=
ÂÂM N
BinaryOperator
ÂÂO ]
.
ÂÂ] ^
In
ÂÂ^ `
}
ÂÂa b
;
ÂÂb c
}
ÊÊ 
else
ÁÁ 
if
ÁÁ 
(
ÁÁ 
new
ÁÁ 
[
ÁÁ 
]
ÁÁ 
{
ÁÁ  
$str
ÁÁ! +
,
ÁÁ+ ,
$str
ÁÁ- 9
,
ÁÁ9 :
$str
ÁÁ; E
}
ÁÁF G
.
ÁÁG H
Contains
ÁÁH P
(
ÁÁP Q
exp
ÁÁQ T
.
ÁÁT U
Method
ÁÁU [
.
ÁÁ[ \
Name
ÁÁ\ `
.
ÁÁ` a
ToLower
ÁÁa h
(
ÁÁh i
CultureInfo
ÁÁi t
.
ÁÁt u
InvariantCultureÁÁu Ö
)ÁÁÖ Ü
)ÁÁÜ á
)ÁÁá à
{
ËË 
if
ÈÈ 
(
ÈÈ 
exp
ÈÈ 
.
ÈÈ 
Method
ÈÈ "
.
ÈÈ" #
Name
ÈÈ# '
.
ÈÈ' (
ToLower
ÈÈ( /
(
ÈÈ/ 0
CultureInfo
ÈÈ0 ;
.
ÈÈ; <
InvariantCulture
ÈÈ< L
)
ÈÈL M
==
ÈÈN P
$str
ÈÈQ [
&&
ÈÈ\ ^
exp
ÈÈ_ b
.
ÈÈb c
Object
ÈÈc i
.
ÈÈi j
Type
ÈÈj n
==
ÈÈo q
typeof
ÈÈr x
(
ÈÈx y
	IGeometryÈÈy Ç
)ÈÈÇ É
)ÈÈÉ Ñ
{
ÍÍ 
var
ÎÎ 
args
ÎÎ  
=
ÎÎ! "
new
ÎÎ# &
List
ÎÎ' +
<
ÎÎ+ ,

IQueryItem
ÎÎ, 6
>
ÎÎ6 7
(
ÎÎ7 8
)
ÎÎ8 9
;
ÎÎ9 :
args
ÏÏ 
.
ÏÏ 
Add
ÏÏ  
(
ÏÏ  !
ProcessItem
ÏÏ! ,
(
ÏÏ, -
exp
ÏÏ- 0
.
ÏÏ0 1
Object
ÏÏ1 7
)
ÏÏ7 8
)
ÏÏ8 9
;
ÏÏ9 :
foreach
ÌÌ 
(
ÌÌ  !
var
ÌÌ! $
arg
ÌÌ% (
in
ÌÌ) +
exp
ÌÌ, /
.
ÌÌ/ 0
	Arguments
ÌÌ0 9
)
ÌÌ9 :
args
ÓÓ  
.
ÓÓ  !
Add
ÓÓ! $
(
ÓÓ$ %
ProcessItem
ÓÓ% 0
(
ÓÓ0 1
arg
ÓÓ1 4
)
ÓÓ4 5
)
ÓÓ5 6
;
ÓÓ6 7
return
ÔÔ 
new
ÔÔ "
FEXP
ÔÔ# '
{
ÔÔ( )
Function
ÔÔ* 2
=
ÔÔ3 4
QueryFunctions
ÔÔ5 C
.
ÔÔC D

STContains
ÔÔD N
,
ÔÔN O

Parameters
ÔÔP Z
=
ÔÔ[ \
args
ÔÔ] a
.
ÔÔa b
Cast
ÔÔb f
<
ÔÔf g
IQueryValue
ÔÔg r
>
ÔÔr s
(
ÔÔs t
)
ÔÔt u
.
ÔÔu v
ToArray
ÔÔv }
(
ÔÔ} ~
)
ÔÔ~ 
}ÔÔÄ Å
;ÔÔÅ Ç
}
 
var
ÒÒ 
name
ÒÒ 
=
ÒÒ 
exp
ÒÒ "
.
ÒÒ" #
Method
ÒÒ# )
.
ÒÒ) *
Name
ÒÒ* .
.
ÒÒ. /
ToLower
ÒÒ/ 6
(
ÒÒ6 7
CultureInfo
ÒÒ7 B
.
ÒÒB C
InvariantCulture
ÒÒC S
)
ÒÒS T
;
ÒÒT U
var
ÚÚ 
	arguments
ÚÚ !
=
ÚÚ" #
new
ÚÚ$ '
List
ÚÚ( ,
<
ÚÚ, -

IQueryItem
ÚÚ- 7
>
ÚÚ7 8
(
ÚÚ8 9
)
ÚÚ9 :
;
ÚÚ: ;
	arguments
ÛÛ 
.
ÛÛ 
Add
ÛÛ !
(
ÛÛ! "
ProcessItem
ÛÛ" -
(
ÛÛ- .
exp
ÛÛ. 1
.
ÛÛ1 2
Object
ÛÛ2 8
)
ÛÛ8 9
)
ÛÛ9 :
;
ÛÛ: ;
foreach
ÙÙ 
(
ÙÙ 
var
ÙÙ  
arg
ÙÙ! $
in
ÙÙ% '
exp
ÙÙ( +
.
ÙÙ+ ,
	Arguments
ÙÙ, 5
)
ÙÙ5 6
	arguments
ıı !
.
ıı! "
Add
ıı" %
(
ıı% &
ProcessItem
ıı& 1
(
ıı1 2
arg
ıı2 5
)
ıı5 6
)
ıı6 7
;
ıı7 8
var
ˆˆ 
p
ˆˆ 
=
ˆˆ 
(
ˆˆ 
VAL
ˆˆ  
)
ˆˆ  !
$str
ˆˆ! $
;
ˆˆ$ %
var
˜˜ 
op2
˜˜ 
=
˜˜ 
	arguments
˜˜ '
[
˜˜' (
$num
˜˜( )
]
˜˜) *
;
˜˜* +
List
¯¯ 
<
¯¯ 
IQueryValue
¯¯ $
>
¯¯$ %
values
¯¯& ,
=
¯¯- .
new
¯¯/ 2
List
¯¯3 7
<
¯¯7 8
IQueryValue
¯¯8 C
>
¯¯C D
(
¯¯D E
)
¯¯E F
;
¯¯F G
if
˘˘ 
(
˘˘ 
name
˘˘ 
==
˘˘ 
$str
˘˘  *
||
˘˘+ -
name
˘˘. 2
==
˘˘3 5
$str
˘˘6 @
)
˘˘@ A
values
˘˘B H
.
˘˘H I
Add
˘˘I L
(
˘˘L M
p
˘˘M N
)
˘˘N O
;
˘˘O P
values
˙˙ 
.
˙˙ 
Add
˙˙ 
(
˙˙ 
(
˙˙  
IQueryValue
˙˙  +
)
˙˙+ ,
op2
˙˙, /
)
˙˙/ 0
;
˙˙0 1
if
˚˚ 
(
˚˚ 
name
˚˚ 
==
˚˚ 
$str
˚˚  *
||
˚˚+ -
name
˚˚. 2
==
˚˚3 5
$str
˚˚6 B
)
˚˚B C
values
˚˚D J
.
˚˚J K
Add
˚˚K N
(
˚˚N O
p
˚˚O P
)
˚˚P Q
;
˚˚Q R
op2
¸¸ 
=
¸¸ 
new
¸¸ 
FEXP
¸¸ "
{
¸¸# $
Function
¸¸% -
=
¸¸. /
QueryFunctions
¸¸0 >
.
¸¸> ?
Concat
¸¸? E
,
¸¸E F

Parameters
¸¸G Q
=
¸¸R S
values
¸¸T Z
.
¸¸Z [
ToArray
¸¸[ b
(
¸¸b c
)
¸¸c d
}
¸¸e f
;
¸¸f g
return
˝˝ 
new
˝˝ 
BEXP
˝˝ #
{
˝˝$ %
Operator
˝˝& .
=
˝˝/ 0
BinaryOperator
˝˝1 ?
.
˝˝? @
Like
˝˝@ D
,
˝˝D E
Operand1
˝˝F N
=
˝˝O P
	arguments
˝˝Q Z
[
˝˝Z [
$num
˝˝[ \
]
˝˝\ ]
,
˝˝] ^
Operand2
˝˝_ g
=
˝˝h i
op2
˝˝j m
}
˝˝n o
;
˝˝o p
}
˛˛ 
var
ÄÄ 
val
ÄÄ 
=
ÄÄ 

Expression
ÄÄ $
.
ÄÄ$ %
Lambda
ÄÄ% +
(
ÄÄ+ ,

expression
ÄÄ, 6
)
ÄÄ6 7
.
ÄÄ7 8
Compile
ÄÄ8 ?
(
ÄÄ? @
)
ÄÄ@ A
.
ÄÄA B
DynamicInvoke
ÄÄB O
(
ÄÄO P
)
ÄÄP Q
;
ÄÄQ R
if
ÅÅ 
(
ÅÅ 
val
ÅÅ 
==
ÅÅ 
null
ÅÅ 
)
ÅÅ  
return
ÇÇ 
new
ÇÇ 
VAL
ÇÇ "
{
ÇÇ# $
Value
ÇÇ% *
=
ÇÇ+ ,
DBNull
ÇÇ- 3
.
ÇÇ3 4
Value
ÇÇ4 9
}
ÇÇ: ;
;
ÇÇ; <
if
ÉÉ 
(
ÉÉ 
!
ÉÉ 
val
ÉÉ 
.
ÉÉ 
GetType
ÉÉ  
(
ÉÉ  !
)
ÉÉ! "
.
ÉÉ" #
IsArray
ÉÉ# *
)
ÉÉ* +
return
ÑÑ 
new
ÑÑ 
VAL
ÑÑ "
{
ÑÑ# $
Value
ÑÑ% *
=
ÑÑ+ ,
val
ÑÑ- 0
}
ÑÑ1 2
;
ÑÑ2 3
else
ÖÖ 
return
ÖÖ 
new
ÖÖ 
ARR
ÖÖ  #
{
ÖÖ$ %
Values
ÖÖ& ,
=
ÖÖ- .
(
ÖÖ/ 0
(
ÖÖ0 1
Array
ÖÖ1 6
)
ÖÖ6 7
val
ÖÖ7 :
)
ÖÖ: ;
.
ÖÖ; <
Cast
ÖÖ< @
<
ÖÖ@ A
object
ÖÖA G
>
ÖÖG H
(
ÖÖH I
)
ÖÖI J
.
ÖÖJ K
Select
ÖÖK Q
(
ÖÖQ R
a
ÖÖR S
=>
ÖÖT V
new
ÖÖW Z
VAL
ÖÖ[ ^
{
ÖÖ_ `
Value
ÖÖa f
=
ÖÖg h
a
ÖÖi j
}
ÖÖk l
)
ÖÖl m
.
ÖÖm n
ToArray
ÖÖn u
(
ÖÖu v
)
ÖÖv w
}
ÖÖx y
;
ÖÖy z
}
áá 
return
àà 
null
àà 
;
àà 
}
ââ 	
private
ää 

IQueryItem
ää 
[
ää 
]
ää 
Process
ää $
(
ää$ %

Expression
ää% /

expression
ää0 :
,
ää: ;
bool
ää< @
	withNames
ääA J
=
ääK L
false
ääM R
)
ääR S
{
ãã 	
List
åå 
<
åå 

IQueryItem
åå 
>
åå 
items
åå "
=
åå# $
new
åå% (
List
åå) -
<
åå- .

IQueryItem
åå. 8
>
åå8 9
(
åå9 :
)
åå: ;
;
åå; <
if
çç 
(
çç 

expression
çç 
is
çç 
NewExpression
çç +
)
çç+ ,
{
éé 
int
èè 
i
èè 
=
èè 
$num
èè 
;
èè 
foreach
êê 
(
êê 
var
êê 
exp
êê  
in
êê! #
(
êê$ %

expression
êê% /
as
êê0 2
NewExpression
êê3 @
)
êê@ A
.
êêA B
	Arguments
êêB K
)
êêK L
{
ëë 
var
íí 
result
íí 
=
íí  
ProcessItem
íí! ,
(
íí, -
exp
íí- 0
)
íí0 1
;
íí1 2
if
ìì 
(
ìì 
	withNames
ìì !
&&
ìì" $
!
ìì% &
(
ìì& '
result
ìì' -
is
ìì. 0

INamedItem
ìì1 ;
)
ìì; <
)
ìì< =
result
îî 
=
îî  
new
îî! $
NEXP
îî% )
{
îî* +

Expression
îî, 6
=
îî7 8
(
îî9 :
IQueryValue
îî: E
)
îîE F
result
îîF L
,
îîL M
Name
îîN R
=
îîS T
(
îîU V

expression
îîV `
as
îîa c
NewExpression
îîd q
)
îîq r
.
îîr s
Members
îîs z
[
îîz {
i
îî{ |
]
îî| }
.
îî} ~
Nameîî~ Ç
}îîÉ Ñ
;îîÑ Ö
items
ïï 
.
ïï 
Add
ïï 
(
ïï 
result
ïï $
)
ïï$ %
;
ïï% &
i
ññ 
++
ññ 
;
ññ 
}
óó 
}
òò 
else
ôô 
if
ôô 
(
ôô 

expression
ôô 
is
ôô  " 
NewArrayExpression
ôô# 5
)
ôô5 6
{
öö 
foreach
õõ 
(
õõ 
var
õõ 
exp
õõ  
in
õõ! #
(
õõ$ %

expression
õõ% /
as
õõ0 2 
NewArrayExpression
õõ3 E
)
õõE F
.
õõF G
Expressions
õõG R
)
õõR S
{
úú 
var
ùù 
result
ùù 
=
ùù  
ProcessItem
ùù! ,
(
ùù, -
exp
ùù- 0
)
ùù0 1
;
ùù1 2
items
ûû 
.
ûû 
Add
ûû 
(
ûû 
result
ûû $
)
ûû$ %
;
ûû% &
}
üü 
}
†† 
else
°° 
{
¢¢ 
var
££ 
result
££ 
=
££ 
ProcessItem
££ (
(
££( )

expression
££) 3
)
££3 4
;
££4 5
return
§§ 
new
§§ 

IQueryItem
§§ %
[
§§% &
]
§§& '
{
§§( )
result
§§* 0
}
§§1 2
;
§§2 3
}
•• 
return
¶¶ 
items
¶¶ 
.
¶¶ 
ToArray
¶¶  
(
¶¶  !
)
¶¶! "
;
¶¶" #
}
ßß 	
public
©© 
ResultStatus
©© 
Insert
©© "
(
©©" #
TKey
©©# '
	parameter
©©( 1
,
©©1 2

Expression
©©3 =
<
©©= >
Func
©©> B
<
©©B C
TKey
©©C G
,
©©G H
object
©©I O
>
©©O P
>
©©P Q

exceptCols
©©R \
)
©©\ ]
{
™™ 	
var
´´ 
query
´´ 
=
´´ 
_builder
´´  
.
´´  !
GetInsertQuery
´´! /
(
´´/ 0

_tableName
´´0 :
,
´´: ;
_schemaName
´´< G
,
´´G H
	parameter
´´I R
,
´´R S

exceptCols
´´T ^
)
´´^ _
;
´´_ `
return
¨¨ 
	_executor
¨¨ 
.
¨¨ 
ExecuteNonQuery
¨¨ ,
(
¨¨, -
query
¨¨- 2
)
¨¨2 3
;
¨¨3 4
}
≠≠ 	
public
ÆÆ 
ResultStatus
ÆÆ 
Update
ÆÆ "
(
ÆÆ" #
TKey
ÆÆ# '
	parameter
ÆÆ( 1
,
ÆÆ1 2

Expression
ÆÆ3 =
<
ÆÆ= >
Func
ÆÆ> B
<
ÆÆB C
TKey
ÆÆC G
,
ÆÆG H
object
ÆÆI O
>
ÆÆO P
>
ÆÆP Q
idCols
ÆÆR X
,
ÆÆX Y

Expression
ÆÆZ d
<
ÆÆd e
Func
ÆÆe i
<
ÆÆi j
TKey
ÆÆj n
,
ÆÆn o
object
ÆÆp v
>
ÆÆv w
>
ÆÆw x

exceptColsÆÆy É
=ÆÆÑ Ö
nullÆÆÜ ä
,ÆÆä ã
boolÆÆå ê
setNullÆÆë ò
=ÆÆô ö
falseÆÆõ †
)ÆÆ† °
{
ØØ 	
var
∞∞ 
query
∞∞ 
=
∞∞ 
_builder
∞∞  
.
∞∞  !
GetUpdateQuery
∞∞! /
(
∞∞/ 0

_tableName
∞∞0 :
,
∞∞: ;
_schemaName
∞∞< G
,
∞∞G H
	parameter
∞∞I R
,
∞∞R S
idCols
∞∞T Z
,
∞∞Z [

exceptCols
∞∞\ f
,
∞∞f g
setNull
∞∞h o
)
∞∞o p
;
∞∞p q
return
±± 
	_executor
±± 
.
±± 
ExecuteNonQuery
±± ,
(
±±, -
query
±±- 2
)
±±2 3
;
±±3 4
}
≤≤ 	
public
≥≥ 
ResultStatus
≥≥ 
Update
≥≥ "
(
≥≥" #
List
≥≥# '
<
≥≥' (
TKey
≥≥( ,
>
≥≥, -
	parameter
≥≥. 7
,
≥≥7 8

Expression
≥≥9 C
<
≥≥C D
Func
≥≥D H
<
≥≥H I
TKey
≥≥I M
,
≥≥M N
object
≥≥O U
>
≥≥U V
>
≥≥V W
idCols
≥≥X ^
,
≥≥^ _

Expression
≥≥` j
<
≥≥j k
Func
≥≥k o
<
≥≥o p
TKey
≥≥p t
,
≥≥t u
object
≥≥v |
>
≥≥| }
>
≥≥} ~

exceptCols≥≥ â
=≥≥ä ã
null≥≥å ê
,≥≥ê ë
bool≥≥í ñ
setNull≥≥ó û
=≥≥ü †
false≥≥° ¶
)≥≥¶ ß
{
¥¥ 	
var
µµ 
query
µµ 
=
µµ 
_builder
µµ  
.
µµ  !&
GetUpdateQueryBulkUpdate
µµ! 9
(
µµ9 :

_tableName
µµ: D
,
µµD E
_schemaName
µµF Q
,
µµQ R
	parameter
µµS \
.
µµ\ ]
ToList
µµ] c
(
µµc d
)
µµd e
,
µµe f
idCols
µµg m
,
µµm n

exceptCols
µµo y
,
µµy z
setNullµµ{ Ç
)µµÇ É
;µµÉ Ñ
return
∂∂ 
	_executor
∂∂ 
.
∂∂ 
ExecuteNonQuery
∂∂ ,
(
∂∂, -
query
∂∂- 2
)
∂∂2 3
;
∂∂3 4
}
∑∑ 	
public
∏∏ 
ResultStatus
∏∏ 
Insert
∏∏ "
(
∏∏" #
List
∏∏# '
<
∏∏' (
TKey
∏∏( ,
>
∏∏, -
	parameter
∏∏. 7
,
∏∏7 8
bool
∏∏9 =
setNull
∏∏> E
=
∏∏F G
false
∏∏H M
)
∏∏M N
{
ππ 	
var
∫∫ 
query
∫∫ 
=
∫∫ 
_builder
∫∫  
.
∫∫  !&
GetInsertQueryBulkInsert
∫∫! 9
(
∫∫9 :

_tableName
∫∫: D
,
∫∫D E
_schemaName
∫∫F Q
,
∫∫Q R
	parameter
∫∫S \
.
∫∫\ ]
ToList
∫∫] c
(
∫∫c d
)
∫∫d e
,
∫∫e f
setNull
∫∫g n
)
∫∫n o
;
∫∫o p
return
ªª 
	_executor
ªª 
.
ªª 
ExecuteNonQuery
ªª ,
(
ªª, -
query
ªª- 2
)
ªª2 3
;
ªª3 4
}
ΩΩ 	
public
øø 
ResultStatus
øø 
Delete
øø "
(
øø" #
TKey
øø# '
	parameter
øø( 1
,
øø1 2

Expression
øø3 =
<
øø= >
Func
øø> B
<
øøB C
TKey
øøC G
,
øøG H
object
øøI O
>
øøO P
>
øøP Q
idCols
øøR X
)
øøX Y
{
¿¿ 	
var
¡¡ 
query
¡¡ 
=
¡¡ 
_builder
¡¡  
.
¡¡  !
GetDeleteQuery
¡¡! /
(
¡¡/ 0

_tableName
¡¡0 :
,
¡¡: ;
_schemaName
¡¡< G
,
¡¡G H
	parameter
¡¡I R
,
¡¡R S
idCols
¡¡T Z
)
¡¡Z [
;
¡¡[ \
return
¬¬ 
	_executor
¬¬ 
.
¬¬ 
ExecuteNonQuery
¬¬ ,
(
¬¬, -
query
¬¬- 2
)
¬¬2 3
;
¬¬3 4
}
√√ 	
public
ƒƒ 
ResultStatus
ƒƒ 
Insert
ƒƒ "
(
ƒƒ" #
IEnumerable
ƒƒ# .
<
ƒƒ. /
TKey
ƒƒ/ 3
>
ƒƒ3 4
	parameter
ƒƒ5 >
,
ƒƒ> ?

Expression
ƒƒ@ J
<
ƒƒJ K
Func
ƒƒK O
<
ƒƒO P
TKey
ƒƒP T
,
ƒƒT U
object
ƒƒV \
>
ƒƒ\ ]
>
ƒƒ] ^

exceptCols
ƒƒ_ i
)
ƒƒi j
{
≈≈ 	
DbTransaction
∆∆ 
transaction
∆∆ %
=
∆∆& '
null
∆∆( ,
;
∆∆, -
var
«« 
result
«« 
=
«« 
new
«« 
ResultStatus
«« )
{
««* +
result
««, 2
=
««3 4
true
««5 9
}
««: ;
;
««; <
var
»» 
opentransaction
»» 
=
»»  !
	_executor
»»" +
.
»»+ ,
IsTransactionOpen
»», =
;
»»= >
if
…… 
(
…… 
!
…… 
opentransaction
……  
)
……  !
transaction
   
=
   
	_executor
   '
.
  ' (
BeginTransaction
  ( 8
(
  8 9
)
  9 :
;
  : ;
var
ÀÀ 
i
ÀÀ 
=
ÀÀ 
$num
ÀÀ 
;
ÀÀ 
foreach
ÃÃ 
(
ÃÃ 
var
ÃÃ 
p
ÃÃ 
in
ÃÃ 
	parameter
ÃÃ '
)
ÃÃ' (
{
ÕÕ 
result
ŒŒ 
=
ŒŒ 
result
ŒŒ 
&
ŒŒ  !
Insert
ŒŒ" (
(
ŒŒ( )
p
ŒŒ) *
,
ŒŒ* +

exceptCols
ŒŒ, 6
)
ŒŒ6 7
;
ŒŒ7 8
if
œœ 
(
œœ 
result
œœ 
.
œœ 
result
œœ !
==
œœ" $
false
œœ% *
)
œœ* +
break
œœ, 1
;
œœ1 2
i
–– 
++
–– 
;
–– 
}
—— 
if
““ 
(
““ 
!
““ 
opentransaction
““  
)
““  !
{
”” 
if
‘‘ 
(
‘‘ 
result
‘‘ 
.
‘‘ 
result
‘‘ !
)
‘‘! "
transaction
‘‘# .
.
‘‘. /
Commit
‘‘/ 5
(
‘‘5 6
)
‘‘6 7
;
‘‘7 8
else
’’ 
transaction
’’  
.
’’  !
Rollback
’’! )
(
’’) *
)
’’* +
;
’’+ ,
}
÷÷ 
return
◊◊ 
result
◊◊ 
;
◊◊ 
}
ÿÿ 	
public
ŸŸ 
ResultStatus
ŸŸ 
Update
ŸŸ "
(
ŸŸ" #
IEnumerable
ŸŸ# .
<
ŸŸ. /
TKey
ŸŸ/ 3
>
ŸŸ3 4
	parameter
ŸŸ5 >
,
ŸŸ> ?

Expression
ŸŸ@ J
<
ŸŸJ K
Func
ŸŸK O
<
ŸŸO P
TKey
ŸŸP T
,
ŸŸT U
object
ŸŸV \
>
ŸŸ\ ]
>
ŸŸ] ^
idCols
ŸŸ_ e
,
ŸŸe f

Expression
ŸŸg q
<
ŸŸq r
Func
ŸŸr v
<
ŸŸv w
TKey
ŸŸw {
,
ŸŸ{ |
objectŸŸ} É
>ŸŸÉ Ñ
>ŸŸÑ Ö

exceptColsŸŸÜ ê
=ŸŸë í
nullŸŸì ó
,ŸŸó ò
boolŸŸô ù
setNullŸŸû •
=ŸŸ¶ ß
falseŸŸ® ≠
)ŸŸ≠ Æ
{
⁄⁄ 	
DbTransaction
€€ 
transaction
€€ %
=
€€& '
null
€€( ,
;
€€, -
var
‹‹ 
result
‹‹ 
=
‹‹ 
new
‹‹ 
ResultStatus
‹‹ )
{
‹‹* +
result
‹‹, 2
=
‹‹3 4
true
‹‹5 9
}
‹‹: ;
;
‹‹; <
var
›› 
opentransaction
›› 
=
››  !
	_executor
››" +
.
››+ ,
IsTransactionOpen
››, =
;
››= >
if
ﬁﬁ 
(
ﬁﬁ 
!
ﬁﬁ 
opentransaction
ﬁﬁ  
)
ﬁﬁ  !
transaction
ﬂﬂ 
=
ﬂﬂ 
	_executor
ﬂﬂ '
.
ﬂﬂ' (
BeginTransaction
ﬂﬂ( 8
(
ﬂﬂ8 9
)
ﬂﬂ9 :
;
ﬂﬂ: ;
var
‡‡ 
i
‡‡ 
=
‡‡ 
$num
‡‡ 
;
‡‡ 
foreach
·· 
(
·· 
var
·· 
p
·· 
in
·· 
	parameter
·· '
)
··' (
{
‚‚ 
result
„„ 
=
„„ 
result
„„ 
&
„„  !
Update
„„" (
(
„„( )
p
„„) *
,
„„* +
idCols
„„, 2
,
„„2 3

exceptCols
„„4 >
,
„„> ?
setNull
„„@ G
)
„„G H
;
„„H I
if
‰‰ 
(
‰‰ 
result
‰‰ 
.
‰‰ 
result
‰‰ !
==
‰‰" $
false
‰‰% *
)
‰‰* +
break
‰‰, 1
;
‰‰1 2
i
ÂÂ 
++
ÂÂ 
;
ÂÂ 
}
ÊÊ 
if
ÁÁ 
(
ÁÁ 
!
ÁÁ 
opentransaction
ÁÁ  
)
ÁÁ  !
{
ËË 
if
ÈÈ 
(
ÈÈ 
result
ÈÈ 
.
ÈÈ 
result
ÈÈ !
)
ÈÈ! "
transaction
ÈÈ# .
.
ÈÈ. /
Commit
ÈÈ/ 5
(
ÈÈ5 6
)
ÈÈ6 7
;
ÈÈ7 8
else
ÍÍ 
transaction
ÍÍ  
.
ÍÍ  !
Rollback
ÍÍ! )
(
ÍÍ) *
)
ÍÍ* +
;
ÍÍ+ ,
}
ÎÎ 
return
ÏÏ 
result
ÏÏ 
;
ÏÏ 
}
ÌÌ 	
public
ÓÓ 
ResultStatus
ÓÓ 
Delete
ÓÓ "
(
ÓÓ" #
IEnumerable
ÓÓ# .
<
ÓÓ. /
TKey
ÓÓ/ 3
>
ÓÓ3 4
	parameter
ÓÓ5 >
,
ÓÓ> ?

Expression
ÓÓ@ J
<
ÓÓJ K
Func
ÓÓK O
<
ÓÓO P
TKey
ÓÓP T
,
ÓÓT U
object
ÓÓV \
>
ÓÓ\ ]
>
ÓÓ] ^
idCols
ÓÓ_ e
)
ÓÓe f
{
ÔÔ 	
DbTransaction
 
transaction
 %
=
& '
null
( ,
;
, -
var
ÒÒ 
result
ÒÒ 
=
ÒÒ 
new
ÒÒ 
ResultStatus
ÒÒ )
{
ÒÒ* +
result
ÒÒ, 2
=
ÒÒ3 4
true
ÒÒ5 9
}
ÒÒ: ;
;
ÒÒ; <
var
ÚÚ 
opentransaction
ÚÚ 
=
ÚÚ  !
	_executor
ÚÚ" +
.
ÚÚ+ ,
IsTransactionOpen
ÚÚ, =
;
ÚÚ= >
if
ÛÛ 
(
ÛÛ 
!
ÛÛ 
opentransaction
ÛÛ  
)
ÛÛ  !
transaction
ÙÙ 
=
ÙÙ 
	_executor
ÙÙ '
.
ÙÙ' (
BeginTransaction
ÙÙ( 8
(
ÙÙ8 9
)
ÙÙ9 :
;
ÙÙ: ;
var
ıı 
i
ıı 
=
ıı 
$num
ıı 
;
ıı 
foreach
ˆˆ 
(
ˆˆ 
var
ˆˆ 
p
ˆˆ 
in
ˆˆ 
	parameter
ˆˆ '
)
ˆˆ' (
{
˜˜ 
result
¯¯ 
=
¯¯ 
result
¯¯ 
&
¯¯  !
Delete
¯¯" (
(
¯¯( )
p
¯¯) *
,
¯¯* +
idCols
¯¯, 2
)
¯¯2 3
;
¯¯3 4
if
˘˘ 
(
˘˘ 
result
˘˘ 
.
˘˘ 
result
˘˘ !
==
˘˘" $
false
˘˘% *
)
˘˘* +
break
˘˘, 1
;
˘˘1 2
i
˙˙ 
++
˙˙ 
;
˙˙ 
}
˚˚ 
if
¸¸ 
(
¸¸ 
!
¸¸ 
opentransaction
¸¸  
)
¸¸  !
{
˝˝ 
if
˛˛ 
(
˛˛ 
result
˛˛ 
.
˛˛ 
result
˛˛ !
)
˛˛! "
transaction
˛˛# .
.
˛˛. /
Commit
˛˛/ 5
(
˛˛5 6
)
˛˛6 7
;
˛˛7 8
else
ˇˇ 
transaction
ˇˇ  
.
ˇˇ  !
Rollback
ˇˇ! )
(
ˇˇ) *
)
ˇˇ* +
;
ˇˇ+ ,
}
ÄÄ 
return
ÅÅ 
result
ÅÅ 
;
ÅÅ 
}
ÇÇ 	
public
ÑÑ 
int
ÑÑ 
Count
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÖÖ 	
return
ÜÜ 
_queryProcessor
ÜÜ "
.
ÜÜ" #
Count
ÜÜ# (
(
ÜÜ( )
)
ÜÜ) *
;
ÜÜ* +
}
áá 	
public
ââ 
IEnumerable
ââ 
<
ââ 
TKey
ââ 
>
ââ   
ExecuteSimpleQuery
ââ! 3
(
ââ3 4
SimpleQuery
ââ4 ?
simpleQuery
ââ@ K
)
ââK L
{
ää 	
return
ãã 
_queryProcessor
ãã "
.
ãã" # 
ExecuteSimpleQuery
ãã# 5
<
ãã5 6
TKey
ãã6 :
>
ãã: ;
(
ãã; <
simpleQuery
ãã< G
)
ããG H
;
ããH I
}
åå 	
public
éé 
ResultStatus
éé 
Delete
éé "
(
éé" #

Expression
éé# -
<
éé- .
Func
éé. 2
<
éé2 3
TKey
éé3 7
,
éé7 8
bool
éé9 =
>
éé= >
>
éé> ?
	condition
éé@ I
)
ééI J
{
èè 	
var
êê 
cond
êê 
=
êê 
(
êê 
BEXP
êê 
)
êê 
ProcessItem
êê (
(
êê( )
	condition
êê) 2
.
êê2 3
Body
êê3 7
)
êê7 8
;
êê8 9
return
ëë 
_queryProcessor
ëë "
.
ëë" #
Delete
ëë# )
(
ëë) *
cond
ëë* .
)
ëë. /
;
ëë/ 0
}
íí 	
public
îî 
ResultStatus
îî 
UpdateManyColumn
îî ,
(
îî, -
IEnumerable
îî- 8
<
îî8 9
TKey
îî9 =
>
îî= >
	parameter
îî? H
,
îîH I

Expression
îîJ T
<
îîT U
Func
îîU Y
<
îîY Z
TKey
îîZ ^
,
îî^ _
object
îî` f
>
îîf g
>
îîg h
idCols
îîi o
,
îîo p

Expression
îîq {
<
îî{ |
Funcîî| Ä
<îîÄ Å
TKeyîîÅ Ö
,îîÖ Ü
objectîîá ç
>îîç é
>îîé è

exceptColsîîê ö
=îîõ ú
nullîîù °
,îî° ¢
boolîî£ ß
setNullîî® Ø
=îî∞ ±
falseîî≤ ∑
)îî∑ ∏
{
ïï 	
DbTransaction
ññ 
transaction
ññ %
=
ññ& '
null
ññ( ,
;
ññ, -
var
óó 
result
óó 
=
óó 
new
óó 
ResultStatus
óó )
{
óó* +
result
óó, 2
=
óó3 4
true
óó5 9
}
óó: ;
;
óó; <
var
ôô 
opentransaction
ôô 
=
ôô  !
	_executor
ôô" +
.
ôô+ ,
IsTransactionOpen
ôô, =
;
ôô= >
if
öö 
(
öö 
!
öö 
opentransaction
öö  
)
öö  !
transaction
õõ 
=
õõ 
	_executor
õõ '
.
õõ' (
BeginTransaction
õõ( 8
(
õõ8 9
)
õõ9 :
;
õõ: ;
for
ùù 
(
ùù 
var
ùù 
i
ùù 
=
ùù 
$num
ùù 
;
ùù 
i
ûû 
<
ûû 
	parameter
ûû 
.
ûû 
Count
ûû #
(
ûû# $
)
ûû$ %
;
ûû% &
i
ûû' (
+=
ûû) +
$num
ûû, 0
)
ûû0 1
{
üü 
result
†† 
=
†† 
result
†† 
&
††  !
Update
††" (
(
††( )
	parameter
††) 2
.
††2 3
ToList
††3 9
(
††9 :
)
††: ;
.
††; <
Skip
††< @
(
††@ A
i
††A B
)
††B C
.
††C D
Take
††D H
(
††H I
$num
††I M
)
††M N
.
††N O
ToList
††O U
(
††U V
)
††V W
,
††W X
idCols
††Y _
,
††_ `

exceptCols
††a k
,
††k l
setNull
††m t
)
††t u
;
††u v
if
¢¢ 
(
¢¢ 
!
¢¢ 
opentransaction
¢¢ $
)
¢¢$ %
{
££ 
if
§§ 
(
§§ 
!
§§ 
result
§§ 
.
§§  
result
§§  &
)
§§& '
{
•• 
transaction
¶¶ #
.
¶¶# $
Rollback
¶¶$ ,
(
¶¶, -
)
¶¶- .
;
¶¶. /
return
ßß 
new
ßß "
ResultStatus
ßß# /
{
ßß0 1
result
ßß2 8
=
ßß9 :
false
ßß; @
}
ßßA B
;
ßßB C
}
®® 
}
©© 
}
™™ 
if
¨¨ 
(
¨¨ 
!
¨¨ 
opentransaction
¨¨  
)
¨¨  !
{
≠≠ 
transaction
ÆÆ 
.
ÆÆ 
Commit
ÆÆ "
(
ÆÆ" #
)
ÆÆ# $
;
ÆÆ$ %
}
ØØ 
return
±± 
result
±± 
;
±± 
}
≤≤ 	
public
¥¥ 
ResultStatus
¥¥ 
InsertManyColumn
¥¥ ,
(
¥¥, -
IEnumerable
¥¥- 8
<
¥¥8 9
TKey
¥¥9 =
>
¥¥= >
	parameter
¥¥? H
,
¥¥H I
bool
¥¥K O
setNull
¥¥P W
=
¥¥X Y
false
¥¥Z _
)
¥¥_ `
{
µµ 	
DbTransaction
∂∂ 
transaction
∂∂ %
=
∂∂& '
null
∂∂( ,
;
∂∂, -
var
∑∑ 
result
∑∑ 
=
∑∑ 
new
∑∑ 
ResultStatus
∑∑ )
{
∑∑* +
result
∑∑, 2
=
∑∑3 4
true
∑∑5 9
}
∑∑: ;
;
∑∑; <
var
ππ 
opentransaction
ππ 
=
ππ  !
	_executor
ππ" +
.
ππ+ ,
IsTransactionOpen
ππ, =
;
ππ= >
if
∫∫ 
(
∫∫ 
!
∫∫ 
opentransaction
∫∫  
)
∫∫  !
transaction
ªª 
=
ªª 
	_executor
ªª '
.
ªª' (
BeginTransaction
ªª( 8
(
ªª8 9
)
ªª9 :
;
ªª: ;
for
ΩΩ 
(
ΩΩ 
var
ΩΩ 
i
ΩΩ 
=
ΩΩ 
$num
ΩΩ 
;
ΩΩ 
i
ΩΩ 
<
ΩΩ 
	parameter
ΩΩ (
.
ΩΩ( )
Count
ΩΩ) .
(
ΩΩ. /
)
ΩΩ/ 0
;
ΩΩ0 1
i
ΩΩ2 3
+=
ΩΩ4 6
$num
ΩΩ7 ;
)
ΩΩ; <
{
ææ 
result
øø 
=
øø 
result
øø 
&
øø  !
Insert
øø" (
(
øø( )
	parameter
øø) 2
.
øø2 3
ToList
øø3 9
(
øø9 :
)
øø: ;
.
øø; <
Skip
øø< @
(
øø@ A
i
øøA B
)
øøB C
.
øøC D
Take
øøD H
(
øøH I
$num
øøI M
)
øøM N
.
øøN O
ToList
øøO U
(
øøU V
)
øøV W
,
øøW X
setNull
øøY `
)
øø` a
;
øøa b
if
¡¡ 
(
¡¡ 
!
¡¡ 
opentransaction
¡¡ $
)
¡¡$ %
{
¬¬ 
if
√√ 
(
√√ 
!
√√ 
result
√√ 
.
√√  
result
√√  &
)
√√& '
{
ƒƒ 
transaction
≈≈ #
.
≈≈# $
Rollback
≈≈$ ,
(
≈≈, -
)
≈≈- .
;
≈≈. /
return
∆∆ 
new
∆∆ "
ResultStatus
∆∆# /
{
∆∆0 1
result
∆∆2 8
=
∆∆9 :
false
∆∆; @
}
∆∆A B
;
∆∆B C
}
«« 
}
»» 
}
…… 
if
ÀÀ 
(
ÀÀ 
!
ÀÀ 
opentransaction
ÀÀ  
)
ÀÀ  !
{
ÃÃ 
transaction
ÕÕ 
.
ÕÕ 
Commit
ÕÕ "
(
ÕÕ" #
)
ÕÕ# $
;
ÕÕ$ %
}
ŒŒ 
return
œœ 
result
œœ 
;
œœ 
}
–– 	
}
—— 
}““ ‚-
D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\ResultStatus.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Database %
{ 
public 

class 
ResultStatus 
{ 
public 
bool 
result 
{ 
get  
;  !
set" %
;% &
}' (
public 
string 
message 
{ 
get  #
;# $
set% (
;( )
}* +
public 
object 
objects 
{ 
get  #
;# $
set% (
;( )
}* +
public		 
static			 
ResultStatus		 
operator		 %
&		& '
(		' (
ResultStatus		( 4
op1		5 8
,		8 9
ResultStatus		: F
op2		G J
)		J K
{

 	
if 
( 
op1 
. 
result 
== 
false #
)# $
{ 
if 
( 
op2 
. 
result 
== !
false" '
)' (
{ 
op1 
. 
message 
+=  "
$str# )
+* +
op2, /
./ 0
message0 7
;7 8
} 
return 
op1 
; 
} 
else 
if 
( 
op2 
. 
result 
==  "
false# (
)( )
{ 
return 
op2 
; 
} 
int 
	out1Count 
; 
int 
	out2Count 
; 
var 
lastMessage 
= 
$str  
;  !
if 
( 
int 
. 
TryParse 
( 
op1  
.  !
message! (
,( )
out* -
	out1Count. 7
)7 8
&&9 ;
int< ?
.? @
TryParse@ H
(H I
op2I L
.L M
messageM T
,T U
outV Y
	out2CountZ c
)c d
)d e
{ 
lastMessage 
= 
( 
	out1Count (
+) *
	out2Count+ 4
)4 5
.5 6
ToString6 >
(> ?
)? @
;@ A
}   
else!! 
{"" 
lastMessage## 
=## 
op1## !
.##! "
message##" )
+##* +
$str##, 2
+##3 4
op2##5 8
.##8 9
message##9 @
;##@ A
}$$ 
return&& 
new&& 
ResultStatus&& #
{&&$ %
result&&& ,
=&&- .
true&&/ 3
,&&3 4
message&&5 <
=&&= >
lastMessage&&? J
}&&K L
;&&L M
}'' 	
public)) 
static)) 
ResultStatus)) "
operator))# +
|)), -
())- .
ResultStatus)). :
op1)); >
,))> ?
ResultStatus))@ L
op2))M P
)))P Q
{** 	
if++ 
(++ 
op1++ 
.++ 
result++ 
==++ 
true++ "
)++" #
return,, 
op1,, 
;,, 
else-- 
if-- 
(-- 
op2-- 
.-- 
result-- 
==--  "
true--# '
)--' (
return.. 
op2.. 
;.. 
return00 
new00 
ResultStatus00 #
{00$ %
result00& ,
=00- .
false00/ 4
,004 5
message006 =
=00> ?
op100@ C
.00C D
message00D K
+00L M
$str00N X
+00Y Z
op200[ ^
.00^ _
message00_ f
}00g h
;00h i
}11 	
public33 
override33 
string33 
ToString33 '
(33' (
)33( )
{44 	
if55 
(55 
result55 
)55 
return66 
string66 
.66 
Format66 $
(66$ %
$str66% A
,66A B
result66C I
,66I J
objects66K R
)66R S
;66S T
return77 
string77 
.77 
Format77  
(77  !
$str77! =
,77= >
result77? E
,77E F
message77G N
)77N O
;77O P
}88 	
}99 
public;; 

class;; 
ResultStatus;; 
<;; 
T;; 
>;;  
{<< 
public== 
bool== 
result== 
{== 
get==  
;==  !
set==" %
;==% &
}==' (
public>> 
string>> 
message>> 
{>> 
get>>  #
;>># $
set>>% (
;>>( )
}>>* +
public?? 
T?? 
objects?? 
{?? 
get?? 
;?? 
set??  #
;??# $
}??% &
publicAA 
ResultStatusAA 
(AA 
)AA 
{AA 
}AA  !
publicBB 
ResultStatusBB 
(BB 
stringBB "
messageBB# *
)BB* +
{CC 	
thisDD 
.DD 
messageDD 
=DD 
messageDD "
;DD" #
}EE 	
}GG 
}HH Â
çD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\DataBaseHelper\ITypeMapper.cs
	namespace		 	
Infoline		
 
.		 
	Framework		 
.		 
Database		 %
{

 
public 

	interface 
ITypeMapper  
{ 
Type 
GetType 
( 
string 
sqlType #
)# $
;$ %
string 

GetSqlType 
( 
Type 
type #
,# $
int% (
?( )
length* 0
=1 2
null3 7
)7 8
;8 9
string 
FormatSqlByType 
( 
object %
val& )
)) *
;* +
object 
ConvertFromSql 
( 
object $
obj% (
)( )
;) *
object 
ConvertToSql 
( 
object "
obj# &
)& '
;' (
} 
} åL
ãD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Database\TableProcessor\TableInfo.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Database %
{ 
public		 

class		 
	TableInfo		 
{

 
public 
string 

TableAlias  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 
string 
	TableName 
{  !
get" %
;% &
set' *
;* +
}, -
public 
string 

SchemaName  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 
List 
< 
TableColumn 
>  
Columns! (
{) *
get+ .
;. /
set0 3
;3 4
}5 6
public 
List 
< 

TableIndex 
> 
Indexes  '
{( )
get* -
;- .
set/ 2
;2 3
}4 5
public 
List 
< 
string 
> 

PrimaryKey &
{' (
get) ,
;, -
set. 1
;1 2
}3 4
public 
TableColumn 
this 
[  
string  &
name' +
]+ ,
{ 	
get 
{ 
return 
Columns  
.  !
Where! &
(& '
a' (
=>) +
a, -
.- .

ColumnName. 8
==9 ;
name< @
)@ A
.A B
FirstOrDefaultB P
(P Q
)Q R
;R S
}T U
} 	
public 
	TableInfo 
( 
) 
{ 	
Columns 
= 
new 
List 
< 
TableColumn *
>* +
(+ ,
), -
;- .
Indexes 
= 
new 
List 
< 

TableIndex )
>) *
(* +
)+ ,
;, -

PrimaryKey 
= 
new 
List !
<! "
string" (
>( )
() *
)* +
;+ ,

SchemaName 
= 
$str 
; 
} 	
public 
override 
string 
ToString '
(' (
)( )
{ 	
return 
string 
. 
Format  
(  !
$str! Q
,Q R
	TableNameS \
,\ ]
Columns^ e
.e f
Countf k
,k l
Indexesm t
.t u
Countu z
)z {
;{ |
} 	
}   
public!! 

class!! 
TableColumn!! 
{"" 
public## 
TableColumn## 
(## 
)## 
{$$ 	
NotNull%% 
=%% 
false%% 
;%% 
IsDomain&& 
=&& 
false&& 
;&& 
Enums'' 
='' 
new'' 
List'' 
<'' 
EnumItem'' %
>''% &
(''& '
)''' (
;''( )
}(( 	
public)) 
string)) 
ColumnAlias)) !
{))" #
get))$ '
;))' (
set))) ,
;)), -
})). /
public** 
string** 

ColumnName**  
{**! "
get**# &
;**& '
set**( +
;**+ ,
}**- .
public++ 
Type++ 
Type++ 
{++ 
get++ 
;++ 
set++  #
;++# $
}++% &
public,, 
int,, 
?,, 
Length,, 
{,, 
get,,  
;,,  !
set,," %
;,,% &
},,' (
public-- 
bool-- 
NotNull-- 
{-- 
get-- !
;--! "
set--# &
;--& '
}--( )
public.. 
bool.. 
IsDomain.. 
{.. 
get.. "
;.." #
set..$ '
;..' (
}..) *
public// 
double// 
?// 
Min// 
{// 
get//  
;//  !
set//" %
;//% &
}//' (
public00 
double00 
?00 
Max00 
{00 
get00  
;00  !
set00" %
;00% &
}00' (
public11 
string11 
Pattern11 
{11 
get11  #
;11# $
set11% (
;11( )
}11* +
public22 
ColumnDefaultValue22 !
Default22" )
{22* +
get22, /
;22/ 0
set221 4
;224 5
}226 7
public33 
AutoIncrement33 
AutoIncrement33 *
{33+ ,
get33- 0
;330 1
set332 5
;335 6
}337 8
public44 
bool44 
?44 
Unique44 
{44 
get44 !
;44! "
set44# &
;44& '
}44( )
public55 
List55 
<55 
EnumItem55 
>55 
Enums55 #
{55$ %
get55& )
;55) *
set55+ .
;55. /
}550 1
public66 
override66 
string66 
ToString66 '
(66' (
)66( )
{77 	
return88 
string88 
.88 
Format88  
(88  !
$str88! 8
,888 9

ColumnName88: D
,88D E
Type88F J
.88J K
Name88K O
)88O P
;88P Q
}99 	
}:: 
public;; 

class;; 

TableIndex;; 
{<< 
public== 
string== 
Name== 
{== 
get==  
;==  !
set==" %
;==% &
}==' (
public>> 
bool>> 
IsUnique>> 
{>> 
get>> "
;>>" #
set>>$ '
;>>' (
}>>) *
public?? 
string?? 
[?? 
]?? 
Columns?? 
{??  !
get??" %
;??% &
set??' *
;??* +
}??, -
}@@ 
publicAA 

classAA 
AutoIncrementAA 
{BB 
publicCC 
intCC 
StartCC 
{CC 
getCC 
;CC 
setCC  #
;CC# $
}CC% &
publicDD 
intDD 
	IncrementDD 
{DD 
getDD "
;DD" #
setDD$ '
;DD' (
}DD) *
publicFF 
AutoIncrementFF 
(FF 
)FF 
{GG 	
StartHH 
=HH 
$numHH 
;HH 
	IncrementII 
=II 
$numII 
;II 
}JJ 	
}KK 
publicLL 

classLL 
ColumnDefaultValueLL #
{MM 
publicNN 
stringNN 
TextNN 
{NN 
getNN  
;NN  !
setNN" %
;NN% &
}NN' (
publicOO 
SqlFunctionsOO 
?OO 
FunctionOO %
{OO& '
getOO( +
;OO+ ,
setOO- 0
;OO0 1
}OO2 3
publicQQ 
staticQQ 
implicitQQ 
operatorQQ '
ColumnDefaultValueQQ( :
(QQ: ;
stringQQ; A
valQQB E
)QQE F
{RR 	
returnSS 
newSS 
ColumnDefaultValueSS )
{SS* +
TextSS, 0
=SS1 2
valSS3 6
}SS7 8
;SS8 9
}TT 	
publicUU 
staticUU 
implicitUU 
operatorUU '
ColumnDefaultValueUU( :
(UU: ;
SqlFunctionsUU; G
valUUH K
)UUK L
{VV 	
returnWW 
newWW 
ColumnDefaultValueWW )
{WW* +
FunctionWW, 4
=WW5 6
valWW7 :
}WW; <
;WW< =
}XX 	
}YY 
publicZZ 

classZZ 
EnumItemZZ 
{[[ 
public\\ 
string\\ 
Key\\ 
{\\ 
get\\ 
;\\  
set\\! $
;\\$ %
}\\& '
public]] 
int]] 
Value]] 
{]] 
get]] 
;]] 
set]]  #
;]]# $
}]]% &
public^^ 
Guid^^ 
?^^ 
EnumStyleId^^  
{^^! "
get^^# &
;^^& '
set^^( +
;^^+ ,
}^^- .
public__ 
short__ 
?__ 
EnumStyleAngle__ $
{__% &
get__' *
;__* +
set__, /
;__/ 0
}__1 2
public`` 

Dictionary`` 
<`` 
string``  
,``  !
string``" (
>``( )
ColumnDefaults``* 8
{``9 :
get``; >
;``> ?
set``@ C
;``C D
}``E F
}aa 
publicbb 

enumbb 
SqlFunctionsbb 
{cc 
NEWIDdd 
,dd 
GETDATEee 
,ee 
}ff 
}gg ˘-
ÇD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Geometry\GeometryBuilder.cs
	namespace 	
Infoline
 
. 
	Framework 
{ 
public 

class 
GeometryBuilder  
{ 
static 
	WKTReader 
	wktReader "
=# $
new% (
	WKTReader) 2
(2 3
)3 4
;4 5
static 
	WKBReader 
	wkbReader "
=# $
new% (
	WKBReader) 2
(2 3
)3 4
;4 5
public 
static 
	IGeometry 
FromText  (
(( )
string) /
wkt0 3
)3 4
{ 	
var 
geometry 
= 
	wktReader $
.$ %
Read% )
() *
wkt* -
)- .
;. /
geometry 
= 
GeometryValidator (
.( )
	MakeValid) 2
(2 3
geometry3 ;
); <
;< =
return 
geometry 
; 
} 	
public 
static 
	IGeometry 
FromWKB  '
(' (
byte( ,
[, -
]- .
wkb/ 2
)2 3
{ 	
var 
geometry 
= 
	wkbReader $
.$ %
Read% )
() *
wkb* -
)- .
;. /
geometry 
= 
GeometryValidator (
.( )
	MakeValid) 2
(2 3
geometry3 ;
); <
;< =
return 
geometry 
; 
} 	
public"" 
	IGeometry"" 
ChangeProjection"" )
("") *
	IGeometry""* 3
geometry""4 <
,""< =
string""> D
	sourceWkt""E N
,""N O
string""P V
	targetWkt""W `
)""` a
{## 	
var$$ 
	sourceCrs$$ 
=$$ 
	sourceWkt$$ %
!=$$& (
null$$) -
?$$. /
(%%  !%
CoordinateSystemWktReader%%! :
.%%: ;
Parse%%; @
(%%@ A
	sourceWkt%%A J
)%%J K
as%%L N
ICoordinateSystem%%O `
)%%` a
:%%b c
(&&  !
ProjNet&&! (
.&&( )

SRIDReader&&) 3
.&&3 4
	GetCSbyID&&4 =
(&&= >
$num&&> B
)&&B C
as&&D F
ICoordinateSystem&&G X
)&&X Y
;&&Y Z
var)) 
	targetCrs)) 
=)) 
	targetWkt)) %
!=))& (
null))) -
?)). /
(**  !%
CoordinateSystemWktReader**! :
.**: ;
Parse**; @
(**@ A
	targetWkt**A J
)**J K
as**L N
ICoordinateSystem**O `
)**` a
:**b c
(++  !
ProjNet++! (
.++( )

SRIDReader++) 3
.++3 4
	GetCSbyID++4 =
(++= >
$num++> B
)++B C
as++D F
ICoordinateSystem++G X
)++X Y
;++Y Z
if-- 
(-- 
	sourceCrs-- 
.-- 
EqualParams-- %
(--% &
	targetCrs--& /
)--/ 0
)--0 1
return.. 
geometry.. 
;..  
var00 
gtFac00 
=00 
new00 
ProjNet00 #
.00# $
CoordinateSystems00$ 5
.005 6
Transformations006 E
.00E F+
CoordinateTransformationFactory00F e
(00e f
)00f g
;00g h
var11 
transformFunction11 !
=11" #
gtFac11$ )
.11) *'
CreateFromCoordinateSystems11* E
(11E F
	sourceCrs11F O
,11O P
	targetCrs11Q Z
)11Z [
;11[ \
var33 
points33 
=33 
geometry33 !
.33! "
Coordinates33" -
.33- .
Select33. 4
(334 5
a335 6
=>337 9
transformFunction33: K
.33K L
MathTransform33L Y
.33Y Z
	Transform33Z c
(33c d
new33d g
[33g h
]33h i
{33j k
a33l m
.33m n
X33n o
,33o p
a33q r
.33r s
Y33s t
,33t u
a33v w
.33w x
Z33x y
}33z {
)33{ |
)33| }
.33} ~
ToArray	33~ Ö
(
33Ö Ü
)
33Ü á
;
33á à
var44 
len44 
=44 
geometry44 
.44 
Coordinates44 *
.44* +
Length44+ 1
;441 2
var55 
i55 
=55 
$num55 
;55 
foreach66 
(66 
var66 

coordinate66 #
in66$ &
geometry66' /
.66/ 0
Coordinates660 ;
)66; <
{77 
var88 
point88 
=88 
points88 "
[88" #
i88# $
]88$ %
;88% &

coordinate:: 
.:: 
X:: 
=:: 
point:: $
[::$ %
$num::% &
]::& '
;::' (

coordinate;; 
.;; 
Y;; 
=;; 
point;; $
[;;$ %
$num;;% &
];;& '
;;;' (

coordinate<< 
.<< 
Z<< 
=<< 
point<< $
[<<$ %
$num<<% &
]<<& '
;<<' (
i== 
++== 
;== 
}>> 
return@@ 
geometry@@ 
;@@ 
}BB 	
}DD 
}EE Á`
ÑD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Geometry\GeometryValidator.cs
	namespace

 	
Infoline


 
.

 
	Framework

 
{ 
public 

class 
GeometryValidator "
{ 
static 
IGeometryFactory 
factory  '
=( )
NetTopologySuite* :
.: ;
NtsGeometryServices; N
.N O
InstanceO W
.W X!
CreateGeometryFactoryX m
(m n
)n o
;o p
public 
static 
bool 
IsValid "
(" #
	IGeometry# ,
geometry- 5
)5 6
{ 	
var 
sqlGeometry 
= 
SqlGeography *
.* +
STGeomFromText+ 9
(9 :
new: =
System> D
.D E
DataE I
.I J
SqlTypesJ R
.R S
SqlCharsS [
([ \
geometry\ d
.d e
AsTexte k
(k l
)l m
.m n
ToArrayn u
(u v
)v w
)w x
,x y
$numz ~
)~ 
;	 Ä
return 
sqlGeometry 
. 
	STIsValid (
(( )
)) *
.* +
IsTrue+ 1
;1 2
} 	
public 
static 
	IGeometry 
	MakeValid  )
() *
	IGeometry* 3
geometry4 <
)< =
{ 	
return 
	MakeValid 
( 
geometry %
,% &
true' +
)+ ,
;, -
} 	
public 
static 
	IGeometry 
ReorientObject  .
(. /
	IGeometry/ 8
geometry9 A
)A B
{ 	
if 
( 
geometry 
is 
ILinearRing '
)' (
return 
ReorientObject %
(% &
geometry& .
as/ 1
ILinearRing2 =
)= >
;> ?
else   
if   
(   
geometry   
is    
IPolygon  ! )
)  ) *
return!! 
ReorientObject!! %
(!!% &
geometry!!& .
as!!/ 1
IPolygon!!2 :
)!!: ;
;!!; <
else"" 
if"" 
("" 
geometry"" 
is""  
IMultiPolygon""! .
)"". /
return## 
ReorientObject## %
(##% &
geometry##& .
as##/ 1
IMultiPolygon##2 ?
)##? @
;##@ A
return$$ 
geometry$$ 
;$$ 
}%% 	
private(( 
static(( 
	IGeometry((  
	MakeValid((! *
(((* +
	IGeometry((+ 4
geometry((5 =
,((= >
bool((? C
forceXY((D K
)((K L
{)) 	
geometry** 
=** 
ReorientObject** %
(**% &
geometry**& .
)**. /
;**/ 0
var++ 
sqlGeometry++ 
=++ 
ToSqlGeography++ ,
(++, -
geometry++- 5
)++5 6
;++6 7
if,, 
(,, 
!,, 
sqlGeometry,, 
.,, 
	STIsValid,, &
(,,& '
),,' (
),,( )
{-- 
sqlGeometry.. 
=.. 
sqlGeometry.. )
...) *
	MakeValid..* 3
(..3 4
)..4 5
;..5 6
var// 
newGeometry// 
=//  !
ToIGeometry//" -
(//- .
sqlGeometry//. 9
)//9 :
;//: ;
newGeometry00 
=00 
GetOldCoordinates00 /
(00/ 0
newGeometry000 ;
,00; <
geometry00= E
,00E F
forceXY00G N
)00N O
;00O P
sqlGeometry22 
=22 
ToSqlGeography22 ,
(22, -
newGeometry22- 8
)228 9
;229 :
var33 
isStilValid33 
=33  !
sqlGeometry33" -
.33- .
	STIsValid33. 7
(337 8
)338 9
;339 :
if44 
(44 
isStilValid44 
)44  
{55 
if66 
(66 
newGeometry66 #
is66$ &
ILineString66' 2
)662 3
{77 
if88 
(88 
sqlGeometry88 '
.88' (
EnvelopeAngle88( 5
(885 6
)886 7
>888 9
$num88: <
)88< =
{99 
sqlGeometry:: '
=::( )
sqlGeometry::* 5
.::5 6
ReorientObject::6 D
(::D E
)::E F
;::F G
newGeometry;; '
=;;( )
ToIGeometry;;* 5
(;;5 6
sqlGeometry;;6 A
);;A B
;;;B C
newGeometry<< '
=<<( )
GetOldCoordinates<<* ;
(<<; <
newGeometry<<< G
,<<G H
geometry<<I Q
,<<Q R
forceXY<<S Z
)<<Z [
;<<[ \
}== 
}>> 
return?? 
newGeometry?? &
;??& '
}@@ 
elseAA 
{BB 
returnCC 
	MakeValidCC $
(CC$ %
geometryCC% -
,CC- .
falseCC/ 4
)CC4 5
;CC5 6
}DD 
}EE 
returnGG 
geometryGG 
;GG 
}HH 	
privateKK 
staticKK 
	IGeometryKK  
GetOldCoordinatesKK! 2
(KK2 3
	IGeometryKK3 <
newGeometryKK= H
,KKH I
	IGeometryKKJ S
oldGeometryKKT _
,KK_ `
boolKKa e
forceXYKKf m
=KKn o
trueKKp t
)KKt u
{LL 	
foreachMM 
(MM 
varMM 

coordinateMM #
inMM$ &
newGeometryMM' 2
.MM2 3
CoordinatesMM3 >
)MM> ?
{NN 
GeoAPIOO 
.OO 

GeometriesOO !
.OO! "

CoordinateOO" ,
oldCoordinateOO- :
=OO; <
nullOO= A
;OOA B
foreachPP 
(PP 
varPP 
oldCrdsPP $
inPP% '
oldGeometryPP( 3
.PP3 4
CoordinatesPP4 ?
)PP? @
{QQ 
ifRR 
(RR 
oldCrdsRR 
.RR  
Equals2DRR  (
(RR( )

coordinateRR) 3
,RR3 4
$numRR5 >
)RR> ?
)RR? @
{SS 
oldCoordinateTT %
=TT& '
oldCrdsTT( /
;TT/ 0
breakUU 
;UU 
}VV 
}WW 
ifYY 
(YY 
oldCoordinateYY !
!=YY" $
nullYY% )
)YY) *
{ZZ 
if[[ 
([[ 
forceXY[[ 
==[[  "
true[[# '
)[[' (
{\\ 

coordinate]] "
.]]" #
X]]# $
=]]% &
oldCoordinate]]' 4
.]]4 5
X]]5 6
;]]6 7

coordinate^^ "
.^^" #
Y^^# $
=^^% &
oldCoordinate^^' 4
.^^4 5
Y^^5 6
;^^6 7
}__ 

coordinate`` 
.`` 
Z``  
=``! "
oldCoordinate``# 0
.``0 1
Z``1 2
;``2 3

coordinateaa 
.aa 
Maa  
=aa! "
oldCoordinateaa# 0
.aa0 1
Maa1 2
;aa2 3
}bb 
}cc 
returnee 
newGeometryee 
;ee 
}ff 	
privategg 
staticgg 
SqlGeographygg #
ToSqlGeographygg$ 2
(gg2 3
	IGeometrygg3 <
geometrygg= E
)ggE F
{hh 	
varii 
sqlGeometryii 
=ii 
SqlGeographyii *
.ii* +
STGeomFromTextii+ 9
(ii9 :
newii: =
Systemii> D
.iiD E
DataiiE I
.iiI J
SqlTypesiiJ R
.iiR S
SqlCharsiiS [
(ii[ \
geometryii\ d
.iid e
AsTextiie k
(iik l
)iil m
.iim n
ToArrayiin u
(iiu v
)iiv w
)iiw x
,iix y
$numiiz ~
)ii~ 
;	ii Ä
returnjj 
sqlGeometryjj 
;jj 
}kk 	
privatell 
staticll 
	IGeometryll  
ToIGeometryll! ,
(ll, -
SqlGeographyll- 9
sqlGeographyll: F
)llF G
{mm 	
returnnn 
newnn 
	WKTReadernn  
(nn  !
)nn! "
.nn" #
Readnn# '
(nn' (
sqlGeographynn( 4
.nn4 5
	MakeValidnn5 >
(nn> ?
)nn? @
.nn@ A
ToStringnnA I
(nnI J
)nnJ K
)nnK L
;nnL M
}oo 	
privateqq 
staticqq 
ILinearRingqq "
ReorientObjectqq# 1
(qq1 2
ILinearRingqq2 =
ringqq> B
)qqB C
{rr 	
iftt 
(tt 
(tt 
(tt 
NetTopologySuitett "
.tt" #

Geometriestt# -
.tt- .

LineStringtt. 8
)tt8 9
ringtt9 =
)tt= >
.tt> ?
IsEmptytt? F
==ttG I
falsettJ O
)ttO P
ifuu 
(uu 
!uu 
ringuu 
.uu 
IsCCWuu 
)uu  
returnvv 
ringvv 
.vv  
Reversevv  '
(vv' (
)vv( )
asvv* ,
ILinearRingvv- 8
;vv8 9
returnww 
ringww 
;ww 
}xx 	
privateyy 
staticyy 
IPolygonyy 
ReorientObjectyy  .
(yy. /
IPolygonyy/ 7
polygonyy8 ?
)yy? @
{zz 	
var{{ 
shell{{ 
={{ 
ReorientObject{{ &
({{& '
({{' (
	IGeometry{{( 1
){{1 2
polygon{{2 9
.{{9 :
Shell{{: ?
){{? @
as{{A C
ILinearRing{{D O
;{{O P
var|| 
holes|| 
=|| 
polygon|| 
.||  
Holes||  %
.||% &
Select||& ,
(||, -
a||- .
=>||/ 1
ReorientObject||2 @
(||@ A
a||A B
)||B C
as||D F
ILinearRing||G R
)||R S
.||S T
ToArray||T [
(||[ \
)||\ ]
;||] ^
return}} 
factory}} 
.}} 
CreatePolygon}} (
(}}( )
shell}}) .
,}}. /
holes}}0 5
)}}5 6
;}}6 7
}~~ 	
private 
static 
IMultiPolygon $
ReorientObject% 3
(3 4
IMultiPolygon4 A
multiPolygonB N
)N O
{
ÄÄ 	
List
ÅÅ 
<
ÅÅ 
IPolygon
ÅÅ 
>
ÅÅ 
polygons
ÅÅ #
=
ÅÅ$ %
new
ÅÅ& )
List
ÅÅ* .
<
ÅÅ. /
IPolygon
ÅÅ/ 7
>
ÅÅ7 8
(
ÅÅ8 9
)
ÅÅ9 :
;
ÅÅ: ;
for
ÇÇ 
(
ÇÇ 
var
ÇÇ 
i
ÇÇ 
=
ÇÇ 
$num
ÇÇ 
;
ÇÇ 
i
ÇÇ 
<
ÇÇ 
multiPolygon
ÇÇ  ,
.
ÇÇ, -
Count
ÇÇ- 2
;
ÇÇ2 3
i
ÇÇ4 5
++
ÇÇ5 7
)
ÇÇ7 8
polygons
ÉÉ 
.
ÉÉ 
Add
ÉÉ 
(
ÉÉ 
ReorientObject
ÉÉ +
(
ÉÉ+ ,
multiPolygon
ÉÉ, 8
[
ÉÉ8 9
i
ÉÉ9 :
]
ÉÉ: ;
)
ÉÉ; <
as
ÉÉ= ?
IPolygon
ÉÉ@ H
)
ÉÉH I
;
ÉÉI J
return
ÖÖ 
factory
ÖÖ 
.
ÖÖ  
CreateMultiPolygon
ÖÖ -
(
ÖÖ- .
polygons
ÖÖ. 6
.
ÖÖ6 7
ToArray
ÖÖ7 >
(
ÖÖ> ?
)
ÖÖ? @
)
ÖÖ@ A
;
ÖÖA B
}
ÜÜ 	
}
àà 
}ââ ”é
âD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\GIS\GeometryFile\GeoJsonFileLib.cs
	namespace

 	
Infoline


 
.

 
GIS

 
{ 
public 

class 
GeoJsonFileLib 
:  !
GeometryFilePath" 2
,2 3
IGeometryFile4 A
{ 
public 
GeoJsonFileLib 
( 
string $
path% )
,) *
string+ 1
fileName2 :
): ;
{ 	
this 
. 
_path 
= 
path 
; 
this 
. 
	_fileName 
= 
fileName %
;% &
} 	
public 
GeometryObject 
ReadData &
(& '
)' (
{ 	
throw 
new #
NotImplementedException -
(- .
). /
;/ 0
} 	
public 
bool 
	WriteData 
( 
GeometryObject ,
geometryObject- ;
); <
{ 	
try 
{ 
var 
geoJsonObject !
=" #
new$ '
GeoJsonObject( 5
(5 6
)6 7
;7 8
geoJsonObject 
. 
type "
=# $
GeoJSONObjectType% 6
.6 7
FeatureCollection7 H
.H I
ToStringI Q
(Q R
)R S
;S T
geoJsonObject   
.   
crs   !
=  " #
GetCrs  $ *
(  * +
)  + ,
;  , -
geoJsonObject!! 
.!! 
features!! &
=!!' (*
GetFeatureListByGeometryObject!!) G
(!!G H
geometryObject!!H V
)!!V W
;!!W X
using## 
(## 
StreamWriter## #
writer##$ *
=##+ ,
new##- 0
StreamWriter##1 =
(##= >
_path##> C
+##D E
$str##F J
+##K L
	_fileName##M V
+##W X
$str##Y ]
+##^ _
	_fileName##` i
+##j k
$str##l v
)##v w
)##w x
{$$ 
writer%% 
.%% 
	WriteLine%% $
(%%$ %

Newtonsoft%%% /
.%%/ 0
Json%%0 4
.%%4 5
JsonConvert%%5 @
.%%@ A
SerializeObject%%A P
(%%P Q
geoJsonObject%%Q ^
)%%^ _
)%%_ `
;%%` a
}&& 
return'' 
true'' 
;'' 
}(( 
catch)) 
{** 
return++ 
false++ 
;++ 
},, 
}-- 	
private// 
Crs// 
GetCrs// 
(// 
)// 
{00 	
var11 
crsDictionary11 
=11 
new11  #

Dictionary11$ .
<11. /
string11/ 5
,115 6
object117 =
>11= >
(11> ?
)11? @
;11@ A
crsDictionary22 
.22 
Add22 
(22 
$str22 $
,22$ %
$str22& E
)22E F
;22F G
var33 
crs33 
=33 
new33 
Crs33 
(33 
)33 
;33  
crs44 
.44 
type44 
=44 
CRSType44 
.44 
name44 #
.44# $
ToString44$ ,
(44, -
)44- .
;44. /
crs55 
.55 

properties55 
=55 
crsDictionary55 *
;55* +
return66 
crs66 
;66 
}77 	
private99 
Features99 
[99 
]99 *
GetFeatureListByGeometryObject99 9
(999 :
GeometryObject99: H
geometryObject99I W
)99W X
{:: 	
var;; 
featuresList;; 
=;; 
new;; "
List;;# '
<;;' (
Features;;( 0
>;;0 1
(;;1 2
);;2 3
;;;3 4
foreach<< 
(<< 
var<< 
item<< 
in<<  
geometryObject<<! /
.<</ 0
	TableRows<<0 9
)<<9 :
{== 
var>> (
featuresPropertiesDictionary>> 0
=>>1 2
new>>3 6

Dictionary>>7 A
<>>A B
string>>B H
,>>H I
object>>J P
>>>P Q
(>>Q R
)>>R S
;>>S T
foreach?? 
(?? 
var?? 
tableColoumb?? )
in??* ,
item??- 1
.??1 2
TableColoumbs??2 ?
)??? @
{@@ 
ifAA 
(AA 
tableColoumbAA $
.AA$ %
	FieldNameAA% .
!=AA/ 1
$strAA2 @
)AA@ A(
featuresPropertiesDictionaryBB 4
.BB4 5
AddBB5 8
(BB8 9
tableColoumbBB9 E
.BBE F
	FieldNameBBF O
,BBO P
tableColoumbBBQ ]
.BB] ^
ValueBB^ c
)BBc d
;BBd e
}CC 
varEE 
listCoordinatesEE #
=EE$ %
newEE& )
ListEE* .
<EE. /
WGS84EE/ 4
>EE4 5
(EE5 6
)EE6 7
;EE7 8
varFF 
coordinatesWGS84FF $
=FF% &!
SqlGeographyConverterFF' <
.FF< =
SQLGeographyToWGS84FF= P
(FFP Q
itemFFQ U
.FFU V
PolygonFFV ]
)FF] ^
;FF^ _
ifHH 
(HH 
itemHH 
.HH 
GeometryTypeHH %
==HH& (
GeometryTypeHH) 5
.HH5 6

MultiPointHH6 @
||HHA C
itemII 
.II 
GeometryTypeII $
==II% '
GeometryTypeII( 4
.II4 5
MultiPointZII5 @
||IIA C
itemJJ 
.JJ 
GeometryTypeJJ $
==JJ% '
GeometryTypeJJ( 4
.JJ4 5
PointMJJ5 ;
||JJ< >
itemKK 
.KK 
GeometryTypeKK $
==KK% '
GeometryTypeKK( 4
.KK4 5
PointZKK5 ;
||KK< >
itemLL 
.LL 
GeometryTypeLL $
==LL% '
GeometryTypeLL( 4
.LL4 5
PointLL5 :
)LL: ;
{MM 
varNN 
geometryNN  
=NN! "
newNN# &
GeometryPointNN' 4
(NN4 5
)NN5 6
;NN6 7
varOO 

coordinateOO "
=OO# $
newOO% (
ListOO) -
<OO- .
doubleOO. 4
>OO4 5
(OO5 6
)OO6 7
;OO7 8

coordinatePP 
.PP 
AddPP "
(PP" #
coordinatesWGS84PP# 3
.PP3 4
FirstOrDefaultPP4 B
(PPB C
)PPC D
.PPD E
	LongitudePPE N
)PPN O
;PPO P

coordinateQQ 
.QQ 
AddQQ "
(QQ" #
coordinatesWGS84QQ# 3
.QQ3 4
FirstOrDefaultQQ4 B
(QQB C
)QQC D
.QQD E
LatitudeQQE M
)QQM N
;QQN O

coordinateRR 
.RR 
AddRR "
(RR" #
coordinatesWGS84RR# 3
.RR3 4
FirstOrDefaultRR4 B
(RRB C
)RRC D
.RRD E
AltitudeRRE M
)RRM N
;RRN O
varTT 
geometryTypeTT $
=TT% &.
"ConvertToGeometryTypeToGeoJsonTypeTT' I
(TTI J
itemTTJ N
.TTN O
GeometryTypeTTO [
)TT[ \
;TT\ ]
geometryUU 
.UU 
typeUU !
=UU" #
geometryTypeUU$ 0
.UU0 1
ToStringUU1 9
(UU9 :
)UU: ;
;UU; <
geometryVV 
.VV 
coordinatesVV (
=VV) *

coordinateVV+ 5
.VV5 6
ToArrayVV6 =
(VV= >
)VV> ?
;VV? @
featuresListWW  
.WW  !
AddWW! $
(WW$ %
newWW% (
FeaturesWW) 1
{WW2 3
geometryWW4 <
=WW= >
geometryWW? G
,WWG H

propertiesWWI S
=WWT U(
featuresPropertiesDictionaryWWV r
,WWr s
typeWWt x
=WWy z
GeoJSONObjectType	WW{ å
.
WWå ç
Feature
WWç î
.
WWî ï
ToString
WWï ù
(
WWù û
)
WWû ü
}
WW† °
)
WW° ¢
;
WW¢ £
}XX 
else[[ 
{\\ 
var]] 
geometry]]  
=]]! "
new]]# &
GeometryLineString]]' 9
(]]9 :
)]]: ;
;]]; <
var^^ 
listCoordinate^^ &
=^^' (
new^^) ,
List^^- 1
<^^1 2
double^^2 8
[^^8 9
]^^9 :
>^^: ;
(^^; <
)^^< =
;^^= >
foreach`` 
(`` 
var``  
coordinateWGS84``! 0
in``1 3
coordinatesWGS84``4 D
)``D E
{aa 
varbb 

coordinatebb &
=bb' (
newbb) ,
Listbb- 1
<bb1 2
doublebb2 8
>bb8 9
(bb9 :
)bb: ;
;bb; <

coordinatecc "
.cc" #
Addcc# &
(cc& '
coordinateWGS84cc' 6
.cc6 7
	Longitudecc7 @
)cc@ A
;ccA B

coordinatedd "
.dd" #
Adddd# &
(dd& '
coordinateWGS84dd' 6
.dd6 7
Latitudedd7 ?
)dd? @
;dd@ A

coordinateee "
.ee" #
Addee# &
(ee& '
coordinateWGS84ee' 6
.ee6 7
Altitudeee7 ?
)ee? @
;ee@ A
listCoordinateff &
.ff& '
Addff' *
(ff* +

coordinateff+ 5
.ff5 6
ToArrayff6 =
(ff= >
)ff> ?
)ff? @
;ff@ A
}gg 
varii 
geometryTypeii $
=ii% &.
"ConvertToGeometryTypeToGeoJsonTypeii' I
(iiI J
itemiiJ N
.iiN O
GeometryTypeiiO [
)ii[ \
;ii\ ]
geometryjj 
.jj 
typejj !
=jj" #
geometryTypejj$ 0
.jj0 1
ToStringjj1 9
(jj9 :
)jj: ;
;jj; <
geometrykk 
.kk 
coordinateskk (
=kk) *
listCoordinatekk+ 9
;kk9 :
featuresListll  
.ll  !
Addll! $
(ll$ %
newll% (
Featuresll) 1
{ll2 3
geometryll4 <
=ll= >
geometryll? G
,llG H

propertiesllI S
=llT U(
featuresPropertiesDictionaryllV r
,llr s
typellt x
=lly z
GeoJSONObjectType	ll{ å
.
llå ç
Feature
llç î
.
llî ï
ToString
llï ù
(
llù û
)
llû ü
}
ll† °
)
ll° ¢
;
ll¢ £
}mm 
}oo 
returnpp 
featuresListpp 
.pp  
ToArraypp  '
(pp' (
)pp( )
;pp) *
}qq 	
privatess 
GeoJSONObjectTypess !.
"ConvertToGeometryTypeToGeoJsonTypess" D
(ssD E
GeometryTypessE Q
geometryTypessR ^
)ss^ _
{tt 	
ifuu 
(uu 
geometryTypeuu 
==uu 
GeometryTypeuu  ,
.uu, -

MultiPointuu- 7
)uu7 8
returnvv 
GeoJSONObjectTypevv (
.vv( )

MultiPointvv) 3
;vv3 4
elsexx 
ifxx 
(xx 
geometryTypexx !
==xx" $
GeometryTypexx% 1
.xx1 2
MultiPointZxx2 =
)xx= >
returnyy 
GeoJSONObjectTypeyy (
.yy( )

MultiPointyy) 3
;yy3 4
else{{ 
if{{ 
({{ 
geometryType{{ !
=={{" $
GeometryType{{% 1
.{{1 2
Point{{2 7
){{7 8
return|| 
GeoJSONObjectType|| (
.||( )
Point||) .
;||. /
else~~ 
if~~ 
(~~ 
geometryType~~ !
==~~" $
GeometryType~~% 1
.~~1 2
PointM~~2 8
)~~8 9
return 
GeoJSONObjectType (
.( )
Point) .
;. /
else
ÅÅ 
if
ÅÅ 
(
ÅÅ 
geometryType
ÅÅ !
==
ÅÅ" $
GeometryType
ÅÅ% 1
.
ÅÅ1 2
PointZ
ÅÅ2 8
)
ÅÅ8 9
return
ÇÇ 
GeoJSONObjectType
ÇÇ (
.
ÇÇ( )
Point
ÇÇ) .
;
ÇÇ. /
else
ÑÑ 
if
ÑÑ 
(
ÑÑ 
geometryType
ÑÑ !
==
ÑÑ" $
GeometryType
ÑÑ% 1
.
ÑÑ1 2
Polygon
ÑÑ2 9
)
ÑÑ9 :
return
ÖÖ 
GeoJSONObjectType
ÖÖ (
.
ÖÖ( )
Polygon
ÖÖ) 0
;
ÖÖ0 1
else
áá 
if
áá 
(
áá 
geometryType
áá !
==
áá" $
GeometryType
áá% 1
.
áá1 2
PolygonZ
áá2 :
)
áá: ;
return
àà 
GeoJSONObjectType
àà (
.
àà( )
Polygon
àà) 0
;
àà0 1
else
ää 
if
ää 
(
ää 
geometryType
ää !
==
ää" $
GeometryType
ää% 1
.
ää1 2
PolyLine
ää2 :
)
ää: ;
return
ãã 
GeoJSONObjectType
ãã (
.
ãã( )

LineString
ãã) 3
;
ãã3 4
else
çç 
if
çç 
(
çç 
geometryType
çç !
==
çç" $
GeometryType
çç% 1
.
çç1 2
	PolyLineM
çç2 ;
)
çç; <
return
éé 
GeoJSONObjectType
éé (
.
éé( )

LineString
éé) 3
;
éé3 4
else
êê 
if
êê 
(
êê 
geometryType
êê !
==
êê" $
GeometryType
êê% 1
.
êê1 2
	PolyLineZ
êê2 ;
)
êê; <
return
ëë 
GeoJSONObjectType
ëë (
.
ëë( )

LineString
ëë) 3
;
ëë3 4
else
íí 
return
ìì 
GeoJSONObjectType
ìì (
.
ìì( )

LineString
ìì) 3
;
ìì3 4
}
îî 	
}
ïï 
public
óó 

class
óó 
GeoJsonObject
óó 
{
òò 
public
ôô 
string
ôô 
type
ôô 
{
ôô 
get
ôô  
;
ôô  !
set
ôô" %
;
ôô% &
}
ôô' (
public
öö 
Crs
öö 
crs
öö 
{
öö 
get
öö 
;
öö 
set
öö !
;
öö! "
}
öö# $
public
õõ 
Features
õõ 
[
õõ 
]
õõ 
features
õõ "
{
õõ# $
get
õõ% (
;
õõ( )
set
õõ* -
;
õõ- .
}
õõ/ 0
}
úú 
public
ûû 

class
ûû 
Features
ûû 
{
üü 
public
†† 
string
†† 
type
†† 
{
†† 
get
††  
;
††  !
set
††" %
;
††% &
}
††' (
public
°° 

Dictionary
°° 
<
°° 
string
°°  
,
°°  !
object
°°" (
>
°°( )

properties
°°* 4
{
°°5 6
get
°°7 :
;
°°: ;
set
°°< ?
;
°°? @
}
°°A B
public
¢¢ 
object
¢¢ 
geometry
¢¢ 
{
¢¢  
get
¢¢! $
;
¢¢$ %
set
¢¢& )
;
¢¢) *
}
¢¢+ ,
}
££ 
public
•• 

class
••  
GeometryLineString
•• #
{
¶¶ 
public
ßß 
string
ßß 
type
ßß 
{
ßß 
get
ßß  
;
ßß  !
set
ßß" %
;
ßß% &
}
ßß' (
public
®® 
List
®® 
<
®® 
double
®® 
[
®® 
]
®® 
>
®® 
coordinates
®® )
{
®®* +
get
®®, /
;
®®/ 0
set
®®1 4
;
®®4 5
}
®®6 7
}
©© 
public
´´ 

class
´´ 
GeometryPoint
´´ 
{
¨¨ 
public
≠≠ 
string
≠≠ 
type
≠≠ 
{
≠≠ 
get
≠≠  
;
≠≠  !
set
≠≠" %
;
≠≠% &
}
≠≠' (
public
ÆÆ 
double
ÆÆ 
[
ÆÆ 
]
ÆÆ 
coordinates
ÆÆ #
{
ÆÆ$ %
get
ÆÆ& )
;
ÆÆ) *
set
ÆÆ+ .
;
ÆÆ. /
}
ÆÆ0 1
}
ØØ 
public
±± 

class
±± 
Crs
±± 
{
≤≤ 
public
≥≥ 
string
≥≥ 
type
≥≥ 
{
≥≥ 
get
≥≥  
;
≥≥  !
set
≥≥" %
;
≥≥% &
}
≥≥' (
public
¥¥ 

Dictionary
¥¥ 
<
¥¥ 
string
¥¥  
,
¥¥  !
object
¥¥" (
>
¥¥( )

properties
¥¥* 4
{
¥¥5 6
get
¥¥7 :
;
¥¥: ;
set
¥¥< ?
;
¥¥? @
}
¥¥A B
}
µµ 
public
∑∑ 

enum
∑∑ 
CRSType
∑∑ 
{
∏∏ 
unspecified
ππ 
,
ππ 
name
∫∫ 
,
∫∫ 
link
ªª 
}
ΩΩ 
public
øø 

enum
øø 
GeoJSONObjectType
øø !
{
¿¿ 
Point
¡¡ 
,
¡¡ 

MultiPoint
¬¬ 
,
¬¬ 

LineString
√√ 
,
√√ 
MultiLineString
ƒƒ 
,
ƒƒ 
Polygon
≈≈ 
,
≈≈ 
MultiPolygon
∆∆ 
,
∆∆  
GeometryCollection
«« 
,
«« 
Feature
»» 
,
»» 
FeatureCollection
…… 
}
   
}ÀÀ ˛'
áD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\GIS\GeometryFile\GeometryFile.cs
	namespace 	
Infoline
 
. 
GIS 
{ 
public 

class 
GeometryFile 
: 
GeometryFilePath  0
{ 
private 
GeometryObject 
_geometryObject .
{/ 0
get1 4
;4 5
set6 9
;9 :
}; <
private 
GeometryFileType  
_geometryFileType! 2
{3 4
get5 8
;8 9
set: =
;= >
}? @
public 
GeometryFile 
( 
string "
path# '
,' (
string) /
fileName0 8
,8 9
GeometryObject: H
geometryObjectI W
,W X
GeometryFileTypeY i
geometryFileTypej z
)z {
{		 	
_path

 
=

 
path

 
;

 
_geometryFileType 
= 
geometryFileType  0
;0 1
_geometryObject 
= 
geometryObject ,
;, -
	_fileName 
= 
fileName  
;  !
} 	
public 
bool 
WriteGeometryFile %
(% &
)& '
{ 	
_geometryObject 
. 
CheckGeometryObject /
(/ 0
)0 1
;1 2
if 
( 
_geometryFileType !
==" $
GeometryFileType% 5
.5 6
GEOJSON6 =
)= >
{ 
var 
geoJsonFile 
=  !
new" %
GeoJsonFileLib& 4
(4 5
_path5 :
,: ;
	_fileName< E
)E F
;F G
return 
( 
geoJsonFile #
.# $
	WriteData$ -
(- .
_geometryObject. =
)= >
)> ?
;? @
} 
else 
if 
( 
_geometryFileType &
==' )
GeometryFileType* :
.: ;
KML; >
)> ?
{ 
var 
kmlFile 
= 
new !

KMLFileLib" ,
(, -
_path- 2
,2 3
	_fileName4 =
)= >
;> ?
return 
kmlFile 
. 
	WriteData (
(( )
_geometryObject) 8
)8 9
;9 :
} 
else 
if 
( 
_geometryFileType &
==' )
GeometryFileType* :
.: ;
MSSQL; @
)@ A
{ 
return   
false   
;   
}!! 
else"" 
if"" 
("" 
_geometryFileType"" &
==""' )
GeometryFileType""* :
."": ;
SHAPE""; @
)""@ A
{## 
var$$ 
	shapeFile$$ 
=$$ 
new$$  #
ShapeFileLibrary$$$ 4
($$4 5
_path$$5 :
,$$: ;
	_fileName$$< E
)$$E F
;$$F G
return%% 
(%% 
	shapeFile%% !
.%%! "
	WriteData%%" +
(%%+ ,
_geometryObject%%, ;
)%%; <
)%%< =
;%%= >
}&& 
else'' 
if'' 
('' 
_geometryFileType'' &
==''' )
GeometryFileType''* :
.'': ;
TOPOJSON''; C
)''C D
{(( 
return)) 
false)) 
;)) 
}** 
else++ 
{,, 
return-- 
false-- 
;-- 
}.. 
}// 	
public11 
string11 
DownloadFileTile11 &
(11& '
GeometryFileType11' 7

exportType118 B
)11B C
{22 	
if33 
(33 

exportType33 
==33 
GeometryFileType33 .
.33. /
GEOJSON33/ 6
)336 7
return44 
$str44  
;44  !
else55 
if55 
(55 

exportType55 
==55  "
GeometryFileType55# 3
.553 4
SHAPE554 9
)559 :
return66 
$str66 
;66 
else77 
if77 
(77 

exportType77 
==77  "
GeometryFileType77# 3
.773 4
KML774 7
)777 8
return88 
$str88 
;88 
else99 
if99 
(99 

exportType99 
==99  "
GeometryFileType99# 3
.993 4
TOPOJSON994 <
)99< =
return:: 
$str:: !
;::! "
else;; 
return<< 
$str<< 
;<< 
}== 	
}>> 
}?? ¢
ãD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\GIS\GeometryFile\GeometryFilePath.cs
	namespace 	
Infoline
 
. 
GIS 
{ 
public 

abstract 
class 
GeometryFilePath *
{ 
public 
string 
_path 
{ 
get !
;! "
set# &
;& '
}( )
public 
string 
	_fileName 
{  !
get" %
;% &
set' *
;* +
}, -
} 
}		 ƒ

ãD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\GIS\GeometryFile\GeometryFileType.cs
	namespace 	
Infoline
 
. 
GIS 
{		 
public

 

enum

 
GeometryFileType

  
{ 
[ 	
Description	 
( 
$str 
) 
] 
Null 
= 
$num 
, 
[ 	
Description	 
( 
$str 
) 
] 
SHAPE 
= 
$num 
, 
[ 	
Description	 
( 
$str 
) 
] 
KML 
= 
$num 
, 
[ 	
Description	 
( 
$str 
) 
]  
GEOJSON 
= 
$num 
, 
[ 	
Description	 
( 
$str 
)  
]  !
TOPOJSON 
= 
$num 
, 
[ 	
Description	 
( 
$str 
) 
] 
MSSQL 
= 
$num 
} 
} ≠
àD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\GIS\GeometryFile\IGeometryFile.cs
	namespace 	
Infoline
 
. 
GIS 
{ 
	interface 
IGeometryFile 
{ 
GeometryObject 
ReadData 
( 
)  
;  !
bool 
	WriteData 
( 
GeometryObject $
geometryObject% 3
)3 4
;4 5
} 
}		 Òx
ÖD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\GIS\GeometryFile\KMLFileLib.cs
	namespace 	
Infoline
 
. 
GIS 
{ 
public 

class 

KMLFileLib 
: 
GeometryFilePath .
,. /
IGeometryFile0 =
{		 
public

 

KMLFileLib

 
(

 
string

  
path

! %
,

% &
string

' -
fileName

. 6
)

6 7
{ 	
this 
. 
_path 
= 
path 
; 
this 
. 
	_fileName 
= 
fileName %
;% &
} 	
public 
GeometryObject 
ReadData &
(& '
)' (
{ 	
throw 
new #
NotImplementedException -
(- .
). /
;/ 0
} 	
public 
bool 
	WriteData 
( 
GeometryObject ,
geometryObject- ;
); <
{ 	
return 
WriteToKmlFile !
(! "
geometryObject" 0
)0 1
;1 2
} 	
private 
bool 
WriteToKmlFile #
(# $
GeometryObject$ 2
geometryObject3 A
)A B
{ 	
try 
{ 
using 
( 
StreamWriter #
writer$ *
=+ ,
new- 0
StreamWriter1 =
(= >
_path> C
+D E
$strF J
+K L
	_fileNameM V
+W X
$strY ]
+^ _
	_fileName` i
+j k
$strl r
)r s
)s t
{ 
writer   
.   
	WriteLine   $
(  $ %
$str  % R
)  R S
;  S T
writer!! 
.!! 
	WriteLine!! $
(!!$ %
$str!!% W
)!!W X
;!!X Y
writer"" 
."" 
	WriteLine"" $
(""$ %
$str""% A
)""A B
;""B C
writer## 
.## 
	WriteLine## $
(##$ %
WriteSchema##% 0
(##0 1
geometryObject##1 ?
)##? @
)##@ A
;##A B
writer$$ 
.$$ 
	WriteLine$$ $
($$$ %
WriteFolder$$% 0
($$0 1
geometryObject$$1 ?
)$$? @
)$$@ A
;$$A B
writer%% 
.%% 
	WriteLine%% $
(%%$ %
$str%%% 2
)%%2 3
;%%3 4
writer&& 
.&& 
	WriteLine&& $
(&&$ %
$str&&% -
)&&- .
;&&. /
}'' 
return(( 
true(( 
;(( 
})) 
catch** 
{++ 
return,, 
false,, 
;,, 
}-- 
}.. 	
private00 
object00 
WriteFolder00 "
(00" #
GeometryObject00# 1
geometryObject002 @
)00@ A
{11 	
var22 
stringBuilder22 
=22 
new22  #
StringBuilder22$ 1
(221 2
)222 3
;223 4
stringBuilder33 
.33 

AppendLine33 $
(33$ %
$str33% /
)33/ 0
;330 1
stringBuilder44 
.44 

AppendLine44 $
(44$ %
$str44% /
+440 1
geometryObject442 @
.44@ A
	TableName44A J
+44K L
$str44M V
)44V W
;44W X
foreach66 
(66 
var66 
item66 
in66  
geometryObject66! /
.66/ 0
	TableRows660 9
)669 :
{77 
try88 
{99 
var:: 
itemGeometryString:: *
=::+ ,!
SqlGeographyConverter::- B
.::B C
WGS84ListToString::C T
(::T U!
SqlGeographyConverter::U j
.::j k
SQLGeographyToWGS84::k ~
(::~ 
item	:: É
.
::É Ñ
Polygon
::Ñ ã
)
::ã å
)
::å ç
;
::ç é
stringBuilder;; !
.;;! "

AppendLine;;" ,
(;;, -
$str;;- <
);;< =
;;;= >
stringBuilder<< !
.<<! "

AppendLine<<" ,
(<<, -
$str<<- A
)<<A B
;<<B C
stringBuilder== !
.==! "

AppendLine==" ,
(==, -
$str==- O
+==P Q
geometryObject==R `
.==` a
	TableName==a j
+==k l
$str==m r
)==r s
;==s t
if>> 
(>> 
item>> 
.>> 
TableColoumbs>> *
!=>>+ -
null>>. 2
)>>2 3
{?? 
foreach@@ 
(@@  !
var@@! $
item1@@% *
in@@+ -
item@@. 2
.@@2 3
TableColoumbs@@3 @
)@@@ A
{AA 
stringBuilderBB )
.BB) *

AppendLineBB* 4
(BB4 5
$strBB5 R
+BBS T
item1BBU Z
.BBZ [
	FieldNameBB[ d
+BBe f
$strBBg l
+BBm n
item1BBo t
.BBt u
ValueBBu z
+BB{ |
$str	BB} å
)
BBå ç
;
BBç é
}CC 
}DD 
stringBuilderEE !
.EE! "

AppendLineEE" ,
(EE, -
$strEE- B
)EEB C
;EEC D
stringBuilderFF !
.FF! "

AppendLineFF" ,
(FF, -
$strFF- B
)FFB C
;FFC D
ifHH 
(HH 
itemHH 
.HH 
GeometryTypeHH )
==HH* ,
GeometryTypeHH- 9
.HH9 :
PointMHH: @
||HHA C
itemII 
.II 
GeometryTypeII (
==II) +
GeometryTypeII, 8
.II8 9
PointZII9 ?
||II@ B
itemJJ 
.JJ 
GeometryTypeJJ (
==JJ) +
GeometryTypeJJ, 8
.JJ8 9
PointJJ9 >
)JJ> ?
{KK 
stringBuilderLL %
.LL% &

AppendLineLL& 0
(LL0 1

WritePointLL1 ;
(LL; <
itemGeometryStringLL< N
)LLN O
.LLO P
ToStringLLP X
(LLX Y
)LLY Z
)LLZ [
;LL[ \
}MM 
elseOO 
ifOO 
(OO 
itemOO !
.OO! "
GeometryTypeOO" .
==OO/ 1
GeometryTypeOO2 >
.OO> ?
PolygonOO? F
||OOG I
itemPP  
.PP  !
GeometryTypePP! -
==PP. 0
GeometryTypePP1 =
.PP= >
PolygonZPP> F
)PPF G
{QQ 
stringBuilderRR %
.RR% &

AppendLineRR& 0
(RR0 1
WritePolygonRR1 =
(RR= >
itemGeometryStringRR> P
)RRP Q
.RRQ R
ToStringRRR Z
(RRZ [
)RR[ \
)RR\ ]
;RR] ^
}TT 
elseVV 
ifVV 
(VV 
itemVV !
.VV! "
GeometryTypeVV" .
==VV/ 1
GeometryTypeVV2 >
.VV> ?
PolyLineVV? G
||VVH J
itemVVK O
.VVO P
GeometryTypeVVP \
==VV] _
GeometryTypeVV` l
.VVl m
	PolyLineMVVm v
||VVw y
itemVVz ~
.VV~ 
GeometryType	VV ã
==
VVå é
GeometryType
VVè õ
.
VVõ ú
	PolyLineZ
VVú •
||
VV¶ ®
item
VV© ≠
.
VV≠ Æ
GeometryType
VVÆ ∫
==
VVª Ω
GeometryType
VVæ  
.
VV  À

MultiPoint
VVÀ ’
||
VV÷ ÿ
item
VVŸ ›
.
VV› ﬁ
GeometryType
VVﬁ Í
==
VVÎ Ì
GeometryType
VVÓ ˙
.
VV˙ ˚
MultiPointZ
VV˚ Ü
||
VVá â
item
VVä é
.
VVé è
GeometryType
VVè õ
==
VVú û
GeometryType
VVü ´
.
VV´ ¨
MultiPointM
VV¨ ∑
)
VV∑ ∏
{WW 
stringBuilderXX %
.XX% &

AppendLineXX& 0
(XX0 1
WritePolyLineXX1 >
(XX> ?
itemGeometryStringXX? Q
)XXQ R
.XXR S
ToStringXXS [
(XX[ \
)XX\ ]
)XX] ^
;XX^ _
}YY 
stringBuilder[[ !
.[[! "

AppendLine[[" ,
([[, -
$str[[- =
)[[= >
;[[> ?
}\\ 
catch]] 
{^^ 
continue__ 
;__ 
}`` 
}aa 
stringBuilderbb 
.bb 

AppendLinebb $
(bb$ %
$strbb% 0
)bb0 1
;bb1 2
returncc 
stringBuildercc  
;cc  !
}dd 	
privateff 
objectff 

WritePointff !
(ff! "
stringff" (
itemGeometryStringff) ;
)ff; <
{gg 	
varhh 
stringBuilderhh 
=hh 
newhh  #
StringBuilderhh$ 1
(hh1 2
)hh2 3
;hh3 4
stringBuilderii 
.ii 

AppendLineii $
(ii$ %
$strii% 2
)ii2 3
;ii3 4
stringBuilderjj 
.jj 

AppendLinejj $
(jj$ %
$strjj% Z
)jjZ [
;jj[ \
stringBuilderkk 
.kk 

AppendLinekk $
(kk$ %
$strkk% :
+kk; <
itemGeometryStringkk= O
+kkP Q
$strkkR b
)kkb c
;kkc d
stringBuilderll 
.ll 

AppendLinell $
(ll$ %
$strll% 3
)ll3 4
;ll4 5
returnmm 
stringBuildermm  
;mm  !
}nn 	
privatepp 
objectpp 
WritePolygonpp #
(pp# $
stringpp$ *
itemGeometryStringpp+ =
)pp= >
{qq 	
varrr 
stringBuilderrr 
=rr 
newrr  #
StringBuilderrr$ 1
(rr1 2
)rr2 3
;rr3 4
stringBuilderss 
.ss 

AppendLiness $
(ss$ %
$strss% 4
)ss4 5
;ss5 6
stringBuildertt 
.tt 

AppendLinett $
(tt$ %
$strtt% Z
)ttZ [
;tt[ \
stringBuilderuu 
.uu 

AppendLineuu $
(uu$ %
$struu% >
)uu> ?
;uu? @
stringBuildervv 
.vv 

AppendLinevv $
(vv$ %
$strvv% ;
)vv; <
;vv< =
stringBuilderww 
.ww 

AppendLineww $
(ww$ %
$strww% ^
)ww^ _
;ww_ `
stringBuilderxx 
.xx 

AppendLinexx $
(xx$ %
$strxx% >
+xx? @
itemGeometryStringxxA S
+xxT U
$strxxV f
)xxf g
;xxg h
stringBuilderyy 
.yy 

AppendLineyy $
(yy$ %
$stryy% <
)yy< =
;yy= >
stringBuilderzz 
.zz 

AppendLinezz $
(zz$ %
$strzz% ?
)zz? @
;zz@ A
stringBuilder{{ 
.{{ 

AppendLine{{ $
({{$ %
$str{{% 5
){{5 6
;{{6 7
return|| 
stringBuilder||  
;||  !
}}} 	
private 
object 
WritePolyLine $
($ %
string% +
itemGeometryString, >
)> ?
{
ÄÄ 	
var
ÅÅ 
stringBuilder
ÅÅ 
=
ÅÅ 
new
ÅÅ  #
StringBuilder
ÅÅ$ 1
(
ÅÅ1 2
)
ÅÅ2 3
;
ÅÅ3 4
stringBuilder
ÇÇ 
.
ÇÇ 

AppendLine
ÇÇ $
(
ÇÇ$ %
$str
ÇÇ% :
)
ÇÇ: ;
;
ÇÇ; <
stringBuilder
ÉÉ 
.
ÉÉ 

AppendLine
ÉÉ $
(
ÉÉ$ %
$str
ÉÉ% 9
)
ÉÉ9 :
;
ÉÉ: ;
stringBuilder
ÑÑ 
.
ÑÑ 

AppendLine
ÑÑ $
(
ÑÑ$ %
$str
ÑÑ% \
)
ÑÑ\ ]
;
ÑÑ] ^
stringBuilder
ÖÖ 
.
ÖÖ 

AppendLine
ÖÖ $
(
ÖÖ$ %
$str
ÖÖ% <
+
ÖÖ= > 
itemGeometryString
ÖÖ? Q
+
ÖÖR S
$str
ÖÖT d
)
ÖÖd e
;
ÖÖe f
stringBuilder
ÜÜ 
.
ÜÜ 

AppendLine
ÜÜ $
(
ÜÜ$ %
$str
ÜÜ% :
)
ÜÜ: ;
;
ÜÜ; <
stringBuilder
áá 
.
áá 

AppendLine
áá $
(
áá$ %
$str
áá% ;
)
áá; <
;
áá< =
return
àà 
stringBuilder
àà  
;
àà  !
}
ââ 	
private
ãã 
StringBuilder
ãã 
WriteSchema
ãã )
(
ãã) *
GeometryObject
ãã* 8
geometryObject
ãã9 G
)
ããG H
{
åå 	
var
çç 
stringBuilder
çç 
=
çç 
new
çç  #
StringBuilder
çç$ 1
(
çç1 2
)
çç2 3
;
çç3 4
stringBuilder
éé 
.
éé 

AppendLine
éé $
(
éé$ %
$str
éé% 7
+
éé8 9
geometryObject
éé: H
.
ééH I
	TableName
ééI R
+
ééS T
$str
ééU _
+
éé` a
geometryObject
ééb p
.
éép q
	TableName
ééq z
+
éé{ |
$stréé} Ç
)ééÇ É
;ééÉ Ñ
if
èè 
(
èè 
geometryObject
èè 
.
èè 
	TableRows
èè (
.
èè( )
FirstOrDefault
èè) 7
(
èè7 8
)
èè8 9
.
èè9 :
TableColoumbs
èè: G
!=
èèH J
null
èèK O
)
èèO P
{
êê 
foreach
ëë 
(
ëë 
var
ëë 
item
ëë !
in
ëë" $
geometryObject
ëë% 3
.
ëë3 4
	TableRows
ëë4 =
.
ëë= >
FirstOrDefault
ëë> L
(
ëëL M
)
ëëM N
.
ëëN O
TableColoumbs
ëëO \
)
ëë\ ]
{
íí 
stringBuilder
ìì !
.
ìì! "

AppendLine
ìì" ,
(
ìì, -
$str
ìì- E
+
ììF G
item
ììH L
.
ììL M
	FieldName
ììM V
+
ììW X
$str
ììY e
+
ììf g
item
ììh l
.
ììl m
	SharpType
ììm v
.
ììv w
Name
ììw {
+
ìì| }
$strìì~ ë
)ììë í
;ììí ì
}
îî 
}
ïï 
stringBuilder
ññ 
.
ññ 

AppendLine
ññ $
(
ññ$ %
$str
ññ% 0
)
ññ0 1
;
ññ1 2
return
óó 
stringBuilder
óó  
;
óó  !
}
òò 	
}
ôô 
public
öö 

enum
öö 
AltitudeMode
öö 
{
õõ 
ClampToGround
úú 
=
úú 
$num
úú 
,
úú 
RelativeToGround
ùù 
=
ùù 
$num
ùù 
,
ùù 
Absolute
ûû 
=
ûû 
$num
ûû 
}
üü 
}†† ÷0
ÉD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\GIS\GeometryGeneralObject.cs
	namespace

 	
Infoline


 
.

 
GIS

 
{ 
public 

class 
TableColoumbs 
{ 
public 
int 

FieldIndex 
{ 
get  #
;# $
set% (
;( )
}* +
public 
string 
	FieldName 
{  !
get" %
;% &
set' *
;* +
}, -
public 
int 
Lenght 
{ 
get 
;  
set! $
;$ %
}& '
public 
Type 
	SharpType 
{ 
get  #
;# $
set% (
;( )
}* +
public 
object 
Value 
{ 
get !
;! "
set# &
;& '
}( )
} 
public 

class 
TableRow 
{ 
public 
Guid 
idx 
{ 
get 
; 
set "
;" #
}$ %
public 
TableColoumbs 
[ 
] 
TableColoumbs ,
{- .
get/ 2
;2 3
set4 7
;7 8
}9 :
public 
GeometryType 
GeometryType (
{) *
get+ .
;. /
set0 3
;3 4
}5 6
public 
	IGeometry 
Polygon  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 
string 
PolygonString #
{$ %
get& )
;) *
set+ .
;. /
}0 1
} 
public   

class   
GeometryObject   
{!! 
public"" 
string"" 
	TableName"" 
{""  !
get""" %
;""% &
set""' *
;""* +
}"", -
public## 
TableRow## 
[## 
]## 
	TableRows## #
{##$ %
get##& )
;##) *
set##+ .
;##. /
}##0 1
public$$ 
string$$ 
[$$ 
]$$ 

FieldNames$$ "
{$$# $
get$$% (
;$$( )
set$$* -
;$$- .
}$$/ 0
public%% 
GeometryType%% 
GeometryType%% (
{%%) *
get%%+ .
;%%. /
set%%0 3
;%%3 4
}%%5 6
public'' 
void'' 
CheckGeometryObject'' '
(''' (
)''( )
{(( 	
if** 
(** 
!** 
string** 
.** 
IsNullOrEmpty** %
(**% &
	TableName**& /
)**/ 0
)**0 1
{++ 
	TableName,, 
=,, 
	TableName,, %
.,,% &
Trim,,& *
(,,* +
),,+ ,
.,,, -
Replace,,- 4
(,,4 5
$str,,5 8
,,,8 9
$str,,: =
),,= >
;,,> ?
}-- 
foreach// 
(// 
var// 
TableRow// !
in//" $
this//% )
.//) *
	TableRows//* 3
)//3 4
{00 
foreach11 
(11 
var11 
TableColoumb11 )
in11* ,
TableRow11- 5
.115 6
TableColoumbs116 C
)11C D
{22 
if33 
(33 
TableColoumb33 $
.33$ %
	SharpType33% .
==33/ 1
null332 6
)336 7
{44 
if55 
(55 
TableColoumb55 (
.55( )
Value55) .
==55/ 1
null552 6
)556 7
{66 
TableColoumb77 (
.77( )
	SharpType77) 2
=773 4
typeof775 ;
(77; <
string77< B
)77B C
;77C D
}88 
else99 
{:: 
TableColoumb;; (
.;;( )
	SharpType;;) 2
=;;3 4
TableColoumb;;5 A
.;;A B
Value;;B G
.;;G H
GetType;;H O
(;;O P
);;P Q
;;;Q R
}<< 
if>> 
(>> 
TableColoumb>> (
.>>( )
	SharpType>>) 2
.>>2 3
Name>>3 7
==>>8 :
$str>>; D
)>>D E
{>>F G
TableColoumb?? (
.??( )
Value??) .
=??/ 0
(??1 2
Boolean??2 9
)??9 :
TableColoumb??: F
.??F G
Value??G L
???M N
$num??O P
:??Q R
$num??S T
;??T U
}@@ 
}BB 
}CC 
ifEE 
(EE 
TableRowEE 
.EE 
PolygonEE $
==EE% '
nullEE( ,
)EE, -
{FF 
ifGG 
(GG 
TableRowGG  
.GG  !
PolygonStringGG! .
!=GG/ 1
nullGG2 6
)GG6 7
{HH 
TableRowII  
.II  !
PolygonII! (
=II) *!
SqlGeographyConverterII+ @
.II@ A 
StringToSqlGeographyIIA U
(IIU V
TableRowIIV ^
.II^ _
PolygonStringII_ l
)IIl m
;IIm n
}JJ 
}KK 
ifMM 
(MM 
TableRowMM 
.MM 
PolygonStringMM *
==MM+ -
nullMM. 2
)MM2 3
{NN 
ifOO 
(OO 
TableRowOO  
.OO  !
PolygonOO! (
!=OO) +
nullOO, 0
)OO0 1
{PP 
TableRowQQ  
.QQ  !
PolygonStringQQ! .
=QQ/ 0
TableRowQQ1 9
.QQ9 :
PolygonQQ: A
.QQA B
ToStringQQB J
(QQJ K
)QQK L
;QQL M
}RR 
}SS 
}TT 
}UU 	
}VV 
}WW ˝j
ÉD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\GIS\GeometryTypeConverter.cs
	namespace 	
Infoline
 
. 
GIS 
{ 
public 

enum 
GeometryType 
{ 
[		 	
Description			 
(		 
$str		 
)		 
]		 
Null

 
=

 
$num

 
,

 
[ 	
Description	 
( 
$str 
) 
] 
Point 
= 
$num 
, 
[ 	
Description	 
( 
$str !
)! "
]" #
PolyLine 
= 
$num 
, 
[ 	
Description	 
( 
$str 
) 
]  
Polygon 
= 
$num 
, 
[ 	
Description	 
( 
$str !
)! "
]" #

MultiPoint 
= 
$num 
, 
[ 	
Description	 
( 
$str 
) 
] 
PointZ 
= 
$num 
, 
[ 	
Description	 
( 
$str !
)! "
]" #
	PolyLineZ 
= 
$num 
, 
[ 	
Description	 
( 
$str 
) 
]  
PolygonZ 
= 
$num 
, 
[!! 	
Description!!	 
(!! 
$str!! 
)!! 
]!! 
MultiPointZ"" 
="" 
$num"" 
,"" 
[$$ 	
Description$$	 
($$ 
$str$$ !
)$$! "
]$$" #
PointM%% 
=%% 
$num%% 
,%% 
['' 	
Description''	 
('' 
$str'' &
)''& '
]''' (
	PolyLineM(( 
=(( 
$num(( 
,(( 
[** 	
Description**	 
(** 
$str** #
)**# $
]**$ %
PolygonM++ 
=++ 
$num++ 
,++ 
[-- 	
Description--	 
(-- 
$str-- !
)--! "
]--" #
MultiPointM.. 
=.. 
$num.. 
,.. 
[00 	
Description00	 
(00 
$str00 %
)00% &
]00& '
CircularString11 
=11 
$num11 
,11 
[33 	
Description33	 
(33 
$str33 $
)33$ %
]33% &
CompoundCurve44 
=44 
$num44 
,44 
[66 	
Description66	 
(66 
$str66 #
)66# $
]66$ %
CurvePolygon77 
=77 
$num77 
,77 
[99 	
Description99	 
(99 
$str99 )
)99) *
]99* +
GeometryCollection:: 
=:: 
$num:: 
,::  
}== 
publicAA 

classAA !
GeometryTypeConverterAA &
{BB 
publicDD 
staticDD 
stringDD '
GeometryTypeStringConverterDD 8
(DD8 9
stringDD9 ?
itemDD@ D
)DDD E
{EE 	
ifGG 
(GG 
itemGG 
==GG 
EnumsPropertiesGG '
.GG' ('
GetDescriptionFromEnumValueGG( C
(GGC D
GeometryTypeGGD P
.GGP Q
CircularStringGGQ _
)GG_ `
)GG` a
{HH 
returnII 
$strII '
;II' (
}JJ 
elseKK 
ifKK 
(KK 
itemKK 
==KK 
EnumsPropertiesKK ,
.KK, -'
GetDescriptionFromEnumValueKK- H
(KKH I
GeometryTypeKKI U
.KKU V
PointKKV [
)KK[ \
||KK] _
itemKK` d
==KKe g
EnumsPropertiesKKh w
.KKw x(
GetDescriptionFromEnumValue	KKx ì
(
KKì î
GeometryType
KKî †
.
KK† °
PointZ
KK° ß
)
KKß ®
||
KK© ´
item
KK¨ ∞
==
KK± ≥
EnumsProperties
KK¥ √
.
KK√ ƒ)
GetDescriptionFromEnumValue
KKƒ ﬂ
(
KKﬂ ‡
GeometryType
KK‡ Ï
.
KKÏ Ì
MultiPointZ
KKÌ ¯
)
KK¯ ˘
)
KK˘ ˙
{LL 
returnMM 
$strMM 
;MM 
}NN 
elseOO 
ifOO 
(OO 
itemOO 
==OO 
EnumsPropertiesOO ,
.OO, -'
GetDescriptionFromEnumValueOO- H
(OOH I
GeometryTypeOOI U
.OOU V
PolyLineOOV ^
)OO^ _
||OO` b
itemOOc g
==OOh j
EnumsPropertiesOOk z
.OOz {(
GetDescriptionFromEnumValue	OO{ ñ
(
OOñ ó
GeometryType
OOó £
.
OO£ §
	PolyLineZ
OO§ ≠
)
OO≠ Æ
)
OOÆ Ø
{PP 
returnQQ 
$strQQ #
;QQ# $
}RR 
elseSS 
ifSS 
(SS 
itemSS 
==SS 
EnumsPropertiesSS ,
.SS, -'
GetDescriptionFromEnumValueSS- H
(SSH I
GeometryTypeSSI U
.SSU V
PolygonSSV ]
)SS] ^
||SS_ a
itemSSb f
==SSg i
EnumsPropertiesSSj y
.SSy z(
GetDescriptionFromEnumValue	SSz ï
(
SSï ñ
GeometryType
SSñ ¢
.
SS¢ £
PolygonZ
SS£ ´
)
SS´ ¨
)
SS¨ ≠
{TT 
returnUU 
$strUU  
;UU  !
}VV 
elseWW 
ifWW 
(WW 
itemWW 
==WW 
EnumsPropertiesWW ,
.WW, -'
GetDescriptionFromEnumValueWW- H
(WWH I
GeometryTypeWWI U
.WWU V
PolygonMWWV ^
)WW^ _
)WW_ `
{XX 
returnYY 
$strYY %
;YY% &
}ZZ 
else\\ 
if\\ 
(\\ 
item\\ 
==\\ 
EnumsProperties\\ ,
.\\, -'
GetDescriptionFromEnumValue\\- H
(\\H I
GeometryType\\I U
.\\U V

MultiPoint\\V `
)\\` a
||\\b d
item\\e i
==\\j l
EnumsProperties\\m |
.\\| }(
GetDescriptionFromEnumValue	\\} ò
(
\\ò ô
GeometryType
\\ô •
.
\\• ¶
PointM
\\¶ ¨
)
\\¨ ≠
||
\\Æ ∞
item
\\± µ
==
\\∂ ∏
EnumsProperties
\\π »
.
\\» …)
GetDescriptionFromEnumValue
\\… ‰
(
\\‰ Â
GeometryType
\\Â Ò
.
\\Ò Ú
MultiPointM
\\Ú ˝
)
\\˝ ˛
)
\\˛ ˇ
{]] 
return^^ 
$str^^ #
;^^# $
}__ 
else`` 
if`` 
(`` 
item`` 
==`` 
EnumsProperties`` ,
.``, -'
GetDescriptionFromEnumValue``- H
(``H I
GeometryType``I U
.``U V
	PolyLineM``V _
)``_ `
)``a b
{aa 
returnbb 
$strbb (
;bb( )
}cc 
elseee 
ifee 
(ee 
itemee 
==ee 
EnumsPropertiesee ,
.ee, -'
GetDescriptionFromEnumValueee- H
(eeH I
GeometryTypeeeI U
.eeU V
CompoundCurveeeV c
)eec d
)eed e
{ff 
returngg 
$strgg &
;gg& '
}hh 
elseii 
ifii 
(ii 
itemii 
==ii 
EnumsPropertiesii ,
.ii, -'
GetDescriptionFromEnumValueii- H
(iiH I
GeometryTypeiiI U
.iiU V
CurvePolygoniiV b
)iib c
)iic d
{jj 
returnkk 
$strkk %
;kk% &
}ll 
elsemm 
ifmm 
(mm 
itemmm 
==mm 
EnumsPropertiesmm ,
.mm, -'
GetDescriptionFromEnumValuemm- H
(mmH I
GeometryTypemmI U
.mmU V
GeometryCollectionmmV h
)mmh i
)mmi j
{nn 
returnoo 
$stroo +
;oo+ ,
}pp 
elseqq 
{qq 
returnrr 
stringrr 
.rr 
Emptyrr #
;rr# $
}ss 
}uu 	
publicww 
staticww 
GeometryTypeww "+
GetSTGeometryTypeToGeometryTypeww# B
(wwB C
stringwwC I
sTGeometryTypewwJ X
)wwX Y
{xx 	
ifyy 
(yy 
sTGeometryTypeyy 
.yy 
ToUpperyy &
(yy& '
)yy' (
==yy) +
$stryy, 3
||yy4 6
sTGeometryTypeyy7 E
.yyE F
ToLoweryyF M
(yyM N
)yyN O
==yyP R
$stryyS Z
)yyZ [
returnzz 
GeometryTypezz #
.zz# $
Pointzz$ )
;zz) *
else|| 
if|| 
(|| 
sTGeometryType|| #
.||# $
ToUpper||$ +
(||+ ,
)||, -
==||. 0
$str||1 =
||||> @
sTGeometryType||A O
.||O P
ToLower||P W
(||W X
)||X Y
==||Z \
$str||] i
)||i j
return}} 
GeometryType}} #
.}}# $
PolyLine}}$ ,
;}}, -
else 
if 
( 
sTGeometryType #
.# $
ToUpper$ +
(+ ,
), -
==. 0
$str1 :
): ;
return
ÄÄ 
GeometryType
ÄÄ #
.
ÄÄ# $
Polygon
ÄÄ$ +
;
ÄÄ+ ,
else
ÇÇ 
if
ÇÇ 
(
ÇÇ 
sTGeometryType
ÇÇ #
.
ÇÇ# $
ToUpper
ÇÇ$ +
(
ÇÇ+ ,
)
ÇÇ, -
==
ÇÇ. 0
$str
ÇÇ1 =
||
ÇÇ> @
sTGeometryType
ÇÇA O
.
ÇÇO P
ToLower
ÇÇP W
(
ÇÇW X
)
ÇÇX Y
==
ÇÇZ \
$str
ÇÇ] i
)
ÇÇi j
return
ÉÉ 
GeometryType
ÉÉ #
.
ÉÉ# $

MultiPoint
ÉÉ$ .
;
ÉÉ. /
else
ÖÖ 
if
ÖÖ 
(
ÖÖ 
sTGeometryType
ÖÖ #
.
ÖÖ# $
ToUpper
ÖÖ$ +
(
ÖÖ+ ,
)
ÖÖ, -
==
ÖÖ. 0
$str
ÖÖ1 B
||
ÖÖC E
sTGeometryType
ÖÖF T
.
ÖÖT U
ToLower
ÖÖU \
(
ÖÖ\ ]
)
ÖÖ] ^
==
ÖÖ_ a
$str
ÖÖb s
)
ÖÖs t
return
ÜÜ 
GeometryType
ÜÜ #
.
ÜÜ# $
	PolyLineM
ÜÜ$ -
;
ÜÜ- .
else
àà 
if
àà 
(
àà 
sTGeometryType
àà #
.
àà# $
ToUpper
àà$ +
(
àà+ ,
)
àà, -
==
àà. 0
$str
àà1 ?
||
àà@ B
sTGeometryType
ààC Q
.
ààQ R
ToLower
ààR Y
(
ààY Z
)
ààZ [
==
àà\ ^
$str
àà_ m
)
ààm n
return
ââ 
GeometryType
ââ #
.
ââ# $
PolygonM
ââ$ ,
;
ââ, -
else
ãã 
if
ãã 
(
ãã 
sTGeometryType
ãã #
.
ãã# $
ToUpper
ãã$ +
(
ãã+ ,
)
ãã, -
==
ãã. 0
$str
ãã1 A
||
ããB D
sTGeometryType
ããE S
.
ããS T
ToLower
ããT [
(
ãã[ \
)
ãã\ ]
==
ãã^ `
$str
ããa q
)
ããq r
return
åå 
GeometryType
åå #
.
åå# $
CircularString
åå$ 2
;
åå2 3
else
éé 
if
éé 
(
éé 
sTGeometryType
éé #
.
éé# $
ToUpper
éé$ +
(
éé+ ,
)
éé, -
==
éé. 0
$str
éé1 @
||
ééA C
sTGeometryType
ééD R
.
ééR S
ToLower
ééS Z
(
ééZ [
)
éé[ \
==
éé] _
$str
éé` o
)
ééo p
return
èè 
GeometryType
èè #
.
èè# $
CompoundCurve
èè$ 1
;
èè1 2
else
ëë 
if
ëë 
(
ëë 
sTGeometryType
ëë #
.
ëë# $
ToUpper
ëë$ +
(
ëë+ ,
)
ëë, -
==
ëë. 0
$str
ëë1 ?
||
ëë@ B
sTGeometryType
ëëC Q
.
ëëQ R
ToLower
ëëR Y
(
ëëY Z
)
ëëZ [
==
ëë\ ^
$str
ëë_ m
)
ëëm n
return
íí 
GeometryType
íí #
.
íí# $
CurvePolygon
íí$ 0
;
íí0 1
else
îî 
if
îî 
(
îî 
sTGeometryType
îî #
.
îî# $
ToUpper
îî$ +
(
îî+ ,
)
îî, -
==
îî. 0
$str
îî1 E
||
îîF H
sTGeometryType
îîI W
.
îîW X
ToLower
îîX _
(
îî_ `
)
îî` a
==
îîb d
$str
îîe y
)
îîy z
return
ïï 
GeometryType
ïï #
.
ïï# $ 
GeometryCollection
ïï$ 6
;
ïï6 7
else
ññ 
return
óó 
GeometryType
óó #
.
óó# $
Null
óó$ (
;
óó( )
}
òò 	
}
ôô 
}öö ï
ÇD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\GIS\ProjecttionConverter.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
GIS  
{		 
public

 

class

 
ProjectionConverter

 $
{ 
public 
void 
	Converter 
( 
string $
path% )
)) *
{ 	
} 	
} 
} ¨;
ÖD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\GIS\ShapeFileLib\ShapeCheck.cs
	namespace		 	
Infoline		
 
.		 
GIS		 
{

 
public 

struct 

ShapeCheck 
{ 
public 
static 
string 
CheckPolygonString /
(/ 0
string0 6

LineString7 A
,A B
	ShapeTypeC L
	shapeTypeM V
)V W
{ 	

LineString 
= 

LineString #
.# $
Trim$ (
(( )
)) *
;* +
string 
result 
= 
null  
;  !
switch 
( 
	shapeType 
) 
{ 
case 
	ShapeType 
. 
Point $
:$ %
result 
= 
string #
.# $
Format$ *
(* +
$str+ :
,: ;

LineString< F
)F G
;G H
break 
; 
case 
	ShapeType 
. 
PolyLine '
:' (
result 
= 
string #
.# $
Format$ *
(* +
$str+ ?
,? @

LineStringA K
)K L
;L M
break 
; 
case 
	ShapeType 
. 
Polygon &
:& '
result 
= 
string #
.# $
Format$ *
(* +
$str+ >
,> ?

LineString@ J
)J K
;K L
break 
; 
case 
	ShapeType 
. 

MultiPoint )
:) *
result 
= 
string #
.# $
Format$ *
(* +
$str+ >
,> ?

LineString@ J
)J K
;K L
break   
;   
case!! 
	ShapeType!! 
.!! 
PointZ!! %
:!!% &
result"" 
="" 
string"" #
.""# $
Format""$ *
(""* +
$str""+ :
,"": ;

LineString""< F
)""F G
;""G H
break## 
;## 
case$$ 
	ShapeType$$ 
.$$ 
	PolyLineZ$$ (
:$$( )
result%% 
=%% 
string%% #
.%%# $
Format%%$ *
(%%* +
$str%%+ ?
,%%? @

LineString%%A K
)%%K L
;%%L M
break&& 
;&& 
case'' 
	ShapeType'' 
.'' 
PolygonZ'' '
:''' (
result(( 
=(( 
string(( #
.((# $
Format(($ *
(((* +
$str((+ >
,((> ?

LineString((@ J
)((J K
;((K L
break)) 
;)) 
case** 
	ShapeType** 
.** 
MultiPointZ** *
:*** +
result++ 
=++ 
string++ #
.++# $
Format++$ *
(++* +
$str+++ >
,++> ?

LineString++@ J
)++J K
;++K L
break,, 
;,, 
case-- 
	ShapeType-- 
.-- 
PointM-- %
:--% &
result.. 
=.. 
string.. #
...# $
Format..$ *
(..* +
$str..+ :
,..: ;

LineString..< F
)..F G
;..G H
break// 
;// 
case00 
	ShapeType00 
.00 
	PolyLineM00 (
:00( )
result11 
=11 
string11 #
.11# $
Format11$ *
(11* +
$str11+ ?
,11? @

LineString11A K
)11K L
;11L M
break22 
;22 
default33 
:33 
break44 
;44 
}55 
return77 
result77 
;77 
}99 	
public;; 
static;; 
SqlGeography;; "'
ConvertStringToSqlGeography;;# >
(;;> ?
string;;? E

stringLine;;F P
,;;P Q
	ShapeType;;R [
	shapeType;;\ e
);;e f
{<< 	
try== 
{>> 

stringLine?? 
=?? 
CheckPolygonString?? /
(??/ 0

stringLine??0 :
,??: ;
	shapeType??< E
)??E F
;??F G
SqlGeography@@ 
sqlGeog@@ $
=@@% &
new@@' *
SqlGeography@@+ 7
(@@7 8
)@@8 9
;@@9 :
sqlGeogAA 
=AA 
SqlGeographyAA &
.AA& '
STGeomFromTextAA' 5
(AA5 6
newAA6 9
SystemAA: @
.AA@ A
DataAAA E
.AAE F
SqlTypesAAF N
.AAN O
SqlCharsAAO W
(AAW X

stringLineAAX b
)AAb c
,AAc d
$numAAe i
)AAi j
;AAj k
ifBB 
(BB 
sqlGeogBB 
.BB 
	STIsValidBB %
(BB% &
)BB& '
.BB' (
IsFalseBB( /
)BB/ 0
returnCC 
nullCC 
;CC  
ifEE 
(EE 
(EE 
	shapeTypeEE 
==EE !
	ShapeTypeEE" +
.EE+ ,
PolygonEE, 3
||EE4 6
	shapeTypeEE7 @
==EEA C
	ShapeTypeEED M
.EEM N
PolygonZEEN V
)EEV W
&&EEX Z
sqlGeogEE[ b
.EEb c
EnvelopeAngleEEc p
(EEp q
)EEq r
>=EEs u
$numEEv x
)EEx y
sqlGeogFF 
=FF 
sqlGeogFF %
.FF% &
ReorientObjectFF& 4
(FF4 5
)FF5 6
;FF6 7
returnGG 
sqlGeogGG 
;GG 
}HH 
catchII 
(II 
	ExceptionII 
exII 
)II  
{JJ 
varKK 
dKK 
=KK 
exKK 
;KK 
returnLL 
nullLL 
;LL 
}MM 
}NN 	
publicPP 
staticPP 
objectPP "
CheckDbfFieldTypeValuePP 3
(PP3 4
stringPP4 :
valuePP; @
,PP@ A
DbfFieldTypePPB N
	fieldTypePPO X
)PPX Y
{QQ 	
varRR 
_valueRR 
=RR 
valueRR 
.RR 
TrimRR #
(RR# $
)RR$ %
;RR% &
ifSS 
(SS 
_valueSS 
!=SS 
nullSS 
&&SS !
_valueSS" (
!=SS) +
$strSS, .
)SS. /
{TT 
ifUU 
(UU 
ShapeConverterUU "
.UU" #(
ConvertShapeTypeToCSharpTypeUU# ?
(UU? @
	fieldTypeUU@ I
)UUI J
==UUK M
typeofUUN T
(UUT U
DateTimeUUU ]
)UU] ^
)UU^ _
{VV 
returnWW 
ShapeConverterWW )
.WW) **
ConvertShapeFileDateToDateTimeWW* H
(WWH I
_valueWWI O
)WWO P
;WWP Q
}XX 
elseYY 
returnZZ 
_valueZZ !
;ZZ! "
}[[ 
else\\ 
return]] 
_value]] 
;]] 
}^^ 	
}__ 
}`` åè
âD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\GIS\ShapeFileLib\ShapeConverter.cs
	namespace 	
Infoline
 
. 
GIS 
{		 
public

 

struct

 
ShapeConverter

  
{ 
public 
static 
GeometryType "*
ConvertShapeTypeToGeometryType# A
(A B
	ShapeTypeB K
	shapeTypeL U
)U V
{ 	
if 
( 
	shapeType 
== 
	ShapeType &
.& '
Point' ,
), -
return 
GeometryType #
.# $
Point$ )
;) *
else 
if 
( 
	shapeType 
== !
	ShapeType" +
.+ ,
PolyLine, 4
)4 5
return 
GeometryType #
.# $
PolyLine$ ,
;, -
else 
if 
( 
	shapeType 
== !
	ShapeType" +
.+ ,
Polygon, 3
)3 4
return 
GeometryType #
.# $
Polygon$ +
;+ ,
else 
if 
( 
	shapeType 
== !
	ShapeType" +
.+ ,

MultiPoint, 6
)6 7
return 
GeometryType #
.# $

MultiPoint$ .
;. /
else 
if 
( 
	shapeType 
== !
	ShapeType" +
.+ ,
MultiPointZ, 7
)7 8
return 
GeometryType #
.# $
MultiPointZ$ /
;/ 0
else 
if 
( 
	shapeType 
== !
	ShapeType" +
.+ ,
PointZ, 2
)2 3
return 
GeometryType #
.# $
PointZ$ *
;* +
else   
if   
(   
	shapeType   
==   !
	ShapeType  " +
.  + ,
	PolyLineZ  , 5
)  5 6
return!! 
GeometryType!! #
.!!# $
	PolyLineZ!!$ -
;!!- .
else## 
if## 
(## 
	shapeType## 
==## !
	ShapeType##" +
.##+ ,
PointM##, 2
)##2 3
return$$ 
GeometryType$$ #
.$$# $
PointM$$$ *
;$$* +
else&& 
if&& 
(&& 
	shapeType&& 
==&& !
	ShapeType&&" +
.&&+ ,
PolygonZ&&, 4
)&&4 5
return'' 
GeometryType'' #
.''# $
PolygonZ''$ ,
;'', -
else)) 
if)) 
()) 
	shapeType)) 
==)) !
	ShapeType))" +
.))+ ,
	PolyLineM)), 5
)))5 6
return** 
GeometryType** #
.**# $
	PolyLineM**$ -
;**- .
else,, 
return-- 
GeometryType-- #
.--# $
Null--$ (
;--( )
}// 	
public11 
static11 
	ShapeType11 *
ConvertGeometryTypeToShapeType11  >
(11> ?
GeometryType11? K
geometryType11L X
)11X Y
{22 	
if33 
(33 
geometryType33 
==33 
GeometryType33  ,
.33, -

MultiPoint33- 7
)337 8
return44 
	ShapeType44  
.44  !

MultiPoint44! +
;44+ ,
else66 
if66 
(66 
geometryType66 !
==66" $
GeometryType66% 1
.661 2
MultiPointZ662 =
)66= >
return77 
	ShapeType77  
.77  !
MultiPointZ77! ,
;77, -
else99 
if99 
(99 
geometryType99 !
==99" $
GeometryType99% 1
.991 2
Point992 7
)997 8
return:: 
	ShapeType::  
.::  !
Point::! &
;::& '
else<< 
if<< 
(<< 
geometryType<< !
==<<" $
GeometryType<<% 1
.<<1 2
PointM<<2 8
)<<8 9
return== 
	ShapeType==  
.==  !
PointM==! '
;==' (
else?? 
if?? 
(?? 
geometryType?? !
==??" $
GeometryType??% 1
.??1 2
PointZ??2 8
)??8 9
return@@ 
	ShapeType@@  
.@@  !
PointZ@@! '
;@@' (
elseBB 
ifBB 
(BB 
geometryTypeBB !
==BB" $
GeometryTypeBB% 1
.BB1 2
PolygonBB2 9
)BB9 :
returnCC 
	ShapeTypeCC  
.CC  !
PolygonCC! (
;CC( )
elseEE 
ifEE 
(EE 
geometryTypeEE !
==EE" $
GeometryTypeEE% 1
.EE1 2
PolygonZEE2 :
)EE: ;
returnFF 
	ShapeTypeFF  
.FF  !
PolygonZFF! )
;FF) *
elseHH 
ifHH 
(HH 
geometryTypeHH !
==HH" $
GeometryTypeHH% 1
.HH1 2
PolyLineHH2 :
)HH: ;
returnII 
	ShapeTypeII  
.II  !
PolyLineII! )
;II) *
elseKK 
ifKK 
(KK 
geometryTypeKK !
==KK" $
GeometryTypeKK% 1
.KK1 2
	PolyLineMKK2 ;
)KK; <
returnLL 
	ShapeTypeLL  
.LL  !
PolyLineLL! )
;LL) *
elseNN 
ifNN 
(NN 
geometryTypeNN !
==NN" $
GeometryTypeNN% 1
.NN1 2
	PolyLineZNN2 ;
)NN; <
returnOO 
	ShapeTypeOO  
.OO  !
PolyLineOO! )
;OO) *
elsePP 
returnQQ 
	ShapeTypeQQ  
.QQ  !
	NullShapeQQ! *
;QQ* +
}SS 	
publicUU 
staticUU 
TypeUU (
ConvertShapeTypeToCSharpTypeUU 7
(UU7 8
DbfFieldTypeUU8 D
dbfFieldTypeUUE Q
)UUQ R
{VV 	
ifWW 
(WW 
dbfFieldTypeWW 
==WW 
DbfFieldTypeWW  ,
.WW, -
BinaryWW- 3
)WW3 4
returnXX 
typeofXX 
(XX 
boolXX "
)XX" #
;XX# $
elseYY 
ifYY 
(YY 
dbfFieldTypeYY !
==YY" $
DbfFieldTypeYY% 1
.YY1 2
	CharacterYY2 ;
)YY; <
returnZZ 
typeofZZ 
(ZZ 
stringZZ $
)ZZ$ %
;ZZ% &
else[[ 
if[[ 
([[ 
dbfFieldType[[ !
==[[" $
DbfFieldType[[% 1
.[[1 2
Date[[2 6
)[[6 7
return\\ 
typeof\\ 
(\\ 
DateTime\\ &
)\\& '
;\\' (
else]] 
if]] 
(]] 
dbfFieldType]] !
==]]" $
DbfFieldType]]% 1
.]]1 2
FloatingPoint]]2 ?
)]]? @
return^^ 
typeof^^ 
(^^ 
float^^ #
)^^# $
;^^$ %
else__ 
if__ 
(__ 
dbfFieldType__ !
==__" $
DbfFieldType__% 1
.__1 2
General__2 9
)__9 :
return`` 
typeof`` 
(`` 
string`` $
)``$ %
;``% &
elseaa 
ifaa 
(aa 
dbfFieldTypeaa !
==aa" $
DbfFieldTypeaa% 1
.aa1 2
Logicalaa2 9
)aa9 :
returnbb 
typeofbb 
(bb 
bytebb "
)bb" #
;bb# $
elsecc 
ifcc 
(cc 
dbfFieldTypecc !
==cc" $
DbfFieldTypecc% 1
.cc1 2
Numbercc2 8
)cc8 9
returndd 
typeofdd 
(dd 
doubledd $
)dd$ %
;dd% &
elseee 
ifee 
(ee 
dbfFieldTypeee !
==ee" $
DbfFieldTypeee% 1
.ee1 2
Noneee2 6
)ee6 7
returnff 
typeofff 
(ff 
stringff $
)ff$ %
;ff% &
elsegg 
returnhh 
typeofhh 
(hh 
stringhh $
)hh$ %
;hh% &
}ii 	
publickk 
statickk 
stringkk *
ConvertShapeFileDateToDateTimekk ;
(kk; <
stringkk< B
itemkkC G
)kkG H
{ll 	
trymm 
{nn 
returnoo 
newoo 
DateTimeoo #
(oo# $
Convertpp 
.pp 
ToInt32pp #
(pp# $
itempp$ (
.pp( )
	Substringpp) 2
(pp2 3
$numpp3 4
,pp4 5
$numpp6 7
)pp7 8
)pp8 9
,pp9 :
Convertqq 
.qq 
ToInt32qq #
(qq# $
itemqq$ (
.qq( )
	Substringqq) 2
(qq2 3
$numqq3 4
,qq4 5
$numqq6 7
)qq7 8
)qq8 9
,qq9 :
Convertrr 
.rr 
ToInt32rr #
(rr# $
itemrr$ (
.rr( )
	Substringrr) 2
(rr2 3
$numrr3 4
,rr4 5
$numrr6 7
)rr7 8
)rr8 9
)ss 
.ss 
ToStringss 
(ss 
)ss  
;ss  !
}tt 
catchuu 
{vv 
returnww 
nullww 
;ww 
}xx 
}yy 	
public{{ 
static{{ 
List{{ 
<{{ 
EGIS{{ 
.{{  
ShapeFileLib{{  ,
.{{, -
PointD{{- 3
[{{3 4
]{{4 5
>{{5 6
GetPointDList{{7 D
({{D E
GeometryObject{{E S
geometryObject{{T b
){{b c
{|| 	
var}} 
pdk}} 
=}} 
new}} 
List}} 
<}} 
EGIS}} #
.}}# $
ShapeFileLib}}$ 0
.}}0 1
PointD}}1 7
[}}7 8
]}}8 9
>}}9 :
(}}: ;
)}}; <
;}}< =
foreach 
( 
var 
item 
in  
geometryObject! /
./ 0
	TableRows0 9
)9 :
{
ÄÄ 
if
ÅÅ 
(
ÅÅ 
item
ÅÅ 
.
ÅÅ 
Polygon
ÅÅ  
!=
ÅÅ! #
null
ÅÅ$ (
)
ÅÅ( )
{
ÇÇ 
var
ÉÉ 

pointDlist
ÉÉ "
=
ÉÉ# $#
SqlGeographyConverter
ÉÉ% :
.
ÉÉ: ;!
SQLGeographyToWGS84
ÉÉ; N
(
ÉÉN O
item
ÉÉO S
.
ÉÉS T
Polygon
ÉÉT [
)
ÉÉ[ \
;
ÉÉ\ ]
pdk
ÑÑ 
.
ÑÑ 
Add
ÑÑ 
(
ÑÑ "
ConvertWGS84ToPointD
ÑÑ 0
(
ÑÑ0 1

pointDlist
ÑÑ1 ;
)
ÑÑ; <
)
ÑÑ< =
;
ÑÑ= >
}
ÖÖ 
}
ÜÜ 
return
áá 
pdk
áá 
;
áá 
}
àà 	
public
ää 
static
ää 
EGIS
ää 
.
ää 
ShapeFileLib
ää '
.
ää' (
PointD
ää( .
[
ää. /
]
ää/ 0"
ConvertWGS84ToPointD
ää1 E
(
ääE F
WGS84
ääF K
[
ääK L
]
ääL M
	pointList
ääN W
)
ääW X
{
ãã 	
var
åå 

pointdList
åå 
=
åå 
new
åå  
List
åå! %
<
åå% &
EGIS
åå& *
.
åå* +
ShapeFileLib
åå+ 7
.
åå7 8
PointD
åå8 >
>
åå> ?
(
åå? @
)
åå@ A
;
ååA B
foreach
çç 
(
çç 
var
çç 
item
çç 
in
çç  
	pointList
çç! *
)
çç* +
{
éé 

pointdList
èè 
.
èè 
Add
èè 
(
èè 
new
èè "
EGIS
èè# '
.
èè' (
ShapeFileLib
èè( 4
.
èè4 5
PointD
èè5 ;
{
èè< =
X
èè> ?
=
èè@ A
item
èèB F
.
èèF G
	Longitude
èèG P
,
èèP Q
Y
èèR S
=
èèT U
item
èèV Z
.
èèZ [
Latitude
èè[ c
}
èèd e
)
èèe f
;
èèf g
}
êê 
return
ëë 

pointdList
ëë 
.
ëë 
ToArray
ëë %
(
ëë% &
)
ëë& '
;
ëë' (
}
íí 	
public
îî 
static
îî  
DbfFieldProperties
îî (,
ConvertSharpTypeToDbfFieldType
îî) G
(
îîG H
Type
îîH L
	sharpType
îîM V
,
îîV W
int
îîX [
length
îî\ b
)
îîb c
{
ïï 	
if
ññ 
(
ññ 
	sharpType
ññ 
==
ññ 
typeof
ññ #
(
ññ# $
int
ññ$ '
)
ññ' (
||
ññ) +
	sharpType
ññ, 5
==
ññ6 8
typeof
ññ9 ?
(
ññ? @
Int16
ññ@ E
)
ññE F
||
ññG I
	sharpType
ññJ S
==
ññT V
typeof
ññW ]
(
ññ] ^
Int32
ññ^ c
)
ññc d
||
ññe g
	sharpType
ññh q
==
ññr t
typeof
ññu {
(
ññ{ |
Int64ññ| Å
)ññÅ Ç
)ññÇ É
return
óó 
new
óó  
DbfFieldProperties
óó -
{
òò 
	FieldType
ôô 
=
ôô 
DbfFieldType
ôô  ,
.
ôô, -
Number
ôô- 3
,
ôô3 4
DecimalCount
öö  
=
öö! "
$num
öö# $
,
öö$ %
FieldLength
õõ 
=
õõ  !
$num
õõ" $
}
úú 
;
úú 
else
ûû 
if
ûû 
(
ûû 
	sharpType
ûû 
==
ûû !
typeof
ûû" (
(
ûû( )
double
ûû) /
)
ûû/ 0
)
ûû0 1
return
üü 
new
üü  
DbfFieldProperties
üü -
{
†† 
	FieldType
°° 
=
°° 
DbfFieldType
°°  ,
.
°°, -
Number
°°- 3
,
°°3 4
DecimalCount
¢¢  
=
¢¢! "
$num
¢¢# $
,
¢¢$ %
FieldLength
££ 
=
££  !
$num
££" $
}
§§ 
;
§§ 
else
•• 
if
•• 
(
•• 
	sharpType
•• 
==
•• !
typeof
••" (
(
••( )
float
••) .
)
••. /
)
••/ 0
return
¶¶ 
new
¶¶  
DbfFieldProperties
¶¶ -
{
ßß 
	FieldType
®® 
=
®® 
DbfFieldType
®®  ,
.
®®, -
Number
®®- 3
,
®®3 4
DecimalCount
©©  
=
©©! "
$num
©©# $
,
©©$ %
FieldLength
™™ 
=
™™  !
$num
™™" $
}
´´ 
;
´´ 
else
¨¨ 
if
¨¨ 
(
¨¨ 
	sharpType
¨¨ 
==
¨¨ !
typeof
¨¨" (
(
¨¨( )
double
¨¨) /
)
¨¨/ 0
)
¨¨0 1
return
≠≠ 
new
≠≠  
DbfFieldProperties
≠≠ -
{
ÆÆ 
	FieldType
ØØ 
=
ØØ 
DbfFieldType
ØØ  ,
.
ØØ, -
Number
ØØ- 3
,
ØØ3 4
DecimalCount
∞∞  
=
∞∞! "
$num
∞∞# $
,
∞∞$ %
FieldLength
±± 
=
±±  !
$num
±±" $
}
≤≤ 
;
≤≤ 
else
≥≥ 
if
≥≥ 
(
≥≥ 
	sharpType
≥≥ 
==
≥≥ !
typeof
≥≥" (
(
≥≥( )
bool
≥≥) -
)
≥≥- .
)
≥≥. /
return
¥¥ 
new
¥¥  
DbfFieldProperties
¥¥ -
{
µµ 
	FieldType
∂∂ 
=
∂∂ 
DbfFieldType
∂∂  ,
.
∂∂, -
Binary
∂∂- 3
,
∂∂3 4
DecimalCount
∑∑  
=
∑∑! "
$num
∑∑# $
,
∑∑$ %
FieldLength
∏∏ 
=
∏∏  !
$num
∏∏" $
}
ππ 
;
ππ 
else
∫∫ 
if
∫∫ 
(
∫∫ 
	sharpType
∫∫ 
==
∫∫ !
typeof
∫∫" (
(
∫∫( )
DateTime
∫∫) 1
)
∫∫1 2
)
∫∫2 3
return
ªª 
new
ªª  
DbfFieldProperties
ªª -
{
ºº 
	FieldType
ΩΩ 
=
ΩΩ 
DbfFieldType
ΩΩ  ,
.
ΩΩ, -
Date
ΩΩ- 1
,
ΩΩ1 2
DecimalCount
ææ  
=
ææ! "
$num
ææ# $
,
ææ$ %
FieldLength
øø 
=
øø  !
$num
øø" $
}
¿¿ 
;
¿¿ 
else
¡¡ 
if
¡¡ 
(
¡¡ 
	sharpType
¡¡ 
==
¡¡ !
typeof
¡¡" (
(
¡¡( )
string
¡¡) /
)
¡¡/ 0
||
¡¡1 3
	sharpType
¡¡4 =
==
¡¡> @
typeof
¡¡A G
(
¡¡G H
String
¡¡H N
)
¡¡N O
)
¡¡O P
return
¬¬ 
new
¬¬  
DbfFieldProperties
¬¬ -
{
√√ 
	FieldType
ƒƒ 
=
ƒƒ 
DbfFieldType
ƒƒ  ,
.
ƒƒ, -
	Character
ƒƒ- 6
,
ƒƒ6 7
DecimalCount
≈≈  
=
≈≈! "
$num
≈≈# $
,
≈≈$ %
FieldLength
∆∆ 
=
∆∆  !
$num
∆∆" $
}
«« 
;
«« 
else
»» 
return
…… 
new
……  
DbfFieldProperties
…… -
{
   
	FieldType
ÀÀ 
=
ÀÀ 
DbfFieldType
ÀÀ  ,
.
ÀÀ, -
	Character
ÀÀ- 6
,
ÀÀ6 7
DecimalCount
ÃÃ  
=
ÃÃ! "
$num
ÃÃ# $
,
ÃÃ$ %
FieldLength
ÕÕ 
=
ÕÕ  !
$num
ÕÕ" $
}
ŒŒ 
;
ŒŒ 
}
œœ 	
}
–– 
}—— ¥
áD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\GIS\ShapeFileLib\ShapeFileLib.cs
	namespace

 	
Infoline


 
.

 
GIS

 
{ 
public 

class 
ShapeFileLibrary !
:" #
IGeometryFile$ 1
{ 
private 
string 
_path 
{ 
get "
;" #
set$ '
;' (
}) *
private 
string 
	_fileName  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 
ShapeFileLibrary 
(  
string  &
path' +
,+ ,
string- 3
fileName4 <
)< =
{ 	
this 
. 
_path 
= 
path 
; 
this 
. 
	_fileName 
= 
fileName %
;% &
} 	
public 
GeometryObject 
ReadData &
(& '
)' (
{ 	
var 
	shapeRead 
= 
new 
	ShapeRead  )
() *
_path* /
)/ 0
;0 1
return 
	shapeRead 
. !
ReadDataFromShapeFile 2
(2 3
)3 4
;4 5
} 	
public 
bool 
	WriteData 
( 
GeometryObject ,
geometryObject- ;
); <
{ 	
var   

writeShape   
=   
new    

ShapeWrite  ! +
(  + ,
this  , 0
.  0 1
_path  1 6
,  6 7
this  8 <
.  < =
	_fileName  = F
)  F G
;  G H
return!! 

writeShape!! 
.!! 
WriteDataShapeFile!! 0
(!!0 1
geometryObject!!1 ?
)!!? @
;!!@ A
}"" 	
}$$ 
public&& 

class&& 
DbfFieldProperties&& #
{'' 
public(( 
int(( 
DecimalCount(( 
{((  !
get((" %
;((% &
set((' *
;((* +
}((, -
public)) 
int)) 
FieldLength)) 
{))  
get))! $
;))$ %
set))& )
;))) *
}))+ ,
public** 
DbfFieldType** 
	FieldType** %
{**& '
get**( +
;**+ ,
set**- 0
;**0 1
}**2 3
}++ 
public-- 

class-- 
GeometryOfShapeFile-- $
{.. 
public00 
PointD00 
[00 
]00 
	pointList00 !
{00" #
get00$ '
;00' (
set00) ,
;00, -
}00. /
public11 
	ShapeType11 
	shapeType11 "
{11# $
get11% (
;11( )
set11* -
;11- .
}11/ 0
public22 
string22 

LineString22  
{22! "
get22# &
;22& '
set22( +
;22+ ,
}22- .
public33 
	IGeometry33 
LineGeometry33 %
{33& '
get33( +
;33+ ,
set33- 0
;330 1
}332 3
public44 
int44 
Record44 
{44 
get44 
;44  
set44! $
;44$ %
}44& '
}55 
}66 Ëz
ÑD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\GIS\ShapeFileLib\ShapeRead.cs
	namespace 	
Infoline
 
. 
GIS 
{ 
public 

class 
	ShapeRead 
{ 
public 
string 
_path 
; 
public 
	ShapeRead 
( 
string 
path  $
)$ %
{ 	
this 
. 
_path 
= 
path 
; 
} 	
public 
GeometryObject !
ReadDataFromShapeFile 3
(3 4
)4 5
{ 	
var 
	dbfReader 
= 
new 
	DbfReader  )
() *
_path* /
)/ 0
;0 1
var 

fieldDescs 
= 
	dbfReader &
.& '
DbfRecordHeader' 6
.6 7 
GetFieldDescriptions7 K
(K L
)L M
;M N
	ShapeFile 
sf 
= 
new 
	ShapeFile (
(( )
_path) .
). /
;/ 0
var 
polygons 
= "
ReadLinesFromShapeFile 1
(1 2
)2 3
;3 4
var 
	tableRows 
= 
new 
List  $
<$ %
TableRow% -
>- .
(. /
)/ 0
;0 1
for 
( 
int 
record 
= 
$num 
;  
record! '
<( )
	dbfReader* 3
.3 4
DbfRecordHeader4 C
.C D
RecordCountD O
;O P
recordQ W
++W Y
)Y Z
{   
try!! 
{"" 
var## 
TableColoumbsList## )
=##* +
new##, /
List##0 4
<##4 5
TableColoumbs##5 B
>##B C
(##C D
)##D E
;##E F
for$$ 
($$ 
int$$ 
i$$ 
=$$  
$num$$! "
;$$" #
i$$$ %
<$$& '

fieldDescs$$( 2
.$$2 3
Count$$3 8
($$8 9
)$$9 :
;$$: ;
i$$< =
++$$= ?
)$$? @
{%% 
TableColoumbsList&& )
.&&) *
Add&&* -
(&&- .
new'' 
TableColoumbs''  -
{(( 

FieldIndex))  *
=))+ ,
i))- .
,)). /
Lenght**  &
=**' (

fieldDescs**) 3
[**3 4
i**4 5
]**5 6
.**6 7
FieldLength**7 B
,**B C
	FieldName++  )
=++* +

fieldDescs++, 6
[++6 7
i++7 8
]++8 9
.++9 :
	FieldName++: C
,++C D
	SharpType,,  )
=,,* +
ShapeConverter,,, :
.,,: ;(
ConvertShapeTypeToCSharpType,,; W
(,,W X

fieldDescs,,X b
[,,b c
i,,c d
],,d e
.,,e f
	FieldType,,f o
),,o p
,,,p q
Value--  %
=--& '

ShapeCheck--( 2
.--2 3"
CheckDbfFieldTypeValue--3 I
(--I J
	dbfReader--J S
.--S T
	GetFields--T ]
(--] ^
record--^ d
)--d e
[--e f
i--f g
]--g h
,--h i

fieldDescs--j t
[--t u
i--u v
]--v w
.--w x
	FieldType	--x Å
)
--Å Ç
,
--Ç É
}.. 
).. 
;.. 
}// 
	tableRows00 
.00 
Add00 !
(00! "
new00" %
TableRow00& .
{11 
GeometryType22 $
=22% &
ShapeConverter22' 5
.225 6*
ConvertShapeTypeToGeometryType226 T
(22T U
sf22U W
.22W X
	ShapeType22X a
)22a b
,22b c
idx33 
=33 
Guid33 "
.33" #
NewGuid33# *
(33* +
)33+ ,
,33, -
TableColoumbs44 %
=44& '
TableColoumbsList44( 9
.449 :
ToArray44: A
(44A B
)44B C
,44C D
PolygonString55 %
=55& '
polygons55( 0
[550 1
record551 7
]557 8
.558 9
LineGeometry559 E
.55E F
ToString55F N
(55N O
)55O P
,55P Q
Polygon66 
=66  !
polygons66" *
[66* +
record66+ 1
]661 2
.662 3
LineGeometry663 ?
}77 
)77 
;77 
}88 
catch99 
{:: 
continue;; 
;;; 
}<< 
}== 
var?? 
generalObject?? 
=?? 
new??  #
GeometryObject??$ 2
(??2 3
)??3 4
;??4 5
generalObject@@ 
.@@ 
	TableName@@ #
=@@$ %
Path@@& *
.@@* +
GetFileName@@+ 6
(@@6 7
_path@@7 <
)@@< =
.@@= >
Replace@@> E
(@@E F
$str@@F L
,@@L M
$str@@N P
)@@P Q
;@@Q R
generalObjectAA 
.AA 
GeometryTypeAA &
=AA' (
ShapeConverterAA) 7
.AA7 8*
ConvertShapeTypeToGeometryTypeAA8 V
(AAV W
sfAAW Y
.AAY Z
	ShapeTypeAAZ c
)AAc d
;AAd e
generalObjectBB 
.BB 
	TableNameBB #
=BB$ %
PathBB& *
.BB* +
GetFileNameBB+ 6
(BB6 7
_pathBB7 <
)BB< =
.BB= >
ReplaceBB> E
(BBE F
$strBBF L
,BBL M
$strBBN P
)BBP Q
;BBQ R
generalObjectCC 
.CC 

FieldNamesCC $
=CC% &
	dbfReaderCC' 0
.CC0 1
GetFieldNamesCC1 >
(CC> ?
)CC? @
;CC@ A
generalObjectDD 
.DD 
	TableRowsDD #
=DD$ %
	tableRowsDD& /
.DD/ 0
ToArrayDD0 7
(DD7 8
)DD8 9
;DD9 :
returnFF 
generalObjectFF  
;FF  !
}GG 	
publicII 
ListII 
<II 
DbfFieldDescII  
>II  !
ReadDbfFieldDescII" 2
(II2 3
GeometryObjectII3 A
geometryObjectIIB P
)IIP Q
{JJ 	
varKK 

fieldDescsKK 
=KK 
newKK  
ListKK! %
<KK% &
DbfFieldDescKK& 2
>KK2 3
(KK3 4
)KK4 5
;KK5 6
foreachMM 
(MM 
varMM 
itemMM 
inMM  
geometryObjectMM! /
.MM/ 0
	TableRowsMM0 9
.MM9 :
FirstOrDefaultMM: H
(MMH I
)MMI J
.MMJ K
TableColoumbsMMK X
)MMX Y
{NN 
ifOO 
(OO 
itemOO 
.OO 
	FieldNameOO "
!=OO# %
$strOO& 4
)OO4 5
{PP 
varQQ 
dbfFieldPropertiesQQ *
=QQ+ ,
ShapeConverterQQ- ;
.QQ; <*
ConvertSharpTypeToDbfFieldTypeQQ< Z
(QQZ [
itemQQ[ _
.QQ_ `
	SharpTypeQQ` i
,QQi j
itemQQk o
.QQo p
LenghtQQp v
)QQv w
;QQw x
intRR 
recordOffsetRR $
=RR% &
$numRR' (
;RR( )

fieldDescsSS 
.SS 
AddSS "
(SS" #
newSS# &
DbfFieldDescSS' 3
{TT 
	FieldNameUU !
=UU" #
itemUU$ (
.UU( )
	FieldNameUU) 2
,UU2 3
	FieldTypeVV !
=VV" #
dbfFieldPropertiesVV$ 6
.VV6 7
	FieldTypeVV7 @
,VV@ A
FieldLengthWW #
=WW$ %
dbfFieldPropertiesWW& 8
.WW8 9
FieldLengthWW9 D
,WWD E
RecordOffsetXX $
=XX% &
recordOffsetXX' 3
,XX3 4
DecimalCountYY $
=YY% &
dbfFieldPropertiesYY' 9
.YY9 :
DecimalCountYY: F
}ZZ 
)ZZ 
;ZZ 
recordOffset[[  
+=[[! #
dbfFieldProperties[[$ 6
.[[6 7
FieldLength[[7 B
;[[B C
}\\ 
}]] 
return__ 

fieldDescs__ 
;__ 
}`` 	
privatebb 
GeometryOfShapeFilebb #
[bb# $
]bb$ %"
ReadLinesFromShapeFilebb& <
(bb< =
)bb= >
{cc 	
vardd 
pathdd 
=dd 
_pathdd 
.dd 
Replacedd $
(dd$ %
$strdd% *
,dd* +
$strdd, 1
)dd1 2
;dd2 3
EGISee 
.ee 
ShapeFileLibee 
.ee 
	ShapeFileee '
sfee( *
=ee+ ,
newee- 0
EGISee1 5
.ee5 6
ShapeFileLibee6 B
.eeB C
	ShapeFileeeC L
(eeL M
patheeM Q
)eeQ R
;eeR S
EGISff 
.ff 
ShapeFileLibff 
.ff 
ShapeFileEnumeratorff 1
sfEnumff2 8
=ff9 :
sfff; =
.ff= >"
GetShapeFileEnumeratorff> T
(ffT U
)ffU V
;ffV W
intgg 
recordIndexgg 
=gg 
$numgg 
;gg  
varhh 
lineListhh 
=hh 
newhh 
Listhh #
<hh# $
GeometryOfShapeFilehh$ 7
>hh7 8
(hh8 9
)hh9 :
;hh: ;
whilejj 
(jj 
sfEnumjj 
.jj 
MoveNextjj "
(jj" #
)jj# $
)jj$ %
{kk 
tryll 
{mm 
varnn 
linenn 
=nn 
newnn "
GeometryOfShapeFilenn# 6
(nn6 7
)nn7 8
;nn8 9
Systemoo 
.oo 
Collectionsoo &
.oo& '
ObjectModeloo' 2
.oo2 3
ReadOnlyCollectionoo3 E
<ooE F
PointDooF L
[ooL M
]ooM N
>ooN O
pointRecordsooP \
=oo] ^
sfEnumoo_ e
.ooe f
Currentoof m
;oom n
foreachrr 
(rr 
PointDrr #
[rr# $
]rr$ %
ptsrr& )
inrr* ,
pointRecordsrr- 9
)rr9 :
{ss 
linett 
.tt 

LineStringtt '
=tt( )
$strtt* ,
;tt, -
foruu 
(uu 
intuu  
nuu! "
=uu# $
$numuu% &
;uu& '
nuu( )
<uu* +
ptsuu, /
.uu/ 0
Lengthuu0 6
;uu6 7
++uu8 :
nuu: ;
)uu; <
{vv 
ifww 
(ww  
nww  !
>ww" #
$numww$ %
)ww% &
linexx  $
.xx$ %

LineStringxx% /
+=xx0 2
$strxx3 6
;xx6 7
lineyy  
.yy  !

LineStringyy! +
+=yy, .
ptsyy/ 2
[yy2 3
nyy3 4
]yy4 5
.yy5 6
Xyy6 7
.yy7 8
ToStringyy8 @
(yy@ A
)yyA B
.yyB C
ReplaceyyC J
(yyJ K
$stryyK N
,yyN O
$stryyP S
)yyS T
+yyU V
$stryyW Z
+yy[ \
ptsyy] `
[yy` a
nyya b
]yyb c
.yyc d
Yyyd e
.yye f
ToStringyyf n
(yyn o
)yyo p
.yyp q
Replaceyyq x
(yyx y
$stryyy |
,yy| }
$str	yy~ Å
)
yyÅ Ç
;
yyÇ É
}zz 
line{{ 
.{{ 
	pointList{{ &
={{' (
pts{{) ,
;{{, -
var|| 
lineStringCheck|| +
=||, -

ShapeCheck||. 8
.||8 9
CheckPolygonString||9 K
(||K L
line||L P
.||P Q

LineString||Q [
,||[ \
sf||] _
.||_ `
	ShapeType||` i
)||i j
;||j k
line}} 
.}} 
LineGeometry}} )
=}}* +!
SqlGeographyConverter}}, A
.}}A B 
StringToSqlGeography}}B V
(}}V W
lineStringCheck}}W f
)}}f g
;}}g h
} 
line
ÅÅ 
.
ÅÅ 
Record
ÅÅ 
=
ÅÅ  !
recordIndex
ÅÅ" -
;
ÅÅ- .
line
ÇÇ 
.
ÇÇ 
	shapeType
ÇÇ "
=
ÇÇ# $
sf
ÇÇ% '
.
ÇÇ' (
	ShapeType
ÇÇ( 1
;
ÇÇ1 2
lineList
ÉÉ 
.
ÉÉ 
Add
ÉÉ  
(
ÉÉ  !
line
ÉÉ! %
)
ÉÉ% &
;
ÉÉ& '
++
ÑÑ 
recordIndex
ÑÑ !
;
ÑÑ! "
}
ÖÖ 
catch
áá 
{
àà 
continue
ââ 
;
ââ 
}
ää 
}
ãã 
sfEnum
çç 
.
çç 
Dispose
çç 
(
çç 
)
çç 
;
çç 
sf
éé 
.
éé 
Close
éé 
(
éé 
)
éé 
;
éé 
sf
èè 
.
èè 
Dispose
èè 
(
èè 
)
èè 
;
èè 
return
êê 
lineList
êê 
.
êê 
ToArray
êê #
(
êê# $
)
êê$ %
;
êê% &
}
ëë 	
public
îî 
List
îî 
<
îî 
string
îî 
[
îî 
]
îî 
>
îî 
ReadFieldData
îî +
(
îî+ ,
GeometryObject
îî, :
geometryObject
îî; I
)
îîI J
{
ïï 	
var
ññ 
strArrayList
ññ 
=
ññ 
new
ññ "
List
ññ# '
<
ññ' (
string
ññ( .
[
ññ. /
]
ññ/ 0
>
ññ0 1
(
ññ1 2
)
ññ2 3
;
ññ3 4
foreach
óó 
(
óó 
var
óó 
tableRow
óó !
in
óó" $
geometryObject
óó% 3
.
óó3 4
	TableRows
óó4 =
)
óó= >
{
òò 
var
ôô 
strList
ôô 
=
ôô 
new
ôô !
List
ôô" &
<
ôô& '
string
ôô' -
>
ôô- .
(
ôô. /
)
ôô/ 0
;
ôô0 1
foreach
öö 
(
öö 
var
öö 
tableColoumb
öö )
in
öö* ,
tableRow
öö- 5
.
öö5 6
TableColoumbs
öö6 C
)
ööC D
{
õõ 
if
úú 
(
úú 
tableColoumb
úú $
.
úú$ %
	FieldName
úú% .
!=
úú/ 1
$str
úú2 @
)
úú@ A
{
ùù 
strList
ûû 
.
ûû  
Add
ûû  #
(
ûû# $
tableColoumb
ûû$ 0
.
ûû0 1
Value
ûû1 6
.
ûû6 7
ToString
ûû7 ?
(
ûû? @
)
ûû@ A
)
ûûA B
;
ûûB C
}
üü 
}
†† 
strArrayList
°° 
.
°° 
Add
°°  
(
°°  !
strList
°°! (
.
°°( )
ToArray
°°) 0
(
°°0 1
)
°°1 2
)
°°2 3
;
°°3 4
}
¢¢ 
return
££ 
strArrayList
££ 
;
££  
}
§§ 	
}
•• 
}ßß ¢/
ÖD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\GIS\ShapeFileLib\ShapeWrite.cs
	namespace

 	
Infoline


 
.

 
GIS

 
{ 
public 

class 

ShapeWrite 
{ 
private 
string 
_path 
{ 
get "
;" #
set$ '
;' (
}) *
private 
string 
	_fileName  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 

ShapeWrite 
( 
string  
path! %
,% &
string' -
fileName. 6
)6 7
{ 	
this 
. 
_path 
= 
path 
; 
this 
. 
	_fileName 
= 
fileName %
;% &
} 	
public 
bool 
WriteDataShapeFile &
(& '
GeometryObject' 5
geometryObject6 D
)D E
{ 	
var 
	shapeRead 
= 
new 
	ShapeRead  )
() *
_path* /
)/ 0
;0 1
var 

fieldDescs 
= 
	shapeRead &
.& '
ReadDbfFieldDesc' 7
(7 8
geometryObject8 F
)F G
;G H
var 
	pointList 
= 
ShapeConverter *
.* +
GetPointDList+ 8
(8 9
geometryObject9 G
)G H
;H I
var 
	fieldData 
= 
	shapeRead %
.% &
ReadFieldData& 3
(3 4
geometryObject4 B
)B C
;C D
return 
CreateShapeFiles #
(# $
ShapeConverter$ 2
.2 3*
ConvertGeometryTypeToShapeType3 Q
(Q R
geometryObjectR `
.` a
GeometryTypea m
)m n
,n o
	pointListp y
,y z

fieldDescs	{ Ö
.
Ö Ü
ToArray
Ü ç
(
ç é
)
é è
,
è ê
	fieldData
ë ö
)
ö õ
;
õ ú
} 	
private!! 
bool!! 
CreateShapeFiles!! %
(!!% &
	ShapeType!!& /
	shapeType!!0 9
,!!9 :
List!!; ?
<!!? @
EGIS!!@ D
.!!D E
ShapeFileLib!!E Q
.!!Q R
PointD!!R X
[!!X Y
]!!Y Z
>!!Z [
arrpt!!\ a
,!!a b
DbfFieldDesc!!c o
[!!o p
]!!p q

fieldDescs!!r |
,!!| }
List	!!~ Ç
<
!!Ç É
string
!!É â
[
!!â ä
]
!!ä ã
>
!!ã å

fieldNames
!!ç ó
)
!!ó ò
{"" 	
try## 
{$$ 
var%% 
newPath%% 
=%% 
_path%% #
+%%$ %
$str%%& *
+%%+ ,
	_fileName%%- 6
;%%6 7
if&& 
(&& 
!&& 
	Directory&& 
.&& 
Exists&& %
(&&% &
newPath&&& -
)&&- .
)&&. /
	Directory'' 
.'' 
CreateDirectory'' -
(''- .
newPath''. 5
)''5 6
;''6 7
ShapeFileWriter)) 
sfw))  #
;))# $
sfw** 
=** 
ShapeFileWriter** %
.**% &
CreateWriter**& 2
(**2 3
newPath**3 :
,**: ;
	_fileName**< E
,**E F
	shapeType**G P
,**P Q

fieldDescs**R \
.**\ ]
ToArray**] d
(**d e
)**e f
)**f g
;**g h
int++ 
i++ 
=++ 
$num++ 
;++ 
foreach,, 
(,, 
var,, 
item,, !
in,," $
arrpt,,% *
),,* +
{-- 
sfw.. 
... 
	AddRecord.. !
(..! "
item.." &
,..& '
item..( ,
..., -
Length..- 3
,..3 4

fieldNames..5 ?
[..? @
i..@ A
]..A B
)..B C
;..C D
i// 
++// 
;// 
}00 
sfw11 
.11 
Close11 
(11 
)11 
;11 
var22 
destinationFolder22 %
=22& '
$str22( ;
+22< =
$str22> B
+22C D
	_fileName22E N
+22O P
$str22Q W
;22W X
if44 
(44 
!44 
File44 
.44 
Exists44  
(44  !
destinationFolder44! 2
)442 3
)443 4
ZipFile55 
.55 
CreateFromDirectory55 /
(55/ 0
newPath550 7
,557 8
destinationFolder559 J
)55J K
;55K L
if66 
(66 
!66 
File66 
.66 
Exists66  
(66  !
newPath66! (
+66) *
$str66+ /
+660 1
	_fileName662 ;
+66< =
$str66> D
)66D E
)66E F
	Directory77 
.77 
Move77 "
(77" #
destinationFolder77# 4
,774 5
newPath776 =
+77> ?
$str77@ D
+77E F
	_fileName77G P
+77Q R
$str77S Y
)77Y Z
;77Z [
return88 
true88 
;88 
}99 
catch:: 
(:: 
	Exception:: 
ex:: 
)::  
{;; 
var<< 
k<< 
=<< 
ex<< 
;<< 
return== 
false== 
;== 
}>> 
}?? 	
}@@ 
}AA íG
ÉD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\GIS\SqlGeographyConverter.cs
	namespace 	
Infoline
 
. 
GIS 
{		 
public

 

struct

 !
SqlGeographyConverter

 '
{ 
public 
static 
string 
WGS84ListToString .
(. /
WGS84/ 4
[4 5
]5 6
	WGS84List7 @
)@ A
{ 	
var 
stringBuilder 
= 
new  #
StringBuilder$ 1
(1 2
)2 3
;3 4
foreach 
( 
var 
item 
in  
	WGS84List! *
)* +
{ 
var 
t 
= 
item 
. 
ToString %
(% &
)& '
;' (
stringBuilder 
. 
Append $
($ %
item$ (
.( )
	Longitude) 2
.2 3
ToString3 ;
(; <
)< =
.= >
Replace> E
(E F
$strF I
,I J
$strK N
)N O
+P Q
$strR U
+V W
item$ (
.( )
Latitude) 1
.1 2
ToString2 :
(: ;
); <
.< =
Replace= D
(D E
$strE H
,H I
$strJ M
)M N
+O P
$strQ T
+U V
item$ (
.( )
Altitude) 1
.1 2
ToString2 :
(: ;
); <
.< =
Replace= D
(D E
$strE H
,H I
$strJ M
)M N
+O P
$strQ T
)$ %
;% &
} 
return 
stringBuilder  
.  !
ToString! )
() *
)* +
;+ ,
} 	
public 
static 
WGS84 
[ 
] 
SQLGeographyToWGS84 1
(1 2
	IGeometry2 ;
item< @
)@ A
{ 	
var 
	WGS84List 
= 
new 
List  $
<$ %
WGS84% *
>* +
(+ ,
), -
;- .
if 
( 
item 
. 
	NumPoints 
==  
$num! "
)" #
{   
	WGS84List!! 
.!! 
Add!! 
(!! 
new!! !
WGS84!!" '
{"" 
Latitude## 
=## 
item## #
.### $
Coordinates##$ /
[##/ 0
$num##0 1
]##1 2
.##2 3
Y##3 4
,##4 5
	Longitude$$ 
=$$ 
item$$  $
.$$$ %
Coordinates$$% 0
[$$0 1
$num$$1 2
]$$2 3
.$$3 4
X$$4 5
}&& 
)&& 
;&& 
}'' 
else(( 
{)) 
for** 
(** 
int** 
i** 
=** 
$num** 
;** 
i**  !
<**" #
item**$ (
.**( )
	NumPoints**) 2
;**2 3
i**4 5
++**5 7
)**7 8
{++ 
var,, 
sqlPoint,,  
=,,! "
item,,# '
.,,' (
Coordinates,,( 3
[,,3 4
i,,4 5
],,5 6
;,,6 7
	WGS84List-- 
.-- 
Add-- !
(--! "
new--" %
WGS84--& +
{.. 
Latitude//  
=//! "
sqlPoint//# +
.//+ ,
Y//, -
,//- .
	Longitude00 !
=00" #
sqlPoint00$ ,
.00, -
X00- .
}22 
)22 
;22 
}33 
}44 
return55 
	WGS84List55 
.55 
ToArray55 $
(55$ %
)55% &
;55& '
}66 	
public88 
static88 
	IGeometry88  
StringToSqlGeography88  4
(884 5
string885 ;
item88< @
,88@ A
int88B E
?88E F
srid88G K
=88L M
$num88N R
)88R S
{99 	
if:: 
(:: 
String:: 
.:: 
IsNullOrEmpty:: $
(::$ %
item::% )
)::) *
)::* +
return;; 
null;; 
;;; 
return<<  
CheckStringGeography<< '
(<<' (
item<<( ,
,<<, -
Convert<<. 5
.<<5 6
ToInt32<<6 =
(<<= >
srid<<> B
)<<B C
)<<C D
;<<D E
}== 	
private?? 
static?? 
string?? 
CheckForPolygon?? -
(??- .
string??. 4
item??5 9
)??9 :
{@@ 	
varAA 
itemStrAA 
=AA 
itemAA 
.AA 
ReplaceAA &
(AA& '
$strAA' 3
,AA3 4
$strAA5 7
)AA7 8
.AA8 9
ReplaceAA9 @
(AA@ A
$strAAA E
,AAE F
$strAAG I
)AAI J
.AAJ K
TrimAAK O
(AAO P
)AAP Q
;AAQ R
varBB 
itemArrBB 
=BB 
itemStrBB !
.BB! "
SplitBB" '
(BB' (
$charBB( +
)BB+ ,
.BB, -
ToListBB- 3
(BB3 4
)BB4 5
;BB5 6
ifDD 
(DD 
itemArrDD 
.DD 
FirstOrDefaultDD &
(DD& '
)DD' (
.DD( )
TrimDD) -
(DD- .
)DD. /
!=DD0 2
itemArrDD3 :
.DD: ;
LastOrDefaultDD; H
(DDH I
)DDI J
.DDJ K
TrimDDK O
(DDO P
)DDP Q
)DDQ R
{EE 
returnFF 
$strFF #
+FF$ %
itemStrFF& -
+FF. /
$strFF0 4
+FF5 6
itemArrFF7 >
.FF> ?
FirstOrDefaultFF? M
(FFM N
)FFN O
.FFO P
TrimFFP T
(FFT U
)FFU V
+FFW X
$strFFY ]
;FF] ^
}GG 
elseHH 
{II 
returnJJ 
$strJJ #
+JJ$ %
itemStrJJ& -
+JJ. /
$strJJ0 4
;JJ4 5
}KK 
}MM 	
publicOO 
staticOO 
	IGeometryOO '
GetValidatedGeometryFromStrOO  ;
(OO; <
stringOO< B
itemOOC G
,OOG H
intOOI L
sridOOM Q
=OOR S
$numOOT X
)OOX Y
{PP 	
itemRR 
=RR 
CheckForPolygonRR "
(RR" #
itemRR# '
)RR' (
;RR( )
varSS 
readerSS 
=SS 
newSS 
	WKTReaderSS &
(SS& '
)SS' (
;SS( )
varTT 
sqlGeogTT 
=TT 
readerTT  
.TT  !
ReadTT! %
(TT% &
itemTT& *
)TT* +
;TT+ ,
returnhh 
sqlGeoghh 
;hh 
}ii 	
publicmm 
staticmm 
	IGeometrymm 
CheckSqlGeographymm  1
(mm1 2
	IGeometrymm2 ;
itemmm< @
)mm@ A
{nn 	
ifpp 
(pp 
itempp 
==pp 
nullpp 
||pp 
itempp  $
.pp$ %
IsEmptypp% ,
)pp, -
{qq 
returnrr 
nullrr 
;rr 
}ss 
returnzz 
itemzz 
;zz 
}|| 	
private~~ 
static~~ 
	IGeometry~~   
CheckStringGeography~~! 5
(~~5 6
string~~6 <
item~~= A
,~~A B
int~~C F
srid~~G K
)~~K L
{ 	
try
ÄÄ 
{
ÅÅ 
var
ÉÉ 
reader
ÉÉ 
=
ÉÉ 
new
ÉÉ  
	WKTReader
ÉÉ! *
(
ÉÉ* +
)
ÉÉ+ ,
;
ÉÉ, -
var
ÑÑ 
sqlGeog
ÑÑ 
=
ÑÑ 
reader
ÑÑ $
.
ÑÑ$ %
Read
ÑÑ% )
(
ÑÑ) *
item
ÑÑ* .
)
ÑÑ. /
;
ÑÑ/ 0
if
ÜÜ 
(
ÜÜ 
sqlGeog
ÜÜ 
.
ÜÜ 
IsEmpty
ÜÜ #
)
ÜÜ# $
{
ÜÜ% &
return
ÜÜ' -
null
ÜÜ. 2
;
ÜÜ2 3
}
ÜÜ4 5
return
õõ 
sqlGeog
õõ 
;
õõ 
}
úú 
catch
ùù 
(
ùù 
	Exception
ùù 
ex
ùù 
)
ùù  
{
ûû 
var
üü 
r
üü 
=
üü 
ex
üü 
;
üü 
return
†† 
null
†† 
;
†† 
}
°° 
}
¢¢ 	
}
§§ 
}•• ÷ú
qD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\GIS\UTM.cs
	namespace 	
Infoline
 
. 
GIS 
{ 
public 

class 
UTM 
: 
MapCoordinate $
{		 
public

 
double

 
Zone

 
{

 
get

  
;

  !
set

" %
;

% &
}

' (
public 

Hemisphere 
Hemi 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
WGS84 
ToWGS84 
( 
) 
{ 	
return 
GeoUTMConverter "
." #
ToWGS84# *
(* +
this+ /
)/ 0
;0 1
} 	
public 
override 
string 
ToString '
(' (
)( )
{ 	
return 
string 
. 
Format  
(  !
$str! :
,: ;
Hemi< @
,@ A
ZoneB F
,F G
XH I
,I J
YK L
)L M
;M N
} 	
} 
public 

enum 

Hemisphere 
{ 
Northern 
= 
$num 
, 
Southern 
= 
$num 
} 
class 	
GeoUTMConverter
 
{ 
static   
double   
pi   
=   
Math   
.    
PI    "
;  " #
static!! 
double!! 
sm_a!! 
=!! 
$num!! &
;!!& '
static"" 
double"" 
sm_b"" 
="" 
$num"" (
;""( )
static## 
double## 
UTMScaleFactor## $
=##% &
$num##' -
;##- .
public'' 
static'' 
UTM'' 
ToUTM'' 
(''  
WGS84''  %
coord''& +
)''+ ,
{(( 	
var)) 
utm)) 
=)) 
new)) 
UTM)) 
()) 
))) 
;))  
utm** 
.** 
Zone** 
=** 
Math** 
.** 
Floor** !
(**! "
(**" #
coord**# (
.**( )
	Longitude**) 2
+**3 4
$num**5 :
)**: ;
/**< =
$num**> ?
)**? @
+**A B
$num**C D
;**D E
GeoUTMConverterXY77 
(77 
DegToRad77 &
(77& '
coord77' ,
.77, -
Latitude77- 5
)775 6
,776 7
DegToRad778 @
(77@ A
coord77A F
.77F G
	Longitude77G P
)77P Q
,77Q R
utm77S V
)77V W
;77W X
return88 
utm88 
;88 
}99 	
public:: 
static:: 
UTM:: 
ToUTM:: 
(::  
WGS84::  %
coord::& +
,::+ ,
double::- 3
zone::4 8
)::8 9
{;; 	
var<< 
utm<< 
=<< 
new<< 
UTM<< 
(<< 
)<< 
;<<  
utm== 
.== 
Zone== 
=== 
zone== 
;== 
GeoUTMConverterXY>> 
(>> 
DegToRad>> &
(>>& '
coord>>' ,
.>>, -
Latitude>>- 5
)>>5 6
,>>6 7
DegToRad>>8 @
(>>@ A
coord>>A F
.>>F G
	Longitude>>G P
)>>P Q
,>>Q R
utm>>S V
)>>V W
;>>W X
return?? 
utm?? 
;?? 
}@@ 	
publicBB 
staticBB 
WGS84BB 
ToWGS84BB #
(BB# $
UTMBB$ '
utmBB( +
)BB+ ,
{CC 	
doubleDD 
xDD 
=DD 
utmDD 
.DD 
XDD 
,DD 
yDD 
=DD  !
utmDD" %
.DD% &
YDD& '
;DD' (
varEE 
coordEE 
=EE 
newEE 
WGS84EE !
(EE! "
)EE" #
;EE# $
doubleGG 
	cmeridianGG 
;GG 
xII 
-=II 
$numII 
;II 
xJJ 
/=JJ 
UTMScaleFactorJJ 
;JJ  
ifMM 
(MM 
utmMM 
.MM 
HemiMM 
==MM 

HemisphereMM &
.MM& '
SouthernMM' /
)MM/ 0
yNN 
-=NN 
$numNN 
;NN  
yPP 
/=PP 
UTMScaleFactorPP 
;PP  
	cmeridianRR 
=RR 
UTMCentralMeridianRR *
(RR* +
utmRR+ .
.RR. /
ZoneRR/ 3
)RR3 4
;RR4 5
doubleSS 
[SS 
]SS 
latlonSS 
=SS 
MapXYToLatLonSS +
(SS+ ,
xSS, -
,SS- .
ySS/ 0
,SS0 1
	cmeridianSS2 ;
)SS; <
;SS< =
coordUU 
.UU 
LatitudeUU 
=UU 
RadToDegUU %
(UU% &
latlonUU& ,
[UU, -
$numUU- .
]UU. /
)UU/ 0
;UU0 1
coordVV 
.VV 
	LongitudeVV 
=VV 
RadToDegVV &
(VV& '
latlonVV' -
[VV- .
$numVV. /
]VV/ 0
)VV0 1
;VV1 2
returnWW 
coordWW 
;WW 
}XX 	
staticZZ 
doubleZZ 
DegToRadZZ 
(ZZ 
doubleZZ %
degreesZZ& -
)ZZ- .
{[[ 	
return\\ 
(\\ 
degrees\\ 
/\\ 
$num\\ #
*\\$ %
pi\\& (
)\\( )
;\\) *
}]] 	
static__ 
double__ 
RadToDeg__ 
(__ 
double__ %
radians__& -
)__- .
{`` 	
returnaa 
(aa 
radiansaa 
/aa 
piaa  
*aa! "
$numaa# (
)aa( )
;aa) *
}bb 	
staticnn 
doublenn 
ArcLengthOfMeridiannn )
(nn) *
doublenn* 0
phinn1 4
)nn4 5
{oo 	
returnpp 
alphapp 
*pp 
(qq 
phiqq 
+qq 
(qq 
betaqq 
*qq  !
Mathqq" &
.qq& '
Sinqq' *
(qq* +
$numqq+ .
*qq/ 0
phiqq1 4
)qq4 5
)qq5 6
+rr 
(rr 
gammarr 
*rr 
Mathrr #
.rr# $
Sinrr$ '
(rr' (
$numrr( +
*rr, -
phirr. 1
)rr1 2
)rr2 3
+ss 
(ss 
deltass 
*ss 
Mathss #
.ss# $
Sinss$ '
(ss' (
$numss( +
*ss, -
phiss. 1
)ss1 2
)ss2 3
+tt 
(tt 
epsilontt 
*tt  
Mathtt! %
.tt% &
Sintt& )
(tt) *
$numtt* -
*tt. /
phitt0 3
)tt3 4
)tt4 5
)tt5 6
;tt6 7
}uu 	
staticww 
doubleww 
UTMCentralMeridianww (
(ww( )
doubleww) /
zoneww0 4
)ww4 5
{xx 	
returnyy 
(yy 
DegToRadyy 
(yy 
-yy 
$numyy #
+yy$ %
(yy& '
zoneyy' +
*yy, -
$numyy. 1
)yy1 2
)yy2 3
)yy3 4
;yy4 5
}zz 	
static{{ 
double{{ 
n{{ 
,{{ 
alpha_{{ 
,{{  
beta_{{! &
,{{& '
gamma_{{( .
,{{. /
delta_{{0 6
,{{6 7
epsilon_{{8 @
,{{@ A
ep2{{B E
;{{E F
static|| 
double|| 
alpha|| 
,|| 
beta|| !
,||! "
gamma||# (
,||( )
delta||* /
,||/ 0
epsilon||1 8
;||8 9
static}} 
GeoUTMConverter}} 
(}} 
)}}  
{~~ 	
n
ÄÄ 
=
ÄÄ 
(
ÄÄ 
sm_a
ÄÄ 
-
ÄÄ 
sm_b
ÄÄ 
)
ÄÄ 
/
ÄÄ 
(
ÄÄ  !
sm_a
ÄÄ! %
+
ÄÄ& '
sm_b
ÄÄ( ,
)
ÄÄ, -
;
ÄÄ- .
alpha_
ÇÇ 
=
ÇÇ 
(
ÇÇ 
(
ÇÇ 
sm_a
ÇÇ 
+
ÇÇ 
sm_b
ÇÇ "
)
ÇÇ" #
/
ÇÇ$ %
$num
ÇÇ& )
)
ÇÇ) *
*
ÉÉ 
(
ÉÉ 
$num
ÉÉ 
+
ÉÉ 
(
ÉÉ 
Math
ÉÉ 
.
ÉÉ 
Pow
ÉÉ 
(
ÉÉ 
n
ÉÉ  
,
ÉÉ  !
$num
ÉÉ" %
)
ÉÉ% &
/
ÉÉ' (
$num
ÉÉ) *
)
ÉÉ* +
+
ÉÉ, -
(
ÉÉ. /
Math
ÉÉ/ 3
.
ÉÉ3 4
Pow
ÉÉ4 7
(
ÉÉ7 8
n
ÉÉ8 9
,
ÉÉ9 :
$num
ÉÉ; >
)
ÉÉ> ?
/
ÉÉ@ A
$num
ÉÉB D
)
ÉÉD E
)
ÉÉE F
;
ÉÉF G
beta_
ÑÑ 
=
ÑÑ 
(
ÑÑ 
$num
ÑÑ 
*
ÑÑ 
n
ÑÑ 
/
ÑÑ 
$num
ÑÑ "
)
ÑÑ" #
+
ÑÑ$ %
(
ÑÑ& '
-
ÑÑ' (
$num
ÑÑ( ,
*
ÑÑ- .
Math
ÑÑ/ 3
.
ÑÑ3 4
Pow
ÑÑ4 7
(
ÑÑ7 8
n
ÑÑ8 9
,
ÑÑ9 :
$num
ÑÑ; >
)
ÑÑ> ?
/
ÑÑ@ A
$num
ÑÑB F
)
ÑÑF G
+
ÖÖ 
(
ÖÖ 
$num
ÖÖ 
*
ÖÖ 
Math
ÖÖ 
.
ÖÖ 
Pow
ÖÖ  
(
ÖÖ  !
n
ÖÖ! "
,
ÖÖ" #
$num
ÖÖ$ '
)
ÖÖ' (
/
ÖÖ) *
$num
ÖÖ+ 0
)
ÖÖ0 1
;
ÖÖ1 2
gamma_
àà 
=
àà 
(
àà 
$num
àà 
*
àà 
Math
àà !
.
àà! "
Pow
àà" %
(
àà% &
n
àà& '
,
àà' (
$num
àà) ,
)
àà, -
/
àà. /
$num
àà0 4
)
àà4 5
+
ââ 
(
ââ 
-
ââ 
$num
ââ 
*
ââ 
Math
ââ 
.
ââ  
Pow
ââ  #
(
ââ# $
n
ââ$ %
,
ââ% &
$num
ââ' *
)
ââ* +
/
ââ, -
$num
ââ. 2
)
ââ2 3
;
ââ3 4
delta_
åå 
=
åå 
(
åå 
$num
åå 
*
åå 
Math
åå "
.
åå" #
Pow
åå# &
(
åå& '
n
åå' (
,
åå( )
$num
åå* -
)
åå- .
/
åå/ 0
$num
åå1 5
)
åå5 6
+
çç 
(
çç 
-
çç 
$num
çç 
*
çç 
Math
çç  
.
çç  !
Pow
çç! $
(
çç$ %
n
çç% &
,
çç& '
$num
çç( +
)
çç+ ,
/
çç- .
$num
çç/ 4
)
çç4 5
;
çç5 6
epsilon_
êê 
=
êê 
(
êê 
$num
êê 
*
êê  
Math
êê! %
.
êê% &
Pow
êê& )
(
êê) *
n
êê* +
,
êê+ ,
$num
êê- 0
)
êê0 1
/
êê2 3
$num
êê4 9
)
êê9 :
;
êê: ;
ep2
ìì 
=
ìì 
(
ìì 
Math
ìì 
.
ìì 
Pow
ìì 
(
ìì 
sm_a
ìì  
,
ìì  !
$num
ìì" %
)
ìì% &
-
ìì' (
Math
ìì) -
.
ìì- .
Pow
ìì. 1
(
ìì1 2
sm_b
ìì2 6
,
ìì6 7
$num
ìì8 ;
)
ìì; <
)
ìì< =
/
ìì> ?
Math
ìì@ D
.
ììD E
Pow
ììE H
(
ììH I
sm_b
ììI M
,
ììM N
$num
ììO R
)
ììR S
;
ììS T
alpha
ïï 
=
ïï 
(
ïï 
(
ïï 
sm_a
ïï 
+
ïï 
sm_b
ïï !
)
ïï! "
/
ïï# $
$num
ïï% (
)
ïï( )
*
ññ 
(
ññ 
$num
ññ 
+
ññ 
(
ññ 
Math
ññ 
.
ññ 
Pow
ññ 
(
ññ 
n
ññ  
,
ññ  !
$num
ññ" %
)
ññ% &
/
ññ' (
$num
ññ) ,
)
ññ, -
+
ññ. /
(
ññ0 1
Math
ññ1 5
.
ññ5 6
Pow
ññ6 9
(
ññ9 :
n
ññ: ;
,
ññ; <
$num
ññ= @
)
ññ@ A
/
ññB C
$num
ññD H
)
ññH I
)
ññI J
;
ññJ K
beta
ôô 
=
ôô 
(
ôô 
-
ôô 
$num
ôô 
*
ôô 
n
ôô 
/
ôô 
$num
ôô "
)
ôô" #
+
ôô$ %
(
ôô& '
$num
ôô' *
*
ôô+ ,
Math
ôô- 1
.
ôô1 2
Pow
ôô2 5
(
ôô5 6
n
ôô6 7
,
ôô7 8
$num
ôô9 <
)
ôô< =
/
ôô> ?
$num
ôô@ D
)
ôôD E
+
öö 
(
öö 
-
öö 
$num
öö 
*
öö 
Math
öö 
.
öö 
Pow
öö !
(
öö! "
n
öö" #
,
öö# $
$num
öö% (
)
öö( )
/
öö* +
$num
öö, 0
)
öö0 1
;
öö1 2
gamma
ùù 
=
ùù 
(
ùù 
$num
ùù 
*
ùù 
Math
ùù  
.
ùù  !
Pow
ùù! $
(
ùù$ %
n
ùù% &
,
ùù& '
$num
ùù( +
)
ùù+ ,
/
ùù- .
$num
ùù/ 3
)
ùù3 4
+
ûû 
(
ûû 
-
ûû 
$num
ûû 
*
ûû 
Math
ûû 
.
ûû  
Pow
ûû  #
(
ûû# $
n
ûû$ %
,
ûû% &
$num
ûû' *
)
ûû* +
/
ûû, -
$num
ûû. 2
)
ûû2 3
;
ûû3 4
delta
°° 
=
°° 
(
°° 
-
°° 
$num
°° 
*
°° 
Math
°° !
.
°°! "
Pow
°°" %
(
°°% &
n
°°& '
,
°°' (
$num
°°) ,
)
°°, -
/
°°. /
$num
°°0 4
)
°°4 5
+
¢¢ 
(
¢¢ 
$num
¢¢ 
*
¢¢ 
Math
¢¢ 
.
¢¢  
Pow
¢¢  #
(
¢¢# $
n
¢¢$ %
,
¢¢% &
$num
¢¢' *
)
¢¢* +
/
¢¢, -
$num
¢¢. 3
)
¢¢3 4
;
¢¢4 5
epsilon
•• 
=
•• 
(
•• 
$num
•• 
*
•• 
Math
•• #
.
••# $
Pow
••$ '
(
••' (
n
••( )
,
••) *
$num
••+ .
)
••. /
/
••0 1
$num
••2 7
)
••7 8
;
••8 9
}
ßß 	
static
®® 
double
®® 
FootpointLatitude
®® '
(
®®' (
double
®®( .
y
®®/ 0
)
®®0 1
{
©© 	
var
´´ 
y_
´´ 
=
´´ 
y
´´ 
/
´´ 
alpha_
´´ 
;
´´  
return
ÆÆ 
y_
ÆÆ 
+
ÆÆ 
(
ÆÆ 
beta_
ÆÆ 
*
ÆÆ  
Math
ÆÆ! %
.
ÆÆ% &
Sin
ÆÆ& )
(
ÆÆ) *
$num
ÆÆ* -
*
ÆÆ. /
y_
ÆÆ0 2
)
ÆÆ2 3
)
ÆÆ3 4
+
ØØ 
(
ØØ 
gamma_
ØØ 
*
ØØ 
Math
ØØ  
.
ØØ  !
Sin
ØØ! $
(
ØØ$ %
$num
ØØ% (
*
ØØ) *
y_
ØØ+ -
)
ØØ- .
)
ØØ. /
+
∞∞ 
(
∞∞ 
delta_
∞∞ 
*
∞∞ 
Math
∞∞  
.
∞∞  !
Sin
∞∞! $
(
∞∞$ %
$num
∞∞% (
*
∞∞) *
y_
∞∞+ -
)
∞∞- .
)
∞∞. /
+
±± 
(
±± 
epsilon_
±± 
*
±± 
Math
±± "
.
±±" #
Sin
±±# &
(
±±& '
$num
±±' *
*
±±+ ,
y_
±±- /
)
±±/ 0
)
±±0 1
;
±±1 2
}
≥≥ 	
static
µµ 
double
µµ 
[
µµ 
]
µµ 
MapLatLonToXY
µµ %
(
µµ% &
double
µµ& ,
phi
µµ- 0
,
µµ0 1
double
µµ2 8
lambda
µµ9 ?
,
µµ? @
double
µµA G
lambda0
µµH O
)
µµO P
{
∂∂ 	
double
∑∑ 
[
∑∑ 
]
∑∑ 
xy
∑∑ 
=
∑∑ 
new
∑∑ 
double
∑∑ $
[
∑∑$ %
$num
∑∑% &
]
∑∑& '
;
∑∑' (
double
ππ 
N
ππ 
,
ππ 
nu2
ππ 
,
ππ 
t
ππ 
,
ππ 
t2
ππ  
,
ππ  !
l
ππ" #
;
ππ# $
double
ªª 
l3coef
ªª 
,
ªª 
l4coef
ªª !
,
ªª! "
l5coef
ªª# )
,
ªª) *
l6coef
ªª+ 1
,
ªª1 2
l7coef
ªª3 9
,
ªª9 :
l8coef
ªª; A
;
ªªA B
double
ΩΩ 
tmp
ΩΩ 
;
ΩΩ 
var
ææ 
cosphi
ææ 
=
ææ 
Math
ææ 
.
ææ 
Cos
ææ !
(
ææ! "
phi
ææ" %
)
ææ% &
;
ææ& '
nu2
¬¬ 
=
¬¬ 
ep2
¬¬ 
*
¬¬ 
cosphi
¬¬ 
*
¬¬  
cosphi
¬¬  &
;
¬¬& '
N
∆∆ 
=
∆∆ 
(
∆∆ 
sm_a
∆∆ 
*
∆∆ 
sm_a
∆∆ 
)
∆∆ 
/
∆∆ 
(
∆∆  !
sm_b
∆∆! %
*
∆∆& '
Math
∆∆( ,
.
∆∆, -
Sqrt
∆∆- 1
(
∆∆1 2
$num
∆∆2 3
+
∆∆4 5
nu2
∆∆6 9
)
∆∆9 :
)
∆∆: ;
;
∆∆; <
t
ÃÃ 
=
ÃÃ 
Math
ÃÃ 
.
ÃÃ 
Tan
ÃÃ 
(
ÃÃ 
phi
ÃÃ 
)
ÃÃ 
;
ÃÃ 
t2
ŒŒ 
=
ŒŒ 
t
ŒŒ 
*
ŒŒ 
t
ŒŒ 
;
ŒŒ 
var
œœ 
t3
œœ 
=
œœ 
t2
œœ 
*
œœ 
t
œœ 
;
œœ 
var
–– 
t4
–– 
=
–– 
t3
–– 
*
–– 
t
–– 
;
–– 
tmp
—— 
=
—— 
t3
—— 
-
—— 
Math
—— 
.
—— 
Pow
—— 
(
——  
t
——  !
,
——! "
$num
——# &
)
——& '
;
——' (
l
‘‘ 
=
‘‘ 
lambda
‘‘ 
-
‘‘ 
lambda0
‘‘  
;
‘‘  !
l3coef
€€ 
=
€€ 
$num
€€ 
-
€€ 
t2
€€ 
+
€€ 
nu2
€€  #
;
€€# $
l4coef
›› 
=
›› 
$num
›› 
-
›› 
t2
›› 
+
›› 
$num
››  !
*
››" #
nu2
››$ '
+
››( )
$num
››* -
*
››. /
(
››0 1
nu2
››1 4
*
››5 6
nu2
››7 :
)
››: ;
;
››; <
l5coef
ﬂﬂ 
=
ﬂﬂ 
$num
ﬂﬂ 
-
ﬂﬂ 
$num
ﬂﬂ 
*
ﬂﬂ  !
t2
ﬂﬂ" $
+
ﬂﬂ% &
t4
ﬂﬂ' )
+
ﬂﬂ* +
$num
ﬂﬂ, 0
*
ﬂﬂ1 2
nu2
ﬂﬂ3 6
-
‡‡ 
$num
‡‡ 
*
‡‡ 
t2
‡‡ 
*
‡‡ 
nu2
‡‡ !
;
‡‡! "
l6coef
‚‚ 
=
‚‚ 
$num
‚‚ 
-
‚‚ 
$num
‚‚  
*
‚‚! "
t2
‚‚# %
+
‚‚& '
t4
‚‚( *
+
‚‚+ ,
$num
‚‚- 2
*
‚‚3 4
nu2
‚‚5 8
-
„„ 
$num
„„ 
*
„„ 
t2
„„ 
*
„„ 
nu2
„„ "
;
„„" #
l7coef
ÂÂ 
=
ÂÂ 
$num
ÂÂ 
-
ÂÂ 
$num
ÂÂ !
*
ÂÂ" #
t2
ÂÂ$ &
+
ÂÂ' (
$num
ÂÂ) .
*
ÂÂ/ 0
t4
ÂÂ1 3
-
ÂÂ4 5
t3
ÂÂ6 8
;
ÂÂ8 9
l8coef
ÊÊ 
=
ÊÊ 
$num
ÊÊ 
-
ÊÊ 
$num
ÊÊ $
*
ÊÊ% &
t2
ÊÊ' )
+
ÊÊ* +
$num
ÊÊ, 1
*
ÊÊ2 3
t4
ÊÊ3 5
-
ÊÊ6 7
t3
ÊÊ8 :
;
ÊÊ: ;
xy
ÈÈ 
[
ÈÈ 
$num
ÈÈ 
]
ÈÈ 
=
ÈÈ 
N
ÈÈ 
*
ÈÈ 
cosphi
ÈÈ 
*
ÈÈ  
l
ÈÈ! "
+
ÍÍ 
(
ÍÍ 
N
ÍÍ 
/
ÍÍ 
$num
ÍÍ 
*
ÍÍ 
Math
ÍÍ !
.
ÍÍ! "
Pow
ÍÍ" %
(
ÍÍ% &
cosphi
ÍÍ& ,
,
ÍÍ, -
$num
ÍÍ. 1
)
ÍÍ1 2
*
ÍÍ3 4
l3coef
ÍÍ5 ;
*
ÍÍ< =
Math
ÍÍ> B
.
ÍÍB C
Pow
ÍÍC F
(
ÍÍF G
l
ÍÍG H
,
ÍÍH I
$num
ÍÍJ M
)
ÍÍM N
)
ÍÍN O
+
ÎÎ 
(
ÎÎ 
N
ÎÎ 
/
ÎÎ 
$num
ÎÎ 
*
ÎÎ 
Math
ÎÎ #
.
ÎÎ# $
Pow
ÎÎ$ '
(
ÎÎ' (
cosphi
ÎÎ( .
,
ÎÎ. /
$num
ÎÎ0 3
)
ÎÎ3 4
*
ÎÎ5 6
l5coef
ÎÎ7 =
*
ÎÎ> ?
Math
ÎÎ@ D
.
ÎÎD E
Pow
ÎÎE H
(
ÎÎH I
l
ÎÎI J
,
ÎÎJ K
$num
ÎÎL O
)
ÎÎO P
)
ÎÎP Q
+
ÏÏ 
(
ÏÏ 
N
ÏÏ 
/
ÏÏ 
$num
ÏÏ 
*
ÏÏ 
Math
ÏÏ  $
.
ÏÏ$ %
Pow
ÏÏ% (
(
ÏÏ( )
cosphi
ÏÏ) /
,
ÏÏ/ 0
$num
ÏÏ1 4
)
ÏÏ4 5
*
ÏÏ6 7
l7coef
ÏÏ8 >
*
ÏÏ? @
Math
ÏÏA E
.
ÏÏE F
Pow
ÏÏF I
(
ÏÏI J
l
ÏÏJ K
,
ÏÏK L
$num
ÏÏM P
)
ÏÏP Q
)
ÏÏQ R
;
ÏÏR S
xy
ÔÔ 
[
ÔÔ 
$num
ÔÔ 
]
ÔÔ 
=
ÔÔ !
ArcLengthOfMeridian
ÔÔ '
(
ÔÔ' (
phi
ÔÔ( +
)
ÔÔ+ ,
+
 
(
 
t
 
/
 
$num
 
*
 
N
 
*
  
Math
! %
.
% &
Pow
& )
(
) *
cosphi
* 0
,
0 1
$num
2 5
)
5 6
*
7 8
Math
9 =
.
= >
Pow
> A
(
A B
l
B C
,
C D
$num
E H
)
H I
)
I J
+
ÒÒ 
(
ÒÒ 
t
ÒÒ 
/
ÒÒ 
$num
ÒÒ 
*
ÒÒ 
N
ÒÒ 
*
ÒÒ  !
Math
ÒÒ" &
.
ÒÒ& '
Pow
ÒÒ' *
(
ÒÒ* +
cosphi
ÒÒ+ 1
,
ÒÒ1 2
$num
ÒÒ3 6
)
ÒÒ6 7
*
ÒÒ8 9
l4coef
ÒÒ: @
*
ÒÒA B
Math
ÒÒC G
.
ÒÒG H
Pow
ÒÒH K
(
ÒÒK L
l
ÒÒL M
,
ÒÒM N
$num
ÒÒO R
)
ÒÒR S
)
ÒÒS T
+
ÚÚ 
(
ÚÚ 
t
ÚÚ 
/
ÚÚ 
$num
ÚÚ 
*
ÚÚ 
N
ÚÚ  
*
ÚÚ! "
Math
ÚÚ# '
.
ÚÚ' (
Pow
ÚÚ( +
(
ÚÚ+ ,
cosphi
ÚÚ, 2
,
ÚÚ2 3
$num
ÚÚ4 7
)
ÚÚ7 8
*
ÚÚ9 :
l6coef
ÚÚ; A
*
ÚÚB C
Math
ÚÚD H
.
ÚÚH I
Pow
ÚÚI L
(
ÚÚL M
l
ÚÚM N
,
ÚÚN O
$num
ÚÚP S
)
ÚÚS T
)
ÚÚT U
+
ÛÛ 
(
ÛÛ 
t
ÛÛ 
/
ÛÛ 
$num
ÛÛ 
*
ÛÛ  
N
ÛÛ! "
*
ÛÛ# $
Math
ÛÛ% )
.
ÛÛ) *
Pow
ÛÛ* -
(
ÛÛ- .
cosphi
ÛÛ. 4
,
ÛÛ4 5
$num
ÛÛ6 9
)
ÛÛ9 :
*
ÛÛ; <
l8coef
ÛÛ= C
*
ÛÛD E
Math
ÛÛF J
.
ÛÛJ K
Pow
ÛÛK N
(
ÛÛN O
l
ÛÛO P
,
ÛÛP Q
$num
ÛÛR U
)
ÛÛU V
)
ÛÛV W
;
ÛÛW X
return
ˆˆ 
xy
ˆˆ 
;
ˆˆ 
}
˜˜ 	
static
˘˘ 
double
˘˘ 
[
˘˘ 
]
˘˘ 
MapXYToLatLon
˘˘ %
(
˘˘% &
double
˘˘& ,
x
˘˘- .
,
˘˘. /
double
˘˘0 6
y
˘˘7 8
,
˘˘8 9
double
˘˘: @
lambda0
˘˘A H
)
˘˘H I
{
˙˙ 	
double
˚˚ 
[
˚˚ 
]
˚˚ 
latlon
˚˚ 
=
˚˚ 
new
˚˚ !
double
˚˚" (
[
˚˚( )
$num
˚˚) *
]
˚˚* +
;
˚˚+ ,
double
˝˝ 
phif
˝˝ 
,
˝˝ 
Nf
˝˝ 
,
˝˝ 
Nfpow
˝˝ "
,
˝˝" #
nuf2
˝˝$ (
,
˝˝( )
tf
˝˝* ,
,
˝˝, -
tf2
˝˝. 1
,
˝˝1 2
tf4
˝˝3 6
,
˝˝6 7
cf
˝˝8 :
;
˝˝: ;
double
˛˛ 
x1frac
˛˛ 
,
˛˛ 
x2frac
˛˛ !
,
˛˛! "
x3frac
˛˛# )
,
˛˛) *
x4frac
˛˛+ 1
,
˛˛1 2
x5frac
˛˛3 9
,
˛˛9 :
x6frac
˛˛; A
,
˛˛A B
x7frac
˛˛C I
,
˛˛I J
x8frac
˛˛K Q
;
˛˛Q R
double
ˇˇ 
x2poly
ˇˇ 
,
ˇˇ 
x3poly
ˇˇ !
,
ˇˇ! "
x4poly
ˇˇ# )
,
ˇˇ) *
x5poly
ˇˇ+ 1
,
ˇˇ1 2
x6poly
ˇˇ3 9
,
ˇˇ9 :
x7poly
ˇˇ; A
,
ˇˇA B
x8poly
ˇˇC I
;
ˇˇI J
phif
ÇÇ 
=
ÇÇ 
FootpointLatitude
ÇÇ $
(
ÇÇ$ %
y
ÇÇ% &
)
ÇÇ& '
;
ÇÇ' (
cf
áá 
=
áá 
Math
áá 
.
áá 
Cos
áá 
(
áá 
phif
áá 
)
áá 
;
áá  
nuf2
ää 
=
ää 
ep2
ää 
*
ää 
Math
ää 
.
ää 
Pow
ää !
(
ää! "
cf
ää" $
,
ää$ %
$num
ää& )
)
ää) *
;
ää* +
Nf
çç 
=
çç 
(
çç 
sm_a
çç 
*
çç 
sm_a
çç 
)
çç 
/
çç  
(
çç! "
sm_b
çç" &
*
çç' (
Math
çç) -
.
çç- .
Sqrt
çç. 2
(
çç2 3
$num
çç3 4
+
çç5 6
nuf2
çç7 ;
)
çç; <
)
çç< =
;
çç= >
Nfpow
éé 
=
éé 
Nf
éé 
;
éé 
tf
ëë 
=
ëë 
Math
ëë 
.
ëë 
Tan
ëë 
(
ëë 
phif
ëë 
)
ëë 
;
ëë  
tf2
íí 
=
íí 
tf
íí 
*
íí 
tf
íí 
;
íí 
tf4
ìì 
=
ìì 
tf2
ìì 
*
ìì 
tf2
ìì 
;
ìì 
x1frac
óó 
=
óó 
$num
óó 
/
óó 
(
óó 
Nfpow
óó !
*
óó" #
cf
óó$ &
)
óó& '
;
óó' (
Nfpow
ôô 
*=
ôô 
Nf
ôô 
;
ôô 
x2frac
öö 
=
öö 
tf
öö 
/
öö 
(
öö 
$num
öö 
*
öö  
Nfpow
öö! &
)
öö& '
;
öö' (
Nfpow
úú 
*=
úú 
Nf
úú 
;
úú 
x3frac
ùù 
=
ùù 
$num
ùù 
/
ùù 
(
ùù 
$num
ùù 
*
ùù  !
Nfpow
ùù" '
*
ùù( )
cf
ùù* ,
)
ùù, -
;
ùù- .
Nfpow
üü 
*=
üü 
Nf
üü 
;
üü 
x4frac
†† 
=
†† 
tf
†† 
/
†† 
(
†† 
$num
†† 
*
††  !
Nfpow
††" '
)
††' (
;
††( )
Nfpow
¢¢ 
*=
¢¢ 
Nf
¢¢ 
;
¢¢ 
x5frac
££ 
=
££ 
$num
££ 
/
££ 
(
££ 
$num
££ !
*
££" #
Nfpow
££$ )
*
££* +
cf
££, .
)
££. /
;
££/ 0
Nfpow
•• 
*=
•• 
Nf
•• 
;
•• 
x6frac
¶¶ 
=
¶¶ 
tf
¶¶ 
/
¶¶ 
(
¶¶ 
$num
¶¶  
*
¶¶! "
Nfpow
¶¶# (
)
¶¶( )
;
¶¶) *
Nfpow
®® 
*=
®® 
Nf
®® 
;
®® 
x7frac
©© 
=
©© 
$num
©© 
/
©© 
(
©© 
$num
©© "
*
©©# $
Nfpow
©©% *
*
©©+ ,
cf
©©- /
)
©©/ 0
;
©©0 1
Nfpow
´´ 
*=
´´ 
Nf
´´ 
;
´´ 
x8frac
¨¨ 
=
¨¨ 
tf
¨¨ 
/
¨¨ 
(
¨¨ 
$num
¨¨ "
*
¨¨# $
Nfpow
¨¨% *
)
¨¨* +
;
¨¨+ ,
x2poly
∞∞ 
=
∞∞ 
-
∞∞ 
$num
∞∞ 
-
∞∞ 
nuf2
∞∞  
;
∞∞  !
x3poly
≤≤ 
=
≤≤ 
-
≤≤ 
$num
≤≤ 
-
≤≤ 
$num
≤≤ 
*
≤≤ 
tf2
≤≤  #
-
≤≤$ %
nuf2
≤≤& *
;
≤≤* +
x4poly
¥¥ 
=
¥¥ 
$num
¥¥ 
+
¥¥ 
$num
¥¥ 
*
¥¥  
tf2
¥¥! $
+
¥¥% &
$num
¥¥' *
*
¥¥+ ,
nuf2
¥¥- 1
-
¥¥2 3
$num
¥¥4 7
*
¥¥8 9
tf2
¥¥: =
*
¥¥> ?
nuf2
¥¥@ D
-
µµ 
$num
µµ 
*
µµ 
(
µµ 
nuf2
µµ 
*
µµ 
nuf2
µµ  $
)
µµ$ %
-
µµ& '
$num
µµ( +
*
µµ, -
tf2
µµ. 1
*
µµ2 3
(
µµ4 5
nuf2
µµ5 9
*
µµ: ;
nuf2
µµ< @
)
µµ@ A
;
µµA B
x5poly
∑∑ 
=
∑∑ 
$num
∑∑ 
+
∑∑ 
$num
∑∑ 
*
∑∑  !
tf2
∑∑" %
+
∑∑& '
$num
∑∑( ,
*
∑∑- .
tf4
∑∑/ 2
+
∑∑3 4
$num
∑∑5 8
*
∑∑9 :
nuf2
∑∑; ?
+
∑∑@ A
$num
∑∑B E
*
∑∑F G
tf2
∑∑H K
*
∑∑L M
nuf2
∑∑N R
;
∑∑R S
x6poly
ππ 
=
ππ 
-
ππ 
$num
ππ 
-
ππ 
$num
ππ !
*
ππ" #
tf2
ππ$ '
-
ππ( )
$num
ππ* .
*
ππ/ 0
tf4
ππ1 4
-
ππ5 6
$num
ππ7 <
*
ππ= >
nuf2
ππ? C
+
∫∫ 
$num
∫∫ 
*
∫∫ 
tf2
∫∫ 
*
∫∫ 
nuf2
∫∫  $
;
∫∫$ %
x7poly
ºº 
=
ºº 
-
ºº 
$num
ºº 
-
ºº 
$num
ºº "
*
ºº# $
tf2
ºº% (
-
ºº) *
$num
ºº+ 1
*
ºº2 3
tf4
ºº4 7
-
ºº8 9
$num
ºº: ?
*
ºº@ A
(
ººB C
tf4
ººC F
*
ººG H
tf2
ººI L
)
ººL M
;
ººM N
x8poly
ææ 
=
ææ 
$num
ææ 
+
ææ 
$num
ææ $
*
ææ% &
tf2
ææ' *
+
ææ+ ,
$num
ææ- 3
*
ææ4 5
tf4
ææ6 9
+
ææ: ;
$num
ææ< @
*
ææA B
(
ææC D
tf4
ææD G
*
ææH I
tf2
ææJ M
)
ææM N
;
ææN O
latlon
¡¡ 
[
¡¡ 
$num
¡¡ 
]
¡¡ 
=
¡¡ 
phif
¡¡ 
+
¡¡ 
x2frac
¡¡ %
*
¡¡& '
x2poly
¡¡( .
*
¡¡/ 0
(
¡¡1 2
x
¡¡2 3
*
¡¡4 5
x
¡¡6 7
)
¡¡7 8
+
¬¬ 
x4frac
¬¬ 
*
¬¬ 
x4poly
¬¬ !
*
¬¬" #
Math
¬¬$ (
.
¬¬( )
Pow
¬¬) ,
(
¬¬, -
x
¬¬- .
,
¬¬. /
$num
¬¬0 3
)
¬¬3 4
+
√√ 
x6frac
√√ 
*
√√ 
x6poly
√√ !
*
√√" #
Math
√√$ (
.
√√( )
Pow
√√) ,
(
√√, -
x
√√- .
,
√√. /
$num
√√0 3
)
√√3 4
+
ƒƒ 
x8frac
ƒƒ 
*
ƒƒ 
x8poly
ƒƒ !
*
ƒƒ" #
Math
ƒƒ$ (
.
ƒƒ( )
Pow
ƒƒ) ,
(
ƒƒ, -
x
ƒƒ- .
,
ƒƒ. /
$num
ƒƒ0 3
)
ƒƒ3 4
;
ƒƒ4 5
latlon
«« 
[
«« 
$num
«« 
]
«« 
=
«« 
lambda0
«« 
+
««  !
x1frac
««" (
*
««) *
x
««+ ,
+
»» 
x3frac
»» 
*
»» 
x3poly
»» !
*
»»" #
Math
»»$ (
.
»»( )
Pow
»») ,
(
»», -
x
»»- .
,
»». /
$num
»»0 3
)
»»3 4
+
…… 
x5frac
…… 
*
…… 
x5poly
…… !
*
……" #
Math
……$ (
.
……( )
Pow
……) ,
(
……, -
x
……- .
,
……. /
$num
……0 3
)
……3 4
+
   
x7frac
   
*
   
x7poly
   !
*
  " #
Math
  $ (
.
  ( )
Pow
  ) ,
(
  , -
x
  - .
,
  . /
$num
  0 3
)
  3 4
;
  4 5
return
ÃÃ 
latlon
ÃÃ 
;
ÃÃ 
}
ÕÕ 	
static
œœ 
void
œœ 
GeoUTMConverterXY
œœ %
(
œœ% &
double
œœ& ,
lat
œœ- 0
,
œœ0 1
double
œœ2 8
lon
œœ9 <
,
œœ< =
UTM
œœ> A
utm
œœB E
)
œœE F
{
–– 	
double
—— 
[
—— 
]
—— 
xy
—— 
=
—— 
MapLatLonToXY
—— '
(
——' (
lat
——( +
,
——+ ,
lon
——- 0
,
——0 1 
UTMCentralMeridian
——2 D
(
——D E
utm
——E H
.
——H I
Zone
——I M
)
——M N
)
——N O
;
——O P
xy
”” 
[
”” 
$num
”” 
]
”” 
=
”” 
xy
”” 
[
”” 
$num
”” 
]
”” 
*
”” 
UTMScaleFactor
”” *
+
””+ ,
$num
””- 5
;
””5 6
xy
‘‘ 
[
‘‘ 
$num
‘‘ 
]
‘‘ 
=
‘‘ 
xy
‘‘ 
[
‘‘ 
$num
‘‘ 
]
‘‘ 
*
‘‘ 
UTMScaleFactor
‘‘ *
;
‘‘* +
if
’’ 
(
’’ 
xy
’’ 
[
’’ 
$num
’’ 
]
’’ 
<
’’ 
$num
’’ 
)
’’ 
xy
÷÷ 
[
÷÷ 
$num
÷÷ 
]
÷÷ 
=
÷÷ 
xy
÷÷ 
[
÷÷ 
$num
÷÷ 
]
÷÷ 
+
÷÷ 
$num
÷÷  *
;
÷÷* +
utm
ÿÿ 
.
ÿÿ 
X
ÿÿ 
=
ÿÿ 
(
ÿÿ 
int
ÿÿ 
)
ÿÿ 
(
ÿÿ 
xy
ÿÿ 
[
ÿÿ 
$num
ÿÿ 
]
ÿÿ 
)
ÿÿ  
;
ÿÿ  !
utm
ŸŸ 
.
ŸŸ 
Y
ŸŸ 
=
ŸŸ 
(
ŸŸ 
int
ŸŸ 
)
ŸŸ 
(
ŸŸ 
xy
ŸŸ 
[
ŸŸ 
$num
ŸŸ 
]
ŸŸ 
)
ŸŸ  
;
ŸŸ  !
}
›› 	
}
‚‚ 
}„„ †)
sD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\GIS\WGS84.cs
	namespace 	
Infoline
 
. 
GIS 
{ 
[ 
Serializable 
] 
public		 

class		 
WGS84		 
:		 
GeoCoordinate		 &
{

 
public 
UTM 
ToUtM 
( 
) 
{ 	
return 
GeoUTMConverter "
." #
ToUTM# (
(( )
this) -
)- .
;. /
}   	
public!! 
UTM!! 
ToUtM!! 
(!! 
double!! 
zone!!  $
)!!$ %
{"" 	
return## 
GeoUTMConverter## "
.##" #
ToUTM### (
(##( )
this##) -
,##- .
zone##/ 3
)##3 4
;##4 5
}$$ 	
public%% 
override%% 
string%% 
ToString%% '
(%%' (
)%%( )
{&& 	
return'' 
string'' 
.'' 
Format''  
(''  !
$str''! 6
,''6 7
Latitude''8 @
,''@ A
	Longitude''B K
,''K L
Altitude''M U
)''U V
;''V W
}(( 	
public** 
double** 
Distance** 
(** 
WGS84** $
geo**% (
)**( )
{++ 	
return,, 
	Haversine,, 
.,, 
Distance,, %
(,,% &
geo,,& )
,,,) *
this,,+ /
),,/ 0
;,,0 1
}-- 	
}.. 
public// 

class// 
SphericalMercator// "
://# $

Coordinate//% /
{00 
public11 
double11 
X11 
{11 
get11 
;11 
set11 "
;11" #
}11$ %
public22 
double22 
Y22 
{22 
get22 
;22 
set22 "
;22" #
}22$ %
public33 
override33 
string33 
ToString33 '
(33' (
)33( )
{44 	
return55 
string55 
.55 
Format55  
(55  !
$str55! 5
,555 6
X557 8
,558 9
Y55: ;
,55; <
Z55< =
)55= >
;55> ?
}66 	
}77 
public88 

static88 
class88 &
SphericalMercatorConverter88 2
{99 
private:: 
readonly:: 
static:: 
double::  &
radius::' -
=::. /
$num::0 7
;::7 8
private;; 
static;; 
double;; 
D2R;; !
=;;" #
Math;;$ (
.;;( )
PI;;) +
/;;, -
$num;;. 1
;;;1 2
private<< 
static<< 
double<< 
HALF_PI<< %
=<<& '
Math<<( ,
.<<, -
PI<<- /
/<<0 1
$num<<2 3
;<<3 4
public?? 
static?? 
SphericalMercator?? '
ToSphericalMercator??( ;
(??; <
this??< @
WGS84??A F
value??G L
)??L M
{@@ 	
returnAA 
newAA 
SphericalMercatorAA (
{AA) *
XAA+ ,
=AA- .
radiusAA/ 5
*AA6 7
(AA8 9
D2RAA9 <
*AA= >
valueAA? D
.AAD E
	LongitudeAAE N
)AAN O
,AAO P
YAAQ R
=AAS T
radiusAAU [
*AA\ ]
MathAA^ b
.AAb c
LogAAc f
(AAf g
MathAAg k
.AAk l
TanAAl o
(AAo p
MathAAp t
.AAt u
PIAAu w
*AAx y
$numAAz ~
+	AA Ä
(
AAÅ Ç
D2R
AAÇ Ö
*
AAÜ á
value
AAà ç
.
AAç é
Latitude
AAé ñ
)
AAñ ó
*
AAò ô
$num
AAö ù
)
AAù û
)
AAû ü
}
AA† °
;
AA° ¢
}BB 	
publicDD 
staticDD 
WGS84DD 
ToLonLatDD $
(DD$ %
thisDD% )
SphericalMercatorDD* ;
valueDD< A
)DDA B
{EE 	
returnFF 
newFF 
WGS84FF 
(FF 
)FF 
{FF  
	LongitudeFF! *
=FF+ ,
(FF- .
valueFF. 3
.FF3 4
XFF4 5
/FF6 7
radiusFF8 >
/FF? @
D2RFFA D
)FFD E
,FFE F
LatitudeFFG O
=FFP Q
(FFR S
HALF_PIFFS Z
-FF[ \
$numFF] ^
*FF_ `
MathFFa e
.FFe f
AtanFFf j
(FFj k
(FFk l
MathFFl p
.FFp q
ExpFFq t
(FFt u
-FFu v
valueFFv {
.FF{ |
YFF| }
/FF~ 
(
FFÄ Å
radius
FFÅ á
)
FFá à
)
FFà â
)
FFâ ä
)
FFä ã
)
FFã å
/
FFç é
D2R
FFè í
}
FFì î
;
FFî ï
}GG 	
}HH 
}LL ã
}D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\GIS\WGS84Coordinate.cs
	namespace 	
Infoline
 
. 
GIS 
{ 
[ 
Serializable 
] 
public		 

class		 

Coordinate		 
{

 
public 
double 
Z 
{ 
get 
; 
set "
;" #
}$ %
} 
[ 
Serializable 
] 
public 

class 
GeoCoordinate 
:  

Coordinate! +
{ 
public 
double 
Latitude 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
double 
	Longitude 
{  !
get" %
;% &
set' *
;* +
}, -
public 
double 
Altitude 
{  
get! $
;$ %
set& )
;) *
}+ ,
} 
[ 
Serializable 
] 
public 

class 
MapCoordinate 
:  

Coordinate! +
{ 
public 
double 
X 
{ 
get 
; 
set "
;" #
}$ %
public 
double 
Y 
{ 
get 
; 
set "
;" #
}$ %
} 
} È
|D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\GIS\WGS84HaverSine.cs
	namespace 	
Infoline
 
. 
GIS 
{ 
public 

enum 
DistanceType 
{ 
Miles $
,$ %

Kilometers& 0
}1 2
;2 3
public 

static 
class 
	Haversine !
{ 
static 
double 
R 
= 
$num "
*# $
$num% &
;& '
static 
double 
PI180 
= 
Math "
." #
PI# %
/& '
$num( +
;+ ,
public 
static 
double 
Distance %
(% &
WGS84& +
pos1, 0
,0 1
WGS842 7
pos28 <
)< =
{ 	
double 
dLat 
= 
( 
PI180  
)  !
*" #
($ %
pos2% )
.) *
Latitude* 2
-3 4
pos15 9
.9 :
Latitude: B
)B C
;C D
double 
dLon 
= 
( 
PI180  
)  !
*" #
($ %
pos2% )
.) *
	Longitude* 3
-4 5
pos16 :
.: ;
	Longitude; D
)D E
;E F
var 
sinlat 
= 
Math 
. 
Sin !
(! "
dLat" &
/' (
$num) *
)* +
;+ ,
var 
sinlon 
= 
Math 
. 
Sin !
(! "
dLon" &
/' (
$num) *
)* +
;+ ,
double 
a 
= 
sinlat 
* 
sinlat  &
+' (
Math 
. 
Cos 
( 
( 
PI180 
)  
*! "
(# $
pos1$ (
.( )
Latitude) 1
)1 2
)2 3
*4 5
Math6 :
.: ;
Cos; >
(> ?
(? @
PI180@ E
)E F
*G H
(I J
pos2J N
.N O
LatitudeO W
)W X
)X Y
*Z [
sinlon 
* 
sinlon 
;  
return 
Math 
. 
Asin 
( 
Math !
.! "
Min" %
(% &
$num& '
,' (
Math) -
.- .
Sqrt. 2
(2 3
a3 4
)4 5
)5 6
)6 7
*8 9
R: ;
;; <
} 	
} 
} ‘≤
D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\ByteSerializer.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Helper #
{ 
public		 

class		 
ByteSerializer		 
{

 
public 
static 
byte 
[ 
] 
	Serialize &
(& '
object' -
obj. 1
)1 2
{ 	
var 
t 
= 
obj 
. 
GetType 
(  
)  !
;! "
if 
( 
t 
. 
IsValueType 
) 
return 
	GetBytes2  
(  !
obj! $
)$ %
;% &
List 
< 
byte 
[ 
] 
> 
byteList !
=" #
new$ '
List( ,
<, -
byte- 1
[1 2
]2 3
>3 4
(4 5
)5 6
;6 7
var 
props 
= 
obj 
. 
GetType #
(# $
)$ %
.% &
GetProperties& 3
(3 4
)4 5
;5 6
foreach 
( 
var 
prop 
in  
props! &
)& '
{ 
var 
data 
= 
	GetBytes2 $
($ %
prop% )
.) *
GetValue* 2
(2 3
obj3 6
)6 7
)7 8
;8 9
byteList 
. 
Add 
( 
data !
)! "
;" #
} 
int 
size 
= 
$num 
; 
for 
( 
int 
i 
= 
$num 
; 
i 
< 
byteList  (
.( )
Count) .
;. /
i0 1
++1 3
)3 4
size 
+= 
byteList  
[  !
i! "
]" #
.# $
Length$ *
;* +
var 
result 
= 
new 
byte !
[! "
size" &
]& '
;' (
for 
( 
int 
i 
= 
$num 
, 
o 
= 
$num  !
;! "
i# $
<% &
byteList' /
./ 0
Count0 5
;5 6
o7 8
+=9 ;
byteList< D
[D E
iE F
]F G
.G H
LengthH N
,N O
iP Q
++Q S
)S T
Array 
. 
Copy 
( 
byteList #
[# $
i$ %
]% &
,& '
$num( )
,) *
result+ 1
,1 2
o3 4
,4 5
byteList6 >
[> ?
i? @
]@ A
.A B
LengthB H
)H I
;I J
return   
result   
;   
}!! 	
public"" 
static"" 
T"" 
Merge"" 
<"" 
T"" 
>""  
(""  !
byte""! %
[""% &
]""& '
data""( ,
)"", -
{## 	
return$$ 
default$$ 
($$ 
T$$ 
)$$ 
;$$ 
}%% 	
private'' 
static'' 
byte'' 
['' 
]'' 
	GetBytes2'' '
(''' (
object''( .
obj''/ 2
)''2 3
{(( 	
Type)) 
t)) 
=)) 
obj)) 
.)) 
GetType))  
())  !
)))! "
;))" #
if++ 
(++ 
!++ 
t++ 
.++ 
IsArray++ 
)++ 
{,, 
if.. 
(.. 
t.. 
==.. 
typeof.. 
(..  
Int16..  %
)..% &
)..& '
return// 
BitConverter// '
.//' (
GetBytes//( 0
(//0 1
(//1 2
short//2 7
)//7 8
obj//8 ;
)//; <
;//< =
else00 
if00 
(00 
t00 
==00 
typeof00 $
(00$ %
Int3200% *
)00* +
)00+ ,
return11 
BitConverter11 '
.11' (
GetBytes11( 0
(110 1
(111 2
int112 5
)115 6
obj116 9
)119 :
;11: ;
else22 
if22 
(22 
t22 
==22 
typeof22 $
(22$ %
Int6422% *
)22* +
)22+ ,
return33 
BitConverter33 '
.33' (
GetBytes33( 0
(330 1
(331 2
long332 6
)336 7
obj337 :
)33: ;
;33; <
else44 
if44 
(44 
t44 
==44 
typeof44 $
(44$ %
UInt1644% +
)44+ ,
)44, -
return55 
BitConverter55 '
.55' (
GetBytes55( 0
(550 1
(551 2
ushort552 8
)558 9
obj559 <
)55< =
;55= >
else66 
if66 
(66 
t66 
==66 
typeof66 $
(66$ %
UInt3266% +
)66+ ,
)66, -
return77 
BitConverter77 '
.77' (
GetBytes77( 0
(770 1
(771 2
uint772 6
)776 7
obj777 :
)77: ;
;77; <
else88 
if88 
(88 
t88 
==88 
typeof88 $
(88$ %
Int6488% *
)88* +
)88+ ,
return99 
BitConverter99 '
.99' (
GetBytes99( 0
(990 1
(991 2
ulong992 7
)997 8
obj998 ;
)99; <
;99< =
else:: 
if:: 
(:: 
t:: 
==:: 
typeof:: $
(::$ %
Boolean::% ,
)::, -
)::- .
return;; 
BitConverter;; '
.;;' (
GetBytes;;( 0
(;;0 1
(;;1 2
bool;;2 6
);;6 7
obj;;7 :
);;: ;
;;;; <
else<< 
if<< 
(<< 
t<< 
==<< 
typeof<< $
(<<$ %
Char<<% )
)<<) *
)<<* +
return== 
BitConverter== '
.==' (
GetBytes==( 0
(==0 1
(==1 2
char==2 6
)==6 7
obj==7 :
)==: ;
;==; <
else>> 
if>> 
(>> 
t>> 
==>> 
typeof>> $
(>>$ %
Double>>% +
)>>+ ,
)>>, -
return?? 
BitConverter?? '
.??' (
GetBytes??( 0
(??0 1
(??1 2
double??2 8
)??8 9
obj??9 <
)??< =
;??= >
else@@ 
if@@ 
(@@ 
t@@ 
==@@ 
typeof@@ $
(@@$ %
float@@% *
)@@* +
)@@+ ,
returnAA 
BitConverterAA '
.AA' (
GetBytesAA( 0
(AA0 1
(AA1 2
floatAA2 7
)AA7 8
objAA8 ;
)AA; <
;AA< =
elseBB 
ifBB 
(BB 
tBB 
==BB 
typeofBB $
(BB$ %
DateTimeBB% -
)BB- .
)BB. /
returnCC 
BitConverterCC '
.CC' (
GetBytesCC( 0
(CC0 1
(CC1 2
(CC2 3
DateTimeCC3 ;
)CC; <
objCC< ?
)CC? @
.CC@ A
TicksCCA F
)CCF G
;CCG H
elseDD 
ifDD 
(DD 
tDD 
.DD 
IsClassDD "
)DD" #
returnEE 
	SerializeEE $
(EE$ %
objEE% (
)EE( )
;EE) *
}FF 
elseGG 
{HH 
varII 
ttII 
=II 
tII 
.II  
UnderlyingSystemTypeII /
.II/ 0
GetElementTypeII0 >
(II> ?
)II? @
;II@ A
ttJJ 
=JJ 
NullableJJ 
.JJ 
GetUnderlyingTypeJJ /
(JJ/ 0
ttJJ0 2
)JJ2 3
??JJ4 6
ttJJ7 9
;JJ9 :
varKK 

isNullableKK 
=KK  
NullableKK! )
.KK) *
GetUnderlyingTypeKK* ;
(KK; <
ttKK< >
)KK> ?
!=KK@ B
nullKKC G
;KKG H
ifLL 
(LL 
ttLL 
==LL 
typeofLL  
(LL  !
Int16LL! &
)LL& '
)LL' (
{MM 
intNN 
offsetNN 
=NN  
$numNN! "
;NN" #
ArrayOO 
aOO 
=OO 
(OO 
ArrayOO $
)OO$ %
objOO% (
;OO( )
bytePP 
[PP 
]PP 
dataPP 
=PP  !
newPP" %
bytePP& *
[PP* +
aPP+ ,
.PP, -
LengthPP- 3
*PP4 5
$numPP6 7
]PP7 8
;PP8 9
forQQ 
(QQ 
intQQ 
iQQ 
=QQ  
$numQQ! "
;QQ" #
iQQ$ %
<QQ& '
aQQ( )
.QQ) *
LengthQQ* 0
;QQ0 1
iQQ2 3
++QQ3 5
)QQ5 6
{RR 
varSS 
vSS 
=SS 
aSS  !
.SS! "
GetValueSS" *
(SS* +
iSS+ ,
)SS, -
;SS- .
ifTT 
(TT 
vTT 
!=TT  
nullTT! %
)TT% &
{UU 
varVV 
dVV  !
=VV" #
BitConverterVV$ 0
.VV0 1
GetBytesVV1 9
(VV9 :
(VV: ;
shortVV; @
)VV@ A
vVVA B
)VVB C
;VVC D
dataWW  
[WW  !
offsetWW! '
++WW' )
]WW) *
=WW+ ,
dWW- .
[WW. /
$numWW/ 0
]WW0 1
;WW1 2
dataXX  
[XX  !
offsetXX! '
++XX' )
]XX) *
=XX+ ,
dXX- .
[XX. /
$numXX/ 0
]XX0 1
;XX1 2
}YY 
}ZZ 
return[[ 
data[[ 
;[[  
}\\ 
else]] 
if]] 
(]] 
tt]] 
==]] 
typeof]] %
(]]% &
Int32]]& +
)]]+ ,
)]], -
{^^ 
int__ 
offset__ 
=__  
$num__! "
;__" #
Array`` 
a`` 
=`` 
(`` 
Array`` $
)``$ %
obj``% (
;``( )
byteaa 
[aa 
]aa 
dataaa 
=aa  !
newaa" %
byteaa& *
[aa* +
aaa+ ,
.aa, -
Lengthaa- 3
*aa4 5
$numaa6 7
]aa7 8
;aa8 9
forbb 
(bb 
intbb 
ibb 
=bb  
$numbb! "
;bb" #
ibb$ %
<bb& '
abb( )
.bb) *
Lengthbb* 0
;bb0 1
ibb2 3
++bb3 5
)bb5 6
{cc 
vardd 
vdd 
=dd 
add  !
.dd! "
GetValuedd" *
(dd* +
idd+ ,
)dd, -
;dd- .
ifee 
(ee 
vee 
!=ee  
nullee! %
)ee% &
{ff 
vargg 
dgg  !
=gg" #
BitConvertergg$ 0
.gg0 1
GetBytesgg1 9
(gg9 :
(gg: ;
intgg; >
)gg> ?
vgg? @
)gg@ A
;ggA B
datahh  
[hh  !
offsethh! '
++hh' )
]hh) *
=hh+ ,
dhh- .
[hh. /
$numhh/ 0
]hh0 1
;hh1 2
dataii  
[ii  !
offsetii! '
++ii' )
]ii) *
=ii+ ,
dii- .
[ii. /
$numii/ 0
]ii0 1
;ii1 2
datajj  
[jj  !
offsetjj! '
++jj' )
]jj) *
=jj+ ,
djj- .
[jj. /
$numjj/ 0
]jj0 1
;jj1 2
datakk  
[kk  !
offsetkk! '
++kk' )
]kk) *
=kk+ ,
dkk- .
[kk. /
$numkk/ 0
]kk0 1
;kk1 2
}ll 
}mm 
returnnn 
datann 
;nn  
}oo 
elsepp 
ifpp 
(pp 
ttpp 
==pp 
typeofpp %
(pp% &
Int64pp& +
)pp+ ,
)pp, -
{qq 
intrr 
offsetrr 
=rr  
$numrr! "
;rr" #
Arrayss 
ass 
=ss 
(ss 
Arrayss $
)ss$ %
objss% (
;ss( )
bytett 
[tt 
]tt 
datatt 
=tt  !
newtt" %
bytett& *
[tt* +
att+ ,
.tt, -
Lengthtt- 3
*tt4 5
$numtt6 7
]tt7 8
;tt8 9
foruu 
(uu 
intuu 
iuu 
=uu  
$numuu! "
;uu" #
iuu$ %
<uu& '
auu( )
.uu) *
Lengthuu* 0
;uu0 1
iuu2 3
++uu3 5
)uu5 6
{vv 
varww 
vww 
=ww 
aww  !
.ww! "
GetValueww" *
(ww* +
iww+ ,
)ww, -
;ww- .
ifxx 
(xx 
vxx 
!=xx  
nullxx! %
)xx% &
{yy 
varzz 
dzz  !
=zz" #
BitConverterzz$ 0
.zz0 1
GetByteszz1 9
(zz9 :
(zz: ;
longzz; ?
)zz? @
vzz@ A
)zzA B
;zzB C
data{{  
[{{  !
offset{{! '
++{{' )
]{{) *
={{+ ,
d{{- .
[{{. /
$num{{/ 0
]{{0 1
;{{1 2
data||  
[||  !
offset||! '
++||' )
]||) *
=||+ ,
d||- .
[||. /
$num||/ 0
]||0 1
;||1 2
data}}  
[}}  !
offset}}! '
++}}' )
]}}) *
=}}+ ,
d}}- .
[}}. /
$num}}/ 0
]}}0 1
;}}1 2
data~~  
[~~  !
offset~~! '
++~~' )
]~~) *
=~~+ ,
d~~- .
[~~. /
$num~~/ 0
]~~0 1
;~~1 2
data  
[  !
offset! '
++' )
]) *
=+ ,
d- .
[. /
$num/ 0
]0 1
;1 2
data
ÄÄ  
[
ÄÄ  !
offset
ÄÄ! '
++
ÄÄ' )
]
ÄÄ) *
=
ÄÄ+ ,
d
ÄÄ- .
[
ÄÄ. /
$num
ÄÄ/ 0
]
ÄÄ0 1
;
ÄÄ1 2
data
ÅÅ  
[
ÅÅ  !
offset
ÅÅ! '
++
ÅÅ' )
]
ÅÅ) *
=
ÅÅ+ ,
d
ÅÅ- .
[
ÅÅ. /
$num
ÅÅ/ 0
]
ÅÅ0 1
;
ÅÅ1 2
data
ÇÇ  
[
ÇÇ  !
offset
ÇÇ! '
++
ÇÇ' )
]
ÇÇ) *
=
ÇÇ+ ,
d
ÇÇ- .
[
ÇÇ. /
$num
ÇÇ/ 0
]
ÇÇ0 1
;
ÇÇ1 2
}
ÉÉ 
}
ÑÑ 
return
ÖÖ 
data
ÖÖ 
;
ÖÖ  
}
ÜÜ 
else
áá 
if
áá 
(
áá 
tt
áá 
==
áá 
typeof
áá %
(
áá% &
UInt16
áá& ,
)
áá, -
)
áá- .
{
àà 
int
ââ 
offset
ââ 
=
ââ  
$num
ââ! "
;
ââ" #
Array
ää 
a
ää 
=
ää 
(
ää 
Array
ää $
)
ää$ %
obj
ää% (
;
ää( )
byte
ãã 
[
ãã 
]
ãã 
data
ãã 
=
ãã  !
new
ãã" %
byte
ãã& *
[
ãã* +
a
ãã+ ,
.
ãã, -
Length
ãã- 3
*
ãã4 5
$num
ãã6 7
]
ãã7 8
;
ãã8 9
for
åå 
(
åå 
int
åå 
i
åå 
=
åå  
$num
åå! "
;
åå" #
i
åå$ %
<
åå& '
a
åå( )
.
åå) *
Length
åå* 0
;
åå0 1
i
åå2 3
++
åå3 5
)
åå5 6
{
çç 
var
éé 
v
éé 
=
éé 
a
éé  !
.
éé! "
GetValue
éé" *
(
éé* +
i
éé+ ,
)
éé, -
;
éé- .
if
èè 
(
èè 
v
èè 
!=
èè  
null
èè! %
)
èè% &
{
êê 
var
ëë 
d
ëë  !
=
ëë" #
BitConverter
ëë$ 0
.
ëë0 1
GetBytes
ëë1 9
(
ëë9 :
(
ëë: ;
ushort
ëë; A
)
ëëA B
v
ëëB C
)
ëëC D
;
ëëD E
data
íí  
[
íí  !
offset
íí! '
++
íí' )
]
íí) *
=
íí+ ,
d
íí- .
[
íí. /
$num
íí/ 0
]
íí0 1
;
íí1 2
data
ìì  
[
ìì  !
offset
ìì! '
++
ìì' )
]
ìì) *
=
ìì+ ,
d
ìì- .
[
ìì. /
$num
ìì/ 0
]
ìì0 1
;
ìì1 2
}
îî 
}
ïï 
return
ññ 
data
ññ 
;
ññ  
}
óó 
else
òò 
if
òò 
(
òò 
tt
òò 
==
òò 
typeof
òò %
(
òò% &
UInt32
òò& ,
)
òò, -
)
òò- .
{
ôô 
int
öö 
offset
öö 
=
öö  
$num
öö! "
;
öö" #
Array
õõ 
a
õõ 
=
õõ 
(
õõ 
Array
õõ $
)
õõ$ %
obj
õõ% (
;
õõ( )
byte
úú 
[
úú 
]
úú 
data
úú 
=
úú  !
new
úú" %
byte
úú& *
[
úú* +
a
úú+ ,
.
úú, -
Length
úú- 3
*
úú4 5
$num
úú6 7
]
úú7 8
;
úú8 9
for
ùù 
(
ùù 
int
ùù 
i
ùù 
=
ùù  
$num
ùù! "
;
ùù" #
i
ùù$ %
<
ùù& '
a
ùù( )
.
ùù) *
Length
ùù* 0
;
ùù0 1
i
ùù2 3
++
ùù3 5
)
ùù5 6
{
ûû 
var
üü 
v
üü 
=
üü 
a
üü  !
.
üü! "
GetValue
üü" *
(
üü* +
i
üü+ ,
)
üü, -
;
üü- .
if
†† 
(
†† 
v
†† 
!=
††  
null
††! %
)
††% &
{
°° 
var
¢¢ 
d
¢¢  !
=
¢¢" #
BitConverter
¢¢$ 0
.
¢¢0 1
GetBytes
¢¢1 9
(
¢¢9 :
(
¢¢: ;
uint
¢¢; ?
)
¢¢? @
v
¢¢@ A
)
¢¢A B
;
¢¢B C
data
££  
[
££  !
offset
££! '
++
££' )
]
££) *
=
££+ ,
d
££- .
[
££. /
$num
££/ 0
]
££0 1
;
££1 2
data
§§  
[
§§  !
offset
§§! '
++
§§' )
]
§§) *
=
§§+ ,
d
§§- .
[
§§. /
$num
§§/ 0
]
§§0 1
;
§§1 2
data
••  
[
••  !
offset
••! '
++
••' )
]
••) *
=
••+ ,
d
••- .
[
••. /
$num
••/ 0
]
••0 1
;
••1 2
data
¶¶  
[
¶¶  !
offset
¶¶! '
++
¶¶' )
]
¶¶) *
=
¶¶+ ,
d
¶¶- .
[
¶¶. /
$num
¶¶/ 0
]
¶¶0 1
;
¶¶1 2
}
ßß 
}
®® 
return
©© 
data
©© 
;
©©  
}
™™ 
else
´´ 
if
´´ 
(
´´ 
tt
´´ 
==
´´ 
typeof
´´ %
(
´´% &
Int64
´´& +
)
´´+ ,
)
´´, -
{
¨¨ 
int
≠≠ 
offset
≠≠ 
=
≠≠  
$num
≠≠! "
;
≠≠" #
Array
ÆÆ 
a
ÆÆ 
=
ÆÆ 
(
ÆÆ 
Array
ÆÆ $
)
ÆÆ$ %
obj
ÆÆ% (
;
ÆÆ( )
byte
ØØ 
[
ØØ 
]
ØØ 
data
ØØ 
=
ØØ  !
new
ØØ" %
byte
ØØ& *
[
ØØ* +
a
ØØ+ ,
.
ØØ, -
Length
ØØ- 3
*
ØØ4 5
$num
ØØ6 7
]
ØØ7 8
;
ØØ8 9
for
∞∞ 
(
∞∞ 
int
∞∞ 
i
∞∞ 
=
∞∞  
$num
∞∞! "
;
∞∞" #
i
∞∞$ %
<
∞∞& '
a
∞∞( )
.
∞∞) *
Length
∞∞* 0
;
∞∞0 1
i
∞∞2 3
++
∞∞3 5
)
∞∞5 6
{
±± 
var
≤≤ 
v
≤≤ 
=
≤≤ 
a
≤≤  !
.
≤≤! "
GetValue
≤≤" *
(
≤≤* +
i
≤≤+ ,
)
≤≤, -
;
≤≤- .
if
≥≥ 
(
≥≥ 
v
≥≥ 
!=
≥≥  
null
≥≥! %
)
≥≥% &
{
¥¥ 
var
µµ 
d
µµ  !
=
µµ" #
BitConverter
µµ$ 0
.
µµ0 1
GetBytes
µµ1 9
(
µµ9 :
(
µµ: ;
ulong
µµ; @
)
µµ@ A
v
µµA B
)
µµB C
;
µµC D
data
∂∂  
[
∂∂  !
offset
∂∂! '
++
∂∂' )
]
∂∂) *
=
∂∂+ ,
d
∂∂- .
[
∂∂. /
$num
∂∂/ 0
]
∂∂0 1
;
∂∂1 2
data
∑∑  
[
∑∑  !
offset
∑∑! '
++
∑∑' )
]
∑∑) *
=
∑∑+ ,
d
∑∑- .
[
∑∑. /
$num
∑∑/ 0
]
∑∑0 1
;
∑∑1 2
data
∏∏  
[
∏∏  !
offset
∏∏! '
++
∏∏' )
]
∏∏) *
=
∏∏+ ,
d
∏∏- .
[
∏∏. /
$num
∏∏/ 0
]
∏∏0 1
;
∏∏1 2
data
ππ  
[
ππ  !
offset
ππ! '
++
ππ' )
]
ππ) *
=
ππ+ ,
d
ππ- .
[
ππ. /
$num
ππ/ 0
]
ππ0 1
;
ππ1 2
data
∫∫  
[
∫∫  !
offset
∫∫! '
++
∫∫' )
]
∫∫) *
=
∫∫+ ,
d
∫∫- .
[
∫∫. /
$num
∫∫/ 0
]
∫∫0 1
;
∫∫1 2
data
ªª  
[
ªª  !
offset
ªª! '
++
ªª' )
]
ªª) *
=
ªª+ ,
d
ªª- .
[
ªª. /
$num
ªª/ 0
]
ªª0 1
;
ªª1 2
data
ºº  
[
ºº  !
offset
ºº! '
++
ºº' )
]
ºº) *
=
ºº+ ,
d
ºº- .
[
ºº. /
$num
ºº/ 0
]
ºº0 1
;
ºº1 2
data
ΩΩ  
[
ΩΩ  !
offset
ΩΩ! '
++
ΩΩ' )
]
ΩΩ) *
=
ΩΩ+ ,
d
ΩΩ- .
[
ΩΩ. /
$num
ΩΩ/ 0
]
ΩΩ0 1
;
ΩΩ1 2
}
ææ 
}
øø 
return
¿¿ 
data
¿¿ 
;
¿¿  
}
¡¡ 
else
¬¬ 
if
¬¬ 
(
¬¬ 
tt
¬¬ 
==
¬¬ 
typeof
¬¬ %
(
¬¬% &
Boolean
¬¬& -
)
¬¬- .
)
¬¬. /
{
√√ 
int
ƒƒ 
offset
ƒƒ 
=
ƒƒ  
$num
ƒƒ! "
;
ƒƒ" #
Array
≈≈ 
a
≈≈ 
=
≈≈ 
(
≈≈ 
Array
≈≈ $
)
≈≈$ %
obj
≈≈% (
;
≈≈( )
byte
∆∆ 
[
∆∆ 
]
∆∆ 
data
∆∆ 
=
∆∆  !
new
∆∆" %
byte
∆∆& *
[
∆∆* +
a
∆∆+ ,
.
∆∆, -
Length
∆∆- 3
]
∆∆3 4
;
∆∆4 5
for
«« 
(
«« 
int
«« 
i
«« 
=
««  
$num
««! "
;
««" #
i
««$ %
<
««& '
a
««( )
.
««) *
Length
««* 0
;
««0 1
i
««2 3
++
««3 5
)
««5 6
{
»» 
var
…… 
v
…… 
=
…… 
a
……  !
.
……! "
GetValue
……" *
(
……* +
i
……+ ,
)
……, -
;
……- .
if
   
(
   
v
   
!=
    
null
  ! %
)
  % &
{
ÀÀ 
var
ÃÃ 
d
ÃÃ  !
=
ÃÃ" #
BitConverter
ÃÃ$ 0
.
ÃÃ0 1
GetBytes
ÃÃ1 9
(
ÃÃ9 :
(
ÃÃ: ;
bool
ÃÃ; ?
)
ÃÃ? @
v
ÃÃ@ A
)
ÃÃA B
;
ÃÃB C
data
ÕÕ  
[
ÕÕ  !
offset
ÕÕ! '
++
ÕÕ' )
]
ÕÕ) *
=
ÕÕ+ ,
d
ÕÕ- .
[
ÕÕ. /
$num
ÕÕ/ 0
]
ÕÕ0 1
;
ÕÕ1 2
}
ŒŒ 
}
œœ 
return
–– 
data
–– 
;
––  
}
—— 
else
““ 
if
““ 
(
““ 
tt
““ 
==
““ 
typeof
““ %
(
““% &
Char
““& *
)
““* +
)
““+ ,
{
”” 
int
‘‘ 
offset
‘‘ 
=
‘‘  
$num
‘‘! "
;
‘‘" #
Array
’’ 
a
’’ 
=
’’ 
(
’’ 
Array
’’ $
)
’’$ %
obj
’’% (
;
’’( )
byte
÷÷ 
[
÷÷ 
]
÷÷ 
data
÷÷ 
=
÷÷  !
new
÷÷" %
byte
÷÷& *
[
÷÷* +
a
÷÷+ ,
.
÷÷, -
Length
÷÷- 3
]
÷÷3 4
;
÷÷4 5
for
◊◊ 
(
◊◊ 
int
◊◊ 
i
◊◊ 
=
◊◊  
$num
◊◊! "
;
◊◊" #
i
◊◊$ %
<
◊◊& '
a
◊◊( )
.
◊◊) *
Length
◊◊* 0
;
◊◊0 1
i
◊◊2 3
++
◊◊3 5
)
◊◊5 6
{
ÿÿ 
var
ŸŸ 
v
ŸŸ 
=
ŸŸ 
a
ŸŸ  !
.
ŸŸ! "
GetValue
ŸŸ" *
(
ŸŸ* +
i
ŸŸ+ ,
)
ŸŸ, -
;
ŸŸ- .
if
⁄⁄ 
(
⁄⁄ 
v
⁄⁄ 
!=
⁄⁄  
null
⁄⁄! %
)
⁄⁄% &
{
€€ 
var
‹‹ 
d
‹‹  !
=
‹‹" #
BitConverter
‹‹$ 0
.
‹‹0 1
GetBytes
‹‹1 9
(
‹‹9 :
(
‹‹: ;
char
‹‹; ?
)
‹‹? @
v
‹‹@ A
)
‹‹A B
;
‹‹B C
data
››  
[
››  !
offset
››! '
++
››' )
]
››) *
=
››+ ,
d
››- .
[
››. /
$num
››/ 0
]
››0 1
;
››1 2
}
ﬁﬁ 
}
ﬂﬂ 
return
‡‡ 
data
‡‡ 
;
‡‡  
}
·· 
else
‚‚ 
if
‚‚ 
(
‚‚ 
tt
‚‚ 
==
‚‚ 
typeof
‚‚ %
(
‚‚% &
Double
‚‚& ,
)
‚‚, -
)
‚‚- .
{
„„ 
int
‰‰ 
offset
‰‰ 
=
‰‰  
$num
‰‰! "
;
‰‰" #
Array
ÂÂ 
a
ÂÂ 
=
ÂÂ 
(
ÂÂ 
Array
ÂÂ $
)
ÂÂ$ %
obj
ÂÂ% (
;
ÂÂ( )
byte
ÊÊ 
[
ÊÊ 
]
ÊÊ 
data
ÊÊ 
=
ÊÊ  !
new
ÊÊ" %
byte
ÊÊ& *
[
ÊÊ* +
a
ÊÊ+ ,
.
ÊÊ, -
Length
ÊÊ- 3
*
ÊÊ4 5
$num
ÊÊ6 7
]
ÊÊ7 8
;
ÊÊ8 9
for
ÁÁ 
(
ÁÁ 
int
ÁÁ 
i
ÁÁ 
=
ÁÁ  
$num
ÁÁ! "
;
ÁÁ" #
i
ÁÁ$ %
<
ÁÁ& '
a
ÁÁ( )
.
ÁÁ) *
Length
ÁÁ* 0
;
ÁÁ0 1
i
ÁÁ2 3
++
ÁÁ3 5
)
ÁÁ5 6
{
ËË 
var
ÈÈ 
v
ÈÈ 
=
ÈÈ 
a
ÈÈ  !
.
ÈÈ! "
GetValue
ÈÈ" *
(
ÈÈ* +
i
ÈÈ+ ,
)
ÈÈ, -
;
ÈÈ- .
if
ÍÍ 
(
ÍÍ 
v
ÍÍ 
!=
ÍÍ  
null
ÍÍ! %
)
ÍÍ% &
{
ÎÎ 
var
ÏÏ 
d
ÏÏ  !
=
ÏÏ" #
BitConverter
ÏÏ$ 0
.
ÏÏ0 1
GetBytes
ÏÏ1 9
(
ÏÏ9 :
(
ÏÏ: ;
double
ÏÏ; A
)
ÏÏA B
v
ÏÏB C
)
ÏÏC D
;
ÏÏD E
data
ÌÌ  
[
ÌÌ  !
offset
ÌÌ! '
++
ÌÌ' )
]
ÌÌ) *
=
ÌÌ+ ,
d
ÌÌ- .
[
ÌÌ. /
$num
ÌÌ/ 0
]
ÌÌ0 1
;
ÌÌ1 2
data
ÓÓ  
[
ÓÓ  !
offset
ÓÓ! '
++
ÓÓ' )
]
ÓÓ) *
=
ÓÓ+ ,
d
ÓÓ- .
[
ÓÓ. /
$num
ÓÓ/ 0
]
ÓÓ0 1
;
ÓÓ1 2
data
ÔÔ  
[
ÔÔ  !
offset
ÔÔ! '
++
ÔÔ' )
]
ÔÔ) *
=
ÔÔ+ ,
d
ÔÔ- .
[
ÔÔ. /
$num
ÔÔ/ 0
]
ÔÔ0 1
;
ÔÔ1 2
data
  
[
  !
offset
! '
++
' )
]
) *
=
+ ,
d
- .
[
. /
$num
/ 0
]
0 1
;
1 2
data
ÒÒ  
[
ÒÒ  !
offset
ÒÒ! '
++
ÒÒ' )
]
ÒÒ) *
=
ÒÒ+ ,
d
ÒÒ- .
[
ÒÒ. /
$num
ÒÒ/ 0
]
ÒÒ0 1
;
ÒÒ1 2
data
ÚÚ  
[
ÚÚ  !
offset
ÚÚ! '
++
ÚÚ' )
]
ÚÚ) *
=
ÚÚ+ ,
d
ÚÚ- .
[
ÚÚ. /
$num
ÚÚ/ 0
]
ÚÚ0 1
;
ÚÚ1 2
data
ÛÛ  
[
ÛÛ  !
offset
ÛÛ! '
++
ÛÛ' )
]
ÛÛ) *
=
ÛÛ+ ,
d
ÛÛ- .
[
ÛÛ. /
$num
ÛÛ/ 0
]
ÛÛ0 1
;
ÛÛ1 2
data
ÙÙ  
[
ÙÙ  !
offset
ÙÙ! '
++
ÙÙ' )
]
ÙÙ) *
=
ÙÙ+ ,
d
ÙÙ- .
[
ÙÙ. /
$num
ÙÙ/ 0
]
ÙÙ0 1
;
ÙÙ1 2
}
ıı 
}
ˆˆ 
return
˜˜ 
data
˜˜ 
;
˜˜  
}
¯¯ 
else
˘˘ 
if
˘˘ 
(
˘˘ 
tt
˘˘ 
==
˘˘ 
typeof
˘˘ %
(
˘˘% &
float
˘˘& +
)
˘˘+ ,
)
˘˘, -
{
˙˙ 
int
˚˚ 
offset
˚˚ 
=
˚˚  
$num
˚˚! "
;
˚˚" #
Array
¸¸ 
a
¸¸ 
=
¸¸ 
(
¸¸ 
Array
¸¸ $
)
¸¸$ %
obj
¸¸% (
;
¸¸( )
byte
˝˝ 
[
˝˝ 
]
˝˝ 
data
˝˝ 
=
˝˝  !
new
˝˝" %
byte
˝˝& *
[
˝˝* +
a
˝˝+ ,
.
˝˝, -
Length
˝˝- 3
*
˝˝4 5
$num
˝˝6 7
]
˝˝7 8
;
˝˝8 9
for
˛˛ 
(
˛˛ 
int
˛˛ 
i
˛˛ 
=
˛˛  
$num
˛˛! "
;
˛˛" #
i
˛˛$ %
<
˛˛& '
a
˛˛( )
.
˛˛) *
Length
˛˛* 0
;
˛˛0 1
i
˛˛2 3
++
˛˛3 5
)
˛˛5 6
{
ˇˇ 
var
ÄÄ 
v
ÄÄ 
=
ÄÄ 
a
ÄÄ  !
.
ÄÄ! "
GetValue
ÄÄ" *
(
ÄÄ* +
i
ÄÄ+ ,
)
ÄÄ, -
;
ÄÄ- .
if
ÅÅ 
(
ÅÅ 
v
ÅÅ 
!=
ÅÅ  
null
ÅÅ! %
)
ÅÅ% &
{
ÇÇ 
var
ÉÉ 
d
ÉÉ  !
=
ÉÉ" #
BitConverter
ÉÉ$ 0
.
ÉÉ0 1
GetBytes
ÉÉ1 9
(
ÉÉ9 :
(
ÉÉ: ;
float
ÉÉ; @
)
ÉÉ@ A
v
ÉÉA B
)
ÉÉB C
;
ÉÉC D
data
ÑÑ  
[
ÑÑ  !
offset
ÑÑ! '
++
ÑÑ' )
]
ÑÑ) *
=
ÑÑ+ ,
d
ÑÑ- .
[
ÑÑ. /
$num
ÑÑ/ 0
]
ÑÑ0 1
;
ÑÑ1 2
data
ÖÖ  
[
ÖÖ  !
offset
ÖÖ! '
++
ÖÖ' )
]
ÖÖ) *
=
ÖÖ+ ,
d
ÖÖ- .
[
ÖÖ. /
$num
ÖÖ/ 0
]
ÖÖ0 1
;
ÖÖ1 2
data
ÜÜ  
[
ÜÜ  !
offset
ÜÜ! '
++
ÜÜ' )
]
ÜÜ) *
=
ÜÜ+ ,
d
ÜÜ- .
[
ÜÜ. /
$num
ÜÜ/ 0
]
ÜÜ0 1
;
ÜÜ1 2
data
áá  
[
áá  !
offset
áá! '
++
áá' )
]
áá) *
=
áá+ ,
d
áá- .
[
áá. /
$num
áá/ 0
]
áá0 1
;
áá1 2
data
àà  
[
àà  !
offset
àà! '
++
àà' )
]
àà) *
=
àà+ ,
d
àà- .
[
àà. /
$num
àà/ 0
]
àà0 1
;
àà1 2
data
ââ  
[
ââ  !
offset
ââ! '
++
ââ' )
]
ââ) *
=
ââ+ ,
d
ââ- .
[
ââ. /
$num
ââ/ 0
]
ââ0 1
;
ââ1 2
data
ää  
[
ää  !
offset
ää! '
++
ää' )
]
ää) *
=
ää+ ,
d
ää- .
[
ää. /
$num
ää/ 0
]
ää0 1
;
ää1 2
data
ãã  
[
ãã  !
offset
ãã! '
++
ãã' )
]
ãã) *
=
ãã+ ,
d
ãã- .
[
ãã. /
$num
ãã/ 0
]
ãã0 1
;
ãã1 2
}
åå 
}
çç 
return
éé 
data
éé 
;
éé  
}
èè 
else
êê 
if
êê 
(
êê 
tt
êê 
==
êê 
typeof
êê %
(
êê% &
DateTime
êê& .
)
êê. /
)
êê/ 0
{
ëë 
int
íí 
offset
íí 
=
íí  
$num
íí! "
;
íí" #
Array
ìì 
a
ìì 
=
ìì 
(
ìì 
Array
ìì $
)
ìì$ %
obj
ìì% (
;
ìì( )
byte
îî 
[
îî 
]
îî 
data
îî 
=
îî  !
new
îî" %
byte
îî& *
[
îî* +
a
îî+ ,
.
îî, -
Length
îî- 3
*
îî4 5
$num
îî6 7
]
îî7 8
;
îî8 9
for
ïï 
(
ïï 
int
ïï 
i
ïï 
=
ïï  
$num
ïï! "
;
ïï" #
i
ïï$ %
<
ïï& '
a
ïï( )
.
ïï) *
Length
ïï* 0
;
ïï0 1
i
ïï2 3
++
ïï3 5
)
ïï5 6
{
ññ 
var
óó 
v
óó 
=
óó 
a
óó  !
.
óó! "
GetValue
óó" *
(
óó* +
i
óó+ ,
)
óó, -
;
óó- .
if
òò 
(
òò 
v
òò 
!=
òò  
null
òò! %
)
òò% &
{
ôô 
var
öö 
d
öö  !
=
öö" #
BitConverter
öö$ 0
.
öö0 1
GetBytes
öö1 9
(
öö9 :
(
öö: ;
(
öö; <
DateTime
öö< D
)
ööD E
v
ööE F
)
ööF G
.
ööG H
Ticks
ööH M
)
ööM N
;
ööN O
data
õõ  
[
õõ  !
offset
õõ! '
++
õõ' )
]
õõ) *
=
õõ+ ,
d
õõ- .
[
õõ. /
$num
õõ/ 0
]
õõ0 1
;
õõ1 2
data
úú  
[
úú  !
offset
úú! '
++
úú' )
]
úú) *
=
úú+ ,
d
úú- .
[
úú. /
$num
úú/ 0
]
úú0 1
;
úú1 2
data
ùù  
[
ùù  !
offset
ùù! '
++
ùù' )
]
ùù) *
=
ùù+ ,
d
ùù- .
[
ùù. /
$num
ùù/ 0
]
ùù0 1
;
ùù1 2
data
ûû  
[
ûû  !
offset
ûû! '
++
ûû' )
]
ûû) *
=
ûû+ ,
d
ûû- .
[
ûû. /
$num
ûû/ 0
]
ûû0 1
;
ûû1 2
data
üü  
[
üü  !
offset
üü! '
++
üü' )
]
üü) *
=
üü+ ,
d
üü- .
[
üü. /
$num
üü/ 0
]
üü0 1
;
üü1 2
data
††  
[
††  !
offset
††! '
++
††' )
]
††) *
=
††+ ,
d
††- .
[
††. /
$num
††/ 0
]
††0 1
;
††1 2
data
°°  
[
°°  !
offset
°°! '
++
°°' )
]
°°) *
=
°°+ ,
d
°°- .
[
°°. /
$num
°°/ 0
]
°°0 1
;
°°1 2
data
¢¢  
[
¢¢  !
offset
¢¢! '
++
¢¢' )
]
¢¢) *
=
¢¢+ ,
d
¢¢- .
[
¢¢. /
$num
¢¢/ 0
]
¢¢0 1
;
¢¢1 2
}
££ 
}
§§ 
return
•• 
data
•• 
;
••  
}
¶¶ 
else
ßß 
if
ßß 
(
ßß 
tt
ßß 
.
ßß 
IsClass
ßß #
)
ßß# $
{
®® 
Array
©© 
a
©© 
=
©© 
(
©© 
Array
©© $
)
©©$ %
obj
©©% (
;
©©( )
byte
™™ 
[
™™ 
]
™™ 
data
™™ 
=
™™  !
new
™™" %
byte
™™& *
[
™™* +
a
™™+ ,
.
™™, -
Length
™™- 3
*
™™4 5
$num
™™6 7
]
™™7 8
;
™™8 9
for
´´ 
(
´´ 
int
´´ 
i
´´ 
=
´´  
$num
´´! "
;
´´" #
i
´´$ %
<
´´& '
a
´´( )
.
´´) *
Length
´´* 0
;
´´0 1
i
´´2 3
++
´´3 5
)
´´5 6
{
¨¨ 
var
≠≠ 
v
≠≠ 
=
≠≠ 
a
≠≠  !
.
≠≠! "
GetValue
≠≠" *
(
≠≠* +
i
≠≠+ ,
)
≠≠, -
;
≠≠- .
if
ÆÆ 
(
ÆÆ 
v
ÆÆ 
!=
ÆÆ  
null
ÆÆ! %
)
ÆÆ% &
{
ØØ 
var
∞∞ 
d
∞∞  !
=
∞∞" #
BitConverter
∞∞$ 0
.
∞∞0 1
GetBytes
∞∞1 9
(
∞∞9 :
(
∞∞: ;
(
∞∞; <
DateTime
∞∞< D
)
∞∞D E
v
∞∞E F
)
∞∞F G
.
∞∞G H
Ticks
∞∞H M
)
∞∞M N
;
∞∞N O
}
≤≤ 
}
≥≥ 
return
¥¥ 
data
¥¥ 
;
¥¥  
}
µµ 
}
∂∂ 
return
∑∑ 
null
∑∑ 
;
∑∑ 
}
∏∏ 	
}
ππ 
}∫∫ •$
vD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\Cache.cs
	namespace 	
Infoline
 
. 
Helper 
{ 
public 

class 
Cache 
< 
TKey 
, 
TValue #
># $
{		 

Dictionary 
< 
TKey 
, 
TValue 
>  
dic! $
=% &
new' *

Dictionary+ 5
<5 6
TKey6 :
,: ;
TValue< B
>B C
(C D
)D E
;E F
public 
IEnumerable 
< 
TValue !
>! "
Values# )
{* +
get, /
{0 1
return2 8
dic9 <
.< =
Values= C
;C D
}E F
}G H
public 
IEnumerable 
< 
TKey 
>  
Keys! %
{& '
get( +
{, -
return. 4
dic5 8
.8 9
Keys9 =
;= >
}? @
}A B
public 
int 
Size 
{ 
get 
; 
private &
set' *
;* +
}, -
public 
Cache 
( 
int 
size 
) 
{ 	
Size 
= 
size 
; 
} 	
public 
bool 
TryGet 
( 
TKey 
key  #
,# $
out% (
TValue) /
value0 5
)5 6
{ 	
return 
dic 
. 
TryGetValue "
(" #
key# &
,& '
out( +
value, 1
)1 2
;2 3
} 	
public 
void 
Remove 
( 
TKey 
key  #
)# $
{ 	
if 
( 
dic 
. 
ContainsKey 
(  
key  #
)# $
)$ %
dic 
. 
Remove 
( 
key 
) 
;  
} 	
public 
void 
Add 
( 
TKey 
key  
,  !
TValue" (
value) .
). /
{ 	
try 
{ 
if"" 
("" 
!"" 
dic"" 
."" 
ContainsKey"" $
(""$ %
key""% (
)""( )
)"") *
{## 
dic$$ 
.$$ 
Add$$ 
($$ 
key$$ 
,$$  
value$$! &
)$$& '
;$$' (
int&& 
size&& 
=&& 
dic&& "
.&&" #
Count&&# (
-&&) *
Size&&+ /
;&&/ 0
dic'' 
.'' 
Keys'' 
.'' 
Take'' !
(''! "
size''" &
)''& '
.''' (
ToList''( .
(''. /
)''/ 0
.''0 1
ForEach''1 8
(''8 9
a''9 :
=>''; =
dic''> A
.''A B
Remove''B H
(''H I
a''I J
)''J K
)''K L
;''L M
}(( 
else)) 
dic** 
[** 
key** 
]** 
=** 
value** $
;**$ %
}++ 
catch,, 
(,, 
	Exception,, 
),, 
{-- 
}00 
}11 	
public22 
TValue22 
Get22 
(22 
TKey22 
key22 "
,22" #
Func22$ (
<22( )
TValue22) /
>22/ 0
create221 7
)227 8
{33 	
TValue44 
val44 
;44 
if55 
(55 
!55 
dic55 
.55 
TryGetValue55  
(55  !
key55! $
,55$ %
out55& )
val55* -
)55- .
)55. /
{66 
val77 
=77 
create77 
(77 
)77 
;77 
Add88 
(88 
key88 
,88 
val88 
)88 
;88 
}99 
return:: 
val:: 
;:: 
};; 	
}>> 
}?? à;
wD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\Crypto.cs
	namespace		 	
Infoline		
 
.		 
	Framework		 
.		 
Helper		 #
{

 
public 

static 
class 
Crypto 
{ 
private 
static 
byte 
[ 
] 
_initVector )
=* +
{, -
$num. 2
,2 3
$num4 8
,8 9
$num: >
,> ?
$num@ D
,D E
$numF J
,J K
$numL P
,P Q
$numR V
,V W
$numX \
,\ ]
$num^ b
,b c
$numd h
,h i
$numj n
,n o
$nump t
,t u
$numv z
,z {
$num	| Ä
,
Ä Å
$num
Ç Ü
,
Ü á
$num
à å
}
ç é
;
é è
public 
static 
string 
Decrypt $
($ %
string% +
_value, 2
,2 3
string4 :
_key; ?
=@ A
$strB L
)L M
{ 	
if 
( 
_value 
== 
null 
|| !
string" (
.( )
IsNullOrEmpty) 6
(6 7
_key7 ;
); <
)= >
return? E
_valueF L
;L M
ICryptoTransform 
ct 
=  !
null" &
;& '
byte 
[ 
] 
byt 
; 
byte 
[ 
] 
_result 
; 
try 
{ 
using 
( 
var 
mCSP 
=  !
new" %
RijndaelManaged& 5
(5 6
)6 7
)7 8
{ 
mCSP 
. 
Key 
= 
System %
.% &
Text& *
.* +
Encoding+ 3
.3 4
ASCII4 9
.9 :
GetBytes: B
(B C
_keyC G
)G H
;H I
mCSP 
. 
IV 
= 
_initVector )
;) *
ct 
= 
mCSP 
. 
CreateDecryptor -
(- .
mCSP. 2
.2 3
Key3 6
,6 7
mCSP8 <
.< =
IV= ?
)? @
;@ A
byt 
= 
Convert !
.! "
FromBase64String" 2
(2 3
_value3 9
.9 :
ToString: B
(B C
)C D
)D E
;E F
using!! 
(!! 
var!! 
ms!! !
=!!" #
new!!$ '
MemoryStream!!( 4
(!!4 5
)!!5 6
)!!6 7
{"" 
using## 
(## 
var## "
cs### %
=##& '
new##( +
CryptoStream##, 8
(##8 9
ms##9 ;
,##; <
ct##= ?
,##? @
CryptoStreamMode##A Q
.##Q R
Write##R W
)##W X
)##X Y
{$$ 
cs%% 
.%% 
Write%% $
(%%$ %
byt%%% (
,%%( )
$num%%* +
,%%+ ,
byt%%- 0
.%%0 1
Length%%1 7
)%%7 8
;%%8 9
cs&& 
.&& 
FlushFinalBlock&& .
(&&. /
)&&/ 0
;&&0 1
cs(( 
.(( 
Close(( $
((($ %
)((% &
;((& '
_result)) #
=))$ %
ms))& (
.))( )
ToArray))) 0
())0 1
)))1 2
;))2 3
}** 
}++ 
},, 
}-- 
catch.. 
{// 
_result00 
=00 
null00 
;00 
}11 
finally22 
{33 
if44 
(44 
ct44 
!=44 
null44 
)44 
ct55 
.55 
Dispose55 
(55 
)55  
;55  !
}66 
return88 
ASCIIEncoding88  
.88  !
UTF888! %
.88% &
	GetString88& /
(88/ 0
_result880 7
)887 8
;888 9
}99 	
public;; 
static;; 
string;; 
Encrypt;; $
(;;$ %
string;;% +
_value;;, 2
,;;2 3
string;;4 :
_key;;; ?
=;;@ A
$str;;B L
);;L M
{<< 	
if== 
(== 
_value== 
==== 
null== 
||== !
string==" (
.==( )
IsNullOrEmpty==) 6
(==6 7
_key==7 ;
)==; <
)==< =
return==> D
_value==E K
;==K L
byte?? 
[?? 
]?? 
Value?? 
=?? 
Encoding?? #
.??# $
UTF8??$ (
.??( )
GetBytes??) 1
(??1 2
_value??2 8
.??8 9
ToString??9 A
(??A B
)??B C
)??C D
;??D E
using@@ 
(@@ 
var@@ 
mCSP@@ 
=@@ 
new@@ !
RijndaelManaged@@" 1
(@@1 2
)@@2 3
)@@3 4
{AA 
mCSPCC 
.CC 
KeyCC 
=CC 
SystemCC !
.CC! "
TextCC" &
.CC& '
EncodingCC' /
.CC/ 0
ASCIICC0 5
.CC5 6
GetBytesCC6 >
(CC> ?
_keyCC? C
)CCC D
;CCD E
mCSPDD 
.DD 
IVDD 
=DD 
_initVectorDD %
;DD% &
usingEE 
(EE 
varEE 
ctEE 
=EE 
mCSPEE  $
.EE$ %
CreateEncryptorEE% 4
(EE4 5
mCSPEE5 9
.EE9 :
KeyEE: =
,EE= >
mCSPEE? C
.EEC D
IVEED F
)EEF G
)EEG H
{FF 
usingGG 
(GG 
varGG 
msGG !
=GG" #
newGG$ '
MemoryStreamGG( 4
(GG4 5
)GG5 6
)GG6 7
{HH 
usingII 
(II 
varII "
csII# %
=II& '
newII( +
CryptoStreamII, 8
(II8 9
msII9 ;
,II; <
ctII= ?
,II? @
CryptoStreamModeIIA Q
.IIQ R
WriteIIR W
)IIW X
)IIX Y
{JJ 
csKK 
.KK 
WriteKK $
(KK$ %
ValueKK% *
,KK* +
$numKK, -
,KK- .
ValueKK/ 4
.KK4 5
LengthKK5 ;
)KK; <
;KK< =
csLL 
.LL 
FlushFinalBlockLL .
(LL. /
)LL/ 0
;LL0 1
csMM 
.MM 
CloseMM $
(MM$ %
)MM% &
;MM& '
returnNN "
ConvertNN# *
.NN* +
ToBase64StringNN+ 9
(NN9 :
msNN: <
.NN< =
ToArrayNN= D
(NND E
)NNE F
)NNF G
;NNG H
}OO 
}PP 
}QQ 
}RR 
}SS 	
}TT 
}UU ßL
ÉD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\CryptographyHelper.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Helper #
{ 
public

 

class

 
CryptographyHelper

 #
{ 
private 
const 
string 
	publicKey &
=' (
$str) ;
;; <
private 
const 
string 
	vectorKey &
=' (
$str) ;
;; <
private 
readonly 
ICryptoTransform )

_decryptor* 4
;4 5
private 
readonly 
ICryptoTransform )

_encryptor* 4
;4 5
private 
static 
readonly 
byte  $
[$ %
]% &
IV' )
=* +
Encoding, 4
.4 5
UTF85 9
.9 :
GetBytes: B
(B C
	vectorKeyC L
)L M
;M N
private 
readonly 
byte 
[ 
] 
	_password  )
;) *
private 
readonly 
RijndaelManaged (
_cipher) 0
;0 1
private 
ICryptoTransform  
	Decryptor! *
{+ ,
get- 0
{1 2
return3 9

_decryptor: D
;D E
}F G
}H I
private 
ICryptoTransform  
	Encryptor! *
{+ ,
get- 0
{1 2
return3 9

_encryptor: D
;D E
}F G
}H I
public 
CryptographyHelper !
(! "
string" (
password) 1
=2 3
	publicKey4 =
)= >
{ 	
	_password 
= 
( 
Encoding !
.! "
ASCII" '
.' (
GetBytes( 0
(0 1
password1 9
)9 :
): ;
;; <
_cipher 
= 
new 
RijndaelManaged )
() *
)* +
;+ ,

_decryptor 
= 
_cipher  
.  !
CreateDecryptor! 0
(0 1
	_password1 :
,: ;
(< =
IV= ?
)? @
)@ A
;A B

_encryptor 
= 
_cipher  
.  !
CreateEncryptor! 0
(0 1
	_password1 :
,: ;
(< =
IV= ?
)? @
)@ A
;A B
} 	
public 
string 
Decrypt 
( 
string $
text% )
)) *
{   	
try!! 
{"" 
text## 
=## 
text## 
.## 
Trim##  
(##  !
)##! "
;##" #
var$$ 
isBase64String$$ "
=$$# $
($$% &
text$$& *
.$$* +
Length$$+ 1
%$$2 3
$num$$4 5
==$$6 8
$num$$9 :
)$$: ;
&&$$< >
Regex$$? D
.$$D E
IsMatch$$E L
($$L M
text$$M Q
,$$Q R
$str$$S m
,$$m n
RegexOptions$$o {
.$${ |
None	$$| Ä
)
$$Ä Å
;
$$Å Ç
if&& 
(&& 
isBase64String&& "
)&&" #
{'' 
byte(( 
[(( 
](( 
input((  
=((! "
Convert((# *
.((* +
FromBase64String((+ ;
(((; <
text((< @
)((@ A
;((A B
var** 
newClearData** $
=**% &
	Decryptor**' 0
.**0 1
TransformFinalBlock**1 D
(**D E
input**E J
,**J K
$num**L M
,**M N
input**O T
.**T U
Length**U [
)**[ \
;**\ ]
return++ 
Encoding++ #
.++# $
UTF8++$ (
.++( )
	GetString++) 2
(++2 3
newClearData++3 ?
)++? @
;++@ A
},, 
else-- 
return.. 
text.. 
;..  
}// 
catch00 
{11 
return22 
null22 
;22 
}33 
}44 	
public66 
string66 
Encrypt66 
(66 
string66 $
text66% )
)66) *
{77 	
var88 
buffer88 
=88 
Encoding88 !
.88! "
UTF888" &
.88& '
GetBytes88' /
(88/ 0
text880 4
)884 5
;885 6
return99 
Convert99 
.99 
ToBase64String99 )
(99) *
	Encryptor99* 3
.993 4
TransformFinalBlock994 G
(99G H
buffer99H N
,99N O
$num99P Q
,99Q R
buffer99S Y
.99Y Z
Length99Z `
)99` a
)99a b
;99b c
}:: 	
}<< 
public>> 

class>>  
CryptographyHelperV2>> %
{?? 
privateAA 
constAA 
stringAA 
	publicKeyAA &
=AA' (
$strAA) =
;AA= >
privateBB 
constBB 
stringBB 
	vectorKeyBB &
=BB' (
$strBB) ;
;BB; <
privateDD 
readonlyDD 
ICryptoTransformDD )

_decryptorDD* 4
;DD4 5
privateEE 
readonlyEE 
ICryptoTransformEE )

_encryptorEE* 4
;EE4 5
privateFF 
staticFF 
readonlyFF 
byteFF  $
[FF$ %
]FF% &
IVFF' )
=FF* +
EncodingFF, 4
.FF4 5
UTF8FF5 9
.FF9 :
GetBytesFF: B
(FFB C
	vectorKeyFFC L
)FFL M
;FFM N
privateGG 
readonlyGG 
byteGG 
[GG 
]GG 
	_passwordGG  )
;GG) *
privateHH 
readonlyHH 
RijndaelManagedHH (
_cipherHH) 0
;HH0 1
privateII 
ICryptoTransformII  
	DecryptorII! *
{II+ ,
getII- 0
{II1 2
returnII3 9

_decryptorII: D
;IID E
}IIF G
}IIH I
privateJJ 
ICryptoTransformJJ  
	EncryptorJJ! *
{JJ+ ,
getJJ- 0
{JJ1 2
returnJJ3 9

_encryptorJJ: D
;JJD E
}JJF G
}JJH I
publicLL  
CryptographyHelperV2LL #
(LL# $
stringLL$ *

_publicKeyLL+ 5
=LL6 7
	publicKeyLL8 A
)LLA B
{MM 	
varNN 
md5NN 
=NN 
newNN $
MD5CryptoServiceProviderNN 2
(NN2 3
)NN3 4
;NN4 5
	_passwordOO 
=OO 
md5OO 
.OO 
ComputeHashOO '
(OO' (
EncodingOO( 0
.OO0 1
ASCIIOO1 6
.OO6 7
GetBytesOO7 ?
(OO? @

_publicKeyOO@ J
)OOJ K
)OOK L
;OOL M
_cipherPP 
=PP 
newPP 
RijndaelManagedPP )
(PP) *
)PP* +
;PP+ ,

_decryptorQQ 
=QQ 
_cipherQQ  
.QQ  !
CreateDecryptorQQ! 0
(QQ0 1
	_passwordQQ1 :
,QQ: ;
md5QQ< ?
.QQ? @
ComputeHashQQ@ K
(QQK L
IVQQL N
)QQN O
)QQO P
;QQP Q

_encryptorRR 
=RR 
_cipherRR  
.RR  !
CreateEncryptorRR! 0
(RR0 1
	_passwordRR1 :
,RR: ;
md5RR< ?
.RR? @
ComputeHashRR@ K
(RRK L
IVRRL N
)RRN O
)RRO P
;RRP Q
}SS 	
publicUU 
stringUU 
DecryptUU 
(UU 
stringUU $
textUU% )
)UU) *
{VV 	
byteWW 
[WW 
]WW 
inputWW 
=WW 
ConvertWW "
.WW" #
FromBase64StringWW# 3
(WW3 4
textWW4 8
)WW8 9
;WW9 :
varYY 
newClearDataYY 
=YY 
	DecryptorYY (
.YY( )
TransformFinalBlockYY) <
(YY< =
inputYY= B
,YYB C
$numYYD E
,YYE F
inputYYG L
.YYL M
LengthYYM S
)YYS T
;YYT U
returnZZ 
EncodingZZ 
.ZZ 
UTF8ZZ  
.ZZ  !
	GetStringZZ! *
(ZZ* +
newClearDataZZ+ 7
)ZZ7 8
;ZZ8 9
}[[ 	
public]] 
string]] 
Encrypt]] 
(]] 
string]] $
text]]% )
)]]) *
{^^ 	
var__ 
buffer__ 
=__ 
Encoding__ !
.__! "
UTF8__" &
.__& '
GetBytes__' /
(__/ 0
text__0 4
)__4 5
;__5 6
return`` 
Convert`` 
.`` 
ToBase64String`` )
(``) *
	Encryptor``* 3
.``3 4
TransformFinalBlock``4 G
(``G H
buffer``H N
,``N O
$num``P Q
,``Q R
buffer``S Y
.``Y Z
Length``Z `
)``` a
)``a b
;``b c
}aa 	
}bb 
}dd Ï…
uD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\Date.cs
	namespace 	
System
 
{ 
[ 
Serializable 
] 
public   

struct   
Date   
:   
IComparable   $
,  $ %
IFormattable  & 2
,  2 3
ISerializable  4 A
,  A B
IComparable  C N
<  N O
Date  O S
>  S T
,  T U

IEquatable  V `
<  ` a
Date  a e
>  e f
{!! 
private"" 
DateTime"" 
_dt"" 
;"" 
public$$ 
static$$ 
readonly$$ 
Date$$ #
MaxValue$$$ ,
=$$- .
new$$/ 2
Date$$3 7
($$7 8
DateTime$$8 @
.$$@ A
MaxValue$$A I
)$$I J
;$$J K
public%% 
static%% 
readonly%% 
Date%% #
MinValue%%$ ,
=%%- .
new%%/ 2
Date%%3 7
(%%7 8
DateTime%%8 @
.%%@ A
MinValue%%A I
)%%I J
;%%J K
public'' 
Date'' 
('' 
int'' 
year'' 
,'' 
int'' !
month''" '
,''' (
int'') ,
day''- 0
)''0 1
{(( 	
this)) 
.)) 
_dt)) 
=)) 
new)) 
DateTime)) #
())# $
year))$ (
,))( )
month))* /
,))/ 0
day))1 4
)))4 5
;))5 6
}** 	
public,, 
Date,, 
(,, 
DateTime,, 
dateTime,, %
),,% &
{-- 	
this.. 
... 
_dt.. 
=.. 
dateTime.. 
...  
AddTicks..  (
(..( )
-..) *
dateTime..* 2
...2 3
Ticks..3 8
%..9 :
TimeSpan..; C
...C D
TicksPerDay..D O
)..O P
;..P Q
}// 	
private11 
Date11 
(11 
SerializationInfo11 &
info11' +
,11+ ,
StreamingContext11- =
context11> E
)11E F
{22 	
this33 
.33 
_dt33 
=33 
DateTime33 
.33  
FromFileTime33  ,
(33, -
info33- 1
.331 2
GetInt64332 :
(33: ;
$str33; B
)33B C
)33C D
;33D E
}44 	
public66 
static66 
TimeSpan66 
operator66 '
-66( )
(66) *
Date66* .
d166/ 1
,661 2
Date663 7
d2668 :
)66: ;
{77 	
return88 
d188 
.88 
_dt88 
-88 
d288 
.88 
_dt88 "
;88" #
}99 	
public;; 
static;; 
Date;; 
operator;; #
-;;$ %
(;;% &
Date;;& *
d;;+ ,
,;;, -
TimeSpan;;. 6
t;;7 8
);;8 9
{<< 	
return== 
new== 
Date== 
(== 
d== 
.== 
_dt== !
-==" #
t==$ %
)==% &
;==& '
}>> 	
public@@ 
static@@ 
bool@@ 
operator@@ #
!=@@$ &
(@@& '
Date@@' +
d1@@, .
,@@. /
Date@@0 4
d2@@5 7
)@@7 8
{AA 	
returnBB 
d1BB 
.BB 
_dtBB 
!=BB 
d2BB 
.BB  
_dtBB  #
;BB# $
}CC 	
publicEE 
staticEE 
DateEE 
operatorEE #
+EE$ %
(EE% &
DateEE& *
dEE+ ,
,EE, -
TimeSpanEE. 6
tEE7 8
)EE8 9
{FF 	
returnGG 
newGG 
DateGG 
(GG 
dGG 
.GG 
_dtGG !
+GG" #
tGG$ %
)GG% &
;GG& '
}HH 	
publicJJ 
staticJJ 
boolJJ 
operatorJJ #
<JJ$ %
(JJ% &
DateJJ& *
d1JJ+ -
,JJ- .
DateJJ/ 3
d2JJ4 6
)JJ6 7
{KK 	
returnLL 
d1LL 
.LL 
_dtLL 
<LL 
d2LL 
.LL 
_dtLL "
;LL" #
}MM 	
publicOO 
staticOO 
boolOO 
operatorOO #
<=OO$ &
(OO& '
DateOO' +
d1OO, .
,OO. /
DateOO0 4
d2OO5 7
)OO7 8
{PP 	
returnQQ 
d1QQ 
.QQ 
_dtQQ 
<=QQ 
d2QQ 
.QQ  
_dtQQ  #
;QQ# $
}RR 	
publicTT 
staticTT 
boolTT 
operatorTT #
==TT$ &
(TT& '
DateTT' +
d1TT, .
,TT. /
DateTT0 4
d2TT5 7
)TT7 8
{UU 	
returnVV 
d1VV 
.VV 
_dtVV 
==VV 
d2VV 
.VV  
_dtVV  #
;VV# $
}WW 	
publicYY 
staticYY 
boolYY 
operatorYY #
>YY$ %
(YY% &
DateYY& *
d1YY+ -
,YY- .
DateYY/ 3
d2YY4 6
)YY6 7
{ZZ 	
return[[ 
d1[[ 
.[[ 
_dt[[ 
>[[ 
d2[[ 
.[[ 
_dt[[ "
;[[" #
}\\ 	
public^^ 
static^^ 
bool^^ 
operator^^ #
>=^^$ &
(^^& '
Date^^' +
d1^^, .
,^^. /
Date^^0 4
d2^^5 7
)^^7 8
{__ 	
return`` 
d1`` 
.`` 
_dt`` 
>=`` 
d2`` 
.``  
_dt``  #
;``# $
}aa 	
publiccc 
staticcc 
implicitcc 
operatorcc '
DateTimecc( 0
(cc0 1
Datecc1 5
dcc6 7
)cc7 8
{dd 	
returnee 
dee 
.ee 
_dtee 
;ee 
}ff 	
publichh 
statichh 
explicithh 
operatorhh '
Datehh( ,
(hh, -
DateTimehh- 5
dhh6 7
)hh7 8
{ii 	
returnjj 
newjj 
Datejj 
(jj 
djj 
)jj 
;jj 
}kk 	
publicmm 
intmm 
Daymm 
{nn 	
getoo 
{pp 
returnqq 
thisqq 
.qq 
_dtqq 
.qq  
Dayqq  #
;qq# $
}rr 
}ss 	
publicuu 
	DayOfWeekuu 
	DayOfWeekuu "
{vv 	
getww 
{xx 
returnyy 
thisyy 
.yy 
_dtyy 
.yy  
	DayOfWeekyy  )
;yy) *
}zz 
}{{ 	
public}} 
int}} 
	DayOfYear}} 
{~~ 	
get 
{
ÄÄ 
return
ÅÅ 
this
ÅÅ 
.
ÅÅ 
_dt
ÅÅ 
.
ÅÅ  
	DayOfYear
ÅÅ  )
;
ÅÅ) *
}
ÇÇ 
}
ÉÉ 	
public
ÖÖ 
int
ÖÖ 
Month
ÖÖ 
{
ÜÜ 	
get
áá 
{
àà 
return
ââ 
this
ââ 
.
ââ 
_dt
ââ 
.
ââ  
Month
ââ  %
;
ââ% &
}
ää 
}
ãã 	
public
çç 
static
çç 
Date
çç 
Today
çç  
{
éé 	
get
èè 
{
êê 
return
ëë 
new
ëë 
Date
ëë 
(
ëë  
DateTime
ëë  (
.
ëë( )
Today
ëë) .
)
ëë. /
;
ëë/ 0
}
íí 
}
ìì 	
public
ïï 
int
ïï 
Year
ïï 
{
ññ 	
get
óó 
{
òò 
return
ôô 
this
ôô 
.
ôô 
_dt
ôô 
.
ôô  
Year
ôô  $
;
ôô$ %
}
öö 
}
õõ 	
public
ùù 
long
ùù 
Ticks
ùù 
{
ûû 	
get
üü 
{
†† 
return
°° 
this
°° 
.
°° 
_dt
°° 
.
°°  
Ticks
°°  %
;
°°% &
}
¢¢ 
}
££ 	
public
•• 
Date
•• 
AddDays
•• 
(
•• 
int
•• 
value
••  %
)
••% &
{
¶¶ 	
return
ßß 
new
ßß 
Date
ßß 
(
ßß 
this
ßß  
.
ßß  !
_dt
ßß! $
.
ßß$ %
AddDays
ßß% ,
(
ßß, -
value
ßß- 2
)
ßß2 3
)
ßß3 4
;
ßß4 5
}
®® 	
public
™™ 
Date
™™ 
	AddMonths
™™ 
(
™™ 
int
™™ !
value
™™" '
)
™™' (
{
´´ 	
return
¨¨ 
new
¨¨ 
Date
¨¨ 
(
¨¨ 
this
¨¨  
.
¨¨  !
_dt
¨¨! $
.
¨¨$ %
	AddMonths
¨¨% .
(
¨¨. /
value
¨¨/ 4
)
¨¨4 5
)
¨¨5 6
;
¨¨6 7
}
≠≠ 	
public
ØØ 
Date
ØØ 
AddYears
ØØ 
(
ØØ 
int
ØØ  
value
ØØ! &
)
ØØ& '
{
∞∞ 	
return
±± 
new
±± 
Date
±± 
(
±± 
this
±±  
.
±±  !
_dt
±±! $
.
±±$ %
AddYears
±±% -
(
±±- .
value
±±. 3
)
±±3 4
)
±±4 5
;
±±5 6
}
≤≤ 	
public
¥¥ 
static
¥¥ 
int
¥¥ 
Compare
¥¥ !
(
¥¥! "
Date
¥¥" &
d1
¥¥' )
,
¥¥) *
Date
¥¥+ /
d2
¥¥0 2
)
¥¥2 3
{
µµ 	
return
∂∂ 
d1
∂∂ 
.
∂∂ 
	CompareTo
∂∂ 
(
∂∂  
d2
∂∂  "
)
∂∂" #
;
∂∂# $
}
∑∑ 	
public
ππ 
int
ππ 
	CompareTo
ππ 
(
ππ 
Date
ππ !
value
ππ" '
)
ππ' (
{
∫∫ 	
return
ªª 
this
ªª 
.
ªª 
_dt
ªª 
.
ªª 
	CompareTo
ªª %
(
ªª% &
value
ªª& +
.
ªª+ ,
_dt
ªª, /
)
ªª/ 0
;
ªª0 1
}
ºº 	
public
ææ 
int
ææ 
	CompareTo
ææ 
(
ææ 
object
ææ #
value
ææ$ )
)
ææ) *
{
øø 	
return
¿¿ 
this
¿¿ 
.
¿¿ 
_dt
¿¿ 
.
¿¿ 
	CompareTo
¿¿ %
(
¿¿% &
value
¿¿& +
)
¿¿+ ,
;
¿¿, -
}
¡¡ 	
public
√√ 
static
√√ 
int
√√ 
DaysInMonth
√√ %
(
√√% &
int
√√& )
year
√√* .
,
√√. /
int
√√0 3
month
√√4 9
)
√√9 :
{
ƒƒ 	
return
≈≈ 
DateTime
≈≈ 
.
≈≈ 
DaysInMonth
≈≈ '
(
≈≈' (
year
≈≈( ,
,
≈≈, -
month
≈≈. 3
)
≈≈3 4
;
≈≈4 5
}
∆∆ 	
public
»» 
bool
»» 
Equals
»» 
(
»» 
Date
»» 
value
»»  %
)
»»% &
{
…… 	
return
   
this
   
.
   
_dt
   
.
   
Equals
   "
(
  " #
value
  # (
.
  ( )
_dt
  ) ,
)
  , -
;
  - .
}
ÀÀ 	
public
ÕÕ 
override
ÕÕ 
bool
ÕÕ 
Equals
ÕÕ #
(
ÕÕ# $
object
ÕÕ$ *
value
ÕÕ+ 0
)
ÕÕ0 1
{
ŒŒ 	
return
œœ 
value
œœ 
is
œœ 
Date
œœ  
&&
œœ! #
this
œœ$ (
.
œœ( )
_dt
œœ) ,
.
œœ, -
Equals
œœ- 3
(
œœ3 4
(
œœ4 5
(
œœ5 6
Date
œœ6 :
)
œœ: ;
value
œœ; @
)
œœ@ A
.
œœA B
_dt
œœB E
)
œœE F
;
œœF G
}
–– 	
public
““ 
override
““ 
int
““ 
GetHashCode
““ '
(
““' (
)
““( )
{
”” 	
return
‘‘ 
this
‘‘ 
.
‘‘ 
_dt
‘‘ 
.
‘‘ 
GetHashCode
‘‘ '
(
‘‘' (
)
‘‘( )
;
‘‘) *
}
’’ 	
public
◊◊ 
static
◊◊ 
bool
◊◊ 
Equals
◊◊ !
(
◊◊! "
Date
◊◊" &
d1
◊◊' )
,
◊◊) *
Date
◊◊+ /
d2
◊◊0 2
)
◊◊2 3
{
ÿÿ 	
return
ŸŸ 
d1
ŸŸ 
.
ŸŸ 
_dt
ŸŸ 
.
ŸŸ 
Equals
ŸŸ  
(
ŸŸ  !
d2
ŸŸ! #
.
ŸŸ# $
_dt
ŸŸ$ '
)
ŸŸ' (
;
ŸŸ( )
}
⁄⁄ 	
void
‹‹ 
ISerializable
‹‹ 
.
‹‹ 
GetObjectData
‹‹ (
(
‹‹( )
SerializationInfo
‹‹) :
info
‹‹; ?
,
‹‹? @
StreamingContext
‹‹A Q
context
‹‹R Y
)
‹‹Y Z
{
›› 	
info
ﬁﬁ 
.
ﬁﬁ 
AddValue
ﬁﬁ 
(
ﬁﬁ 
$str
ﬁﬁ !
,
ﬁﬁ! "
this
ﬁﬁ# '
.
ﬁﬁ' (
_dt
ﬁﬁ( +
.
ﬁﬁ+ ,
Ticks
ﬁﬁ, 1
)
ﬁﬁ1 2
;
ﬁﬁ2 3
}
ﬂﬂ 	
public
·· 
static
·· 
bool
·· 

IsLeapYear
·· %
(
··% &
int
··& )
year
··* .
)
··. /
{
‚‚ 	
return
„„ 
DateTime
„„ 
.
„„ 

IsLeapYear
„„ &
(
„„& '
year
„„' +
)
„„+ ,
;
„„, -
}
‰‰ 	
public
ÊÊ 
static
ÊÊ 
Date
ÊÊ 
Parse
ÊÊ  
(
ÊÊ  !
string
ÊÊ! '
s
ÊÊ( )
)
ÊÊ) *
{
ÁÁ 	
return
ËË 
new
ËË 
Date
ËË 
(
ËË 
DateTime
ËË $
.
ËË$ %
Parse
ËË% *
(
ËË* +
s
ËË+ ,
)
ËË, -
)
ËË- .
;
ËË. /
}
ÈÈ 	
public
ÎÎ 
static
ÎÎ 
Date
ÎÎ 
Parse
ÎÎ  
(
ÎÎ  !
string
ÎÎ! '
s
ÎÎ( )
,
ÎÎ) *
IFormatProvider
ÎÎ+ :
provider
ÎÎ; C
)
ÎÎC D
{
ÏÏ 	
return
ÌÌ 
new
ÌÌ 
Date
ÌÌ 
(
ÌÌ 
DateTime
ÌÌ $
.
ÌÌ$ %
Parse
ÌÌ% *
(
ÌÌ* +
s
ÌÌ+ ,
,
ÌÌ, -
provider
ÌÌ. 6
)
ÌÌ6 7
)
ÌÌ7 8
;
ÌÌ8 9
}
ÓÓ 	
public
 
static
 
Date
 
Parse
  
(
  !
string
! '
s
( )
,
) *
IFormatProvider
+ :
provider
; C
,
C D
DateTimeStyles
E S
style
T Y
)
Y Z
{
ÒÒ 	
return
ÚÚ 
new
ÚÚ 
Date
ÚÚ 
(
ÚÚ 
DateTime
ÚÚ $
.
ÚÚ$ %
Parse
ÚÚ% *
(
ÚÚ* +
s
ÚÚ+ ,
,
ÚÚ, -
provider
ÚÚ. 6
,
ÚÚ6 7
style
ÚÚ8 =
)
ÚÚ= >
)
ÚÚ> ?
;
ÚÚ? @
}
ÛÛ 	
public
ıı 
static
ıı 
Date
ıı 

ParseExact
ıı %
(
ıı% &
string
ıı& ,
s
ıı- .
,
ıı. /
string
ıı0 6
format
ıı7 =
,
ıı= >
IFormatProvider
ıı? N
provider
ııO W
)
ııW X
{
ˆˆ 	
return
˜˜ 
new
˜˜ 
Date
˜˜ 
(
˜˜ 
DateTime
˜˜ $
.
˜˜$ %

ParseExact
˜˜% /
(
˜˜/ 0
s
˜˜0 1
,
˜˜1 2
format
˜˜3 9
,
˜˜9 :
provider
˜˜; C
)
˜˜C D
)
˜˜D E
;
˜˜E F
}
¯¯ 	
public
˙˙ 
static
˙˙ 
Date
˙˙ 

ParseExact
˙˙ %
(
˙˙% &
string
˙˙& ,
s
˙˙- .
,
˙˙. /
string
˙˙0 6
format
˙˙7 =
,
˙˙= >
IFormatProvider
˙˙? N
provider
˙˙O W
,
˙˙W X
DateTimeStyles
˙˙Y g
style
˙˙h m
)
˙˙m n
{
˚˚ 	
return
¸¸ 
new
¸¸ 
Date
¸¸ 
(
¸¸ 
DateTime
¸¸ $
.
¸¸$ %

ParseExact
¸¸% /
(
¸¸/ 0
s
¸¸0 1
,
¸¸1 2
format
¸¸3 9
,
¸¸9 :
provider
¸¸; C
,
¸¸C D
style
¸¸E J
)
¸¸J K
)
¸¸K L
;
¸¸L M
}
˝˝ 	
public
ˇˇ 
static
ˇˇ 
Date
ˇˇ 

ParseExact
ˇˇ %
(
ˇˇ% &
string
ˇˇ& ,
s
ˇˇ- .
,
ˇˇ. /
string
ˇˇ0 6
[
ˇˇ6 7
]
ˇˇ7 8
formats
ˇˇ9 @
,
ˇˇ@ A
IFormatProvider
ˇˇB Q
provider
ˇˇR Z
,
ˇˇZ [
DateTimeStyles
ˇˇ\ j
style
ˇˇk p
)
ˇˇp q
{
ÄÄ 	
return
ÅÅ 
new
ÅÅ 
Date
ÅÅ 
(
ÅÅ 
DateTime
ÅÅ $
.
ÅÅ$ %

ParseExact
ÅÅ% /
(
ÅÅ/ 0
s
ÅÅ0 1
,
ÅÅ1 2
formats
ÅÅ3 :
,
ÅÅ: ;
provider
ÅÅ< D
,
ÅÅD E
style
ÅÅF K
)
ÅÅK L
)
ÅÅL M
;
ÅÅM N
}
ÇÇ 	
public
ÑÑ 
TimeSpan
ÑÑ 
Subtract
ÑÑ  
(
ÑÑ  !
Date
ÑÑ! %
value
ÑÑ& +
)
ÑÑ+ ,
{
ÖÖ 	
return
ÜÜ 
this
ÜÜ 
-
ÜÜ 
value
ÜÜ 
;
ÜÜ  
}
áá 	
public
ââ 
Date
ââ 
Subtract
ââ 
(
ââ 
TimeSpan
ââ %
value
ââ& +
)
ââ+ ,
{
ää 	
return
ãã 
this
ãã 
-
ãã 
value
ãã 
;
ãã  
}
åå 	
public
éé 
string
éé 
ToLongString
éé "
(
éé" #
)
éé# $
{
èè 	
return
êê 
this
êê 
.
êê 
_dt
êê 
.
êê 
ToLongDateString
êê ,
(
êê, -
)
êê- .
;
êê. /
}
ëë 	
public
ìì 
string
ìì 
ToShortString
ìì #
(
ìì# $
)
ìì$ %
{
îî 	
return
ïï 
this
ïï 
.
ïï 
_dt
ïï 
.
ïï 
ToShortDateString
ïï -
(
ïï- .
)
ïï. /
;
ïï/ 0
}
ññ 	
public
òò 
override
òò 
string
òò 
ToString
òò '
(
òò' (
)
òò( )
{
ôô 	
return
öö 
this
öö 
.
öö 
ToShortString
öö %
(
öö% &
)
öö& '
;
öö' (
}
õõ 	
public
ùù 
string
ùù 
ToString
ùù 
(
ùù 
IFormatProvider
ùù .
provider
ùù/ 7
)
ùù7 8
{
ûû 	
return
üü 
this
üü 
.
üü 
_dt
üü 
.
üü 
ToString
üü $
(
üü$ %
provider
üü% -
)
üü- .
;
üü. /
}
†† 	
public
¢¢ 
string
¢¢ 
ToString
¢¢ 
(
¢¢ 
string
¢¢ %
format
¢¢& ,
)
¢¢, -
{
££ 	
if
§§ 
(
§§ 
format
§§ 
==
§§ 
$str
§§ 
||
§§  
format
§§! '
==
§§( *
$str
§§+ .
||
§§/ 1
format
§§2 8
==
§§9 ;
$str
§§< ?
)
§§? @
{
•• 
return
¶¶ 
this
¶¶ 
.
¶¶ 
ToString
¶¶ $
(
¶¶$ %
$str
¶¶% 1
)
¶¶1 2
;
¶¶2 3
}
ßß 
return
©© 
this
©© 
.
©© 
_dt
©© 
.
©© 
ToString
©© $
(
©©$ %
format
©©% +
)
©©+ ,
;
©©, -
}
™™ 	
public
¨¨ 
string
¨¨ 
ToString
¨¨ 
(
¨¨ 
string
¨¨ %
format
¨¨& ,
,
¨¨, -
IFormatProvider
¨¨. =
provider
¨¨> F
)
¨¨F G
{
≠≠ 	
return
ÆÆ 
this
ÆÆ 
.
ÆÆ 
_dt
ÆÆ 
.
ÆÆ 
ToString
ÆÆ $
(
ÆÆ$ %
format
ÆÆ% +
,
ÆÆ+ ,
provider
ÆÆ- 5
)
ÆÆ5 6
;
ÆÆ6 7
}
ØØ 	
public
±± 
static
±± 
bool
±± 
TryParse
±± #
(
±±# $
string
±±$ *
s
±±+ ,
,
±±, -
out
±±. 1
Date
±±2 6
result
±±7 =
)
±±= >
{
≤≤ 	
DateTime
≥≥ 
d
≥≥ 
;
≥≥ 
bool
¥¥ 
success
¥¥ 
=
¥¥ 
DateTime
¥¥ #
.
¥¥# $
TryParse
¥¥$ ,
(
¥¥, -
s
¥¥- .
,
¥¥. /
out
¥¥0 3
d
¥¥4 5
)
¥¥5 6
;
¥¥6 7
result
µµ 
=
µµ 
new
µµ 
Date
µµ 
(
µµ 
d
µµ 
)
µµ  
;
µµ  !
return
∂∂ 
success
∂∂ 
;
∂∂ 
}
∑∑ 	
public
ππ 
static
ππ 
bool
ππ 
TryParse
ππ #
(
ππ# $
string
ππ$ *
s
ππ+ ,
,
ππ, -
IFormatProvider
ππ. =
provider
ππ> F
,
ππF G
DateTimeStyles
ππH V
style
ππW \
,
ππ\ ]
out
ππ^ a
Date
ππb f
result
ππg m
)
ππm n
{
∫∫ 	
DateTime
ªª 
d
ªª 
;
ªª 
bool
ºº 
success
ºº 
=
ºº 
DateTime
ºº #
.
ºº# $
TryParse
ºº$ ,
(
ºº, -
s
ºº- .
,
ºº. /
provider
ºº0 8
,
ºº8 9
style
ºº: ?
,
ºº? @
out
ººA D
d
ººE F
)
ººF G
;
ººG H
result
ΩΩ 
=
ΩΩ 
new
ΩΩ 
Date
ΩΩ 
(
ΩΩ 
d
ΩΩ 
)
ΩΩ  
;
ΩΩ  !
return
ææ 
success
ææ 
;
ææ 
}
øø 	
public
¡¡ 
static
¡¡ 
bool
¡¡ 
TryParseExact
¡¡ (
(
¡¡( )
string
¡¡) /
s
¡¡0 1
,
¡¡1 2
string
¡¡3 9
format
¡¡: @
,
¡¡@ A
IFormatProvider
¡¡B Q
provider
¡¡R Z
,
¡¡Z [
DateTimeStyles
¡¡\ j
style
¡¡k p
,
¡¡p q
out
¡¡r u
Date
¡¡v z
result¡¡{ Å
)¡¡Å Ç
{
¬¬ 	
DateTime
√√ 
d
√√ 
;
√√ 
bool
ƒƒ 
success
ƒƒ 
=
ƒƒ 
DateTime
ƒƒ #
.
ƒƒ# $
TryParseExact
ƒƒ$ 1
(
ƒƒ1 2
s
ƒƒ2 3
,
ƒƒ3 4
format
ƒƒ5 ;
,
ƒƒ; <
provider
ƒƒ= E
,
ƒƒE F
style
ƒƒG L
,
ƒƒL M
out
ƒƒN Q
d
ƒƒR S
)
ƒƒS T
;
ƒƒT U
result
≈≈ 
=
≈≈ 
new
≈≈ 
Date
≈≈ 
(
≈≈ 
d
≈≈ 
)
≈≈  
;
≈≈  !
return
∆∆ 
success
∆∆ 
;
∆∆ 
}
«« 	
public
…… 
static
…… 
bool
…… 
TryParseExact
…… (
(
……( )
string
……) /
s
……0 1
,
……1 2
string
……3 9
[
……9 :
]
……: ;
formats
……< C
,
……C D
IFormatProvider
……E T
provider
……U ]
,
……] ^
DateTimeStyles
……_ m
style
……n s
,
……s t
out
……u x
Date
……y }
result……~ Ñ
)……Ñ Ö
{
   	
DateTime
ÀÀ 
d
ÀÀ 
;
ÀÀ 
bool
ÃÃ 
success
ÃÃ 
=
ÃÃ 
DateTime
ÃÃ #
.
ÃÃ# $
TryParseExact
ÃÃ$ 1
(
ÃÃ1 2
s
ÃÃ2 3
,
ÃÃ3 4
formats
ÃÃ5 <
,
ÃÃ< =
provider
ÃÃ> F
,
ÃÃF G
style
ÃÃH M
,
ÃÃM N
out
ÃÃO R
d
ÃÃS T
)
ÃÃT U
;
ÃÃU V
result
ÕÕ 
=
ÕÕ 
new
ÕÕ 
Date
ÕÕ 
(
ÕÕ 
d
ÕÕ 
)
ÕÕ  
;
ÕÕ  !
return
ŒŒ 
success
ŒŒ 
;
ŒŒ 
}
œœ 	
}
–– 
public
““ 

static
““ 
class
““  
DateTimeExtensions
““ *
{
”” 
public
‘‘ 
static
‘‘ 
Date
‘‘ 
ToDate
‘‘ !
(
‘‘! "
this
‘‘" &
DateTime
‘‘' /
dt
‘‘0 2
)
‘‘2 3
{
’’ 	
return
÷÷ 
new
÷÷ 
Date
÷÷ 
(
÷÷ 
dt
÷÷ 
)
÷÷ 
;
÷÷  
}
◊◊ 	
}
ÿÿ 
}ŸŸ ÓP
D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\EditableObject.cs
	namespace 	
Infoline
 
. 
Helper 
{		 
public

 

class

 
EditableObject

 
<

  
TClass

  &
>

& '
:

( )
BaseEditableObject

* <
<

< =
TClass

= C
>

C D
where

E J
TClass

K Q
:

R S
class

T Y
,

Y Z
new

Z ]
(

] ^
)

^ _
{ 
public 
EditableObject 
( 
) 
: 
this 
( 
null 
, 
null 
) 
{ 	
} 	
public 
EditableObject 
( 
TClass $
original% -
)- .
: 
this 
( 
original 
, 
null !
)! "
{ 	
} 	
public 
EditableObject 
( 
TClass $
original% -
,- .
TClass/ 5
value6 ;
); <
: 
base 
( 
original 
?? 
new "
TClass# )
() *
)* +
,+ ,
value- 2
??3 5
new6 9
TClass: @
(@ A
)A B
)B C
{ 	
} 	
public 
void 
	BeginEdit 
( 
) 
{ 	
Copy 
( 
Value 
, 
Original  
)  !
;! "
} 	
public 
void 

CancelEdit 
( 
)  
{ 	
Copy   
(   
Value   
,   
Original    
)    !
;  ! "
}"" 	
public$$ 
void$$ 
EndEdit$$ 
($$ 
)$$ 
{%% 	
Copy&& 
(&& 
Original&& 
,&& 
Value&&  
)&&  !
;&&! "
}'' 	
})) 
public** 

class** 
BaseEditableObject** #
<**# $
TClass**$ *
>*** +
where**, 1
TClass**2 8
:**9 :
class**; @
{++ 
public,, 
TClass,, 
Value,, 
{,, 
get,, !
;,,! "
private,,# *
set,,+ .
;,,. /
},,0 1
public-- 
TClass-- 
Original-- 
{--  
get--! $
;--$ %
private--& -
set--. 1
;--1 2
}--3 4
public.. 
bool.. 
	IsModifed.. 
{// 	
get00 
{11 
return22 

HasChanges22 !
(22! "
Value22" '
,22' (
Original22) 1
)221 2
;222 3
}33 
}44 	
public55 
BaseEditableObject55 !
(55! "
TClass55" (
original55) 1
,551 2
TClass553 9
value55: ?
)55? @
{66 	
Original77 
=77 
original77 
;77  
Value88 
=88 
value88 
;88 
Copy99 
(99 
Value99 
,99 
Original99  
)99  !
;99! "
}:: 	
public@@ 
static@@ 
Action@@ 
<@@ 
TClass@@ #
,@@# $
TClass@@% +
>@@+ ,
Copy@@- 1
{@@2 3
get@@4 7
;@@7 8
private@@9 @
set@@A D
;@@D E
}@@F G
publicAA 
staticAA 
FuncAA 
<AA 
TClassAA !
,AA! "
TClassAA# )
,AA) *
boolAA+ /
>AA/ 0

HasChangesAA1 ;
{AA< =
getAA> A
;AAA B
privateAAC J
setAAK N
;AAN O
}AAP Q
staticBB 
BaseEditableObjectBB !
(BB! "
)BB" #
{CC 	
{DD 
ParameterExpressionEE #
pEE$ %
=EE& '

ExpressionEE( 2
.EE2 3
	ParameterEE3 <
(EE< =
typeofEE= C
(EEC D
TClassEED J
)EEJ K
)EEK L
;EEL M
ParameterExpressionFF #
p1FF$ &
=FF' (

ExpressionFF) 3
.FF3 4
	ParameterFF4 =
(FF= >
typeofFF> D
(FFD E
TClassFFE K
)FFK L
)FFL M
;FFM N
LabelTargetGG 
rtGG 
=GG  

ExpressionGG! +
.GG+ ,
LabelGG, 1
(GG1 2
)GG2 3
;GG3 4
varII 
typeII 
=II 
typeofII !
(II! "
TClassII" (
)II( )
;II) *
varJJ 
exJJ 
=JJ 
typeJJ 
.JJ 
GetPropertiesJJ +
(JJ+ ,
)JJ, -
.JJ- .
WhereJJ. 3
(JJ3 4
aJJ4 5
=>JJ6 8
aJJ9 :
.JJ: ;
CanReadJJ; B
&&JJC E
aJJF G
.JJG H
CanWriteJJH P
)JJP Q
.JJQ R
SelectJJR X
(JJX Y
aJJY Z
=>JJ[ ]
{KK 
returnLL 
(LL 

ExpressionLL &
)LL& '

ExpressionLL' 1
.LL1 2
CallLL2 6
(LL6 7
pLL7 8
,LL8 9
aLL: ;
.LL; <
GetSetMethodLL< H
(LLH I
)LLI J
,LLJ K
newLLL O
[LLO P
]LLP Q
{LLR S

ExpressionLLT ^
.LL^ _
CallLL_ c
(LLc d
p1LLd f
,LLf g
aLLh i
.LLi j
GetGetMethodLLj v
(LLv w
)LLw x
)LLx y
}LLz {
)LL{ |
;LL| }
}MM 
)MM 
.MM 
ToListMM 
(MM 
)MM 
;MM 
exOO 
.OO 
AddOO 
(OO 

ExpressionOO !
.OO! "
LabelOO" '
(OO' (
rtOO( *
)OO* +
)OO+ ,
;OO, -
LambdaExpressionQQ  
lQQ! "
=QQ# $

ExpressionQQ% /
.QQ/ 0
LambdaQQ0 6
(QQ6 7
typeofQQ7 =
(QQ= >
ActionQQ> D
<QQD E
TClassQQE K
,QQK L
TClassQQM S
>QQS T
)QQT U
,QQU V

ExpressionQQW a
.QQa b
BlockQQb g
(QQg h
exQQh j
)QQj k
,QQk l
pQQm n
,QQn o
p1QQp r
)QQr s
;QQs t
CopyTT 
=TT 
(TT 
ActionTT 
<TT 
TClassTT %
,TT% &
TClassTT' -
>TT- .
)TT. /
lTT/ 0
.TT0 1
CompileTT1 8
(TT8 9
)TT9 :
;TT: ;
}UU 
{VV 
ParameterExpressionWW #
pWW$ %
=WW& '

ExpressionWW( 2
.WW2 3
	ParameterWW3 <
(WW< =
typeofWW= C
(WWC D
TClassWWD J
)WWJ K
)WWK L
;WWL M
ParameterExpressionXX #
p1XX$ &
=XX' (

ExpressionXX) 3
.XX3 4
	ParameterXX4 =
(XX= >
typeofXX> D
(XXD E
TClassXXE K
)XXK L
)XXL M
;XXM N
LabelTargetYY 
rtYY 
=YY  

ExpressionYY! +
.YY+ ,
LabelYY, 1
(YY1 2
)YY2 3
;YY3 4
var[[ 
type[[ 
=[[ 
typeof[[ !
([[! "
TClass[[" (
)[[( )
;[[) *
var]] 
ex]] 
=]] 

Expression]] #
.]]# $
Not]]$ '
(]]' (
type]]( ,
.]], -
GetProperties]]- :
(]]: ;
)]]; <
.]]< =
Where]]= B
(]]B C
a]]C D
=>]]E G
a]]H I
.]]I J
CanRead]]J Q
&&]]R T
a]]U V
.]]V W
CanWrite]]W _
)]]_ `
.^^ 
	Aggregate^^ 
<^^ 
PropertyInfo^^ +
,^^+ ,

Expression^^- 7
>^^7 8
(^^8 9

Expression^^9 C
.^^C D
Constant^^D L
(^^L M
true^^M Q
)^^Q R
,^^R S
(^^T U
e^^U V
,^^V W
a^^X Y
)^^Y Z
=>^^[ ]

Expression__ "
.__" #
AndAlso__# *
(__* +
e__+ ,
,__, -

Expression`` &
.``& '
Equal``' ,
(``, -

Expressionaa  *
.aa* +
Callaa+ /
(aa/ 0
paa0 1
,aa1 2
aaa3 4
.aa4 5
GetGetMethodaa5 A
(aaA B
)aaB C
)aaC D
,aaD E

Expressionbb  *
.bb* +
Callbb+ /
(bb/ 0
p1bb0 2
,bb2 3
abb4 5
.bb5 6
GetGetMethodbb6 B
(bbB C
)bbC D
)bbD E
)cc 
)dd 
)ee 
)ee 
;ee 
LambdaExpressionii  
lii! "
=ii# $

Expressionii% /
.ii/ 0
Lambdaii0 6
(ii6 7
typeofii7 =
(ii= >
Funcii> B
<iiB C
TClassiiC I
,iiI J
TClassiiK Q
,iiQ R
booliiS W
>iiW X
)iiX Y
,iiY Z

Expressionii[ e
.iie f
Blockiif k
(iik l
exiil n
)iin o
,iio p
piiq r
,iir s
p1iit v
)iiv w
;iiw x

HasChangesjj 
=jj 
(jj 
Funcjj "
<jj" #
TClassjj# )
,jj) *
TClassjj+ 1
,jj1 2
booljj3 7
>jj7 8
)jj8 9
ljj9 :
.jj: ;
Compilejj; B
(jjB C
)jjC D
;jjD E
}kk 
}ll 	
}pp 
}qq ´Q
ÑD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\EnumerableExtension.cs
	namespace 	
Infoline
 
. 
Helper 
{ 
public 

static 
class 
EnumerableExtension +
{		 
public 
static 
IEnumerable !
<! "
TSource" )
>) *

Difference+ 5
<5 6
TSource6 =
>= >
(> ?
this? C
IEnumerableD O
<O P
TSourceP W
>W X
sourceY _
,_ `
IEnumerablea l
<l m
TSourcem t
>t u
otherv {
){ |
{ 	
foreach 
( 
var 
item 
in  
source! '
)' (
{ 
if 
( 
! 
other 
. 
Contains #
(# $
item$ (
)( )
)) *
yield 
return  
item! %
;% &
} 
} 	
public 
static 
int 
IndexOf !
<! "
TSource" )
>) *
(* +
this+ /
IEnumerable0 ;
<; <
TSource< C
>C D
sourceE K
,K L
FuncM Q
<Q R
TSourceR Y
,Y Z
bool[ _
>_ `
resa d
)d e
{ 	
int 
i 
= 
$num 
; 
if 
( 
res 
!= 
null 
) 
foreach 
( 
var 
item !
in" $
source% +
)+ ,
{ 
if 
( 
res 
( 
item  
)  !
)! "
return# )
i* +
;+ ,
i 
++ 
; 
} 
return 
- 
$num 
; 
} 	
public"" 
static"" 
int"" 
IndexOf"" !
<""! "
T""" #
>""# $
(""$ %
this""% )
IEnumerable""* 5
<""5 6
T""6 7
>""7 8
source""9 ?
,""? @
T""A B
value""C H
)""H I
{## 	
return$$ 
source$$ 
.$$ 
IndexOf$$ !
($$! "
value$$" '
,$$' (
EqualityComparer$$) 9
<$$9 :
T$$: ;
>$$; <
.$$< =
Default$$= D
)$$D E
;$$E F
}%% 	
public'' 
static'' 
int'' 
IndexOf'' !
<''! "
T''" #
>''# $
(''$ %
this''% )
IEnumerable''* 5
<''5 6
T''6 7
>''7 8
source''9 ?
,''? @
T''A B
value''C H
,''H I
EqualityComparer''J Z
<''Z [
T''[ \
>''\ ]
comparer''^ f
)''f g
{(( 	
var)) 
index)) 
=)) 
$num)) 
;)) 
foreach** 
(** 
var** 
item** 
in**  
source**! '
)**' (
{++ 
if,, 
(,, 
comparer,, 
.,, 
Equals,, #
(,,# $
value,,$ )
,,,) *
item,,+ /
),,/ 0
),,0 1
return,,2 8
index,,9 >
;,,> ?
index-- 
++-- 
;-- 
}.. 
return// 
-// 
$num// 
;// 
}00 	
public11 
static11 
TSource11 
ItemOrDefault11 +
<11+ ,
TSource11, 3
>113 4
(114 5
this115 9
IEnumerable11: E
<11E F
TSource11F M
>11M N
source11O U
,11U V
int11W Z
index11[ `
)11` a
{22 	
int44 
i44 
=44 
$num44 
;44 
foreach55 
(55 
var55 
item55 
in55  
source55! '
)55' (
{66 
if77 
(77 
i77 
==77 
index77 
)77 
return77  &
item77' +
;77+ ,
i88 
++88 
;88 
}99 
return:: 
default:: 
(:: 
TSource:: "
)::" #
;::# $
};; 	
public<< 
static<< 
string<< 

FormatJoin<< '
<<<' (
TSource<<( /
><</ 0
(<<0 1
this<<1 5
IEnumerable<<6 A
<<<A B
TSource<<B I
><<I J
source<<K Q
,<<Q R
string<<S Y
format<<Z `
)<<` a
{== 	
StringBuilder>> 
sb>> 
=>> 
new>> "
StringBuilder>># 0
(>>0 1
)>>1 2
;>>2 3
foreach?? 
(?? 
var?? 
item?? 
in??  
source??! '
)??' (
sb@@ 
.@@ 
AppendFormat@@ 
(@@  
format@@  &
,@@& '
item@@( ,
)@@, -
;@@- .
returnAA 
sbAA 
.AA 
ToStringAA 
(AA 
)AA  
;AA  !
}BB 	
publicCC 
staticCC 
stringCC 

FormatJoinCC '
<CC' (
TSourceCC( /
>CC/ 0
(CC0 1
thisCC1 5
IEnumerableCC6 A
<CCA B
TSourceCCB I
>CCI J
sourceCCK Q
,CCQ R
stringCCS Y
formatCCZ `
,CC` a
stringCCb h
	seperatorCCi r
)CCr s
{DD 	
returnEE 

FormatJoinEE 
(EE 
sourceEE $
,EE$ %
formatEE& ,
,EE, -
	seperatorEE. 7
,EE7 8
$strEE9 >
)EE> ?
;EE? @
}GG 	
publicHH 
staticHH 
stringHH 

FormatJoinHH '
<HH' (
TSourceHH( /
>HH/ 0
(HH0 1
thisHH1 5
IEnumerableHH6 A
<HHA B
TSourceHHB I
>HHI J
sourceHHK Q
,HHQ R
stringHHS Y
formatHHZ `
,HH` a
stringHHb h
	seperatorHHi r
,HHr s
stringHHt z
	outformat	HH{ Ñ
)
HHÑ Ö
{II 	
StringBuilderJJ 
sbJJ 
=JJ 
newJJ "
StringBuilderJJ# 0
(JJ0 1
)JJ1 2
;JJ2 3
foreachKK 
(KK 
varKK 
itemKK 
inKK  
sourceKK! '
)KK' (
{LL 
ifMM 
(MM 
sbMM 
.MM 
LengthMM 
>MM 
$numMM  !
)MM! "
sbNN 
.NN 
AppendNN 
(NN 
	seperatorNN '
)NN' (
;NN( )
sbOO 
.OO 
AppendFormatOO 
(OO  
formatOO  &
,OO& '
itemOO( ,
)OO, -
;OO- .
}QQ 
returnRR 
sbRR 
.RR 
LengthRR 
>RR 
$numRR  
?RR! "
stringRR# )
.RR) *
FormatRR* 0
(RR0 1
	outformatRR1 :
,RR: ;
sbRR< >
.RR> ?
ToStringRR? G
(RRG H
)RRH I
)RRI J
:RRK L
$strRRM O
;RRO P
}SS 	
publicTT 
staticTT 
stringTT 

FormatJoinTT '
<TT' (
TSourceTT( /
>TT/ 0
(TT0 1
thisTT1 5
IEnumerableTT6 A
<TTA B
TSourceTTB I
>TTI J
sourceTTK Q
,TTQ R
FuncTTS W
<TTW X
TSourceTTX _
,TT_ `
stringTTa g
>TTg h
formatTTi o
,TTo p
stringTTq w
	seperator	TTx Å
,
TTÅ Ç
string
TTÉ â
	outformat
TTä ì
)
TTì î
{UU 	
StringBuilderVV 
sbVV 
=VV 
newVV "
StringBuilderVV# 0
(VV0 1
)VV1 2
;VV2 3
foreachWW 
(WW 
varWW 
itemWW 
inWW  
sourceWW! '
)WW' (
{XX 
ifYY 
(YY 
sbYY 
.YY 
LengthYY 
>YY 
$numYY  !
)YY! "
sbZZ 
.ZZ 
AppendZZ 
(ZZ 
	seperatorZZ '
)ZZ' (
;ZZ( )
sb[[ 
.[[ 
Append[[ 
([[ 
format[[  
([[  !
item[[! %
)[[% &
)[[& '
;[[' (
}\\ 
return^^ 
string^^ 
.^^ 
IsNullOrEmpty^^ '
(^^' (
	outformat^^( 1
)^^1 2
?^^3 4
sb^^5 7
.^^7 8
ToString^^8 @
(^^@ A
)^^A B
:^^C D
string^^E K
.^^K L
Format^^L R
(^^R S
	outformat^^S \
,^^\ ]
sb^^^ `
.^^` a
ToString^^a i
(^^i j
)^^j k
)^^k l
;^^l m
}__ 	
publicaa 
staticaa 
voidaa 
Doaa 
<aa 
TSourceaa %
>aa% &
(aa& '
thisaa' +
IEnumerableaa, 7
<aa7 8
TSourceaa8 ?
>aa? @
sourceaaA G
,aaG H
ActionaaI O
<aaO P
TSourceaaP W
>aaW X
actionaaY _
)aa_ `
{bb 	
ifcc 
(cc 
actioncc 
!=cc 
nullcc 
)cc 
foreachdd 
(dd 
vardd 
itemdd !
indd" $
sourcedd% +
)dd+ ,
{ee 
actionff 
(ff 
itemff 
)ff  
;ff  !
}gg 
}hh 	
}jj 
}kk ¶4
ÄD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\AttributeHelper.cs
	namespace 	
Infoline
 
. 
Helper 
{ 
public		 

static		 
class		 
AttributeHelper		 '
{

 
public 
static 
void 
PropertySet &
(& '
object' -
p. /
,/ 0
string1 7
propName8 @
,@ A
objectB H
valueI N
)N O
{ 	
Type 
t 
= 
p 
. 
GetType 
( 
)  
;  !
PropertyInfo 
info 
= 
t  !
.! "
GetProperty" -
(- .
propName. 6
)6 7
;7 8
if 
( 
info 
== 
null 
) 
return 
; 
if 
( 
! 
info 
. 
CanWrite 
) 
return 
; 
info 
. 
SetValue 
( 
p 
, 
value "
)" #
;# $
} 	
public 
static 
T 
GetAttributeOfType *
<* +
T+ ,
>, -
(- .
this. 2
Enum3 7
enumVal8 ?
)? @
whereA F
TG H
:I J
SystemK Q
.Q R
	AttributeR [
{ 	
var 
type 
= 
enumVal 
. 
GetType &
(& '
)' (
;( )
var 
memInfo 
= 
type 
. 
	GetMember (
(( )
enumVal) 0
.0 1
ToString1 9
(9 :
): ;
); <
;< =
var   

attributes   
=   
memInfo   $
[  $ %
$num  % &
]  & '
.  ' (
GetCustomAttributes  ( ;
(  ; <
typeof  < B
(  B C
T  C D
)  D E
,  E F
false  G L
)  L M
;  M N
return!! 
(!! 

attributes!! 
.!! 
Length!! %
>!!& '
$num!!( )
)!!) *
?!!+ ,
(!!- .
T!!. /
)!!/ 0

attributes!!0 :
[!!: ;
$num!!; <
]!!< =
:!!> ?
null!!@ D
;!!D E
}"" 	
public$$ 
static$$ 
T$$ 
[$$ 
]$$ 
GetAttributesOfType$$ -
<$$- .
T$$. /
>$$/ 0
($$0 1
this$$1 5
Enum$$6 :
enumVal$$; B
)$$B C
where$$D I
T$$J K
:$$L M
System$$N T
.$$T U
	Attribute$$U ^
{%% 	
var&& 
type&& 
=&& 
enumVal&& 
.&& 
GetType&& &
(&&& '
)&&' (
;&&( )
var'' 
memInfo'' 
='' 
type'' 
.'' 
	GetMember'' (
(''( )
enumVal'') 0
.''0 1
ToString''1 9
(''9 :
)'': ;
)''; <
;''< =
var(( 

attributes(( 
=(( 
memInfo(( $
[(($ %
$num((% &
]((& '
.((' (
GetCustomAttributes((( ;
(((; <
typeof((< B
(((B C
T((C D
)((D E
,((E F
false((G L
)((L M
;((M N
return)) 
()) 

attributes)) 
.)) 
Length)) %
>))& '
$num))( )
)))) *
?))+ ,

attributes))- 7
.))7 8
Where))8 =
())= >
a))> ?
=>))@ B
a))C D
is))E G
T))H I
)))I J
.))J K
Select))K Q
())Q R
a))R S
=>))T V
())W X
T))X Y
)))Y Z
a))Z [
)))[ \
.))\ ]
ToArray))] d
())d e
)))e f
:))g h
null))i m
;))m n
}** 	
public.. 
static.. 
T.. 
GetAttributeOfType.. *
<..* +
T..+ ,
>.., -
(..- .
this... 2
PropertyInfo..3 ?
propInfo..@ H
)..H I
where..J O
T..P Q
:..R S
System..T Z
...Z [
	Attribute..[ d
{// 	
var00 

attributes00 
=00 
propInfo00 %
.00% &
GetCustomAttributes00& 9
(009 :
typeof00: @
(00@ A
T00A B
)00B C
,00C D
false00E J
)00J K
;00K L
return11 
(11 

attributes11 
.11 
Length11 %
>11& '
$num11( )
)11) *
?11+ ,
(11- .
T11. /
)11/ 0

attributes110 :
[11: ;
$num11; <
]11< =
:11> ?
null11@ D
;11D E
}22 	
public44 
static44 
T44 
[44 
]44 
GetAttributesOfType44 -
<44- .
T44. /
>44/ 0
(440 1
this441 5
PropertyInfo446 B
propInfo44C K
)44K L
where44M R
T44S T
:44U V
System44W ]
.44] ^
	Attribute44^ g
{55 	
var66 

attributes66 
=66 
propInfo66 %
.66% &
GetCustomAttributes66& 9
(669 :
typeof66: @
(66@ A
T66A B
)66B C
,66C D
false66E J
)66J K
;66K L
return77 
(77 

attributes77 
.77 
Length77 %
>77& '
$num77( )
)77) *
?77+ ,

attributes77- 7
.777 8
Where778 =
(77= >
a77> ?
=>77@ B
a77C D
is77E G
T77H I
)77I J
.77J K
Select77K Q
(77Q R
a77R S
=>77T V
(77W X
T77X Y
)77Y Z
a77Z [
)77[ \
.77\ ]
ToArray77] d
(77d e
)77e f
:77g h
null77i m
;77m n
}88 	
}:: 
};; ≈Ä
ÄD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\EnumsProperties.cs
	namespace

 	
Infoline


 
.

 
Helper

 
{ 
public 

struct 
EnumsProperties !
{ 
public 
static 
T 
GetAttribute $
<$ %
T% &
>& '
(' (
Enum( ,
	enumValue- 6
)6 7
where8 =
T> ?
:@ A
	AttributeB K
{ 	
T 
	attribute 
; 

MemberInfo 

memberInfo !
=" #
	enumValue$ -
.- .
GetType. 5
(5 6
)6 7
.7 8
	GetMember8 A
(A B
	enumValueB K
.K L
ToStringL T
(T U
)U V
)V W
., -
FirstOrDefault- ;
(; <
)< =
;= >
if 
( 

memberInfo 
!= 
null "
)" #
{ 
	attribute 
= 
( 
T 
) 

memberInfo )
.) *
GetCustomAttributes* =
(= >
typeof> D
(D E
TE F
)F G
,G H
falseI N
)N O
.O P
FirstOrDefaultP ^
(^ _
)_ `
;` a
return 
	attribute  
;  !
} 
return 
null 
; 
} 	
public 
static 
string '
GetDescriptionFromEnumValue 8
(8 9
Enum9 =
value> C
)C D
{   	 
DescriptionAttribute!!  
	attribute!!! *
=!!+ ,
value!!- 2
.!!2 3
GetType!!3 :
(!!: ;
)!!; <
."" 
GetField"" 
("" 
value"" 
.""  
ToString""  (
(""( )
)"") *
)""* +
.## 
GetCustomAttributes## $
(##$ %
typeof##% +
(##+ , 
DescriptionAttribute##, @
)##@ A
,##A B
false##C H
)##H I
.$$ 
SingleOrDefault$$  
($$  !
)$$! "
as$$# % 
DescriptionAttribute$$& :
;$$: ;
return%% 
	attribute%% 
==%% 
null%%  $
?%%% &
value%%' ,
.%%, -
ToString%%- 5
(%%5 6
)%%6 7
:%%8 9
	attribute%%: C
.%%C D
Description%%D O
;%%O P
}&& 	
public(( 
static(( 

Dictionary((  
<((  !
string((! '
,((' (
string(() /
>((/ 0#
GetGenericFromEnumValue((1 H
(((H I
Enum((I M
value((N S
)((S T
{)) 	
var** 
res** 
=** 
new** 

Dictionary** $
<**$ %
string**% +
,**+ ,
string**- 3
>**3 4
(**4 5
)**5 6
;**6 7
GenericAttribute++ 
generic++ $
=++% &
value++' ,
.++, -
GetType++- 4
(++4 5
)++5 6
.,, 
GetField,, 
(,, 
value,, 
.,,  
ToString,,  (
(,,( )
),,) *
),,* +
.-- 
GetCustomAttributes-- $
(--$ %
typeof--% +
(--+ ,
GenericAttribute--, <
)--< =
,--= >
false--? D
)--D E
... 
SingleOrDefault..  
(..  !
)..! "
as..# %
GenericAttribute..& 6
;..6 7
if// 
(// 
generic// 
!=// 
null// 
)//  
{00 
foreach11 
(11 
var11 
item11 !
in11" $
generic11% ,
.11, -
Data11- 1
)111 2
{22 
res33 
.33 
Add33 
(33 
item33  
.33  !
Key33! $
,33$ %
item33& *
.33* +
Value33+ 0
)330 1
;331 2
}44 
}55 
var88 
keyValue88 
=88 
value88  
.88  !
GetType88! (
(88( )
)88) *
.99 
GetField99 
(99 
value99 
.99  
ToString99  (
(99( )
)99) *
)99* +
.:: 
GetCustomAttributes:: #
<::# $
KeyValueAttribute::$ 5
>::5 6
(::6 7
)::7 8
.;; 
ToArray;; 
(;; 
);; 
;;; 
foreach== 
(== 
var== 
item== 
in==  
keyValue==! )
)==) *
{>> 
res?? 
.?? 
Add?? 
(?? 
item?? 
.?? 
Key??  
,??  !
item??" &
.??& '
Value??' ,
)??, -
;??- .
}@@ 
returnDD 
resDD 
;DD 
}EE 	
publicGG 
staticGG 
TGG '
GetEnumValueFromDescriptionGG 3
<GG3 4
TGG4 5
>GG5 6
(GG6 7
stringGG7 =
descriptionGG> I
)GGI J
{HH 	
varII 
typeII 
=II 
typeofII 
(II 
TII 
)II  
;II  !
ifJJ 
(JJ 
!JJ 
typeJJ 
.JJ 
IsEnumJJ 
)JJ 
throwKK 
newKK 
ArgumentExceptionKK +
(KK+ ,
)KK, -
;KK- .
	FieldInfoLL 
[LL 
]LL 
fieldsLL 
=LL  
typeLL! %
.LL% &
	GetFieldsLL& /
(LL/ 0
)LL0 1
;LL1 2
varMM 
fieldMM 
=MM 
fieldsMM 
.NN 

SelectManyNN '
(NN' (
fNN( )
=>NN* ,
fNN- .
.NN. /
GetCustomAttributesNN/ B
(NNB C
typeofOO  &
(OO& ' 
DescriptionAttributeOO' ;
)OO; <
,OO< =
falseOO> C
)OOC D
,OOD E
(OOF G
fPP$ %
,PP% &
aPP' (
)PP( )
=>PP* ,
newPP- 0
{PP1 2
FieldPP3 8
=PP9 :
fPP; <
,PP< =
AttPP> A
=PPB C
aPPD E
}PPF G
)PPG H
.QQ 
WhereQQ "
(QQ" #
aQQ# $
=>QQ% '
(QQ( )
(QQ) * 
DescriptionAttributeQQ* >
)QQ> ?
aQQ? @
.QQ@ A
AttQQA D
)QQD E
.RR  !
DescriptionRR! ,
==RR- /
descriptionRR0 ;
)RR; <
.RR< =
SingleOrDefaultRR= L
(RRL M
)RRM N
;RRN O
returnSS 
fieldSS 
==SS 
nullSS  
?SS! "
defaultSS# *
(SS* +
TSS+ ,
)SS, -
:SS. /
(SS0 1
TSS1 2
)SS2 3
fieldSS3 8
.SS8 9
FieldSS9 >
.SS> ?
GetRawConstantValueSS? R
(SSR S
)SSS T
;SST U
}TT 	
publicVV 
staticVV 
IEnumerableVV !
<VV! "
ItemVV" &
>VV& '*
EnumToArrayAqiRangeInformationVV( F
<VVF G
TVVG H
>VVH I
(VVI J
)VVJ K
{WW 	
varXX 

dictionaryXX 
=XX 
newXX  

DictionaryXX! +
<XX+ ,
stringXX, 2
,XX2 3
stringXX4 :
>XX: ;
(XX; <
)XX< =
;XX= >
foreachYY 
(YY 
varYY 
itemYY 
inYY  
EnumYY! %
.YY% &
	GetValuesYY& /
(YY/ 0
typeofYY0 6
(YY6 7
TYY7 8
)YY8 9
)YY9 :
)YY: ;
{ZZ 
var[[ 
deger[[ 
=[[ 
([[ 
int[[  
)[[  !
item[[! %
;[[% &
yield]] 
return]] 
new]]  
Item]]! %
{]]& '
Key]]( +
=]], -
deger]]. 3
.]]3 4
ToString]]4 <
(]]< =
)]]= >
,]]> ?
Value]]@ E
=]]F G'
GetDescriptionFromEnumValue]]H c
(]]c d
(]]d e
Enum]]e i
)]]i j
item]]j n
)]]n o
,]]o p
EnumKey]]q x
=]]y z
item]]{ 
.	]] Ä
ToString
]]Ä à
(
]]à â
)
]]â ä
,
]]ä ã
Information
]]å ó
=
]]ò ô
(
]]ö õ
(
]]õ ú
Enum
]]ú †
)
]]† °
item
]]° •
)
]]• ¶
.
]]¶ ß 
GetAttributeOfType
]]ß π
<
]]π ∫
Information
]]∫ ≈
>
]]≈ ∆
(
]]∆ «
)
]]« »
}
]]…  
;
]]  À
}^^ 
;^^ 
}__ 	
publicaa 
staticaa 
IEnumerableaa !
<aa! "
Itemaa" &
>aa& '
EnumToArrayaa( 3
<aa3 4
Taa4 5
>aa5 6
(aa6 7
)aa7 8
{bb 	
varcc 

dictionarycc 
=cc 
newcc  

Dictionarycc! +
<cc+ ,
stringcc, 2
,cc2 3
stringcc4 :
>cc: ;
(cc; <
)cc< =
;cc= >
foreachdd 
(dd 
vardd 
itemdd 
indd  
Enumdd! %
.dd% &
	GetValuesdd& /
(dd/ 0
typeofdd0 6
(dd6 7
Tdd7 8
)dd8 9
)dd9 :
)dd: ;
{ee 
vargg 
degergg 
=gg 
itemgg  
.gg  !
ToStringgg! )
(gg) *
)gg* +
.gg+ ,
Replacegg, 3
(gg3 4
$strgg4 7
,gg7 8
$strgg9 ;
)gg; <
;gg< =
yieldhh 
returnhh 
newhh  
Itemhh! %
{hh& '
Keyhh( +
=hh, -
degerhh. 3
.hh3 4
ToStringhh4 <
(hh< =
)hh= >
,hh> ?
Valuehh@ E
=hhF G'
GetDescriptionFromEnumValuehhH c
(hhc d
(hhd e
Enumhhe i
)hhi j
itemhhj n
)hhn o
}hhp q
;hhq r
}jj 
}kk 	
publicmm 
staticmm 
IEnumerablemm !
<mm! "
Itemmm" &
>mm& '
EnumToArrayGenericmm( :
<mm: ;
Tmm; <
>mm< =
(mm= >
)mm> ?
{nn 	
varoo 

dictionaryoo 
=oo 
newoo  

Dictionaryoo! +
<oo+ ,
stringoo, 2
,oo2 3
stringoo4 :
>oo: ;
(oo; <
)oo< =
;oo= >
foreachpp 
(pp 
varpp 
itempp 
inpp  
Enumpp! %
.pp% &
	GetValuespp& /
(pp/ 0
typeofpp0 6
(pp6 7
Tpp7 8
)pp8 9
)pp9 :
)pp: ;
{qq 
varrr 
degerrr 
=rr 
(rr 
intrr  
)rr  !
itemrr! %
;rr% &
yieldss 
returnss 
newss  
Itemss! %
{tt 
Keyuu 
=uu 
degeruu 
.uu  
ToStringuu  (
(uu( )
)uu) *
,uu* +
Valuevv 
=vv '
GetDescriptionFromEnumValuevv 7
(vv7 8
(vv8 9
Enumvv9 =
)vv= >
itemvv> B
)vvB C
,vvC D
EnumKeyww 
=ww 
itemww "
.ww" #
ToStringww# +
(ww+ ,
)ww, -
,ww- .
Genericxx 
=xx #
GetGenericFromEnumValuexx 5
(xx5 6
(xx6 7
Enumxx7 ;
)xx; <
itemxx< @
)xx@ A
}yy 
;yy 
}{{ 
}|| 	
public~~ 
static~~ 
IEnumerable~~ !
<~~! "
Item~~" &
>~~& '
EnumToArrayValues~~( 9
<~~9 :
T~~: ;
>~~; <
(~~< =
)~~= >
where~~? D
T~~E F
:~~G H
struct~~I O
,~~O P
IConvertible~~Q ]
{ 	
var
ÄÄ 

dictionary
ÄÄ 
=
ÄÄ 
new
ÄÄ  

Dictionary
ÄÄ! +
<
ÄÄ+ ,
string
ÄÄ, 2
,
ÄÄ2 3
string
ÄÄ4 :
>
ÄÄ: ;
(
ÄÄ; <
)
ÄÄ< =
;
ÄÄ= >
foreach
ÅÅ 
(
ÅÅ 
var
ÅÅ 
item
ÅÅ 
in
ÅÅ  
Enum
ÅÅ! %
.
ÅÅ% &
	GetValues
ÅÅ& /
(
ÅÅ/ 0
typeof
ÅÅ0 6
(
ÅÅ6 7
T
ÅÅ7 8
)
ÅÅ8 9
)
ÅÅ9 :
)
ÅÅ: ;
{
ÇÇ 
var
ÉÉ 
deger
ÉÉ 
=
ÉÉ 
(
ÉÉ 
int
ÉÉ  
)
ÉÉ  !
item
ÉÉ! %
;
ÉÉ% &
yield
ÑÑ 
return
ÑÑ 
new
ÑÑ  
Item
ÑÑ! %
{
ÑÑ& '
Key
ÑÑ( +
=
ÑÑ, -
deger
ÑÑ. 3
.
ÑÑ3 4
ToString
ÑÑ4 <
(
ÑÑ< =
)
ÑÑ= >
,
ÑÑ> ?
Value
ÑÑ@ E
=
ÑÑF G)
GetDescriptionFromEnumValue
ÑÑH c
(
ÑÑc d
(
ÑÑd e
Enum
ÑÑe i
)
ÑÑi j
item
ÑÑj n
)
ÑÑn o
,
ÑÑo p
EnumKey
ÑÑq x
=
ÑÑy z
item
ÑÑ{ 
.ÑÑ Ä
ToStringÑÑÄ à
(ÑÑà â
)ÑÑâ ä
}ÑÑã å
;ÑÑå ç
}
ÖÖ 
}
ÜÜ 	
public
àà 
static
àà 
IEnumerable
àà !
<
àà! "
AttriubteItem
àà" /
>
àà/ 0&
EnumToArrayGenericValues
àà1 I
<
ààI J
T
ààJ K
>
ààK L
(
ààL M
)
ààM N
{
ââ 	
var
ää 

dictionary
ää 
=
ää 
new
ää  

Dictionary
ää! +
<
ää+ ,
string
ää, 2
,
ää2 3
string
ää4 :
>
ää: ;
(
ää; <
)
ää< =
;
ää= >
foreach
ãã 
(
ãã 
var
ãã 
item
ãã 
in
ãã  
Enum
ãã! %
.
ãã% &
	GetValues
ãã& /
(
ãã/ 0
typeof
ãã0 6
(
ãã6 7
T
ãã7 8
)
ãã8 9
)
ãã9 :
)
ãã: ;
{
åå 
var
çç 
deger
çç 
=
çç 
(
çç 
int
çç  
)
çç  !
item
çç! %
;
çç% &
yield
éé 
return
éé 
new
éé  
AttriubteItem
éé! .
{
éé/ 0
Key
éé1 4
=
éé5 6
deger
éé7 <
.
éé< =
ToString
éé= E
(
ééE F
)
ééF G
,
ééG H
Value
ééI N
=
ééO P#
GetStringGenericValue
ééQ f
(
ééf g
(
éég h
Enum
ééh l
)
éél m
item
éém q
)
ééq r
}
éés t
;
éét u
}
èè 
}
êê 	
public
íí 
static
íí 
IEnumerable
íí !
<
íí! "
AttriubteItem
íí" /
>
íí/ 0$
EnumToArrayBirimValues
íí1 G
<
ííG H
T
ííH I
>
ííI J
(
ííJ K
)
ííK L
{
ìì 	
var
îî 

dictionary
îî 
=
îî 
new
îî  

Dictionary
îî! +
<
îî+ ,
string
îî, 2
,
îî2 3
string
îî4 :
>
îî: ;
(
îî; <
)
îî< =
;
îî= >
foreach
ïï 
(
ïï 
var
ïï 
item
ïï 
in
ïï  
Enum
ïï! %
.
ïï% &
	GetValues
ïï& /
(
ïï/ 0
typeof
ïï0 6
(
ïï6 7
T
ïï7 8
)
ïï8 9
)
ïï9 :
)
ïï: ;
{
ññ 
var
òò 
deger
òò 
=
òò 
(
òò 
int
òò  
)
òò  !
item
òò! %
;
òò% &
yield
öö 
return
öö 
new
öö  
AttriubteItem
öö! .
{
öö/ 0
Key
öö1 4
=
öö5 6
deger
öö7 <
.
öö< =
ToString
öö= E
(
ööE F
)
ööF G
,
ööG H

BirimValue
ööI S
=
ööT U!
GetStringBirimValue
ööV i
(
ööi j
(
ööj k
Enum
öök o
)
ööo p
item
ööp t
)
ööt u
}
ööv w
;
ööw x
}
ùù 
}
ûû 	
public
†† 
static
†† (
BreadCrump_AuthorityAction
†† 0#
GetStringGenericValue
††1 F
(
††F G
Enum
††G K
value
††L Q
)
††Q R
{
°° 	(
BreadCrump_AuthorityAction
¢¢ &
	attribute
¢¢' 0
=
¢¢1 2
value
¢¢3 8
.
¢¢8 9
GetType
¢¢9 @
(
¢¢@ A
)
¢¢A B
.
££ 
GetField
££ 
(
££ 
value
££ 
.
££  
ToString
££  (
(
££( )
)
££) *
)
££* +
.
§§ !
GetCustomAttributes
§§ $
(
§§$ %
typeof
§§% +
(
§§+ ,(
BreadCrump_AuthorityAction
§§, F
)
§§F G
,
§§G H
false
§§I N
)
§§N O
.
•• 
SingleOrDefault
••  
(
••  !
)
••! "
as
••# %(
BreadCrump_AuthorityAction
••& @
;
••@ A
return
¶¶ 
	attribute
¶¶ 
;
¶¶ 
}
ßß 	
public
©© 
static
©© 
Birim
©© !
GetStringBirimValue
©© /
(
©©/ 0
Enum
©©0 4
value
©©5 :
)
©©: ;
{
™™ 	
Birim
´´ 
	attribute
´´ 
=
´´ 
value
´´ #
.
´´# $
GetType
´´$ +
(
´´+ ,
)
´´, -
.
¨¨ 
GetField
¨¨ 
(
¨¨ 
value
¨¨ 
.
¨¨  
ToString
¨¨  (
(
¨¨( )
)
¨¨) *
)
¨¨* +
.
≠≠ !
GetCustomAttributes
≠≠ $
(
≠≠$ %
typeof
≠≠% +
(
≠≠+ ,
Birim
≠≠, 1
)
≠≠1 2
,
≠≠2 3
false
≠≠4 9
)
≠≠9 :
.
ÆÆ 
SingleOrDefault
ÆÆ  
(
ÆÆ  !
)
ÆÆ! "
as
ÆÆ# %
Birim
ÆÆ& +
;
ÆÆ+ ,
return
ØØ 
	attribute
ØØ 
;
ØØ 
}
∞∞ 	
public
≤≤ 
static
≤≤ 
string
≤≤ "
EnumKeyToDescription
≤≤ 1
<
≤≤1 2
T
≤≤2 3
>
≤≤3 4
(
≤≤4 5
dynamic
≤≤5 <
key
≤≤= @
)
≤≤@ A
where
≤≤B G
T
≤≤H I
:
≤≤J K
struct
≤≤L R
,
≤≤R S
IConvertible
≤≤T `
{
≥≥ 	
if
¥¥ 
(
¥¥ 
key
¥¥ 
==
¥¥ 
null
¥¥ 
)
¥¥ 
return
µµ 
string
µµ 
.
µµ 
Empty
µµ #
;
µµ# $
var
∑∑ 
result
∑∑ 
=
∑∑ 
EnumsProperties
∑∑ (
.
∑∑( )
EnumToArrayValues
∑∑) :
<
∑∑: ;
T
∑∑; <
>
∑∑< =
(
∑∑= >
)
∑∑> ?
.
∑∑? @
Where
∑∑@ E
(
∑∑E F
p
∑∑F G
=>
∑∑H J
p
∑∑K L
.
∑∑L M
Key
∑∑M P
.
∑∑P Q
Equals
∑∑Q W
(
∑∑W X
key
∑∑X [
.
∑∑[ \
ToString
∑∑\ d
(
∑∑d e
)
∑∑e f
)
∑∑f g
)
∑∑g h
.
∑∑h i
FirstOrDefault
∑∑i w
(
∑∑w x
)
∑∑x y
;
∑∑y z
return
∏∏ 
result
∏∏ 
!=
∏∏ 
null
∏∏ !
?
∏∏" #
result
∏∏$ *
.
∏∏* +
Value
∏∏+ 0
:
∏∏1 2
string
∏∏3 9
.
∏∏9 :
Empty
∏∏: ?
;
∏∏? @
}
ππ 	
private
ªª 
static
ªª 
string
ªª 
EnumKeyToTitValue
ªª /
<
ªª/ 0
T
ªª0 1
>
ªª1 2
(
ªª2 3
dynamic
ªª3 :
key
ªª; >
)
ªª> ?
{
ºº 	
var
ΩΩ 
result
ΩΩ 
=
ΩΩ 
EnumsProperties
ΩΩ (
.
ΩΩ( )&
EnumToArrayGenericValues
ΩΩ) A
<
ΩΩA B
T
ΩΩB C
>
ΩΩC D
(
ΩΩD E
)
ΩΩE F
.
ΩΩF G
Where
ΩΩG L
(
ΩΩL M
p
ΩΩM N
=>
ΩΩO Q
p
ΩΩR S
.
ΩΩS T
Key
ΩΩT W
.
ΩΩW X
Equals
ΩΩX ^
(
ΩΩ^ _
key
ΩΩ_ b
.
ΩΩb c
ToString
ΩΩc k
(
ΩΩk l
)
ΩΩl m
)
ΩΩm n
)
ΩΩn o
.
ΩΩo p
FirstOrDefault
ΩΩp ~
(
ΩΩ~ 
)ΩΩ Ä
;ΩΩÄ Å
return
ææ 
result
ææ 
!=
ææ 
null
ææ !
?
ææ" #
result
ææ$ *
.
ææ* +
Value
ææ+ 0
.
ææ0 1!
AuthorityActionText
ææ1 D
:
ææE F
string
ææG M
.
ææM N
Empty
ææN S
;
ææS T
}
øø 	
public
¿¿ 
static
¿¿ 
string
¿¿ !
EnumKeyToBirimValue
¿¿ 0
<
¿¿0 1
T
¿¿1 2
>
¿¿2 3
(
¿¿3 4
dynamic
¿¿4 ;
key
¿¿< ?
)
¿¿? @
{
¡¡ 	
var
¬¬ 
result
¬¬ 
=
¬¬ 
EnumsProperties
¬¬ (
.
¬¬( )$
EnumToArrayBirimValues
¬¬) ?
<
¬¬? @
T
¬¬@ A
>
¬¬A B
(
¬¬B C
)
¬¬C D
.
¬¬D E
Where
¬¬E J
(
¬¬J K
p
¬¬K L
=>
¬¬M O
p
¬¬P Q
.
¬¬Q R
Key
¬¬R U
.
¬¬U V
Equals
¬¬V \
(
¬¬\ ]
key
¬¬] `
.
¬¬` a
ToString
¬¬a i
(
¬¬i j
)
¬¬j k
)
¬¬k l
)
¬¬l m
.
¬¬m n
FirstOrDefault
¬¬n |
(
¬¬| }
)
¬¬} ~
;
¬¬~ 
return
√√ 
result
√√ 
!=
√√ 
null
√√ !
?
√√" #
result
√√$ *
.
√√* +

BirimValue
√√+ 5
.
√√5 6
birim
√√6 ;
:
√√< =
string
√√> D
.
√√D E
Empty
√√E J
;
√√J K
}
ƒƒ 	
}
∆∆ 
}…… 
publicÕÕ 
class
ÕÕ 
Item
ÕÕ 
{ŒŒ 
public
œœ 

string
œœ 
Key
œœ 
{
œœ 
get
œœ 
;
œœ 
set
œœ  
;
œœ  !
}
œœ" #
public
–– 

string
–– 
Value
–– 
{
–– 
get
–– 
;
–– 
set
–– "
;
––" #
}
––$ %
public
—— 

string
—— 
EnumKey
—— 
{
—— 
get
—— 
;
——  
set
——! $
;
——$ %
}
——& '
public
““ 


Dictionary
““ 
<
““ 
string
““ 
,
““ 
string
““ $
>
““$ %
Generic
““& -
{
““. /
get
““0 3
;
““3 4
set
““5 8
;
““8 9
}
““: ;
public
”” 

Information
”” 
Information
”” "
{
””# $
get
””% (
;
””( )
set
””* -
;
””- .
}
””/ 0
}‘‘ 
public÷÷ 
class
÷÷ 
AttriubteItem
÷÷ 
{◊◊ 
public
ÿÿ 

string
ÿÿ 
Key
ÿÿ 
{
ÿÿ 
get
ÿÿ 
;
ÿÿ 
set
ÿÿ  
;
ÿÿ  !
}
ÿÿ" #
public
ŸŸ 
(
BreadCrump_AuthorityAction
ŸŸ %
Value
ŸŸ& +
{
ŸŸ, -
get
ŸŸ. 1
;
ŸŸ1 2
set
ŸŸ3 6
;
ŸŸ6 7
}
ŸŸ8 9
public
⁄⁄ 

Birim
⁄⁄ 

BirimValue
⁄⁄ 
{
⁄⁄ 
get
⁄⁄ !
;
⁄⁄! "
set
⁄⁄# &
;
⁄⁄& '
}
⁄⁄( )
}‹‹ 
publicﬁﬁ 
class
ﬁﬁ 
Birim
ﬁﬁ 
:
ﬁﬁ 
	Attribute
ﬁﬁ 
{ﬂﬂ 
public
‡‡ 

Birim
‡‡ 
(
‡‡ 
string
‡‡ 
	nameParam
‡‡ !
)
‡‡! "
{
·· 
_birim
‚‚ 
=
‚‚ 
	nameParam
‚‚ 
;
‚‚ 
}
„„ 
public
‰‰ 

string
‰‰ 
birim
‰‰ 
{
‰‰ 
get
‰‰ 
{
‰‰ 
return
‰‰  &
_birim
‰‰' -
;
‰‰- .
}
‰‰/ 0
}
‰‰1 2
private
ÂÂ 
string
ÂÂ 
_birim
ÂÂ 
;
ÂÂ 
}ÁÁ 
[ÈÈ 
AttributeUsage
ÈÈ 
(
ÈÈ 
AttributeTargets
ÈÈ  
.
ÈÈ  !
All
ÈÈ! $
,
ÈÈ$ %
	Inherited
ÈÈ& /
=
ÈÈ0 1
false
ÈÈ2 7
,
ÈÈ7 8
AllowMultiple
ÈÈ9 F
=
ÈÈG H
true
ÈÈI M
)
ÈÈM N
]
ÈÈN O
publicÍÍ 
sealed
ÍÍ 
class
ÍÍ 
Information
ÍÍ 
:
ÍÍ  !
	Attribute
ÍÍ" +
{ÎÎ 
public
ÏÏ 

Information
ÏÏ 
(
ÏÏ 
int
ÏÏ 
min
ÏÏ 
,
ÏÏ 
int
ÏÏ  #
max
ÏÏ$ '
,
ÏÏ' (
string
ÏÏ) /
color
ÏÏ0 5
,
ÏÏ5 6
string
ÏÏ7 =
colorDescription
ÏÏ> N
)
ÏÏN O
{
ÌÌ 
this
ÓÓ 
.
ÓÓ 
Color
ÓÓ 
=
ÓÓ 
color
ÓÓ 
;
ÓÓ 
this
ÔÔ 
.
ÔÔ 
Description
ÔÔ 
=
ÔÔ 
colorDescription
ÔÔ +
;
ÔÔ+ ,
this
 
.
 
Min
 
=
 
min
 
;
 
this
ÒÒ 
.
ÒÒ 
Max
ÒÒ 
=
ÒÒ 
max
ÒÒ 
;
ÒÒ 
}
ÚÚ 
public
ÙÙ 

Information
ÙÙ 
(
ÙÙ 
string
ÙÙ 
color
ÙÙ #
)
ÙÙ# $
{
ıı 
this
ˆˆ 
.
ˆˆ 
Color
ˆˆ 
=
ˆˆ 
color
ˆˆ 
;
ˆˆ 
}
¯¯ 
public
˘˘ 

string
˘˘ 
Color
˘˘ 
{
˘˘ 
get
˘˘ 
;
˘˘ 
}
˘˘  
public
˙˙ 

string
˙˙ 
Description
˙˙ 
{
˙˙ 
get
˙˙  #
;
˙˙# $
}
˙˙% &
public
˚˚ 

int
˚˚ 
Min
˚˚ 
{
˚˚ 
get
˚˚ 
;
˚˚ 
}
˚˚ 
public
¸¸ 

int
¸¸ 
Max
¸¸ 
{
¸¸ 
get
¸¸ 
;
¸¸ 
}
¸¸ 
}˝˝ 
publicÄÄ 
class
ÄÄ 
GenericAttribute
ÄÄ 
:
ÄÄ 
	Attribute
ÄÄ  )
{ÅÅ 
public
ÇÇ 


Dictionary
ÇÇ 
<
ÇÇ 
string
ÇÇ 
,
ÇÇ 
string
ÇÇ $
>
ÇÇ$ %
Data
ÇÇ& *
{
ÇÇ+ ,
get
ÇÇ- 0
;
ÇÇ0 1
set
ÇÇ2 5
;
ÇÇ5 6
}
ÇÇ7 8
=
ÇÇ9 :
new
ÇÇ; >

Dictionary
ÇÇ? I
<
ÇÇI J
string
ÇÇJ P
,
ÇÇP Q
string
ÇÇR X
>
ÇÇX Y
(
ÇÇY Z
)
ÇÇZ [
;
ÇÇ[ \
public
áá 

GenericAttribute
áá 
(
áá 
params
áá "
string
áá# )
[
áá) *
]
áá* +
values
áá, 2
)
áá2 3
{
àà 
for
ââ 
(
ââ 
int
ââ 
i
ââ 
=
ââ 
$num
ââ 
;
ââ 
i
ââ 
<
ââ 
values
ââ "
.
ââ" #
Length
ââ# )
-
ââ* +
$num
ââ, -
;
ââ- .
i
ââ/ 0
++
ââ0 2
)
ââ2 3
{
ää 	
if
ãã 
(
ãã 
i
ãã 
%
ãã 
$num
ãã 
==
ãã 
$num
ãã 
)
ãã 
{
åå 
Data
çç 
[
çç 
values
çç 
[
çç 
i
çç 
]
çç 
]
çç 
=
çç  !
values
çç" (
[
çç( )
i
çç) *
+
çç+ ,
$num
çç- .
]
çç. /
;
çç/ 0
}
éé 
}
èè 	
}
êê 
}ëë 
[îî 
AttributeUsage
îî 
(
îî 
AttributeTargets
îî  
.
îî  !
All
îî! $
,
îî$ %
	Inherited
îî& /
=
îî0 1
false
îî2 7
,
îî7 8
AllowMultiple
îî9 F
=
îîG H
true
îîI M
)
îîM N
]
îîN O
publicïï 
class
ïï 
KeyValueAttribute
ïï 
:
ïï  
	Attribute
ïï! *
{ññ 
public
óó 

string
óó 
Key
óó 
{
óó 
get
óó 
;
óó 
set
óó  
;
óó  !
}
óó" #
public
ôô 

string
ôô 
Value
ôô 
{
ôô 
get
ôô 
;
ôô 
set
ôô "
;
ôô" #
}
ôô$ %
public
öö 

KeyValueAttribute
öö 
(
öö 
string
öö #
key
öö$ '
,
öö' (
string
öö) /
value
öö0 5
)
öö5 6
{
õõ 
Key
úú 
=
úú 
key
úú 
;
úú 
Value
ùù 
=
ùù 
value
ùù 
;
ùù 
}
ûû 
}üü 
public¢¢ 
class
¢¢ (
BreadCrump_AuthorityAction
¢¢ '
:
¢¢( )
	Attribute
¢¢* 3
{££ 
private
§§ 
string
§§ "
_authorityActionText
§§ '
;
§§' (
private
•• 
string
•• 
_breadCrumpText
•• "
;
••" #
private
¶¶ 
int
¶¶ 
_parentActionCode
¶¶ !
;
¶¶! "
public
ßß 

bool
ßß %
_showOnAuthorityActions
ßß '
{
ßß( )
get
ßß* -
;
ßß- .
set
ßß/ 2
;
ßß2 3
}
ßß4 5
public
©© 
(
BreadCrump_AuthorityAction
©© %
(
©©% &
string
™™ 
breadCrumpText
™™ 
,
™™ 
string
´´ !
authorityActionText
´´ "
,
´´" #
int
¨¨ 
parentActionCode
¨¨ 
=
¨¨ 
$num
¨¨  
,
¨¨  !
bool
≠≠ $
showOnAuthorityActions
≠≠ #
=
≠≠$ %
false
≠≠& +
)
≠≠+ ,
{
ÆÆ "
_authorityActionText
ØØ 
=
ØØ !
authorityActionText
ØØ 2
;
ØØ2 3
_breadCrumpText
∞∞ 
=
∞∞ 
breadCrumpText
∞∞ (
;
∞∞( )
_parentActionCode
±± 
=
±± 
parentActionCode
±± ,
;
±±, -%
_showOnAuthorityActions
≤≤ 
=
≤≤  !$
showOnAuthorityActions
≤≤" 8
;
≤≤8 9
}
≥≥ 
public
µµ 

string
µµ 
BreadCrumpText
µµ  
{
µµ! "
get
µµ# &
{
µµ' (
return
µµ) /
_breadCrumpText
µµ0 ?
;
µµ? @
}
µµA B
}
µµC D
public
∂∂ 

string
∂∂ !
AuthorityActionText
∂∂ %
{
∂∂& '
get
∂∂( +
{
∂∂, -
return
∂∂. 4"
_authorityActionText
∂∂5 I
;
∂∂I J
}
∂∂K L
}
∂∂M N
public
∑∑ 

int
∑∑ 
ParentActionCode
∑∑ 
{
∑∑  !
get
∑∑" %
{
∑∑& '
return
∑∑( .
_parentActionCode
∑∑/ @
;
∑∑@ A
}
∑∑B C
}
∑∑D E
public
∏∏ 

bool
∏∏ $
ShowOnAuthorityActions
∏∏ &
{
∏∏' (
get
∏∏) ,
{
∏∏- .
return
∏∏/ 5%
_showOnAuthorityActions
∏∏6 M
;
∏∏M N
}
∏∏O P
}
∏∏Q R
}∫∫ ¶à
ÇD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\ExcelExportHelper.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Helper #
{		 
public

 

static

 
class

 
ExcelExportHelper

 )
{ 
public 
static 
void 
Write  
(  !
IEnumerable! ,
<, -

Dictionary- 7
<7 8
string8 >
,> ?
object@ F
>F G
>G H
datasI N
,N O

DictionaryP Z
<Z [
string[ a
,a b
objectc i
>i j
fieldsk q
,q r
strings y
pathz ~
)~ 
{ 	

FileStream 
stream 
= 
new  #

FileStream$ .
(. /
path/ 3
,3 4
System5 ;
.; <
IO< >
.> ?
FileMode? G
.G H
OpenOrCreateH T
)T U
;U V
ExcelWriter 
xlwriter  
=! "
new# &
ExcelWriter' 2
(2 3
stream3 9
)9 :
;: ;
xlwriter 
. 

BeginWrite 
(  
)  !
;! "
foreach 
( 
var 
field 
in !
fields" (
.( )
Select) /
(/ 0
(0 1
value1 6
,6 7
index8 =
)= >
=>? A
newB E
{F G
indexH M
=N O
indexP U
,U V
valueW \
=] ^
value_ d
}e f
)f g
)g h
{ 
var 
obj 
= 
field 
.  
value  %
.% &
Key& )
;) *
xlwriter 
. 
	WriteCell "
(" #
$num# $
,$ %
field& +
.+ ,
index, 1
,1 2
(3 4
field4 9
.9 :
value: ?
.? @
Value@ E
)E F
.F G
ToStringG O
(O P
)P Q
)Q R
;R S
foreach 
( 
var 
data !
in" $
datas% *
.* +
Select+ 1
(1 2
(2 3
value3 8
,8 9
index: ?
)? @
=>A C
newD G
{H I
valueJ O
=P Q
valueR W
,W X
indexY ^
=_ `
indexa f
+g h
$numi j
}k l
)l m
)m n
{ 
if 
( 
data 
. 
value "
." #
ContainsKey# .
(. /
obj/ 2
)2 3
)3 4
{ 
if 
( 
data  
.  !
value! &
[& '
obj' *
]* +
!=, .
null/ 3
)3 4
{ 
xlwriter $
.$ %
	WriteCell% .
(. /
data/ 3
.3 4
index4 9
,9 :
field; @
.@ A
indexA F
,F G
dataH L
.L M
valueM R
[R S
objS V
]V W
.W X
ToStringX `
(` a
)a b
)b c
;c d
}   
}!! 
}"" 
}## 
xlwriter%% 
.%% 
EndWrite%% 
(%% 
)%% 
;%%  
stream&& 
.&& 
Close&& 
(&& 
)&& 
;&& 
}(( 	
public** 
static** 
void** 
Write**  
<**  !
T**! "
>**" #
(**# $
this**$ (
IEnumerable**) 4
<**4 5
T**5 6
>**6 7
datas**8 =
,**= >

Dictionary**? I
<**I J
string**J P
,**P Q
object**R X
>**X Y
fields**Z `
,**` a
string**b h
path**i m
)**m n
{++ 	

FileStream-- 
stream-- 
=-- 
new--  #

FileStream--$ .
(--. /
path--/ 3
,--3 4
System--5 ;
.--; <
IO--< >
.--> ?
FileMode--? G
.--G H
OpenOrCreate--H T
)--T U
;--U V
ExcelWriter.. 
xlwriter..  
=..! "
new..# &
ExcelWriter..' 2
(..2 3
stream..3 9
)..9 :
;..: ;
xlwriter// 
.// 

BeginWrite// 
(//  
)//  !
;//! "
if11 
(11 
fields11 
==11 
null11 
)11 
{22 
fields33 
=33 
new33 

Dictionary33 '
<33' (
string33( .
,33. /
object330 6
>336 7
(337 8
)338 9
;339 :
foreach44 
(44 
var44 
item44 !
in44" $
datas44% *
.44* +
FirstOrDefault44+ 9
(449 :
)44: ;
.44; <
GetType44< C
(44C D
)44D E
.44E F
GetProperties44F S
(44S T
)44T U
)44U V
{55 
fields66 
.66 
Add66 
(66 
item66 #
.66# $
Name66$ (
,66( )
item66* .
.66. /
Name66/ 3
)663 4
;664 5
}77 
}99 
foreach:: 
(:: 
var:: 
field:: 
in:: !
fields::" (
.::( )
Select::) /
(::/ 0
(::0 1
value::1 6
,::6 7
index::8 =
)::= >
=>::? A
new::B E
{::F G
index::H M
=::N O
index::P U
,::U V
value::W \
=::] ^
value::_ d
}::e f
)::f g
)::g h
{;; 
var<< 
obj<< 
=<< 
field<< 
.<<  
value<<  %
.<<% &
Key<<& )
;<<) *
xlwriter>> 
.>> 
	WriteCell>> "
(>>" #
$num>># $
,>>$ %
field>>& +
.>>+ ,
index>>, 1
,>>1 2
field>>3 8
.>>8 9
value>>9 >
.>>> ?
Value>>? D
.>>D E
ToString>>E M
(>>M N
)>>N O
)>>O P
;>>P Q
foreach?? 
(?? 
var?? 
data?? !
in??" $
datas??% *
.??* +
Select??+ 1
(??1 2
(??2 3
value??3 8
,??8 9
index??: ?
)??? @
=>??A C
new??D G
{??H I
value??J O
=??P Q
value??R W
,??W X
index??Y ^
=??_ `
index??a f
+??g h
$num??i j
}??k l
)??l m
)??m n
{@@ 
ifAA 
(AA 
typeofAA 
(AA 
TAA  
)AA  !
.AA! "
IsClassAA" )
)AA) *
{BB 
varDD 
keyDD 
=DD  !
dataDD" &
.DD& '
valueDD' ,
.DD, -
GetTypeDD- 4
(DD4 5
)DD5 6
.DD6 7
GetPropertyDD7 B
(DDB C
fieldDDC H
.DDH I
valueDDI N
.DDN O
KeyDDO R
)DDR S
.DDS T
GetValueDDT \
(DD\ ]
dataDD] a
.DDa b
valueDDb g
,DDg h
nullDDi m
)DDm n
;DDn o
ifEE 
(EE 
keyEE 
!=EE  "
nullEE# '
)EE' (
{FF 
varGG 
valueGG  %
=GG& '
keyGG( +
.GG+ ,
ToStringGG, 4
(GG4 5
)GG5 6
;GG6 7
xlwriterHH $
.HH$ %
	WriteCellHH% .
(HH. /
dataHH/ 3
.HH3 4
indexHH4 9
,HH9 :
fieldHH; @
.HH@ A
indexHHA F
,HHF G
valueHHH M
)HHM N
;HHN O
}II 
}JJ 
}LL 
}MM 
xlwriterNN 
.NN 
EndWriteNN 
(NN 
)NN 
;NN  
streamOO 
.OO 
CloseOO 
(OO 
)OO 
;OO 
}PP 	
privateRR 
classRR 
ExcelWriterRR !
{SS 	
privateVV 
StreamVV 
streamVV !
;VV! "
privateWW 
BinaryWriterWW  
writerWW! '
;WW' (
privateYY 
ushortYY 
[YY 
]YY 
clBeginYY $
=YY% &
{YY' (
$numYY) /
,YY/ 0
$numYY1 2
,YY2 3
$numYY4 5
,YY5 6
$numYY7 ;
,YY; <
$numYY= >
,YY> ?
$numYY@ A
}YYB C
;YYC D
privateZZ 
ushortZZ 
[ZZ 
]ZZ 
clEndZZ "
=ZZ# $
{ZZ% &
$numZZ' +
,ZZ+ ,
$numZZ- /
}ZZ0 1
;ZZ1 2
private]] 
void]] 
WriteUshortArray]] )
(]]) *
ushort]]* 0
[]]0 1
]]]1 2
value]]3 8
)]]8 9
{^^ 
for__ 
(__ 
int__ 
i__ 
=__ 
$num__ 
;__ 
i__  !
<__" #
value__$ )
.__) *
Length__* 0
;__0 1
i__2 3
++__3 5
)__5 6
writer`` 
.`` 
Write``  
(``  !
value``! &
[``& '
i``' (
]``( )
)``) *
;``* +
}aa 
publicgg 
ExcelWritergg 
(gg 
Streamgg %
streamgg& ,
)gg, -
{hh 
thisii 
.ii 
streamii 
=ii 
streamii $
;ii$ %
writerjj 
=jj 
newjj 
BinaryWriterjj )
(jj) *
streamjj* 0
)jj0 1
;jj1 2
}kk 
publicss 
voidss 
	WriteCellss !
(ss! "
intss" %
rowss& )
,ss) *
intss+ .
colss/ 2
,ss2 3
stringss4 :
valuess; @
)ss@ A
{tt 
Encodinguu 
enTruu 
=uu 
Encodinguu  (
.uu( )
GetEncodinguu) 4
(uu4 5
$struu5 C
)uuC D
;uuD E
Encodingvv 
unicodevv  
=vv! "
Encodingvv# +
.vv+ ,
UTF8vv, 0
;vv0 1
ushortww 
[ww 
]ww 
clDataww 
=ww  !
{ww" #
$numww$ *
,ww* +
$numww, -
,ww- .
$numww/ 0
,ww0 1
$numww2 3
,ww3 4
$numww5 6
,ww6 7
$numww8 9
}ww: ;
;ww; <
intxx 
iLenxx 
=xx 
valuexx  
.xx  !
Lengthxx! '
;xx' (
byteyy 
[yy 
]yy 
unicodeBytesyy #
=yy$ %
unicodeyy& -
.yy- .
GetBytesyy. 6
(yy6 7
valueyy7 <
)yy< =
;yy= >
bytezz 
[zz 
]zz 
	plainTextzz  
=zz! "
Encodingzz# +
.zz+ ,
Convertzz, 3
(zz3 4
unicodezz4 ;
,zz; <
enTrzz= A
,zzA B
unicodeByteszzC O
)zzO P
;zzP Q
clData{{ 
[{{ 
$num{{ 
]{{ 
={{ 
({{ 
ushort{{ #
){{# $
({{$ %
$num{{% &
+{{' (
iLen{{) -
){{- .
;{{. /
clData|| 
[|| 
$num|| 
]|| 
=|| 
(|| 
ushort|| #
)||# $
row||$ '
;||' (
clData}} 
[}} 
$num}} 
]}} 
=}} 
(}} 
ushort}} #
)}}# $
col}}$ '
;}}' (
clData~~ 
[~~ 
$num~~ 
]~~ 
=~~ 
(~~ 
ushort~~ #
)~~# $
iLen~~$ (
;~~( )
WriteUshortArray  
(  !
clData! '
)' (
;( )
writer
ÄÄ 
.
ÄÄ 
Write
ÄÄ 
(
ÄÄ 
	plainText
ÄÄ &
)
ÄÄ& '
;
ÄÄ' (
}
ÅÅ 
public
ââ 
void
ââ 
	WriteCell
ââ !
(
ââ! "
int
ââ" %
row
ââ& )
,
ââ) *
int
ââ+ .
col
ââ/ 2
,
ââ2 3
int
ââ4 7
value
ââ8 =
)
ââ= >
{
ää 
ushort
ãã 
[
ãã 
]
ãã 
clData
ãã 
=
ãã  !
{
ãã" #
$num
ãã$ *
,
ãã* +
$num
ãã, .
,
ãã. /
$num
ãã0 1
,
ãã1 2
$num
ãã3 4
,
ãã4 5
$num
ãã6 7
}
ãã8 9
;
ãã9 :
clData
åå 
[
åå 
$num
åå 
]
åå 
=
åå 
(
åå 
ushort
åå #
)
åå# $
row
åå$ '
;
åå' (
clData
çç 
[
çç 
$num
çç 
]
çç 
=
çç 
(
çç 
ushort
çç #
)
çç# $
col
çç$ '
;
çç' (
WriteUshortArray
éé  
(
éé  !
clData
éé! '
)
éé' (
;
éé( )
int
èè 
iValue
èè 
=
èè 
(
èè 
value
èè #
<<
èè$ &
$num
èè' (
)
èè( )
|
èè* +
$num
èè, -
;
èè- .
writer
êê 
.
êê 
Write
êê 
(
êê 
iValue
êê #
)
êê# $
;
êê$ %
}
ëë 
public
ôô 
void
ôô 
	WriteCell
ôô !
(
ôô! "
int
ôô" %
row
ôô& )
,
ôô) *
int
ôô+ .
col
ôô/ 2
,
ôô2 3
double
ôô4 :
value
ôô; @
)
ôô@ A
{
öö 
ushort
õõ 
[
õõ 
]
õõ 
clData
õõ 
=
õõ  !
{
õõ" #
$num
õõ$ *
,
õõ* +
$num
õõ, .
,
õõ. /
$num
õõ0 1
,
õõ1 2
$num
õõ3 4
,
õõ4 5
$num
õõ6 7
}
õõ8 9
;
õõ9 :
clData
úú 
[
úú 
$num
úú 
]
úú 
=
úú 
(
úú 
ushort
úú #
)
úú# $
row
úú$ '
;
úú' (
clData
ùù 
[
ùù 
$num
ùù 
]
ùù 
=
ùù 
(
ùù 
ushort
ùù #
)
ùù# $
col
ùù$ '
;
ùù' (
WriteUshortArray
ûû  
(
ûû  !
clData
ûû! '
)
ûû' (
;
ûû( )
writer
üü 
.
üü 
Write
üü 
(
üü 
value
üü "
)
üü" #
;
üü# $
}
†† 
public
ßß 
void
ßß 
	WriteCell
ßß !
(
ßß! "
int
ßß" %
row
ßß& )
,
ßß) *
int
ßß+ .
col
ßß/ 2
)
ßß2 3
{
®® 
ushort
©© 
[
©© 
]
©© 
clData
©© 
=
©©  !
{
©©" #
$num
©©$ *
,
©©* +
$num
©©, -
,
©©- .
$num
©©/ 0
,
©©0 1
$num
©©2 3
,
©©3 4
$num
©©5 9
}
©©: ;
;
©©; <
clData
™™ 
[
™™ 
$num
™™ 
]
™™ 
=
™™ 
(
™™ 
ushort
™™ #
)
™™# $
row
™™$ '
;
™™' (
clData
´´ 
[
´´ 
$num
´´ 
]
´´ 
=
´´ 
(
´´ 
ushort
´´ #
)
´´# $
col
´´$ '
;
´´' (
WriteUshortArray
¨¨  
(
¨¨  !
clData
¨¨! '
)
¨¨' (
;
¨¨( )
}
≠≠ 
public
≤≤ 
void
≤≤ 

BeginWrite
≤≤ "
(
≤≤" #
)
≤≤# $
{
≥≥ 
WriteUshortArray
¥¥  
(
¥¥  !
clBegin
¥¥! (
)
¥¥( )
;
¥¥) *
}
µµ 
public
∫∫ 
void
∫∫ 
EndWrite
∫∫  
(
∫∫  !
)
∫∫! "
{
ªª 
WriteUshortArray
ºº  
(
ºº  !
clEnd
ºº! &
)
ºº& '
;
ºº' (
writer
ΩΩ 
.
ΩΩ 
Flush
ΩΩ 
(
ΩΩ 
)
ΩΩ 
;
ΩΩ 
}
ææ 
}
¿¿ 	
}
¬¬ 
}√√ ÓP
ÇD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\ExcelImportHelper.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Helper #
{		 
public 

class 

ColumnInfo 
{ 
public 
string 
Name 
{ 
get  
;  !
set" %
;% &
}' (
public 
string 
Alias 
{ 
get !
;! "
set# &
;& '
}( )
public 
string 
Type 
{ 
get  
;  !
set" %
;% &
}' (
public 
object 
DefaultValue "
{# $
get% (
;( )
set* -
;- .
}/ 0
public 
bool 
Required 
{ 
get "
;" #
set$ '
;' (
}) *
public 
bool 
Unique 
{ 
get  
;  !
set" %
;% &
}' (
public 
string 
Description !
{" #
get$ '
;' (
set) ,
;, -
}. /
public 
string 
Info 
{ 
get  
;  !
set" %
;% &
}' (
public 
bool 
IsHidden 
{ 
get "
;" #
set$ '
;' (
}) *
} 
public 

class 
ColumnInfoAttribute $
:% &
	Attribute' 0
{ 
public 
string 
Alias 
{ 
get !
;! "
set# &
;& '
}( )
public 
object 
DefaultValue "
{# $
get% (
;( )
set* -
;- .
}/ 0
public 
bool 
Required 
{ 
get "
;" #
set$ '
;' (
}) *
public 
bool 
IsUnique 
{ 
get "
;" #
set$ '
;' (
}) *
public 
string 
Description !
{" #
get$ '
;' (
set) ,
;, -
}. /
public   
string   
Info   
{   
get    
;    !
set  " %
;  % &
}  ' (
public!! 
bool!! 
IsHidden!! 
{!! 
get!! "
;!!" #
set!!$ '
;!!' (
}!!) *
public"" 
ColumnInfoAttribute"" "
(""" #
string""# )
alias""* /
,""/ 0
bool""1 5
required""6 >
=""? @
false""A F
,""F G
object""H N
defaultValue""O [
=""\ ]
null""^ b
,""b c
bool""d h
isUnique""i q
=""r s
false""t y
,""y z
string	""{ Å
description
""Ç ç
=
""é è
$str
""ê í
,
""í ì
string
""î ö
info
""õ ü
=
""† °
$str
""¢ §
,
""§ •
bool
""¶ ™
isHidden
""´ ≥
=
""¥ µ
false
""∂ ª
)
""ª º
{## 	
Alias$$ 
=$$ 
alias$$ 
;$$ 
DefaultValue%% 
=%% 
defaultValue%% '
;%%' (
Required&& 
=&& 
required&& 
;&&  
IsUnique'' 
='' 
isUnique'' 
;''  
Description(( 
=(( 
description(( %
;((% &
Info)) 
=)) 
info)) 
;)) 
IsHidden** 
=** 
isHidden** 
;**  
}++ 	
},, 
public-- 

class-- 
ExcelResultStatus-- "
{.. 
public// 
bool// 
status// 
{// 
get//  
;//  !
set//" %
;//% &
}//' (
public00 
string00 
message00 
{00 
get00  #
;00# $
set00% (
;00( )
}00* +
public11 
int11 
	rowNumber11 
{11 
get11 "
;11" #
set11$ '
;11' (
}11) *
}22 
public55 

static55 
class55 
ExcelImportHelper55 )
{66 
public77 
static77 
string77 
	GetSchema77 &
(77& '
Type77' +

excelClass77, 6
,776 7
string778 >
	tableName77? H
=77I J
$str77K M
)77M N
{88 	
return99 
Infoline99 
.99 
Helper99 "
.99" #
Json99# '
.99' (
	Serialize99( 1
(991 2
GetColumnInfo992 ?
(99? @

excelClass99@ J
,99J K
	tableName99L U
)99U V
)99V W
;99W X
}:: 	
public;; 
static;; 

ColumnInfo;;  
[;;  !
];;! "
GetColumnInfo;;# 0
(;;0 1
Type;;1 5

excelClass;;6 @
,;;@ A
string;;B H
	tableName;;I R
=;;S T
$str;;U W
);;W X
{<< 	
var>> 
list>> 
=>> 
new>> 
List>> 
<>>  

ColumnInfo>>  *
>>>* +
(>>+ ,
)>>, -
;>>- .
foreach?? 
(?? 
var?? 
item?? 
in??  

excelClass??! +
.??+ ,
GetProperties??, 9
(??9 :
)??: ;
.??; <
OrderBy??< C
(??C D
a??D E
=>??F H
a??I J
.??J K
MetadataToken??K X
)??X Y
)??Y Z
{@@ 
varAA 
columnAA 
=AA 
newAA  

ColumnInfoAA! +
(AA+ ,
)AA, -
;AA- .
columnBB 
.BB 
NameBB 
=BB 
itemBB "
.BB" #
NameBB# '
;BB' (
ifDD 
(DD 
itemDD 
.DD 
PropertyTypeDD %
.DD% &
IsGenericTypeDD& 3
&&DD4 6
itemDD7 ;
.DD; <
PropertyTypeDD< H
.DDH I$
GetGenericTypeDefinitionDDI a
(DDa b
)DDb c
==DDd f
typeofDDg m
(DDm n
NullableDDn v
<DDv w
>DDw x
)DDx y
)DDy z
{EE 
columnFF 
.FF 
TypeFF 
=FF  !
itemFF" &
.FF& '
PropertyTypeFF' 3
.FF3 4
GetGenericArgumentsFF4 G
(FFG H
)FFH I
[FFI J
$numFFJ K
]FFK L
.FFL M
NameFFM Q
;FFQ R
}GG 
elseHH 
{II 
columnJJ 
.JJ 
TypeJJ 
=JJ  !
itemJJ" &
.JJ& '
PropertyTypeJJ' 3
.JJ3 4
NameJJ4 8
;JJ8 9
}KK 
columnMM 
.MM 
AliasMM 
=MM 
itemMM #
.MM# $
GetCustomAttributeMM$ 6
<MM6 7
ColumnInfoAttributeMM7 J
>MMJ K
(MMK L
)MML M
.MMM N
AliasMMN S
;MMS T
columnNN 
.NN 
DefaultValueNN #
=NN$ %
itemNN& *
.NN* +
GetCustomAttributeNN+ =
<NN= >
ColumnInfoAttributeNN> Q
>NNQ R
(NNR S
)NNS T
.NNT U
DefaultValueNNU a
;NNa b
columnOO 
.OO 
RequiredOO 
=OO  !
itemOO" &
.OO& '
GetCustomAttributeOO' 9
<OO9 :
ColumnInfoAttributeOO: M
>OOM N
(OON O
)OOO P
.OOP Q
RequiredOOQ Y
;OOY Z
columnPP 
.PP 
UniquePP 
=PP 
itemPP  $
.PP$ %
GetCustomAttributePP% 7
<PP7 8
ColumnInfoAttributePP8 K
>PPK L
(PPL M
)PPM N
.PPN O
IsUniquePPO W
;PPW X
columnQQ 
.QQ 
InfoQQ 
=QQ 
itemQQ "
.QQ" #
GetCustomAttributeQQ# 5
<QQ5 6
ColumnInfoAttributeQQ6 I
>QQI J
(QQJ K
)QQK L
.QQL M
InfoQQM Q
;QQQ R
columnRR 
.RR 
IsHiddenRR 
=RR  !
itemRR" &
.RR& '
GetCustomAttributeRR' 9
<RR9 :
ColumnInfoAttributeRR: M
>RRM N
(RRN O
)RRO P
.RRP Q
IsHiddenRRQ Y
;RRY Z
ifTT 
(TT 
columnTT 
.TT 
TypeTT 
==TT  "
$strTT# -
)TT- .
{UU 
columnVV 
.VV 
DescriptionVV &
=VV' (
$strVV) @
;VV@ A
}WW 
ifYY 
(YY 
columnYY 
.YY 
TypeYY 
==YY  "
$strYY# +
)YY+ ,
{ZZ 
column[[ 
.[[ 
Description[[ &
=[[' (
$str[[) =
;[[= >
}\\ 
if^^ 
(^^ 
column^^ 
.^^ 
Type^^ 
==^^  "
$str^^# ,
)^^, -
{__ 
column`` 
.`` 
Description`` &
=``' (
$str``) 6
;``6 7
}aa 
listdd 
.dd 
Adddd 
(dd 
columndd 
)dd  
;dd  !
}ee 
returnff 
listff 
.ff 
ToArrayff 
(ff  
)ff  !
;ff! "
}gg 	
}hh 
}ll ÙK
ÅD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\ExpressionHelper.cs
	namespace		 	
Infoline		
 
.		 
	Framework		 
.		 
Helper		 #
{

 
public 

class 
ExpressionHelper !
{ 
public 
static 

MemberInfo  
GetProperty! ,
<, -
T- .
,. /
R0 1
>1 2
(2 3

Expression3 =
<= >
Func> B
<B C
TC D
,D E
RF G
>G H
>H I
expJ M
)M N
{ 	
MemberExpression 
body !
=" #
exp$ '
.' (
Body( ,
as- /
MemberExpression0 @
;@ A
if 
( 
body 
== 
null 
) 
{ 
UnaryExpression 
ubody  %
=& '
(( )
UnaryExpression) 8
)8 9
exp9 <
.< =
Body= A
;A B
body 
= 
ubody 
. 
Operand $
as% '
MemberExpression( 8
;8 9
} 
return 
body 
. 
Member 
; 
} 	
public 
static 
IEnumerable !
<! "

MemberInfo" ,
>, -
GetProperties. ;
<; <
T< =
,= >
R? @
>@ A
(A B

ExpressionB L
<L M
FuncM Q
<Q R
TR S
,S T
RU V
>V W
>W X
expY \
)\ ]
{ 	
if 
( 
exp 
== 
null 
) 
return 

Enumerable !
.! "
Empty" '
<' (

MemberInfo( 2
>2 3
(3 4
)4 5
;5 6
if 
( 
typeof 
( 
MemberExpression '
)' (
.( )
IsAssignableFrom) 9
(9 :
exp: =
.= >
GetType> E
(E F
)F G
)G H
)H I
return 
new 

MemberInfo %
[% &
]& '
{( )
GetProperty* 5
(5 6
exp6 9
)9 :
}; <
;< =
else   
if   
(   
typeof   
(   
MemberExpression   ,
)  , -
.  - .
IsAssignableFrom  . >
(  > ?
exp  ? B
.  B C
Body  C G
.  G H
GetType  H O
(  O P
)  P Q
)  Q R
)  R S
return!! 
new!! 

MemberInfo!! %
[!!% &
]!!& '
{!!( )
GetProperty!!* 5
(!!5 6
exp!!6 9
)!!9 :
}!!; <
;!!< =
else## 
if## 
(## 
typeof## 
(## 
NewExpression## )
)##) *
.##* +
IsAssignableFrom##+ ;
(##; <
exp##< ?
.##? @
Body##@ D
.##D E
GetType##E L
(##L M
)##M N
)##N O
)##O P
{$$ 
var%% 
newexp%% 
=%% 
(%% 
exp%% !
.%%! "
Body%%" &
as%%' )
NewExpression%%* 7
)%%7 8
;%%8 9
var&& 
cols&& 
=&& 
new&& 
string&& %
[&&% &
newexp&&& ,
.&&, -
	Arguments&&- 6
.&&6 7
Count&&7 <
]&&< =
;&&= >
return'' 
newexp'' 
.'' 
	Arguments'' '
.''' (
Select''( .
(''. /
a''/ 0
=>''1 3
(''4 5
a''5 6
as''7 9
MemberExpression'': J
)''J K
.''K L
Member''L R
)''R S
;''S T
}(( 
else)) 
if)) 
()) 
typeof)) 
()) 
UnaryExpression)) +
)))+ ,
.)), -
IsAssignableFrom))- =
())= >
exp))> A
.))A B
Body))B F
.))F G
GetType))G N
())N O
)))O P
)))P Q
)))Q R
return** 
new** 

MemberInfo** %
[**% &
]**& '
{**( )
GetProperty*** 5
(**5 6
exp**6 9
)**9 :
}**; <
;**< =
else,, 
{-- 
throw.. 
new.. 
	Exception.. #
(..# $
$str..$ ?
)..? @
;..@ A
}00 
}11 	
public33 
static33 
string33 
GetPropertyName33 ,
<33, -
T33- .
,33. /
R330 1
>331 2
(332 3

Expression333 =
<33= >
Func33> B
<33B C
T33C D
,33D E
R33F G
>33G H
>33H I
exp33J M
)33M N
{44 	
MemberExpression55 
body55 !
=55" #
exp55$ '
.55' (
Body55( ,
as55- /
MemberExpression550 @
;55@ A
if66 
(66 
body66 
==66 
null66 
)66 
{77 
UnaryExpression88 
ubody88  %
=88& '
(88( )
UnaryExpression88) 8
)888 9
exp889 <
.88< =
Body88= A
;88A B
body99 
=99 
ubody99 
.99 
Operand99 $
as99% '
MemberExpression99( 8
;998 9
}:: 
return;; 
body;; 
.;; 
Member;; 
.;; 
Name;; #
;;;# $
}<< 	
public>> 
static>> 
IEnumerable>> !
<>>! "
string>>" (
>>>( )
GetPropertyNames>>* :
<>>: ;
T>>; <
,>>< =
R>>> ?
>>>? @
(>>@ A

Expression>>A K
<>>K L
Func>>L P
<>>P Q
T>>Q R
,>>R S
R>>T U
>>>U V
>>>V W
exp>>X [
)>>[ \
{?? 	
if@@ 
(@@ 
exp@@ 
==@@ 
null@@ 
)@@ 
returnAA 

EnumerableAA !
.AA! "
EmptyAA" '
<AA' (
stringAA( .
>AA. /
(AA/ 0
)AA0 1
;AA1 2
ifCC 
(CC 
typeofCC 
(CC 
MemberExpressionCC '
)CC' (
.CC( )
IsAssignableFromCC) 9
(CC9 :
expCC: =
.CC= >
GetTypeCC> E
(CCE F
)CCF G
)CCG H
)CCH I
returnDD 
newDD 
[DD 
]DD 
{DD 
GetPropertyNameDD .
(DD. /
expDD/ 2
)DD2 3
}DD4 5
;DD5 6
elseFF 
ifFF 
(FF 
typeofFF 
(FF 
MemberExpressionFF ,
)FF, -
.FF- .
IsAssignableFromFF. >
(FF> ?
expFF? B
.FFB C
BodyFFC G
.FFG H
GetTypeFFH O
(FFO P
)FFP Q
)FFQ R
)FFR S
returnGG 
newGG 
[GG 
]GG 
{GG 
GetPropertyNameGG .
(GG. /
expGG/ 2
)GG2 3
}GG4 5
;GG5 6
elseII 
ifII 
(II 
typeofII 
(II 
NewExpressionII )
)II) *
.II* +
IsAssignableFromII+ ;
(II; <
expII< ?
.II? @
BodyII@ D
.IID E
GetTypeIIE L
(IIL M
)IIM N
)IIN O
)IIO P
{JJ 
varKK 
newexpKK 
=KK 
(KK 
expKK !
.KK! "
BodyKK" &
asKK' )
NewExpressionKK* 7
)KK7 8
;KK8 9
varLL 
colsLL 
=LL 
newLL 
stringLL %
[LL% &
newexpLL& ,
.LL, -
	ArgumentsLL- 6
.LL6 7
CountLL7 <
]LL< =
;LL= >
returnMM 
newexpMM 
.MM 
	ArgumentsMM '
.MM' (
SelectMM( .
(MM. /
aMM/ 0
=>MM1 3
(MM4 5
aMM5 6
asMM7 9
MemberExpressionMM: J
)MMJ K
.MMK L
MemberMML R
.MMR S
NameMMS W
)MMW X
;MMX Y
}NN 
elseOO 
ifOO 
(OO 
typeofOO 
(OO 
UnaryExpressionOO +
)OO+ ,
.OO, -
IsAssignableFromOO- =
(OO= >
expOO> A
.OOA B
BodyOOB F
.OOF G
GetTypeOOG N
(OON O
)OOO P
)OOP Q
)OOQ R
returnPP 
newPP 
[PP 
]PP 
{PP 
GetPropertyNamePP .
(PP. /
expPP/ 2
)PP2 3
}PP4 5
;PP5 6
elseRR 
{SS 
throwTT 
newTT 
	ExceptionTT #
(TT# $
$strTT$ ?
)TT? @
;TT@ A
}VV 
}WW 	
}XX 
}YY ñ¯
wD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\E_MAIL.cs
	namespace 	
Infoline
 
. 
Helper 
{ 
public 

class 
E_MAIL 
: 
IDisposable %
{ 
public 
string 

hatamesaji  
=! "
$str# %
;% &
MailMessage 
mail 
= 
new 
System %
.% &
Net& )
.) *
Mail* .
.. /
MailMessage/ :
(: ;
); <
;< =

SmtpClient 
cl 
= 
new 
System "
." #
Net# &
.& '
Mail' +
.+ ,

SmtpClient, 6
(6 7
)7 8
;8 9
private 
string 
	_userName  
;  !
public 
E_MAIL 
( 
) 
{ 	
string 
host 
= 
$str 
, 
password &
=' (
$str) +
;+ ,
bool 
ssl 
= 
true 
; 
int 
port 
= 
$num 
; 
if 
( 
System 
. 
Configuration $
.$ % 
ConfigurationManager% 9
.9 :
AppSettings: E
[E F
$strF P
]P Q
!=R T
nullU Y
)Y Z
{ 
host 
= 
System 
. 
Configuration +
.+ , 
ConfigurationManager, @
.@ A
AppSettingsA L
[L M
$strM W
]W X
.X Y
ToStringY a
(a b
)b c
;c d
} 
if!! 
(!! 
System!! 
.!! 
Configuration!! $
.!!$ % 
ConfigurationManager!!% 9
.!!9 :
AppSettings!!: E
[!!E F
$str!!F P
]!!P Q
!=!!R T
null!!U Y
)!!Y Z
{"" 
port## 
=## 
Convert## 
.## 
ToInt32## &
(##& '
System##' -
.##- .
Configuration##. ;
.##; < 
ConfigurationManager##< P
.##P Q
AppSettings##Q \
[##\ ]
$str##] g
]##g h
)##h i
;##i j
}$$ 
if&& 
(&& 
System&& 
.&& 
Configuration&& $
.&&$ % 
ConfigurationManager&&% 9
.&&9 :
AppSettings&&: E
[&&E F
$str&&F P
]&&P Q
!=&&R T
null&&U Y
)&&Y Z
{'' 
	_userName(( 
=(( 
System(( "
.((" #
Configuration((# 0
.((0 1 
ConfigurationManager((1 E
.((E F
AppSettings((F Q
[((Q R
$str((R \
]((\ ]
.((] ^
ToString((^ f
(((f g
)((g h
;((h i
})) 
if++ 
(++ 
System++ 
.++ 
Configuration++ $
.++$ % 
ConfigurationManager++% 9
.++9 :
AppSettings++: E
[++E F
$str++F P
]++P Q
!=++R T
null++U Y
)++Y Z
{,, 
password-- 
=-- 
System-- !
.--! "
Configuration--" /
.--/ 0 
ConfigurationManager--0 D
.--D E
AppSettings--E P
[--P Q
$str--Q [
]--[ \
.--\ ]
ToString--] e
(--e f
)--f g
;--g h
}.. 
cl55 
.55 
Host55 
=55 
host55 
;55 
cl66 
.66 
Port66 
=66 
port66 
;66 
cl77 
.77 
	EnableSsl77 
=77 
ssl77 
;77 
cl88 
.88 
DeliveryMethod88 
=88 
SmtpDeliveryMethod88  2
.882 3
Network883 :
;88: ;
cl99 
.99 
Credentials99 
=99 
new99  
System99! '
.99' (
Net99( +
.99+ ,
NetworkCredential99, =
(99= >
	_userName99> G
,99G H
password99I Q
)99Q R
;99R S
mail:: 
.:: 

IsBodyHtml:: 
=:: 
true:: "
;::" #
mail;; 
.;; 
Priority;; 
=;; 
System;; "
.;;" #
Net;;# &
.;;& '
Mail;;' +
.;;+ ,
MailPriority;;, 8
.;;8 9
High;;9 =
;;;= >
}?? 	
publicAA 
E_MAILAA 
(AA 
stringAA 
HostAA !
,AA! "
intAA# &
PortAA' +
,AA+ ,
stringAA- 3
userNameAA4 <
,AA< =
stringAA> D
passwordAAE M
,AAM N
boolAAO S
sslAAT W
,AAW X
boolAAY ]

isBodyHtmlAA^ h
=AAi j
trueAAk o
,AAo p
stringAAq w
domainAAx ~
=	AA Ä
null
AAÅ Ö
)
AAÖ Ü
{BB 	
	_userNameCC 
=CC 
userNameCC  
;CC  !
clDD 
.DD 
HostDD 
=DD 
HostDD 
;DD 
clEE 
.EE 
PortEE 
=EE 
PortEE 
;EE 
clFF 
.FF 
	EnableSslFF 
=FF 
sslFF 
;FF 
clGG 
.GG 
DeliveryMethodGG 
=GG 
SmtpDeliveryMethodGG  2
.GG2 3
NetworkGG3 :
;GG: ;
clHH 
.HH 
CredentialsHH 
=HH 
newHH  
SystemHH! '
.HH' (
NetHH( +
.HH+ ,
NetworkCredentialHH, =
(HH= >
userNameHH> F
,HHF G
passwordHHH P
,HHP Q
domainHHR X
)HHX Y
;HHY Z
mailII 
.II 

IsBodyHtmlII 
=II 

isBodyHtmlII (
;II( )
mailJJ 
.JJ 
PriorityJJ 
=JJ 
SystemJJ "
.JJ" #
NetJJ# &
.JJ& '
MailJJ' +
.JJ+ ,
MailPriorityJJ, 8
.JJ8 9
HighJJ9 =
;JJ= >
}KK 	
publicMM 
TaskMM 
<MM 
boolMM 
>MM 
TaskSendMM "
(MM" #
stringMM# )
emailMM* /
,MM/ 0
stringMM1 7
baslikMM8 >
,MM> ?
stringMM@ F
mesajMMG L
,MML M
stringMMN T
fileMMU Y
=MMZ [
$strMM\ ^
,MM^ _
boolMM` d

isBodyHtmlMMe o
=MMp q
trueMMr v
)MMv w
{NN 	
returnOO 
TaskOO 
.OO 
RunOO 
(OO 
(OO 
)OO 
=>OO !
{PP 
mailQQ 
.QQ 
BodyQQ 
=QQ 
mesajQQ !
;QQ! "
mailRR 
.RR 
ToRR 
.RR 
AddRR 
(RR 
emailRR !
)RR! "
;RR" #
mailSS 
.SS 

IsBodyHtmlSS 
=SS  !

isBodyHtmlSS" ,
;SS, -
mailTT 
.TT 
FromTT 
=TT 
newTT 
SystemTT  &
.TT& '
NetTT' *
.TT* +
MailTT+ /
.TT/ 0
MailAddressTT0 ;
(TT; <
	_userNameTT< E
,TTE F
	_userNameTTG P
)TTP Q
;TTQ R
mailUU 
.UU 
SubjectUU 
=UU 
baslikUU %
;UU% &
ifWW 
(WW 
!WW 
stringWW 
.WW 
IsNullOrEmptyWW )
(WW) *
fileWW* .
)WW. /
&&WW0 2
SystemWW3 9
.WW9 :
IOWW: <
.WW< =
FileWW= A
.WWA B
ExistsWWB H
(WWH I
fileWWI M
)WWM N
)WWN O
{XX 
SystemYY 
.YY 
NetYY 
.YY 
MailYY #
.YY# $

AttachmentYY$ .
itemYY/ 3
=YY4 5
newYY6 9
SystemYY: @
.YY@ A
NetYYA D
.YYD E
MailYYE I
.YYI J

AttachmentYYJ T
(YYT U
fileYYU Y
)YYY Z
;YYZ [
mailZZ 
.ZZ 
AttachmentsZZ $
.ZZ$ %
AddZZ% (
(ZZ( )
itemZZ) -
)ZZ- .
;ZZ. /
}[[ 
try\\ 
{]] 
cl^^ 
.^^ 
Send^^ 
(^^ 
mail^^  
)^^  !
;^^! "
return__ 
true__ 
;__  
}`` 
catchaa 
(aa 
	Exceptionaa  
exaa! #
)aa# $
{bb 

hatamesajicc 
=cc  
excc! #
.cc# $
Messagecc$ +
;cc+ ,
}dd 
returnee 
falseee 
;ee 
}gg 
)gg 
;gg 
}hh 	
publicjj 
voidjj 
SendByThreadjj  
(jj  !
stringjj! '
emailjj( -
,jj- .
stringjj/ 5
baslikjj6 <
,jj< =
stringjj> D
mesajjjE J
,jjJ K
stringjjL R
filejjS W
=jjX Y
$strjjZ \
,jj\ ]
booljj^ b

isBodyHtmljjc m
=jjn o
truejjp t
)jjt u
{kk 	
newll 
Threadll 
(ll 
newll 
ThreadStartll &
(ll& '
delegatell' /
{mm 
mailnn 
.nn 
Bodynn 
=nn 
mesajnn !
;nn! "
ifpp 
(pp 
emailpp 
.pp 
Splitpp 
(pp  
$charpp  #
)pp# $
.pp$ %
Countpp% *
(pp* +
)pp+ ,
>pp- .
$numpp/ 0
)pp0 1
{qq 
foreachrr 
(rr 
varrr  
mailAdrrr! (
inrr) +
emailrr, 1
.rr1 2
Splitrr2 7
(rr7 8
$charrr8 ;
)rr; <
)rr< =
{ss 
mailtt 
.tt 
Tott 
.tt  
Addtt  #
(tt# $
mailAdrtt$ +
)tt+ ,
;tt, -
}uu 
}vv 
elseww 
{xx 
mailyy 
.yy 
Toyy 
.yy 
Addyy 
(yy  
emailyy  %
)yy% &
;yy& '
}zz 
mail|| 
.|| 

IsBodyHtml|| 
=||  !

isBodyHtml||" ,
;||, -
mail}} 
.}} 
From}} 
=}} 
new}} 
System}}  &
.}}& '
Net}}' *
.}}* +
Mail}}+ /
.}}/ 0
MailAddress}}0 ;
(}}; <
	_userName}}< E
,}}E F
	_userName}}G P
)}}P Q
;}}Q R
mail~~ 
.~~ 
Subject~~ 
=~~ 
baslik~~ %
;~~% &
if
ÄÄ 
(
ÄÄ 
!
ÄÄ 
string
ÄÄ 
.
ÄÄ 
IsNullOrEmpty
ÄÄ )
(
ÄÄ) *
file
ÄÄ* .
)
ÄÄ. /
&&
ÄÄ0 2
System
ÄÄ3 9
.
ÄÄ9 :
IO
ÄÄ: <
.
ÄÄ< =
File
ÄÄ= A
.
ÄÄA B
Exists
ÄÄB H
(
ÄÄH I
file
ÄÄI M
)
ÄÄM N
)
ÄÄN O
{
ÅÅ 
System
ÇÇ 
.
ÇÇ 
Net
ÇÇ 
.
ÇÇ 
Mail
ÇÇ #
.
ÇÇ# $

Attachment
ÇÇ$ .
item
ÇÇ/ 3
=
ÇÇ4 5
new
ÇÇ6 9
System
ÇÇ: @
.
ÇÇ@ A
Net
ÇÇA D
.
ÇÇD E
Mail
ÇÇE I
.
ÇÇI J

Attachment
ÇÇJ T
(
ÇÇT U
file
ÇÇU Y
)
ÇÇY Z
;
ÇÇZ [
mail
ÉÉ 
.
ÉÉ 
Attachments
ÉÉ $
.
ÉÉ$ %
Add
ÉÉ% (
(
ÉÉ( )
item
ÉÉ) -
)
ÉÉ- .
;
ÉÉ. /
}
ÑÑ 
try
ÖÖ 
{
ÜÜ 
LogWrite
áá 
(
áá 
$str
áá 3
)
áá3 4
;
áá4 5
cl
àà 
.
àà 
Send
àà 
(
àà 
mail
àà  
)
àà  !
;
àà! "
}
ââ 
catch
ää 
(
ää 
	Exception
ää  
ex
ää! #
)
ää# $
{
ãã 
LogWrite
åå 
(
åå 
$str
åå (
+
åå) *
ex
åå+ -
.
åå- .
Message
åå. 5
.
åå5 6
ToString
åå6 >
(
åå> ?
)
åå? @
)
åå@ A
;
ååA B

hatamesaji
çç 
=
çç  
ex
çç! #
.
çç# $
Message
çç$ +
;
çç+ ,
}
éé 
}
èè 
)
êê 
)
êê 
.
êê 
Start
êê 
(
êê 
)
êê 
;
êê 
}
ëë 	
public
íí 
void
íí 
Send
íí 
(
íí 
string
íí 
email
íí  %
,
íí% &
string
íí' -
baslik
íí. 4
,
íí4 5
string
íí6 <
mesaj
íí= B
,
ííB C
string
ííD J
file
ííK O
=
ííP Q
$str
ííR T
,
ííT U
bool
ííV Z

isBodyHtml
íí[ e
=
ííf g
true
ííh l
)
ííl m
{
ìì 	
mail
ïï 
.
ïï 
To
ïï 
.
ïï 
Clear
ïï 
(
ïï 
)
ïï 
;
ïï 
mail
ññ 
.
ññ 
Body
ññ 
=
ññ 
mesaj
ññ 
;
ññ 
if
óó 
(
óó 
email
óó 
.
óó 
Split
óó 
(
óó 
$char
óó 
)
óó  
.
óó  !
Count
óó! &
(
óó& '
)
óó' (
>
óó) *
$num
óó+ ,
)
óó, -
{
òò 
foreach
ôô 
(
ôô 
var
ôô 
mailAdr
ôô $
in
ôô% '
email
ôô( -
.
ôô- .
Split
ôô. 3
(
ôô3 4
$char
ôô4 7
)
ôô7 8
)
ôô8 9
{
öö 
mail
õõ 
.
õõ 
To
õõ 
.
õõ 
Add
õõ 
(
õõ  
mailAdr
õõ  '
)
õõ' (
;
õõ( )
}
úú 
}
ùù 
else
ûû 
{
üü 
mail
†† 
.
†† 
To
†† 
.
†† 
Add
†† 
(
†† 
email
†† !
)
††! "
;
††" #
}
°° 
mail
££ 
.
££ 

IsBodyHtml
££ 
=
££ 

isBodyHtml
££ (
;
££( )
mail
§§ 
.
§§ 
From
§§ 
=
§§ 
new
§§ 
System
§§ "
.
§§" #
Net
§§# &
.
§§& '
Mail
§§' +
.
§§+ ,
MailAddress
§§, 7
(
§§7 8
	_userName
§§8 A
,
§§A B
	_userName
§§C L
)
§§L M
;
§§M N
mail
•• 
.
•• 
Subject
•• 
=
•• 
baslik
•• !
;
••! "
if
ßß 
(
ßß 
!
ßß 
string
ßß 
.
ßß 
IsNullOrEmpty
ßß %
(
ßß% &
file
ßß& *
)
ßß* +
&&
ßß, .
System
ßß/ 5
.
ßß5 6
IO
ßß6 8
.
ßß8 9
File
ßß9 =
.
ßß= >
Exists
ßß> D
(
ßßD E
file
ßßE I
)
ßßI J
)
ßßJ K
{
®® 
System
©© 
.
©© 
Net
©© 
.
©© 
Mail
©© 
.
©©  

Attachment
©©  *
item
©©+ /
=
©©0 1
new
©©2 5
System
©©6 <
.
©©< =
Net
©©= @
.
©©@ A
Mail
©©A E
.
©©E F

Attachment
©©F P
(
©©P Q
file
©©Q U
)
©©U V
;
©©V W
mail
™™ 
.
™™ 
Attachments
™™  
.
™™  !
Add
™™! $
(
™™$ %
item
™™% )
)
™™) *
;
™™* +
}
´´ 
try
¨¨ 
{
≠≠ 
LogWrite
ÆÆ 
(
ÆÆ 
$str
ÆÆ /
)
ÆÆ/ 0
;
ÆÆ0 1
cl
ØØ 
.
ØØ 
	EnableSsl
ØØ 
=
ØØ 
true
ØØ #
;
ØØ# $
cl
∞∞ 
.
∞∞ 
Send
∞∞ 
(
∞∞ 
mail
∞∞ 
)
∞∞ 
;
∞∞ 
}
±± 
catch
≤≤ 
(
≤≤ 
	Exception
≤≤ 
ex
≤≤ 
)
≤≤  
{
≥≥ 
LogWrite
¥¥ 
(
¥¥ 
$str
¥¥ $
+
¥¥% &
ex
¥¥' )
.
¥¥) *
Message
¥¥* 1
.
¥¥1 2
ToString
¥¥2 :
(
¥¥: ;
)
¥¥; <
)
¥¥< =
;
¥¥= >

hatamesaji
µµ 
=
µµ 
ex
µµ 
.
µµ  
Message
µµ  '
;
µµ' (
}
∂∂ 
}
∑∑ 	
public
∏∏ 
void
∏∏ 
SendCalender
∏∏  
(
∏∏  !
string
∏∏! '
email
∏∏( -
,
∏∏- .
string
∏∏/ 5
baslik
∏∏6 <
,
∏∏< =
string
∏∏> D
mesaj
∏∏E J
,
∏∏J K
DateTime
∏∏L T
	startDate
∏∏U ^
,
∏∏^ _
DateTime
∏∏` h
endDate
∏∏i p
,
∏∏p q
string
∏∏r x
file
∏∏y }
=
∏∏~ 
$str∏∏Ä Ç
,∏∏Ç É
bool∏∏Ñ à

isBodyHtml∏∏â ì
=∏∏î ï
true∏∏ñ ö
)∏∏ö õ
{
ππ 	
mail
∫∫ 
.
∫∫ 
To
∫∫ 
.
∫∫ 
Clear
∫∫ 
(
∫∫ 
)
∫∫ 
;
∫∫ 
mail
ªª 
.
ªª 
Body
ªª 
=
ªª 
mesaj
ªª 
;
ªª 
if
ºº 
(
ºº 
email
ºº 
.
ºº 
Split
ºº 
(
ºº 
$char
ºº 
)
ºº  
.
ºº  !
Count
ºº! &
(
ºº& '
)
ºº' (
>
ºº) *
$num
ºº+ ,
)
ºº, -
{
ΩΩ 
foreach
ææ 
(
ææ 
var
ææ 
mailAdr
ææ $
in
ææ% '
email
ææ( -
.
ææ- .
Split
ææ. 3
(
ææ3 4
$char
ææ4 7
)
ææ7 8
)
ææ8 9
{
øø 
mail
¿¿ 
.
¿¿ 
To
¿¿ 
.
¿¿ 
Add
¿¿ 
(
¿¿  
mailAdr
¿¿  '
)
¿¿' (
;
¿¿( )
}
¡¡ 
}
¬¬ 
else
√√ 
{
ƒƒ 
mail
≈≈ 
.
≈≈ 
To
≈≈ 
.
≈≈ 
Add
≈≈ 
(
≈≈ 
email
≈≈ !
)
≈≈! "
;
≈≈" #
}
∆∆ 
mail
»» 
.
»» 

IsBodyHtml
»» 
=
»» 

isBodyHtml
»» (
;
»»( )
mail
…… 
.
…… 
From
…… 
=
…… 
new
…… 
System
…… "
.
……" #
Net
……# &
.
……& '
Mail
……' +
.
……+ ,
MailAddress
……, 7
(
……7 8
	_userName
……8 A
,
……A B
	_userName
……C L
)
……L M
;
……M N
mail
   
.
   
Subject
   
=
   
baslik
   !
;
  ! "
if
ÃÃ 
(
ÃÃ 
!
ÃÃ 
string
ÃÃ 
.
ÃÃ 
IsNullOrEmpty
ÃÃ %
(
ÃÃ% &
file
ÃÃ& *
)
ÃÃ* +
&&
ÃÃ, .
System
ÃÃ/ 5
.
ÃÃ5 6
IO
ÃÃ6 8
.
ÃÃ8 9
File
ÃÃ9 =
.
ÃÃ= >
Exists
ÃÃ> D
(
ÃÃD E
file
ÃÃE I
)
ÃÃI J
)
ÃÃJ K
{
ÕÕ 
System
ŒŒ 
.
ŒŒ 
Net
ŒŒ 
.
ŒŒ 
Mail
ŒŒ 
.
ŒŒ  

Attachment
ŒŒ  *
item
ŒŒ+ /
=
ŒŒ0 1
new
ŒŒ2 5
System
ŒŒ6 <
.
ŒŒ< =
Net
ŒŒ= @
.
ŒŒ@ A
Mail
ŒŒA E
.
ŒŒE F

Attachment
ŒŒF P
(
ŒŒP Q
file
ŒŒQ U
)
ŒŒU V
;
ŒŒV W
mail
œœ 
.
œœ 
Attachments
œœ  
.
œœ  !
Add
œœ! $
(
œœ$ %
item
œœ% )
)
œœ) *
;
œœ* +
}
–– 
StringBuilder
““ 
str
““ 
=
““ 
new
““  #
StringBuilder
““$ 1
(
““1 2
)
““2 3
;
““3 4
str
”” 
.
”” 

AppendLine
”” 
(
”” 
$str
”” ,
)
””, -
;
””- .
str
÷÷ 
.
÷÷ 

AppendLine
÷÷ 
(
÷÷ 
$str
÷÷ G
)
÷÷G H
;
÷÷H I
str
◊◊ 
.
◊◊ 

AppendLine
◊◊ 
(
◊◊ 
$str
◊◊ (
)
◊◊( )
;
◊◊) *
str
ÿÿ 
.
ÿÿ 

AppendLine
ÿÿ 
(
ÿÿ 
$str
ÿÿ +
)
ÿÿ+ ,
;
ÿÿ, -
str
⁄⁄ 
.
⁄⁄ 

AppendLine
⁄⁄ 
(
⁄⁄ 
$str
⁄⁄ )
)
⁄⁄) *
;
⁄⁄* +
str
‹‹ 
.
‹‹ 

AppendLine
‹‹ 
(
‹‹ 
string
‹‹ !
.
‹‹! "
Format
‹‹" (
(
‹‹( )
$str
‹‹) G
,
‹‹G H
TimeZoneInfo
‹‹I U
.
‹‹U V
ConvertTimeToUtc
‹‹V f
(
‹‹f g
	startDate
‹‹g p
)
‹‹p q
.
‹‹q r
ToString
‹‹r z
(
‹‹z {
$str‹‹{ ç
)‹‹ç é
)‹‹é è
)‹‹è ê
;‹‹ê ë
str
›› 
.
›› 

AppendLine
›› 
(
›› 
string
›› !
.
››! "
Format
››" (
(
››( )
$str
››) G
,
››G H
TimeZoneInfo
››I U
.
››U V
ConvertTimeToUtc
››V f
(
››f g
DateTime
››g o
.
››o p
UtcNow
››p v
)
››v w
.
››w x
ToString››x Ä
(››Ä Å
$str››Å ì
)››ì î
)››î ï
)››ï ñ
;››ñ ó
str
ﬁﬁ 
.
ﬁﬁ 

AppendLine
ﬁﬁ 
(
ﬁﬁ 
string
ﬁﬁ !
.
ﬁﬁ! "
Format
ﬁﬁ" (
(
ﬁﬁ( )
$str
ﬁﬁ) E
,
ﬁﬁE F
TimeZoneInfo
ﬁﬁG S
.
ﬁﬁS T
ConvertTimeToUtc
ﬁﬁT d
(
ﬁﬁd e
endDate
ﬁﬁe l
)
ﬁﬁl m
.
ﬁﬁm n
ToString
ﬁﬁn v
(
ﬁﬁv w
$strﬁﬁw â
)ﬁﬁâ ä
)ﬁﬁä ã
)ﬁﬁã å
;ﬁﬁå ç
str
„„ 
.
„„ 

AppendLine
„„ 
(
„„ 
string
„„ !
.
„„! "
Format
„„" (
(
„„( )
$str
„„) 2
,
„„2 3
Guid
„„4 8
.
„„8 9
NewGuid
„„9 @
(
„„@ A
)
„„A B
)
„„B C
)
„„C D
;
„„D E
str
‰‰ 
.
‰‰ 

AppendLine
‰‰ 
(
‰‰ 
string
‰‰ !
.
‰‰! "
Format
‰‰" (
(
‰‰( )
$str
‰‰) :
,
‰‰: ;
mail
‰‰< @
.
‰‰@ A
Body
‰‰A E
)
‰‰E F
)
‰‰F G
;
‰‰G H
str
ÂÂ 
.
ÂÂ 

AppendLine
ÂÂ 
(
ÂÂ 
string
ÂÂ !
.
ÂÂ! "
Format
ÂÂ" (
(
ÂÂ( )
$str
ÂÂ) K
,
ÂÂK L
mail
ÂÂM Q
.
ÂÂQ R
Body
ÂÂR V
)
ÂÂV W
)
ÂÂW X
;
ÂÂX Y
str
ÊÊ 
.
ÊÊ 

AppendLine
ÊÊ 
(
ÊÊ 
string
ÊÊ !
.
ÊÊ! "
Format
ÊÊ" (
(
ÊÊ( )
$str
ÊÊ) 6
,
ÊÊ6 7
mail
ÊÊ8 <
.
ÊÊ< =
Subject
ÊÊ= D
)
ÊÊD E
)
ÊÊE F
;
ÊÊF G
str
ËË 
.
ËË 

AppendLine
ËË 
(
ËË 
$str
ËË -
)
ËË- .
;
ËË. /
str
ÈÈ 
.
ÈÈ 

AppendLine
ÈÈ 
(
ÈÈ 
$str
ÈÈ )
)
ÈÈ) *
;
ÈÈ* +
str
ÍÍ 
.
ÍÍ 

AppendLine
ÍÍ 
(
ÍÍ 
$str
ÍÍ +
)
ÍÍ+ ,
;
ÍÍ, -
str
ÎÎ 
.
ÎÎ 

AppendLine
ÎÎ 
(
ÎÎ 
$str
ÎÎ *
)
ÎÎ* +
;
ÎÎ+ ,
str
ÏÏ 
.
ÏÏ 

AppendLine
ÏÏ 
(
ÏÏ 
$str
ÏÏ 1
)
ÏÏ1 2
;
ÏÏ2 3
str
ÌÌ 
.
ÌÌ 

AppendLine
ÌÌ 
(
ÌÌ 
$str
ÌÌ <
)
ÌÌ< =
;
ÌÌ= >
str
ÓÓ 
.
ÓÓ 

AppendLine
ÓÓ 
(
ÓÓ 
$str
ÓÓ '
)
ÓÓ' (
;
ÓÓ( )
str
ÔÔ 
.
ÔÔ 

AppendLine
ÔÔ 
(
ÔÔ 
$str
ÔÔ '
)
ÔÔ' (
;
ÔÔ( )
str
ÒÒ 
.
ÒÒ 

AppendLine
ÒÒ 
(
ÒÒ 
string
ÒÒ !
.
ÒÒ! "
Format
ÒÒ" (
(
ÒÒ( )
$str
ÒÒ) ?
,
ÒÒ? @
mail
ÒÒA E
.
ÒÒE F
From
ÒÒF J
.
ÒÒJ K
Address
ÒÒK R
)
ÒÒR S
)
ÒÒS T
;
ÒÒT U
str
ÚÚ 
.
ÚÚ 

AppendLine
ÚÚ 
(
ÚÚ 
string
ÚÚ !
.
ÚÚ! "
Format
ÚÚ" (
(
ÚÚ( )
$str
ÚÚ) S
,
ÚÚS T
mail
ÚÚU Y
.
ÚÚY Z
To
ÚÚZ \
[
ÚÚ\ ]
$num
ÚÚ] ^
]
ÚÚ^ _
.
ÚÚ_ `
DisplayName
ÚÚ` k
,
ÚÚk l
mail
ÚÚm q
.
ÚÚq r
To
ÚÚr t
[
ÚÚt u
$num
ÚÚu v
]
ÚÚv w
.
ÚÚw x
Address
ÚÚx 
)ÚÚ Ä
)ÚÚÄ Å
;ÚÚÅ Ç
str
ÙÙ 
.
ÙÙ 

AppendLine
ÙÙ 
(
ÙÙ 
$str
ÙÙ *
)
ÙÙ* +
;
ÙÙ+ ,
System
ıı 
.
ıı 
Net
ıı 
.
ıı 
Mime
ıı 
.
ıı 
ContentType
ıı '
ct
ıı( *
=
ıı+ ,
new
ıı- 0
System
ıı1 7
.
ıı7 8
Net
ıı8 ;
.
ıı; <
Mime
ıı< @
.
ıı@ A
ContentType
ııA L
(
ııL M
$str
ııM \
)
ıı\ ]
;
ıı] ^
if
ˆˆ 
(
ˆˆ 
ct
ˆˆ 
.
ˆˆ 

Parameters
ˆˆ 
!=
ˆˆ  
null
ˆˆ! %
)
ˆˆ% &
{
˜˜ 
ct
¯¯ 
.
¯¯ 

Parameters
¯¯ 
.
¯¯ 
Add
¯¯ !
(
¯¯! "
$str
¯¯" *
,
¯¯* +
$str
¯¯, 5
)
¯¯5 6
;
¯¯6 7
ct
˘˘ 
.
˘˘ 

Parameters
˘˘ 
.
˘˘ 
Add
˘˘ !
(
˘˘! "
$str
˘˘" (
,
˘˘( )
$str
˘˘* 7
)
˘˘7 8
;
˘˘8 9
}
˙˙ 
var
˚˚ 
avCal
˚˚ 
=
˚˚ 
AlternateView
˚˚ %
.
˚˚% &+
CreateAlternateViewFromString
˚˚& C
(
˚˚C D
str
˚˚D G
.
˚˚G H
ToString
˚˚H P
(
˚˚P Q
)
˚˚Q R
,
˚˚R S
ct
˚˚T V
)
˚˚V W
;
˚˚W X
mail
¸¸ 
.
¸¸ 
AlternateViews
¸¸ 
.
¸¸  
Add
¸¸  #
(
¸¸# $
avCal
¸¸$ )
)
¸¸) *
;
¸¸* +
try
˛˛ 
{
ˇˇ 
cl
ÄÄ 
.
ÄÄ 
Send
ÄÄ 
(
ÄÄ 
mail
ÄÄ 
)
ÄÄ 
;
ÄÄ 
}
ÅÅ 
catch
ÇÇ 
(
ÇÇ 
	Exception
ÇÇ 
ex
ÇÇ 
)
ÇÇ  
{
ÉÉ 

hatamesaji
ÑÑ 
=
ÑÑ 
ex
ÑÑ 
.
ÑÑ  
Message
ÑÑ  '
;
ÑÑ' (
}
ÖÖ 
}
ÜÜ 	
public
áá 
void
áá 
Dispose
áá 
(
áá 
)
áá 
{
àà 	
mail
ââ 
.
ââ 
Dispose
ââ 
(
ââ 
)
ââ 
;
ââ 
}
ää 	
public
åå 
void
åå 
LogWrite
åå 
(
åå 
string
åå #
str
åå$ '
)
åå' (
{
çç 	
if
êê 
(
êê 
string
êê 
.
êê 
IsNullOrEmpty
êê $
(
êê$ %
str
êê% (
)
êê( )
)
êê) *
{
êê+ ,
return
êê- 3
;
êê3 4
}
êê5 6
var
íí 
path
íí 
=
íí 
$str
íí 
;
íí 
if
ìì 
(
ìì 
HttpContext
ìì 
.
ìì 
Current
ìì #
!=
ìì$ &
null
ìì' +
)
ìì+ ,
path
îî 
=
îî 
HttpContext
îî "
.
îî" #
Current
îî# *
.
îî* +
Server
îî+ 1
.
îî1 2
MapPath
îî2 9
(
îî9 :
$str
îî: A
)
îîA B
;
îîB C
else
ïï 
path
ññ 
=
ññ 
	AppDomain
ññ  
.
ññ  !
CurrentDomain
ññ! .
.
ññ. /
BaseDirectory
ññ/ <
+
ññ= >
$str
ññ? D
;
ññD E
if
òò 
(
òò 
!
òò 
	Directory
òò 
.
òò 
Exists
òò !
(
òò! "
path
òò" &
)
òò& '
)
òò' (
{
ôô 
	Directory
öö 
.
öö 
CreateDirectory
öö )
(
öö) *
path
öö* .
)
öö. /
;
öö/ 0
}
õõ 
if
ûû 
(
ûû 
string
ûû 
.
ûû 
IsNullOrEmpty
ûû $
(
ûû$ %
str
ûû% (
)
ûû( )
)
ûû) *
return
ûû+ 1
;
ûû1 2
var
üü 
FILE
üü 
=
üü 
path
üü 
+
üü 
string
üü $
.
üü$ %
Format
üü% +
(
üü+ ,
$str
üü, ;
,
üü; <
DateTime
üü= E
.
üüE F
Now
üüF I
.
üüI J
ToString
üüJ R
(
üüR S
$str
üüS f
)
üüf g
)
üüg h
;
üüh i
using
¢¢ 
(
¢¢ 
StreamWriter
¢¢ 
sw
¢¢  "
=
¢¢# $
File
¢¢% )
.
¢¢) *

AppendText
¢¢* 4
(
¢¢4 5
FILE
¢¢5 9
)
¢¢9 :
)
¢¢: ;
{
££ 
sw
§§ 
.
§§ 
	WriteLine
§§ 
(
§§ 
DateTime
§§ %
.
§§% &
Now
§§& )
+
§§* +
$str
§§, /
+
§§0 1
str
§§2 5
)
§§5 6
;
§§6 7
}
•• 
}
ßß 	
}
©© 
}™™ ¡ä
{D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\FileHelper.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Helper #
{ 
public 

class 

FileHelper 
{ 
public 
static 
void 
ForceCreateFile *
(* +
string+ 1
path2 6
)6 7
{ 	
var 
file 
= 
Path 
. 
GetFileName '
(' (
path( ,
), -
;- .
if 
( 
file 
== 
null 
) 
throw 
new 
	Exception #
(# $
$str$ =
)= >
;> ?
var 
folder 
= 
Path 
. 
GetDirectoryName .
(. /
path/ 3
)3 4
;4 5
if 
( 
! 
	Directory 
. 
Exists !
(! "
folder" (
)( )
)) *
	Directory 
. 
CreateDirectory )
() *
folder* 0
)0 1
;1 2
using 
( 
File 
. 
Create 
( 
path #
)# $
)$ %
{& '
}( )
} 	
public 
static 
string 
[ 
] 
DirectoryGetFiles 0
(0 1
string1 7
path8 <
,< =
string> D
searchPatternE R
)R S
{ 	
if 
( 
! 
	Directory 
. 
Exists !
(! "
path" &
)& '
)' (
return   
new   
string   !
[  ! "
$num  " #
]  # $
;  $ %
return!! 
	Directory!! 
.!! 
GetFiles!! %
(!!% &
path!!& *
,!!* +
searchPattern!!, 9
)!!9 :
;!!: ;
}"" 	
private%% 
static%% 

Dictionary%% !
<%%! "
string%%" (
,%%( )
string%%* 0
>%%0 1&
ExtensionToContentTypeList%%2 L
=%%M N
new%%O R

Dictionary%%S ]
<%%] ^
string%%^ d
,%%d e
string%%f l
>%%l m
{%%m n
{'' 
$str'' 
,'' 
$str'' $
}''$ %
,''% &
{(( 
$str(( 
,(( 
$str(( &
}((& '
,((' (
{)) 
$str)) 
,)) 
$str)) %
}))% &
,))& '
{** 
$str** 
,** 
$str** '
}**' (
,**( )
{++ 
$str++ 
,++ 
$str++ &
}++& '
,++' (
{,, 
$str,, 
,,, 
$str,, 5
},,5 6
,,,6 7
{-- 
$str-- 
,-- 
$str-- '
}--' (
,--( )
{.. 
$str.. 
,.. 
$str.. $
}..$ %
,..% &
{// 
$str// 
,// 
$str// 3
}//3 4
,//4 5
{00 
$str00 
,00 
$str00 0
}000 1
,001 2
{11 
$str11 
,11 
$str11 $
}11$ %
,11% &
{22 
$str22 
,22 
$str22 3
}223 4
,224 5
{33 
$str33 
,33 
$str33 7
}337 8
,338 9
{44 
$str44 
,44 
$str44 1
}441 2
,442 3
{55 
$str55 
,55 
$str55 5
}555 6
,556 7
{66 
$str66 
,66 
$str66 1
}661 2
,662 3
{77 
$str77 
,77 
$str77 9
}779 :
,77: ;
{88 
$str88 
,88 
$str88 1
}881 2
,882 3
{99 
$str99 
,99 
$str99 @
}99@ A
,99A B
{:: 
$str:: 
,:: 
$str:: ;
}::; <
,::< =
{;; 
$str;; 
,;; 
$str;; ?
};;? @
,;;@ A
{<< 
$str<< 
,<< 
$str<< %
}<<% &
,<<& '
{== 
$str== 
,== 
$str== /
}==/ 0
,==0 1
{>> 
$str>> 
,>>  
$str>>! ;
}>>; <
,>>< =
{?? 
$str?? 
,?? 
$str?? /
}??/ 0
,??0 1
{@@ 
$str@@ 
,@@ 
$str@@ .
}@@. /
,@@/ 0
{AA 
$strAA 
,AA 
$strAA %
}AA% &
,AA& '
{BB 
$strBB 
,BB 
$strBB 3
}BB3 4
,BB4 5
{CC 
$strCC 
,CC 
$strCC 0
}CC0 1
,CC1 2
{DD 
$strDD 
,DD 
$strDD %
}DD% &
,DD& '
{EE 
$strEE 
,EE 
$strEE &
}EE& '
,EE' (
{FF 
$strFF 
,FF 
$strFF &
}FF& '
,FF' (
{GG 
$strGG 
,GG 
$strGG V
}GGV W
,GGW X
{HH 
$strHH 
,HH 
$strHH +
}HH+ ,
,HH, -
{II 
$strII 
,II 
$strII .
}II. /
,II/ 0
{JJ 
$strJJ 
,JJ 
$strJJ B
}JJC D
,JJD E
{KK 
$strKK 
,KK  
$strKK! ?
}KK? @
,KK@ A
{LL 
$strLL 
,LL 
$strLL %
}LL% &
,LL& '
{MM 
$strMM 
,MM 
$strMM *
}MM* +
,MM+ ,
{NN 
$strNN 
,NN 
$strNN +
}NN+ ,
,NN, -
{OO 
$strOO 
,OO 
$strOO +
}OO+ ,
,OO, -
{PP 
$strPP 
,PP 
$strPP 3
}PP3 4
,PP4 5
{QQ 
$strQQ 
,QQ 
$strQQ )
}QQ) *
,QQ* +
{RR 
$strRR 
,RR 
$strRR +
}RR+ ,
,RR, -
{SS 
$strSS 
,SS 
$strSS 3
}SS3 4
,SS4 5
{TT 
$strTT 
,TT 
$strTT %
}TT% &
,TT& '
{UU 
$strUU 
,UU 
$strUU +
}UU+ ,
,UU, -
{VV 
$strVV 
,VV 
$strVV +
}VV+ ,
,VV, -
{WW 
$strWW 
,WW 
$strWW )
}WW) *
,WW* +
{XX 
$strXX 
,XX 
$strXX )
}XX) *
,XX* +
{YY 
$strYY 
,YY 
$strYY 0
}YY0 1
,YY1 2
{ZZ 
$strZZ 
,ZZ 
$strZZ %
}ZZ% &
,ZZ& '
{[[ 
$str[[ 
,[[ 
$str[[ *
}[[* +
,[[+ ,
{\\ 
$str\\ 
,\\ 
$str\\ (
}\\( )
,\\) *
{]] 
$str]] 
,]] 
$str]] 0
}]]0 1
,]]1 2
{^^ 
$str^^ 
,^^ 
$str^^ (
}^^( )
,^^) *
{__ 
$str__ 
,__ 
$str__ %
}__% &
,__& '
{`` 
$str`` 
,`` 
$str`` 0
}``0 1
,``1 2
{aa 
$straa 
,aa 
$straa 3
}aa3 4
,aa4 5
{bb 
$strbb 
,bb 
$strbb $
}bb$ %
,bb% &
{cc 
$strcc 
,cc 
$strcc #
}cc# $
,cc$ %
{dd 
$strdd 
,dd 
$strdd 3
}dd3 4
,dd4 5
{ee 
$stree 
,ee 
$stree &
}ee& '
,ee' (
{ff 
$strff 
,ff 
$strff :
}ff: ;
,ff; <
{gg 
$strgg 
,gg 
$strgg 8
}gg8 9
,gg9 :
{hh 
$strhh 
,hh 
$strhh $
}hh$ %
,hh% &
{ii 
$strii 
,ii 
$strii $
}ii$ %
,ii% &
{jj 
$strjj 
,jj 
$strjj &
}jj& '
,jj' (
{kk 
$strkk 
,kk 
$strkk ,
}kk, -
,kk- .
{ll 
$strll 
,ll 
$strll 5
}ll5 6
,ll6 7
{mm 
$strmm 
,mm 
$strmm %
}mm% &
,mm& '
{nn 
$strnn 
,nn 
$strnn 3
}nn3 4
,nn4 5
{oo 
$stroo 
,oo 
$stroo 6
}oo6 7
,oo7 8
{pp 
$strpp 
,pp 
$strpp /
}pp/ 0
,pp0 1
{qq 
$strqq 
,qq 
$strqq %
}qq% &
,qq& '
{rr 
$strrr 
,rr 
$strrr &
}rr& '
,rr' (
{ss 
$strss 
,ss 
$strss %
}ss% &
,ss& '
{tt 
$strtt 
,tt 
$strtt (
}tt( )
,tt) *
{uu 
$struu 
,uu 
$struu -
}uu- .
,uu. /
{vv 
$strvv 
,vv 
$strvv 0
}vv0 1
,vv1 2
{ww 
$strww 
,ww 
$strww /
}ww/ 0
,ww0 1
{xx 
$strxx 
,xx 
$strxx .
}xx. /
,xx/ 0
{yy 
$stryy 
,yy 
$stryy %
}yy% &
,yy& '
{zz 
$strzz 
,zz 
$strzz 3
}zz3 4
,zz4 5
{{{ 
$str{{ 
,{{ 
$str{{ /
}{{/ 0
,{{0 1
{|| 
$str|| 
,|| 
$str|| 5
}||5 6
,||6 7
{}} 
$str}} 
,}} 
$str}} $
}}}$ %
,}}% &
{~~ 
$str~~ 
,~~ 
$str~~ )
}~~) *
,~~* +
{ 
$str 
, 
$str ,
}, -
,- .
{
ÄÄ 
$str
ÄÄ 
,
ÄÄ 
$str
ÄÄ (
}
ÄÄ( )
,
ÄÄ) *
{
ÅÅ 
$str
ÅÅ 
,
ÅÅ 
$str
ÅÅ #
}
ÅÅ# $
,
ÅÅ$ %
{
ÇÇ 
$str
ÇÇ 
,
ÇÇ 
$str
ÇÇ #
}
ÇÇ# $
,
ÇÇ$ %
{
ÉÉ 
$str
ÉÉ 
,
ÉÉ 
$str
ÉÉ 3
}
ÉÉ3 4
,
ÉÉ4 5
{
ÑÑ 
$str
ÑÑ 
,
ÑÑ 
$str
ÑÑ %
}
ÑÑ% &
,
ÑÑ& '
{
ÖÖ 
$str
ÖÖ 
,
ÖÖ 
$str
ÖÖ 3
}
ÖÖ3 4
,
ÖÖ4 5
{
ÜÜ 
$str
ÜÜ 
,
ÜÜ 
$str
ÜÜ  1
}
ÜÜ1 2
,
ÜÜ2 3
{
áá 
$str
áá 
,
áá 
$str
áá (
}
áá( )
,
áá) *
{
àà 
$str
àà 
,
àà 
$str
àà 1
}
àà1 2
,
àà2 3
{
ââ 
$str
ââ 
,
ââ 
$str
ââ %
}
ââ% &
,
ââ& '
{
ää 
$str
ää 
,
ää 
$str
ää 6
}
ää6 7
,
ää7 8
{
ãã 
$str
ãã 
,
ãã 
$str
ãã 5
}
ãã5 6
,
ãã6 7
{
åå 
$str
åå 
,
åå 
$str
åå +
}
åå+ ,
,
åå, -
{
çç 
$str
çç 
,
çç 
$str
çç $
}
çç$ %
,
çç% &
{
éé 
$str
éé 
,
éé 
$str
éé %
}
éé% &
,
éé& '
{
èè 
$str
èè 
,
èè 
$str
èè 1
}
èè1 2
,
èè2 3
{
êê 
$str
êê 
,
êê 
$str
êê %
}
êê% &
,
êê& '
{
ëë 
$str
ëë 
,
ëë 
$str
ëë &
}
ëë& '
,
ëë' (
{
íí 
$str
íí 
,
íí 
$str
íí 3
}
íí3 4
,
íí4 5
{
ìì 
$str
ìì 
,
ìì 
$str
ìì  *
}
ìì* +
,
ìì+ ,
{
îî 
$str
îî 
,
îî 
$str
îî #
}
îî# $
,
îî$ %
{
ïï 
$str
ïï 
,
ïï 
$str
ïï -
}
ïï- .
,
ïï. /
{
ññ 
$str
ññ 
,
ññ 
$str
ññ L
}
ññL M
,
ññM N
{
óó 
$str
óó 
,
óó 
$str
óó c
}
óóc d
,
óód e
{
òò 
$str
òò 
,
òò 
$str
òò -
}
òò- .
,
òò. /
{
ôô 
$str
ôô 
,
ôô 
$str
ôô L
}
ôôL M
,
ôôM N
{
öö 
$str
öö 
,
öö 
$str
öö c
}
ööc d
,
ööd e
{
õõ 
$str
õõ 
,
õõ 
$str
õõ 3
}
õõ3 4
,
õõ4 5
{
úú 
$str
úú 
,
úú 
$str
úú %
}
úú% &
,
úú& '
{
ùù 
$str
ùù 
,
ùù 
$str
ùù #
}
ùù# $
,
ùù$ %
{
ûû 
$str
ûû 
,
ûû 
$str
ûû )
}
ûû) *
,
ûû* +
{
üü 
$str
üü 
,
üü 
$str
üü $
}
üü$ %
,
üü% &
{
†† 
$str
†† 
,
†† 
$str
†† ,
}
††, -
,
††- .
{
°° 
$str
°° 
,
°° 
$str
°° (
}
°°( )
,
°°) *
{
¢¢ 
$str
¢¢ 
,
¢¢ 
$str
¢¢ 3
}
¢¢3 4
,
¢¢4 5
{
££ 
$str
££ 
,
££ 
$str
££ 1
}
££1 2
,
££2 3
{
§§ 
$str
§§ 
,
§§ 
$str
§§ )
}
§§) *
,
§§* +
{
•• 
$str
•• 
,
•• 
$str
•• 3
}
••3 4
,
••4 5
{
¶¶ 
$str
¶¶ 
,
¶¶ 
$str
¶¶ 8
}
¶¶8 9
,
¶¶9 :
{
ßß 
$str
ßß 
,
ßß 
$str
ßß 1
}
ßß1 2
,
ßß2 3
{
®® 
$str
®® 
,
®® 
$str
®® *
}
®®* +
,
®®+ ,
{
©© 
$str
©© 
,
©© 
$str
©© (
}
©©( )
,
©©) *
{
™™ 
$str
™™ 
,
™™ 
$str
™™ ,
}
™™, -
,
™™- .
{
´´ 
$str
´´ 
,
´´ 
$str
´´ 3
}
´´3 4
,
´´4 5
{
¨¨ 
$str
¨¨ 
,
¨¨ 
$str
¨¨  *
}
¨¨* +
,
¨¨+ ,
{
≠≠ 
$str
≠≠ 
,
≠≠ 
$str
≠≠ .
}
≠≠. /
,
≠≠/ 0
{
ÆÆ 
$str
ÆÆ 
,
ÆÆ 
$str
ÆÆ /
}
ÆÆ/ 0
,
ÆÆ0 1
{
ØØ 
$str
ØØ 
,
ØØ 
$str
ØØ .
}
ØØ. /
,
ØØ/ 0
{
∞∞ 
$str
∞∞ 
,
∞∞ 
$str
∞∞ 3
}
∞∞3 4
,
∞∞4 5
{
±± 
$str
±± 
,
±± 
$str
±± &
}
±±& '
,
±±' (
{
≤≤ 
$str
≤≤ 
,
≤≤ 
$str
≤≤ )
}
≤≤) *
,
≤≤* +
{
≥≥ 
$str
≥≥ 
,
≥≥ 
$str
≥≥ &
}
≥≥& '
,
≥≥' (
{
¥¥ 
$str
¥¥ 
,
¥¥ 
$str
¥¥ 9
}
¥¥9 :
,
¥¥: ;
{
µµ 
$str
µµ 
,
µµ 
$str
µµ 4
}
µµ4 5
,
µµ5 6
{
∂∂ 
$str
∂∂ 
,
∂∂  
$str
∂∂! 2
}
∂∂2 3
,
∂∂3 4
{
∑∑ 
$str
∑∑ 
,
∑∑ 
$str
∑∑ $
}
∑∑$ %
,
∑∑% &
{
∏∏ 
$str
∏∏ 
,
∏∏ 
$str
∏∏ .
}
∏∏. /
,
∏∏/ 0
{
ππ 
$str
ππ 
,
ππ 
$str
ππ ,
}
ππ, -
,
ππ- .
{
∫∫ 
$str
∫∫ 
,
∫∫ 
$str
∫∫ &
}
∫∫& '
,
∫∫' (
{
ªª 
$str
ªª 
,
ªª 
$str
ªª .
}
ªª. /
,
ªª/ 0
{
ºº 
$str
ºº 
,
ºº 
$str
ºº ,
}
ºº, -
,
ºº- .
{
ΩΩ 
$str
ΩΩ 
,
ΩΩ 
$str
ΩΩ #
}
ΩΩ# $
,
ΩΩ$ %
{
ææ 
$str
ææ 
,
ææ 
$str
ææ ,
}
ææ, -
,
ææ- .
{
øø 
$str
øø 
,
øø 
$str
øø '
}
øø' (
,
øø( )
{
¿¿ 
$str
¿¿ 
,
¿¿ 
$str
¿¿ 2
}
¿¿2 3
,
¿¿3 4
{
¡¡ 
$str
¡¡ 
,
¡¡ 
$str
¡¡ 3
}
¡¡3 4
,
¡¡4 5
{
¬¬ 
$str
¬¬ 
,
¬¬ 
$str
¬¬ 3
}
¬¬3 4
,
¬¬4 5
{
√√ 
$str
√√ 
,
√√ 
$str
√√ -
}
√√- .
,
√√. /
{
ƒƒ 
$str
ƒƒ 
,
ƒƒ 
$str
ƒƒ %
}
ƒƒ% &
,
ƒƒ& '
{
≈≈ 
$str
≈≈ 
,
≈≈ 
$str
≈≈ 3
}
≈≈3 4
,
≈≈4 5
{
∆∆ 
$str
∆∆ 
,
∆∆ 
$str
∆∆ *
}
∆∆* +
,
∆∆+ ,
{
«« 
$str
«« 
,
«« 
$str
«« +
}
««+ ,
,
««, -
{
»» 
$str
»» 
,
»» 
$str
»» $
}
»»$ %
,
»»% &
{
…… 
$str
…… 
,
…… 
$str
…… %
}
……% &
,
……& '
{
   
$str
   
,
   
$str
   +
}
  + ,
,
  , -
{
ÀÀ 
$str
ÀÀ 
,
ÀÀ 
$str
ÀÀ *
}
ÀÀ* +
,
ÀÀ+ ,
{
ÃÃ 
$str
ÃÃ 
,
ÃÃ 
$str
ÃÃ *
}
ÃÃ* +
,
ÃÃ+ ,
{
ÕÕ 
$str
ÕÕ 
,
ÕÕ 
$str
ÕÕ 3
}
ÕÕ3 4
,
ÕÕ4 5
{
ŒŒ 
$str
ŒŒ 
,
ŒŒ 
$str
ŒŒ *
}
ŒŒ* +
,
ŒŒ+ ,
{
œœ 
$str
œœ 
,
œœ 
$str
œœ *
}
œœ* +
,
œœ+ ,
{
–– 
$str
–– 
,
–– 
$str
–– 3
}
––3 4
,
––4 5
{
—— 
$str
—— 
,
—— 
$str
—— 3
}
——3 4
,
——4 5
{
““ 
$str
““ 
,
““ 
$str
““ *
}
““* +
,
““+ ,
{
”” 
$str
”” 
,
”” 
$str
”” 3
}
””3 4
,
””4 5
{
‘‘ 
$str
‘‘ 
,
‘‘ 
$str
‘‘ 3
}
‘‘3 4
,
‘‘4 5
{
’’ 
$str
’’ 
,
’’ 
$str
’’ 3
}
’’3 4
,
’’4 5
{
÷÷ 
$str
÷÷ 
,
÷÷ 
$str
÷÷ $
}
÷÷$ %
,
÷÷% &
{
◊◊ 
$str
◊◊ 
,
◊◊ 
$str
◊◊ *
}
◊◊* +
,
◊◊+ ,
{
ÿÿ 
$str
ÿÿ 
,
ÿÿ 
$str
ÿÿ 3
}
ÿÿ3 4
,
ÿÿ4 5
{
ŸŸ 
$str
ŸŸ 
,
ŸŸ 
$str
ŸŸ %
}
ŸŸ% &
,
ŸŸ& '
{
⁄⁄ 
$str
⁄⁄ 
,
⁄⁄ 
$str
⁄⁄ #
}
⁄⁄# $
,
⁄⁄$ %
{
€€ 
$str
€€ 
,
€€ 
$str
€€ '
}
€€' (
,
€€( )
{
‹‹ 
$str
‹‹ 
,
‹‹ 
$str
‹‹ 3
}
‹‹3 4
,
‹‹4 5
{
›› 
$str
›› 
,
›› 
$str
›› %
}
››% &
,
››& '
{
ﬁﬁ 
$str
ﬁﬁ 
,
ﬁﬁ 
$str
ﬁﬁ $
}
ﬁﬁ$ %
,
ﬁﬁ% &
{
ﬂﬂ 
$str
ﬂﬂ 
,
ﬂﬂ 
$str
ﬂﬂ /
}
ﬂﬂ/ 0
,
ﬂﬂ0 1
{
‡‡ 
$str
‡‡ 
,
‡‡ 
$str
‡‡ %
}
‡‡% &
,
‡‡& '
{
·· 
$str
·· 
,
·· 
$str
·· 3
}
··3 4
,
··4 5
{
‚‚ 
$str
‚‚ 
,
‚‚ 
$str
‚‚ %
}
‚‚% &
,
‚‚& '
{
„„ 
$str
„„ 
,
„„ 
$str
„„ %
}
„„% &
,
„„& '
{
‰‰ 
$str
‰‰ 
,
‰‰ 
$str
‰‰ 8
}
‰‰8 9
,
‰‰9 :
{
ÂÂ 
$str
ÂÂ 
,
ÂÂ 
$str
ÂÂ 3
}
ÂÂ3 4
,
ÂÂ4 5
{
ÊÊ 
$str
ÊÊ 
,
ÊÊ 
$str
ÊÊ 3
}
ÊÊ3 4
,
ÊÊ4 5
{
ÁÁ 
$str
ÁÁ 
,
ÁÁ 
$str
ÁÁ (
}
ÁÁ( )
,
ÁÁ) *
{
ËË 
$str
ËË 
,
ËË 
$str
ËË 5
}
ËË5 6
,
ËË6 7
{
ÈÈ 
$str
ÈÈ 
,
ÈÈ 
$str
ÈÈ (
}
ÈÈ( )
,
ÈÈ) *
{
ÍÍ 
$str
ÍÍ 
,
ÍÍ 
$str
ÍÍ 8
}
ÍÍ8 9
,
ÍÍ9 :
{
ÎÎ 
$str
ÎÎ 
,
ÎÎ 
$str
ÎÎ 3
}
ÎÎ3 4
,
ÎÎ4 5
{
ÏÏ 
$str
ÏÏ 
,
ÏÏ 
$str
ÏÏ 5
}
ÏÏ5 6
,
ÏÏ6 7
{
ÌÌ 
$str
ÌÌ 
,
ÌÌ 
$str
ÌÌ 5
}
ÌÌ5 6
,
ÌÌ6 7
{
ÓÓ 
$str
ÓÓ 
,
ÓÓ 
$str
ÓÓ 5
}
ÓÓ5 6
,
ÓÓ6 7
{
ÔÔ 
$str
ÔÔ 
,
ÔÔ 
$str
ÔÔ &
}
ÔÔ& '
,
ÔÔ' (
{
 
$str
 
,
 
$str
 3
}
3 4
,
4 5
{
ÒÒ 
$str
ÒÒ 
,
ÒÒ 
$str
ÒÒ 4
}
ÒÒ4 5
,
ÒÒ5 6
{
ÚÚ 
$str
ÚÚ 
,
ÚÚ 
$str
ÚÚ 3
}
ÚÚ3 4
,
ÚÚ4 5
{
ÛÛ 
$str
ÛÛ 
,
ÛÛ 
$str
ÛÛ 3
}
ÛÛ3 4
,
ÛÛ4 5
{
ÙÙ 
$str
ÙÙ 
,
ÙÙ 
$str
ÙÙ '
}
ÙÙ' (
,
ÙÙ( )
{
ıı 
$str
ıı 
,
ıı 
$str
ıı 8
}
ıı8 9
,
ıı9 :
{
ˆˆ 
$str
ˆˆ 
,
ˆˆ 
$str
ˆˆ 3
}
ˆˆ3 4
,
ˆˆ4 5
{
˜˜ 
$str
˜˜ 
,
˜˜ 
$str
˜˜ %
}
˜˜% &
,
˜˜& '
{
¯¯ 
$str
¯¯ 
,
¯¯ 
$str
¯¯ &
}
¯¯& '
,
¯¯' (
{
˘˘ 
$str
˘˘ 
,
˘˘ 
$str
˘˘ %
}
˘˘% &
,
˘˘& '
{
˙˙ 
$str
˙˙ 
,
˙˙ 
$str
˙˙ 0
}
˙˙0 1
,
˙˙1 2
{
˚˚ 
$str
˚˚ 
,
˚˚ 
$str
˚˚ ,
}
˚˚, -
,
˚˚- .
{
¸¸ 
$str
¸¸ 
,
¸¸ 
$str
¸¸ '
}
¸¸' (
,
¸¸( )
{
˝˝ 
$str
˝˝ 
,
˝˝ 
$str
˝˝ (
}
˝˝( )
,
˝˝) *
{
˛˛ 
$str
˛˛ 
,
˛˛ 
$str
˛˛ 0
}
˛˛0 1
,
˛˛1 2
{
ˇˇ 
$str
ˇˇ 
,
ˇˇ 
$str
ˇˇ  A
}
ˇˇA B
,
ˇˇB C
{
ÄÄ 
$str
ÄÄ 
,
ÄÄ 
$str
ÄÄ 2
}
ÄÄ2 3
,
ÄÄ3 4
{
ÅÅ 
$str
ÅÅ 
,
ÅÅ 
$str
ÅÅ /
}
ÅÅ/ 0
,
ÅÅ0 1
{
ÇÇ 
$str
ÇÇ 
,
ÇÇ 
$str
ÇÇ 3
}
ÇÇ3 4
,
ÇÇ4 5
{
ÉÉ 
$str
ÉÉ 
,
ÉÉ 
$str
ÉÉ )
}
ÉÉ) *
,
ÉÉ* +
{
ÑÑ 
$str
ÑÑ 
,
ÑÑ 
$str
ÑÑ %
}
ÑÑ% &
,
ÑÑ& '
{
ÖÖ 
$str
ÖÖ 
,
ÖÖ 
$str
ÖÖ )
}
ÖÖ) *
,
ÖÖ* +
{
ÜÜ 
$str
ÜÜ 
,
ÜÜ 
$str
ÜÜ 3
}
ÜÜ3 4
,
ÜÜ4 5
{
áá 
$str
áá 
,
áá 
$str
áá 4
}
áá4 5
,
áá5 6
{
àà 
$str
àà 
,
àà 
$str
àà 4
}
àà4 5
,
àà5 6
{
ââ 
$str
ââ 
,
ââ 
$str
ââ %
}
ââ% &
,
ââ& '
{
ää 
$str
ää 
,
ää 
$str
ää 2
}
ää2 3
,
ää3 4
{
ãã 
$str
ãã 
,
ãã 
$str
ãã 3
}
ãã3 4
,
ãã4 5
{
åå 
$str
åå 
,
åå 
$str
åå %
}
åå% &
,
åå& '
{
çç 
$str
çç 
,
çç 
$str
çç *
}
çç* +
,
çç+ ,
{
éé 
$str
éé 
,
éé 
$str
éé +
}
éé+ ,
,
éé, -
{
èè 
$str
èè 
,
èè 
$str
èè $
}
èè$ %
,
èè% &
{
êê 
$str
êê 
,
êê 
$str
êê $
}
êê$ %
,
êê% &
{
ëë 
$str
ëë 
,
ëë 
$str
ëë $
}
ëë$ %
,
ëë% &
{
íí 
$str
íí 
,
íí 
$str
íí &
}
íí& '
,
íí' (
{
ìì 
$str
ìì 
,
ìì 
$str
ìì &
}
ìì& '
,
ìì' (
{
îî 
$str
îî 
,
îî 
$str
îî +
}
îî+ ,
,
îî, -
{
ïï 
$str
ïï 
,
ïï 
$str
ïï %
}
ïï% &
,
ïï& '
{
ññ 
$str
ññ 
,
ññ 
$str
ññ 2
}
ññ2 3
,
ññ3 4
{
óó 
$str
óó 
,
óó 
$str
óó 9
}
óó9 :
,
óó: ;
{
òò 
$str
òò 
,
òò 
$str
òò %
}
òò% &
,
òò& '
{
ôô 
$str
ôô 
,
ôô 
$str
ôô -
}
ôô- .
,
ôô. /
{
öö 
$str
öö 
,
öö 
$str
öö /
}
öö/ 0
,
öö0 1
{
õõ 
$str
õõ 
,
õõ 
$str
õõ 1
}
õõ1 2
,
õõ2 3
{
úú 
$str
úú 
,
úú 
$str
úú /
}
úú/ 0
,
úú0 1
{
ùù 
$str
ùù 
,
ùù 
$str
ùù 3
}
ùù3 4
,
ùù4 5
{
ûû 
$str
ûû 
,
ûû 
$str
ûû 0
}
ûû0 1
,
ûû1 2
{
üü 
$str
üü 
,
üü 
$str
üü 8
}
üü8 9
,
üü9 :
{
†† 
$str
†† 
,
†† 
$str
†† )
}
††) *
,
††* +
{
°° 
$str
°° 
,
°° 
$str
°° +
}
°°+ ,
,
°°, -
{
¢¢ 
$str
¢¢ 
,
¢¢ 
$str
¢¢ $
}
¢¢$ %
,
¢¢% &
{
££ 
$str
££ 
,
££ 
$str
££ %
}
££% &
,
££& '
{
§§ 
$str
§§ 
,
§§ 
$str
§§ 3
}
§§3 4
,
§§4 5
{
•• 
$str
•• 
,
•• 
$str
•• $
}
••$ %
,
••% &
{
¶¶ 
$str
¶¶ 
,
¶¶ 
$str
¶¶ -
}
¶¶- .
,
¶¶. /
{
ßß 
$str
ßß 
,
ßß 
$str
ßß #
}
ßß# $
,
ßß$ %
{
®® 
$str
®® 
,
®® 
$str
®® 0
}
®®0 1
,
®®1 2
{
©© 
$str
©© 
,
©© 
$str
©© %
}
©©% &
,
©©& '
{
™™ 
$str
™™ 
,
™™ 
$str
™™ *
}
™™* +
,
™™+ ,
{
´´ 
$str
´´ 
,
´´ 
$str
´´ .
}
´´. /
,
´´/ 0
{
¨¨ 
$str
¨¨ 
,
¨¨ 
$str
¨¨ %
}
¨¨% &
,
¨¨& '
{
≠≠ 
$str
≠≠ 
,
≠≠ 
$str
≠≠ &
}
≠≠& '
,
≠≠' (
{
ÆÆ 
$str
ÆÆ 
,
ÆÆ 
$str
ÆÆ %
}
ÆÆ% &
,
ÆÆ& '
{
ØØ 
$str
ØØ 
,
ØØ 
$str
ØØ $
}
ØØ$ %
,
ØØ% &
{
∞∞ 
$str
∞∞ 
,
∞∞ 
$str
∞∞ %
}
∞∞% &
,
∞∞& '
{
±± 
$str
±± 
,
±± 
$str
±± %
}
±±% &
,
±±& '
{
≤≤ 
$str
≤≤ 
,
≤≤ 
$str
≤≤ %
}
≤≤% &
,
≤≤& '
{
≥≥ 
$str
≥≥ 
,
≥≥ 
$str
≥≥ &
}
≥≥& '
,
≥≥' (
{
¥¥ 
$str
¥¥ 
,
¥¥ 
$str
¥¥ :
}
¥¥: ;
,
¥¥; <
{
µµ 
$str
µµ 
,
µµ 
$str
µµ %
}
µµ% &
,
µµ& '
{
∂∂ 
$str
∂∂ 
,
∂∂ 
$str
∂∂ 5
}
∂∂5 6
,
∂∂6 7
{
∑∑ 
$str
∑∑ 
,
∑∑ 
$str
∑∑ &
}
∑∑& '
,
∑∑' (
{
∏∏ 
$str
∏∏ 
,
∏∏ 
$str
∏∏ *
}
∏∏* +
,
∏∏+ ,
{
ππ 
$str
ππ 
,
ππ 
$str
ππ 0
}
ππ0 1
,
ππ1 2
{
∫∫ 
$str
∫∫ 
,
∫∫ 
$str
∫∫ 3
}
∫∫3 4
,
∫∫4 5
{
ªª 
$str
ªª 
,
ªª 
$str
ªª 3
}
ªª3 4
,
ªª4 5
{
ºº 
$str
ºº 
,
ºº 
$str
ºº 2
}
ºº2 3
,
ºº3 4
{
ΩΩ 
$str
ΩΩ 
,
ΩΩ 
$str
ΩΩ *
}
ΩΩ* +
,
ΩΩ+ ,
{
ææ 
$str
ææ 
,
ææ 
$str
ææ 4
}
ææ4 5
,
ææ5 6
{
øø 
$str
øø 
,
øø 
$str
øø 6
}
øø6 7
,
øø7 8
{
¿¿ 
$str
¿¿ 
,
¿¿ 
$str
¿¿ -
}
¿¿- .
,
¿¿. /
{
¡¡ 
$str
¡¡ 
,
¡¡ 
$str
¡¡ .
}
¡¡. /
,
¡¡/ 0
{
¬¬ 
$str
¬¬ 
,
¬¬ 
$str
¬¬ )
}
¬¬) *
,
¬¬* +
{
√√ 
$str
√√ 
,
√√ 
$str
√√ )
}
√√) *
,
√√* +
{
ƒƒ 
$str
ƒƒ 
,
ƒƒ 
$str
ƒƒ 3
}
ƒƒ3 4
,
ƒƒ4 5
{
≈≈ 
$str
≈≈ 
,
≈≈ 
$str
≈≈ *
}
≈≈* +
,
≈≈+ ,
{
∆∆ 
$str
∆∆ 
,
∆∆ 
$str
∆∆ F
}
∆∆F G
,
∆∆G H
{
«« 
$str
«« 
,
«« 
$str
«« C
}
««C D
,
««D E
{
»» 
$str
»» 
,
»» 
$str
»» E
}
»»E F
,
»»F G
{
…… 
$str
…… 
,
…… 
$str
…… F
}
……F G
,
……G H
{
   
$str
   
,
   
$str
   %
}
  % &
,
  & '
{
ÀÀ 
$str
ÀÀ 
,
ÀÀ 
$str
ÀÀ C
}
ÀÀC D
,
ÀÀD E
{
ÃÃ 
$str
ÃÃ 
,
ÃÃ 
$str
ÃÃ %
}
ÃÃ% &
,
ÃÃ& '
{
ÕÕ 
$str
ÕÕ 
,
ÕÕ 
$str
ÕÕ I
}
ÕÕI J
,
ÕÕJ K
{
ŒŒ 
$str
ŒŒ 
,
ŒŒ 
$str
ŒŒ J
}
ŒŒJ K
,
ŒŒK L
{
œœ 
$str
œœ 
,
œœ 
$str
œœ I
}
œœI J
,
œœJ K
{
–– 
$str
–– 
,
–– 
$str
–– B
}
––B C
,
––C D
{
—— 
$str
—— 
,
—— 
$str
—— $
}
——$ %
,
——% &
{
““ 
$str
““ 
,
““ 
$str
““ $
}
““$ %
,
““% &
{
”” 
$str
”” 
,
”” 
$str
”” $
}
””$ %
,
””% &
{
‘‘ 
$str
‘‘ 
,
‘‘ 
$str
‘‘ *
}
‘‘* +
,
‘‘+ ,
{
’’ 
$str
’’ 
,
’’ 
$str
’’ .
}
’’. /
,
’’/ 0
{
÷÷ 
$str
÷÷ 
,
÷÷ 
$str
÷÷ /
}
÷÷/ 0
,
÷÷0 1
{
◊◊ 
$str
◊◊ 
,
◊◊ 
$str
◊◊ 1
}
◊◊1 2
,
◊◊2 3
{
ÿÿ 
$str
ÿÿ 
,
ÿÿ 
$str
ÿÿ 1
}
ÿÿ1 2
,
ÿÿ2 3
{
ŸŸ 
$str
ŸŸ 
,
ŸŸ 
$str
ŸŸ 1
}
ŸŸ1 2
,
ŸŸ2 3
{
⁄⁄ 
$str
⁄⁄ 
,
⁄⁄ 
$str
⁄⁄ 2
}
⁄⁄2 3
,
⁄⁄3 4
{
€€ 
$str
€€ 
,
€€ 
$str
€€ %
}
€€% &
,
€€& '
{
‹‹ 
$str
‹‹ 
,
‹‹  
$str
‹‹! 2
}
‹‹2 3
,
‹‹3 4
{
›› 
$str
›› 
,
›› 
$str
›› A
}
››A B
,
››B C
{
ﬁﬁ 
$str
ﬁﬁ 
,
ﬁﬁ 
$str
ﬁﬁ 0
}
ﬁﬁ0 1
,
ﬁﬁ1 2
{
ﬂﬂ 
$str
ﬂﬂ 
,
ﬂﬂ 
$str
ﬂﬂ O
}
ﬂﬂO P
,
ﬂﬂP Q
{
‡‡ 
$str
‡‡ 
,
‡‡ 
$str
‡‡ F
}
‡‡F G
,
‡‡G H
{
·· 
$str
·· 
,
·· 
$str
·· S
}
··S T
,
··T U
{
‚‚ 
$str
‚‚ 
,
‚‚ 
$str
‚‚ R
}
‚‚R S
,
‚‚S T
{
„„ 
$str
„„ 
,
„„ 
$str
„„ K
}
„„K L
,
„„L M
{
‰‰ 
$str
‰‰ 
,
‰‰ 
$str
‰‰ B
}
‰‰B C
,
‰‰C D
{
ÂÂ 
$str
ÂÂ 
,
ÂÂ 
$str
ÂÂ -
}
ÂÂ- .
,
ÂÂ. /
{
ÊÊ 
$str
ÊÊ 
,
ÊÊ 
$str
ÊÊ /
}
ÊÊ/ 0
,
ÊÊ0 1
{
ÁÁ 
$str
ÁÁ 
,
ÁÁ 
$str
ÁÁ ;
}
ÁÁ; <
,
ÁÁ< =
{
ËË 
$str
ËË 
,
ËË 
$str
ËË 1
}
ËË1 2
,
ËË2 3
{
ÈÈ 
$str
ÈÈ 
,
ÈÈ 
$str
ÈÈ 1
}
ÈÈ1 2
,
ÈÈ2 3
{
ÍÍ 
$str
ÍÍ 
,
ÍÍ 
$str
ÍÍ :
}
ÍÍ: ;
,
ÍÍ; <
{
ÎÎ 
$str
ÎÎ 
,
ÎÎ 
$str
ÎÎ 6
}
ÎÎ6 7
,
ÎÎ7 8
{
ÏÏ 
$str
ÏÏ 
,
ÏÏ 
$str
ÏÏ 2
}
ÏÏ2 3
,
ÏÏ3 4
{
ÌÌ 
$str
ÌÌ 
,
ÌÌ 
$str
ÌÌ 2
}
ÌÌ2 3
,
ÌÌ3 4
{
ÓÓ 
$str
ÓÓ 
,
ÓÓ 
$str
ÓÓ %
}
ÓÓ% &
,
ÓÓ& '
{
ÔÔ 
$str
ÔÔ 
,
ÔÔ 
$str
ÔÔ 3
}
ÔÔ3 4
,
ÔÔ4 5
{
 
$str
 
,
 
$str
 3
}
3 4
,
4 5
{
ÒÒ 
$str
ÒÒ 
,
ÒÒ 
$str
ÒÒ *
}
ÒÒ* +
,
ÒÒ+ ,
{
ÚÚ 
$str
ÚÚ 
,
ÚÚ 
$str
ÚÚ 3
}
ÚÚ3 4
,
ÚÚ4 5
{
ÛÛ 
$str
ÛÛ 
,
ÛÛ 
$str
ÛÛ 3
}
ÛÛ3 4
,
ÛÛ4 5
{
ÙÙ 
$str
ÙÙ 
,
ÙÙ 
$str
ÙÙ /
}
ÙÙ/ 0
,
ÙÙ0 1
{
ıı 
$str
ıı 
,
ıı 
$str
ıı 3
}
ıı3 4
,
ıı4 5
{
ˆˆ 
$str
ˆˆ 
,
ˆˆ 
$str
ˆˆ %
}
ˆˆ% &
,
ˆˆ& '
{
˜˜ 
$str
˜˜ 
,
˜˜ 
$str
˜˜ &
}
˜˜& '
,
˜˜' (
{
¯¯ 
$str
¯¯ 
,
¯¯ 
$str
¯¯ (
}
¯¯( )
,
¯¯) *
{
˘˘ 
$str
˘˘ 
,
˘˘ 
$str
˘˘ *
}
˘˘* +
,
˘˘+ ,
{
˙˙ 
$str
˙˙ 
,
˙˙ 
$str
˙˙ 5
}
˙˙5 6
,
˙˙6 7
{
˚˚ 
$str
˚˚ 
,
˚˚ 
$str
˚˚ &
}
˚˚& '
,
˚˚' (
{
¸¸ 
$str
¸¸ 
,
¸¸ 
$str
¸¸ 0
}
¸¸0 1
,
¸¸1 2
{
˝˝ 
$str
˝˝ 
,
˝˝ 
$str
˝˝ 0
}
˝˝0 1
,
˝˝1 2
{
˛˛ 
$str
˛˛ 
,
˛˛ 
$str
˛˛ 0
}
˛˛0 1
,
˛˛1 2
{
ˇˇ 
$str
ˇˇ 
,
ˇˇ 
$str
ˇˇ 0
}
ˇˇ0 1
,
ˇˇ1 2
{
ÄÄ 
$str
ÄÄ 
,
ÄÄ 
$str
ÄÄ 0
}
ÄÄ0 1
,
ÄÄ1 2
{
ÅÅ 
$str
ÅÅ 
,
ÅÅ 
$str
ÅÅ $
}
ÅÅ$ %
,
ÅÅ% &
{
ÇÇ 
$str
ÇÇ 
,
ÇÇ 
$str
ÇÇ 2
}
ÇÇ2 3
,
ÇÇ3 4
{
ÉÉ 
$str
ÉÉ 
,
ÉÉ 
$str
ÉÉ +
}
ÉÉ+ ,
,
ÉÉ, -
{
ÑÑ 
$str
ÑÑ 
,
ÑÑ 
$str
ÑÑ ,
}
ÑÑ, -
,
ÑÑ- .
{
ÖÖ 
$str
ÖÖ 
,
ÖÖ 
$str
ÖÖ $
}
ÖÖ$ %
,
ÖÖ% &
{
ÜÜ 
$str
ÜÜ 
,
ÜÜ 
$str
ÜÜ 8
}
ÜÜ8 9
,
ÜÜ9 :
{
áá 
$str
áá 
,
áá 
$str
áá R
}
ááR S
,
ááS T
{
àà 
$str
àà 
,
àà 
$str
àà a
}
ààa b
,
ààb c
{
ââ 
$str
ââ 
,
ââ 
$str
ââ 8
}
ââ8 9
,
ââ9 :
{
ää 
$str
ää 
,
ää 
$str
ää O
}
ääO P
,
ääP Q
{
ãã 
$str
ãã 
,
ãã 
$str
ãã 2
}
ãã2 3
,
ãã3 4
{
åå 
$str
åå 
,
åå 
$str
åå 8
}
åå8 9
,
åå9 :
{
çç 
$str
çç 
,
çç 
$str
çç S
}
ççS T
,
ççT U
{
éé 
$str
éé 
,
éé 
$str
éé b
}
ééb c
,
ééc d
{
èè 
$str
èè 
,
èè 
$str
èè 8
}
èè8 9
,
èè9 :
{
êê 
$str
êê 
,
êê 
$str
êê V
}
êêV W
,
êêW X
{
ëë 
$str
ëë 
,
ëë 
$str
ëë e
}
ëëe f
,
ëëf g
{
íí 
$str
íí 
,
íí 
$str
íí 1
}
íí1 2
,
íí2 3
{
ìì 
$str
ìì 
,
ìì 
$str
ìì 3
}
ìì3 4
,
ìì4 5
{
îî 
$str
îî 
,
îî 
$str
îî 3
}
îî3 4
,
îî4 5
{
ïï 
$str
ïï 
,
ïï 
$str
ïï 0
}
ïï0 1
,
ïï1 2
{
ññ 
$str
ññ 
,
ññ 
$str
ññ 2
}
ññ2 3
,
ññ3 4
{
óó 
$str
óó 
,
óó 
$str
óó 3
}
óó3 4
,
óó4 5
{
òò 
$str
òò 
,
òò 
$str
òò ,
}
òò, -
,
òò- .
{
ôô 
$str
ôô 
,
ôô 
$str
ôô 3
}
ôô3 4
,
ôô4 5
{
öö 
$str
öö 
,
öö 
$str
öö 3
}
öö3 4
,
öö4 5
{
õõ 
$str
õõ 
,
õõ 
$str
õõ 4
}
õõ4 5
,
õõ5 6
{
úú 
$str
úú 
,
úú 
$str
úú 8
}
úú8 9
,
úú9 :
{
ùù 
$str
ùù 
,
ùù 
$str
ùù 0
}
ùù0 1
,
ùù1 2
{
ûû 
$str
ûû 
,
ûû 
$str
ûû 1
}
ûû1 2
,
ûû2 3
{
üü 
$str
üü 
,
üü 
$str
üü )
}
üü) *
,
üü* +
{
†† 
$str
†† 
,
†† 
$str
†† ,
}
††, -
,
††- .
{
°° 
$str
°° 
,
°° 
$str
°° -
}
°°- .
,
°°. /
{
¢¢ 
$str
¢¢ 
,
¢¢ 
$str
¢¢ 8
}
¢¢8 9
,
¢¢9 :
{
££ 
$str
££ 
,
££ 
$str
££ 3
}
££3 4
,
££4 5
{
§§ 
$str
§§ 
,
§§ 
$str
§§ .
}
§§. /
,
§§/ 0
{
•• 
$str
•• 
,
•• 
$str
•• /
}
••/ 0
,
••0 1
{
¶¶ 
$str
¶¶ 
,
¶¶ 
$str
¶¶ 7
}
¶¶7 8
,
¶¶8 9
{
ßß 
$str
ßß 
,
ßß 
$str
ßß -
}
ßß- .
,
ßß. /
{
®® 
$str
®® 
,
®® 
$str
®® /
}
®®/ 0
,
®®0 1
{
©© 
$str
©© 
,
©© 
$str
©© $
}
©©$ %
,
©©% &
{
™™ 
$str
™™ 
,
™™ 
$str
™™ %
}
™™% &
,
™™& '
{
´´ 
$str
´´ 
,
´´ 
$str
´´ %
}
´´% &
,
´´& '
{
¨¨ 
$str
¨¨ 
,
¨¨ 
$str
¨¨ +
}
¨¨+ ,
,
¨¨, -
{
≠≠ 
$str
≠≠ 
,
≠≠ 
$str
≠≠ %
}
≠≠% &
,
≠≠& '
{
ÆÆ 
$str
ÆÆ 
,
ÆÆ 
$str
ÆÆ +
}
ÆÆ+ ,
,
ÆÆ, -
{
ØØ 
$str
ØØ 
,
ØØ 
$str
ØØ 0
}
ØØ0 1
,
ØØ1 2
{
∞∞ 
$str
∞∞ 
,
∞∞ 
$str
∞∞ &
}
∞∞& '
,
∞∞' (
{
±± 
$str
±± 
,
±± 
$str
±± %
}
±±% &
,
±±& '
{
≤≤ 
$str
≤≤ 
,
≤≤ 
$str
≤≤ 6
}
≤≤6 7
,
≤≤7 8
{
≥≥ 
$str
≥≥ 
,
≥≥ 
$str
≥≥ $
}
≥≥$ %
,
≥≥% &
{
¥¥ 
$str
¥¥ 
,
¥¥ 
$str
¥¥ >
}
¥¥> ?
,
¥¥? @
{
µµ 
$str
µµ 
,
µµ 
$str
µµ /
}
µµ/ 0
,
µµ0 1
{
∂∂ 
$str
∂∂ 
,
∂∂ 
$str
∂∂ 6
}
∂∂6 7
,
∂∂7 8
{
∑∑ 
$str
∑∑ 
,
∑∑ 
$str
∑∑ (
}
∑∑( )
,
∑∑) *
{
∏∏ 
$str
∏∏ 
,
∏∏ 
$str
∏∏ *
}
∏∏* +
,
∏∏+ ,
{
ππ 
$str
ππ 
,
ππ 
$str
ππ (
}
ππ( )
,
ππ) *
{
∫∫ 
$str
∫∫ 
,
∫∫ 
$str
∫∫ .
}
∫∫. /
,
∫∫/ 0
{
ªª 
$str
ªª 
,
ªª 
$str
ªª #
}
ªª# $
,
ªª$ %
{
ºº 
$str
ºº 
,
ºº 
$str
ºº  A
}
ººA B
,
ººB C
{
ΩΩ 
$str
ΩΩ 
,
ΩΩ 
$str
ΩΩ 3
}
ΩΩ3 4
,
ΩΩ4 5
{
ææ 
$str
ææ 
,
ææ 
$str
ææ %
}
ææ% &
,
ææ& '
{
øø 
$str
øø 
,
øø 
$str
øø )
}
øø) *
,
øø* +
{
¿¿ 
$str
¿¿ 
,
¿¿ 
$str
¿¿ &
}
¿¿& '
,
¿¿' (
{
¡¡ 
$str
¡¡ 
,
¡¡ 
$str
¡¡ *
}
¡¡* +
,
¡¡+ ,
{
¬¬ 
$str
¬¬ 
,
¬¬ 
$str
¬¬ 3
}
¬¬3 4
,
¬¬4 5
{
√√ 
$str
√√ &
,
√√& '
$str
√√( R
}
√√R S
,
√√S T
{
ƒƒ 
$str
ƒƒ 
,
ƒƒ 
$str
ƒƒ @
}
ƒƒ@ A
,
ƒƒA B
{
≈≈ 
$str
≈≈ 
,
≈≈ 
$str
≈≈ E
}
≈≈E F
,
≈≈F G
{
∆∆ 
$str
∆∆ 
,
∆∆ 
$str
∆∆ /
}
∆∆/ 0
,
∆∆0 1
{
«« 
$str
«« 
,
«« 
$str
«« 0
}
««0 1
,
««1 2
{
»» 
$str
»» 
,
»» 
$str
»» %
}
»»% &
,
»»& '
{
…… 
$str
…… 
,
…… 
$str
…… *
}
……* +
,
……+ ,
{
   
$str
   
,
   
$str
   .
}
  . /
,
  / 0
{
ÀÀ 
$str
ÀÀ 
,
ÀÀ 
$str
ÀÀ &
}
ÀÀ& '
,
ÀÀ' (
{
ÃÃ 
$str
ÃÃ 
,
ÃÃ 
$str
ÃÃ 0
}
ÃÃ0 1
,
ÃÃ1 2
{
ÕÕ 
$str
ÕÕ 
,
ÕÕ 
$str
ÕÕ .
}
ÕÕ. /
,
ÕÕ/ 0
{
ŒŒ 
$str
ŒŒ 
,
ŒŒ 
$str
ŒŒ +
}
ŒŒ+ ,
,
ŒŒ, -
{
œœ 
$str
œœ 
,
œœ 
$str
œœ O
}
œœO P
,
œœP Q
{
–– 
$str
–– 
,
–– 
$str
–– ^
}
––^ _
,
––_ `
{
—— 
$str
—— 
,
—— 
$str
—— 3
}
——3 4
,
——4 5
{
““ 
$str
““ 
,
““ 
$str
““ %
}
““% &
,
““& '
{
”” 
$str
”” 
,
”” 
$str
”” 9
}
””9 :
,
””: ;
{
‘‘ 
$str
‘‘ 
,
‘‘ 
$str
‘‘ &
}
‘‘& '
,
‘‘' (
{
’’ 
$str
’’ 
,
’’ 
$str
’’ 3
}
’’3 4
,
’’4 5
{
÷÷ 
$str
÷÷ 
,
÷÷ 
$str
÷÷ &
}
÷÷& '
,
÷÷' (
{
◊◊ 
$str
◊◊ 
,
◊◊ 
$str
◊◊ &
}
◊◊& '
,
◊◊' (
{
ÿÿ 
$str
ÿÿ 
,
ÿÿ 
$str
ÿÿ &
}
ÿÿ& '
,
ÿÿ' (
{
ŸŸ 
$str
ŸŸ 
,
ŸŸ 
$str
ŸŸ .
}
ŸŸ. /
,
ŸŸ/ 0
{
⁄⁄ 
$str
⁄⁄ 
,
⁄⁄ 
$str
⁄⁄ 3
}
⁄⁄3 4
,
⁄⁄4 5
{
€€ 
$str
€€ 
,
€€ 
$str
€€ %
}
€€% &
,
€€& '
{
‹‹ 
$str
‹‹ 
,
‹‹ 
$str
‹‹ %
}
‹‹% &
,
‹‹& '
{
›› 
$str
›› 
,
›› 
$str
›› ;
}
››; <
,
››< =
{
ﬁﬁ 
$str
ﬁﬁ 
,
ﬁﬁ 
$str
ﬁﬁ 3
}
ﬁﬁ3 4
,
ﬁﬁ4 5
{
ﬂﬂ 
$str
ﬂﬂ 
,
ﬂﬂ 
$str
ﬂﬂ $
}
ﬂﬂ$ %
,
ﬂﬂ% &
{
‡‡ 
$str
‡‡ 
,
‡‡ 
$str
‡‡ 4
}
‡‡4 5
,
‡‡5 6
{
·· 
$str
·· 
,
·· 
$str
·· %
}
··% &
,
··& '
{
‚‚ 
$str
‚‚ *
,
‚‚* +
$str
‚‚, 6
}
‚‚6 7
,
‚‚7 8
{
„„ 
$str
„„ 
,
„„ 
$str
„„ 5
}
„„5 6
,
„„6 7
{
‰‰ 
$str
‰‰ 
,
‰‰ 
$str
‰‰ ;
}
‰‰; <
,
‰‰< =
{
ÂÂ 
$str
ÂÂ 
,
ÂÂ 
$str
ÂÂ 5
}
ÂÂ5 6
,
ÂÂ6 7
{
ÊÊ 
$str
ÊÊ 
,
ÊÊ 
$str
ÊÊ 4
}
ÊÊ4 5
,
ÊÊ5 6
{
ÁÁ 
$str
ÁÁ 
,
ÁÁ 
$str
ÁÁ 2
}
ÁÁ2 3
,
ÁÁ3 4
{
ËË 
$str
ËË 
,
ËË 
$str
ËË *
}
ËË* +
,
ËË+ ,
{
ÈÈ 
$str
ÈÈ 
,
ÈÈ 
$str
ÈÈ (
}
ÈÈ( )
,
ÈÈ) *
{
ÍÍ 
$str
ÍÍ 
,
ÍÍ 
$str
ÍÍ 8
}
ÍÍ8 9
,
ÍÍ9 :
{
ÎÎ 
$str
ÎÎ 
,
ÎÎ 
$str
ÎÎ ,
}
ÎÎ, -
,
ÎÎ- .
{
ÏÏ 
$str
ÏÏ 
,
ÏÏ 
$str
ÏÏ +
}
ÏÏ+ ,
,
ÏÏ, -
{
ÌÌ 
$str
ÌÌ 
,
ÌÌ 
$str
ÌÌ ,
}
ÌÌ, -
,
ÌÌ- .
{
ÓÓ 
$str
ÓÓ 
,
ÓÓ 
$str
ÓÓ ,
}
ÓÓ, -
,
ÓÓ- .
{
ÔÔ 
$str
ÔÔ 
,
ÔÔ 
$str
ÔÔ ,
}
ÔÔ, -
,
ÔÔ- .
{
 
$str
 !
,
! "
$str
# 4
}
4 5
,
5 6
{
ÒÒ 
$str
ÒÒ  
,
ÒÒ  !
$str
ÒÒ" 3
}
ÒÒ3 4
,
ÒÒ4 5
{
ÚÚ 
$str
ÚÚ 
,
ÚÚ 
$str
ÚÚ ,
}
ÚÚ, -
,
ÚÚ- .
{
ÛÛ 
$str
ÛÛ 
,
ÛÛ 
$str
ÛÛ 1
}
ÛÛ1 2
,
ÛÛ2 3
{
ÙÙ 
$str
ÙÙ 
,
ÙÙ 
$str
ÙÙ 4
}
ÙÙ4 5
,
ÙÙ5 6
{
ıı 
$str
ıı 
,
ıı 
$str
ıı 3
}
ıı3 4
,
ıı4 5
{
ˆˆ 
$str
ˆˆ 
,
ˆˆ 
$str
ˆˆ :
}
ˆˆ: ;
,
ˆˆ; <
{
˜˜ 
$str
˜˜ 
,
˜˜ 
$str
˜˜ 3
}
˜˜3 4
,
˜˜4 5
{
¯¯ 
$str
¯¯ 
,
¯¯ 
$str
¯¯ %
}
¯¯% &
,
¯¯& '
{
˘˘ 
$str
˘˘ 
,
˘˘ 
$str
˘˘ &
}
˘˘& '
,
˘˘' (
{
˙˙ 
$str
˙˙ 
,
˙˙ 
$str
˙˙ %
}
˙˙% &
,
˙˙& '
{
˚˚ 
$str
˚˚ 
,
˚˚ 
$str
˚˚ %
}
˚˚% &
,
˚˚& '
{
¸¸ 
$str
¸¸ 
,
¸¸ 
$str
¸¸ 3
}
¸¸3 4
,
¸¸4 5
{
˝˝ 
$str
˝˝ 
,
˝˝ 
$str
˝˝ -
}
˝˝- .
,
˝˝. /
{
˛˛ 
$str
˛˛ 
,
˛˛ 
$str
˛˛ 3
}
˛˛3 4
,
˛˛4 5
{
ˇˇ 
$str
ˇˇ 
,
ˇˇ 
$str
ˇˇ *
}
ˇˇ* +
,
ˇˇ+ ,
{
ÄÄ 
$str
ÄÄ 
,
ÄÄ 
$str
ÄÄ 1
}
ÄÄ1 2
,
ÄÄ2 3
{
ÅÅ 
$str
ÅÅ 
,
ÅÅ 
$str
ÅÅ 4
}
ÅÅ4 5
,
ÅÅ5 6
{
ÇÇ 
$str
ÇÇ 
,
ÇÇ 
$str
ÇÇ 0
}
ÇÇ0 1
,
ÇÇ1 2
{
ÉÉ 
$str
ÉÉ 
,
ÉÉ 
$str
ÉÉ 2
}
ÉÉ2 3
,
ÉÉ3 4
{
ÑÑ 
$str
ÑÑ 
,
ÑÑ 
$str
ÑÑ %
}
ÑÑ% &
,
ÑÑ& '
{
ÖÖ 
$str
ÖÖ 
,
ÖÖ 
$str
ÖÖ 3
}
ÖÖ3 4
,
ÖÖ4 5
{
ÜÜ 
$str
ÜÜ 
,
ÜÜ 
$str
ÜÜ $
}
ÜÜ$ %
,
ÜÜ% &
{
áá 
$str
áá 
,
áá 
$str
áá &
}
áá& '
,
áá' (
{
àà 
$str
àà 
,
àà 
$str
àà 0
}
àà0 1
,
àà1 2
{
ââ 
$str
ââ 
,
ââ 
$str
ââ $
}
ââ$ %
,
ââ% &
{
ää 
$str
ää 
,
ää 
$str
ää )
}
ää) *
,
ää* +
{
ãã 
$str
ãã 
,
ãã 
$str
ãã %
}
ãã% &
,
ãã& '
{
åå 
$str
åå 
,
åå 
$str
åå (
}
åå( )
,
åå) *
{
çç 
$str
çç 
,
çç 
$str
çç (
}
çç( )
,
çç) *
{
éé 
$str
éé 
,
éé 
$str
éé '
}
éé' (
,
éé( )
{
èè 
$str
èè 
,
èè 
$str
èè -
}
èè- .
,
èè. /
{
êê 
$str
êê 
,
êê 
$str
êê %
}
êê% &
,
êê& '
{
ëë 
$str
ëë 
,
ëë 
$str
ëë .
}
ëë. /
,
ëë/ 0
{
íí 
$str
íí 
,
íí 
$str
íí )
}
íí) *
,
íí* +
{
ìì 
$str
ìì 
,
ìì 
$str
ìì %
}
ìì% &
,
ìì& '
{
îî 
$str
îî 
,
îî 
$str
îî (
}
îî( )
,
îî) *
{
ïï 
$str
ïï 
,
ïï 
$str
ïï :
}
ïï: ;
,
ïï; <
{
ññ 
$str
ññ 
,
ññ 
$str
ññ #
}
ññ# $
,
ññ$ %
{
óó 
$str
óó 
,
óó 
$str
óó 0
}
óó0 1
,
óó1 2
{
òò 
$str
òò 
,
òò 
$str
òò $
}
òò$ %
,
òò% &
{
ôô 
$str
ôô 
,
ôô 
$str
ôô 0
}
ôô0 1
,
ôô1 2
{
öö 
$str
öö 
,
öö 
$str
öö -
}
öö- .
,
öö. /
{
õõ 
$str
õõ 
,
õõ 
$str
õõ ,
}
õõ, -
,
õõ- .
{
úú 
$str
úú  
,
úú  !
$str
úú" ,
}
úú, -
,
úú- .
{
ùù 
$str
ùù  
,
ùù  !
$str
ùù" ,
}
ùù, -
,
ùù- .
{
ûû 
$str
ûû 
,
ûû 
$str
ûû ,
}
ûû, -
,
ûû- .
{
üü 
$str
üü 
,
üü 
$str
üü (
}
üü( )
,
üü) *
{
†† 
$str
†† 
,
†† 
$str
†† 0
}
††0 1
,
††1 2
{
°° 
$str
°° 
,
°° 
$str
°° '
}
°°' (
,
°°( )
{
¢¢ 
$str
¢¢ 
,
¢¢ 
$str
¢¢  *
}
¢¢* +
,
¢¢+ ,
{
££ 
$str
££ 
,
££ 
$str
££ (
}
££( )
,
££) *
{
§§ 
$str
§§ 
,
§§ 
$str
§§ 0
}
§§0 1
,
§§1 2
{
•• 
$str
•• 
,
•• 
$str
••  *
}
••* +
,
••+ ,
{
¶¶ 
$str
¶¶ 
,
¶¶ 
$str
¶¶ 1
}
¶¶1 2
,
¶¶2 3
{
ßß 
$str
ßß 
,
ßß 
$str
ßß 0
}
ßß0 1
,
ßß1 2
{
®® 
$str
®® 
,
®® 
$str
®® 0
}
®®0 1
,
®®1 2
{
©© 
$str
©© 
,
©© 
$str
©© 0
}
©©0 1
,
©©1 2
{
™™ 
$str
™™ 
,
™™ 
$str
™™ $
}
™™$ %
,
™™% &
{
´´ 
$str
´´ 
,
´´ 
$str
´´ %
}
´´% &
,
´´& '
{
¨¨ 
$str
¨¨ 
,
¨¨ 
$str
¨¨ )
}
¨¨) *
,
¨¨* +
{
≠≠ 
$str
≠≠ 
,
≠≠ 
$str
≠≠ -
}
≠≠- .
,
≠≠. /
{
ÆÆ 
$str
ÆÆ 
,
ÆÆ 
$str
ÆÆ .
}
ÆÆ. /
,
ÆÆ/ 0
{
ØØ 
$str
ØØ 
,
ØØ 
$str
ØØ 3
}
ØØ3 4
,
ØØ4 5
{
∞∞ 
$str
∞∞ 
,
∞∞ 
$str
∞∞ 3
}
∞∞3 4
,
∞∞4 5
{
±± 
$str
±± 
,
±± 
$str
±± -
}
±±- .
,
±±. /
{
≤≤ 
$str
≤≤ 
,
≤≤ 
$str
≤≤  A
}
≤≤A B
,
≤≤B C
{
≥≥ 
$str
≥≥ 
,
≥≥ 
$str
≥≥ &
}
≥≥& '
,
≥≥' (
{
¥¥ 
$str
¥¥ 
,
¥¥ 
$str
¥¥ &
}
¥¥& '
,
¥¥' (
{
µµ 
$str
µµ 
,
µµ 
$str
µµ .
}
µµ. /
,
µµ/ 0
{
∂∂ 
$str
∂∂ 
,
∂∂ 
$str
∂∂ *
}
∂∂* +
,
∂∂+ ,
{
∑∑ 
$str
∑∑ 
,
∑∑ 
$str
∑∑ -
}
∑∑- .
,
∑∑. /
{
∏∏ 
$str
∏∏ 
,
∏∏ 
$str
∏∏ 3
}
∏∏3 4
,
∏∏4 5
{
ππ 
$str
ππ 
,
ππ 
$str
ππ 4
}
ππ4 5
,
ππ5 6
{
∫∫ 
$str
∫∫ 
,
∫∫  
$str
∫∫! <
}
∫∫< =
,
∫∫= >
{
ªª 
$str
ªª  
,
ªª  !
$str
ªª" >
}
ªª> ?
,
ªª? @
{
ºº 
$str
ºº 
,
ºº 
$str
ºº '
}
ºº' (
,
ºº( )
{
ΩΩ 
$str
ΩΩ 
,
ΩΩ 
$str
ΩΩ )
}
ΩΩ) *
,
ΩΩ* +
{
ææ 
$str
ææ 
,
ææ 
$str
ææ /
}
ææ/ 0
,
ææ0 1
{
øø 
$str
øø 
,
øø 
$str
øø 3
}
øø3 4
,
øø4 5
{
¿¿ 
$str
¿¿ 
,
¿¿ 
$str
¿¿ +
}
¿¿+ ,
,
¿¿, -
{
¡¡ 
$str
¡¡ 
,
¡¡ 
$str
¡¡ 4
}
¡¡4 5
,
¡¡5 6
{
¬¬ 
$str
¬¬ 
,
¬¬ 
$str
¬¬ 2
}
¬¬2 3
,
¬¬3 4
{
√√ 
$str
√√ 
,
√√ 
$str
√√ ;
}
√√; <
,
√√< =
{
ƒƒ 
$str
ƒƒ 
,
ƒƒ 
$str
ƒƒ )
}
ƒƒ) *
,
ƒƒ* +
{
≈≈ 
$str
≈≈ 
,
≈≈ 
$str
≈≈ )
}
≈≈) *
,
≈≈* +
{
∆∆ 
$str
∆∆ 
,
∆∆ 
$str
∆∆ )
}
∆∆) *
,
∆∆* +
{
«« 
$str
«« 
,
«« 
$str
«« /
}
««/ 0
,
««0 1
{
»» 
$str
»» 
,
»» 
$str
»» 1
}
»»1 2
,
»»2 3
{
…… 
$str
…… 
,
…… 
$str
…… 1
}
……1 2
,
……2 3
{
   
$str
   
,
   
$str
   3
}
  3 4
,
  4 5
{
ÀÀ 
$str
ÀÀ 
,
ÀÀ 
$str
ÀÀ 0
}
ÀÀ0 1
,
ÀÀ1 2
{
ÃÃ 
$str
ÃÃ 
,
ÃÃ 
$str
ÃÃ )
}
ÃÃ) *
,
ÃÃ* +
{
ÕÕ 
$str
ÕÕ 
,
ÕÕ 
$str
ÕÕ )
}
ÕÕ) *
,
ÕÕ* +
{
ŒŒ 
$str
ŒŒ 
,
ŒŒ 
$str
ŒŒ )
}
ŒŒ) *
,
ŒŒ* +
{
œœ 
$str
œœ 
,
œœ 
$str
œœ $
}
œœ$ %
,
œœ% &
{
–– 
$str
–– 
,
–– 
$str
–– )
}
––) *
,
––* +
{
—— 
$str
—— 
,
—— 
$str
—— ,
}
——, -
,
——- .
{
““ 
$str
““ 
,
““ 
$str
““ )
}
““) *
,
““* +
{
”” 
$str
”” 
,
”” 
$str
”” 0
}
””0 1
,
””1 2
{
‘‘ 
$str
‘‘ 
,
‘‘ 
$str
‘‘ 8
}
‘‘8 9
,
‘‘9 :
{
’’ 
$str
’’ 
,
’’ 
$str
’’ 1
}
’’1 2
,
’’2 3
{
÷÷ 
$str
÷÷ 
,
÷÷ 
$str
÷÷ *
}
÷÷* +
,
÷÷+ ,
{
◊◊ 
$str
◊◊ 
,
◊◊ 
$str
◊◊ %
}
◊◊% &
,
◊◊& '
{
ÿÿ 
$str
ÿÿ 
,
ÿÿ 
$str
ÿÿ 0
}
ÿÿ0 1
,
ÿÿ1 2
{
ŸŸ 
$str
ŸŸ 
,
ŸŸ 
$str
ŸŸ 2
}
ŸŸ2 3
,
ŸŸ3 4
{
⁄⁄ 
$str
⁄⁄ 
,
⁄⁄ 
$str
⁄⁄ 3
}
⁄⁄3 4
,
⁄⁄4 5
{
€€ 
$str
€€ 
,
€€ 
$str
€€ J
}
€€J K
,
€€K L
{
‹‹ 
$str
‹‹ 
,
‹‹ 
$str
‹‹ 3
}
‹‹3 4
,
‹‹4 5
{
›› 
$str
›› 
,
›› 
$str
›› 3
}
››3 4
,
››4 5
{
ﬁﬁ 
$str
ﬁﬁ 
,
ﬁﬁ 
$str
ﬁﬁ 3
}
ﬁﬁ3 4
,
ﬁﬁ4 5
{
ﬂﬂ 
$str
ﬂﬂ 
,
ﬂﬂ 
$str
ﬂﬂ 3
}
ﬂﬂ3 4
,
ﬂﬂ4 5
{
‡‡ 
$str
‡‡ 
,
‡‡ 
$str
‡‡ 3
}
‡‡3 4
,
‡‡4 5
{
·· 
$str
·· 
,
·· 
$str
·· 3
}
··3 4
,
··4 5
{
‚‚ 
$str
‚‚ 
,
‚‚ 
$str
‚‚ Q
}
‚‚Q R
,
‚‚R S
{
„„ 
$str
„„ 
,
„„ 
$str
„„ J
}
„„J K
,
„„K L
{
‰‰ 
$str
‰‰ 
,
‰‰ 
$str
‰‰ ]
}
‰‰] ^
,
‰‰^ _
{
ÂÂ 
$str
ÂÂ 
,
ÂÂ 
$str
ÂÂ 3
}
ÂÂ3 4
,
ÂÂ4 5
{
ÊÊ 
$str
ÊÊ 
,
ÊÊ 
$str
ÊÊ M
}
ÊÊM N
,
ÊÊN O
{
ÁÁ 
$str
ÁÁ 
,
ÁÁ 
$str
ÁÁ `
}
ÁÁ` a
,
ÁÁa b
{
ËË 
$str
ËË 
,
ËË 
$str
ËË 3
}
ËË3 4
,
ËË4 5
{
ÈÈ 
$str
ÈÈ 
,
ÈÈ 
$str
ÈÈ #
}
ÈÈ# $
,
ÈÈ$ %
{
ÍÍ 
$str
ÍÍ 
,
ÍÍ 
$str
ÍÍ +
}
ÍÍ+ ,
,
ÍÍ, -
{
ÎÎ 
$str
ÎÎ 
,
ÎÎ 
$str
ÎÎ )
}
ÎÎ) *
,
ÎÎ* +
{
ÏÏ 
$str
ÏÏ 
,
ÏÏ 
$str
ÏÏ &
}
ÏÏ& '
,
ÏÏ' (
{
ÌÌ 
$str
ÌÌ 
,
ÌÌ 
$str
ÌÌ *
}
ÌÌ* +
,
ÌÌ+ ,
{
ÓÓ 
$str
ÓÓ 
,
ÓÓ 
$str
ÓÓ 9
}
ÓÓ9 :
,
ÓÓ: ;
{
ÔÔ 
$str
ÔÔ 
,
ÔÔ 
$str
ÔÔ &
}
ÔÔ& '
,
ÔÔ' (
{
 
$str
 
,
 
$str
 *
}
* +
,
+ ,
{
ÒÒ 
$str
ÒÒ 
,
ÒÒ 
$str
ÒÒ #
}
ÒÒ# $
,
ÒÒ$ %
{
ÚÚ 
$str
ÚÚ 
,
ÚÚ 
$str
ÚÚ #
}
ÚÚ# $
,
ÚÚ$ %
{
ÛÛ 
$str
ÛÛ 
,
ÛÛ 
$str
ÛÛ #
}
ÛÛ# $
,
ÛÛ$ %
{
ÙÙ 
$str
ÙÙ 
,
ÙÙ 
$str
ÙÙ $
}
ÙÙ$ %
,
ÙÙ% &
{
ıı 
$str
ıı 
,
ıı 
$str
ıı 3
}
ıı3 4
,
ıı4 5
{
ˆˆ 
$str
ˆˆ 
,
ˆˆ 
$str
ˆˆ *
}
ˆˆ* +
,
ˆˆ+ ,
{
˜˜ 
$str
˜˜ 
,
˜˜ 
$str
˜˜ 0
}
˜˜0 1
,
˜˜1 2
{
¯¯ 
$str
¯¯ 
,
¯¯ 
$str
¯¯ 3
}
¯¯3 4
,
¯¯4 5
{
˘˘ 
$str
˘˘ 
,
˘˘ 
$str
˘˘ .
}
˘˘. /
,
˘˘/ 0
{
˙˙ 
$str
˙˙ 
,
˙˙ 
$str
˙˙ /
}
˙˙/ 0
,
˙˙0 1
{
˚˚ 
$str
˚˚ 
,
˚˚ 
$str
˚˚ *
}
˚˚* +
,
˚˚+ ,
}
¸¸ 	
;
¸¸	 

public
˛˛ 
static
˛˛ 
string
˛˛ 
GetExtension
˛˛ )
(
˛˛) *
string
˛˛* 0
contentType
˛˛1 <
)
˛˛< =
{
ˇˇ 	
return
ÄÄ (
ExtensionToContentTypeList
ÄÄ -
.
ÄÄ- .
Where
ÄÄ. 3
(
ÄÄ3 4
a
ÄÄ4 5
=>
ÄÄ6 8
a
ÄÄ9 :
.
ÄÄ: ;
Value
ÄÄ; @
==
ÄÄA C
contentType
ÄÄD O
)
ÄÄO P
.
ÄÄP Q
Select
ÄÄQ W
(
ÄÄW X
a
ÄÄX Y
=>
ÄÄZ \
a
ÄÄ] ^
.
ÄÄ^ _
Key
ÄÄ_ b
)
ÄÄb c
.
ÄÄc d
FirstOrDefault
ÄÄd r
(
ÄÄr s
)
ÄÄs t
;
ÄÄt u
}
ÅÅ 	
}
ÉÉ 
}ÑÑ å
|D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\FileWebJobs.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Helper #
{ 
public		 

class		 
FileWebJobs		 
{

 
private 
static 
string 
GetFileUpload +
(+ ,
HttpContext, 7
context8 ?
,? @
stringA G
	_filenameH Q
)Q R
{ 	
HttpFileCollection 
files $
=% &
context' .
.. /
Request/ 6
.6 7
Files7 <
;< =
for 
( 
int 
i 
= 
$num 
; 
i 
< 
files  %
.% &
Count& +
;+ ,
i- .
++. 0
)0 1
{ 
HttpPostedFile 
file #
=$ %
files& +
[+ ,
i, -
]- .
;. /
file 
. 
SaveAs 
( 
$str "
+# $
file% )
.) *
FileName* 2
.2 3
ToString3 ;
(; <
)< =
)= >
;> ?
	_filename 
+= 
$str  
+! "
file# '
.' (
FileName( 0
+1 2
$str3 6
;6 7
} 
return 
	_filename 
; 
} 	
public"" 
static"" 
string"" 
	FileBoyut"" &
(""& '
long""' +
bytes"", 1
)""1 2
{## 	
const$$ 
int$$ 
scale$$ 
=$$ 
$num$$ "
;$$" #
string%% 
[%% 
]%% 
orders%% 
=%% 
new%% !
string%%" (
[%%( )
]%%) *
{%%+ ,
$str%%- 1
,%%1 2
$str%%2 6
,%%6 7
$str%%8 <
,%%< =
$str%%> B
,%%B C
$str%%D K
}%%L M
;%%M N
long&& 
max&& 
=&& 
(&& 
long&& 
)&& 
Math&& !
.&&! "
Pow&&" %
(&&% &
scale&&& +
,&&+ ,
orders&&- 3
.&&3 4
Length&&4 :
-&&; <
$num&&= >
)&&> ?
;&&? @
foreach(( 
((( 
string(( 
order(( !
in((" $
orders((% +
)((+ ,
{)) 
if** 
(** 
bytes** 
>** 
max** 
)**  
return++ 
string++ !
.++! "
Format++" (
(++( )
$str++) 8
,++8 9
decimal++: A
.++A B
Divide++B H
(++H I
bytes++I N
,++N O
max++P S
)++S T
,++T U
order++V [
)++[ \
;++\ ]
max-- 
/=-- 
scale-- 
;-- 
}.. 
return// 
$str// 
;// 
}00 	
}11 
}22 Ñ,
D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\GeometryHelper.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Helper #
{		 
public

 

class

 
GeometryHelper

 
{ 
public 
static 
	IGeometry 
GeomFromWKT  +
(+ ,
string, 2
wkt3 6
)6 7
{ 	
var 
reader 
= 
new 
NetTopologySuite -
.- .
IO. 0
.0 1
	WKTReader1 :
(: ;
); <
;< =
return 
reader 
. 
Read 
( 
wkt "
)" #
;# $
} 	
public 
static 
	IGeometry 
GeomFromWKB  +
(+ ,
byte, 0
[0 1
]1 2
wkb3 6
)6 7
{ 	
var 
reader 
= 
new 
NetTopologySuite -
.- .
IO. 0
.0 1
	WKBReader1 :
(: ;
); <
;< =
return 
reader 
. 
Read 
( 
wkb "
)" #
;# $
} 	
public 
static 
bool 
IsValid "
(" #
	IGeometry# ,
geometry- 5
)5 6
{ 	
var 
	validator 
= $
GeometryValidatorFactory 4
.4 5
GetValidator5 A
(A B
geometryB J
)J K
;K L
return 
	validator 
. 
IsValid $
($ %
geometry% -
)- .
;. /
} 	
public 
static 
	IGeometry 
	MakeValid  )
() *
	IGeometry* 3
geometry4 <
)< =
{   	
var!! 
	validator!! 
=!! $
GeometryValidatorFactory!! 4
.!!4 5
GetValidator!!5 A
(!!A B
geometry!!B J
)!!J K
;!!K L
return"" 
	validator"" 
."" 
	MakeValid"" &
(""& '
geometry""' /
)""/ 0
;""0 1
}## 	
}%% 
public'' 

	interface'' 
IGeometryValidator'' '
{(( 
bool)) 
IsValid)) 
()) 
	IGeometry)) 
geometry)) '
)))' (
;))( )
	IGeometry** 
	MakeValid** 
(** 
	IGeometry** %
geometry**& .
)**. /
;**/ 0
}++ 
public,, 

class,, $
GeometryValidatorFactory,, )
{-- 
public.. 
static.. 
IGeometryValidator.. (
GetValidator..) 5
(..5 6
	IGeometry..6 ?
geometry..@ H
)..H I
{// 	
if00 
(00 
geometry00 
is00 
IPolygon00 $
)00$ %
return11 
new11 
PolygonValidator11 +
(11+ ,
)11, -
;11- .
return33 
null33 
;33 
}44 	
}55 
public77 

class77 
PointValidator77 
:77  !
IGeometryValidator77" 4
{88 
public99 
bool99 
IsValid99 
(99 
	IGeometry99 %
geometry99& .
)99. /
{:: 	
throw;; 
new;; #
NotImplementedException;; -
(;;- .
);;. /
;;;/ 0
}<< 	
public== 
	IGeometry== 
	MakeValid== "
(==" #
	IGeometry==# ,
geometry==- 5
)==5 6
{>> 	
throw?? 
new?? #
NotImplementedException?? -
(??- .
)??. /
;??/ 0
}@@ 	
}AA 
publicBB 

classBB 
LineStringValidatorBB $
:BB% &
IGeometryValidatorBB' 9
{CC 
publicDD 
boolDD 
IsValidDD 
(DD 
	IGeometryDD %
geometryDD& .
)DD. /
{EE 	
throwFF 
newFF #
NotImplementedExceptionFF -
(FF- .
)FF. /
;FF/ 0
}GG 	
publicHH 
	IGeometryHH 
	MakeValidHH "
(HH" #
	IGeometryHH# ,
geometryHH- 5
)HH5 6
{II 	
throwJJ 
newJJ #
NotImplementedExceptionJJ -
(JJ- .
)JJ. /
;JJ/ 0
}KK 	
}LL 
publicMM 

classMM 
PolygonValidatorMM !
:MM" #
IGeometryValidatorMM$ 6
{NN 
publicOO 
boolOO 
IsValidOO 
(OO 
	IGeometryOO %
geometryOO& .
)OO. /
{PP 	
throwQQ 
newQQ #
NotImplementedExceptionQQ -
(QQ- .
)QQ. /
;QQ/ 0
}RR 	
publicSS 
	IGeometrySS 
	MakeValidSS "
(SS" #
	IGeometrySS# ,
geometrySS- 5
)SS5 6
{TT 	
throwUU 
newUU #
NotImplementedExceptionUU -
(UU- .
)UU. /
;UU/ 0
}VV 	
}WW 
}ZZ à§
ÉD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\GeometryCalculator.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Helper #
{ 
public		 

class		 
GeometryCalculator		 #
{

 
private 
int 
R 
= 
$num 
;  
private 
class 
CalculatedPointList )
{ 	
public 
int 

pointIndex !
{" #
get$ '
;' (
set) ,
;, -
}. /
public 
Point 
point 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
double 
distance "
{# $
get% (
;( )
set* -
;- .
}/ 0
} 	
private 
double 
	ToDegrees  
(  !
double! '
x( )
)) *
{ 	
return 
x 
* 
$num 
/ 
Math !
.! "
PI" $
;$ %
} 	
private 
double 
	ToRadians  
(  !
double! '
x( )
)) *
{ 	
return 
x 
* 
Math 
. 
PI 
/  
$num! $
;$ %
} 	
private!! 
Point!! &
GetPointFromGeographyPoint!! 0
(!!0 1
SqlGeography!!1 =
item!!> B
)!!B C
{"" 	
return## 
new## 
Point## 
{## 
X##  
=##! "
item### '
.##' (
Lat##( +
.##+ ,
Value##, 1
,##1 2
Y##3 4
=##5 6
item##7 ;
.##; <
Long##< @
.##@ A
Value##A F
}##G H
;##H I
}$$ 	
private'' 
string'' %
GetCheckedGeographyString'' 0
(''0 1
string''1 7
item''8 <
)''< =
{(( 	
if** 
(** 
item** 
.** 
IndexOf** 
(** 
$str** &
)**& '
==**( *
$num**+ ,
)**, -
{++ 
var-- 
itemStr-- 
=-- 
item-- "
.--" #
Replace--# *
(--* +
$str--+ 7
,--7 8
$str--9 ;
)--; <
.--< =
Replace--= D
(--D E
$str--E P
,--P Q
$str--R T
)--T U
.--U V
Replace--V ]
(--] ^
$str--^ b
,--b c
$str--d f
)--f g
.--g h
Trim--h l
(--l m
)--m n
;--n o
var.. 
itemArr.. 
=.. 
itemStr.. %
...% &
Split..& +
(..+ ,
$char.., /
)../ 0
...0 1
ToList..1 7
(..7 8
)..8 9
;..9 :
if00 
(00 
itemArr00 
.00 
FirstOrDefault00 *
(00* +
)00+ ,
.00, -
Trim00- 1
(001 2
)002 3
!=004 6
itemArr007 >
.00> ?
LastOrDefault00? L
(00L M
)00M N
.00N O
Trim00O S
(00S T
)00T U
)00U V
{11 
return22 
$str22 '
+22( )
itemStr22* 1
+222 3
$str224 8
+229 :
itemArr22; B
.22B C
FirstOrDefault22C Q
(22Q R
)22R S
.22S T
Trim22T X
(22X Y
)22Y Z
+22[ \
$str22] a
;22a b
}33 
else44 
{55 
return66 
$str66 '
+66( )
itemStr66* 1
+662 3
$str664 8
;668 9
}77 
}99 
else:: 
if:: 
(:: 
item:: 
.:: 
IndexOf:: !
(::! "
$str::" 0
)::0 1
>::2 3
-::4 5
$num::5 6
)::6 7
{;; 
var== 
itemStr== 
=== 
item== "
.==" #
Replace==# *
(==* +
$str==+ 9
,==9 :
$str==; =
)=== >
.==> ?
Replace==? F
(==F G
$str==G T
,==T U
$str==V X
)==X Y
.==Y Z
Replace==Z a
(==a b
$str==b e
,==e f
$str==g i
)==i j
.==j k
Trim==k o
(==o p
)==p q
;==q r
return>> 
$str>> %
+>>& '
itemStr>>( /
+>>0 1
$str>>2 5
;>>5 6
}@@ 
elseAA 
ifAA 
(AA 
itemAA 
.AA 
IndexOfAA !
(AA! "
$strAA" )
)AA) *
>AA+ ,
-AA- .
$numAA. /
)AA/ 0
{BB 
varCC 
itemStrCC 
=CC 
itemCC "
.CC" #
ReplaceCC# *
(CC* +
$strCC+ 3
,CC3 4
$strCC5 7
)CC7 8
.CC8 9
ReplaceCC9 @
(CC@ A
$strCCA J
,CCJ K
$strCCL N
)CCN O
.CCO P
ReplaceCCP W
(CCW X
$strCCX [
,CC[ \
$strCC] _
)CC_ `
.CC` a
TrimCCa e
(CCe f
)CCf g
;CCg h
returnDD 
$strDD  
+DD! "
itemStrDD# *
+DD+ ,
$strDD- 0
;DD0 1
}EE 
returnGG 
nullGG 
;GG 
}II 	
privateKK 
ListKK 
<KK 
CalculatedPointListKK (
>KK( )*
GetCalculatedPointsFromPolygonKK* H
(KKH I
SqlGeographyKKI U
itemKKV Z
)KKZ [
{LL 	
varNN 
resNN 
=NN 
newNN 
ListNN 
<NN 
CalculatedPointListNN 2
>NN2 3
(NN3 4
)NN4 5
;NN5 6
forPP 
(PP 
intPP 
iPP 
=PP 
$numPP 
;PP 
iPP 
<PP 
itemPP  $
.PP$ %
STNumPointsPP% 0
(PP0 1
)PP1 2
;PP2 3
iPP4 5
++PP5 7
)PP7 8
{QQ 
varRR 
tp1RR 
=RR 
itemRR 
.RR 
STPointNRR '
(RR' (
iRR( )
)RR) *
;RR* +
varSS 
tp2SS 
=SS 
itemSS 
.SS 
STPointNSS '
(SS' (
iSS( )
+SS* +
$numSS, -
)SS- .
;SS. /
resUU 
.UU 
AddUU 
(UU 
newUU 
CalculatedPointListUU /
{VV 

pointIndexWW 
=WW  
iWW! "
-WW# $
$numWW% &
,WW& '
pointXX 
=XX &
GetPointFromGeographyPointXX 6
(XX6 7
tp1XX7 :
)XX: ;
,XX; <
distanceYY 
=YY 
ComputeDistanceYY .
(YY. /&
GetPointFromGeographyPointYY/ I
(YYI J
tp1YYJ M
)YYM N
,YYN O&
GetPointFromGeographyPointYYP j
(YYj k
tp2YYk n
)YYn o
)YYo p
}ZZ 
)ZZ 
;ZZ 
}\\ 
return^^ 
res^^ 
;^^ 
}`` 	
privatebb 
SqlGeographybb (
GetPolygonFromCalculatedListbb 9
(bb9 :
Listbb: >
<bb> ?
CalculatedPointListbb? R
>bbR S
itemsbbT Y
)bbY Z
{cc 	
vardd 
sqldd 
=dd 
newdd 
SqlGeographydd &
(dd& '
)dd' (
;dd( )
varff 
polStrff 
=ff 
$strff 
;ff 
forhh 
(hh 
inthh 
ihh 
=hh 
$numhh 
;hh 
ihh 
<hh 
itemshh  %
.hh% &
Counthh& +
(hh+ ,
)hh, -
;hh- .
ihh/ 0
++hh0 2
)hh2 3
{ii 
polStrjj 
+=jj 
$strjj 
+jj  
itemsjj! &
[jj& '
ijj' (
]jj( )
.jj) *
pointjj* /
.jj/ 0
Xjj0 1
.jj1 2
ToStringjj2 :
(jj: ;
)jj; <
.jj< =
Replacejj= D
(jjD E
$strjjE H
,jjH I
$strjjJ M
)jjM N
+jjO P
$strjjQ T
+jjU V
itemsjjW \
[jj\ ]
ijj] ^
]jj^ _
.jj_ `
pointjj` e
.jje f
Yjjf g
.jjg h
ToStringjjh p
(jjp q
)jjq r
.jjr s
Replacejjs z
(jjz {
$strjj{ ~
,jj~ 
$str
jjÄ É
)
jjÉ Ñ
;
jjÑ Ö
}kk 
polStrmm 
=mm 
$strmm !
+mm" #
polStrmm$ *
.mm* +
	Substringmm+ 4
(mm4 5
$nummm5 6
)mm6 7
+mm8 9
$strmm: >
;mm> ?
returnoo 
GetGeographyFromStroo &
(oo& '
polStroo' -
)oo- .
;oo. /
}qq 	
public{{ 
double{{ 
ComputeHeading{{ $
({{$ %
Point{{% *
p1{{+ -
,{{- .
Point{{/ 4
p2{{5 7
){{7 8
{|| 	
var~~ 
thisx~~ 
=~~ 
	ToRadians~~ !
(~~! "
p1~~" $
.~~$ %
X~~% &
)~~& '
;~~' (
var 
thisy 
= 
	ToRadians !
(! "
p1" $
.$ %
Y% &
)& '
;' (
var
ÄÄ 
pointx
ÄÄ 
=
ÄÄ 
	ToRadians
ÄÄ "
(
ÄÄ" #
p2
ÄÄ# %
.
ÄÄ% &
X
ÄÄ& '
)
ÄÄ' (
;
ÄÄ( )
var
ÅÅ 
pointy
ÅÅ 
=
ÅÅ 
	ToRadians
ÅÅ "
(
ÅÅ" #
p2
ÅÅ# %
.
ÅÅ% &
Y
ÅÅ& '
)
ÅÅ' (
;
ÅÅ( )
var
ÉÉ 
y
ÉÉ 
=
ÉÉ 
Math
ÉÉ 
.
ÉÉ 
Sin
ÉÉ 
(
ÉÉ 
pointy
ÉÉ #
-
ÉÉ$ %
thisy
ÉÉ& +
)
ÉÉ+ ,
*
ÉÉ- .
Math
ÉÉ/ 3
.
ÉÉ3 4
Cos
ÉÉ4 7
(
ÉÉ7 8
pointx
ÉÉ8 >
)
ÉÉ> ?
;
ÉÉ? @
var
ÑÑ 
x
ÑÑ 
=
ÑÑ 
Math
ÑÑ 
.
ÑÑ 
Cos
ÑÑ 
(
ÑÑ 
thisx
ÑÑ "
)
ÑÑ" #
*
ÑÑ$ %
Math
ÑÑ& *
.
ÑÑ* +
Sin
ÑÑ+ .
(
ÑÑ. /
pointx
ÑÑ/ 5
)
ÑÑ5 6
-
ÑÑ7 8
Math
ÖÖ 
.
ÖÖ 
Sin
ÖÖ 
(
ÖÖ 
thisx
ÖÖ 
)
ÖÖ 
*
ÖÖ  !
Math
ÖÖ" &
.
ÖÖ& '
Cos
ÖÖ' *
(
ÖÖ* +
pointx
ÖÖ+ 1
)
ÖÖ1 2
*
ÖÖ3 4
Math
ÖÖ5 9
.
ÖÖ9 :
Cos
ÖÖ: =
(
ÖÖ= >
pointy
ÖÖ> D
-
ÖÖE F
thisy
ÖÖG L
)
ÖÖL M
;
ÖÖM N
var
ÜÜ 
alpha
ÜÜ 
=
ÜÜ 
Math
ÜÜ 
.
ÜÜ 
Atan2
ÜÜ "
(
ÜÜ" #
y
ÜÜ# $
,
ÜÜ$ %
x
ÜÜ& '
)
ÜÜ' (
;
ÜÜ( )
return
àà 
(
àà 
	ToDegrees
àà 
(
àà 
alpha
àà #
)
àà# $
+
àà% &
$num
àà' *
)
àà* +
%
àà, -
$num
àà. 1
;
àà1 2
}
ää 	
public
íí 
double
íí 
ComputeDistance
íí %
(
íí% &
Point
íí& +
p1
íí, .
,
íí. /
Point
íí0 5
p2
íí6 8
)
íí8 9
{
ìì 	
var
ïï 
dLat
ïï 
=
ïï 
	ToRadians
ïï  
(
ïï  !
p2
ïï! #
.
ïï# $
X
ïï$ %
-
ïï& '
p1
ïï( *
.
ïï* +
X
ïï+ ,
)
ïï, -
;
ïï- .
var
ññ 
dLong
ññ 
=
ññ 
	ToRadians
ññ !
(
ññ! "
p2
ññ" $
.
ññ$ %
Y
ññ% &
-
ññ' (
p1
ññ) +
.
ññ+ ,
Y
ññ, -
)
ññ- .
;
ññ. /
var
òò 
a
òò 
=
òò 
Math
òò 
.
òò 
Sin
òò 
(
òò 
dLat
òò !
/
òò" #
$num
òò$ %
)
òò% &
*
òò' (
Math
òò) -
.
òò- .
Sin
òò. 1
(
òò1 2
dLat
òò2 6
/
òò7 8
$num
òò9 :
)
òò: ;
+
òò< =
Math
ôô 
.
ôô 
Cos
ôô 
(
ôô 
	ToRadians
ôô &
(
ôô& '
p1
ôô' )
.
ôô) *
X
ôô* +
)
ôô+ ,
)
ôô, -
*
ôô. /
Math
ôô0 4
.
ôô4 5
Cos
ôô5 8
(
ôô8 9
	ToRadians
ôô9 B
(
ôôB C
p2
ôôC E
.
ôôE F
X
ôôF G
)
ôôG H
)
ôôH I
*
ôôJ K
Math
öö 
.
öö 
Sin
öö 
(
öö 
dLong
öö "
/
öö# $
$num
öö% &
)
öö& '
*
öö( )
Math
öö* .
.
öö. /
Sin
öö/ 2
(
öö2 3
dLong
öö3 8
/
öö9 :
$num
öö; <
)
öö< =
;
öö= >
var
úú 
c
úú 
=
úú 
$num
úú 
*
úú 
Math
úú 
.
úú 
Atan2
úú "
(
úú" #
Math
úú# '
.
úú' (
Sqrt
úú( ,
(
úú, -
a
úú- .
)
úú. /
,
úú/ 0
Math
úú1 5
.
úú5 6
Sqrt
úú6 :
(
úú: ;
$num
úú; <
-
úú= >
a
úú? @
)
úú@ A
)
úúA B
;
úúB C
return
ûû 
R
ûû 
*
ûû 
c
ûû 
;
ûû 
}
†† 	
public
™™ 
Point
™™ 
ComputeOffset
™™ "
(
™™" #
Point
™™# (
p
™™) *
,
™™* +
double
™™, 2
distance
™™3 ;
,
™™; <
double
™™= C
angle
™™D I
,
™™I J
double
™™K Q
radius
™™R X
=
™™Y Z
$num
™™[ b
)
™™b c
{
´´ 	
var
≠≠ 
dist
≠≠ 
=
≠≠ 
distance
≠≠ 
/
≠≠  !
radius
≠≠" (
;
≠≠( )
var
ÆÆ 
ang
ÆÆ 
=
ÆÆ 
	ToRadians
ÆÆ 
(
ÆÆ  
angle
ÆÆ  %
)
ÆÆ% &
;
ÆÆ& '
var
∞∞ 
px
∞∞ 
=
∞∞ 
	ToRadians
∞∞ 
(
∞∞ 
p
∞∞  
.
∞∞  !
X
∞∞! "
)
∞∞" #
;
∞∞# $
var
±± 
py
±± 
=
±± 
	ToRadians
±± 
(
±± 
p
±±  
.
±±  !
Y
±±! "
)
±±" #
;
±±# $
var
≥≥ 
npx
≥≥ 
=
≥≥ 
Math
≥≥ 
.
≥≥ 
Asin
≥≥ 
(
≥≥  
Math
≥≥  $
.
≥≥$ %
Sin
≥≥% (
(
≥≥( )
px
≥≥) +
)
≥≥+ ,
*
≥≥- .
Math
≥≥/ 3
.
≥≥3 4
Cos
≥≥4 7
(
≥≥7 8
dist
≥≥8 <
)
≥≥< =
+
≥≥> ?
Math
≥≥@ D
.
≥≥D E
Cos
≥≥E H
(
≥≥H I
px
≥≥I K
)
≥≥K L
*
≥≥M N
Math
≥≥O S
.
≥≥S T
Sin
≥≥T W
(
≥≥W X
dist
≥≥X \
)
≥≥\ ]
*
≥≥^ _
Math
≥≥` d
.
≥≥d e
Cos
≥≥e h
(
≥≥h i
ang
≥≥i l
)
≥≥l m
)
≥≥m n
;
≥≥n o
var
¥¥ 
npy
¥¥ 
=
¥¥ 
py
¥¥ 
+
¥¥ 
Math
¥¥ 
.
¥¥  
Atan2
¥¥  %
(
¥¥% &
Math
¥¥& *
.
¥¥* +
Sin
¥¥+ .
(
¥¥. /
ang
¥¥/ 2
)
¥¥2 3
*
¥¥4 5
Math
¥¥6 :
.
¥¥: ;
Sin
¥¥; >
(
¥¥> ?
dist
¥¥? C
)
¥¥C D
*
¥¥E F
Math
¥¥G K
.
¥¥K L
Cos
¥¥L O
(
¥¥O P
px
¥¥P R
)
¥¥R S
,
¥¥S T
Math
µµ 
.
µµ 
Cos
µµ 
(
µµ 
dist
µµ !
)
µµ! "
-
µµ# $
Math
µµ% )
.
µµ) *
Sin
µµ* -
(
µµ- .
px
µµ. 0
)
µµ0 1
*
µµ2 3
Math
µµ4 8
.
µµ8 9
Sin
µµ9 <
(
µµ< =
npx
µµ= @
)
µµ@ A
)
µµA B
;
µµB C
npy
∑∑ 
=
∑∑ 
(
∑∑ 
npy
∑∑ 
+
∑∑ 
$num
∑∑ 
*
∑∑ 
Math
∑∑ !
.
∑∑! "
PI
∑∑" $
)
∑∑$ %
%
∑∑& '
(
∑∑( )
$num
∑∑) *
*
∑∑+ ,
Math
∑∑- 1
.
∑∑1 2
PI
∑∑2 4
)
∑∑4 5
-
∑∑6 7
Math
∑∑8 <
.
∑∑< =
PI
∑∑= ?
;
∑∑? @
return
∫∫ 
new
∫∫ 
Point
∫∫ 
{
∫∫ 
X
∫∫  
=
∫∫! "
	ToDegrees
∫∫# ,
(
∫∫, -
npx
∫∫- 0
)
∫∫0 1
,
∫∫1 2
Y
∫∫3 4
=
∫∫5 6
	ToDegrees
∫∫7 @
(
∫∫@ A
npy
∫∫A D
)
∫∫D E
}
∫∫F G
;
∫∫G H
}
ªª 	
public
ƒƒ 
double
ƒƒ 

ComputeKMH
ƒƒ  
(
ƒƒ  !
Point
ƒƒ! &
p1
ƒƒ' )
,
ƒƒ) *
Point
ƒƒ+ 0
p2
ƒƒ1 3
,
ƒƒ3 4
double
ƒƒ5 ;
Minute
ƒƒ< B
)
ƒƒB C
{
≈≈ 	
var
«« 
mesafe
«« 
=
«« 
ComputeDistance
«« (
(
««( )
p1
««) +
,
««+ ,
p2
««- /
)
««/ 0
*
««1 2
$num
««3 8
;
««8 9
var
…… 
saatteKM
…… 
=
…… 
$num
…… 
*
…… 
mesafe
……  &
/
……' (
Minute
……) /
;
……/ 0
return
ÀÀ 
saatteKM
ÀÀ 
;
ÀÀ 
}
ÕÕ 	
public
’’ 
Point
’’  
ComputeMiddlePoint
’’ '
(
’’' (
Point
’’( -
p1
’’. 0
,
’’0 1
Point
’’2 7
p2
’’8 :
)
’’: ;
{
÷÷ 	
var
ÿÿ 
p1x
ÿÿ 
=
ÿÿ 
	ToRadians
ÿÿ 
(
ÿÿ  
p1
ÿÿ  "
.
ÿÿ" #
X
ÿÿ# $
)
ÿÿ$ %
;
ÿÿ% &
var
ŸŸ 
p1y
ŸŸ 
=
ŸŸ 
	ToRadians
ŸŸ 
(
ŸŸ  
p1
ŸŸ  "
.
ŸŸ" #
Y
ŸŸ# $
)
ŸŸ$ %
;
ŸŸ% &
var
⁄⁄ 
p2x
⁄⁄ 
=
⁄⁄ 
	ToRadians
⁄⁄ 
(
⁄⁄  
p2
⁄⁄  "
.
⁄⁄" #
X
⁄⁄# $
)
⁄⁄$ %
;
⁄⁄% &
var
€€ 
p2y
€€ 
=
€€ 
	ToRadians
€€ 
(
€€  
p2
€€  "
.
€€" #
Y
€€# $
)
€€$ %
;
€€% &
var
‹‹ 
p2p1Y
‹‹ 
=
‹‹ 
	ToRadians
‹‹ !
(
‹‹! "
p2
‹‹" $
.
‹‹$ %
Y
‹‹% &
-
‹‹' (
p1
‹‹) +
.
‹‹+ ,
Y
‹‹, -
)
‹‹- .
;
‹‹. /
var
ﬁﬁ 
bx
ﬁﬁ 
=
ﬁﬁ 
Math
ﬁﬁ 
.
ﬁﬁ 
Cos
ﬁﬁ 
(
ﬁﬁ 
p2x
ﬁﬁ !
)
ﬁﬁ! "
*
ﬁﬁ# $
Math
ﬁﬁ% )
.
ﬁﬁ) *
Cos
ﬁﬁ* -
(
ﬁﬁ- .
p2p1Y
ﬁﬁ. 3
)
ﬁﬁ3 4
;
ﬁﬁ4 5
var
ﬂﬂ 
by
ﬂﬂ 
=
ﬂﬂ 
Math
ﬂﬂ 
.
ﬂﬂ 
Cos
ﬂﬂ 
(
ﬂﬂ 
p2x
ﬂﬂ !
)
ﬂﬂ! "
*
ﬂﬂ# $
Math
ﬂﬂ% )
.
ﬂﬂ) *
Sin
ﬂﬂ* -
(
ﬂﬂ- .
p2p1Y
ﬂﬂ. 3
)
ﬂﬂ3 4
;
ﬂﬂ4 5
double
·· 
a3
·· 
=
·· 
Math
·· 
.
·· 
Atan2
·· "
(
··" #
Math
··# '
.
··' (
Sin
··( +
(
··+ ,
p1x
··, /
)
··/ 0
+
··1 2
Math
··3 7
.
··7 8
Sin
··8 ;
(
··; <
p2x
··< ?
)
··? @
,
··@ A
Math
‚‚ 
.
‚‚ 
Sqrt
‚‚ 
(
‚‚ 
(
‚‚ 
Math
‚‚ #
.
‚‚# $
Cos
‚‚$ '
(
‚‚' (
p1x
‚‚( +
)
‚‚+ ,
+
‚‚- .
bx
‚‚/ 1
)
‚‚1 2
*
‚‚3 4
(
‚‚5 6
Math
‚‚6 :
.
‚‚: ;
Cos
‚‚; >
(
‚‚> ?
p1x
‚‚? B
)
‚‚B C
+
‚‚D E
bx
‚‚F H
)
‚‚H I
+
‚‚J K
Math
‚‚L P
.
‚‚P Q
Pow
‚‚Q T
(
‚‚T U
by
‚‚U W
,
‚‚W X
$num
‚‚Y Z
)
‚‚Z [
)
‚‚[ \
)
‚‚\ ]
;
‚‚] ^
double
‰‰ 
t3
‰‰ 
=
‰‰ 
p1y
‰‰ 
+
‰‰ 
Math
‰‰ "
.
‰‰" #
Atan2
‰‰# (
(
‰‰( )
by
‰‰) +
,
‰‰+ ,
Math
‰‰- 1
.
‰‰1 2
Cos
‰‰2 5
(
‰‰5 6
p1x
‰‰6 9
)
‰‰9 :
+
‰‰; <
bx
‰‰= ?
)
‰‰? @
;
‰‰@ A
t3
ÂÂ 
=
ÂÂ 
(
ÂÂ 
t3
ÂÂ 
+
ÂÂ 
$num
ÂÂ 
*
ÂÂ 
Math
ÂÂ 
.
ÂÂ  
PI
ÂÂ  "
)
ÂÂ" #
%
ÂÂ$ %
(
ÂÂ& '
$num
ÂÂ' (
*
ÂÂ) *
Math
ÂÂ+ /
.
ÂÂ/ 0
PI
ÂÂ0 2
)
ÂÂ2 3
-
ÂÂ4 5
Math
ÂÂ6 :
.
ÂÂ: ;
PI
ÂÂ; =
;
ÂÂ= >
return
ÁÁ 
new
ÁÁ 
Point
ÁÁ 
{
ÁÁ 
X
ÁÁ  
=
ÁÁ! "
	ToDegrees
ÁÁ# ,
(
ÁÁ, -
a3
ÁÁ- /
)
ÁÁ/ 0
,
ÁÁ0 1
Y
ÁÁ2 3
=
ÁÁ4 5
	ToDegrees
ÁÁ6 ?
(
ÁÁ? @
t3
ÁÁ@ B
)
ÁÁB C
}
ÁÁD E
;
ÁÁE F
}
ÈÈ 	
public
ÒÒ 
SqlGeography
ÒÒ $
GetGeographyFromPoints
ÒÒ 2
(
ÒÒ2 3
List
ÒÒ3 7
<
ÒÒ7 8
Point
ÒÒ8 =
>
ÒÒ= >
item
ÒÒ? C
,
ÒÒC D
string
ÒÒE K
type
ÒÒL P
)
ÒÒP Q
{
ÚÚ 	
var
ÛÛ 
sqlStr
ÛÛ 
=
ÛÛ 
$str
ÛÛ 
;
ÛÛ 
var
ÙÙ 
sqlPol
ÙÙ 
=
ÙÙ 
new
ÙÙ 
SqlGeography
ÙÙ )
(
ÙÙ) *
)
ÙÙ* +
;
ÙÙ+ ,
var
ıı 
startEndString
ıı 
=
ıı  
new
ıı! $
List
ıı% )
<
ıı) *
string
ıı* 0
>
ıı0 1
(
ıı1 2
)
ıı2 3
;
ıı3 4
if
˜˜ 
(
˜˜ 
(
˜˜ 
type
˜˜ 
!=
˜˜ 
$str
˜˜ "
&&
˜˜# %
type
˜˜& *
!=
˜˜+ -
$str
˜˜. :
)
˜˜: ;
||
˜˜< >
(
¯¯ 
type
¯¯ 
==
¯¯ 
$str
¯¯ "
&&
¯¯# %
item
¯¯& *
.
¯¯* +
Count
¯¯+ 0
(
¯¯0 1
)
¯¯1 2
<
¯¯3 4
$num
¯¯5 6
)
¯¯6 7
||
¯¯8 :
(
˘˘ 
type
˘˘ 
==
˘˘ 
$str
˘˘ %
&&
˘˘& (
item
˘˘) -
.
˘˘- .
Count
˘˘. 3
(
˘˘3 4
)
˘˘4 5
<
˘˘6 7
$num
˘˘8 9
)
˘˘9 :
)
˘˘: ;
{
˙˙ 
return
˚˚ 
null
˚˚ 
;
˚˚ 
}
¸¸ 
if
˛˛ 
(
˛˛ 
type
˛˛ 
==
˛˛ 
$str
˛˛ !
)
˛˛! "
{
˛˛# $
startEndString
˛˛% 3
=
˛˛4 5
new
˛˛6 9
List
˛˛: >
<
˛˛> ?
string
˛˛? E
>
˛˛E F
{
˛˛G H
$str
˛˛I U
,
˛˛U V
$str
˛˛W [
}
˛˛\ ]
;
˛˛] ^
}
˛˛_ `
if
ˇˇ 
(
ˇˇ 
type
ˇˇ 
==
ˇˇ 
$str
ˇˇ $
)
ˇˇ$ %
{
ˇˇ& '
startEndString
ˇˇ( 6
=
ˇˇ7 8
new
ˇˇ9 <
List
ˇˇ= A
<
ˇˇA B
string
ˇˇB H
>
ˇˇH I
{
ˇˇJ K
$str
ˇˇL Z
,
ˇˇZ [
$str
ˇˇ\ _
}
ˇˇ` a
;
ˇˇa b
}
ˇˇc d
foreach
ÅÅ 
(
ÅÅ 
var
ÅÅ 
coord
ÅÅ 
in
ÅÅ !
item
ÅÅ" &
)
ÅÅ& '
{
ÇÇ 
sqlStr
ÉÉ 
+=
ÉÉ 
$str
ÉÉ 
+
ÉÉ  
coord
ÉÉ! &
.
ÉÉ& '
X
ÉÉ' (
.
ÉÉ( )
ToString
ÉÉ) 1
(
ÉÉ1 2
)
ÉÉ2 3
.
ÉÉ3 4
Replace
ÉÉ4 ;
(
ÉÉ; <
$str
ÉÉ< ?
,
ÉÉ? @
$str
ÉÉA D
)
ÉÉD E
+
ÉÉF G
$str
ÉÉH K
+
ÉÉL M
coord
ÉÉN S
.
ÉÉS T
Y
ÉÉT U
.
ÉÉU V
ToString
ÉÉV ^
(
ÉÉ^ _
)
ÉÉ_ `
.
ÉÉ` a
Replace
ÉÉa h
(
ÉÉh i
$str
ÉÉi l
,
ÉÉl m
$str
ÉÉn q
)
ÉÉq r
;
ÉÉr s
}
ÑÑ 
sqlStr
ÜÜ 
=
ÜÜ 
sqlStr
ÜÜ 
.
ÜÜ 
	Substring
ÜÜ %
(
ÜÜ% &
$num
ÜÜ& '
)
ÜÜ' (
;
ÜÜ( )
return
àà !
GetGeographyFromStr
àà &
(
àà& '
startEndString
àà' 5
[
àà5 6
$num
àà6 7
]
àà7 8
+
àà9 :
sqlStr
àà; A
+
ààB C
startEndString
ààD R
[
ààR S
$num
ààS T
]
ààT U
)
ààU V
;
ààV W
}
ââ 	
public
ãã 
SqlGeography
ãã !
GetCheckedGeography
ãã /
(
ãã/ 0
string
ãã0 6
item
ãã7 ;
)
ãã; <
{
åå 	
SqlGeography
éé 
sqlGeog
éé  
=
éé! "
new
éé# &
SqlGeography
éé' 3
(
éé3 4
)
éé4 5
;
éé5 6
try
êê 
{
ëë 
sqlGeog
íí 
=
íí 
SqlGeography
íí &
.
íí& '
STGeomFromText
íí' 5
(
íí5 6
new
íí6 9
System
íí: @
.
íí@ A
Data
ííA E
.
ííE F
SqlTypes
ííF N
.
ííN O
SqlChars
ííO W
(
ííW X
item
ííX \
)
íí\ ]
,
íí] ^
$num
íí_ c
)
ííc d
;
ííd e
}
ìì 
catch
îî 
(
îî 
	Exception
îî 
)
îî 
{
ïï 
return
ññ 
null
ññ 
;
ññ 
}
óó 
if
ôô 
(
ôô 
!
ôô 
sqlGeog
ôô 
.
ôô 
	STIsValid
ôô "
(
ôô" #
)
ôô# $
.
ôô$ %
IsTrue
ôô% +
)
ôô+ ,
{
öö 
return
õõ 
null
õõ 
;
õõ 
}
úú 
if
ûû 
(
ûû 
sqlGeog
ûû 
.
ûû 
EnvelopeAngle
ûû %
(
ûû% &
)
ûû& '
>=
ûû( *
$num
ûû+ -
)
ûû- .
{
üü 
sqlGeog
†† 
=
†† 
sqlGeog
†† !
.
††! "
ReorientObject
††" 0
(
††0 1
)
††1 2
;
††2 3
}
°° 
return
££ 
sqlGeog
££ 
;
££ 
}
•• 	
public
¨¨ 
SqlGeography
¨¨ #
PolygonSortByLongLine
¨¨ 1
(
¨¨1 2
SqlGeography
¨¨2 >
item
¨¨? C
)
¨¨C D
{
≠≠ 	
if
ØØ 
(
ØØ 
item
ØØ 
.
ØØ 
STGeometryType
ØØ #
(
ØØ# $
)
ØØ$ %
!=
ØØ& (
$str
ØØ) 2
)
ØØ2 3
{
ØØ4 5
return
ØØ6 <
null
ØØ= A
;
ØØA B
}
ØØC D
var
±± 
newList
±± 
=
±± 
new
±± 
List
±± "
<
±±" #!
CalculatedPointList
±±# 6
>
±±6 7
(
±±7 8
)
±±8 9
;
±±9 :
var
≤≤ 
	pointList
≤≤ 
=
≤≤ ,
GetCalculatedPointsFromPolygon
≤≤ :
(
≤≤: ;
item
≤≤; ?
)
≤≤? @
.
≤≤@ A
ToList
≤≤A G
(
≤≤G H
)
≤≤H I
;
≤≤I J
var
≥≥ 

firstPoint
≥≥ 
=
≥≥ 
Convert
≥≥ $
.
≥≥$ %
ToInt32
≥≥% ,
(
≥≥, -
	pointList
≥≥- 6
.
≥≥6 7
OrderByDescending
≥≥7 H
(
≥≥H I
a
≥≥I J
=>
≥≥K M
a
≥≥N O
.
≥≥O P
distance
≥≥P X
)
≥≥X Y
.
≥≥Y Z
FirstOrDefault
≥≥Z h
(
≥≥h i
)
≥≥i j
.
≥≥j k

pointIndex
≥≥k u
)
≥≥u v
;
≥≥v w
var
µµ 
list1
µµ 
=
µµ 
	pointList
µµ !
.
µµ! "
Skip
µµ" &
(
µµ& '

firstPoint
µµ' 1
)
µµ1 2
.
µµ2 3
Take
µµ3 7
(
µµ7 8
	pointList
µµ8 A
.
µµA B
Count
µµB G
(
µµG H
)
µµH I
-
µµJ K

firstPoint
µµL V
)
µµV W
.
µµW X
ToList
µµX ^
(
µµ^ _
)
µµ_ `
;
µµ` a
var
∂∂ 
list2
∂∂ 
=
∂∂ 
	pointList
∂∂ !
.
∂∂! "
Take
∂∂" &
(
∂∂& '

firstPoint
∂∂' 1
)
∂∂1 2
;
∂∂2 3
foreach
∏∏ 
(
∏∏ 
var
∏∏ 
lx
∏∏ 
in
∏∏ 
list1
∏∏ $
)
∏∏$ %
{
ππ 
newList
∫∫ 
.
∫∫ 
Add
∫∫ 
(
∫∫ 
lx
∫∫ 
)
∫∫ 
;
∫∫  
}
ªª 
foreach
ºº 
(
ºº 
var
ºº 
lx
ºº 
in
ºº 
list2
ºº $
)
ºº$ %
{
ΩΩ 
newList
ææ 
.
ææ 
Add
ææ 
(
ææ 
lx
ææ 
)
ææ 
;
ææ  
}
øø 
return
¡¡ *
GetPolygonFromCalculatedList
¡¡ /
(
¡¡/ 0
newList
¡¡0 7
)
¡¡7 8
;
¡¡8 9
}
√√ 	
public
   
SqlGeography
   !
GetGeographyFromStr
   /
(
  / 0
string
  0 6
item
  7 ;
)
  ; <
{
ÀÀ 	
if
ÕÕ 
(
ÕÕ 
String
ÕÕ 
.
ÕÕ 
IsNullOrEmpty
ÕÕ $
(
ÕÕ$ %
item
ÕÕ% )
)
ÕÕ) *
)
ÕÕ* +
{
ÕÕ, -
return
ÕÕ. 4
null
ÕÕ5 9
;
ÕÕ9 :
}
ÕÕ; <
item
œœ 
=
œœ '
GetCheckedGeographyString
œœ ,
(
œœ, -
item
œœ- 1
)
œœ1 2
;
œœ2 3
return
—— !
GetCheckedGeography
—— &
(
——& '
item
——' +
)
——+ ,
;
——, -
}
”” 	
public
⁄⁄ 
List
⁄⁄ 
<
⁄⁄ 
Point
⁄⁄ 
>
⁄⁄ 
GetBoundingBox
⁄⁄ )
(
⁄⁄) *
SqlGeography
⁄⁄* 6
item
⁄⁄7 ;
)
⁄⁄; <
{
€€ 	
if
›› 
(
›› 
item
›› 
.
›› 
IsNull
›› 
||
›› 
item
›› #
.
››# $
	STIsValid
››$ -
(
››- .
)
››. /
.
››/ 0
IsFalse
››0 7
||
››8 :
item
››; ?
.
››? @
STGeometryType
››@ N
(
››N O
)
››O P
!=
››Q S
$str
››T ]
)
››] ^
{
ﬁﬁ 
return
ﬂﬂ 
null
ﬂﬂ 
;
ﬂﬂ 
}
‡‡ 
if
‚‚ 
(
‚‚ 
item
‚‚ 
.
‚‚ 
EnvelopeAngle
‚‚ "
(
‚‚" #
)
‚‚# $
>=
‚‚% '
$num
‚‚( *
)
‚‚* +
{
‚‚, -
item
‚‚. 2
=
‚‚3 4
item
‚‚5 9
.
‚‚9 :
ReorientObject
‚‚: H
(
‚‚H I
)
‚‚I J
;
‚‚J K
}
‚‚L M
var
‰‰ 
list
‰‰ 
=
‰‰ 
new
‰‰ 
List
‰‰ 
<
‰‰  !
CalculatedPointList
‰‰  3
>
‰‰3 4
(
‰‰4 5
)
‰‰5 6
;
‰‰6 7
for
ÊÊ 
(
ÊÊ 
int
ÊÊ 
i
ÊÊ 
=
ÊÊ 
$num
ÊÊ 
;
ÊÊ 
i
ÊÊ 
<
ÊÊ 
item
ÊÊ  $
.
ÊÊ$ %
STNumPoints
ÊÊ% 0
(
ÊÊ0 1
)
ÊÊ1 2
;
ÊÊ2 3
i
ÊÊ4 5
++
ÊÊ5 7
)
ÊÊ7 8
{
ÁÁ 
list
ËË 
.
ËË 
Add
ËË 
(
ËË 
new
ËË !
CalculatedPointList
ËË 0
{
ÈÈ 

pointIndex
ÍÍ 
=
ÍÍ  
i
ÍÍ! "
-
ÍÍ# $
$num
ÍÍ% &
,
ÍÍ& '
point
ÎÎ 
=
ÎÎ (
GetPointFromGeographyPoint
ÎÎ 6
(
ÎÎ6 7
item
ÎÎ7 ;
.
ÎÎ; <
STPointN
ÎÎ< D
(
ÎÎD E
i
ÎÎE F
)
ÎÎF G
)
ÎÎG H
}
ÏÏ 
)
ÏÏ 
;
ÏÏ 
}
ÓÓ 
var
 
res
 
=
 
new
 
List
 
<
 
Point
 $
>
$ %
(
% &
)
& '
;
' (
res
ÚÚ 
.
ÚÚ 
Add
ÚÚ 
(
ÚÚ 
new
ÚÚ 
Point
ÚÚ 
{
ÚÚ 
X
ÚÚ  !
=
ÚÚ" #
list
ÚÚ$ (
.
ÚÚ( )
Min
ÚÚ) ,
(
ÚÚ, -
a
ÚÚ- .
=>
ÚÚ/ 1
a
ÚÚ2 3
.
ÚÚ3 4
point
ÚÚ4 9
.
ÚÚ9 :
X
ÚÚ: ;
)
ÚÚ; <
,
ÚÚ< =
Y
ÚÚ> ?
=
ÚÚ@ A
list
ÚÚB F
.
ÚÚF G
Max
ÚÚG J
(
ÚÚJ K
a
ÚÚK L
=>
ÚÚM O
a
ÚÚP Q
.
ÚÚQ R
point
ÚÚR W
.
ÚÚW X
Y
ÚÚX Y
)
ÚÚY Z
}
ÚÚ[ \
)
ÚÚ\ ]
;
ÚÚ] ^
res
ÛÛ 
.
ÛÛ 
Add
ÛÛ 
(
ÛÛ 
new
ÛÛ 
Point
ÛÛ 
{
ÛÛ 
X
ÛÛ  !
=
ÛÛ" #
list
ÛÛ$ (
.
ÛÛ( )
Max
ÛÛ) ,
(
ÛÛ, -
a
ÛÛ- .
=>
ÛÛ/ 1
a
ÛÛ2 3
.
ÛÛ3 4
point
ÛÛ4 9
.
ÛÛ9 :
X
ÛÛ: ;
)
ÛÛ; <
,
ÛÛ< =
Y
ÛÛ> ?
=
ÛÛ@ A
list
ÛÛB F
.
ÛÛF G
Max
ÛÛG J
(
ÛÛJ K
a
ÛÛK L
=>
ÛÛM O
a
ÛÛP Q
.
ÛÛQ R
point
ÛÛR W
.
ÛÛW X
Y
ÛÛX Y
)
ÛÛY Z
}
ÛÛ[ \
)
ÛÛ\ ]
;
ÛÛ] ^
res
ÙÙ 
.
ÙÙ 
Add
ÙÙ 
(
ÙÙ 
new
ÙÙ 
Point
ÙÙ 
{
ÙÙ 
X
ÙÙ  !
=
ÙÙ" #
list
ÙÙ$ (
.
ÙÙ( )
Max
ÙÙ) ,
(
ÙÙ, -
a
ÙÙ- .
=>
ÙÙ/ 1
a
ÙÙ2 3
.
ÙÙ3 4
point
ÙÙ4 9
.
ÙÙ9 :
X
ÙÙ: ;
)
ÙÙ; <
,
ÙÙ< =
Y
ÙÙ> ?
=
ÙÙ@ A
list
ÙÙB F
.
ÙÙF G
Min
ÙÙG J
(
ÙÙJ K
a
ÙÙK L
=>
ÙÙM O
a
ÙÙP Q
.
ÙÙQ R
point
ÙÙR W
.
ÙÙW X
Y
ÙÙX Y
)
ÙÙY Z
}
ÙÙ[ \
)
ÙÙ\ ]
;
ÙÙ] ^
res
ıı 
.
ıı 
Add
ıı 
(
ıı 
new
ıı 
Point
ıı 
{
ıı 
X
ıı  !
=
ıı" #
list
ıı$ (
.
ıı( )
Min
ıı) ,
(
ıı, -
a
ıı- .
=>
ıı/ 1
a
ıı2 3
.
ıı3 4
point
ıı4 9
.
ıı9 :
X
ıı: ;
)
ıı; <
,
ıı< =
Y
ıı> ?
=
ıı@ A
list
ııB F
.
ııF G
Min
ııG J
(
ııJ K
a
ııK L
=>
ııM O
a
ııP Q
.
ııQ R
point
ııR W
.
ııW X
Y
ııX Y
)
ııY Z
}
ıı[ \
)
ıı\ ]
;
ıı] ^
return
˜˜ 
res
˜˜ 
;
˜˜ 
}
˘˘ 	
}
˙˙ 
}˚˚ ˙Â
uD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\Json.cs
	namespace 	
Infoline
 
. 
Helper 
{ 
public 

static 
class 
Json 
{ 
public 
static 
string 
	Serialize &
<& '
T' (
>( )
() *
T* +
instance, 4
,4 5
params6 <
JsonConverter= J
[J K
]K L
convsM R
)R S
{ 	
JsonConverter 
[ 
] 

converters &
=' (
new) ,
JsonConverter- :
[: ;
]; <
{ 
new *
FeatureCollectionJsonConverter 2
(2 3
)3 4
,4 5
new  
FeatureJsonConverter (
(( )
)) *
,* +
new !
GeometryJsonConverter )
() *
)* +
,+ ,
new !
EnvelopeJsonConverter )
() *
)* +
,+ ,
new "
ConditionJsonConverter *
(* +
)+ ,
,, -
} 
; 

converters 
= 

converters #
.# $
Union$ )
() *
convs* /
)/ 0
.0 1
Reverse1 8
(8 9
)9 :
.: ;
ToArray; B
(B C
)C D
;D E
return!! 
JsonConvert!! 
.!! 
SerializeObject!! .
(!!. /
instance!!/ 7
,!!7 8

converters!!9 C
)!!C D
;!!D E
}"" 	
public$$ 
static$$ 
object$$ 
DeserializeObject$$ .
($$. /
string$$/ 5
value$$6 ;
,$$; <
Type$$= A
type$$B F
,$$F G
params$$H N
JsonConverter$$O \
[$$\ ]
]$$] ^
convs$$_ d
)$$d e
{%% 	
JsonConverter'' 
['' 
]'' 

converters'' &
=''' (
new'') ,
JsonConverter''- :
['': ;
]''; <
{(( 
new)) *
FeatureCollectionJsonConverter)) 2
())2 3
)))3 4
,))4 5
new**  
FeatureJsonConverter** (
(**( )
)**) *
,*** +
new++ !
GeometryJsonConverter++ )
(++) *
)++* +
,+++ ,
new,, !
EnvelopeJsonConverter,, )
(,,) *
),,* +
,,,+ ,
new-- "
ConditionJsonConverter-- *
(--* +
)--+ ,
,--, -
}.. 
;.. 

converters00 
=00 

converters00 #
.00# $
Union00$ )
(00) *
convs00* /
)00/ 0
.000 1
Reverse001 8
(008 9
)009 :
.00: ;
ToArray00; B
(00B C
)00C D
;00D E
return22 
JsonConvert22 
.22 
DeserializeObject22 0
(220 1
value221 6
,226 7
type228 <
,22< =

converters22> H
)22H I
;22I J
}33 	
public55 
static55 
void55 
Populate55 #
(55# $
string55$ *
str55+ .
,55. /
object550 6
obj557 :
)55: ;
{66 	

Newtonsoft77 
.77 
Json77 
.77 
JsonConvert77 '
.77' (
PopulateObject77( 6
(776 7
str777 :
,77: ;
obj77< ?
)77? @
;77@ A
}88 	
public:: 
static:: 
T:: 
Deserialize:: #
<::# $
T::$ %
>::% &
(::& '
string::' -

serialized::. 8
,::8 9
params::: @
JsonConverter::A N
[::N O
]::O P
convs::Q V
)::V W
{;; 	
return<< 
(<< 
T<< 
)<< 
DeserializeObject<< '
(<<' (

serialized<<( 2
,<<2 3
typeof<<4 :
(<<: ;
T<<; <
)<<< =
,<<= >
convs<<? D
)<<D E
;<<E F
}== 	
public?? 
static?? 
T?? 
Deserialize2?? $
<??$ %
T??% &
>??& '
(??' (
string??( .

serialized??/ 9
)??9 :
{@@ 	
usingAA 
(AA 
varAA 
msAA 
=AA 
newAA 
MemoryStreamAA  ,
(AA, -
)AA- .
)AA. /
{BB 
usingCC 
(CC 
varCC 
writerCC !
=CC" #
newCC$ '
StreamWriterCC( 4
(CC4 5
msCC5 7
)CC7 8
)CC8 9
{DD 
writerEE 
.EE 
WriteEE  
(EE  !

serializedEE! +
)EE+ ,
;EE, -
writerFF 
.FF 
FlushFF  
(FF  !
)FF! "
;FF" #
msHH 
.HH 
PositionHH 
=HH  !
$numHH" #
;HH# $
XmlSerializerJJ !
deserializerJJ" .
=JJ/ 0
newJJ1 4
XmlSerializerJJ5 B
(JJB C
typeofJJC I
(JJI J
TJJJ K
)JJK L
)JJL M
;JJM N
returnKK 
(KK 
TKK 
)KK 
deserializerKK *
.KK* +
DeserializeKK+ 6
(KK6 7
msKK7 9
)KK9 :
;KK: ;
}LL 
}NN 
}OO 	
publicQQ 
staticQQ 
objectQQ 
DeserializeQQ (
<QQ( )
TQQ) *
>QQ* +
(QQ+ ,
objectQQ, 2
modelQQ3 8
)QQ8 9
{RR 	
throwSS 
newSS #
NotImplementedExceptionSS -
(SS- .
)SS. /
;SS/ 0
}TT 	
}UU 
public[[ 

class[[ "
ConditionJsonConverter[[ '
:[[( )

Newtonsoft[[* 4
.[[4 5
Json[[5 9
.[[9 :
JsonConverter[[: G
{\\ 
public]] 
override]] 
bool]] 

CanConvert]] '
(]]' (
Type]]( ,

objectType]]- 7
)]]7 8
{^^ 	
return__ 
typeof__ 
(__ 
	Condition__ #
)__# $
.__$ %
IsAssignableFrom__% 5
(__5 6

objectType__6 @
)__@ A
;__A B
}`` 	
privatecc 
BEXPcc 
Castingcc 
(cc 
dynamiccc $
datacc% )
)cc) *
{dd 	
ifee 
(ee 
dataee 
==ee 
nullee 
)ee 
returnee $
nullee% )
;ee) *
varff 
operatorTextff 
=ff 
(ff  
dataff  $
[ff$ %
$strff% /
]ff/ 0
??ff1 3
dataff4 8
[ff8 9
$strff9 C
]ffC D
)ffD E
.ffE F
ToStringffF N
(ffN O
)ffO P
;ffP Q
BinaryOperatorgg 
	operatormgg $
;gg$ %
varhh 
isParsehh 
=hh 
Enumhh 
.hh 
TryParsehh '
<hh' (
BinaryOperatorhh( 6
>hh6 7
(hh7 8
operatorTexthh8 D
,hhD E
outhhF I
	operatormhhJ S
)hhS T
;hhT U
ifii 
(ii 
!ii 
isParseii 
)ii 
returnii  
nullii! %
;ii% &
ifkk 
(kk 
	operatormkk 
==kk 
BinaryOperatorkk +
.kk+ ,
Andkk, /
||kk0 2
	operatormkk3 <
==kk= ?
BinaryOperatorkk@ N
.kkN O
OrkkO Q
)kkQ R
{ll 
returnmm 
newmm 
BEXPmm 
{nn 
Operand1oo 
=oo 
Castingoo &
(oo& '
dataoo' +
.oo+ ,
Operand1oo, 4
??oo5 7
dataoo8 <
.oo< =
operand1oo= E
)ooE F
,ooF G
Operatorpp 
=pp 
	operatormpp (
,pp( )
Operand2qq 
=qq 
Castingqq &
(qq& '
dataqq' +
.qq+ ,
Operand2qq, 4
??qq5 7
dataqq8 <
.qq< =
operand2qq= E
)qqE F
}rr 
;rr 
}ss 
elsett 
{uu 
varvv 
operand2vv 
=vv 
(vv  
datavv  $
.vv$ %
Operand2vv% -
??vv. 0
datavv1 5
.vv5 6
operand2vv6 >
)vv> ?
;vv? @
ifww 
(ww 
operand2ww 
.ww 
Typeww !
==ww" $

Newtonsoftww% /
.ww/ 0
Jsonww0 4
.ww4 5
Linqww5 9
.ww9 :

JTokenTypeww: D
.wwD E
ArraywwE J
)wwJ K
{xx 
varyy 
arryy 
=yy 
(yy 
stringyy %
[yy% &
]yy& '
)yy' (
Jsonyy( ,
.yy, -
Deserializeyy- 8
<yy8 9
stringyy9 ?
[yy? @
]yy@ A
>yyA B
(yyB C
operand2yyC K
.yyK L
ToStringyyL T
(yyT U
)yyU V
)yyV W
;yyW X
returnzz 
newzz 
BEXPzz #
{{{ 
Operand1||  
=||! "
new||# &
COL||' *
(||* +
(||+ ,
data||, 0
.||0 1
Operand1||1 9
??||: <
data||= A
.||A B
operand1||B J
)||J K
.||K L
ToString||L T
(||T U
)||U V
)||V W
,||W X
Operator}}  
=}}! "
	operatorm}}# ,
,}}, -
Operand2~~  
=~~! "
new~~# &
ARR~~' *
{~~+ ,
Values~~- 3
=~~4 5
arr~~6 9
.~~9 :
Select~~: @
(~~@ A
a~~A B
=>~~C E
(~~F G
VAL~~G J
)~~J K
a~~K L
)~~L M
.~~M N
ToArray~~N U
(~~U V
)~~V W
}~~X Y
} 
; 
}
ÄÄ 
else
ÅÅ 
{
ÇÇ 
return
ÉÉ 
new
ÉÉ 
BEXP
ÉÉ #
{
ÑÑ 
Operand1
ÖÖ  
=
ÖÖ! "
new
ÖÖ# &
COL
ÖÖ' *
(
ÖÖ* +
(
ÖÖ+ ,
data
ÖÖ, 0
.
ÖÖ0 1
Operand1
ÖÖ1 9
??
ÖÖ: <
data
ÖÖ= A
.
ÖÖA B
operand1
ÖÖB J
)
ÖÖJ K
.
ÖÖK L
ToString
ÖÖL T
(
ÖÖT U
)
ÖÖU V
)
ÖÖV W
,
ÖÖW X
Operator
ÜÜ  
=
ÜÜ! "
	operatorm
ÜÜ# ,
,
ÜÜ, -
Operand2
áá  
=
áá! "
new
áá# &
VAL
áá' *
(
áá* +
(
áá+ ,
operand2
áá, 4
)
áá4 5
.
áá5 6
ToString
áá6 >
(
áá> ?
)
áá? @
)
áá@ A
}
àà 
;
àà 
}
ää 
}
ãã 
}
åå 	
public
íí 
override
íí 
object
íí 
ReadJson
íí '
(
íí' (

JsonReader
íí( 2
reader
íí3 9
,
íí9 :
Type
íí; ?

objectType
íí@ J
,
ííJ K
object
ííL R
existingValue
ííS `
,
íí` a
JsonSerializer
ííb p

serializer
ííq {
)
íí{ |
{
ìì 	
	Condition
îî 
	condition
îî 
=
îî  !
new
îî" %
ConditionEx
îî& 1
(
îî1 2
)
îî2 3
;
îî3 4
while
ïï 
(
ïï 
reader
ïï 
.
ïï 
Read
ïï 
(
ïï 
)
ïï  
)
ïï  !
{
ññ 
if
óó 
(
óó 
reader
óó 
.
óó 
	TokenType
óó $
==
óó% '
	JsonToken
óó( 1
.
óó1 2
PropertyName
óó2 >
)
óó> ?
{
òò 
var
ôô 
property
ôô  
=
ôô! "
reader
ôô# )
.
ôô) *
Value
ôô* /
.
ôô/ 0
ToString
ôô0 8
(
ôô8 9
)
ôô9 :
.
ôô: ;
ToLower
ôô; B
(
ôôB C
)
ôôC D
;
ôôD E
reader
öö 
.
öö 
Read
öö 
(
öö  
)
öö  !
;
öö! "
if
õõ 
(
õõ 
property
õõ  
.
õõ  !
EndsWith
õõ! )
(
õõ) *
$str
õõ* 2
)
õõ2 3
)
õõ3 4
{
úú 
if
ûû 
(
ûû 
reader
ûû "
.
ûû" #
	TokenType
ûû# ,
==
ûû- /
	JsonToken
ûû0 9
.
ûû9 :
StartObject
ûû: E
)
ûûE F
{
üü 
var
†† 
filter
††  &
=
††' (

serializer
††) 3
.
††3 4
Deserialize
††4 ?
(
††? @
reader
††@ F
)
††F G
;
††G H
	condition
°° %
=
°°& '
new
°°( +
ConditionNew
°°, 8
{
¢¢ 

StartIndex
££  *
=
££+ ,
	condition
££- 6
.
££6 7

StartIndex
££7 A
,
££A B
Count
§§  %
=
§§& '
	condition
§§( 1
.
§§1 2
Count
§§2 7
,
§§7 8
Sort
••  $
=
••% &
	condition
••' 0
.
••0 1
Sort
••1 5
,
••5 6
Fields
¶¶  &
=
¶¶' (
	condition
¶¶) 2
.
¶¶2 3
Fields
¶¶3 9
,
¶¶9 :
Filter
ßß  &
=
ßß' (
Casting
ßß) 0
(
ßß0 1
filter
ßß1 7
)
ßß7 8
}
®® 
;
®® 
}
©© 
else
™™ 
if
™™ 
(
™™  !
reader
™™! '
.
™™' (
	TokenType
™™( 1
==
™™2 4
	JsonToken
™™5 >
.
™™> ?

StartArray
™™? I
)
™™I J
{
´´ 
(
¨¨ 
(
¨¨ 
ConditionEx
¨¨ )
)
¨¨) *
	condition
¨¨* 3
)
¨¨3 4
.
¨¨4 5
Filter
¨¨5 ;
=
¨¨< =

serializer
¨¨> H
.
¨¨H I
Deserialize
¨¨I T
<
¨¨T U
QueryCondition
¨¨U c
[
¨¨c d
]
¨¨d e
>
¨¨e f
(
¨¨f g
reader
¨¨g m
)
¨¨m n
;
¨¨n o
}
≠≠ 
else
ÆÆ 
{
ØØ 
(
∞∞ 
(
∞∞ 
ConditionEx
∞∞ )
)
∞∞) *
	condition
∞∞* 3
)
∞∞3 4
.
∞∞4 5
Filter
∞∞5 ;
=
∞∞< =
null
∞∞> B
;
∞∞B C
}
±± 
}
≥≥ 
else
¥¥ 
if
¥¥ 
(
¥¥ 
property
¥¥ %
.
¥¥% &
EndsWith
¥¥& .
(
¥¥. /
$str
¥¥/ 5
)
¥¥5 6
)
¥¥6 7
{
µµ 
	condition
∂∂ !
.
∂∂! "
Sort
∂∂" &
=
∂∂' (

serializer
∂∂) 3
.
∂∂3 4
Deserialize
∂∂4 ?
<
∂∂? @
	QuerySort
∂∂@ I
>
∂∂I J
(
∂∂J K
reader
∂∂K Q
)
∂∂Q R
;
∂∂R S
}
∑∑ 
else
∏∏ 
if
∏∏ 
(
∏∏ 
property
∏∏ %
.
∏∏% &
EndsWith
∏∏& .
(
∏∏. /
$str
∏∏/ 5
)
∏∏5 6
)
∏∏6 7
{
ππ 
	condition
∫∫ !
.
∫∫! "

StartIndex
∫∫" ,
=
∫∫- .

serializer
∫∫/ 9
.
∫∫9 :
Deserialize
∫∫: E
<
∫∫E F
int
∫∫F I
?
∫∫I J
>
∫∫J K
(
∫∫K L
reader
∫∫L R
)
∫∫R S
;
∫∫S T
}
ªª 
else
ºº 
if
ºº 
(
ºº 
property
ºº %
.
ºº% &
EndsWith
ºº& .
(
ºº. /
$str
ºº/ 6
)
ºº6 7
)
ºº7 8
{
ΩΩ 
	condition
ææ !
.
ææ! "
Count
ææ" '
=
ææ( )

serializer
ææ* 4
.
ææ4 5
Deserialize
ææ5 @
<
ææ@ A
int
ææA D
?
ææD E
>
ææE F
(
ææF G
reader
ææG M
)
ææM N
;
ææN O
}
øø 
else
¿¿ 
if
¿¿ 
(
¿¿ 
property
¿¿ %
.
¿¿% &
EndsWith
¿¿& .
(
¿¿. /
$str
¿¿/ 7
)
¿¿7 8
)
¿¿8 9
{
¡¡ 
	condition
¬¬ !
.
¬¬! "
Fields
¬¬" (
=
¬¬) *

serializer
¬¬+ 5
.
¬¬5 6
Deserialize
¬¬6 A
<
¬¬A B
string
¬¬B H
[
¬¬H I
]
¬¬I J
>
¬¬J K
(
¬¬K L
reader
¬¬L R
)
¬¬R S
;
¬¬S T
}
√√ 
else
ƒƒ 
{
≈≈ 
}
«« 
}
»» 
else
…… 
if
…… 
(
…… 
reader
…… 
.
……  
	TokenType
……  )
==
……* ,
	JsonToken
……- 6
.
……6 7
	EndObject
……7 @
)
……@ A
break
   
;
   
}
ÀÀ 
return
ÕÕ 
	condition
ÕÕ 
;
ÕÕ 
}
ŒŒ 	
public
““ 
override
““ 
void
““ 
	WriteJson
““ &
(
““& '

JsonWriter
““' 1
writer
““2 8
,
““8 9
object
““: @
value
““A F
,
““F G
JsonSerializer
““H V

serializer
““W a
)
““a b
{
”” 	
}
’’ 	
}
÷÷ 
public
ŸŸ 

class
ŸŸ &
JsonSqlGeometryConverter
ŸŸ )
:
ŸŸ* +

Newtonsoft
ŸŸ, 6
.
ŸŸ6 7
Json
ŸŸ7 ;
.
ŸŸ; <
JsonConverter
ŸŸ< I
{
⁄⁄ 
public
€€ 
override
€€ 
bool
€€ 

CanConvert
€€ '
(
€€' (
Type
€€( ,

objectType
€€- 7
)
€€7 8
{
‹‹ 	
return
›› 
typeof
›› 
(
›› 
SqlGeography
›› &
)
››& '
.
››' (
IsAssignableFrom
››( 8
(
››8 9

objectType
››9 C
)
››C D
;
››D E
}
ﬁﬁ 	
public
‡‡ 
override
‡‡ 
object
‡‡ 
ReadJson
‡‡ '
(
‡‡' (

JsonReader
‡‡( 2
reader
‡‡3 9
,
‡‡9 :
Type
‡‡; ?

objectType
‡‡@ J
,
‡‡J K
object
‡‡L R
existingValue
‡‡S `
,
‡‡` a
JsonSerializer
‡‡b p

serializer
‡‡q {
)
‡‡{ |
{
·· 	
if
‚‚ 
(
‚‚ 
reader
‚‚ 
.
‚‚ 
Value
‚‚ 
==
‚‚ 
null
‚‚  $
)
‚‚$ %
return
‚‚& ,
null
‚‚- 1
;
‚‚1 2
var
„„ 
result
„„ 
=
„„ 
SqlGeography
„„ %
.
„„% &
Parse
„„& +
(
„„+ ,
reader
„„, 2
.
„„2 3
Value
„„3 8
.
„„8 9
ToString
„„9 A
(
„„A B
)
„„B C
)
„„C D
;
„„D E
return
‰‰ 
result
‰‰ 
;
‰‰ 
}
ÂÂ 	
public
ÁÁ 
override
ÁÁ 
void
ÁÁ 
	WriteJson
ÁÁ &
(
ÁÁ& '

JsonWriter
ÁÁ' 1
writer
ÁÁ2 8
,
ÁÁ8 9
object
ÁÁ: @
value
ÁÁA F
,
ÁÁF G
JsonSerializer
ÁÁH V

serializer
ÁÁW a
)
ÁÁa b
{
ËË 	
if
ÈÈ 
(
ÈÈ 
value
ÈÈ 
!=
ÈÈ 
null
ÈÈ 
)
ÈÈ 

serializer
ÍÍ 
.
ÍÍ 
	Serialize
ÍÍ $
(
ÍÍ$ %
writer
ÍÍ% +
,
ÍÍ+ ,
value
ÍÍ- 2
.
ÍÍ2 3
ToString
ÍÍ3 ;
(
ÍÍ; <
)
ÍÍ< =
)
ÍÍ= >
;
ÍÍ> ?
else
ÎÎ 

serializer
ÎÎ 
.
ÎÎ 
	Serialize
ÎÎ %
(
ÎÎ% &
writer
ÎÎ& ,
,
ÎÎ, -
value
ÎÎ. 3
)
ÎÎ3 4
;
ÎÎ4 5
}
ÏÏ 	
}
ÌÌ 
public
ÔÔ 

class
ÔÔ #
EnvelopeJsonConverter
ÔÔ &
:
ÔÔ' (

Newtonsoft
ÔÔ) 3
.
ÔÔ3 4
Json
ÔÔ4 8
.
ÔÔ8 9
JsonConverter
ÔÔ9 F
{
 
public
ÒÒ 
override
ÒÒ 
bool
ÒÒ 

CanConvert
ÒÒ '
(
ÒÒ' (
Type
ÒÒ( ,

objectType
ÒÒ- 7
)
ÒÒ7 8
{
ÚÚ 	
return
ÛÛ 
typeof
ÛÛ 
(
ÛÛ 
Envelope
ÛÛ "
)
ÛÛ" #
.
ÛÛ# $
IsAssignableFrom
ÛÛ$ 4
(
ÛÛ4 5

objectType
ÛÛ5 ?
)
ÛÛ? @
;
ÛÛ@ A
}
ÙÙ 	
public
ˆˆ 
override
ˆˆ 
object
ˆˆ 
ReadJson
ˆˆ '
(
ˆˆ' (

JsonReader
ˆˆ( 2
reader
ˆˆ3 9
,
ˆˆ9 :
Type
ˆˆ; ?

objectType
ˆˆ@ J
,
ˆˆJ K
object
ˆˆL R
existingValue
ˆˆS `
,
ˆˆ` a
JsonSerializer
ˆˆb p

serializer
ˆˆq {
)
ˆˆ{ |
{
˜˜ 	
if
¯¯ 
(
¯¯ 
reader
¯¯ 
.
¯¯ 
Value
¯¯ 
==
¯¯ 
null
¯¯  $
)
¯¯$ %
return
¯¯& ,
null
¯¯- 1
;
¯¯1 2
var
˘˘ 
	wktReader
˘˘ 
=
˘˘ 
new
˘˘ 
	WKTReader
˘˘  )
(
˘˘) *
)
˘˘* +
;
˘˘+ ,
var
˙˙ 
result
˙˙ 
=
˙˙ 
	wktReader
˙˙ "
.
˙˙" #
Read
˙˙# '
(
˙˙' (
reader
˙˙( .
.
˙˙. /
Value
˙˙/ 4
.
˙˙4 5
ToString
˙˙5 =
(
˙˙= >
)
˙˙> ?
)
˙˙? @
.
˙˙@ A
EnvelopeInternal
˙˙A Q
;
˙˙Q R
return
˚˚ 
result
˚˚ 
;
˚˚ 
}
¸¸ 	
public
˛˛ 
override
˛˛ 
void
˛˛ 
	WriteJson
˛˛ &
(
˛˛& '

JsonWriter
˛˛' 1
writer
˛˛2 8
,
˛˛8 9
object
˛˛: @
value
˛˛A F
,
˛˛F G
JsonSerializer
˛˛H V

serializer
˛˛W a
)
˛˛a b
{
ˇˇ 	
if
ÄÄ 
(
ÄÄ 
value
ÄÄ 
!=
ÄÄ 
null
ÄÄ 
)
ÄÄ 

serializer
ÅÅ 
.
ÅÅ 
	Serialize
ÅÅ $
(
ÅÅ$ %
writer
ÅÅ% +
,
ÅÅ+ ,
GetGeometry
ÅÅ- 8
(
ÅÅ8 9
(
ÅÅ9 :
Envelope
ÅÅ: B
)
ÅÅB C
value
ÅÅC H
)
ÅÅH I
.
ÅÅI J
AsText
ÅÅJ P
(
ÅÅP Q
)
ÅÅQ R
)
ÅÅR S
;
ÅÅS T
else
ÇÇ 

serializer
ÇÇ 
.
ÇÇ 
	Serialize
ÇÇ %
(
ÇÇ% &
writer
ÇÇ& ,
,
ÇÇ, -
value
ÇÇ. 3
)
ÇÇ3 4
;
ÇÇ4 5
}
ÉÉ 	
public
ÖÖ 
static
ÖÖ 
	IGeometry
ÖÖ 
GetGeometry
ÖÖ  +
(
ÖÖ+ ,
Envelope
ÖÖ, 4
env
ÖÖ5 8
)
ÖÖ8 9
{
ÜÜ 	
IGeometryFactory
áá 
factory
áá $
=
áá% &
NetTopologySuite
áá' 7
.
áá7 8!
NtsGeometryServices
áá8 K
.
ááK L
Instance
ááL T
.
ááT U#
CreateGeometryFactory
ááU j
(
ááj k
)
áák l
;
áál m
return
àà 
factory
àà 
.
àà 
CreatePolygon
àà (
(
àà( )
new
àà) ,

Coordinate
àà- 7
[
àà7 8
]
àà8 9
{
ââ 
new
ää 

Coordinate
ää 
{
ää  
X
ää! "
=
ää# $
env
ää% (
.
ää( )
MinX
ää) -
,
ää- .
Y
ää/ 0
=
ää1 2
env
ää3 6
.
ää6 7
MaxY
ää7 ;
}
ää< =
,
ää= >
new
ãã 

Coordinate
ãã 
{
ãã  
X
ãã! "
=
ãã# $
env
ãã% (
.
ãã( )
MinX
ãã) -
,
ãã- .
Y
ãã/ 0
=
ãã1 2
env
ãã3 6
.
ãã6 7
MinY
ãã7 ;
}
ãã< =
,
ãã= >
new
åå 

Coordinate
åå 
{
åå  
X
åå! "
=
åå# $
env
åå% (
.
åå( )
MaxX
åå) -
,
åå- .
Y
åå/ 0
=
åå1 2
env
åå3 6
.
åå6 7
MinY
åå7 ;
}
åå< =
,
åå= >
new
çç 

Coordinate
çç 
{
çç  
X
çç! "
=
çç# $
env
çç% (
.
çç( )
MaxX
çç) -
,
çç- .
Y
çç/ 0
=
çç1 2
env
çç3 6
.
çç6 7
MaxY
çç7 ;
}
çç< =
,
çç= >
new
éé 

Coordinate
éé 
{
éé  
X
éé! "
=
éé# $
env
éé% (
.
éé( )
MinX
éé) -
,
éé- .
Y
éé/ 0
=
éé1 2
env
éé3 6
.
éé6 7
MaxY
éé7 ;
}
éé< =
,
éé= >
}
èè 
)
èè 
;
èè 
}
êê 	
}
ëë 
public
ìì 

class
ìì #
GeometryJsonConverter
ìì &
:
ìì' (

Newtonsoft
ìì) 3
.
ìì3 4
Json
ìì4 8
.
ìì8 9
JsonConverter
ìì9 F
{
îî 
public
ïï 
override
ïï 
bool
ïï 

CanConvert
ïï '
(
ïï' (
Type
ïï( ,

objectType
ïï- 7
)
ïï7 8
{
ññ 	
return
óó 
typeof
óó 
(
óó 
	IGeometry
óó #
)
óó# $
.
óó$ %
IsAssignableFrom
óó% 5
(
óó5 6

objectType
óó6 @
)
óó@ A
;
óóA B
}
òò 	
public
öö 
override
öö 
object
öö 
ReadJson
öö '
(
öö' (

JsonReader
öö( 2
reader
öö3 9
,
öö9 :
Type
öö; ?

objectType
öö@ J
,
ööJ K
object
ööL R
existingValue
ööS `
,
öö` a
JsonSerializer
ööb p

serializer
ööq {
)
öö{ |
{
õõ 	
if
úú 
(
úú 
reader
úú 
.
úú 
Value
úú 
==
úú 
null
úú  $
)
úú$ %
return
úú& ,
null
úú- 1
;
úú1 2
var
ùù 
	wktReader
ùù 
=
ùù 
new
ùù 
	WKTReader
ùù  )
(
ùù) *
)
ùù* +
;
ùù+ ,
var
ûû 
result
ûû 
=
ûû 
	wktReader
ûû "
.
ûû" #
Read
ûû# '
(
ûû' (
reader
ûû( .
.
ûû. /
Value
ûû/ 4
.
ûû4 5
ToString
ûû5 =
(
ûû= >
)
ûû> ?
)
ûû? @
;
ûû@ A
return
üü 
result
üü 
;
üü 
}
†† 	
public
¢¢ 
override
¢¢ 
void
¢¢ 
	WriteJson
¢¢ &
(
¢¢& '

JsonWriter
¢¢' 1
writer
¢¢2 8
,
¢¢8 9
object
¢¢: @
value
¢¢A F
,
¢¢F G
JsonSerializer
¢¢H V

serializer
¢¢W a
)
¢¢a b
{
££ 	
if
§§ 
(
§§ 
value
§§ 
!=
§§ 
null
§§ 
)
§§ 

serializer
•• 
.
•• 
	Serialize
•• $
(
••$ %
writer
••% +
,
••+ ,
(
••- .
(
••. /
	IGeometry
••/ 8
)
••8 9
value
••9 >
)
••> ?
.
••? @
AsText
••@ F
(
••F G
)
••G H
)
••H I
;
••I J
else
¶¶ 

serializer
¶¶ 
.
¶¶ 
	Serialize
¶¶ %
(
¶¶% &
writer
¶¶& ,
,
¶¶, -
value
¶¶. 3
)
¶¶3 4
;
¶¶4 5
}
ßß 	
}
®® 
public
™™ 

class
™™ "
FeatureJsonConverter
™™ %
:
™™& '

Newtonsoft
™™( 2
.
™™2 3
Json
™™3 7
.
™™7 8
JsonConverter
™™8 E
{
´´ 
public
¨¨ 
override
¨¨ 
bool
¨¨ 

CanConvert
¨¨ '
(
¨¨' (
Type
¨¨( ,

objectType
¨¨- 7
)
¨¨7 8
{
≠≠ 	
return
ÆÆ 
typeof
ÆÆ 
(
ÆÆ 
IFeature
ÆÆ "
)
ÆÆ" #
.
ÆÆ# $
IsAssignableFrom
ÆÆ$ 4
(
ÆÆ4 5

objectType
ÆÆ5 ?
)
ÆÆ? @
;
ÆÆ@ A
}
ØØ 	
public
±± 
override
±± 
object
±± 
ReadJson
±± '
(
±±' (

JsonReader
±±( 2
reader
±±3 9
,
±±9 :
Type
±±; ?

objectType
±±@ J
,
±±J K
object
±±L R
existingValue
±±S `
,
±±` a
JsonSerializer
±±b p

serializer
±±q {
)
±±{ |
{
≤≤ 	
var
≥≥ 
feature
≥≥ 
=
≥≥ 
new
≥≥ 
Feature
≥≥ %
(
≥≥% &
)
≥≥& '
;
≥≥' (
feature
¥¥ 
.
¥¥ 

Attributes
¥¥ 
=
¥¥  
new
¥¥! $
AttributesTable
¥¥% 4
(
¥¥4 5
)
¥¥5 6
;
¥¥6 7
while
µµ 
(
µµ 
reader
µµ 
.
µµ 
Read
µµ 
(
µµ 
)
µµ  
)
µµ  !
{
∂∂ 
if
∑∑ 
(
∑∑ 
reader
∑∑ 
.
∑∑ 
	TokenType
∑∑ $
==
∑∑% '
	JsonToken
∑∑( 1
.
∑∑1 2
PropertyName
∑∑2 >
)
∑∑> ?
{
∏∏ 
var
ππ 
propertyName
ππ $
=
ππ% &
reader
ππ' -
.
ππ- .
Value
ππ. 3
.
ππ3 4
ToString
ππ4 <
(
ππ< =
)
ππ= >
;
ππ> ?
if
∫∫ 
(
∫∫ 
propertyName
∫∫ $
==
∫∫% '
$str
∫∫( /
)
∫∫/ 0
{
ªª 
reader
ºº 
.
ºº 
Read
ºº #
(
ºº# $
)
ºº$ %
;
ºº% &
var
ΩΩ 
shape
ΩΩ !
=
ΩΩ" #

serializer
ΩΩ$ .
.
ΩΩ. /
Deserialize
ΩΩ/ :
<
ΩΩ: ;
	IGeometry
ΩΩ; D
>
ΩΩD E
(
ΩΩE F
reader
ΩΩF L
)
ΩΩL M
;
ΩΩM N
feature
ææ 
.
ææ  
Geometry
ææ  (
=
ææ) *
shape
ææ+ 0
;
ææ0 1
}
øø 
else
¿¿ 
{
¡¡ 
reader
¬¬ 
.
¬¬ 
Read
¬¬ #
(
¬¬# $
)
¬¬$ %
;
¬¬% &
var
√√ 
value
√√ !
=
√√" #

serializer
√√$ .
.
√√. /
Deserialize
√√/ :
(
√√: ;
reader
√√; A
)
√√A B
;
√√B C
feature
ƒƒ 
.
ƒƒ  

Attributes
ƒƒ  *
.
ƒƒ* +
AddAttribute
ƒƒ+ 7
(
ƒƒ7 8
propertyName
ƒƒ8 D
,
ƒƒD E
value
ƒƒF K
)
ƒƒK L
;
ƒƒL M
}
≈≈ 
}
∆∆ 
else
«« 
if
«« 
(
«« 
reader
«« 
.
««  
	TokenType
««  )
==
««* ,
	JsonToken
««- 6
.
««6 7
	EndObject
««7 @
)
««@ A
break
»» 
;
»» 
}
…… 
return
   
feature
   
;
   
}
ÀÀ 	
public
ÕÕ 
override
ÕÕ 
void
ÕÕ 
	WriteJson
ÕÕ &
(
ÕÕ& '

JsonWriter
ÕÕ' 1
writer
ÕÕ2 8
,
ÕÕ8 9
object
ÕÕ: @
value
ÕÕA F
,
ÕÕF G
JsonSerializer
ÕÕH V

serializer
ÕÕW a
)
ÕÕa b
{
ŒŒ 	
if
œœ 
(
œœ 
value
œœ 
!=
œœ 
null
œœ 
)
œœ 
{
–– 
var
—— 
feature
—— 
=
—— 
(
—— 
IFeature
—— '
)
——' (
value
——( -
;
——- .
var
”” 
geoJsonWriter
”” !
=
””" #
new
””$ '
GeoJsonWriter
””( 5
(
””5 6
)
””6 7
;
””7 8
var
‘‘ 
json
‘‘ 
=
‘‘ 
geoJsonWriter
‘‘ (
.
‘‘( )
Write
‘‘) .
(
‘‘. /
feature
‘‘/ 6
)
‘‘6 7
;
‘‘7 8
writer
’’ 
.
’’ 
WriteRawValue
’’ $
(
’’$ %
json
’’% )
)
’’) *
;
’’* +
}
÷÷ 
else
◊◊ 

serializer
◊◊ 
.
◊◊ 
	Serialize
◊◊ %
(
◊◊% &
writer
◊◊& ,
,
◊◊, -
value
◊◊. 3
)
◊◊3 4
;
◊◊4 5
}
ÿÿ 	
}
ŸŸ 
public
€€ 

class
€€ ,
FeatureCollectionJsonConverter
€€ /
:
€€0 1

Newtonsoft
€€2 <
.
€€< =
Json
€€= A
.
€€A B
JsonConverter
€€B O
{
‹‹ 
public
›› 
override
›› 
bool
›› 

CanConvert
›› '
(
››' (
Type
››( ,

objectType
››- 7
)
››7 8
{
ﬁﬁ 	
return
ﬂﬂ 
typeof
ﬂﬂ 
(
ﬂﬂ 
FeatureCollection
ﬂﬂ +
)
ﬂﬂ+ ,
.
ﬂﬂ, -
IsAssignableFrom
ﬂﬂ- =
(
ﬂﬂ= >

objectType
ﬂﬂ> H
)
ﬂﬂH I
;
ﬂﬂI J
}
‡‡ 	
public
‚‚ 
override
‚‚ 
object
‚‚ 
ReadJson
‚‚ '
(
‚‚' (

JsonReader
‚‚( 2
reader
‚‚3 9
,
‚‚9 :
Type
‚‚; ?

objectType
‚‚@ J
,
‚‚J K
object
‚‚L R
existingValue
‚‚S `
,
‚‚` a
JsonSerializer
‚‚b p

serializer
‚‚q {
)
‚‚{ |
{
„„ 	
FeatureCollection
‰‰ 

collection
‰‰ (
=
‰‰) *
new
‰‰+ .
FeatureCollection
‰‰/ @
(
‰‰@ A
)
‰‰A B
;
‰‰B C

collection
ÂÂ 
.
ÂÂ 
BoundingBox
ÂÂ "
=
ÂÂ# $
new
ÂÂ% (
Envelope
ÂÂ) 1
(
ÂÂ1 2
)
ÂÂ2 3
;
ÂÂ3 4
while
ÊÊ 
(
ÊÊ 
reader
ÊÊ 
.
ÊÊ 
Read
ÊÊ 
(
ÊÊ 
)
ÊÊ  
)
ÊÊ  !
{
ÁÁ 
if
ËË 
(
ËË 
reader
ËË 
.
ËË 
	TokenType
ËË $
==
ËË% '
	JsonToken
ËË( 1
.
ËË1 2
PropertyName
ËË2 >
)
ËË> ?
{
ÈÈ 
if
ÍÍ 
(
ÍÍ 
reader
ÍÍ 
.
ÍÍ 
Path
ÍÍ #
==
ÍÍ$ &
$str
ÍÍ' 1
)
ÍÍ1 2
{
ÎÎ 
reader
ÏÏ 
.
ÏÏ 
Read
ÏÏ #
(
ÏÏ# $
)
ÏÏ$ %
;
ÏÏ% &
if
ÌÌ 
(
ÌÌ 
reader
ÌÌ "
.
ÌÌ" #
	TokenType
ÌÌ# ,
==
ÌÌ- /
	JsonToken
ÌÌ0 9
.
ÌÌ9 :

StartArray
ÌÌ: D
)
ÌÌD E
{
ÓÓ 
while
ÔÔ !
(
ÔÔ" #
reader
ÔÔ# )
.
ÔÔ) *
Read
ÔÔ* .
(
ÔÔ. /
)
ÔÔ/ 0
)
ÔÔ0 1
{
 
if
ÒÒ  "
(
ÒÒ# $
reader
ÒÒ$ *
.
ÒÒ* +
	TokenType
ÒÒ+ 4
==
ÒÒ5 7
	JsonToken
ÒÒ8 A
.
ÒÒA B
EndArray
ÒÒB J
)
ÒÒJ K
break
ÚÚ$ )
;
ÚÚ) *
var
ÛÛ  #
feature
ÛÛ$ +
=
ÛÛ, -

serializer
ÛÛ. 8
.
ÛÛ8 9
Deserialize
ÛÛ9 D
<
ÛÛD E
Feature
ÛÛE L
>
ÛÛL M
(
ÛÛM N
reader
ÛÛN T
)
ÛÛT U
;
ÛÛU V

collection
ÙÙ  *
.
ÙÙ* +
Add
ÙÙ+ .
(
ÙÙ. /
feature
ÙÙ/ 6
)
ÙÙ6 7
;
ÙÙ7 8
if
ıı  "
(
ıı# $
feature
ıı$ +
!=
ıı, .
null
ıı/ 3
&&
ıı4 6
feature
ıı7 >
.
ıı> ?
Geometry
ıı? G
!=
ııH J
null
ııK O
)
ııO P

collection
ˆˆ$ .
.
ˆˆ. /
BoundingBox
ˆˆ/ :
=
ˆˆ; <

collection
ˆˆ= G
.
ˆˆG H
BoundingBox
ˆˆH S
.
ˆˆS T

ExpandedBy
ˆˆT ^
(
ˆˆ^ _
feature
ˆˆ_ f
.
ˆˆf g
Geometry
ˆˆg o
.
ˆˆo p
EnvelopeInternalˆˆp Ä
)ˆˆÄ Å
;ˆˆÅ Ç
}
˜˜ 
}
¯¯ 
}
˘˘ 
}
˙˙ 
}
˚˚ 
return
¸¸ 

collection
¸¸ 
;
¸¸ 
}
˛˛ 	
public
ÄÄ 
override
ÄÄ 
void
ÄÄ 
	WriteJson
ÄÄ &
(
ÄÄ& '

JsonWriter
ÄÄ' 1
writer
ÄÄ2 8
,
ÄÄ8 9
object
ÄÄ: @
value
ÄÄA F
,
ÄÄF G
JsonSerializer
ÄÄH V

serializer
ÄÄW a
)
ÄÄa b
{
ÅÅ 	
if
ÇÇ 
(
ÇÇ 
value
ÇÇ 
!=
ÇÇ 
null
ÇÇ 
)
ÇÇ 
{
ÉÉ 
var
ÑÑ 

collection
ÑÑ 
=
ÑÑ  
(
ÑÑ! "
FeatureCollection
ÑÑ" 3
)
ÑÑ3 4
value
ÑÑ4 9
;
ÑÑ9 :
var
ÖÖ 
geoJsonWriter
ÖÖ !
=
ÖÖ" #
new
ÖÖ$ '
GeoJsonWriter
ÖÖ( 5
(
ÖÖ5 6
)
ÖÖ6 7
;
ÖÖ7 8
var
ÜÜ 
json
ÜÜ 
=
ÜÜ 
geoJsonWriter
ÜÜ (
.
ÜÜ( )
Write
ÜÜ) .
(
ÜÜ. /

collection
ÜÜ/ 9
)
ÜÜ9 :
;
ÜÜ: ;
writer
áá 
.
áá 
WriteRawValue
áá $
(
áá$ %
json
áá% )
)
áá) *
;
áá* +
}
àà 
else
ââ 

serializer
ââ 
.
ââ 
	Serialize
ââ %
(
ââ% &
writer
ââ& ,
,
ââ, -
value
ââ. 3
)
ââ3 4
;
ââ4 5
}
ää 	
}
ãã 
public
çç 

class
çç +
DateTime_TR_UTC_JsonConverter
çç .
:
çç/ 0

Newtonsoft
çç1 ;
.
çç; <
Json
çç< @
.
çç@ A
JsonConverter
ççA N
{
éé 
public
ëë 
override
ëë 
bool
ëë 

CanConvert
ëë '
(
ëë' (
Type
ëë( ,

objectType
ëë- 7
)
ëë7 8
{
íí 	
return
ìì 
typeof
ìì 
(
ìì 
DateTime
ìì "
)
ìì" #
.
ìì# $
IsAssignableFrom
ìì$ 4
(
ìì4 5

objectType
ìì5 ?
)
ìì? @
||
ììA C
typeof
ììD J
(
ììJ K
DateTime
ììK S
?
ììS T
)
ììT U
.
ììU V
IsAssignableFrom
ììV f
(
ììf g

objectType
ììg q
)
ììq r
;
ììr s
}
îî 	
public
ññ 
override
ññ 
object
ññ 
ReadJson
ññ '
(
ññ' (

JsonReader
ññ( 2
reader
ññ3 9
,
ññ9 :
Type
ññ; ?

objectType
ññ@ J
,
ññJ K
object
ññL R
existingValue
ññS `
,
ññ` a
JsonSerializer
ññb p

serializer
ññq {
)
ññ{ |
{
óó 	
if
òò 
(
òò 
reader
òò 
.
òò 
Value
òò 
==
òò 
null
òò  $
)
òò$ %
{
ôô 
return
öö 
null
öö 
;
öö 
}
õõ 
else
úú 
{
ùù 
var
ûû 
cc
ûû 
=
ûû 
new
ûû 
CultureInfo
ûû (
(
ûû( )
$str
ûû) 0
,
ûû0 1
false
ûû2 7
)
ûû7 8
;
ûû8 9
var
†† 
value
†† 
=
†† 
(
†† 
(
†† 
DateTime
†† &
)
††& '
reader
††' -
.
††- .
Value
††. 3
)
††3 4
;
††4 5
if
°° 
(
°° 
value
°° 
.
°° 
Kind
°° 
==
°° !
DateTimeKind
°°" .
.
°°. /
Utc
°°/ 2
)
°°2 3
{
¢¢ 
return
££ 
value
££  
.
££  !
ToLocalTime
££! ,
(
££, -
)
££- .
;
££. /
}
§§ 
else
•• 
{
¶¶ 
return
ßß 
value
ßß  
;
ßß  !
}
®® 
}
©© 
}
™™ 	
public
¨¨ 
override
¨¨ 
void
¨¨ 
	WriteJson
¨¨ &
(
¨¨& '

JsonWriter
¨¨' 1
writer
¨¨2 8
,
¨¨8 9
object
¨¨: @
value
¨¨A F
,
¨¨F G
JsonSerializer
¨¨H V

serializer
¨¨W a
)
¨¨a b
{
≠≠ 	
if
ÆÆ 
(
ÆÆ 
value
ÆÆ 
!=
ÆÆ 
null
ÆÆ 
)
ÆÆ 
{
ØØ 
var
±± 
cc
±± 
=
±± 
new
±± 
DateTime
±± %
(
±±% &
(
±±& '
(
±±' (
DateTime
±±( 0
)
±±0 1
value
±±1 6
)
±±6 7
.
±±7 8
Ticks
±±8 =
,
±±= >
DateTimeKind
±±? K
.
±±K L
Local
±±L Q
)
±±Q R
;
±±R S
var
≥≥ 
deger
≥≥ 
=
≥≥ 
JsonConvert
≥≥ '
.
≥≥' (
SerializeObject
≥≥( 7
(
≥≥7 8
cc
≥≥8 :
,
≥≥: ;
new
≥≥< ?$
JsonSerializerSettings
≥≥@ V
{
¥¥ "
DateTimeZoneHandling
µµ (
=
µµ) *"
DateTimeZoneHandling
µµ+ ?
.
µµ? @
Utc
µµ@ C
}
∂∂ 
)
∂∂ 
.
∂∂ 
Replace
∂∂ 
(
∂∂ 
$str
∂∂ 
,
∂∂  
$str
∂∂! #
)
∂∂# $
;
∂∂$ %

serializer
∑∑ 
.
∑∑ 
	Serialize
∑∑ $
(
∑∑$ %
writer
∑∑% +
,
∑∑+ ,
deger
∑∑- 2
)
∑∑2 3
;
∑∑3 4
}
∏∏ 
else
ππ 
{
∫∫ 

serializer
ªª 
.
ªª 
	Serialize
ªª $
(
ªª$ %
writer
ªª% +
,
ªª+ ,
value
ªª- 2
)
ªª2 3
;
ªª3 4
}
ºº 
}
ΩΩ 	
}
¿¿ 
public
ƒƒ 

class
ƒƒ 

JsonHelper
ƒƒ 
{
≈≈ 
public
…… 
static
…… 
string
…… 
JsonSerializer
…… +
<
……+ ,
T
……, -
>
……- .
(
……. /
T
……/ 0
t
……1 2
)
……2 3
{
   	(
DataContractJsonSerializer
ÀÀ &
ser
ÀÀ' *
=
ÀÀ+ ,
new
ÀÀ- 0(
DataContractJsonSerializer
ÀÀ1 K
(
ÀÀK L
typeof
ÀÀL R
(
ÀÀR S
T
ÀÀS T
)
ÀÀT U
)
ÀÀU V
;
ÀÀV W
MemoryStream
ÃÃ 
ms
ÃÃ 
=
ÃÃ 
new
ÃÃ !
MemoryStream
ÃÃ" .
(
ÃÃ. /
)
ÃÃ/ 0
;
ÃÃ0 1
ser
ÕÕ 
.
ÕÕ 
WriteObject
ÕÕ 
(
ÕÕ 
ms
ÕÕ 
,
ÕÕ 
t
ÕÕ  !
)
ÕÕ! "
;
ÕÕ" #
string
ŒŒ 

jsonString
ŒŒ 
=
ŒŒ 
Encoding
ŒŒ  (
.
ŒŒ( )
UTF8
ŒŒ) -
.
ŒŒ- .
	GetString
ŒŒ. 7
(
ŒŒ7 8
ms
ŒŒ8 :
.
ŒŒ: ;
ToArray
ŒŒ; B
(
ŒŒB C
)
ŒŒC D
)
ŒŒD E
;
ŒŒE F
ms
œœ 
.
œœ 
Close
œœ 
(
œœ 
)
œœ 
;
œœ 
return
–– 

jsonString
–– 
;
–– 
}
—— 	
public
’’ 
static
’’ 
T
’’ 
JsonDeserialize
’’ '
<
’’' (
T
’’( )
>
’’) *
(
’’* +
string
’’+ 1

jsonString
’’2 <
)
’’< =
{
÷÷ 	(
DataContractJsonSerializer
◊◊ &
ser
◊◊' *
=
◊◊+ ,
new
◊◊- 0(
DataContractJsonSerializer
◊◊1 K
(
◊◊K L
typeof
◊◊L R
(
◊◊R S
T
◊◊S T
)
◊◊T U
)
◊◊U V
;
◊◊V W
MemoryStream
ÿÿ 
ms
ÿÿ 
=
ÿÿ 
new
ÿÿ !
MemoryStream
ÿÿ" .
(
ÿÿ. /
Encoding
ÿÿ/ 7
.
ÿÿ7 8
UTF8
ÿÿ8 <
.
ÿÿ< =
GetBytes
ÿÿ= E
(
ÿÿE F

jsonString
ÿÿF P
)
ÿÿP Q
)
ÿÿQ R
;
ÿÿR S
T
ŸŸ 
obj
ŸŸ 
=
ŸŸ 
(
ŸŸ 
T
ŸŸ 
)
ŸŸ 
ser
ŸŸ 
.
ŸŸ 

ReadObject
ŸŸ %
(
ŸŸ% &
ms
ŸŸ& (
)
ŸŸ( )
;
ŸŸ) *
return
⁄⁄ 
obj
⁄⁄ 
;
⁄⁄ 
}
€€ 	
}
‹‹ 
}›› ùV
~D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\JsonFormatter.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Helper #
{ 
public		 

class		 
JsonFormatter		 
{

 
const 
string 
Space 
= 
$str  
;  !
const 
int 
DefaultIndent 
=  !
$num" #
;# $
const 
string 
Indent 
= 
Space #
+$ %
Space& +
+, -
Space. 3
+4 5
Space6 ;
;; <
static 
readonly 
string 
NewLine &
=' (
Environment) 4
.4 5
NewLine5 <
;< =
private 
enum 
JsonContextType $
{ 	
Object 
, 
Array 
} 	
static 
void 
BuildIndents  
(  !
int! $
indents% ,
,, -
System. 4
.4 5
Text5 9
.9 :
StringBuilder: G
outputH N
)N O
{ 	
indents 
+= 
DefaultIndent $
;$ %
for 
( 
; 
indents 
> 
$num 
; 
indents  '
--' )
)) *
output 
. 
Append 
( 
Indent $
)$ %
;% &
} 	
bool 
inDoubleString 
= 
false #
;# $
bool   
inSingleString   
=   
false   #
;  # $
bool!!  
inVariableAssignment!! !
=!!" #
false!!$ )
;!!) *
char"" 
prevChar"" 
="" 
$char"" 
;"" 
Stack$$ 
<$$ 
JsonContextType$$ 
>$$ 
context$$ &
=$$' (
new$$) ,
Stack$$- 2
<$$2 3
JsonContextType$$3 B
>$$B C
($$C D
)$$D E
;$$E F
bool&& 
InString&& 
(&& 
)&& 
{'' 	
return(( 
inDoubleString(( !
||((" $
inSingleString((% 3
;((3 4
})) 	
public++ 
string++ 
PrettyPrint++ !
(++! "
string++" (
input++) .
)++. /
{,, 	
var-- 
output-- 
=-- 
new-- 
System-- #
.--# $
Text--$ (
.--( )
StringBuilder--) 6
(--6 7
input--7 <
.--< =
Length--= C
*--D E
$num--F G
)--G H
;--H I
char.. 
c.. 
;.. 
for00 
(00 
int00 
i00 
=00 
$num00 
;00 
i00 
<00 
input00  %
.00% &
Length00& ,
;00, -
i00. /
++00/ 1
)001 2
{11 
c22 
=22 
input22 
[22 
i22 
]22 
;22 
switch44 
(44 
c44 
)44 
{55 
case66 
$char66 
:66 
if77 
(77 
!77 
InString77 %
(77% &
)77& '
)77' (
{88 
if99 
(99   
inVariableAssignment99  4
||995 7
(998 9
context999 @
.99@ A
Count99A F
>99G H
$num99I J
&&99K M
context99N U
.99U V
Peek99V Z
(99Z [
)99[ \
!=99] _
JsonContextType99` o
.99o p
Array99p u
)99u v
)99v w
{:: 
output;;  &
.;;& '
Append;;' -
(;;- .
NewLine;;. 5
);;5 6
;;;6 7
BuildIndents<<  ,
(<<, -
context<<- 4
.<<4 5
Count<<5 :
,<<: ;
output<<< B
)<<B C
;<<C D
}== 
output>> "
.>>" #
Append>># )
(>>) *
c>>* +
)>>+ ,
;>>, -
context?? #
.??# $
Push??$ (
(??( )
JsonContextType??) 8
.??8 9
Object??9 ?
)??? @
;??@ A
output@@ "
.@@" #
Append@@# )
(@@) *
NewLine@@* 1
)@@1 2
;@@2 3
BuildIndentsAA (
(AA( )
contextAA) 0
.AA0 1
CountAA1 6
,AA6 7
outputAA8 >
)AA> ?
;AA? @
}BB 
elseCC 
outputDD "
.DD" #
AppendDD# )
(DD) *
cDD* +
)DD+ ,
;DD, -
breakFF 
;FF 
caseHH 
$charHH 
:HH 
ifII 
(II 
!II 
InStringII %
(II% &
)II& '
)II' (
{JJ 
outputKK "
.KK" #
AppendKK# )
(KK) *
NewLineKK* 1
)KK1 2
;KK2 3
contextLL #
.LL# $
PopLL$ '
(LL' (
)LL( )
;LL) *
BuildIndentsMM (
(MM( )
contextMM) 0
.MM0 1
CountMM1 6
,MM6 7
outputMM8 >
)MM> ?
;MM? @
outputNN "
.NN" #
AppendNN# )
(NN) *
cNN* +
)NN+ ,
;NN, -
}OO 
elsePP 
outputQQ "
.QQ" #
AppendQQ# )
(QQ) *
cQQ* +
)QQ+ ,
;QQ, -
breakSS 
;SS 
caseUU 
$charUU 
:UU 
outputVV 
.VV 
AppendVV %
(VV% &
cVV& '
)VV' (
;VV( )
ifXX 
(XX 
!XX 
InStringXX %
(XX% &
)XX& '
)XX' (
contextYY #
.YY# $
PushYY$ (
(YY( )
JsonContextTypeYY) 8
.YY8 9
ArrayYY9 >
)YY> ?
;YY? @
break[[ 
;[[ 
case]] 
$char]] 
:]] 
if^^ 
(^^ 
!^^ 
InString^^ %
(^^% &
)^^& '
)^^' (
{__ 
output`` "
.``" #
Append``# )
(``) *
c``* +
)``+ ,
;``, -
contextaa #
.aa# $
Popaa$ '
(aa' (
)aa( )
;aa) *
}bb 
elsecc 
outputdd "
.dd" #
Appenddd# )
(dd) *
cdd* +
)dd+ ,
;dd, -
breakff 
;ff 
casehh 
$charhh 
:hh 
outputii 
.ii 
Appendii %
(ii% &
cii& '
)ii' (
;ii( )
breakjj 
;jj 
casell 
$charll 
:ll 
outputmm 
.mm 
Appendmm %
(mm% &
cmm& '
)mm' (
;mm( )
ifoo 
(oo 
!oo 
InStringoo %
(oo% &
)oo& '
&&oo( *
contextoo+ 2
.oo2 3
Peekoo3 7
(oo7 8
)oo8 9
!=oo: <
JsonContextTypeoo= L
.ooL M
ArrayooM R
)ooR S
{pp 
BuildIndentsqq (
(qq( )
contextqq) 0
.qq0 1
Countqq1 6
,qq6 7
outputqq8 >
)qq> ?
;qq? @
outputrr "
.rr" #
Appendrr# )
(rr) *
NewLinerr* 1
)rr1 2
;rr2 3
BuildIndentsss (
(ss( )
contextss) 0
.ss0 1
Countss1 6
,ss6 7
outputss8 >
)ss> ?
;ss? @ 
inVariableAssignmenttt 0
=tt1 2
falsett3 8
;tt8 9
}uu 
breakww 
;ww 
caseyy 
$charyy 
:yy 
ifzz 
(zz 
!zz 
inDoubleStringzz +
&&zz, .
prevCharzz/ 7
!=zz8 :
$charzz; ?
)zz? @
inSingleString{{ *
={{+ ,
!{{- .
inSingleString{{. <
;{{< =
output}} 
.}} 
Append}} %
(}}% &
c}}& '
)}}' (
;}}( )
break~~ 
;~~ 
case
ÄÄ 
$char
ÄÄ 
:
ÄÄ 
if
ÅÅ 
(
ÅÅ 
!
ÅÅ 
InString
ÅÅ %
(
ÅÅ% &
)
ÅÅ& '
)
ÅÅ' (
{
ÇÇ "
inVariableAssignment
ÉÉ 0
=
ÉÉ1 2
true
ÉÉ3 7
;
ÉÉ7 8
output
ÑÑ "
.
ÑÑ" #
Append
ÑÑ# )
(
ÑÑ) *
Space
ÑÑ* /
)
ÑÑ/ 0
;
ÑÑ0 1
output
ÖÖ "
.
ÖÖ" #
Append
ÖÖ# )
(
ÖÖ) *
c
ÖÖ* +
)
ÖÖ+ ,
;
ÖÖ, -
output
ÜÜ "
.
ÜÜ" #
Append
ÜÜ# )
(
ÜÜ) *
Space
ÜÜ* /
)
ÜÜ/ 0
;
ÜÜ0 1
}
áá 
else
àà 
output
ââ "
.
ââ" #
Append
ââ# )
(
ââ) *
c
ââ* +
)
ââ+ ,
;
ââ, -
break
ãã 
;
ãã 
case
çç 
$char
çç 
:
çç 
if
éé 
(
éé 
!
éé 
inSingleString
éé +
&&
éé, .
prevChar
éé/ 7
!=
éé8 :
$char
éé; ?
)
éé? @
inDoubleString
èè *
=
èè+ ,
!
èè- .
inDoubleString
èè. <
;
èè< =
output
ëë 
.
ëë 
Append
ëë %
(
ëë% &
c
ëë& '
)
ëë' (
;
ëë( )
break
íí 
;
íí 
case
ìì 
$char
ìì 
:
ìì 
if
îî 
(
îî 
InString
îî $
(
îî$ %
)
îî% &
)
îî& '
output
ïï "
.
ïï" #
Append
ïï# )
(
ïï) *
c
ïï* +
)
ïï+ ,
;
ïï, -
break
ññ 
;
ññ 
default
òò 
:
òò 
output
ôô 
.
ôô 
Append
ôô %
(
ôô% &
c
ôô& '
)
ôô' (
;
ôô( )
break
öö 
;
öö 
}
õõ 
prevChar
úú 
=
úú 
c
úú 
;
úú 
}
ùù 
return
üü 
output
üü 
.
üü 
ToString
üü "
(
üü" #
)
üü# $
;
üü$ %
}
†† 	
}
°° 
}¢¢ ≠
{D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\JsonHelper.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Helper #
{ 
public		 

class		 
TarihConverter		 
:		  !

Newtonsoft		" ,
.		, -
Json		- 1
.		1 2

Converters		2 <
.		< =!
DateTimeConverterBase		= R
{

 
public 
override 
object 
ReadJson '
(' (

Newtonsoft( 2
.2 3
Json3 7
.7 8

JsonReader8 B
readerC I
,I J
TypeK O

objectTypeP Z
,Z [
object\ b
existingValuec p
,p q

Newtonsoftr |
.| }
Json	} Å
.
Å Ç
JsonSerializer
Ç ê

serializer
ë õ
)
õ ú
{ 	
if 
( 
reader 
. 
Value 
== 
null  $
)$ %
return 
null 
; 
return 
DateTime 
. 

ParseExact &
(& '
reader' -
.- .
Value. 3
.3 4
ToString4 <
(< =
)= >
,> ?
$str@ L
,L M
CultureInfoN Y
.Y Z
InvariantCultureZ j
)j k
;k l
} 	
public 
override 
void 
	WriteJson &
(& '

Newtonsoft' 1
.1 2
Json2 6
.6 7

JsonWriter7 A
writerB H
,H I
objectJ P
valueQ V
,V W

NewtonsoftX b
.b c
Jsonc g
.g h
JsonSerializerh v

serializer	w Å
)
Å Ç
{ 	
writer 
. 

WriteValue 
( 
( 
(  
DateTime  (
)( )
value) .
). /
./ 0
ToString0 8
(8 9
$str9 E
)E F
)F G
;G H
} 	
} 
} ”7
yD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\MRUCache.cs
	namespace 	
Infoline
 
. 
Helper 
{ 
public 

class 
MRUCache 
< 
T 
, 
KEY  
>  !
where" '
T( )
:* +
	CacheItem, 5
<5 6
KEY6 9
>9 :
{		 
public

 
MRUCache

 
(

 
int

 
size

  
=

! "
$num

# '
)

' (
{ 	
MaxSize 
= 
size 
; 
} 	

Dictionary 
< 
KEY 
, 
LinkedListNode &
<& '
T' (
>( )
>) *
_index+ 1
=2 3
new4 7

Dictionary8 B
<B C
KEYC F
,F G
LinkedListNodeH V
<V W
TW X
>X Y
>Y Z
(Z [
)[ \
;\ ]
	protected 

LinkedList 
< 
T 
> 
_data  %
=& '
new( +

LinkedList, 6
<6 7
T7 8
>8 9
(9 :
): ;
;; <
public 
long 
	TotalSize 
{ 
get  #
;# $
private% ,
set- 0
;0 1
}2 3
public 
IEnumerable 
< 
T 
> 
GetCacheItems +
(+ ,
), -
{ 	
return 
_data 
. 
Select 
(  
a  !
=>" $
a% &
)& '
;' (
} 	
	protected 
T 
GetCacheItem  
(  !
KEY! $
key% (
)( )
{ 	
lock 
( 
this 
) 
{ 
LinkedListNode 
< 
T  
>  !
node" &
;& '
if 
( 
_index 
. 
TryGetValue &
(& '
key' *
,* +
out, /
node0 4
)4 5
)5 6
{ 
_data!! 
.!! 
Remove!!  
(!!  !
node!!! %
)!!% &
;!!& '
_data"" 
."" 
AddFirst"" "
(""" #
node""# '
)""' (
;""( )
return## 
node## 
.##  
Value##  %
;##% &
}$$ 
}%% 
var&& 
ret&& 
=&& 
LoadCacheItem&& #
(&&# $
key&&$ '
)&&' (
;&&( )
if'' 
('' 
ret'' 
!='' 
null'' 
)'' 
{(( 
AddCacheItem)) 
()) 
ret))  
)))  !
;))! "
}** 
return++ 
ret++ 
;++ 
}-- 	
virtual.. 
	protected.. 
T.. 
LoadCacheItem.. )
(..) *
KEY..* -
key... 1
)..1 2
{// 	
return00 
default00 
(00 
T00 
)00 
;00 
}11 	
public33 
long33 
MaxSize33 
{33 
get33 !
;33! "
set33# &
;33& '
}33( )
	protected44 
void44 
AddCacheItem44 #
(44# $
T44$ %
item44& *
)44* +
{55 	
lock66 
(66 
this66 
)66 
{77 
if88 
(88 
_data88 
.88 
Count88 
>88  !
MaxSize88" )
)88) *
{99 
var:: 
l:: 
=:: 
_data:: !
.::! "
Last::" &
;::& '
if;; 
(;; 
l;; 
!=;; 
null;; !
);;! "
{<< 
if== 
(== 
OnRemoveCacheItem== -
(==- .
l==. /
.==/ 0
Value==0 5
)==5 6
)==6 7
{>> 
Remove?? "
(??" #
l??# $
.??$ %
Value??% *
.??* +
Key??+ .
)??. /
;??/ 0
}@@ 
}AA 
}BB 
	TotalSizeDD 
+=DD 
itemDD !
.DD! "
SizeDD" &
;DD& '
_indexFF 
[FF 
itemFF 
.FF 
KeyFF 
]FF  
=FF! "
_dataFF# (
.FF( )
AddFirstFF) 1
(FF1 2
itemFF2 6
)FF6 7
;FF7 8
}GG 
}HH 	
	protectedII 
voidII 
RemoveII 
(II 
KEYII !
keyII" %
)II% &
{JJ 	
lockKK 
(KK 
thisKK 
)KK 
{LL 
LinkedListNodeMM 
<MM 
TMM  
>MM  !
nodeMM" &
;MM& '
ifNN 
(NN 
_indexNN 
.NN 
TryGetValueNN &
(NN& '
keyNN' *
,NN* +
outNN, /
nodeNN0 4
)NN4 5
)NN5 6
{OO 
	TotalSizePP 
-=PP  
nodePP! %
.PP% &
ValuePP& +
.PP+ ,
SizePP, 0
;PP0 1
_indexQQ 
.QQ 
RemoveQQ !
(QQ! "
keyQQ" %
)QQ% &
;QQ& '
_dataRR 
.RR 
RemoveRR  
(RR  !
nodeRR! %
)RR% &
;RR& '
}SS 
}TT 
}UU 	
	protectedVV 
virtualVV 
boolVV 
OnRemoveCacheItemVV 0
(VV0 1
TVV1 2
itemVV3 7
)VV7 8
{WW 	
returnXX 
trueXX 
;XX 
}YY 	
	protectedZZ 
voidZZ 
ClearZZ 
(ZZ 
)ZZ 
{[[ 	
foreach\\ 
(\\ 
var\\ 
p\\ 
in\\ 
_data\\ #
)\\# $
{]] 
OnRemoveCacheItem^^ !
(^^! "
p^^" #
)^^# $
;^^$ %
}__ 
_data`` 
.`` 
Clear`` 
(`` 
)`` 
;`` 
_indexaa 
.aa 
Clearaa 
(aa 
)aa 
;aa 
}bb 	
}cc 
publicdd 

	interfacedd 
	CacheItemdd 
<dd 
KEYdd "
>dd" #
{ee 
KEYff 
Keyff 
{ff 
getff 
;ff 
}ff 
intgg 
Sizegg 
{gg 
getgg 
;gg 
}gg 
}hh 
}ii ª
~D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\ObjectDetails.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Helper #
{ 
public 

static 
class 
ObjectDetails %
{ 
public 
static 
int 
? 
toInt32 "
(" #
this# '
object( .
nesne/ 4
)4 5
{ 	
int		 
?		 
sonuc		 
=		 
null		 
;		 
try

 
{ 
sonuc 
= 
Convert 
.  
ToInt32  '
(' (
nesne( -
)- .
;. /
} 
catch 
( 
	Exception 
) 
{ 
} 
return 
sonuc 
; 
} 	
public 
static 
short 
? 
toShort $
($ %
this% )
object* 0
nesne1 6
)6 7
{ 	
short 
? 
sonuc 
= 
null 
;  
try 
{ 
sonuc 
= 
Convert 
.  
ToInt16  '
(' (
nesne( -
)- .
;. /
} 
catch 
( 
	Exception 
) 
{ 
} 
return 
sonuc 
; 
} 	
public   
static   
double   
?   
toDouble   &
(  & '
this  ' +
object  , 2
nesne  3 8
)  8 9
{!! 	
double"" 
?"" 
sonuc"" 
="" 
null""  
;""  !
try## 
{$$ 
sonuc%% 
=%% 
Convert%% 
.%%  
ToDouble%%  (
(%%( )
nesne%%) .
)%%. /
;%%/ 0
}&& 
catch'' 
('' 
	Exception'' 
)'' 
{(( 
})) 
return** 
sonuc** 
;** 
}++ 	
public,, 
static,, 
DateTime,, 
?,, 
toDate,,  &
(,,& '
this,,' +
object,,, 2
nesne,,3 8
),,8 9
{-- 	
DateTime.. 
?.. 
sonuc.. 
=.. 
null.. "
;.." #
try// 
{00 
sonuc11 
=11 
Convert11 
.11  

ToDateTime11  *
(11* +
nesne11+ 0
)110 1
;111 2
}22 
catch33 
(33 
	Exception33 
)33 
{44 
return55 
null55 
;55 
}66 
return77 
sonuc77 
;77 
}88 	
}99 
}:: ™ü
ÑD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\ObjectXMLSerializer.cs
	namespace		 	
Infoline		
 
.		 
	Framework		 
.		 
Helper		 #
{

 
public 

enum 
SerializedFormat  
{ 
Binary 
, 
Document 
} 
public 

static 
class 
ObjectXMLSerializer +
<+ ,
T, -
>- .
where/ 4
T5 6
:7 8
class9 >
{ 
public'' 
static'' 
T'' 
Load'' 
('' 
string'' #
path''$ (
)''( )
{(( 	
if** 
(** 
!** 
File** 
.** 
Exists** 
(** 
path** !
)**! "
)**" #
return**$ *
null**+ /
;**/ 0
T++ 
serializableObject++  
=++! ""
LoadFromDocumentFormat++# 9
(++9 :
null++: >
,++> ?
path++@ D
,++D E
null++F J
)++J K
;++K L
return,, 
serializableObject,, %
;,,% &
}-- 	
public.. 
static.. 
T.. 
Load.. 
(.. 
string.. #
path..$ (
,..( )
SerializedFormat..* :
serializedFormat..; K
)..K L
{// 	
T00 
serializableObject00  
=00! "
null00# '
;00' (
switch22 
(22 
serializedFormat22 $
)22$ %
{33 
case44 
SerializedFormat44 %
.44% &
Binary44& ,
:44, -
serializableObject55 &
=55' ( 
LoadFromBinaryFormat55) =
(55= >
path55> B
,55B C
null55D H
)55H I
;55I J
break66 
;66 
case88 
SerializedFormat88 %
.88% &
Document88& .
:88. /
default99 
:99 
serializableObject:: &
=::' ("
LoadFromDocumentFormat::) ?
(::? @
null::@ D
,::D E
path::F J
,::J K
null::L P
)::P Q
;::Q R
break;; 
;;; 
}<< 
return>> 
serializableObject>> %
;>>% &
}?? 	
publicLL 
staticLL 
TLL 
LoadLL 
(LL 
stringLL #
pathLL$ (
,LL( )
SystemLL* 0
.LL0 1
TypeLL1 5
[LL5 6
]LL6 7

extraTypesLL8 B
)LLB C
{MM 	
TNN 
serializableObjectNN  
=NN! ""
LoadFromDocumentFormatNN# 9
(NN9 :

extraTypesNN: D
,NND E
pathNNF J
,NNJ K
nullNNL P
)NNP Q
;NNQ R
returnOO 
serializableObjectOO %
;OO% &
}PP 	
public]] 
static]] 
T]] 
Load]] 
(]] 
string]] #
fileName]]$ ,
,]], -
IsolatedStorageFile]]. A$
isolatedStorageDirectory]]B Z
)]]Z [
{^^ 	
T__ 
serializableObject__  
=__! ""
LoadFromDocumentFormat__# 9
(__9 :
null__: >
,__> ?
fileName__@ H
,__H I$
isolatedStorageDirectory__J b
)__b c
;__c d
return`` 
serializableObject`` %
;``% &
}aa 	
publicoo 
staticoo 
Too 
Loadoo 
(oo 
stringoo #
fileNameoo$ ,
,oo, -
IsolatedStorageFileoo. A$
isolatedStorageDirectoryooB Z
,ooZ [
SerializedFormatoo\ l
serializedFormatoom }
)oo} ~
{pp 	
Tqq 
serializableObjectqq  
=qq! "
nullqq# '
;qq' (
switchss 
(ss 
serializedFormatss $
)ss$ %
{tt 
caseuu 
SerializedFormatuu %
.uu% &
Binaryuu& ,
:uu, -
serializableObjectvv &
=vv' ( 
LoadFromBinaryFormatvv) =
(vv= >
fileNamevv> F
,vvF G$
isolatedStorageDirectoryvvH `
)vv` a
;vva b
breakww 
;ww 
caseyy 
SerializedFormatyy %
.yy% &
Documentyy& .
:yy. /
defaultzz 
:zz 
serializableObject{{ &
={{' ("
LoadFromDocumentFormat{{) ?
({{? @
null{{@ D
,{{D E
fileName{{F N
,{{N O$
isolatedStorageDirectory{{P h
){{h i
;{{i j
break|| 
;|| 
}}} 
return 
serializableObject %
;% &
}
ÄÄ 	
public
éé 
static
éé 
T
éé 
Load
éé 
(
éé 
string
éé #
fileName
éé$ ,
,
éé, -!
IsolatedStorageFile
éé. A&
isolatedStorageDirectory
ééB Z
,
ééZ [
System
éé\ b
.
ééb c
Type
ééc g
[
éég h
]
ééh i

extraTypes
ééj t
)
éét u
{
èè 	
T
êê  
serializableObject
êê  
=
êê! "$
LoadFromDocumentFormat
êê# 9
(
êê9 :
null
êê: >
,
êê> ?
fileName
êê@ H
,
êêH I&
isolatedStorageDirectory
êêJ b
)
êêb c
;
êêc d
return
ëë  
serializableObject
ëë %
;
ëë% &
}
íí 	
public
§§ 
static
§§ 
void
§§ 
Save
§§ 
(
§§  
T
§§  ! 
serializableObject
§§" 4
,
§§4 5
string
§§6 <
path
§§= A
)
§§A B
{
•• 	"
SaveToDocumentFormat
¶¶  
(
¶¶  ! 
serializableObject
¶¶! 3
,
¶¶3 4
null
¶¶5 9
,
¶¶9 :
path
¶¶; ?
,
¶¶? @
null
¶¶A E
)
¶¶E F
;
¶¶F G
}
ßß 	
public
∂∂ 
static
∂∂ 
void
∂∂ 
Save
∂∂ 
(
∂∂  
T
∂∂  ! 
serializableObject
∂∂" 4
,
∂∂4 5
string
∂∂6 <
path
∂∂= A
,
∂∂A B
SerializedFormat
∂∂C S
serializedFormat
∂∂T d
)
∂∂d e
{
∑∑ 	
switch
∏∏ 
(
∏∏ 
serializedFormat
∏∏ $
)
∏∏$ %
{
ππ 
case
∫∫ 
SerializedFormat
∫∫ %
.
∫∫% &
Binary
∫∫& ,
:
∫∫, - 
SaveToBinaryFormat
ªª &
(
ªª& ' 
serializableObject
ªª' 9
,
ªª9 :
path
ªª; ?
,
ªª? @
null
ªªA E
)
ªªE F
;
ªªF G
break
ºº 
;
ºº 
case
ææ 
SerializedFormat
ææ %
.
ææ% &
Document
ææ& .
:
ææ. /
default
øø 
:
øø "
SaveToDocumentFormat
¿¿ (
(
¿¿( ) 
serializableObject
¿¿) ;
,
¿¿; <
null
¿¿= A
,
¿¿A B
path
¿¿C G
,
¿¿G H
null
¿¿I M
)
¿¿M N
;
¿¿N O
break
¡¡ 
;
¡¡ 
}
¬¬ 
}
√√ 	
public
““ 
static
““ 
void
““ 
Save
““ 
(
““  
T
““  ! 
serializableObject
““" 4
,
““4 5
string
““6 <
path
““= A
,
““A B
System
““C I
.
““I J
Type
““J N
[
““N O
]
““O P

extraTypes
““Q [
)
““[ \
{
”” 	"
SaveToDocumentFormat
‘‘  
(
‘‘  ! 
serializableObject
‘‘! 3
,
‘‘3 4

extraTypes
‘‘5 ?
,
‘‘? @
path
‘‘A E
,
‘‘E F
null
‘‘G K
)
‘‘K L
;
‘‘L M
}
’’ 	
public
‰‰ 
static
‰‰ 
void
‰‰ 
Save
‰‰ 
(
‰‰  
T
‰‰  ! 
serializableObject
‰‰" 4
,
‰‰4 5
string
‰‰6 <
fileName
‰‰= E
,
‰‰E F!
IsolatedStorageFile
‰‰G Z&
isolatedStorageDirectory
‰‰[ s
)
‰‰s t
{
ÂÂ 	"
SaveToDocumentFormat
ÊÊ  
(
ÊÊ  ! 
serializableObject
ÊÊ! 3
,
ÊÊ3 4
null
ÊÊ5 9
,
ÊÊ9 :
fileName
ÊÊ; C
,
ÊÊC D&
isolatedStorageDirectory
ÊÊE ]
)
ÊÊ] ^
;
ÊÊ^ _
}
ÁÁ 	
public
˜˜ 
static
˜˜ 
void
˜˜ 
Save
˜˜ 
(
˜˜  
T
˜˜  ! 
serializableObject
˜˜" 4
,
˜˜4 5
string
˜˜6 <
fileName
˜˜= E
,
˜˜E F!
IsolatedStorageFile
˜˜G Z&
isolatedStorageDirectory
˜˜[ s
,
˜˜s t
SerializedFormat˜˜u Ö 
serializedFormat˜˜Ü ñ
)˜˜ñ ó
{
¯¯ 	
switch
˘˘ 
(
˘˘ 
serializedFormat
˘˘ $
)
˘˘$ %
{
˙˙ 
case
˚˚ 
SerializedFormat
˚˚ %
.
˚˚% &
Binary
˚˚& ,
:
˚˚, - 
SaveToBinaryFormat
¸¸ &
(
¸¸& ' 
serializableObject
¸¸' 9
,
¸¸9 :
fileName
¸¸; C
,
¸¸C D&
isolatedStorageDirectory
¸¸E ]
)
¸¸] ^
;
¸¸^ _
break
˝˝ 
;
˝˝ 
case
ˇˇ 
SerializedFormat
ˇˇ %
.
ˇˇ% &
Document
ˇˇ& .
:
ˇˇ. /
default
ÄÄ 
:
ÄÄ "
SaveToDocumentFormat
ÅÅ (
(
ÅÅ( ) 
serializableObject
ÅÅ) ;
,
ÅÅ; <
null
ÅÅ= A
,
ÅÅA B
fileName
ÅÅC K
,
ÅÅK L&
isolatedStorageDirectory
ÅÅM e
)
ÅÅe f
;
ÅÅf g
break
ÇÇ 
;
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
public
îî 
static
îî 
void
îî 
Save
îî 
(
îî  
T
îî  ! 
serializableObject
îî" 4
,
îî4 5
string
îî6 <
fileName
îî= E
,
îîE F!
IsolatedStorageFile
îîG Z&
isolatedStorageDirectory
îî[ s
,
îîs t
System
îîu {
.
îî{ |
Typeîî| Ä
[îîÄ Å
]îîÅ Ç

extraTypesîîÉ ç
)îîç é
{
ïï 	"
SaveToDocumentFormat
ññ  
(
ññ  ! 
serializableObject
ññ! 3
,
ññ3 4
null
ññ5 9
,
ññ9 :
fileName
ññ; C
,
ññC D&
isolatedStorageDirectory
ññE ]
)
ññ] ^
;
ññ^ _
}
óó 	
private
ùù 
static
ùù 

FileStream
ùù !
CreateFileStream
ùù" 2
(
ùù2 3!
IsolatedStorageFile
ùù3 F#
isolatedStorageFolder
ùùG \
,
ùù\ ]
string
ùù^ d
path
ùùe i
)
ùùi j
{
ûû 	

FileStream
üü 

fileStream
üü !
=
üü" #
null
üü$ (
;
üü( )
if
°° 
(
°° #
isolatedStorageFolder
°° %
==
°°& (
null
°°) -
)
°°- .

fileStream
¢¢ 
=
¢¢ 
new
¢¢  

FileStream
¢¢! +
(
¢¢+ ,
path
¢¢, 0
,
¢¢0 1
FileMode
¢¢2 :
.
¢¢: ;
OpenOrCreate
¢¢; G
)
¢¢G H
;
¢¢H I
else
££ 

fileStream
§§ 
=
§§ 
new
§§  '
IsolatedStorageFileStream
§§! :
(
§§: ;
path
§§; ?
,
§§? @
FileMode
§§A I
.
§§I J
OpenOrCreate
§§J V
,
§§V W#
isolatedStorageFolder
§§X m
)
§§m n
;
§§n o
return
¶¶ 

fileStream
¶¶ 
;
¶¶ 
}
ßß 	
private
©© 
static
©© 
T
©© "
LoadFromBinaryFormat
©© -
(
©©- .
string
©©. 4
path
©©5 9
,
©©9 :!
IsolatedStorageFile
©©; N#
isolatedStorageFolder
©©O d
)
©©d e
{
™™ 	
T
´´  
serializableObject
´´  
=
´´! "
null
´´# '
;
´´' (
using
≠≠ 
(
≠≠ 

FileStream
≠≠ 

fileStream
≠≠ (
=
≠≠) *
CreateFileStream
≠≠+ ;
(
≠≠; <#
isolatedStorageFolder
≠≠< Q
,
≠≠Q R
path
≠≠S W
)
≠≠W X
)
≠≠X Y
{
ÆÆ 
BinaryFormatter
ØØ 
binaryFormatter
ØØ  /
=
ØØ0 1
new
ØØ2 5
BinaryFormatter
ØØ6 E
(
ØØE F
)
ØØF G
;
ØØG H 
serializableObject
∞∞ "
=
∞∞# $
binaryFormatter
∞∞% 4
.
∞∞4 5
Deserialize
∞∞5 @
(
∞∞@ A

fileStream
∞∞A K
)
∞∞K L
as
∞∞M O
T
∞∞P Q
;
∞∞Q R
}
±± 
return
≥≥  
serializableObject
≥≥ %
;
≥≥% &
}
¥¥ 	
private
∂∂ 
static
∂∂ 
T
∂∂ $
LoadFromDocumentFormat
∂∂ /
(
∂∂/ 0
System
∂∂0 6
.
∂∂6 7
Type
∂∂7 ;
[
∂∂; <
]
∂∂< =

extraTypes
∂∂> H
,
∂∂H I
string
∂∂J P
path
∂∂Q U
,
∂∂U V!
IsolatedStorageFile
∂∂W j$
isolatedStorageFolder∂∂k Ä
)∂∂Ä Å
{
∑∑ 	
T
∏∏  
serializableObject
∏∏  
=
∏∏! "
null
∏∏# '
;
∏∏' (
using
∫∫ 
(
∫∫ 

TextReader
∫∫ 

textReader
∫∫ (
=
∫∫) *
CreateTextReader
∫∫+ ;
(
∫∫; <#
isolatedStorageFolder
∫∫< Q
,
∫∫Q R
path
∫∫S W
)
∫∫W X
)
∫∫X Y
{
ªª 
XmlSerializer
ºº 
xmlSerializer
ºº +
=
ºº, -!
CreateXmlSerializer
ºº. A
(
ººA B

extraTypes
ººB L
)
ººL M
;
ººM N 
serializableObject
ΩΩ "
=
ΩΩ# $
xmlSerializer
ΩΩ% 2
.
ΩΩ2 3
Deserialize
ΩΩ3 >
(
ΩΩ> ?

textReader
ΩΩ? I
)
ΩΩI J
as
ΩΩK M
T
ΩΩN O
;
ΩΩO P
}
øø 
return
¡¡  
serializableObject
¡¡ %
;
¡¡% &
}
¬¬ 	
private
ƒƒ 
static
ƒƒ 

TextReader
ƒƒ !
CreateTextReader
ƒƒ" 2
(
ƒƒ2 3!
IsolatedStorageFile
ƒƒ3 F#
isolatedStorageFolder
ƒƒG \
,
ƒƒ\ ]
string
ƒƒ^ d
path
ƒƒe i
)
ƒƒi j
{
≈≈ 	

TextReader
∆∆ 

textReader
∆∆ !
=
∆∆" #
null
∆∆$ (
;
∆∆( )
if
»» 
(
»» #
isolatedStorageFolder
»» %
==
»»& (
null
»») -
)
»»- .

textReader
…… 
=
…… 
new
……  
StreamReader
……! -
(
……- .
path
……. 2
)
……2 3
;
……3 4
else
   

textReader
ÀÀ 
=
ÀÀ 
new
ÀÀ  
StreamReader
ÀÀ! -
(
ÀÀ- .
new
ÀÀ. 1'
IsolatedStorageFileStream
ÀÀ2 K
(
ÀÀK L
path
ÀÀL P
,
ÀÀP Q
FileMode
ÀÀR Z
.
ÀÀZ [
Open
ÀÀ[ _
,
ÀÀ_ `#
isolatedStorageFolder
ÀÀa v
)
ÀÀv w
)
ÀÀw x
;
ÀÀx y
return
ÕÕ 

textReader
ÕÕ 
;
ÕÕ 
}
ŒŒ 	
private
–– 
static
–– 

TextWriter
–– !
CreateTextWriter
––" 2
(
––2 3!
IsolatedStorageFile
––3 F#
isolatedStorageFolder
––G \
,
––\ ]
string
––^ d
path
––e i
)
––i j
{
—— 	

TextWriter
““ 

textWriter
““ !
=
““" #
null
““$ (
;
““( )
if
‘‘ 
(
‘‘ #
isolatedStorageFolder
‘‘ %
==
‘‘& (
null
‘‘) -
)
‘‘- .

textWriter
’’ 
=
’’ 
new
’’  
StreamWriter
’’! -
(
’’- .
path
’’. 2
)
’’2 3
;
’’3 4
else
÷÷ 

textWriter
◊◊ 
=
◊◊ 
new
◊◊  
StreamWriter
◊◊! -
(
◊◊- .
new
◊◊. 1'
IsolatedStorageFileStream
◊◊2 K
(
◊◊K L
path
◊◊L P
,
◊◊P Q
FileMode
◊◊R Z
.
◊◊Z [
OpenOrCreate
◊◊[ g
,
◊◊g h#
isolatedStorageFolder
◊◊i ~
)
◊◊~ 
)◊◊ Ä
;◊◊Ä Å
return
ŸŸ 

textWriter
ŸŸ 
;
ŸŸ 
}
⁄⁄ 	
private
‹‹ 
static
‹‹ 
XmlSerializer
‹‹ $!
CreateXmlSerializer
‹‹% 8
(
‹‹8 9
System
‹‹9 ?
.
‹‹? @
Type
‹‹@ D
[
‹‹D E
]
‹‹E F

extraTypes
‹‹G Q
)
‹‹Q R
{
›› 	
Type
ﬁﬁ 

ObjectType
ﬁﬁ 
=
ﬁﬁ 
typeof
ﬁﬁ $
(
ﬁﬁ$ %
T
ﬁﬁ% &
)
ﬁﬁ& '
;
ﬁﬁ' (
XmlSerializer
‡‡ 
xmlSerializer
‡‡ '
=
‡‡( )
null
‡‡* .
;
‡‡. /
if
‚‚ 
(
‚‚ 

extraTypes
‚‚ 
!=
‚‚ 
null
‚‚ "
)
‚‚" #
xmlSerializer
„„ 
=
„„ 
new
„„  #
XmlSerializer
„„$ 1
(
„„1 2

ObjectType
„„2 <
,
„„< =

extraTypes
„„> H
)
„„H I
;
„„I J
else
‰‰ 
xmlSerializer
ÂÂ 
=
ÂÂ 
new
ÂÂ  #
XmlSerializer
ÂÂ$ 1
(
ÂÂ1 2

ObjectType
ÂÂ2 <
)
ÂÂ< =
;
ÂÂ= >
return
ÁÁ 
xmlSerializer
ÁÁ  
;
ÁÁ  !
}
ËË 	
private
ÍÍ 
static
ÍÍ 
void
ÍÍ "
SaveToDocumentFormat
ÍÍ 0
(
ÍÍ0 1
T
ÍÍ1 2 
serializableObject
ÍÍ3 E
,
ÍÍE F
System
ÍÍG M
.
ÍÍM N
Type
ÍÍN R
[
ÍÍR S
]
ÍÍS T

extraTypes
ÍÍU _
,
ÍÍ_ `
string
ÍÍa g
path
ÍÍh l
,
ÍÍl m"
IsolatedStorageFileÍÍn Å%
isolatedStorageFolderÍÍÇ ó
)ÍÍó ò
{
ÎÎ 	
using
ÏÏ 
(
ÏÏ 

TextWriter
ÏÏ 

textWriter
ÏÏ (
=
ÏÏ) *
CreateTextWriter
ÏÏ+ ;
(
ÏÏ; <#
isolatedStorageFolder
ÏÏ< Q
,
ÏÏQ R
path
ÏÏS W
)
ÏÏW X
)
ÏÏX Y
{
ÌÌ 
XmlSerializer
ÓÓ 
xmlSerializer
ÓÓ +
=
ÓÓ, -!
CreateXmlSerializer
ÓÓ. A
(
ÓÓA B

extraTypes
ÓÓB L
)
ÓÓL M
;
ÓÓM N
xmlSerializer
ÔÔ 
.
ÔÔ 
	Serialize
ÔÔ '
(
ÔÔ' (

textWriter
ÔÔ( 2
,
ÔÔ2 3 
serializableObject
ÔÔ4 F
)
ÔÔF G
;
ÔÔG H
}
 
}
ÒÒ 	
private
ÛÛ 
static
ÛÛ 
void
ÛÛ  
SaveToBinaryFormat
ÛÛ .
(
ÛÛ. /
T
ÛÛ/ 0 
serializableObject
ÛÛ1 C
,
ÛÛC D
string
ÛÛE K
path
ÛÛL P
,
ÛÛP Q!
IsolatedStorageFile
ÛÛR e#
isolatedStorageFolder
ÛÛf {
)
ÛÛ{ |
{
ÙÙ 	
using
ıı 
(
ıı 

FileStream
ıı 

fileStream
ıı (
=
ıı) *
CreateFileStream
ıı+ ;
(
ıı; <#
isolatedStorageFolder
ıı< Q
,
ııQ R
path
ııS W
)
ııW X
)
ııX Y
{
ˆˆ 
BinaryFormatter
˜˜ 
binaryFormatter
˜˜  /
=
˜˜0 1
new
˜˜2 5
BinaryFormatter
˜˜6 E
(
˜˜E F
)
˜˜F G
;
˜˜G H
binaryFormatter
¯¯ 
.
¯¯  
	Serialize
¯¯  )
(
¯¯) *

fileStream
¯¯* 4
,
¯¯4 5 
serializableObject
¯¯6 H
)
¯¯H I
;
¯¯I J
}
˘˘ 
}
˙˙ 	
}
˝˝ 
}˛˛ ∂=
yD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\Parallel.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Helper #
{		 
public

 

static

 
class

 
ParallelExtentions

 *
{ 
static 
public 
Parallel 
< 
T  
>  !
RunParallel" -
<- .
T. /
>/ 0
(0 1
this1 5
IEnumerable6 A
<A B
TB C
>C D
ieE G
)G H
{ 	
return 
new 
Parallel 
<  
T  !
>! "
(" #
ie# %
)% &
;& '
} 	
} 
public 

class 
Parallel 
< 
T 
> 
{ 
private 
IEnumerable 
< 
T 
> 
_items %
;% &
private 
CancellationToken !
_cancelToken" .
;. /
private 
bool 
_islongrunnig "
;" #
private 
int 
_maxDOP 
; 
internal 
Parallel 
( 
IEnumerable %
<% &
T& '
>' (
items) .
). /
{ 	
_cancelToken 
= 
CancellationToken ,
., -
None- 1
;1 2
_items 
= 
items 
; 
_maxDOP   
=   
Environment   !
.  ! "
ProcessorCount  " 0
;  0 1
}!! 	
public## 
Parallel## 
<## 
T## 
>## 
	WithToken## $
(##$ %
CancellationToken##% 6
token##7 <
)##< =
{$$ 	
_cancelToken%% 
=%% 
token%%  
;%%  !
return&& 
this&& 
;&& 
}'' 	
public(( 
Parallel(( 
<(( 
T(( 
>(( 
AsLongRunning(( (
(((( )
)(() *
{)) 	
_islongrunnig** 
=** 
true**  
;**  !
return++ 
this++ 
;++ 
},, 	
public-- 
Parallel-- 
<-- 
T-- 
>-- &
WithMaxDegreeofParallelizm-- 5
(--5 6
int--6 9
max--: =
)--= >
{.. 	
_maxDOP// 
=// 
max// 
;// 
return00 
this00 
;00 
}11 	
public33 
void33 
Run33 
(33 
Action33 
<33  
T33  !
>33! "
action33# )
)33) *
{44 	
var55 
c55 
=55 
new55 
CountdownEvent55 &
(55& '
_maxDOP55' .
)55. /
;55/ 0
var77 
ie77 
=77 
_items77 
.77 
GetEnumerator77 )
(77) *
)77* +
;77+ ,
for88 
(88 
int88 
i88 
=88 
$num88 
;88 
i88 
<88 
_maxDOP88  '
;88' (
i88) *
++88* ,
)88, -
{99 
Task:: 
.:: 
Factory:: 
.:: 
StartNew:: %
(::% &
a::& '
=>::( *
{;; 
try<< 
{== 
T>> 
current>> !
=>>" #
default>>$ +
(>>+ ,
T>>, -
)>>- .
;>>. /
while?? 
(?? 
true?? #
)??# $
{@@ 
lockAA  
(AA! "
ieAA" $
)AA$ %
{BB 
ifCC  "
(CC# $
!CC$ %
ieCC% '
.CC' (
MoveNextCC( 0
(CC0 1
)CC1 2
)CC2 3
breakDD$ )
;DD) *
currentFF  '
=FF( )
ieFF* ,
.FF, -
CurrentFF- 4
;FF4 5
}GG 
actionHH "
(HH" #
currentHH# *
)HH* +
;HH+ ,
}II 
}JJ 
finallyKK 
{LL 
cNN 
.NN 
SignalNN  
(NN  !
$numNN! "
)NN" #
;NN# $
}OO 
}PP 
,PP 
_islongrunnigPP  
?PP! "
TaskCreationOptionsPP# 6
.PP6 7
LongRunningPP7 B
:PPB C
TaskCreationOptionsPPC V
.PPV W
NonePPW [
,PP[ \
_cancelTokenPP\ h
)PPh i
;PPi j
}QQ 
;QQ 
cSS 
.SS 
WaitSS 
(SS 
)SS 
;SS 
}TT 	
publicUU 
IEnumerableUU 
<UU 
OUTUU 
>UU 
SelectUU  &
<UU& '
OUTUU' *
>UU* +
(UU+ ,
FuncUU- 1
<UU1 2
TUU2 3
,UU3 4
OUTUU5 8
>UU8 9
actionUU: @
)UU@ A
{VV 	
varWW 
cWW 
=WW 
newWW 
CountdownEventWW &
(WW& '
_maxDOPWW' .
)WW. /
;WW/ 0
varXX 
retXX 
=XX 
newXX 
SystemXX  
.XX  !
CollectionsXX! ,
.XX, -

ConcurrentXX- 7
.XX7 8
ConcurrentStackXX8 G
<XXG H
OUTXXH K
>XXK L
(XXL M
)XXM N
;XXN O
varYY 
ieYY 
=YY 
_itemsYY 
.YY 
GetEnumeratorYY )
(YY) *
)YY* +
;YY+ ,
forZZ 
(ZZ 
intZZ 
iZZ 
=ZZ 
$numZZ 
;ZZ 
iZZ 
<ZZ 
_maxDOPZZ  '
;ZZ' (
iZZ) *
++ZZ* ,
)ZZ, -
{[[ 
Task\\ 
.\\ 
Factory\\ 
.\\ 
StartNew\\ &
(\\& '
delegate\\' /
{]] 
try^^ 
{__ 
T`` 
current`` !
=``" #
default``$ +
(``+ ,
T``, -
)``- .
;``. /
whileaa 
(aa 
trueaa #
)aa# $
{bb 
lockcc  
(cc! "
iecc" $
)cc$ %
{dd 
ifee  "
(ee# $
!ee$ %
ieee% '
.ee' (
MoveNextee( 0
(ee0 1
)ee1 2
)ee2 3
breakff$ )
;ff) *
currenthh  '
=hh( )
iehh* ,
.hh, -
Currenthh- 4
;hh4 5
}ii 
retjj 
.jj  
Pushjj  $
(jj$ %
actionjj% +
(jj+ ,
currentjj, 3
)jj3 4
)jj4 5
;jj5 6
}kk 
}ll 
finallymm 
{nn 
coo 
.oo 
Signaloo  
(oo  !
$numoo! "
)oo" #
;oo# $
}pp 
}qq 
,qq 
_islongrunnigqq  
?qq! "
TaskCreationOptionsqq# 6
.qq6 7
LongRunningqq7 B
:qqC D
TaskCreationOptionsqqE X
.qqX Y
NoneqqY ]
)qq] ^
;qq^ _
}rr 
;rr 
ctt 
.tt 
Waittt 
(tt 
)tt 
;tt 
returnuu 
retuu 
;uu 
}vv 	
}xx 
}yy §1
D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\ParallelThread.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Helper #
{ 
public		 

class		 
ParallelThread		 
<		  
T		  !
>		! "
{

 
public 
int 
ProcessedItems !
{" #
get$ '
;' (
set) ,
;, -
}. /
int 
_numOfParallel 
; 
Action 
< 
T 
> 
_act1 
; 
Action 
< 
T 
, 
object 
> 
_act2 
;  
public 
ParallelThread 
( 
IEnumerable )
<) *
T* +
>+ ,
array- 2
,2 3
int4 7
numOfParallel8 E
,E F
ActionG M
<M N
TN O
>O P
actQ T
)T U
{ 	
var 
ie 
= 
array 
. 
GetEnumerator (
(( )
)) *
;* +
_act1 
= 
act 
; 
_numOfParallel 
= 
numOfParallel *
;* +
var 
tf 
= 
Task 
. 
Factory !
;! "
var 
tasks 
= 
new 
Task  
[  !
numOfParallel! .
]. /
;/ 0
for 
( 
int 
i 
= 
$num 
; 
i 
< 
numOfParallel ,
;, -
i. /
++/ 1
)1 2
{ 
tasks 
[ 
i 
] 
= 
tf 
. 
StartNew &
(& '
delegate' /
(/ 0
)0 1
{ 
Run 
( 
ie 
) 
; 
} 
) 
; 
} 
while 
( 
! 
Task 
. 
WaitAll  
(  !
tasks! &
,& '
$num( ,
), -
)- .
{   
}"" 
}## 	
public$$ 
ParallelThread$$ 
($$ 
IEnumerable$$ )
<$$) *
T$$* +
>$$+ ,
array$$- 2
,$$2 3
int$$4 7
numOfParallel$$8 E
,$$E F
object$$G M
val$$N Q
,$$Q R
Action$$S Y
<$$Y Z
T$$Z [
,$$[ \
object$$] c
>$$c d
act$$e h
)$$h i
{%% 	
var&& 
ie&& 
=&& 
array&& 
.&& 
GetEnumerator&& (
(&&( )
)&&) *
;&&* +
_act2'' 
='' 
act'' 
;'' 
_numOfParallel(( 
=(( 
numOfParallel(( *
;((* +
var** 
tf** 
=** 
Task** 
.** 
Factory** !
;**! "
var++ 
tasks++ 
=++ 
new++ 
Task++  
[++  !
numOfParallel++! .
]++. /
;++/ 0
for,, 
(,, 
int,, 
i,, 
=,, 
$num,, 
;,, 
i,, 
<,, 
numOfParallel,,  -
;,,- .
i,,/ 0
++,,0 2
),,2 3
{-- 
tasks.. 
[.. 
i.. 
].. 
=.. 
tf.. 
... 
StartNew.. &
(..& '
delegate..' /
(../ 0
)..0 1
{// 
Run200 
(00 
ie00 
,00 
val00  
)00  !
;00! "
}11 
)11 
;11 
}22 
while44 
(44 
!44 
Task44 
.44 
WaitAll44  
(44  !
tasks44! &
,44& '
$num44( ,
)44, -
)44- .
{55 
}77 
}88 	
public:: 
void:: 
Run:: 
(:: 
IEnumerator:: #
<::# $
T::$ %
>::% &
ie::' )
)::) *
{;; 	
while<< 
(<< 
true<< 
)<< 
{== 
T>> 
item>> 
;>> 
lock?? 
(?? 
ie?? 
)?? 
{@@ 
ifAA 
(AA 
!AA 
ieAA 
.AA 
MoveNextAA $
(AA$ %
)AA% &
)AA& '
breakAA( -
;AA- .
itemBB 
=BB 
ieBB 
.BB 
CurrentBB %
;BB% &
ProcessedItemsCC "
++CC" $
;CC$ %
}DD 
_act1EE 
(EE 
itemEE 
)EE 
;EE 
}FF 
}GG 	
publicII 
voidII 
Run2II 
(II 
IEnumeratorII $
<II$ %
TII% &
>II& '
ieII( *
,II* +
objectII, 2
objII3 6
)II6 7
{JJ 	
whileKK 
(KK 
trueKK 
)KK 
{LL 
TMM 
itemMM 
;MM 
lockNN 
(NN 
ieNN 
)NN 
{OO 
ifPP 
(PP 
!PP 
iePP 
.PP 
MoveNextPP $
(PP$ %
)PP% &
)PP& '
breakPP( -
;PP- .
itemQQ 
=QQ 
ieQQ 
.QQ 
CurrentQQ %
;QQ% &
ProcessedItemsRR "
++RR" $
;RR$ %
}SS 
_act2TT 
(TT 
itemTT 
,TT 
objTT 
)TT  
;TT  !
}UU 
}VV 	
}WW 
}XX ±¡
ÄD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\ProcessingQueue.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Helper #
{		 
class

 	"
ProcessingQueueManager


  
{ 
static "
ProcessingQueueManager %
instance& .
=/ 0
new1 4"
ProcessingQueueManager5 K
(K L
)L M
;M N
public 
static "
ProcessingQueueManager ,
Instance- 5
{6 7
get8 ;
{< =
return> D
instanceE M
;M N
}O P
}Q R"
ProcessingQueueManager 
( 
)  
{ 	
} 	

Dictionary 
< 
string 
, 
WeakReference (
>( )
queues* 0
=1 2
new3 6

Dictionary7 A
<A B
stringB H
,H I
WeakReferenceJ W
>W X
(X Y
)Y Z
;Z [
internal 
void 
Register 
( 
IProcessingQueue /
queue0 5
)5 6
{ 	
lock 
( 
this 
) 
queues 
[ 
queue 
. 
Name !
]! "
=# $
new% (
WeakReference) 6
(6 7
queue7 <
)< =
;= >
} 	
public 
IProcessingQueue 
GetQueue  (
(( )
string) /
name0 4
)4 5
{ 	
lock 
( 
this 
) 
{ 
WeakReference 
wr  
=! "
null# '
;' (
if 
( 
queues 
. 
TryGetValue &
(& '
name' +
,+ ,
out- 0
wr1 3
)3 4
)4 5
{   
if!! 
(!! 
wr!! 
.!! 
IsAlive!! "
)!!" #
return"" 
wr"" !
.""! "
Target""" (
as"") +
IProcessingQueue"", <
;""< =
queues## 
.## 
Remove## !
(##! "
name##" &
)##& '
;##' (
}$$ 
return%% 
null%% 
;%% 
}&& 
}'' 	
void(( 
PurgeReferences(( 
((( 
)(( 
{)) 	
lock** 
(** 
this** 
)** 
foreach++ 
(++ 
var++ 
item++ !
in++" $
queues++% +
.+++ ,
Keys++, 0
.++0 1
ToArray++1 8
(++8 9
)++9 :
)++: ;
{,, 
if-- 
(-- 
!-- 
queues-- 
[--  
item--  $
]--$ %
.--% &
IsAlive--& -
)--- .
queues--/ 5
.--5 6
Remove--6 <
(--< =
item--= A
)--A B
;--B C
}.. 
}// 	
internal11 
void11 

Unregister11  
(11  !
IProcessingQueue11! 1
processingQueue112 A
)11A B
{22 	
lock33 
(33 
this33 
)33 
queues44 
.44 
Remove44 
(44 
processingQueue44 -
.44- .
Name44. 2
)442 3
;443 4
}55 	
}66 
public77 

	interface77 
IProcessingQueue77 %
{88 
string99 
Name99 
{99 
get99 
;99 
}99 
int:: 
RemainingCount:: 
{:: 
get::  
;::  !
}::" #
bool;; 
IsProcessing;; 
{;; 
get;; 
;;;  
};;! "
}== 
publicBB 

abstractBB 
classBB 
ProcessingQueueBB )
<BB) *
TItemBB* /
>BB/ 0
{CC 
publicDD 
staticDD 
ProcessingQueueDD %
<DD% &
TItemDD& +
>DD+ ,
operatorDD- 5
+DD6 7
(DD7 8
ProcessingQueueDD8 G
<DDG H
TItemDDH M
>DDM N
c1DDO Q
,DDQ R
TItemDDS X
c2DDY [
)DD[ \
{EE 	
c1FF 
.FF 
EnqueueFF 
(FF 
c2FF 
)FF 
;FF 
returnGG 
c1GG 
;GG 
}HH 	
privateJJ 
BlockingPipeJJ 
<JJ 
TItemJJ "
>JJ" #
_queueJJ$ *
;JJ* +
privateNN 
ThreadNN 
_threadNN 
;NN 
privatePP #
CancellationTokenSourcePP '
_cancelSourcePP( 5
;PP5 6
	protectedQQ 
CancellationTokenQQ #
CancellationTokenQQ$ 5
{QQ6 7
getQQ8 ;
{QQ< =
returnQQ> D
_cancelSourceQQE R
.QQR S
TokenQQS X
;QQX Y
}QQZ [
}QQ\ ]
publicUU 
boolUU 
IsProcessingUU  
{UU! "
getUU# &
;UU& '
privateUU( /
setUU0 3
;UU3 4
}UU5 6
privateWW 
intWW 
_processedItemCountWW '
;WW' (
publicYY 
intYY 
ProcessedItemCountYY %
{ZZ 	
get[[ 
{\\ 
return]] 
_processedItemCount]] *
;]]* +
}^^ 
}__ 	
publicbb 
intbb 
	ItemCountbb 
{cc 	
getdd 
{ee 
returnff 
_queueff 
.ff 
Countff #
;ff# $
}gg 
}hh 	
intjj 
_maxDOPjj 
=jj 
$numjj 
;jj 
publicll 
intll "
MaxDegreeofParallelizmll )
{mm 	
getnn 
{oo 
returnpp 
_maxDOPpp 
;pp 
}qq 
setrr 
{ss 
iftt 
(tt 
_maxDOPtt 
<tt 
$numtt 
||tt  "
_maxDOPtt# *
>tt+ ,
Environmenttt- 8
.tt8 9
ProcessorCounttt9 G
)ttG H
{uu 
throwvv 
newvv 
ArgumentExceptionvv /
(vv/ 0
$strvv0 V
)vvV W
;vvW X
}ww 
_maxDOPyy 
=yy 
valueyy 
;yy  
}zz 
}{{ 	
private}} 
readonly}} 
AutoResetEvent}} '
_completeHandle}}( 7
=}}8 9
new}}: =
AutoResetEvent}}> L
(}}L M
false}}M R
)}}R S
;}}S T
public 

WaitHandle 
CompleteHandle (
{
ÄÄ 	
get
ÅÅ 
{
ÅÅ 
return
ÅÅ 
_completeHandle
ÅÅ (
;
ÅÅ( )
}
ÅÅ* +
}
ÇÇ 	
public
ÑÑ 
void
ÑÑ 
Complete
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÖÖ 	
if
ÜÜ 
(
ÜÜ 
!
ÜÜ 
_queue
ÜÜ 
.
ÜÜ 
IsCompleted
ÜÜ #
)
ÜÜ# $
{
áá 
_queue
àà 
.
àà 
CompleteAdding
àà %
(
àà% &
)
àà& '
;
àà' (
}
ââ 
}
ää 	
public
åå 
ProcessingQueue
åå 
(
åå 
int
åå "
boundedcapacity
åå# 2
=
åå3 4
int
åå5 8
.
åå8 9
MaxValue
åå9 A
)
ååA B
:
çç 
this
çç 
(
çç 
boundedcapacity
çç "
,
çç" #
CancellationToken
çç$ 5
.
çç5 6
None
çç6 :
)
çç: ;
{
éé 	
}
èè 	
public
ëë 
ProcessingQueue
ëë 
(
ëë 
int
ëë "
boundedcapacity
ëë# 2
,
ëë2 3
CancellationToken
ëë4 E
token
ëëF K
)
ëëK L
{
íí 	
_queue
ìì 
=
ìì 
new
ìì 
BlockingPipe
ìì &
<
ìì& '
TItem
ìì' ,
>
ìì, -
(
ìì- .
boundedcapacity
ìì. =
)
ìì= >
;
ìì> ?
_cancelSource
ññ 
=
ññ %
CancellationTokenSource
ññ 3
.
ññ3 4%
CreateLinkedTokenSource
ññ4 K
(
ññK L
token
ññL Q
)
ññQ R
;
ññR S
_thread
òò 
=
òò 
new
òò 
Thread
òò  
(
òò  !
ProcessLoop
òò! ,
)
òò, -
{
òò. /
IsBackground
òò0 <
=
òò= >
true
òò? C
}
òòD E
;
òòE F
_thread
ôô 
.
ôô 
Start
ôô 
(
ôô 
)
ôô 
;
ôô 
}
öö 	
private
úú 
void
úú 
ProcessLoop
úú  
(
úú  !
object
úú! '
state
úú( -
)
úú- .
{
ùù 	
IsProcessing
üü 
=
üü 
true
üü 
;
üü  
try
†† 
{
°° 
ProcessQueue
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
}
££ 
catch
§§ 
(
§§ (
OperationCanceledException
§§ -
)
§§- .
{
•• 
}
ßß 
catch
®® 
(
®® "
ThreadAbortException
®® '
)
®®' (
{
©© 
}
´´ 
catch
¨¨ 
(
¨¨ 
	Exception
¨¨ 
ex
¨¨ 
)
¨¨  
{
≠≠ 
Console
ÆÆ 
.
ÆÆ 
	WriteLine
ÆÆ !
(
ÆÆ! "
ex
ÆÆ" $
.
ÆÆ$ %
Message
ÆÆ% ,
)
ÆÆ, -
;
ÆÆ- .
}
∞∞ 
finally
±± 
{
≤≤ 
IsProcessing
≥≥ 
=
≥≥ 
false
≥≥ $
;
≥≥$ %
OnExit
¥¥ 
(
¥¥ 
_queue
¥¥ 
.
¥¥ 
GetItems
¥¥ &
(
¥¥& '
)
¥¥' (
)
¥¥( )
;
¥¥) *
}
µµ 
}
∂∂ 	
~
∏∏ 	
ProcessingQueue
∏∏	 
(
∏∏ 
)
∏∏ 
{
ππ 	
}
∫∫ 	
private
ºº 
void
ºº 
ProcessQueue
ºº !
(
ºº! "
)
ºº" #
{
ΩΩ 	
while
ææ 
(
ææ 
true
ææ 
)
ææ 
{
øø 
var
¿¿ 
list
¿¿ 
=
¿¿ 
_queue
¿¿ !
.
¿¿! "$
GetConsumingEnumerable
¿¿" 8
(
¿¿8 9
CancellationToken
¿¿9 J
)
¿¿J K
;
¿¿K L
if
¬¬ 
(
¬¬ $
MaxDegreeofParallelizm
¬¬ *
==
¬¬+ -
$num
¬¬. /
)
¬¬/ 0
{
√√ 
foreach
ƒƒ 
(
ƒƒ 
var
ƒƒ  
item
ƒƒ! %
in
ƒƒ& (
list
ƒƒ) -
)
ƒƒ- .
{
≈≈ 
ProcessInternal
∆∆ '
(
∆∆' (
item
∆∆( ,
)
∆∆, -
;
∆∆- .
}
«« 
}
»» 
else
…… 
{
   
list
ÃÃ 
.
ÃÃ 
RunParallel
ÃÃ $
(
ÃÃ$ %
)
ÃÃ% &
.
ÕÕ 
AsLongRunning
ÕÕ &
(
ÕÕ& '
)
ÕÕ' (
.
ŒŒ 
	WithToken
ŒŒ "
(
ŒŒ" #
CancellationToken
ŒŒ# 4
)
ŒŒ4 5
.
œœ (
WithMaxDegreeofParallelizm
œœ 3
(
œœ3 4$
MaxDegreeofParallelizm
œœ4 J
)
œœJ K
.
–– 
Run
–– 
(
–– 
ProcessInternal
–– ,
)
––, -
;
––- .
}
—— 
_queue
”” 
=
”” 
new
”” 
BlockingPipe
”” )
<
””) *
TItem
””* /
>
””/ 0
(
””0 1
_queue
””1 7
.
””7 8
MaxCapacity
””8 C
)
””C D
;
””D E
_completeHandle
’’ 
.
’’  
Set
’’  #
(
’’# $
)
’’$ %
;
’’% &
}
÷÷ 
}
◊◊ 	
private
ŸŸ 
void
ŸŸ 
ProcessInternal
ŸŸ $
(
ŸŸ$ %
TItem
ŸŸ% *
item
ŸŸ+ /
)
ŸŸ/ 0
{
⁄⁄ 	
Interlocked
€€ 
.
€€ 
Add
€€ 
(
€€ 
ref
€€ !
_processedItemCount
€€  3
,
€€3 4
$num
€€5 6
)
€€6 7
;
€€7 8
ProcessItem
‹‹ 
(
‹‹ 
item
‹‹ 
)
‹‹ 
;
‹‹ 
}
ﬁﬁ 	
	protected
‡‡ 
virtual
‡‡ 
void
‡‡ 
OnExit
‡‡ %
(
‡‡% &
IEnumerable
‡‡& 1
<
‡‡1 2
TItem
‡‡2 7
>
‡‡7 8
	leftitems
‡‡9 B
)
‡‡B C
{
·· 	
}
„„ 	
public
ÂÂ 
void
ÂÂ 
Enqueue
ÂÂ 
(
ÂÂ 
TItem
ÂÂ !
msg
ÂÂ" %
)
ÂÂ% &
{
ÊÊ 	
_queue
ÁÁ 
.
ÁÁ 
Add
ÁÁ 
(
ÁÁ 
msg
ÁÁ 
,
ÁÁ 
CancellationToken
ÁÁ -
)
ÁÁ- .
;
ÁÁ. /
}
ËË 	
public
ÍÍ 
bool
ÍÍ 
Enqueue
ÍÍ 
(
ÍÍ 
TItem
ÍÍ !
msg
ÍÍ" %
,
ÍÍ% &
int
ÍÍ' *
timeout
ÍÍ+ 2
)
ÍÍ2 3
{
ÎÎ 	
return
ÏÏ 
_queue
ÏÏ 
.
ÏÏ 
TryAdd
ÏÏ  
(
ÏÏ  !
msg
ÏÏ! $
,
ÏÏ$ %
timeout
ÏÏ& -
,
ÏÏ- .
CancellationToken
ÏÏ/ @
)
ÏÏ@ A
;
ÏÏA B
}
ÌÌ 	
	protected
ÔÔ 
void
ÔÔ 
Enqueue
ÔÔ 
(
ÔÔ 
TItem
ÔÔ $
[
ÔÔ$ %
]
ÔÔ% &
msg
ÔÔ' *
)
ÔÔ* +
{
 	
foreach
ÒÒ 
(
ÒÒ 
var
ÒÒ 
item
ÒÒ 
in
ÒÒ  
msg
ÒÒ! $
)
ÒÒ$ %
{
ÚÚ 
_queue
ÛÛ 
.
ÛÛ 
Add
ÛÛ 
(
ÛÛ 
item
ÛÛ 
,
ÛÛ  
CancellationToken
ÛÛ! 2
)
ÛÛ2 3
;
ÛÛ3 4
}
ÙÙ 
}
ıı 	
	protected
˜˜ 
abstract
˜˜ 
void
˜˜ 
ProcessItem
˜˜  +
(
˜˜+ ,
TItem
˜˜, 1
item
˜˜2 6
)
˜˜6 7
;
˜˜7 8
public
˘˘ 
void
˘˘ 
Dispose
˘˘ 
(
˘˘ 
)
˘˘ 
{
˙˙ 	
if
˚˚ 
(
˚˚ 
_thread
˚˚ 
!=
˚˚ 
null
˚˚ 
)
˚˚  
{
¸¸ 
if
˝˝ 
(
˝˝ 
_thread
˝˝ 
.
˝˝ 
IsAlive
˝˝ #
)
˝˝# $
{
˛˛ 
_cancelSource
ˇˇ !
.
ˇˇ! "
Cancel
ˇˇ" (
(
ˇˇ( )
)
ˇˇ) *
;
ˇˇ* +
}
ÄÄ 
IsProcessing
ÅÅ 
=
ÅÅ 
false
ÅÅ $
;
ÅÅ$ %
_thread
ÇÇ 
=
ÇÇ 
null
ÇÇ 
;
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
}
ÖÖ 
public
áá 

class
áá 
BlockingPipe
áá 
<
áá 
TItem
áá #
>
áá# $
{
àà 
public
ââ 
static
ââ 
BlockingPipe
ââ "
<
ââ" #
TItem
ââ# (
>
ââ( )
operator
ââ* 2
+
ââ3 4
(
ââ4 5
BlockingPipe
ââ5 A
<
ââA B
TItem
ââB G
>
ââG H
c1
ââI K
,
ââK L
TItem
ââM R
c2
ââS U
)
ââU V
{
ää 	
c1
ãã 
.
ãã 
Add
ãã 
(
ãã 
c2
ãã 
)
ãã 
;
ãã 
return
åå 
c1
åå 
;
åå 
}
çç 	
private
èè 
readonly
èè 
Queue
èè 
<
èè 
TItem
èè $
>
èè$ %
_queue
èè& ,
;
èè, -
private
êê 
volatile
êê 
int
êê 
_queueCount
êê (
=
êê) *
$num
êê+ ,
;
êê, -
private
ëë 
readonly
ëë 
int
ëë 
	_maxCount
ëë &
=
ëë' (
Int32
ëë) .
.
ëë. /
MaxValue
ëë/ 7
;
ëë7 8
private
ìì 
bool
ìì 
_isComplete
ìì  
;
ìì  !
public
ïï 
bool
ïï 
IsCompleted
ïï 
{
ññ 	
get
óó 
{
óó 
return
óó 
_isComplete
óó $
;
óó$ %
}
óó& '
}
òò 	
public
öö 
int
öö 
MaxCapacity
öö 
{
õõ 	
get
úú 
{
úú 
return
úú 
	_maxCount
úú "
;
úú" #
}
úú$ %
}
ùù 	
public
üü 
int
üü 
Count
üü 
{
†† 	
get
°° 
{
°° 
return
°° 
_queue
°° 
.
°°  
Count
°°  %
;
°°% &
}
°°' (
}
¢¢ 	
public
§§ 
BlockingPipe
§§ 
(
§§ 
int
§§ 
boundedcapacity
§§  /
)
§§/ 0
{
•• 	
	_maxCount
¶¶ 
=
¶¶ 
boundedcapacity
¶¶ '
;
¶¶' (
_queue
ßß 
=
ßß 
new
ßß 
Queue
ßß 
<
ßß 
TItem
ßß $
>
ßß$ %
(
ßß% &
$num
ßß& )
)
ßß) *
;
ßß* +
}
®® 	
public
™™ 
void
™™ 
Add
™™ 
(
™™ 
TItem
™™ 
msg
™™ !
)
™™! "
{
´´ 	
Add
¨¨ 
(
¨¨ 
msg
¨¨ 
,
¨¨ 
CancellationToken
¨¨ &
.
¨¨& '
None
¨¨' +
)
¨¨+ ,
;
¨¨, -
}
≠≠ 	
public
ØØ 
void
ØØ 
Add
ØØ 
(
ØØ 
TItem
ØØ 
msg
ØØ !
,
ØØ! "
CancellationToken
ØØ# 4
cancellationtoken
ØØ5 F
)
ØØF G
{
∞∞ 	
TryAdd
±± 
(
±± 
msg
±± 
,
±± 
Timeout
±± 
.
±±  
Infinite
±±  (
,
±±( )
cancellationtoken
±±* ;
)
±±; <
;
±±< =
}
≤≤ 	
internal
¥¥ 
bool
¥¥ 
TryAdd
¥¥ 
(
¥¥ 
TItem
¥¥ "
msg
¥¥# &
,
¥¥& '
int
¥¥( +
timeout
¥¥, 3
,
¥¥3 4
CancellationToken
¥¥5 F
cancellationToken
¥¥G X
)
¥¥X Y
{
µµ 	
if
∂∂ 
(
∂∂ 
_isComplete
∂∂ 
)
∂∂ 
{
∑∑ 
throw
∏∏ 
new
∏∏ '
InvalidOperationException
∏∏ 3
(
∏∏3 4
$str
∏∏4 D
)
∏∏D E
;
∏∏E F
}
ππ 
cancellationToken
ªª 
.
ªª *
ThrowIfCancellationRequested
ªª :
(
ªª: ;
)
ªª; <
;
ªª< =
Monitor
ΩΩ 
.
ΩΩ 
Enter
ΩΩ 
(
ΩΩ 
_queue
ΩΩ  
)
ΩΩ  !
;
ΩΩ! "
var
øø 
	istimeout
øø 
=
øø 
false
øø !
;
øø! "
while
¡¡ 
(
¡¡ 
_queueCount
¡¡ 
>=
¡¡ !
	_maxCount
¡¡" +
&&
¡¡, .
!
¡¡/ 0
	istimeout
¡¡0 9
)
¡¡9 :
{
¬¬ 
cancellationToken
√√ !
.
√√! "*
ThrowIfCancellationRequested
√√" >
(
√√> ?
)
√√? @
;
√√@ A
	istimeout
ƒƒ 
=
ƒƒ 
!
ƒƒ 
Monitor
ƒƒ $
.
ƒƒ$ %
Wait
ƒƒ% )
(
ƒƒ) *
_queue
ƒƒ* 0
,
ƒƒ0 1
timeout
ƒƒ2 9
)
ƒƒ9 :
;
ƒƒ: ;
}
≈≈ 
if
«« 
(
«« 
!
«« 
	istimeout
«« 
)
«« 
{
»» 
_queueCount
…… 
++
…… 
;
…… 
_queue
   
.
   
Enqueue
   
(
   
msg
   "
)
  " #
;
  # $
}
ÀÀ 
Monitor
ÕÕ 
.
ÕÕ 
Pulse
ÕÕ 
(
ÕÕ 
_queue
ÕÕ  
)
ÕÕ  !
;
ÕÕ! "
Monitor
ŒŒ 
.
ŒŒ 
Exit
ŒŒ 
(
ŒŒ 
_queue
ŒŒ 
)
ŒŒ  
;
ŒŒ  !
return
–– 
!
–– 
	istimeout
–– 
;
–– 
}
—— 	
internal
”” 
void
”” 
CompleteAdding
”” $
(
””$ %
)
””% &
{
‘‘ 	
lock
’’ 
(
’’ 
_queue
’’ 
)
’’ 
{
÷÷ 
_isComplete
◊◊ 
=
◊◊ 
true
◊◊ "
;
◊◊" #
Monitor
ÿÿ 
.
ÿÿ 
Pulse
ÿÿ 
(
ÿÿ 
_queue
ÿÿ $
)
ÿÿ$ %
;
ÿÿ% &
}
ŸŸ 
}
⁄⁄ 	
public
€€ 
IEnumerable
€€ 
<
€€ 
TItem
€€  
>
€€  !
GetItems
€€" *
(
€€* +
)
€€+ ,
{
‹‹ 	
return
›› 
_queue
›› 
;
›› 
}
ﬁﬁ 	
internal
ﬂﬂ 
IEnumerable
ﬂﬂ 
<
ﬂﬂ 
TItem
ﬂﬂ "
>
ﬂﬂ" #$
GetConsumingEnumerable
ﬂﬂ$ :
(
ﬂﬂ: ;
CancellationToken
ﬂﬂ; L
cancellationToken
ﬂﬂM ^
)
ﬂﬂ^ _
{
‡‡ 	
while
·· 
(
·· 
true
·· 
)
·· 
{
‚‚ 
{
‰‰ 
Monitor
ÂÂ 
.
ÂÂ 
Enter
ÂÂ !
(
ÂÂ! "
_queue
ÂÂ" (
)
ÂÂ( )
;
ÂÂ) *
}
ÊÊ 
while
ËË 
(
ËË 
_queueCount
ËË "
==
ËË# %
$num
ËË& '
)
ËË' (
{
ÈÈ 
if
ÍÍ 
(
ÍÍ 
_isComplete
ÍÍ #
)
ÍÍ# $
{
ÎÎ 
yield
ÏÏ 
break
ÏÏ #
;
ÏÏ# $
}
ÌÌ 
if
ÔÔ 
(
ÔÔ 
cancellationToken
ÔÔ )
.
ÔÔ) *%
IsCancellationRequested
ÔÔ* A
)
ÔÔA B
{
 
cancellationToken
ÒÒ )
.
ÒÒ) **
ThrowIfCancellationRequested
ÒÒ* F
(
ÒÒF G
)
ÒÒG H
;
ÒÒH I
}
ÚÚ 
Monitor
ÙÙ 
.
ÙÙ 
Wait
ÙÙ  
(
ÙÙ  !
_queue
ÙÙ! '
,
ÙÙ' (
$num
ÙÙ) ,
)
ÙÙ, -
;
ÙÙ- .
}
ıı 
var
˜˜ 
item
˜˜ 
=
˜˜ 
_queue
˜˜ !
.
˜˜! "
Dequeue
˜˜" )
(
˜˜) *
)
˜˜* +
;
˜˜+ ,
_queueCount
¯¯ 
--
¯¯ 
;
¯¯ 
Monitor
˙˙ 
.
˙˙ 
Pulse
˙˙ 
(
˙˙ 
_queue
˙˙ $
)
˙˙$ %
;
˙˙% &
Monitor
˚˚ 
.
˚˚ 
Exit
˚˚ 
(
˚˚ 
_queue
˚˚ #
)
˚˚# $
;
˚˚$ %
cancellationToken
˝˝ !
.
˝˝! "*
ThrowIfCancellationRequested
˝˝" >
(
˝˝> ?
)
˝˝? @
;
˝˝@ A
yield
ˇˇ 
return
ˇˇ 
item
ˇˇ !
;
ˇˇ! "
}
ÄÄ 
}
ÅÅ 	
}
ÇÇ 
public
ÖÖ 

class
ÖÖ 

Dispatcher
ÖÖ 
:
ÖÖ 
ProcessingQueue
ÖÖ -
<
ÖÖ- .
Action
ÖÖ. 4
>
ÖÖ4 5
{
ÜÜ 
public
àà 

Dispatcher
àà 
(
àà 
)
àà 
{
ââ 	
}
ãã 	
	protected
åå 
override
åå 
void
åå 
ProcessItem
åå  +
(
åå+ ,
Action
åå, 2
item
åå3 7
)
åå7 8
{
çç 	
item
éé 
(
éé 
)
éé 
;
éé 
}
èè 	
}
êê 
public
ëë 

	interface
ëë 
ITask
ëë 
{
íí 
CancellationToken
ìì 
CancellationToken
ìì +
{
ìì, -
get
ìì. 1
;
ìì1 2
}
ìì3 4
}
ïï 
}òò ≈W
àD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\PropertyAccessGenerator.cs
	namespace 	
Infoline
 
. 
Helper 
{		 
public

 

static

 
class

 #
PropertyAccessGenerator

 /
{ 
public 
static 
object 
Cnv  
(  !
object! '
a( )
,) *
Type+ /
t0 1
)1 2
{ 	
if 
( 
a 
is 
string 
&& 
t  
==! #
typeof$ *
(* +
string+ 1
)1 2
)2 3
return 
a 
; 
if 
( 
a 
is 
DBNull 
|| 
a  
==! #
null$ (
)( )
return* 0
null1 5
;5 6
if 
( 
a 
is 
Int16 
|| 
a 
is  "
Int32# (
||) +
a, -
is. 0
Int641 6
||7 9
a: ;
is< >
UInt16? E
||F H
aI J
isK M
UInt32N T
||U W
aX Y
isZ \
UInt64] c
||d f
ag h
isi k
Doublel r
)r s
{ 
Type 
nt 
= 
Nullable "
." #
GetUnderlyingType# 4
(4 5
t5 6
)6 7
;7 8
if 
( 
nt 
!= 
null 
) 
t  !
=" #
nt$ &
;& '
return 
Convert 
. 

ChangeType )
() *
a* +
,+ ,
t- .
). /
;/ 0
} 
Type 
nt1 
= 
Nullable 
.  
GetUnderlyingType  1
(1 2
t2 3
)3 4
;4 5
if 
( 
nt1 
!= 
null 
) 
t 
=  
nt1! $
;$ %
if 
( 
t 
== 
typeof 
( 
Guid  
)  !
)! "
return 
Guid 
. 
Parse !
(! "
a" #
.# $
ToString$ ,
(, -
)- .
). /
;/ 0
return 
a 
; 
}   	
static!! 
Cache!! 
<!! 
string!! 
,!! 
Action!! #
<!!# $
object!!$ *
,!!* +
object!!, 2
>!!2 3
>!!3 4
	_setCache!!5 >
=!!? @
new!!A D
Cache!!E J
<!!J K
string!!K Q
,!!Q R
Action!!S Y
<!!Y Z
object!!Z `
,!!` a
object!!b h
>!!h i
>!!i j
(!!j k
$num!!k n
)!!n o
;!!o p
static## 
Cache## 
<## 
string## 
,## 
Func## !
<##! "
object##" (
,##( )
object##* 0
>##0 1
>##1 2
	_getCache##3 <
=##= >
new##? B
Cache##C H
<##H I
string##I O
,##O P
Func##Q U
<##U V
object##V \
,##\ ]
object##^ d
>##d e
>##e f
(##f g
$num##g j
)##j k
;##k l
public%% 
static%% 
Action%% 
<%% 
object%% #
,%%# $
object%%% +
>%%+ ,
SetDelegate%%- 8
(%%8 9
Type%%9 =
type%%> B
,%%B C
string%%D J
name%%K O
)%%O P
{&& 	
Action'' 
<'' 
object'' 
,'' 
object'' !
>''! "
fnc''# &
;''& '
var(( 
key(( 
=(( 
type(( 
.(( 
FullName(( #
+(($ %
name((& *
;((* +
if** 
(** 
!** 
	_setCache** 
.** 
TryGet** !
(**! "
key**" %
,**% &
out**' *
fnc**+ .
)**. /
)**/ 0
{++ 
try,, 
{-- 
PropertyInfo..  
pi..! #
=..$ %
type..& *
...* +
GetProperty..+ 6
(..6 7
name..7 ;
)..; <
;..< =
if// 
(// 
pi// 
==// 
null// "
)//" #
return00 
null00 #
;00# $

Expression11 
<11 
Func11 #
<11# $
object11$ *
,11* +
Type11, 0
,110 1
object112 8
>118 9
>119 :
convert11; B
=11C D
(11E F
a11F G
,11G H
t11I J
)11J K
=>11L N
Cnv11O R
(11R S
a11S T
,11T U
t11V W
)11W X
;11X Y
ParameterExpression33 '
p33( )
=33* +

Expression33, 6
.336 7
	Parameter337 @
(33@ A
typeof33A G
(33G H
object33H N
)33N O
)33O P
;33P Q
ParameterExpression44 '
p144( *
=44+ ,

Expression44- 7
.447 8
	Parameter448 A
(44A B
typeof44B H
(44H I
object44I O
)44O P
)44P Q
;44Q R
LabelTarget55 
rt55  "
=55# $

Expression55% /
.55/ 0
Label550 5
(555 6
)556 7
;557 8
LambdaExpression77 $
l77% &
=77' (

Expression77) 3
.773 4
Lambda774 :
(77: ;
typeof77; A
(77A B
Action77B H
<77H I
object77I O
,77O P
object77Q W
>77W X
)77X Y
,77Y Z

Expression88 "
.88" #
Block88# (
(88( )

Expression99 %
.99% &
Assign99& ,
(99, -

Expression::  *
.::* +
Property::+ 3
(::3 4

Expression::4 >
.::> ?
Convert::? F
(::F G
p::G H
,::H I
type::J N
)::N O
,::O P
pi::Q S
)::S T
,::T U

Expression;;  *
.;;* +
Convert;;+ 2
(;;2 3

Expression<<$ .
.<<. /
Invoke<</ 5
(<<5 6
convert<<6 =
,<<= >
p1<<? A
,<<A B

Expression<<C M
.<<M N
Constant<<N V
(<<V W
pi<<W Y
.<<Y Z
PropertyType<<Z f
)<<f g
)<<g h
,<<h i
pi<<j l
.<<l m
PropertyType<<m y
)==  !
)>> 
,>> 

Expression?? %
.??% &
Label??& +
(??+ ,
rt??, .
)??. /
)@@ 
,AA 
pAA 
,AA 
p1AA 
)AA 
;AA 
fncBB 
=BB 
(BB 
ActionBB !
<BB! "
objectBB" (
,BB( )
objectBB* 0
>BB0 1
)BB1 2
lBB2 3
.BB3 4
CompileBB4 ;
(BB; <
)BB< =
;BB= >
	_setCacheCC 
.CC 
AddCC !
(CC! "
keyCC" %
,CC% &
fncCC' *
)CC* +
;CC+ ,
}DD 
catchEE 
(EE 
	ExceptionEE  
exEE! #
)EE# $
{FF 
throwGG 
newGG 
	ExceptionGG '
(GG' (
exGG( *
.GG* +
MessageGG+ 2
)GG2 3
;GG3 4
}HH 
}II 
returnJJ 
fncJJ 
;JJ 
}KK 	
publicMM 
staticMM 
FuncMM 
<MM 
objectMM !
,MM! "
objectMM# )
>MM) *
GetDelegateMM+ 6
(MM6 7
TypeMM7 ;
typeMM< @
,MM@ A
stringMMB H
nameMMI M
)MMM N
{NN 	
FuncOO 
<OO 
objectOO 
,OO 
objectOO 
>OO  
fncOO! $
;OO$ %
varPP 
keyPP 
=PP 
typePP 
.PP 
NamePP 
+PP  !
namePP" &
;PP& '
ifQQ 
(QQ 
!QQ 
	_getCacheQQ 
.QQ 
TryGetQQ !
(QQ! "
keyQQ" %
,QQ% &
outQQ' *
fncQQ+ .
)QQ. /
)QQ/ 0
{RR 
PropertyInfoSS 
piSS 
=SS  !
typeSS" &
.SS& '
GetPropertySS' 2
(SS2 3
nameSS3 7
)SS7 8
;SS8 9
ifTT 
(TT 
piTT 
==TT 
nullTT 
)TT 
returnUU 
nullUU 
;UU  
SystemVV 
.VV 
LinqVV 
.VV 
ExpressionsVV '
.VV' (
ParameterExpressionVV( ;
pVV< =
=VV> ?
SystemVV@ F
.VVF G
LinqVVG K
.VVK L
ExpressionsVVL W
.VVW X

ExpressionVVX b
.VVb c
	ParameterVVc l
(VVl m
typeofVVm s
(VVs t
objectVVt z
)VVz {
)VV{ |
;VV| }
LambdaExpressionXX  
lXX! "
=XX# $

ExpressionXX% /
.XX/ 0
LambdaXX0 6
(XX6 7
typeofXX7 =
(XX= >
FuncXX> B
<XXB C
objectXXC I
,XXI J
objectXXK Q
>XXQ R
)XXR S
,XXS T

ExpressionYY 
.YY 
ConvertYY &
(YY& '

ExpressionZZ "
.ZZ" #
PropertyZZ# +
(ZZ+ ,

Expression[[ &
.[[& '
Convert[[' .
([[. /
p[[/ 0
,[[0 1
type[[2 6
)[[6 7
,[[7 8
pi[[9 ;
)\\ 
,\\ 
typeof\\ !
(\\! "
object\\" (
)\\( )
)]] 
,]] 
p]] 
)]] 
;]] 
fnc^^ 
=^^ 
(^^ 
Func^^ 
<^^ 
object^^ "
,^^" #
object^^$ *
>^^* +
)^^+ ,
l^^, -
.^^- .
Compile^^. 5
(^^5 6
)^^6 7
;^^7 8
	_getCache__ 
.__ 
Add__ 
(__ 
key__ !
,__! "
fnc__# &
)__& '
;__' (
}`` 
returnaa 
fncaa 
;aa 
}bb 	
}cc 
}dd õ*
ÅD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\ReflectionHelper.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Helper #
{		 
public

 

static

 
class

 
ReflectionHelper

 (
{ 
static 
ReflectionHelper 
(  
)  !
{" #
}$ %
public 
static 
IEnumerable !
<! "
T" #
># $
GetEnumerableOfType% 8
<8 9
T9 :
>: ;
(; <
params< B
objectC I
[I J
]J K
constructorArgsL [
)[ \
where] b
Tc d
:e f
classg l
{ 	
List 
< 
T 
> 
objects 
= 
new !
List" &
<& '
T' (
>( )
() *
)* +
;+ ,
foreach 
( 
Type 
type 
in !
Assembly 
. 
GetAssembly $
($ %
typeof% +
(+ ,
T, -
)- .
). /
./ 0
GetTypes0 8
(8 9
)9 :
. 
Where 
( 
myType 
=>  
myType! '
.' (
IsClass( /
&&0 2
!3 4
myType4 :
.: ;

IsAbstract; E
&&F H
myTypeI O
.O P
IsSubclassOfP \
(\ ]
typeof] c
(c d
Td e
)e f
)f g
)g h
)h i
{ 
objects 
. 
Add 
( 
( 
T 
) 
	Activator (
.( )
CreateInstance) 7
(7 8
type8 <
,< =
constructorArgs> M
)M N
)N O
;O P
} 
return 
objects 
; 
} 	
public 
static 
IEnumerable !
<! "
Type" &
>& '
GetInheritedTypes( 9
<9 :
T: ;
>; <
(< =
)= >
where? D
TE F
:G H
classI N
{ 	
return 
Assembly 
. 
GetAssembly '
(' (
typeof( .
(. /
T/ 0
)0 1
)1 2
.2 3
GetTypes3 ;
(; <
)< =
.= >
Where> C
(C D
myTypeD J
=>K M
myTypeN T
.T U
IsClassU \
&&] _
!` a
myTypea g
.g h

IsAbstracth r
&&s u
myTypev |
.| }
IsSubclassOf	} â
(
â ä
typeof
ä ê
(
ê ë
T
ë í
)
í ì
)
ì î
)
î ï
;
ï ñ
} 	
public 
static 
Type 
GetTypeByName (
(( )
Type) -
t. /
,/ 0
string1 7
name8 <
)< =
{   	
var!! 
result!! 
=!! 
Assembly!! !
.!!! "
GetAssembly!!" -
(!!- .
t!!. /
)!!/ 0
.!!0 1
GetTypes!!1 9
(!!9 :
)!!: ;
.!!; <
Where!!< A
(!!A B
myType!!B H
=>!!I K
myType!!L R
.!!R S
Name!!S W
==!!X Z
name!![ _
)!!_ `
.!!` a
FirstOrDefault!!a o
(!!o p
)!!p q
;!!q r
return"" 
result"" 
;"" 
}## 	
public%% 
static%% 
Type%% 
GetTypeByName%% (
<%%( )
T%%) *
>%%* +
(%%+ ,
string%%, 2
name%%3 7
)%%7 8
{&& 	
var'' 
t'' 
='' 
typeof'' 
('' 
T'' 
)'' 
;'' 
return(( 
GetTypeByName((  
(((  !
t((! "
,((" #
name(($ (
)((( )
;(() *
})) 	
public++ 
static++ 
bool++ 
IsEnum++ !
(++! "
Type++" &
t++' (
)++( )
{,, 	
if-- 
(-- 
t-- 
.-- 
IsEnum-- 
)-- 
return--  
true--! %
;--% &
return.. 
t.. 
... 
IsGenericType.. "
&&..# %
t// 
.// $
GetGenericTypeDefinition// -
(//- .
)//. /
==//0 2
typeof//3 9
(//9 :
Nullable//: B
<//B C
>//C D
)//D E
&&//F H
t00 
.00 
GetGenericArguments00 (
(00( )
)00) *
[00* +
$num00+ ,
]00, -
.00- .
IsEnum00. 4
;004 5
}33 	
}55 
}66 â&
ÜD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\ResultStatusConverter.cs
	namespace		 	
Infoline		
 
.		 
	Framework		 
.		 
Helper		 #
{

 
public 

class !
ResultStatusConverter &
:' (
JsonConverter) 6
{ 
public 
override 
bool 

CanConvert '
(' (
Type( ,

objectType- 7
)7 8
{ 	
return 
( 
typeof 
( 
ResultStatus '
)' (
.( )
IsAssignableFrom) 9
(9 :

objectType: D
)D E
)E F
;F G
} 	
public 
override 
void 
	WriteJson &
(& '

JsonWriter' 1
writer2 8
,8 9
object: @
valueA F
,F G
JsonSerializerH V

serializerW a
)a b
{ 	
}"" 	
public$$ 
override$$ 
object$$ 
ReadJson$$ '
($$' (

JsonReader$$( 2
reader$$3 9
,$$9 :
Type$$; ?

objectType$$@ J
,$$J K
object$$L R
existingValue$$S `
,$$` a
JsonSerializer$$b p

serializer$$q {
)$${ |
{%% 	
if'' 
('' 
reader'' 
.'' 
	TokenType''  
==''! #
	JsonToken''$ -
.''- .
StartObject''. 9
&&'': <
(''= >
typeof''> D
(''D E
ResultStatus''E Q
)''Q R
.''R S
IsAssignableFrom''S c
(''c d

objectType''d n
)''n o
)''o p
)''p q
{(( 
var)) 
result)) 
=)) 
	Activator)) &
.))& '
CreateInstance))' 5
())5 6

objectType))6 @
)))@ A
;))A B
reader** 
.** 
Read** 
(** 
)** 
;** 
while++ 
(++ 
reader++ 
.++ 
	TokenType++ '
==++( *
	JsonToken+++ 4
.++4 5
PropertyName++5 A
)++A B
{,, 
var-- 
name-- 
=-- 
reader-- %
.--% &
Value--& +
.--+ ,
ToString--, 4
(--4 5
)--5 6
;--6 7
reader.. 
... 
Read.. 
(..  
)..  !
;..! "
if// 
(// 
name// 
!=// 
$str//  )
)//) *
{00 
object11 
val11 "
=11# $
reader11% +
.11+ ,
Value11, 1
;111 2
reader22 
.22 
Read22 #
(22# $
)22$ %
;22% &
result33 
.33 
GetType33 &
(33& '
)33' (
.33( )
GetProperty33) 4
(334 5
name335 9
)339 :
.33: ;
SetValue33; C
(33C D
result33D J
,33J K
val33L O
)33O P
;33P Q
}44 
else55 
{66 
var77 
val77 
=77  !

serializer77" ,
.77, -
Deserialize77- 8
(778 9
reader779 ?
,77? @

objectType77A K
.77K L 
GenericTypeArguments77L `
[77` a
$num77a b
]77b c
)77c d
;77d e
reader88 
.88 
Read88 #
(88# $
)88$ %
;88% &
var:: 
prop::  
=::! "
result::# )
.::) *
GetType::* 1
(::1 2
)::2 3
.::3 4
GetProperties::4 A
(::A B
)::B C
.::C D
Where::D I
(::I J
a::J K
=>::L N
a::O P
.::P Q
Name::Q U
==::V X
$str::Y b
&&::c e
a::f g
.::g h
DeclaringType::h u
!=::v x
typeof::y 
(	:: Ä
object
::Ä Ü
)
::Ü á
)
::á à
.
::à â
FirstOrDefault
::â ó
(
::ó ò
)
::ò ô
;
::ô ö
prop;; 
.;; 
SetValue;; %
(;;% &
result;;& ,
,;;, -
val;;. 1
);;1 2
;;;2 3
}<< 
}== 
return>> 
result>> 
;>> 
}?? 
return@@ 

serializer@@ 
.@@ 
Deserialize@@ )
(@@) *
reader@@* 0
)@@0 1
;@@1 2
}BB 	
}CC 
}DD ™3
~D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\SQLTypeMapper.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Helper #
{ 
class		 	
SQLTypeMapper		
 
{

 
static 

Dictionary 
< 
Type 
, 
string  &
>& '
_types( .
=/ 0
new1 4

Dictionary5 ?
<? @
Type@ D
,D E
stringF L
>L M
(M N
)N O
;O P
static 
SQLTypeMapper 
( 
) 
{ 	
_types 
[ 
typeof 
( 
long 
) 
]  
=! "
$str# +
;+ ,
_types 
[ 
typeof 
( 
long 
? 
)  
]  !
=" #
$str$ ,
;, -
_types 
[ 
typeof 
( 
bool 
) 
]  
=! "
$str# (
;( )
_types 
[ 
typeof 
( 
bool 
? 
)  
]  !
=" #
$str$ )
;) *
_types 
[ 
typeof 
( 
char 
) 
]  
=! "
$str# )
;) *
_types 
[ 
typeof 
( 
char 
? 
)  
]  !
=" #
$str$ *
;* +
_types 
[ 
typeof 
( 
DateTime "
)" #
]# $
=% &
$str' 1
;1 2
_types 
[ 
typeof 
( 
DateTime "
?" #
)# $
]$ %
=& '
$str( 2
;2 3
_types 
[ 
typeof 
( 
DateTimeOffset (
)( )
]) *
=+ ,
$str- =
;= >
_types 
[ 
typeof 
( 
DateTimeOffset (
?( )
)) *
]* +
=, -
$str. >
;> ?
_types 
[ 
typeof 
( 
decimal !
)! "
]" #
=$ %
$str& /
;/ 0
_types 
[ 
typeof 
( 
decimal !
?! "
)" #
]# $
=% &
$str' 0
;0 1
_types 
[ 
typeof 
( 
double  
)  !
]! "
=# $
$str% ,
;, -
_types 
[ 
typeof 
( 
double  
?  !
)! "
]" #
=$ %
$str& -
;- .
_types!! 
[!! 
typeof!! 
(!! 
int!! 
)!! 
]!! 
=!!  !
$str!!" '
;!!' (
_types"" 
["" 
typeof"" 
("" 
int"" 
?"" 
)"" 
]""  
=""! "
$str""# (
;""( )
_types'' 
['' 
typeof'' 
('' 
string''  
)''  !
]''! "
=''# $
$str''% 4
;''4 5
_types++ 
[++ 
typeof++ 
(++ 
short++ 
)++  
]++  !
=++" #
$str++$ .
;++. /
_types,, 
[,, 
typeof,, 
(,, 
short,, 
?,,  
),,  !
],,! "
=,,# $
$str,,% /
;,,/ 0
_types00 
[00 
typeof00 
(00 
TimeSpan00 "
)00" #
]00# $
=00% &
$str00' -
;00- .
_types11 
[11 
typeof11 
(11 
TimeSpan11 "
?11" #
)11# $
]11$ %
=11& '
$str11( .
;11. /
_types33 
[33 
typeof33 
(33 
byte33 
)33 
]33  
=33! "
$str33# ,
;33, -
_types44 
[44 
typeof44 
(44 
byte44 
?44 
)44  
]44  !
=44" #
$str44$ -
;44- .
_types55 
[55 
typeof55 
(55 
Guid55 
)55 
]55  
=55! "
$str55# 5
;555 6
_types66 
[66 
typeof66 
(66 
Guid66 
?66 
)66  
]66  !
=66" #
$str66$ 6
;666 7
_types77 
[77 
typeof77 
(77 
byte77 
[77 
]77  
)77  !
]77! "
=77# $
$str77% 5
;775 6
}:: 	
public<< 
static<< 
string<< 

GetSQLType<< '
<<<' (
T<<( )
><<) *
(<<* +
)<<+ ,
{== 	
return>> 

GetSQLType>> 
(>> 
typeof>> $
(>>$ %
T>>% &
)>>& '
)>>' (
;>>( )
}?? 	
publicAA 
staticAA 
stringAA 

GetSQLTypeAA '
(AA' (
TypeAA( ,
tAA- .
)AA. /
{BB 	
stringCC 
resultCC 
=CC 
nullCC  
;CC  !
_typesDD 
.DD 
TryGetValueDD 
(DD 
tDD  
,DD  !
outDD" %
resultDD& ,
)DD, -
;DD- .
ifFF 
(FF 
ReflectionHelperFF  
.FF  !
IsEnumFF! '
(FF' (
tFF( )
)FF) *
)FF* +
returnGG 
$strGG &
;GG& '
ifII 
(II 
resultII 
==II 
nullII 
)II 
resultII  &
=II' (
$strII) +
;II+ ,
returnJJ 
resultJJ 
;JJ 
}KK 	
}MM 
}NN Æ 
|D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\SystemConst.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Helper #
{ 
public		 

static		 
class		 
SystemConst		 #
{

 
public 
enum 
CachePrefix 
{ 	
User 
= 
$num 
, 
Roles 
= 
$num 
, 
Firms 
= 
$num 
, 
Cities 
= 
$num 
} 	
public 
const 
string 
CACHE_KEY__ALL *
=+ ,
$str- 2
;2 3
public 
const 
string 
TOKEN__NAME '
=( )
$str* 3
;3 4
public 
const 
int )
TOKEN__EXPIREDURATION_MINUTES 6
=7 8
$num9 <
;< =
public 
const 
string 
TOKEN__ABONE_ID +
=, -
$str. 7
;7 8
public 
const 
string 
TOKEN__TABLET_ID ,
=- .
$str/ 9
;9 :
public 
const 
string 
TOKEN__APP_VERSION .
=/ 0
$str1 =
;= >
public 
const 
string 
TOKEN__DATECREATED .
=/ 0
$str1 >
;> ?
public 
const 
string 
TOKEN__USER_ID *
=+ ,
$str- 5
;5 6
public 
const 
string 
TOKEN__COORDINATE -
=. /
$str0 <
;< =
public   
const   
string   "
ERROR_MESSAGE__GENERAL   2
=  3 4
$str  5 B
;  B C
public!! 
const!! 
string!! %
ERROR_MESSAGE__CREDENTIAL!! 5
=!!6 7
$str!!8 Q
;!!Q R
public## 
const## 
string## !
REQUEST_PROPERTY__LOG## 1
=##2 3
$str##4 9
;##9 :
public%% 
const%% 
string%% #
MESSAGE_RESULT__SUCCESS%% 3
=%%4 5
$str%%6 F
;%%F G
public&& 
const&& 
string&& *
MESSAGE_RESULT__DATABASE_ERROR&& :
=&&; <
$str&&= P
;&&P Q
public'' 
const'' 
string'' +
MESSAGE_RESULT__BUSSINESS_ERROR'' ;
=''< =
$str''> P
;''P Q
public(( 
const(( 
string(( ,
 MESSAGE_RESULT__UNEXPECTED_ERROR(( <
=((= >
$str((? Q
;((Q R
public-- 
const-- 
string-- 
BadgeType_CKS-- )
=--* +
$str--, 1
;--1 2
public.. 
const.. 
string.. #
BadgeType_TUKAS2014Urun.. 3
=..4 5
$str..6 G
;..G H
public// 
const// 
string// %
BadgeType_TUKAS2014Hayvan// 5
=//6 7
$str//8 K
;//K L
public00 
const00 
string00 &
BadgeType_TUKAS2014Ekipman00 6
=007 8
$str009 L
;00L M
public11 
const11 
string11 #
BadgeType_TUKAS2016Urun11 3
=114 5
$str116 G
;11G H
public22 
const22 
string22 %
BadgeType_TUKAS2016Hayvan22 5
=226 7
$str228 K
;22K L
public33 
const33 
string33 &
BadgeType_TUKAS2016Ekipman33 6
=337 8
$str339 L
;33L M
public44 
const44 
string44 
BadgeType_HAYBIS44 ,
=44- .
$str44/ 7
;447 8
}77 
}88 √H
{D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\TableClass.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Helper #
{ 
public 

class 

TableClass 
{ 
private		 
List		 
<		 
KeyValuePair		 !
<		! "
String		" (
,		( )
Type		* .
>		. /
>		/ 0

_fieldInfo		1 ;
=		< =
new		> A
List		B F
<		F G
KeyValuePair		G S
<		S T
String		T Z
,		Z [
Type		\ `
>		` a
>		a b
(		b c
)		c d
;		d e
private

 
string

 

_className

 !
=

" #
String

$ *
.

* +
Empty

+ 0
;

0 1
private 

Dictionary 
< 
Type 
,  
String! '
>' (

dataMapper) 3
{ 	
get 
{ 
var 

dataMapper 
=  
new! $

Dictionary% /
</ 0
Type0 4
,4 5
string6 <
>< =
(= >
)> ?
;? @

dataMapper 
. 
Add 
( 
typeof %
(% &
int& )
)) *
,* +
$str, 3
)3 4
;4 5

dataMapper 
. 
Add 
( 
typeof %
(% &
int& )
?) *
)* +
,+ ,
$str- 4
)4 5
;5 6

dataMapper 
. 
Add 
( 
typeof %
(% &
string& ,
), -
,- .
$str/ ?
)? @
;@ A

dataMapper 
. 
Add 
( 
typeof %
(% &
bool& *
)* +
,+ ,
$str- 4
)4 5
;5 6

dataMapper 
. 
Add 
( 
typeof %
(% &
bool& *
?* +
)+ ,
,, -
$str. 5
)5 6
;6 7

dataMapper 
. 
Add 
( 
typeof %
(% &
DateTime& .
). /
,/ 0
$str1 =
)= >
;> ?

dataMapper 
. 
Add 
( 
typeof %
(% &
DateTime& .
?. /
)/ 0
,0 1
$str2 >
)> ?
;? @

dataMapper 
. 
Add 
( 
typeof %
(% &
float& +
)+ ,
,, -
$str. 7
)7 8
;8 9

dataMapper 
. 
Add 
( 
typeof %
(% &
float& +
?+ ,
), -
,- .
$str/ 8
)8 9
;9 :

dataMapper 
. 
Add 
( 
typeof %
(% &
decimal& -
)- .
,. /
$str0 9
)9 :
;: ;

dataMapper 
. 
Add 
( 
typeof %
(% &
decimal& -
?- .
). /
,/ 0
$str1 :
): ;
;; <

dataMapper!! 
.!! 
Add!! 
(!! 
typeof!! %
(!!% &
Guid!!& *
)!!* +
,!!+ ,
$str!!- ?
)!!? @
;!!@ A
return"" 

dataMapper"" !
;""! "
}## 
}$$ 	
public%% 
List%% 
<%% 
KeyValuePair%%  
<%%  !
string%%! '
,%%' (
Type%%) -
>%%- .
>%%. /
Fields%%0 6
{&& 	
get'' 
{'' 
return'' 
this'' 
.'' 

_fieldInfo'' (
;''( )
}''* +
set(( 
{(( 
this(( 
.(( 

_fieldInfo(( !
=((" #
value(($ )
;(() *
}((+ ,
})) 	
public++ 
string++ 
	ClassName++ 
{,, 	
get-- 
{-- 
return-- 
this-- 
.-- 

_className-- (
;--( )
}--* +
set.. 
{.. 
this.. 
... 

_className.. !
=.." #
value..$ )
;..) *
}..+ ,
}// 	
public11 

TableClass11 
(11 
Type11 
t11  
)11  !
{22 	
this33 
.33 

_className33 
=33 
t33 
.33  
Name33  $
;33$ %
foreach55 
(55 
PropertyInfo55 !
p55" #
in55$ &
t55' (
.55( )
GetProperties55) 6
(556 7
)557 8
)558 9
{66 
KeyValuePair77 
<77 
string77 #
,77# $
Type77% )
>77) *
field77+ 0
=771 2
new773 6
KeyValuePair777 C
<77C D
string77D J
,77J K
Type77L P
>77P Q
(77Q R
p77R S
.77S T
Name77T X
,77X Y
p77Z [
.77[ \
PropertyType77\ h
)77h i
;77i j
this99 
.99 
Fields99 
.99 
Add99 
(99  
field99  %
)99% &
;99& '
}:: 
};; 	
public== 
string== 
CreateTableScript== '
(==' (
)==( )
{>> 	
System?? 
.?? 
Text?? 
.?? 
StringBuilder?? %
script??& ,
=??- .
new??/ 2
StringBuilder??3 @
(??@ A
)??A B
;??B C
script@@ 
.@@ 

AppendLine@@ 
(@@ 
string@@ $
.@@$ %
Format@@% +
(@@+ ,
$str@@, u
,@@u v
this@@w {
.@@{ |
	ClassName	@@| Ö
)
@@Ö Ü
)
@@Ü á
;
@@á à
scriptAA 
.AA 

AppendLineAA 
(AA 
$strAA 2
+AA3 4
thisAA5 9
.AA9 :
	ClassNameAA: C
+AAC D
$strAAD G
)AAG H
;AAH I
scriptBB 
.BB 

AppendLineBB 
(BB 
$strBB !
)BB! "
;BB" #
scriptCC 
.CC 

AppendLineCC 
(CC 
$strCC D
)CCD E
;CCE F
scriptDD 
.DD 

AppendLineDD 
(DD 
$strDD !
)DD! "
;DD" #
forFF 
(FF 
intFF 
iFF 
=FF 
$numFF 
;FF 
iFF 
<FF 
thisFF  $
.FF$ %
FieldsFF% +
.FF+ ,
CountFF, 1
;FF1 2
iFF3 4
++FF4 6
)FF6 7
{GG 
KeyValuePairHH 
<HH 
StringHH #
,HH# $
TypeHH% )
>HH) *
fieldHH+ 0
=HH1 2
thisHH3 7
.HH7 8
FieldsHH8 >
[HH> ?
iHH? @
]HH@ A
;HHA B
ifJJ 
(JJ 
fieldJJ 
.JJ 
KeyJJ 
==JJ  
$strJJ! %
)JJ% &
continueJJ' /
;JJ/ 0
ifKK 
(KK 

dataMapperKK 
.KK 
ContainsKeyKK *
(KK* +
fieldKK+ 0
.KK0 1
ValueKK1 6
)KK6 7
)KK7 8
{LL 
scriptMM 
.MM 

AppendLineMM %
(MM% &
stringMM& ,
.MM, -
FormatMM- 3
(MM3 4
$str	MM4 ¨
,
MM¨ ≠
this
MM≠ ±
.
MM± ≤
	ClassName
MM≤ ª
,
MMª º
field
MMº ¡
.
MM¡ ¬
Key
MM¬ ≈
)
MM≈ ∆
)
MM∆ «
;
MM« »
scriptOO 
.OO 

AppendLineOO %
(OO% &
stringOO& ,
.OO, -
FormatOO- 3
(OO3 4
$strOO4 ]
,OO] ^
thisOO^ b
.OOb c
	ClassNameOOc l
,OOl m
fieldOOm r
.OOr s
KeyOOs v
,OOv w

dataMapper	OOw Å
[
OOÅ Ç
field
OOÇ á
.
OOá à
Value
OOà ç
]
OOç é
)
OOé è
)
OOè ê
;
OOê ë
scriptRR 
.RR 
AppendRR !
(RR! "
EnvironmentRR" -
.RR- .
NewLineRR. 5
)RR5 6
;RR6 7
}SS 
}TT 
returnVV 
scriptVV 
.VV 
ToStringVV "
(VV" #
)VV# $
;VV$ %
}WW 	
}XX 
}YY ±

zD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\TimeTrace.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Helper #
{ 
public 

class 
	TimeTrace 
: 
IDisposable (
{		 
DateTime

 
start

 
=

 
DateTime

 !
.

! "
Now

" %
;

% &
string 
zone 
; 
public 
	TimeTrace 
( 
string 
msg  #
)# $
{ 	
zone 
= 
msg 
; 
} 	
public 
void 
Dispose 
( 
) 
{ 	
System 
. 
Diagnostics 
. 
Debug $
.$ %
	WriteLine% .
(. /
$str/ 8
,8 9
zone: >
,> ?
DateTime@ H
.H I
NowI L
.L M
SubtractM U
(U V
startV [
)[ \
.\ ]
TotalMilliseconds] n
)n o
;o p
} 	
} 
} |
zD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\Transform.cs‹	
ÅD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\UnitTestDetector.cs
	namespace 	
Infoline
 
. 
Helper 
{ 
public 

static 
class 
UnitTestDetector (
{		 
static

 
UnitTestDetector

 
(

  
)

  !
{ 	
string 
testAssemblyName #
=$ %
$str& ]
;] ^
UnitTestDetector 
. 
IsInUnitTest )
=* +
	AppDomain, 5
.5 6
CurrentDomain6 C
.C D
GetAssembliesD Q
(Q R
)R S
. 
Any 
( 
a 
=> 
a 
. 
FullName $
.$ %

StartsWith% /
(/ 0
testAssemblyName0 @
)@ A
)A B
;B C
} 	
public 
static 
bool 
IsInUnitTest '
{( )
get* -
;- .
private/ 6
set7 :
;: ;
}< =
} 
} ‰8
|D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\WebDownload.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Helper #
{		 
public 

class 
WebDownload 
: 
	WebClient (
{ 
public 
int 
Timeout 
{ 
get  
;  !
set" %
;% &
}' (
CookieContainer 
cookiecontainer '
;' (
public 
string 
ticid 
{ 
get !
;! "
set# &
;& '
}( )
string 
username 
{ 
get 
; 
set "
;" #
}$ %
string 
pass 
{ 
get 
; 
set 
; 
}  !
string 
LOGINDOMAIN 
{ 
get  
;  !
set" %
;% &
}' (
public 
string 
	ticketsid 
{  !
get" %
;% &
set' *
;* +
}, -
public 
WebDownload 
( 
CookieContainer *
cookiecontainer+ :
,: ;
string< B
_logindomainC O
,O P
stringQ W
	_usernameX a
,a b
stringc i
	_passwordj s
)s t
{ 	
this 
. 
cookiecontainer  
=! "
cookiecontainer# 2
;2 3
this 
. 
Timeout 
= 
$num !
;! "
this 
. 
username 
= 
	_username %
;% &
this 
. 
pass 
= 
	_password !
;! "
this 
. 
LOGINDOMAIN 
= 
_logindomain +
;+ ,
login 
( 
) 
; 
} 	
void 
login 
( 
) 
{ 	
var 
nvc 
= 
new 
NameValueCollection -
(- .
). /
{   
{!! 
$str!! 
,!! 
this!!  $
.!!$ %
username!!% -
}!!- .
,!!. /
{"" 
$str"" 
,"" 
this""  $
.""$ %
pass""% )
}"") *
,""* +
}$$ 
;$$ 
	ticketsid%% 
=%% 
Encoding%%  
.%%  !
UTF8%%! %
.%%% &
	GetString%%& /
(%%/ 0
this%%0 4
.%%4 5
UploadValues%%5 A
(%%A B
LOGINDOMAIN%%B M
,%%M N
nvc%%O R
)%%R S
)%%S T
;%%T U
}'' 	
	protected(( 
override(( 

WebRequest(( %
GetWebRequest((& 3
(((3 4
Uri((4 7
address((8 ?
)((? @
{)) 	
var** 
result** 
=** 
base** 
.** 
GetWebRequest** +
(**+ ,
address**, 3
)**3 4
as**5 7
HttpWebRequest**8 F
;**F G
result++ 
.++ 
Timeout++ 
=++ 
this++ !
.++! "
Timeout++" )
;++) *
result,, 
.,, 
CookieContainer,, "
=,,# $
cookiecontainer,,% 4
;,,4 5
result-- 
.-- "
AutomaticDecompression-- )
=--* + 
DecompressionMethods--, @
.--@ A
Deflate--A H
|--I J 
DecompressionMethods--K _
.--_ `
GZip--` d
;--d e
return.. 
result.. 
;.. 
}// 	
public00 
string00 
GetData00 
(00 
string00 $
url00% (
)00( )
{11 	
var22 
text22 
=22 
Encoding22 
.22  
UTF822  $
.22$ %
	GetString22% .
(22. /
this22/ 3
.223 4
DownloadData224 @
(22@ A
url22A D
)22D E
)22E F
;22F G
if33 
(33 
text33 
.33 
IndexOf33 
(33 
$str33 *
)33* +
>33, -
$num33. /
)33/ 0
{44 
login55 
(55 
)55 
;55 
text66 
=66 
Encoding66 
.66  
UTF866  $
.66$ %
	GetString66% .
(66. /
this66/ 3
.663 4
DownloadData664 @
(66@ A
url66A D
)66D E
)66E F
;66F G
}77 
return88 
text88 
;88 
}99 	
public:: 
string:: 
PostData:: 
(:: 
string:: %
url::& )
,::) *
NameValueCollection::+ >
nvc::? B
)::B C
{;; 	
return<< 
Encoding<< 
.<< 
UTF8<<  
.<<  !
	GetString<<! *
(<<* +
this<<+ /
.<</ 0
UploadValues<<0 <
(<<< =
url<<= @
,<<@ A
nvc<<B E
)<<E F
)<<F G
;<<G H
}== 	
public>> 
string>> 

PostString>>  
(>>  !
string>>! '
url>>( +
,>>+ ,
string>>- 3
str>>4 7
)>>7 8
{?? 	
var@@ 
text@@ 
=@@ 
this@@ 
.@@ 
UploadString@@ (
(@@( )
url@@) ,
,@@, -
str@@. 1
)@@1 2
;@@2 3
ifAA 
(AA 
textAA 
.AA 
IndexOfAA 
(AA 
$strAA *
)AA* +
>AA, -
$numAA. /
)AA/ 0
{BB 
loginCC 
(CC 
)CC 
;CC 
textDD 
=DD 
thisDD 
.DD 
UploadStringDD (
(DD( )
urlDD) ,
,DD, -
strDD. 1
)DD1 2
;DD2 3
}EE 
ifFF 
(FF 
textFF 
.FF 
IndexOfFF 
(FF 
$strFF *
)FF* +
>FF, -
$numFF. /
)FF/ 0
returnGG 
nullGG 
;GG 
returnII 
textII 
;II 
}JJ 	
publicKK 
byteKK 
[KK 
]KK 
DataKK 
(KK 
stringKK !
linkKK" &
)KK& '
{LL 	
loginMM 
(MM 
)MM 
;MM 
returnNN 
thisNN 
.NN 
DownloadDataNN $
(NN$ %
linkNN% )
)NN) *
;NN* +
}QQ 	
}SS 
}TT ß(
zD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\XmlHelper.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Helper #
{ 
public

 

class

 
	XmlHelper

 
{ 
public 
static 
string 
	Serialize &
<& '
T' (
>( )
() *
T* +
instance, 4
,4 5
bool6 :
dontGetVersion; I
=J K
falseL Q
)Q R
{ 	
using 
( 
var 
ms 
= 
new 
MemoryStream  ,
(, -
)- .
). /
{ 
var 
ns 
= 
new  #
XmlSerializerNamespaces! 8
(8 9
)9 :
;: ;
ns 
. 
Add 
( 
$str 
, 
$str !
)! "
;" #
new 
XmlSerializer %
(% &
instance& .
!=/ 1
null2 6
?7 8
instance9 A
.A B
GetTypeB I
(I J
)J K
:L M
typeofN T
(T U
stringU [
)[ \
)\ ]
.] ^
	Serialize^ g
(g h
msh j
,j k
instancel t
,t u
nsv x
)x y
;y z
ms 
. 
Position 
=  !
$num" #
;# $
var 
sr 
= 
new  
StreamReader! -
(- .
ms. 0
)0 1
;1 2
var 
result 
=  
sr! #
.# $
	ReadToEnd$ -
(- .
). /
;/ 0
return 
result !
;! "
}   
}!! 	
public## 
static## 
T## 
Deserialize## #
<### $
T##$ %
>##% &
(##& '
string##' -

serialized##. 8
)##8 9
{$$ 	
using%% 
(%% 
var%% 
ms%% 
=%% 
new%% 
MemoryStream%%  ,
(%%, -
)%%- .
)%%. /
{&& 
using'' 
('' 
var'' 
writer'' !
=''" #
new''$ '
StreamWriter''( 4
(''4 5
ms''5 7
)''7 8
)''8 9
{(( 
writer)) 
.)) 
Write))  
())  !

serialized))! +
)))+ ,
;)), -
writer** 
.** 
Flush**  
(**  !
)**! "
;**" #
ms,, 
.,, 
Position,, 
=,,  !
$num,," #
;,,# $
XmlSerializer.. !
deserializer.." .
=../ 0
new..1 4
XmlSerializer..5 B
(..B C
typeof..C I
(..I J
T..J K
)..K L
)..L M
;..M N
return// 
(// 
T// 
)// 
deserializer// *
.//* +
Deserialize//+ 6
(//6 7
ms//7 9
)//9 :
;//: ;
}00 
}22 
}33 	
public55 
static55 
string55 
SerializeObject55 ,
<55, -
T55- .
>55. /
(55/ 0
T550 1
value552 7
)557 8
{66 	
if77 
(77 
value77 
==77 
null77 
)77 
{88 
return99 
string99 
.99 
Empty99 #
;99# $
}:: 
try;; 
{<< 
var== 
xmlserializer== !
===" #
new==$ '
XmlSerializer==( 5
(==5 6
typeof==6 <
(==< =
T=== >
)==> ?
)==? @
;==@ A
var>> 
stringWriter>>  
=>>! "
new>># &
StringWriter>>' 3
(>>3 4
)>>4 5
;>>5 6
using?? 
(?? 
var?? 
writer?? !
=??" #
	XmlWriter??$ -
.??- .
Create??. 4
(??4 5
stringWriter??5 A
)??A B
)??B C
{@@ 
xmlserializerAA !
.AA! "
	SerializeAA" +
(AA+ ,
writerAA, 2
,AA2 3
valueAA4 9
)AA9 :
;AA: ;
returnBB 
stringWriterBB '
.BB' (
ToStringBB( 0
(BB0 1
)BB1 2
;BB2 3
}CC 
}DD 
catchEE 
(EE 
	ExceptionEE 
exEE 
)EE  
{FF 
throwGG 
newGG 
	ExceptionGG #
(GG# $
$strGG$ 7
,GG7 8
exGG9 ;
)GG; <
;GG< =
}HH 
}II 	
}KK 
}NN Êè
{D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\ZipCreated.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
Helper #
{ 
public 

static 
class 
Zip 
{ 
private 
static 
void 
CopyTo "
(" #
Stream# )
src* -
,- .
Stream/ 5
dest6 :
): ;
{ 	
byte 
[ 
] 
bytes 
= 
new 
byte #
[# $
$num$ (
]( )
;) *
int 
cnt 
; 
while 
( 
( 
cnt 
= 
src 
. 
Read "
(" #
bytes# (
,( )
$num* +
,+ ,
bytes- 2
.2 3
Length3 9
)9 :
): ;
!=< >
$num? @
)@ A
{ 
dest 
. 
Write 
( 
bytes  
,  !
$num" #
,# $
cnt% (
)( )
;) *
} 
} 	
public 
static 
byte 
[ 
] 
GZip !
(! "
string" (
str) ,
), -
{ 	
var 
bytes 
= 
Encoding  
.  !
UTF8! %
.% &
GetBytes& .
(. /
str/ 2
)2 3
;3 4
using 
( 
var 
msi 
= 
new  
MemoryStream! -
(- .
bytes. 3
)3 4
)4 5
using   
(   
var   
mso   
=   
new    
MemoryStream  ! -
(  - .
)  . /
)  / 0
{!! 
using"" 
("" 
var"" 
gs"" 
="" 
new""  #

GZipStream""$ .
("". /
mso""/ 2
,""2 3
CompressionMode""4 C
.""C D
Compress""D L
)""L M
)""M N
{## 
CopyTo%% 
(%% 
msi%% 
,%% 
gs%%  "
)%%" #
;%%# $
}&& 
return'' 
mso'' 
.'' 
ToArray'' "
(''" #
)''# $
;''$ %
}(( 
})) 	
public++ 
static++ 
string++ 
Unzip++ "
(++" #
byte++# '
[++' (
]++( )
bytes++* /
)++/ 0
{,, 	
using-- 
(-- 
var-- 
msi-- 
=-- 
new--  
MemoryStream--! -
(--- .
bytes--. 3
)--3 4
)--4 5
using.. 
(.. 
var.. 
mso.. 
=.. 
new..  
MemoryStream..! -
(..- .
)... /
)../ 0
{// 
using00 
(00 
var00 
gs00 
=00 
new00  #

GZipStream00$ .
(00. /
msi00/ 2
,002 3
CompressionMode004 C
.00C D

Decompress00D N
)00N O
)00O P
{11 
CopyTo33 
(33 
gs33 
,33 
mso33 "
)33" #
;33# $
}44 
return55 
Encoding55 
.55  
UTF855  $
.55$ %
	GetString55% .
(55. /
mso55/ 2
.552 3
ToArray553 :
(55: ;
)55; <
)55< =
;55= >
}66 
}77 	
public:: 
static:: 
ResultStatus:: "
Created::# *
(::* +
string::+ 1
zipFile::2 9
,::9 :
string::; A
[::A B
]::B C
files::D I
,::I J
bool::K O
delfile::P W
=::X Y
false::Z _
)::_ `
{;; 	
try<< 
{== 
if?? 
(?? 
File?? 
.?? 
Exists?? 
(??  
zipFile??  '
)??' (
)??( )
File??* .
.??. /
Delete??/ 5
(??5 6
zipFile??6 =
)??= >
;??> ?
var@@ 
type@@ 
=@@ 
ArchiveType@@ &
.@@& '
Zip@@' *
;@@* +
varAA 
compressionTypeAA #
=AA$ %
CompressionTypeAA& 5
.AA5 6
DeflateAA6 =
;AA= >
switchCC 
(CC 
PathCC 
.CC 
GetExtensionCC )
(CC) *
zipFileCC* 1
)CC1 2
)CC2 3
{DD 
caseFF 
$strFF 
:FF  
typeGG 
=GG 
ArchiveTypeGG *
.GG* +
ZipGG+ .
;GG. /
compressionTypeHH '
=HH( )
CompressionTypeHH* 9
.HH9 :
DeflateHH: A
;HHA B
breakII 
;II 
caseKK 
$strKK 
:KK  
typeLL 
=LL 
ArchiveTypeLL *
.LL* +
TarLL+ .
;LL. /
compressionTypeMM '
=MM( )
CompressionTypeMM* 9
.MM9 :
BZip2MM: ?
;MM? @
breakNN 
;NN 
casePP 
$strPP 
:PP 
typeQQ 
=QQ 
ArchiveTypeQQ *
.QQ* +
GZipQQ+ /
;QQ/ 0
compressionTypeRR '
=RR( )
CompressionTypeRR* 9
.RR9 :
GZipRR: >
;RR> ?
breakSS 
;SS 
}TT 
usingVV 
(VV 
StreamVV 
streamVV $
=VV% &
FileVV' +
.VV+ ,
OpenVV, 0
(VV0 1
zipFileVV1 8
,VV8 9
FileModeVV: B
.VVB C
OpenOrCreateVVC O
,VVO P

FileAccessVVQ [
.VV[ \
WriteVV\ a
)VVa b
)VVb c
{WW 
usingXX 
(XX 
varXX 
writerXX %
=XX& '
WriterFactoryXX( 5
.XX5 6
OpenXX6 :
(XX: ;
streamXX; A
,XXA B
typeXXC G
,XXG H
compressionTypeXXI X
)XXX Y
)XXY Z
{YY 
foreachZZ 
(ZZ  !
varZZ! $
fileZZ% )
inZZ* ,
filesZZ- 2
)ZZ2 3
{[[ 
writer\\ "
.\\" #
Write\\# (
(\\( )
Path\\) -
.\\- .
GetFileName\\. 9
(\\9 :
file\\: >
)\\> ?
,\\? @
file\\A E
)\\E F
;\\F G
}]] 
}^^ 
stream__ 
.__ 
Flush__  
(__  !
)__! "
;__" #
}`` 
ifaa 
(aa 
delfileaa 
)aa 
{bb 
foreachcc 
(cc 
varcc  
filecc! %
incc& (
filescc) .
)cc. /
{dd 
ifee 
(ee 
Fileee  
.ee  !
Existsee! '
(ee' (
fileee( ,
)ee, -
)ee- .
Fileff  
.ff  !
Deleteff! '
(ff' (
fileff( ,
)ff, -
;ff- .
}gg 
}hh 
}ii 
catchjj 
(jj 
	Exceptionjj 
exjj 
)jj  
{kk 
returnll 
newll 
ResultStatusll '
{ll( )
resultll* 0
=ll1 2
falsell3 8
,ll8 9
messagell: A
=llB C
exllD F
.llF G
MessagellG N
}llO P
;llP Q
}mm 
returnnn 
newnn 
ResultStatusnn #
{nn$ %
resultnn& ,
=nn- .
truenn/ 3
,nn3 4
messagenn5 <
=nn= >
$strnn? O
}nnP Q
;nnQ R
}oo 	
publicqq 
staticqq 
ResultStatusqq "
Createqq# )
(qq) *
stringqq* 0
zipFileqq1 8
,qq8 9
stringqq: @
	directoryqqA J
,qqJ K
boolqqL P
delDirectoryqqQ ]
=qq^ _
falseqq` e
)qqe f
{rr 	
trytt 
{uu 
ZipFileww 
.ww 
CreateFromDirectoryww +
(ww+ ,
	directoryww, 5
,ww5 6
zipFileww7 >
,ww> ?
CompressionLevelww@ P
.wwP Q
OptimalwwQ X
,wwX Y
falsewwZ _
)ww_ `
;ww` a
ifyy 
(yy 
delDirectoryyy  
)yy  !
{zz 
foreach{{ 
({{ 
var{{  
file{{! %
in{{& (
	Directory{{) 2
.{{2 3
GetFiles{{3 ;
({{; <
	directory{{< E
,{{E F
$str{{G J
,{{J K
SearchOption{{L X
.{{X Y
AllDirectories{{Y g
){{g h
.{{h i
Where{{i n
({{n o
a{{o p
=>{{q s
a{{t u
!={{v x
zipFile	{{y Ä
)
{{Ä Å
.
{{Å Ç
ToArray
{{Ç â
(
{{â ä
)
{{ä ã
)
{{ã å
{|| 
File}} 
.}} 
Delete}} #
(}}# $
file}}$ (
)}}( )
;}}) *
}~~ 
} 
return
ÅÅ 
new
ÅÅ 
ResultStatus
ÅÅ '
{
ÅÅ( )
result
ÅÅ* 0
=
ÅÅ1 2
true
ÅÅ3 7
,
ÅÅ7 8
message
ÅÅ9 @
=
ÅÅA B
$str
ÅÅC l
}
ÅÅm n
;
ÅÅn o
}
ÉÉ 
catch
ÑÑ 
(
ÑÑ 
	Exception
ÑÑ 
ex
ÑÑ 
)
ÑÑ  
{
ÖÖ 
return
ÜÜ 
new
ÜÜ 
ResultStatus
ÜÜ '
{
ÜÜ( )
result
ÜÜ* 0
=
ÜÜ1 2
false
ÜÜ3 8
,
ÜÜ8 9
message
ÜÜ: A
=
ÜÜB C
ex
ÜÜD F
.
ÜÜF G
Message
ÜÜG N
}
ÜÜO P
;
ÜÜP Q
}
áá 
}
ââ 	
public
ãã 
static
ãã 
ResultStatus
ãã "
Created
ãã# *
(
ãã* +
string
ãã+ 1
zipFile
ãã2 9
,
ãã9 :
string
ãã; A
	directory
ããB K
,
ããK L
bool
ããM Q
delDirectory
ããR ^
=
ãã_ `
false
ããa f
)
ããf g
{
åå 	
try
éé 
{
èè 
if
êê 
(
êê 
File
êê 
.
êê 
Exists
êê 
(
êê  
zipFile
êê  '
)
êê' (
)
êê( )
File
êê* .
.
êê. /
Delete
êê/ 5
(
êê5 6
zipFile
êê6 =
)
êê= >
;
êê> ?
var
ëë 
type
ëë 
=
ëë 
ArchiveType
ëë &
.
ëë& '
Zip
ëë' *
;
ëë* +
var
íí 
compressionType
íí #
=
íí$ %
CompressionType
íí& 5
.
íí5 6
Deflate
íí6 =
;
íí= >
switch
îî 
(
îî 
Path
îî 
.
îî 
GetExtension
îî )
(
îî) *
zipFile
îî* 1
)
îî1 2
)
îî2 3
{
ïï 
case
óó 
$str
óó 
:
óó  
type
òò 
=
òò 
ArchiveType
òò *
.
òò* +
Zip
òò+ .
;
òò. /
compressionType
ôô '
=
ôô( )
CompressionType
ôô* 9
.
ôô9 :
Deflate
ôô: A
;
ôôA B
break
öö 
;
öö 
case
úú 
$str
úú 
:
úú  
type
ùù 
=
ùù 
ArchiveType
ùù *
.
ùù* +
Tar
ùù+ .
;
ùù. /
compressionType
ûû '
=
ûû( )
CompressionType
ûû* 9
.
ûû9 :
BZip2
ûû: ?
;
ûû? @
break
üü 
;
üü 
case
°° 
$str
°° 
:
°° 
type
¢¢ 
=
¢¢ 
ArchiveType
¢¢ *
.
¢¢* +
GZip
¢¢+ /
;
¢¢/ 0
compressionType
££ '
=
££( )
CompressionType
££* 9
.
££9 :
GZip
££: >
;
££> ?
break
§§ 
;
§§ 
}
•• 
var
®® 
files
®® 
=
®® 
	Directory
®® %
.
®®% &
GetFiles
®®& .
(
®®. /
	directory
®®/ 8
,
®®8 9
$str
®®: =
,
®®= >
SearchOption
®®? K
.
®®K L
AllDirectories
®®L Z
)
®®Z [
;
®®[ \
using
©© 
(
©© 
Stream
©© 
stream
©© $
=
©©% &
File
©©' +
.
©©+ ,
Open
©©, 0
(
©©0 1
zipFile
©©1 8
,
©©8 9
FileMode
©©: B
.
©©B C
OpenOrCreate
©©C O
,
©©O P

FileAccess
©©Q [
.
©©[ \
Write
©©\ a
)
©©a b
)
©©b c
{
™™ 
files
´´ 
=
´´ 
files
´´ !
.
´´! "
Where
´´" '
(
´´' (
a
´´( )
=>
´´* ,
a
´´- .
!=
´´/ 1
zipFile
´´2 9
)
´´9 :
.
´´: ;
ToArray
´´; B
(
´´B C
)
´´C D
;
´´D E
using
¨¨ 
(
¨¨ 
var
¨¨ 
writer
¨¨ %
=
¨¨& '
WriterFactory
¨¨( 5
.
¨¨5 6
Open
¨¨6 :
(
¨¨: ;
stream
¨¨; A
,
¨¨A B
type
¨¨C G
,
¨¨G H
compressionType
¨¨I X
)
¨¨X Y
)
¨¨Y Z
{
≠≠ 
foreach
ÆÆ 
(
ÆÆ  !
var
ÆÆ! $
file
ÆÆ% )
in
ÆÆ* ,
files
ÆÆ- 2
)
ÆÆ2 3
{
ØØ 
writer
∞∞ "
.
∞∞" #
Write
∞∞# (
(
∞∞( )
Path
∞∞) -
.
∞∞- .
GetFileName
∞∞. 9
(
∞∞9 :
file
∞∞: >
)
∞∞> ?
,
∞∞? @
file
∞∞A E
)
∞∞E F
;
∞∞F G
}
±± 
}
≤≤ 
stream
≥≥ 
.
≥≥ 
Flush
≥≥  
(
≥≥  !
)
≥≥! "
;
≥≥" #
}
¥¥ 
if
µµ 
(
µµ 
delDirectory
µµ  
)
µµ  !
{
∂∂ 
foreach
∑∑ 
(
∑∑ 
var
∑∑  
file
∑∑! %
in
∑∑& (
files
∑∑) .
)
∑∑. /
{
∏∏ 
File
ππ 
.
ππ 
Delete
ππ #
(
ππ# $
file
ππ$ (
)
ππ( )
;
ππ) *
}
∫∫ 
}
ªª 
}
ºº 
catch
ΩΩ 
(
ΩΩ 
	Exception
ΩΩ 
ex
ΩΩ 
)
ΩΩ  
{
ææ 
return
øø 
new
øø 
ResultStatus
øø '
{
øø( )
result
øø* 0
=
øø1 2
false
øø3 8
,
øø8 9
message
øø: A
=
øøB C
ex
øøD F
.
øøF G
Message
øøG N
}
øøO P
;
øøP Q
}
¿¿ 
return
¡¡ 
new
¡¡ 
ResultStatus
¡¡ #
{
¡¡$ %
result
¡¡& ,
=
¡¡- .
true
¡¡/ 3
,
¡¡3 4
message
¡¡5 <
=
¡¡= >
$str
¡¡? h
}
¡¡i j
;
¡¡j k
}
¬¬ 	
public
∆∆ 
static
∆∆ 
bool
∆∆ 
OpenZip
∆∆ "
(
∆∆" #
string
∆∆# )
zipFile
∆∆* 1
,
∆∆1 2
string
∆∆3 9
outdir
∆∆: @
=
∆∆A B
null
∆∆C G
)
∆∆G H
{
«« 	
if
»» 
(
»» 
!
»» 
File
»» 
.
»» 
Exists
»» 
(
»» 
zipFile
»» $
)
»»$ %
)
»»% &
return
»»' -
false
»». 3
;
»»3 4
if
…… 
(
…… 
outdir
…… 
==
…… 
null
…… 
||
…… !
	Directory
……" +
.
……+ ,
Exists
……, 2
(
……2 3
zipFile
……3 :
)
……: ;
)
……; <
{
   
outdir
ÀÀ 
=
ÀÀ 
Path
ÀÀ 
.
ÀÀ 
GetDirectoryName
ÀÀ .
(
ÀÀ. /
zipFile
ÀÀ/ 6
)
ÀÀ6 7
;
ÀÀ7 8
}
ÃÃ 
using
ŒŒ 
(
ŒŒ 
Stream
ŒŒ 
stream
ŒŒ  
=
ŒŒ! "
File
ŒŒ# '
.
ŒŒ' (
OpenRead
ŒŒ( 0
(
ŒŒ0 1
zipFile
ŒŒ1 8
)
ŒŒ8 9
)
ŒŒ9 :
using
œœ 
(
œœ 
IReader
œœ 
reader
œœ !
=
œœ" #
ReaderFactory
œœ$ 1
.
œœ1 2
Open
œœ2 6
(
œœ6 7
stream
œœ7 =
)
œœ= >
)
œœ> ?
{
–– 
while
—— 
(
—— 
reader
—— 
.
—— 
MoveToNextEntry
—— -
(
——- .
)
——. /
)
——/ 0
{
““ 
if
”” 
(
”” 
!
”” 
reader
”” 
.
””  
Entry
””  %
.
””% &
IsDirectory
””& 1
)
””1 2
{
‘‘ 
var
’’ 
c
’’ 
=
’’ 
new
’’  #
ExtractionOptions
’’$ 5
(
’’5 6
)
’’6 7
;
’’7 8
c
÷÷ 
.
÷÷ 
ExtractFullPath
÷÷ )
=
÷÷* +
true
÷÷, 0
;
÷÷0 1
c
◊◊ 
.
◊◊ 
	Overwrite
◊◊ #
=
◊◊$ %
true
◊◊& *
;
◊◊* +
reader
ÿÿ 
.
ÿÿ #
WriteEntryToDirectory
ÿÿ 4
(
ÿÿ4 5
outdir
ÿÿ5 ;
,
ÿÿ; <
c
ÿÿ= >
)
ÿÿ> ?
;
ÿÿ? @
}
ŸŸ 
}
⁄⁄ 
}
‹‹ 
return
ﬁﬁ 
true
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 	
}
„„ 
}‰‰ Ÿ
zD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\IByteConvertable.cs
	namespace 	
Infoline
 
. 
	Framework 
{ 
public 

	interface !
IByteArrayConvertable *
{ 
int 
Size 
{ 
get 
; 
} 
byte 
[ 
] 
GetBytes 
( 
) 
; 
byte 
[ 
] 
GetBytes 
( 
int 

bufferSize &
)& '
;' (
void		 
SetData		 
(		 
byte		 
[		 
]		 
data		  
)		  !
;		! "
}

 
} ∫
yD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Job\IJobService.cs
	namespace 	
Infoline
 
. 
Jobs 
{ 
public 

	interface 
IJobService  
:! "
IService# +
{ 
JobItem 
GetJob 
( 
Guid 
id 
) 
;  
void		 
	SetStatus		 
(		 
string		 
message		 %
,		% &
string		' -
progresmessage		. <
,		< =
double		> D
progress		E M
)		M N
;		N O
void

 
	SetStatus

 
(

 
double

 
progress

 &
,

& '
string

( .
progresmessage

/ =
)

= >
;

> ?
void 
	SetStatus 
( 
double 
progress &
)& '
;' (
void 
	SetStatus 
( 
int 
current "
," #
int$ '
total( -
)- .
;. /
JobItem 
	CreateJob 
( 
Action  
task! %
)% &
;& '
JobItem 
	CreateJob 
( 
Action  
<  !
JobItem! (
>( )
task* .
). /
;/ 0
void 
CollectJobs 
( 
) 
; 
JobItem 
CurrentItem 
{ 
get !
;! "
}# $
} 
} å
uD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Job\JobItem.cs
	namespace 	
Infoline
 
. 
Jobs 
{ 
public 

class 
JobItem 
{ 
public		 
static		 
IJobService		 !

JobService		" ,
{		- .
get		/ 2
{		3 4
return		5 ;
Application		< G
.		G H
Current		H O
.		O P

GetService		P Z
<		Z [
IJobService		[ f
>		f g
(		g h
)		h i
;		i j
}		k l
}		m n
public 
Guid 
Id 
{ 
get 
; 
internal &
set' *
;* +
}, -
public 
Task 
Task 
{ 
get 
; 
internal  (
set) ,
;, -
}. /
public 
bool 
Complete 
{ 
get "
;" #
internal$ ,
set- 0
;0 1
}2 3
public 
string 
StatusMessage #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
double 
Progress 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
ProgressMessage %
{& '
get( +
;+ ,
set- 0
;0 1
}2 3
public 
	Exception 
	Exception "
{# $
get% (
;( )
set* -
;- .
}/ 0
public 
int 

NextUpdate 
{ 
get  #
;# $
set% (
;( )
}* +
public 
bool 
	CanRemove 
{ 
get  #
;# $
set% (
;( )
}* +
public 
string 
	ExtraData 
{  !
get" %
;% &
set' *
;* +
}, -
public 
System 
. 
	Threading 
.  #
CancellationTokenSource  7
CancellationToken8 I
{J K
getL O
;O P
internalQ Y
setZ ]
;] ^
}_ `
public 
void 
Cancel 
( 
) 
{ 	
CancellationToken 
. 
Cancel $
($ %
)% &
;& '
} 	
} 
} ªD
xD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Job\JobService.cs
	namespace		 	
Infoline		
 
.		 
Jobs		 
{

 
[ 
Export 
( 
typeof 
( 
IService 
) 
) 
] 
[ 
ExportMetadata 
( 
$str !
,! "
typeof# )
() *
IJobService* 5
)5 6
)6 7
]7 8
class 	

JobService
 
: 
IJobService "
{ 
internal 
static 

Dictionary "
<" #
Guid# '
,' (
JobItem) 0
>0 1
items2 7
=8 9
new: =

Dictionary> H
<H I
GuidI M
,M N
JobItemO V
>V W
(W X
)X Y
;Y Z
[ 	
ThreadStatic	 
] 
static 
JobItem 
_current 
=  !
null" &
;& '
public 
JobItem 
CurrentItem "
{ 	
get 
{ 
return 
_current !
;! "
}# $
} 	
public 
void 
	SetStatus 
( 
string $
message% ,
,, -
string. 4
progresmessage5 C
,C D
doubleE K
progressL T
)T U
{ 	
if 
( 
_current 
!= 
null  
)  !
{ 
lock 
( 
_current 
) 
{ 
_current 
. 
Progress %
=& '
progress( 0
;0 1
_current   
.   
ProgressMessage   ,
=  - .
progresmessage  / =
;  = >
_current!! 
.!! 
StatusMessage!! *
=!!+ ,
message!!- 4
;!!4 5
}"" 
}## 
}$$ 	
public&& 
void&& 
	SetStatus&& 
(&& 
double&& $
progress&&% -
,&&- .
string&&/ 5
progresmessage&&6 D
)&&D E
{'' 	
if(( 
((( 
_current(( 
!=(( 
null((  
)((  !
{)) 
lock** 
(** 
_current** 
)** 
{++ 
_current,, 
.,, 
Progress,, %
=,,& '
progress,,( 0
;,,0 1
_current-- 
.-- 
ProgressMessage-- ,
=--- .
progresmessage--/ =
;--= >
}.. 
}// 
}00 	
public11 
void11 
	SetStatus11 
(11 
double11 $
progress11% -
)11- .
{22 	
if33 
(33 
_current33 
!=33 
null33  
)33  !
{44 
lock55 
(55 
_current55 
)55 
{66 
_current77 
.77 
Progress77 %
=77& '
progress77( 0
;770 1
}88 
}99 
}:: 	
public;; 
void;; 
	SetStatus;; 
(;; 
int;; !
current;;" )
,;;) *
int;;+ .
total;;/ 4
);;4 5
{<< 	
if== 
(== 
_current== 
!=== 
null==  
)==  !
{>> 
lock?? 
(?? 
_current?? 
)?? 
{@@ 
_currentAA 
.AA 
ProgressAA %
=AA& '
totalAA( -
>AA. /
$numAA0 1
?AA2 3
(AA4 5
doubleAA5 ;
)AA; <
currentAA< C
/AAD E
(AAF G
doubleAAG M
)AAM N
totalAAN S
:AAT U
$numAAV W
;AAW X
}BB 
}CC 
}DD 	
publicEE 
JobItemEE 
	CreateJobEE  
(EE  !
ActionEE! '
taskEE( ,
)EE, -
{FF 	
returnGG 
	CreateJobGG 
(GG 
(GG 
aGG 
)GG  
=>GG! #
taskGG$ (
(GG( )
)GG) *
)GG* +
;GG+ ,
}HH 	
publicII 
JobItemII 
	CreateJobII  
(II  !
ActionII! '
<II' (
JobItemII( /
>II/ 0
taskII1 5
)II5 6
{JJ 	
GuidKK 
idKK 
=KK 
GuidKK 
.KK 
NewGuidKK "
(KK" #
)KK# $
;KK$ %
varLL 
itemLL 
=LL 
newLL 
JobItemLL "
{LL# $
IdLL% '
=LL( )
idLL* ,
,LL, -
StatusMessageLL. ;
=LL< =
$strLL> @
,LL@ A
ProgressLLB J
=LLK L
$numLLM N
,LLN O
CompleteLLP X
=LLY Z
falseLL[ `
,LL` a
CancellationTokenLLb s
=LLt u
newLLv y
System	LLz Ä
.
LLÄ Å
	Threading
LLÅ ä
.
LLä ã%
CancellationTokenSource
LLã ¢
(
LL¢ £
)
LL£ §
,
LL§ •

NextUpdate
LL¶ ∞
=
LL± ≤
$num
LL≥ ∑
}
LL∏ π
;
LLπ ∫
TaskNN 
tsNN 
=NN 
taskNN 
!=NN 
nullNN "
?NN# $
TaskNN% )
.NN) *
FactoryNN* 1
.NN1 2
StartNewNN2 :
(NN: ;
(NN; <
)NN< =
=>NN> @
{OO 
tryQQ 
{RR 
_currentSS 
=SS 
itemSS #
;SS# $
taskTT 
(TT 
itemTT 
)TT 
;TT 
}UU 
catchVV 
(VV &
OperationCanceledExceptionVV 1
)VV1 2
{WW 
itemXX 
.XX 
StatusMessageXX &
=XX' (
$strXX) =
;XX= >
}YY 
catchZZ 
(ZZ 
	ExceptionZZ  
exZZ! #
)ZZ# $
{[[ 
lock\\ 
(\\ 
item\\ 
)\\ 
item]] 
.]] 
	Exception]] &
=]]' (
ex]]) +
;]]+ ,
item^^ 
.^^ 
StatusMessage^^ &
=^^' (
$str^^) 6
;^^6 7
item`` 
.`` 
Progress`` !
=``" #
$num``$ %
;``% &
}aa 
lockcc 
(cc 
itemcc 
)cc 
itemdd 
.dd 
Completedd !
=dd" #
truedd$ (
;dd( )
}ff 
,ff 
itemff 
.ff 
CancellationTokenff %
.ff% &
Tokenff& +
)ff+ ,
:ff- .
nullff/ 3
;ff3 4
lockhh 
(hh 
itemhh 
)hh 
itemii 
.ii 
Taskii 
=ii 
tsii 
;ii 
itemsjj 
[jj 
idjj 
]jj 
=jj 
itemjj 
;jj 
returnll 
itemll 
;ll 
}mm 	
publicpp 
JobItempp 
GetJobpp 
(pp 
Guidpp "
idpp# %
)pp% &
{qq 	
JobItemrr 
jrr 
=rr 
nullrr 
;rr 
itemsss 
.ss 
TryGetValuess 
(ss 
idss  
,ss  !
outss" %
jss& '
)ss' (
;ss( )
returntt 
jtt 
;tt 
}uu 	
publicww 
voidww 
CollectJobsww 
(ww  
)ww  !
{xx 	
lockyy 
(yy 
itemsyy 
)yy 
{zz 
items{{ 
.{{ 
Values{{ 
.{{ 
Where{{ "
({{" #
a{{# $
=>{{% '
a{{( )
.{{) *
	CanRemove{{* 3
){{3 4
.{{4 5
ToArray{{5 <
({{< =
){{= >
.{{> ?
Do{{? A
({{A B
a{{B C
=>{{D F
items{{G L
.{{L M
Remove{{M S
({{S T
a{{T U
.{{U V
Id{{V X
){{X Y
){{Y Z
;{{Z [
}|| 
}~~ 	
} 
}ÄÄ ΩR
yD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\LongTask.cs
	namespace 	
Infoline
 
. 
Helper 
{		 
public

 

abstract

 
class

 
LongTask

 "
:

# $
	ILongTask

% .
{ 
public 
static 
LongTask 
	EmptyTask (
=) *
new+ .
NoneTask/ 7
(7 8
)8 9
;9 :
[ 	
ThreadStatic	 
] 
static 
LongTask 
_current  
;  !
public 
static 
LongTask 
Current &
{ 	
get 
{ 
return 
_current !
??" $
	EmptyTask% .
;. /
}0 1
} 	
public 
static 
LongTask 
Start $
($ %
Action% +
<+ ,
LongTask, 4
>4 5
task6 :
): ;
{ 	
return 
Start 
( 
task 
, 
CancellationToken 0
.0 1
None1 5
)5 6
;6 7
} 	
public 
static 
LongTask 
Start $
($ %
Action% +
<+ ,
LongTask, 4
>4 5
task6 :
,: ;
CancellationToken; L
tokenM R
)R S
{ 	
return 
new 

ActionTask !
(! "
task" &
,& '
token( -
)- .
;. /
} 	
class 
NoneTask 
: 
LongTask !
{ 	
	protected 
override 
void #
RunTask$ +
(+ ,
), -
{   
}!! 
}"" 	
public## 
LongTask## 
(## 
)## 
{$$ 	
}&& 	
private(( 
string(( 
_status(( 
;(( 
private** 
double** 
_per** 
;** 
private,, 
Task,, 
_task,, 
;,, 
private.. #
CancellationTokenSource.. '
_cancelsource..( 5
;..5 6
private00 
CancellationToken00 !
_cancelToken00" .
;00. /
public22 
LongTask22 
(22 
CancellationToken22 )
canceltoken22* 5
)225 6
{33 	
_cancelToken44 
=44 
canceltoken44 &
;44& '
}55 	
public66 
double66 

Percentage66  
{77 	
get88 
{88 
return88 
_per88 
;88 
}88  
set99 
{:: 
if;; 
(;; 
_per;; 
!=;; 
value;; !
);;! "
{<< 
_per== 
=== 
value==  
;==  !#
OnNotifyPropertyChanged>> +
(>>+ ,
$str>>, 8
)>>8 9
;>>9 :
}?? 
}@@ 
}AA 	
	protectedCC 
voidCC 
ThrowIsCanceledCC &
(CC& '
)CC' (
{DD 	
ifEE 
(EE 
_cancelsourceEE 
!=EE  
nullEE! %
)EE% &
{FF 
_cancelsourceGG 
.GG 
TokenGG #
.GG# $(
ThrowIfCancellationRequestedGG$ @
(GG@ A
)GGA B
;GGB C
}HH 
}JJ 	
	protectedLL 
boolLL #
IsCancellationRequestedLL .
{MM 	
getNN 
{OO 
returnPP 
_cancelsourcePP $
!=PP% '
nullPP( ,
&&PP- /
_cancelsourcePP0 =
.PP= >#
IsCancellationRequestedPP> U
;PPU V
}QQ 
}RR 	
publicTT 
IAsyncResultTT 
WaitHandlerTT '
{TT( )
getTT* -
{TT. /
returnTT0 6
_taskTT7 <
;TT< =
}TT> ?
}TT@ A
publicXX 
stringXX 
StatusXX 
{YY 	
getZZ 
{ZZ 
returnZZ 
_statusZZ  
;ZZ  !
}ZZ" #
set[[ 
{\\ 
if]] 
(]] 
_status]] 
!=]] 
value]] $
)]]$ %
{^^ 
_status__ 
=__ 
value__ #
;__# $#
OnNotifyPropertyChangedaa +
(aa+ ,
$straa, 4
)aa4 5
;aa5 6
}bb 
}cc 
}dd 	
publicee 
voidee 
Runee 
(ee 
)ee 
{ff 	
ifgg 
(gg 
	IsRunninggg 
)gg 
throwhh 
newhh 
	Exceptionhh #
(hh# $
$strhh$ ?
)hh? @
;hh@ A
_cancelsourceii 
=ii #
CancellationTokenSourceii 3
.ii3 4#
CreateLinkedTokenSourceii4 K
(iiK L
_cancelTokeniiL X
)iiX Y
;iiY Z
_taskjj 
=jj 
newjj 
Systemjj 
.jj 
	Threadingjj (
.jj( )
Tasksjj) .
.jj. /
Taskjj/ 3
(jj3 4
delegatejj4 <
{kk 
tryll 
{mm 
_cancelsourceoo %
.oo% &
Tokenoo& +
.oo+ ,(
ThrowIfCancellationRequestedoo, H
(ooH I
)ooI J
;ooJ K
_currentpp  
=pp! "
thispp# '
;pp' (
RunTaskqq 
(qq  
)qq  !
;qq! "
}rr 
finallyss 
{tt #
OnNotifyPropertyChangeduu /
(uu/ 0
$struu0 =
)uu= >
;uu> ?#
OnNotifyPropertyChangedvv /
(vv/ 0
$strvv0 ;
)vv; <
;vv< =
_taskww 
=ww 
nullww  $
;ww$ %
}xx 
}yy 
,yy 
_cancelsourceyy  
.yy  !
Tokenyy! &
)yy& '
;yy' (
_taskzz 
.zz 
Startzz 
(zz 
)zz 
;zz #
OnNotifyPropertyChanged|| #
(||# $
$str||$ 1
)||1 2
;||2 3#
OnNotifyPropertyChanged}} #
(}}# $
$str}}$ /
)}}/ 0
;}}0 1
}~~ 	
class
ÄÄ 

ActionTask
ÄÄ 
:
ÄÄ 
LongTask
ÄÄ !
{
ÅÅ 	
Action
ÇÇ 
<
ÇÇ 
LongTask
ÇÇ 
>
ÇÇ 
_run
ÇÇ !
;
ÇÇ! "
public
ÉÉ 

ActionTask
ÉÉ 
(
ÉÉ 
Action
ÉÉ $
<
ÉÉ$ %
LongTask
ÉÉ% -
>
ÉÉ- .
run
ÉÉ/ 2
,
ÉÉ2 3
CancellationToken
ÉÉ3 D
token
ÉÉE J
)
ÉÉJ K
:
ÉÉK L
base
ÉÉL P
(
ÉÉP Q
token
ÉÉQ V
)
ÉÉV W
{
ÑÑ 
_run
ÖÖ 
=
ÖÖ 
run
ÖÖ 
;
ÖÖ 
Run
ÜÜ 
(
ÜÜ 
)
ÜÜ 
;
ÜÜ 
}
áá 
	protected
àà 
override
àà 
void
àà #
RunTask
àà$ +
(
àà+ ,
)
àà, -
{
ââ 
_run
ää 
(
ää 
this
ää 
)
ää 
;
ää 
}
ãã 
}
åå 	
	protected
çç 
abstract
çç 
void
çç 
RunTask
çç  '
(
çç' (
)
çç( )
;
çç) *
	protected
êê 
void
êê %
OnNotifyPropertyChanged
êê .
(
êê. /
string
êê/ 5
prop
êê6 :
)
êê: ;
{
ëë 	
if
íí 
(
íí 
PropertyChanged
íí 
!=
íí  "
null
íí# '
)
íí' (
PropertyChanged
ìì 
(
ìì  
this
ìì  $
,
ìì$ %
new
ìì& )
System
ìì* 0
.
ìì0 1
ComponentModel
ìì1 ?
.
ìì? @&
PropertyChangedEventArgs
ìì@ X
(
ììX Y
prop
ììY ]
)
ìì] ^
)
ìì^ _
;
ìì_ `
}
îî 	
public
ññ 
event
ññ 
System
ññ 
.
ññ 
ComponentModel
ññ *
.
ññ* +)
PropertyChangedEventHandler
ññ+ F
PropertyChanged
ññG V
;
ññV W
public
ôô 
bool
ôô 
	IsRunning
ôô 
{
öö 	
get
õõ 
{
õõ 
return
õõ 
_task
õõ 
!=
õõ !
null
õõ" &
;
õõ& '
}
õõ( )
}
úú 	
public
†† 
void
†† 
Abort
†† 
(
†† 
)
†† 
{
°° 	
if
¢¢ 
(
¢¢ 
	IsRunning
¢¢ 
)
¢¢ 
{
££ 
_cancelsource
§§ 
.
§§ 
Cancel
§§ $
(
§§$ %
)
§§% &
;
§§& '
}
•• 
}
¶¶ 	
public
©© 
CancellationToken
©©  
CancellationToken
©©! 2
{
™™ 	
get
´´ 
{
´´ 
return
´´ 
_cancelsource
´´ &
.
´´& '
Token
´´' ,
;
´´, -
}
´´. /
}
¨¨ 	
}
≠≠ 
public
∞∞ 

	interface
∞∞ 
	ILongTask
∞∞ 
:
∞∞  
System
∞∞! '
.
∞∞' (
ComponentModel
∞∞( 6
.
∞∞6 7$
INotifyPropertyChanged
∞∞7 M
{
±± 
double
≤≤ 

Percentage
≤≤ 
{
≤≤ 
get
≤≤ 
;
≤≤  
}
≤≤! "
string
≥≥ 
Status
≥≥ 
{
≥≥ 
get
≥≥ 
;
≥≥ 
}
≥≥ 
bool
¥¥ 
	IsRunning
¥¥ 
{
¥¥ 
get
¥¥ 
;
¥¥ 
}
¥¥ 
IAsyncResult
µµ 
WaitHandler
µµ  
{
µµ! "
get
µµ# &
;
µµ& '
}
µµ( )
void
∂∂ 
Abort
∂∂ 
(
∂∂ 
)
∂∂ 
;
∂∂ 
CancellationToken
∑∑ 
CancellationToken
∑∑ +
{
∑∑, -
get
∑∑. 1
;
∑∑1 2
}
∑∑3 4
}
∏∏ 
}∫∫ Æâ
zD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\LongMemoryStream.cs
	namespace 	
Infoline
 
. 
	Framework 
{ 
public 

class 
LongMemoryStream !
:" #
Stream$ *
{ 
long		 
	_position		 
;		 
long

 
_length

 
;

 
List 
< 
byte 
[ 
] 
> 
_data 
= 
new  
List! %
<% &
byte& *
[* +
]+ ,
>, -
(- .
). /
;/ 0
int 
_maxArrayLength 
= 
$num !
*" #
$num$ (
*) *
$num+ /
;/ 0
public 
override 
bool 
CanRead $
{ 	
get 
{ 
return 
true 
; 
}  
} 	
public 
override 
bool 
CanSeek $
{ 	
get 
{ 
return 
true 
; 
}  
} 	
public 
override 
bool 
CanWrite %
{ 	
get 
{ 
return 
true 
; 
}  
} 	
public 
override 
long 
Length #
{ 	
get 
{ 
return 
_length  
;  !
}" #
} 	
public 
override 
long 
Position %
{ 	
get   
{!! 
return"" 
	_position""  
;""  !
}## 
set$$ 
{%% 
	_position&& 
=&& 
value&& !
;&&! "
}'' 
}(( 	
public** 
LongMemoryStream** 
(**  
)**  !
{++ 	
}-- 	
public.. 
LongMemoryStream.. 
(..  
long..  $
length..% +
)..+ ,
{// 	
	_position00 
=00 
$num00 
;00 
_length11 
=11 
length11 
;11 
}22 	
public33 
LongMemoryStream33 
(33  
string33  &
file33' +
)33+ ,
{44 	
	_position55 
=55 
$num55 
;55 
using66 
(66 

FileStream66 
f66 
=66  !
new66" %

FileStream66& 0
(660 1
file661 5
,665 6
FileMode667 ?
.66? @
Open66@ D
,66D E

FileAccess66F P
.66P Q
Read66Q U
)66U V
)66V W
{77 
var88 
fileSize88 
=88 
f88  
.88  !
Length88! '
;88' (
while99 
(99 
fileSize99 
>99  !
$num99" #
)99# $
{:: 
var;; 
size;; 
=;; 
(;;  
int;;  #
);;# $
Math;;$ (
.;;( )
Min;;) ,
(;;, -
_maxArrayLength;;- <
,;;< =
fileSize;;> F
);;F G
;;;G H
byte<< 
[<< 
]<< 
bytes<<  
=<<! "
new<<# &
byte<<' +
[<<+ ,
_maxArrayLength<<, ;
]<<; <
;<<< =
f== 
.== 
Read== 
(== 
bytes==  
,==  !
$num==" #
,==# $
size==% )
)==) *
;==* +
_data?? 
.?? 
Add?? 
(?? 
bytes?? #
)??# $
;??$ %
fileSize@@ 
-=@@ 
size@@  $
;@@$ %
}AA 
_lengthBB 
=BB 
fBB 
.BB 
LengthBB "
;BB" #
	_positionCC 
=CC 
fCC 
.CC 
LengthCC $
;CC$ %
}DD 
}EE 	
publicHH 
overrideHH 
voidHH 
WriteHH "
(HH" #
byteHH# '
[HH' (
]HH( )
bufferHH* 0
,HH0 1
intHH2 5
offsetHH6 <
,HH< =
intHH> A
countHHB G
)HHG H
{II 	
longJJ 
	newLengthJJ 
=JJ 
MathJJ !
.JJ! "
MaxJJ" %
(JJ% &
	_positionJJ& /
+JJ0 1
countJJ2 7
,JJ7 8
_lengthJJ9 @
)JJ@ A
;JJA B
intKK 
newArrayCountKK 
=KK 
(KK  !
intKK! $
)KK$ %
(KK% &
MathKK& *
.KK* +
CeilingKK+ 2
(KK2 3
(KK3 4
doubleKK4 :
)KK: ;
	newLengthKK; D
/KKE F
_maxArrayLengthKKG V
)KKV W
)KKW X
;KKX Y
intLL 
extraArrayCountLL 
=LL  !
newArrayCountLL" /
-LL0 1
_dataLL2 7
.LL7 8
CountLL8 =
;LL= >
forMM 
(MM 
intMM 
iMM 
=MM 
$numMM 
;MM 
iMM 
<MM 
extraArrayCountMM  /
;MM/ 0
iMM1 2
++MM2 4
)MM4 5
_dataNN 
.NN 
AddNN 
(NN 
newNN 
byteNN "
[NN" #
_maxArrayLengthNN# 2
]NN2 3
)NN3 4
;NN4 5
intQQ 
firstPartIndexQQ 
=QQ  
(QQ! "
intQQ" %
)QQ% &
(QQ& '
(QQ' (
doubleQQ( .
)QQ. /
	_positionQQ/ 8
/QQ9 :
_maxArrayLengthQQ; J
)QQJ K
;QQK L
intRR 
lastPartIndexRR 
=RR 
(RR  !
intRR! $
)RR$ %
(RR% &
(RR& '
doubleRR' -
)RR- .
(RR. /
	_positionRR/ 8
+RR9 :
countRR; @
)RR@ A
/RRB C
_maxArrayLengthRRD S
)RRS T
;RRT U
longTT 
globalStartTT 
=TT 
	_positionTT (
;TT( )
longUU 
globalCountUU 
=UU 
countUU $
;UU$ %
longVV 
	destStartVV 
=VV 
$numVV 
;VV 
forWW 
(WW 
intWW 
iWW 
=WW 
firstPartIndexWW '
;WW' (
iWW) *
<=WW+ -
lastPartIndexWW. ;
;WW; <
iWW= >
++WW> @
)WW@ A
{XX 
varYY 

localStartYY 
=YY  
globalStartYY! ,
%YY- .
_maxArrayLengthYY/ >
;YY> ?
varZZ 

localCountZZ 
=ZZ  
MathZZ! %
.ZZ% &
MinZZ& )
(ZZ) *
_maxArrayLengthZZ* 9
-ZZ: ;

localStartZZ< F
,ZZF G
globalCountZZH S
)ZZS T
;ZZT U
if[[ 
([[ 

localCount[[ 
==[[ !
$num[[" #
)[[# $
break[[% *
;[[* +
Array\\ 
.\\ 
Copy\\ 
(\\ 
buffer\\ !
,\\! "
	destStart\\# ,
,\\, -
_data\\. 3
[\\3 4
i\\4 5
]\\5 6
,\\6 7

localStart\\8 B
,\\B C

localCount\\D N
)\\N O
;\\O P
globalStart]] 
+=]] 

localCount]] )
;]]) *
globalCount^^ 
-=^^ 

localCount^^ )
;^^) *
	destStart__ 
+=__ 

localCount__ '
;__' (
}`` 
_lengthaa 
=aa 
	newLengthaa 
;aa  
	_positionbb 
=bb 
	newLengthbb !
;bb! "
}cc 	
publicdd 
overridedd 
intdd 
Readdd  
(dd  !
bytedd! %
[dd% &
]dd& '
bufferdd( .
,dd. /
intdd0 3
offsetdd4 :
,dd: ;
intdd< ?
countdd@ E
)ddE F
{ee 	
ifff 
(ff 
	_positionff 
+ff 
countff !
>ff" #
_lengthff$ +
)ff+ ,
throwgg 
newgg $
IndexOutOfRangeExceptiongg 2
(gg2 3
)gg3 4
;gg4 5
ifhh 
(hh 
bufferhh 
==hh 
nullhh 
)hh 
throwii 
newii "
NullReferenceExceptionii 0
(ii0 1
)ii1 2
;ii2 3
ifjj 
(jj 
bufferjj 
.jj 
Lengthjj 
<jj 
offsetjj  &
+jj' (
countjj) .
)jj. /
throwkk 
newkk $
IndexOutOfRangeExceptionkk 2
(kk2 3
)kk3 4
;kk4 5
intmm 
firstPartIndexmm 
=mm  
(mm! "
intmm" %
)mm% &
(mm& '
(mm' (
doublemm( .
)mm. /
	_positionmm/ 8
/mm9 :
_maxArrayLengthmm; J
)mmJ K
;mmK L
intnn 
lastPartIndexnn 
=nn 
(nn  !
intnn! $
)nn$ %
(nn% &
(nn& '
doublenn' -
)nn- .
(nn. /
	_positionnn/ 8
+nn9 :
countnn; @
)nn@ A
/nnB C
_maxArrayLengthnnD S
)nnS T
;nnT U
longpp 
globalStartpp 
=pp 
	_positionpp (
;pp( )
longqq 
globalCountqq 
=qq 
countqq $
;qq$ %
longrr 
	destStartrr 
=rr 
$numrr 
;rr 
forss 
(ss 
intss 
iss 
=ss 
firstPartIndexss '
;ss' (
iss) *
<=ss+ -
lastPartIndexss. ;
;ss; <
iss= >
++ss> @
)ss@ A
{tt 
varuu 

localStartuu 
=uu  
globalStartuu! ,
%uu- .
_maxArrayLengthuu/ >
;uu> ?
varvv 

localCountvv 
=vv  
Mathvv! %
.vv% &
Minvv& )
(vv) *
_maxArrayLengthvv* 9
-vv: ;

localStartvv< F
,vvF G
globalCountvvH S
)vvS T
;vvT U
ifww 
(ww 

localCountww 
<=ww !
$numww" #
)ww# $
breakww% *
;ww* +
Arrayxx 
.xx 
Copyxx 
(xx 
_dataxx  
[xx  !
ixx! "
]xx" #
,xx# $

localStartxx% /
,xx/ 0
bufferxx1 7
,xx7 8
	destStartxx9 B
,xxB C

localCountxxD N
)xxN O
;xxO P
globalStartyy 
+=yy 

localCountyy )
;yy) *
globalCountzz 
-=zz 

localCountzz )
;zz) *
	destStart{{ 
+={{ 

localCount{{ '
;{{' (
}|| 
return}} 
(}} 
int}} 
)}} 
	destStart}} !
;}}! "
} 	
public
ÄÄ 
override
ÄÄ 
long
ÄÄ 
Seek
ÄÄ !
(
ÄÄ! "
long
ÄÄ" &
offset
ÄÄ' -
,
ÄÄ- .

SeekOrigin
ÄÄ/ 9
origin
ÄÄ: @
)
ÄÄ@ A
{
ÅÅ 	
switch
ÇÇ 
(
ÇÇ 
origin
ÇÇ 
)
ÇÇ 
{
ÉÉ 
case
ÑÑ 

SeekOrigin
ÑÑ 
.
ÑÑ  
Begin
ÑÑ  %
:
ÑÑ% &
	_position
ÖÖ 
=
ÖÖ 
offset
ÖÖ  &
;
ÖÖ& '
return
ÜÜ 
	_position
ÜÜ $
;
ÜÜ$ %
case
áá 

SeekOrigin
áá 
.
áá  
Current
áá  '
:
áá' (
	_position
àà 
=
àà 
	_position
àà  )
+
àà* +
offset
àà, 2
;
àà2 3
return
ââ 
	_position
ââ $
;
ââ$ %
case
ää 

SeekOrigin
ää 
.
ää  
End
ää  #
:
ää# $
	_position
ãã 
=
ãã 
_length
ãã  '
+
ãã( )
	_position
ãã* 3
;
ãã3 4
return
åå 
	_position
åå $
;
åå$ %
default
çç 
:
çç 
break
éé 
;
éé 
}
èè 
return
êê 
-
êê 
$num
êê 
;
êê 
}
ëë 	
public
íí 
override
íí 
void
íí 
	SetLength
íí &
(
íí& '
long
íí' +
value
íí, 1
)
íí1 2
{
ìì 	
var
îî 
	newLength
îî 
=
îî 
value
îî !
;
îî! "
if
ïï 
(
ïï 
	_position
ïï 
>
ïï 
	newLength
ïï %
)
ïï% &
	_position
ññ 
=
ññ 
	newLength
ññ %
;
ññ% &
if
òò 
(
òò 
	newLength
òò 
<
òò 
_length
òò #
)
òò# $
{
ôô 
int
öö 
exArrayCount
öö  
=
öö! "
_data
öö# (
.
öö( )
Count
öö) .
;
öö. /
int
õõ 
newArrayCount
õõ !
=
õõ" #
(
õõ$ %
int
õõ% (
)
õõ( )
(
õõ) *
Math
õõ* .
.
õõ. /
Ceiling
õõ/ 6
(
õõ6 7
(
õõ7 8
double
õõ8 >
)
õõ> ?
	newLength
õõ? H
/
õõI J
_maxArrayLength
õõK Z
)
õõZ [
)
õõ[ \
;
õõ\ ]
int
úú 
extraArrayCount
úú #
=
úú$ %
_data
úú& +
.
úú+ ,
Count
úú, 1
-
úú2 3
newArrayCount
úú4 A
;
úúA B
for
ùù 
(
ùù 
int
ùù 
i
ùù 
=
ùù 
$num
ùù 
;
ùù 
i
ùù  !
<
ùù" #
extraArrayCount
ùù$ 3
;
ùù3 4
i
ùù5 6
++
ùù6 8
)
ùù8 9
{
ûû 
var
üü 
idx
üü 
=
üü 
exArrayCount
üü *
-
üü+ ,
i
üü- .
-
üü/ 0
$num
üü1 2
;
üü2 3
_data
†† 
.
†† 
RemoveAt
†† "
(
††" #
idx
††# &
)
††& '
;
††' (
}
°° 
var
¢¢ 
s
¢¢ 
=
¢¢ 
	newLength
¢¢ !
%
¢¢" #
_maxArrayLength
¢¢$ 3
;
¢¢3 4
var
££ 
ss
££ 
=
££ 
_maxArrayLength
££ (
-
££) *
s
££+ ,
;
££, -
Array
§§ 
.
§§ 
Copy
§§ 
(
§§ 
_data
§§  
[
§§  !
newArrayCount
§§! .
-
§§/ 0
$num
§§1 2
]
§§2 3
,
§§3 4
s
§§5 6
,
§§6 7
new
§§8 ;
byte
§§< @
[
§§@ A
ss
§§A C
]
§§C D
,
§§D E
$num
§§F G
,
§§G H
ss
§§I K
)
§§K L
;
§§L M
}
•• 
else
¶¶ 
if
¶¶ 
(
¶¶ 
	newLength
¶¶ 
>
¶¶  
_length
¶¶! (
)
¶¶( )
{
ßß 
int
®® 
newArrayCount
®® !
=
®®" #
(
®®$ %
int
®®% (
)
®®( )
(
®®) *
Math
®®* .
.
®®. /
Ceiling
®®/ 6
(
®®6 7
(
®®7 8
double
®®8 >
)
®®> ?
	newLength
®®? H
/
®®I J
_maxArrayLength
®®K Z
)
®®Z [
)
®®[ \
;
®®\ ]
int
©© 
extraArrayCount
©© #
=
©©$ %
newArrayCount
©©& 3
-
©©4 5
_data
©©6 ;
.
©©; <
Count
©©< A
;
©©A B
for
™™ 
(
™™ 
int
™™ 
i
™™ 
=
™™ 
$num
™™ 
;
™™ 
i
™™  !
<
™™" #
extraArrayCount
™™$ 3
;
™™3 4
i
™™5 6
++
™™6 8
)
™™8 9
_data
´´ 
.
´´ 
Add
´´ 
(
´´ 
new
´´ !
byte
´´" &
[
´´& '
_maxArrayLength
´´' 6
]
´´6 7
)
´´7 8
;
´´8 9
}
¨¨ 
_length
ÆÆ 
=
ÆÆ 
	newLength
ÆÆ 
;
ÆÆ  
}
ØØ 	
public
∞∞ 
override
∞∞ 
void
∞∞ 
Flush
∞∞ "
(
∞∞" #
)
∞∞# $
{
±± 	
}
≥≥ 	
	protected
¥¥ 
override
¥¥ 
void
¥¥ 
Dispose
¥¥  '
(
¥¥' (
bool
¥¥( ,
	disposing
¥¥- 6
)
¥¥6 7
{
µµ 	
_data
∂∂ 
=
∂∂ 
null
∂∂ 
;
∂∂ 
base
∑∑ 
.
∑∑ 
Dispose
∑∑ 
(
∑∑ 
	disposing
∑∑ "
)
∑∑" #
;
∑∑# $
}
∏∏ 	
}
∫∫ 
}ªª éõ
ÉD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Helper\ProperyChangeProxy.cs
	namespace

 	
Infoline


 
.

 
Helper

 
{ 
public 

class 
ProperyChangeProxy #
{ 
private 
static 
AssemblyBuilder &
_ab' *
;* +
private 
static 
ModuleBuilder $
_mb% (
;( )
private 
static 

Dictionary !
<! "
Type" &
,& '
Func( ,
<, -
object- 3
>3 4
>4 5
Types6 ;
=< =
new> A

DictionaryB L
<L M
TypeM Q
,Q R
FuncS W
<W X
objectX ^
>^ _
>_ `
(` a
)a b
;b c
public 
static 
TClass 
[ 
] 
Create %
<% &
TClass& ,
>, -
(- .
int. 1
size2 6
)6 7
where8 =
TClass> D
:E F
classG L
,L M
newM P
(P Q
)Q R
{ 	
var 
func 
= 
GetCreateFunction (
(( )
typeof) /
(/ 0
TClass0 6
)6 7
)7 8
;8 9
var 
ret 
= 
new 
TClass  
[  !
size! %
]% &
;& '
for 
( 
int 
i 
= 
$num 
; 
i 
< 
size  $
;$ %
i& '
++' )
)) *
{ 
ret 
[ 
i 
] 
= 
func 
( 
) 
as  "
TClass# )
;) *
} 
return 
ret 
; 
} 	
public 
static 
TClass 
Create #
<# $
TClass$ *
>* +
(+ ,
), -
where. 3
TClass4 :
:; <
class= B
,B C
newC F
(F G
)G H
{ 	
return 
GetCreateFunction $
($ %
typeof% +
(+ ,
TClass, 2
)2 3
)3 4
(4 5
)5 6
as7 9
TClass: @
;@ A
}   	
public!! 
static!! 
object!! 
Create!! #
(!!# $
Type!!$ (
type!!) -
)!!- .
{"" 	
return## 
GetCreateFunction## $
(##$ %
type##% )
)##) *
(##* +
)##+ ,
;##, -
}$$ 	
static&& 
Func&& 
<&& 
object&& 
>&& 
GetCreateFunction&& -
(&&- .
Type&&. 2
type&&3 7
)&&7 8
{'' 	
Func)) 
<)) 
object)) 
>)) 
ret)) 
;)) 
if** 
(** 
!** 
Types** 
.** 
TryGetValue** "
(**" #
type**# '
,**' (
out**) ,
ret**- 0
)**0 1
)**1 2
{++ 
if,, 
(,, 
_ab,, 
==,, 
null,, 
),,  
{-- 
var.. 
assmName..  
=..! "
new..# &
AssemblyName..' 3
(..3 4
$str..4 X
)..X Y
;..Y Z
_ab// 
=// 
	AppDomain// #
.//# $
CurrentDomain//$ 1
.//1 2!
DefineDynamicAssembly//2 G
(//G H
assmName//H P
,//P Q!
AssemblyBuilderAccess//R g
.//g h
Run//h k
)//k l
;//l m
_mb00 
=00 
_ab00 
.00 
DefineDynamicModule00 1
(001 2
assmName002 :
.00: ;
Name00; ?
)00? @
;00@ A
}11 
TypeBuilder33 
typeBuilder33 '
=33( )
_mb33* -
.33- .

DefineType33. 8
(338 9
type339 =
.33= >
Name33> B
+33C D
$str33E N
,33N O
TypeAttributes33P ^
.33^ _
Public33_ e
,33e f
type33g k
)33k l
;33l m

MethodInfo55  
raisePropertyChanged55 /
;55/ 0
if66 
(66 
!66 
typeof66 
(66 "
INotifyPropertyChanged66 2
)662 3
.663 4
IsAssignableFrom664 D
(66D E
type66E I
)66I J
)66J K
{77 
typeBuilder88 
.88  &
AddInterfaceImplementation88  :
(88: ;
typeof88; A
(88A B"
INotifyPropertyChanged88B X
)88X Y
)88Y Z
;88Z [
FieldBuilder::  

eventField::! +
=::, -&
CreatePropertyChangedEvent::. H
(::H I
typeBuilder::I T
)::T U
;::U V 
raisePropertyChanged<< (
=<<) *&
CreateRaisePropertyChanged<<+ E
(<<E F
typeBuilder<<F Q
,<<Q R

eventField<<S ]
)<<] ^
;<<^ _
}== 
else>> 
{??  
raisePropertyChanged@@ (
=@@) *
type@@+ /
.@@/ 0
	GetMethod@@0 9
(@@9 :
$str@@: H
,@@H I
BindingFlags@@J V
.@@V W
Instance@@W _
|@@` a
BindingFlags@@b n
.@@n o
	NonPublic@@o x
|@@y z
BindingFlags	@@{ á
.
@@á à
Public
@@à é
)
@@é è
;
@@è ê
}AA 
varDD 
propsDD 
=DD 
fromDD  
pDD! "
inDD# %
typeEE  $
.EE$ %
GetPropertiesEE% 2
(EE2 3
BindingFlagsFF$ 0
.FF0 1
PublicFF1 7
|FF8 9
BindingFlagsGG$ 0
.GG0 1
	NonPublicGG1 :
|GG; <
BindingFlagsHH$ 0
.HH0 1
InstanceHH1 9
|HH: ;
BindingFlagsII$ 0
.II0 1
FlattenHierarchyII1 A
)IIA B
whereJJ !
pJJ" #
.JJ# $
CanReadJJ$ +
&&JJ, .
pJJ/ 0
.JJ0 1
CanWriteJJ1 9
&&JJ: <
pJJ= >
.JJ> ?
GetSetMethodJJ? K
(JJK L
)JJL M
!=JJN P
nullJJQ U
&&JJV X
pKK 
.KK 
GetSetMethodKK *
(KK* +
)KK+ ,
.KK, -
	IsVirtualKK- 6
&&KK7 9
(LL 
pLL 
.LL 
GetSetMethodLL +
(LL+ ,
)LL, -
.LL- .
IsPublicLL. 6
||LL7 9
pMM 
.MM 
GetSetMethodMM *
(MM* +
)MM+ ,
.MM, -
IsFamilyMM- 5
)MM5 6
selectNN "
pNN# $
;NN$ %
propsOO 
.OO 
ToListOO 
(OO 
)OO 
.OO 
ForEachOO &
(OO& '
(PP 
itemPP 
)PP 
=>PP 

WrapMethodPP $
(PP$ %
itemQQ 
,QQ  
raisePropertyChangedQQ *
,QQ* +
typeBuilderQQ, 7
)QQ7 8
)QQ8 9
;QQ9 :
varSS 
newtypeSS 
=SS 
typeBuilderSS )
.SS) *

CreateTypeSS* 4
(SS4 5
)SS5 6
;SS6 7
varTT 
expTT 
=TT 

ExpressionTT $
.TT$ %
LambdaTT% +
(TT+ ,
typeofTT, 2
(TT2 3
FuncTT3 7
<TT7 8
>TT8 9
)TT9 :
.TT: ;
MakeGenericTypeTT; J
(TTJ K
typeTTK O
)TTO P
,TTP Q

ExpressionTTR \
.TT\ ]
NewTT] `
(TT` a
newtypeTTa h
)TTh i
)TTi j
;TTj k
TypesVV 
[VV 
typeVV 
]VV 
=VV 
retVV !
=VV" #
(VV$ %
FuncVV% )
<VV) *
objectVV* 0
>VV0 1
)VV1 2
expVV2 5
.VV5 6
CompileVV6 =
(VV= >
)VV> ?
;VV? @
}WW 
returnXX 
retXX 
;XX 
}YY 	
private\\ 
static\\ 
FieldBuilder\\ #&
CreatePropertyChangedEvent\\$ >
(\\> ?
TypeBuilder\\? J
typeBuilder\\K V
)\\V W
{]] 	
FieldBuilder`` 

eventField`` #
=``$ %
typeBuilderaa 
.aa 
DefineFieldaa '
(aa' (
$straa( 9
,aa9 :
typeofbb 
(bb '
PropertyChangedEventHandlerbb 2
)bb2 3
,bb3 4
FieldAttributescc 
.cc  
Privatecc  '
)cc' (
;cc( )
EventBuilderdd 
eventBuilderdd %
=dd& '
typeBuilderee 
.ee 
DefineEventee '
(ee' (
$strff !
,ff! "
EventAttributesgg 
.gg  
Nonegg  $
,gg$ %
typeofhh 
(hh '
PropertyChangedEventHandlerhh 2
)hh2 3
)hh3 4
;hh4 5
eventBuilderjj 
.jj 
SetAddOnMethodjj '
(jj' (!
CreateAddRemoveMethodkk !
(kk! "
typeBuilderkk" -
,kk- .

eventFieldkk/ 9
,kk9 :
truekk; ?
)kk? @
)kk@ A
;kkA B
eventBuilderll 
.ll 
SetRemoveOnMethodll *
(ll* +!
CreateAddRemoveMethodmm !
(mm! "
typeBuildermm" -
,mm- .

eventFieldmm/ 9
,mm9 :
falsemm; @
)mm@ A
)mmA B
;mmB C
returnoo 

eventFieldoo 
;oo 
}pp 	
privateqq 
staticqq 
MethodBuilderqq $!
CreateAddRemoveMethodqq% :
(qq: ;
TypeBuilderqq; F
typeBuilderqqG R
,qqR S
FieldBuilderqqT `

eventFieldqqa k
,qqk l
boolqqm q
isAddqqr w
)qqw x
{rr 	
stringss 
prefixss 
=ss 
$strss %
;ss% &
stringtt 
delegateActiontt !
=tt" #
$strtt$ ,
;tt, -
ifuu 
(uu 
isAdduu 
)uu 
{vv 
prefixww 
=ww 
$strww 
;ww  
delegateActionxx 
=xx  
$strxx! *
;xx* +
}yy 
MethodBuilderzz 
addremoveMethodzz )
=zz* +
typeBuilder{{ 
.{{ 
DefineMethod{{ $
({{$ %
prefix{{% +
+{{, -
$str{{. ?
,{{? @
MethodAttributes|| 
.||  
Public||  &
|||' (
MethodAttributes}} 
.}}  
SpecialName}}  +
|}}, -
MethodAttributes~~ 
.~~  
NewSlot~~  '
|~~( )
MethodAttributes 
.  
	HideBySig  )
|* +
MethodAttributes
ÄÄ 
.
ÄÄ  
Virtual
ÄÄ  '
|
ÄÄ( )
MethodAttributes
ÅÅ 
.
ÅÅ  
Final
ÅÅ  %
,
ÅÅ% &
null
ÇÇ 
,
ÇÇ 
new
ÉÉ 
[
ÉÉ 
]
ÉÉ 
{
ÉÉ 
typeof
ÉÉ 
(
ÉÉ )
PropertyChangedEventHandler
ÉÉ 9
)
ÉÉ9 :
}
ÉÉ; <
)
ÉÉ< =
;
ÉÉ= >"
MethodImplAttributes
ÑÑ  
eventMethodFlags
ÑÑ! 1
=
ÑÑ2 3"
MethodImplAttributes
ÖÖ $
.
ÖÖ$ %
Managed
ÖÖ% ,
|
ÖÖ- ."
MethodImplAttributes
ÜÜ $
.
ÜÜ$ %
Synchronized
ÜÜ% 1
;
ÜÜ1 2
addremoveMethod
áá 
.
áá $
SetImplementationFlags
áá 2
(
áá2 3
eventMethodFlags
áá3 C
)
ááC D
;
ááD E
ILGenerator
ââ 
ilGen
ââ 
=
ââ 
addremoveMethod
ââ  /
.
ââ/ 0
GetILGenerator
ââ0 >
(
ââ> ?
)
ââ? @
;
ââ@ A
ilGen
åå 
.
åå 
Emit
åå 
(
åå 
OpCodes
åå 
.
åå 
Ldarg_0
åå &
)
åå& '
;
åå' (
ilGen
çç 
.
çç 
Emit
çç 
(
çç 
OpCodes
çç 
.
çç 
Ldarg_0
çç &
)
çç& '
;
çç' (
ilGen
éé 
.
éé 
Emit
éé 
(
éé 
OpCodes
éé 
.
éé 
Ldfld
éé $
,
éé$ %

eventField
éé& 0
)
éé0 1
;
éé1 2
ilGen
èè 
.
èè 
Emit
èè 
(
èè 
OpCodes
èè 
.
èè 
Ldarg_1
èè &
)
èè& '
;
èè' (
ilGen
êê 
.
êê 
EmitCall
êê 
(
êê 
OpCodes
êê "
.
êê" #
Call
êê# '
,
êê' (
typeof
ëë 
(
ëë 
Delegate
ëë 
)
ëë  
.
ëë  !
	GetMethod
ëë! *
(
ëë* +
delegateAction
íí 
,
íí 
new
ìì 
[
ìì 
]
ìì 
{
ìì 
typeof
ìì 
(
ìì 
Delegate
ìì '
)
ìì' (
,
ìì( )
typeof
ìì* 0
(
ìì0 1
Delegate
ìì1 9
)
ìì9 :
}
ìì; <
)
ìì< =
,
ìì= >
null
îî 
)
îî 
;
îî 
ilGen
ïï 
.
ïï 
Emit
ïï 
(
ïï 
OpCodes
ïï 
.
ïï 
	Castclass
ïï (
,
ïï( )
typeof
ïï* 0
(
ïï0 1)
PropertyChangedEventHandler
ññ '
)
ññ' (
)
ññ( )
;
ññ) *
ilGen
óó 
.
óó 
Emit
óó 
(
óó 
OpCodes
óó 
.
óó 
Stfld
óó $
,
óó$ %

eventField
óó& 0
)
óó0 1
;
óó1 2
ilGen
òò 
.
òò 
Emit
òò 
(
òò 
OpCodes
òò 
.
òò 
Ret
òò "
)
òò" #
;
òò# $

MethodInfo
öö  
intAddRemoveMethod
öö )
=
öö* +
typeof
õõ 
(
õõ $
INotifyPropertyChanged
õõ )
)
õõ) *
.
õõ* +
	GetMethod
õõ+ 4
(
õõ4 5
prefix
úú 
+
úú 
$str
úú &
)
úú& '
;
úú' (
typeBuilder
ùù 
.
ùù "
DefineMethodOverride
ùù ,
(
ùù, -
addremoveMethod
ûû 
,
ûû  
intAddRemoveMethod
ûû /
)
ûû/ 0
;
ûû0 1
return
†† 
addremoveMethod
†† "
;
††" #
}
°° 	
private
¢¢ 
static
¢¢ 
MethodBuilder
¢¢ $(
CreateRaisePropertyChanged
¢¢% ?
(
¢¢? @
TypeBuilder
¢¢@ K
typeBuilder
¢¢L W
,
¢¢W X
FieldBuilder
¢¢Y e

eventField
¢¢f p
)
¢¢p q
{
££ 	
MethodBuilder
§§ )
raisePropertyChangedBuilder
§§ 5
=
§§6 7
typeBuilder
•• 
.
•• 
DefineMethod
•• (
(
••( )
$str
¶¶ &
,
¶¶& '
MethodAttributes
ßß  
.
ßß  !
Family
ßß! '
|
ßß( )
MethodAttributes
ßß* :
.
ßß: ;
Virtual
ßß; B
,
ßßB C
null
®® 
,
®® 
new
®® 
Type
®® 
[
®® 
]
®®  
{
®®! "
typeof
®®# )
(
®®) *
string
®®* 0
)
®®0 1
}
®®2 3
)
®®3 4
;
®®4 5
ILGenerator
™™ $
raisePropertyChangedIl
™™ .
=
™™/ 0)
raisePropertyChangedBuilder
´´ '
.
´´' (
GetILGenerator
´´( 6
(
´´6 7
)
´´7 8
;
´´8 9
Label
¨¨ 
	labelExit
¨¨ 
=
¨¨ $
raisePropertyChangedIl
¨¨ 4
.
¨¨4 5
DefineLabel
¨¨5 @
(
¨¨@ A
)
¨¨A B
;
¨¨B C$
raisePropertyChangedIl
≤≤ "
.
≤≤" #
Emit
≤≤# '
(
≤≤' (
OpCodes
≤≤( /
.
≤≤/ 0
Ldarg_0
≤≤0 7
)
≤≤7 8
;
≤≤8 9$
raisePropertyChangedIl
≥≥ "
.
≥≥" #
Emit
≥≥# '
(
≥≥' (
OpCodes
≥≥( /
.
≥≥/ 0
Ldfld
≥≥0 5
,
≥≥5 6

eventField
≥≥7 A
)
≥≥A B
;
≥≥B C$
raisePropertyChangedIl
¥¥ "
.
¥¥" #
Emit
¥¥# '
(
¥¥' (
OpCodes
¥¥( /
.
¥¥/ 0
Ldnull
¥¥0 6
)
¥¥6 7
;
¥¥7 8$
raisePropertyChangedIl
µµ "
.
µµ" #
Emit
µµ# '
(
µµ' (
OpCodes
µµ( /
.
µµ/ 0
Ceq
µµ0 3
)
µµ3 4
;
µµ4 5$
raisePropertyChangedIl
∂∂ "
.
∂∂" #
Emit
∂∂# '
(
∂∂' (
OpCodes
∂∂( /
.
∂∂/ 0
Brtrue
∂∂0 6
,
∂∂6 7
	labelExit
∂∂8 A
)
∂∂A B
;
∂∂B C$
raisePropertyChangedIl
∫∫ "
.
∫∫" #
Emit
∫∫# '
(
∫∫' (
OpCodes
∫∫( /
.
∫∫/ 0
Ldarg_0
∫∫0 7
)
∫∫7 8
;
∫∫8 9$
raisePropertyChangedIl
ªª "
.
ªª" #
Emit
ªª# '
(
ªª' (
OpCodes
ªª( /
.
ªª/ 0
Ldfld
ªª0 5
,
ªª5 6

eventField
ªª7 A
)
ªªA B
;
ªªB C$
raisePropertyChangedIl
ºº "
.
ºº" #
Emit
ºº# '
(
ºº' (
OpCodes
ºº( /
.
ºº/ 0
Ldarg_0
ºº0 7
)
ºº7 8
;
ºº8 9$
raisePropertyChangedIl
ΩΩ "
.
ΩΩ" #
Emit
ΩΩ# '
(
ΩΩ' (
OpCodes
ΩΩ( /
.
ΩΩ/ 0
Ldarg_1
ΩΩ0 7
)
ΩΩ7 8
;
ΩΩ8 9$
raisePropertyChangedIl
ææ "
.
ææ" #
Emit
ææ# '
(
ææ' (
OpCodes
ææ( /
.
ææ/ 0
Newobj
ææ0 6
,
ææ6 7
typeof
øø 
(
øø &
PropertyChangedEventArgs
øø /
)
øø/ 0
.
¿¿ 
GetConstructor
¿¿ 
(
¿¿  
new
¿¿  #
[
¿¿# $
]
¿¿$ %
{
¿¿& '
typeof
¿¿( .
(
¿¿. /
string
¿¿/ 5
)
¿¿5 6
}
¿¿7 8
)
¿¿8 9
)
¿¿9 :
;
¿¿: ;$
raisePropertyChangedIl
¡¡ "
.
¡¡" #
EmitCall
¡¡# +
(
¡¡+ ,
OpCodes
¡¡, 3
.
¡¡3 4
Callvirt
¡¡4 <
,
¡¡< =
typeof
¬¬ 
(
¬¬ )
PropertyChangedEventHandler
¬¬ 2
)
¬¬2 3
.
√√ 
	GetMethod
√√ 
(
√√ 
$str
√√ #
)
√√# $
,
√√$ %
null
√√& *
)
√√* +
;
√√+ ,$
raisePropertyChangedIl
∆∆ "
.
∆∆" #
	MarkLabel
∆∆# ,
(
∆∆, -
	labelExit
∆∆- 6
)
∆∆6 7
;
∆∆7 8$
raisePropertyChangedIl
«« "
.
««" #
Emit
««# '
(
««' (
OpCodes
««( /
.
««/ 0
Ret
««0 3
)
««3 4
;
««4 5
return
…… )
raisePropertyChangedBuilder
…… .
;
……. /
}
   	
static
ÀÀ 
public
ÀÀ 
bool
ÀÀ 
ArrayEquals
ÀÀ &
(
ÀÀ& '
byte
ÀÀ' +
[
ÀÀ+ ,
]
ÀÀ, -
p1
ÀÀ. 0
,
ÀÀ0 1
byte
ÀÀ2 6
[
ÀÀ6 7
]
ÀÀ7 8
p2
ÀÀ9 ;
)
ÀÀ; <
{
ÃÃ 	
if
ÕÕ 
(
ÕÕ 
object
ÕÕ 
.
ÕÕ 
ReferenceEquals
ÕÕ &
(
ÕÕ& '
p1
ÕÕ' )
,
ÕÕ) *
p2
ÕÕ+ -
)
ÕÕ- .
)
ÕÕ. /
return
ŒŒ 
true
ŒŒ 
;
ŒŒ 
if
œœ 
(
œœ 
p1
œœ 
==
œœ 
null
œœ 
||
œœ 
p1
œœ  
==
œœ! #
null
œœ$ (
)
œœ( )
return
–– 
p1
–– 
==
–– 
null
–– !
&&
––" $
p2
––% '
==
––( *
null
––+ /
;
––/ 0
if
—— 
(
—— 
p1
—— 
.
—— 
Length
—— 
==
—— 
p2
—— 
.
——  
Length
——  &
)
——& '
{
““ 
for
‘‘ 
(
‘‘ 
int
‘‘ 
i
‘‘ 
=
‘‘ 
$num
‘‘ 
;
‘‘ 
i
‘‘  !
<
‘‘" #
p1
‘‘$ &
.
‘‘& '
Length
‘‘' -
;
‘‘- .
i
‘‘/ 0
++
‘‘0 2
)
‘‘2 3
if
’’ 
(
’’ 
p1
’’ 
[
’’ 
i
’’ 
]
’’ 
!=
’’  
p2
’’! #
[
’’# $
i
’’$ %
]
’’% &
)
’’& '
return
÷÷ 
false
÷÷ $
;
÷÷$ %
return
◊◊ 
true
◊◊ 
;
◊◊ 
}
ÿÿ 
return
ŸŸ 
false
ŸŸ 
;
ŸŸ 
}
⁄⁄ 	
private
€€ 
static
€€ 
void
€€ 

WrapMethod
€€ &
(
€€& '
PropertyInfo
€€' 3
item
€€4 8
,
€€8 9

MethodInfo
€€: D"
raisePropertyChanged
€€E Y
,
€€Y Z
TypeBuilder
€€[ f
typeBuilder
€€g r
)
€€r s
{
‹‹ 	

MethodInfo
ﬁﬁ 
	setMethod
ﬁﬁ  
=
ﬁﬁ! "
item
ﬁﬁ# '
.
ﬁﬁ' (
GetSetMethod
ﬁﬁ( 4
(
ﬁﬁ4 5
)
ﬁﬁ5 6
;
ﬁﬁ6 7

MethodInfo
‡‡ 
	getMethod
‡‡  
=
‡‡! "
item
‡‡# '
.
‡‡' (
GetGetMethod
‡‡( 4
(
‡‡4 5
)
‡‡5 6
;
‡‡6 7
var
‚‚ 
notfiychanging
‚‚ 
=
‚‚  
item
‚‚! %
.
‚‚% &
DeclaringType
‚‚& 3
.
‚‚3 4
	GetMethod
‚‚4 =
(
‚‚= >
$str
‚‚> N
,
‚‚N O
BindingFlags
‚‚P \
.
‚‚\ ]
Instance
‚‚] e
|
‚‚f g
BindingFlags
‚‚h t
.
‚‚t u
Public
‚‚u {
|
‚‚| }
BindingFlags‚‚~ ä
.‚‚ä ã
	NonPublic‚‚ã î
)‚‚î ï
;‚‚ï ñ
var
ÂÂ 
types
ÂÂ 
=
ÂÂ 
from
ÂÂ 
t
ÂÂ 
in
ÂÂ !
	setMethod
ÂÂ" +
.
ÂÂ+ ,
GetParameters
ÂÂ, 9
(
ÂÂ9 :
)
ÂÂ: ;
select
ÊÊ 
t
ÊÊ  
.
ÊÊ  !
ParameterType
ÊÊ! .
;
ÊÊ. /
MethodBuilder
ËË 
setMethodBuilder
ËË *
=
ËË+ ,
typeBuilder
ËË- 8
.
ËË8 9
DefineMethod
ËË9 E
(
ËËE F
	setMethod
ÈÈ 
.
ÈÈ 
Name
ÈÈ 
,
ÈÈ 
	setMethod
ÈÈ  )
.
ÈÈ) *

Attributes
ÈÈ* 4
,
ÈÈ4 5
	setMethod
ÍÍ 
.
ÍÍ 

ReturnType
ÍÍ $
,
ÍÍ$ %
types
ÍÍ& +
.
ÍÍ+ ,
ToArray
ÍÍ, 3
(
ÍÍ3 4
)
ÍÍ4 5
)
ÍÍ5 6
;
ÍÍ6 7
typeBuilder
ÎÎ 
.
ÎÎ "
DefineMethodOverride
ÎÎ ,
(
ÎÎ, -
setMethodBuilder
ÏÏ 
,
ÏÏ 
	setMethod
ÏÏ '
)
ÏÏ' (
;
ÏÏ( )
ILGenerator
ÓÓ  
setMethodWrapperIl
ÓÓ *
=
ÓÓ+ ,
setMethodBuilder
ÓÓ- =
.
ÓÓ= >
GetILGenerator
ÓÓ> L
(
ÓÓL M
)
ÓÓM N
;
ÓÓN O
var
ÔÔ 
	labelExit
ÔÔ 
=
ÔÔ  
setMethodWrapperIl
ÔÔ .
.
ÔÔ. /
DefineLabel
ÔÔ/ :
(
ÔÔ: ;
)
ÔÔ; <
;
ÔÔ< = 
setMethodWrapperIl
ÛÛ 
.
ÛÛ 
Emit
ÛÛ #
(
ÛÛ# $
OpCodes
ÛÛ$ +
.
ÛÛ+ ,
Ldarg_0
ÛÛ, 3
)
ÛÛ3 4
;
ÛÛ4 5 
setMethodWrapperIl
ÙÙ 
.
ÙÙ 
EmitCall
ÙÙ '
(
ÙÙ' (
OpCodes
ÙÙ( /
.
ÙÙ/ 0
Call
ÙÙ0 4
,
ÙÙ4 5
	getMethod
ÙÙ6 ?
,
ÙÙ? @
null
ÙÙA E
)
ÙÙE F
;
ÙÙF G 
setMethodWrapperIl
ˆˆ 
.
ˆˆ 
Emit
ˆˆ #
(
ˆˆ# $
OpCodes
ˆˆ$ +
.
ˆˆ+ ,
Ldarg_1
ˆˆ, 3
)
ˆˆ3 4
;
ˆˆ4 5
if
˜˜ 
(
˜˜ 
item
˜˜ 
.
˜˜ 
PropertyType
˜˜ !
==
˜˜" $
typeof
˜˜% +
(
˜˜+ ,
string
˜˜, 2
)
˜˜2 3
)
˜˜3 4
{
¯¯  
setMethodWrapperIl
˘˘ "
.
˘˘" #
Emit
˘˘# '
(
˘˘' (
OpCodes
˘˘( /
.
˘˘/ 0
Call
˘˘0 4
,
˘˘4 5
typeof
˘˘6 <
(
˘˘< =
String
˘˘= C
)
˘˘C D
.
˘˘D E
	GetMethod
˘˘E N
(
˘˘N O
$str
˘˘O \
,
˘˘\ ]
new
˘˘^ a
Type
˘˘b f
[
˘˘f g
]
˘˘g h
{
˘˘i j
typeof
˘˘k q
(
˘˘q r
string
˘˘r x
)
˘˘x y
,
˘˘y z
typeof˘˘{ Å
(˘˘Å Ç
string˘˘Ç à
)˘˘à â
}˘˘ä ã
)˘˘ã å
)˘˘å ç
;˘˘ç é 
setMethodWrapperIl
˙˙ "
.
˙˙" #
Emit
˙˙# '
(
˙˙' (
OpCodes
˙˙( /
.
˙˙/ 0
Ldc_I4
˙˙0 6
,
˙˙6 7
$num
˙˙8 9
)
˙˙9 :
;
˙˙: ;
}
¸¸ 
else
˝˝ 
if
˝˝ 
(
˝˝ 
item
˝˝ 
.
˝˝ 
PropertyType
˝˝ &
==
˝˝' )
typeof
˝˝* 0
(
˝˝0 1
byte
˝˝1 5
[
˝˝5 6
]
˝˝6 7
)
˝˝7 8
)
˝˝8 9
{
˛˛  
setMethodWrapperIl
ˇˇ "
.
ˇˇ" #
Emit
ˇˇ# '
(
ˇˇ' (
OpCodes
ˇˇ( /
.
ˇˇ/ 0
Call
ˇˇ0 4
,
ˇˇ4 5
typeof
ˇˇ6 <
(
ˇˇ< = 
ProperyChangeProxy
ˇˇ= O
)
ˇˇO P
.
ˇˇP Q
	GetMethod
ˇˇQ Z
(
ˇˇZ [
$str
ˇˇ[ h
,
ˇˇh i
BindingFlags
ÄÄ  
.
ÄÄ  !
Public
ÄÄ! '
|
ÄÄ( )
BindingFlags
ÄÄ* 6
.
ÄÄ6 7
Static
ÄÄ7 =
)
ÄÄ= >
)
ÄÄ> ?
;
ÄÄ? @ 
setMethodWrapperIl
ÅÅ "
.
ÅÅ" #
Emit
ÅÅ# '
(
ÅÅ' (
OpCodes
ÅÅ( /
.
ÅÅ/ 0
Ldc_I4
ÅÅ0 6
,
ÅÅ6 7
$num
ÅÅ8 9
)
ÅÅ9 :
;
ÅÅ: ;
}
ÉÉ  
setMethodWrapperIl
ÑÑ 
.
ÑÑ 
Emit
ÑÑ #
(
ÑÑ# $
OpCodes
ÑÑ$ +
.
ÑÑ+ ,
Ceq
ÑÑ, /
)
ÑÑ/ 0
;
ÑÑ0 1 
setMethodWrapperIl
ÖÖ 
.
ÖÖ 
Emit
ÖÖ #
(
ÖÖ# $
OpCodes
ÖÖ$ +
.
ÖÖ+ ,
Brtrue
ÖÖ, 2
,
ÖÖ2 3
	labelExit
ÖÖ4 =
)
ÖÖ= >
;
ÖÖ> ?
if
ÜÜ 
(
ÜÜ 
notfiychanging
ÜÜ 
!=
ÜÜ !
null
ÜÜ" &
)
ÜÜ& '
{
áá  
setMethodWrapperIl
àà "
.
àà" #
Emit
àà# '
(
àà' (
OpCodes
àà( /
.
àà/ 0
Ldarg_0
àà0 7
)
àà7 8
;
àà8 9 
setMethodWrapperIl
ââ "
.
ââ" #
Emit
ââ# '
(
ââ' (
OpCodes
ââ( /
.
ââ/ 0
Ldstr
ââ0 5
,
ââ5 6
item
ââ7 ;
.
ââ; <
Name
ââ< @
)
ââ@ A
;
ââA B 
setMethodWrapperIl
ää "
.
ää" #
EmitCall
ää# +
(
ää+ ,
OpCodes
ãã 
.
ãã 
Call
ãã 
,
ãã 
notfiychanging
ãã ,
,
ãã, -
null
ãã. 2
)
ãã2 3
;
ãã3 4
}
åå  
setMethodWrapperIl
èè 
.
èè 
Emit
èè #
(
èè# $
OpCodes
èè$ +
.
èè+ ,
Ldarg_0
èè, 3
)
èè3 4
;
èè4 5 
setMethodWrapperIl
êê 
.
êê 
Emit
êê #
(
êê# $
OpCodes
êê$ +
.
êê+ ,
Ldarg_1
êê, 3
)
êê3 4
;
êê4 5 
setMethodWrapperIl
ëë 
.
ëë 
EmitCall
ëë '
(
ëë' (
OpCodes
íí 
.
íí 
Call
íí 
,
íí 
	setMethod
íí #
,
íí# $
null
íí% )
)
íí) *
;
íí* + 
setMethodWrapperIl
ïï 
.
ïï 
Emit
ïï #
(
ïï# $
OpCodes
ïï$ +
.
ïï+ ,
Ldarg_0
ïï, 3
)
ïï3 4
;
ïï4 5 
setMethodWrapperIl
ññ 
.
ññ 
Emit
ññ #
(
ññ# $
OpCodes
ññ$ +
.
ññ+ ,
Ldstr
ññ, 1
,
ññ1 2
item
ññ3 7
.
ññ7 8
Name
ññ8 <
)
ññ< =
;
ññ= > 
setMethodWrapperIl
óó 
.
óó 
EmitCall
óó '
(
óó' (
OpCodes
òò 
.
òò 
Call
òò 
,
òò "
raisePropertyChanged
òò .
,
òò. /
null
òò0 4
)
òò4 5
;
òò5 6 
setMethodWrapperIl
öö 
.
öö 
	MarkLabel
öö (
(
öö( )
	labelExit
öö) 2
)
öö2 3
;
öö3 4 
setMethodWrapperIl
úú 
.
úú 
Emit
úú #
(
úú# $
OpCodes
úú$ +
.
úú+ ,
Ret
úú, /
)
úú/ 0
;
úú0 1
}
ùù 	
}
ûû 
public
†† 

class
†† !
DynamicBindingProxy
†† $
<
††$ %
T
††% &
>
††& '
:
††( )
DynamicObject
††* 7
,
††7 8$
INotifyPropertyChanged
††9 O
{
°° 
public
¢¢ 
event
¢¢ )
PropertyChangedEventHandler
¢¢ 0
PropertyChanged
¢¢1 @
;
¢¢@ A
private
££ 
static
££ 
readonly
££ 

Dictionary
££  *
<
££* +
string
££+ 1
,
££1 2

Dictionary
££3 =
<
££= >
string
££> D
,
££D E
PropertyInfo
££F R
>
££R S
>
££S T

properties
££U _
=
££` a
new
§§ 

Dictionary
§§ 
<
§§ 
string
§§ !
,
§§! "

Dictionary
§§# -
<
§§- .
string
§§. 4
,
§§4 5
PropertyInfo
§§6 B
>
§§B C
>
§§C D
(
§§D E
)
§§E F
;
§§F G
private
•• 
readonly
•• 
T
•• 
instance
•• #
;
••# $
private
¶¶ 
readonly
¶¶ 
string
¶¶ 
typeName
¶¶  (
;
¶¶( )
public
®® !
DynamicBindingProxy
®® "
(
®®" #
T
®®# $
instance
®®% -
)
®®- .
{
©© 	
this
™™ 
.
™™ 
instance
™™ 
=
™™ 
instance
™™ $
;
™™$ %
var
´´ 
type
´´ 
=
´´ 
typeof
´´ 
(
´´ 
T
´´ 
)
´´  
;
´´  !
typeName
¨¨ 
=
¨¨ 
type
¨¨ 
.
¨¨ 
FullName
¨¨ $
;
¨¨$ %
if
≠≠ 
(
≠≠ 
!
≠≠ 

properties
≠≠ 
.
≠≠ 
ContainsKey
≠≠ '
(
≠≠' (
typeName
≠≠( 0
)
≠≠0 1
)
≠≠1 2
SetProperties
ÆÆ 
(
ÆÆ 
type
ÆÆ "
,
ÆÆ" #
typeName
ÆÆ$ ,
)
ÆÆ, -
;
ÆÆ- .
}
ØØ 	
private
±± 
static
±± 
void
±± 
SetProperties
±± )
(
±±) *
Type
±±* .
type
±±/ 3
,
±±3 4
string
±±5 ;
typeName
±±< D
)
±±D E
{
≤≤ 	
var
≥≥ 
props
≥≥ 
=
≥≥ 
type
≥≥ 
.
≥≥ 
GetProperties
≥≥ *
(
≥≥* +
BindingFlags
≥≥+ 7
.
≥≥7 8
Public
≥≥8 >
|
≥≥? @
BindingFlags
≥≥A M
.
≥≥M N
Instance
≥≥N V
)
≥≥V W
;
≥≥W X
var
¥¥ 
dict
¥¥ 
=
¥¥ 
props
¥¥ 
.
¥¥ 
ToDictionary
¥¥ )
(
¥¥) *
prop
¥¥* .
=>
¥¥/ 1
prop
¥¥2 6
.
¥¥6 7
Name
¥¥7 ;
)
¥¥; <
;
¥¥< =

properties
µµ 
.
µµ 
Add
µµ 
(
µµ 
typeName
µµ #
,
µµ# $
dict
µµ% )
)
µµ) *
;
µµ* +
}
∂∂ 	
public
∏∏ 
override
∏∏ 
bool
∏∏ 
TryGetMember
∏∏ )
(
∏∏) *
GetMemberBinder
∏∏* 9
binder
∏∏: @
,
∏∏@ A
out
∏∏B E
object
∏∏F L
result
∏∏M S
)
∏∏S T
{
ππ 	
if
∫∫ 
(
∫∫ 

properties
∫∫ 
[
∫∫ 
typeName
∫∫ #
]
∫∫# $
.
∫∫$ %
ContainsKey
∫∫% 0
(
∫∫0 1
binder
∫∫1 7
.
∫∫7 8
Name
∫∫8 <
)
∫∫< =
)
∫∫= >
{
ªª 
result
ºº 
=
ºº 

properties
ºº #
[
ºº# $
typeName
ºº$ ,
]
ºº, -
[
ºº- .
binder
ºº. 4
.
ºº4 5
Name
ºº5 9
]
ºº9 :
.
ºº: ;
GetValue
ºº; C
(
ººC D
instance
ººD L
,
ººL M
null
ººN R
)
ººR S
;
ººS T
return
ΩΩ 
true
ΩΩ 
;
ΩΩ 
}
ææ 
result
øø 
=
øø 
null
øø 
;
øø 
return
¿¿ 
false
¿¿ 
;
¿¿ 
}
¡¡ 	
public
√√ 
override
√√ 
bool
√√ 
TrySetMember
√√ )
(
√√) *
SetMemberBinder
√√* 9
binder
√√: @
,
√√@ A
object
√√B H
value
√√I N
)
√√N O
{
ƒƒ 	
if
≈≈ 
(
≈≈ 

properties
≈≈ 
[
≈≈ 
typeName
≈≈ #
]
≈≈# $
.
≈≈$ %
ContainsKey
≈≈% 0
(
≈≈0 1
binder
≈≈1 7
.
≈≈7 8
Name
≈≈8 <
)
≈≈< =
)
≈≈= >
{
∆∆ 

properties
«« 
[
«« 
typeName
«« #
]
««# $
[
««$ %
binder
««% +
.
««+ ,
Name
««, 0
]
««0 1
.
««1 2
SetValue
««2 :
(
««: ;
instance
««; C
,
««C D
value
««E J
,
««J K
null
««L P
)
««P Q
;
««Q R
if
»» 
(
»» 
PropertyChanged
»» #
!=
»»$ &
null
»»' +
)
»»+ ,
PropertyChanged
…… #
(
……# $
this
……$ (
,
……( )
new
……* -&
PropertyChangedEventArgs
……. F
(
……F G
binder
……G M
.
……M N
Name
……N R
)
……R S
)
……S T
;
……T U
return
   
true
   
;
   
}
ÀÀ 
return
ÃÃ 
false
ÃÃ 
;
ÃÃ 
}
ÕÕ 	
}
ŒŒ 
}œœ ≠
ÅD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str $
)$ %
]% &
[		 
assembly		 	
:			 

AssemblyDescription		 
(		 
$str		 3
)		3 4
]		4 5
[

 
assembly

 	
:

	 
!
AssemblyConfiguration

  
(

  !
$str

! #
)

# $
]

$ %
[ 
assembly 	
:	 

AssemblyCompany 
( 
$str 
) 
] 
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str &
)& '
]' (
[ 
assembly 	
:	 

AssemblyCopyright 
( 
$str 9
)9 :
]: ;
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str 
)  
]  !
[ 
assembly 	
:	 

AssemblyCulture 
( 
$str 
) 
] 
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8
[## 
assembly## 	
:##	 

AssemblyVersion## 
(## 
$str## %
)##% &
]##& '
[$$ 
assembly$$ 	
:$$	 

AssemblyFileVersion$$ 
($$ 
$str$$ )
)$$) *
]$$* +Ú§
zD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\ServiceInstaller.cs
	namespace 	
Infoline
 
. 
	Framework 
. 
ServiceInstaller -
{ 
[

 
Flags

 

]


 
public 

enum  
ServiceManagerRights $
{ 
Connect 
= 
$num 
, 
CreateService 
= 
$num 
, 
EnumerateService 
= 
$num !
,! "
Lock 
= 
$num 
, 
QueryLockStatus   
=   
$num    
,    !
ModifyBootConfig$$ 
=$$ 
$num$$ !
,$$! ""
StandardRightsRequired(( 
=((  
$num((! (
,((( )
	AllAccess,, 
=,, 
(,, "
StandardRightsRequired,, +
|,,, -
Connect,,. 5
|,,6 7
CreateService,,8 E
|,,F G
EnumerateService-- 
|-- 
Lock-- 
|--  !
QueryLockStatus--" 1
|--2 3
ModifyBootConfig--4 D
)--D E
}.. 
[33 
Flags33 

]33
 
public44 

enum44 
ServiceRights44 
{55 
QueryConfig99 
=99 
$num99 
,99 
ChangeConfig== 
=== 
$num== 
,== 
QueryStatusAA 
=AA 
$numAA 
,AA 
EnumerateDependantsEE 
=EE 
$numEE !
,EE! "
StartII 
=II 
$numII 
,II 
StopMM 
=MM 
$numMM 
,MM 
PauseContinueQQ 
=QQ 
$numQQ 
,QQ 
InterrogateUU 
=UU 
$numUU 
,UU 
UserDefinedControlYY 
=YY 
$numYY "
,YY" #
Delete]] 
=]] 
$num]] 
,]] "
StandardRightsRequiredaa 
=aa  
$numaa! (
,aa( )
	AllAccessee 
=ee 
(ee "
StandardRightsRequiredee +
|ee, -
QueryConfigee. 9
|ee: ;
ChangeConfigee< H
|eeI J
QueryStatusff 
|ff 
EnumerateDependantsff )
|ff* +
Startff, 1
|ff2 3
Stopff4 8
|ff9 :
PauseContinueff; H
|ffI J
Interrogategg 
|gg 
UserDefinedControlgg (
)gg( )
}hh 
publicmm 

enummm 
ServiceBootFlagmm 
{nn 
Startrr 
=rr 
$numrr 
,rr 
SystemStartvv 
=vv 
$numvv  
,vv  !
	AutoStartzz 
=zz 
$numzz 
,zz 
DemandStart~~ 
=~~ 
$num~~  
,~~  !
Disabled
ÇÇ 
=
ÇÇ 
$num
ÇÇ 
}
ÉÉ 
public
àà 

enum
àà 
ServiceState
àà 
{
ââ 
Unknown
çç 
=
çç 
-
çç 
$num
çç 
,
çç 
NotFound
ëë 
=
ëë 
$num
ëë 
,
ëë 
Stop
ïï 
=
ïï 
$num
ïï 
,
ïï 
Run
ôô 
=
ôô 
$num
ôô 
,
ôô 
Stopping
ùù 
=
ùù 
$num
ùù 
,
ùù 
Starting
°° 
=
°° 
$num
°° 
,
°° 
}
¢¢ 
public
ßß 

enum
ßß 
ServiceControl
ßß 
{
®® 
Stop
¨¨ 
=
¨¨ 
$num
¨¨ 
,
¨¨ 
Pause
∞∞ 
=
∞∞ 
$num
∞∞ 
,
∞∞ 
Continue
¥¥ 
=
¥¥ 
$num
¥¥ 
,
¥¥ 
Interrogate
∏∏ 
=
∏∏ 
$num
∏∏  
,
∏∏  !
Shutdown
ºº 
=
ºº 
$num
ºº 
,
ºº 
ParamChange
¿¿ 
=
¿¿ 
$num
¿¿  
,
¿¿  !

NetBindAdd
ƒƒ 
=
ƒƒ 
$num
ƒƒ 
,
ƒƒ  
NetBindRemove
»» 
=
»» 
$num
»» "
,
»»" #
NetBindEnable
ÃÃ 
=
ÃÃ 
$num
ÃÃ "
,
ÃÃ" #
NetBindDisable
–– 
=
–– 
$num
–– #
}
—— 
public
÷÷ 

enum
÷÷ 
ServiceError
÷÷ 
{
◊◊ 
Ignore
€€ 
=
€€ 
$num
€€ 
,
€€ 
Normal
ﬂﬂ 
=
ﬂﬂ 
$num
ﬂﬂ 
,
ﬂﬂ 
Severe
„„ 
=
„„ 
$num
„„ 
,
„„ 
Critical
ÁÁ 
=
ÁÁ 
$num
ÁÁ 
}
ËË 
public
ÌÌ 

class
ÌÌ 
SvcInstaller
ÌÌ 
{
ÓÓ 
private
 
const
 
int
 &
STANDARD_RIGHTS_REQUIRED
 2
=
3 4
$num
5 <
;
< =
private
ÒÒ 
const
ÒÒ 
int
ÒÒ '
SERVICE_WIN32_OWN_PROCESS
ÒÒ 3
=
ÒÒ4 5
$num
ÒÒ6 @
;
ÒÒ@ A
[
ÛÛ 	
StructLayout
ÛÛ	 
(
ÛÛ 

LayoutKind
ÛÛ  
.
ÛÛ  !

Sequential
ÛÛ! +
)
ÛÛ+ ,
]
ÛÛ, -
private
ÙÙ 
class
ÙÙ 
SERVICE_STATUS
ÙÙ $
{
ıı 	
public
ˆˆ 
int
ˆˆ 
dwServiceType
ˆˆ $
=
ˆˆ% &
$num
ˆˆ' (
;
ˆˆ( )
public
˜˜ 
ServiceState
˜˜ 
dwCurrentState
˜˜  .
=
˜˜/ 0
$num
˜˜1 2
;
˜˜2 3
public
¯¯ 
int
¯¯  
dwControlsAccepted
¯¯ )
=
¯¯* +
$num
¯¯, -
;
¯¯- .
public
˘˘ 
int
˘˘ 
dwWin32ExitCode
˘˘ &
=
˘˘' (
$num
˘˘) *
;
˘˘* +
public
˙˙ 
int
˙˙ '
dwServiceSpecificExitCode
˙˙ 0
=
˙˙1 2
$num
˙˙3 4
;
˙˙4 5
public
˚˚ 
int
˚˚ 
dwCheckPoint
˚˚ #
=
˚˚$ %
$num
˚˚& '
;
˚˚' (
public
¸¸ 
int
¸¸ 

dwWaitHint
¸¸ !
=
¸¸" #
$num
¸¸$ %
;
¸¸% &
}
˝˝ 	
[
ˇˇ 	
	DllImport
ˇˇ	 
(
ˇˇ 
$str
ˇˇ !
,
ˇˇ! "

EntryPoint
ˇˇ# -
=
ˇˇ. /
$str
ˇˇ0 @
)
ˇˇ@ A
]
ˇˇA B
private
ÄÄ 
static
ÄÄ 
extern
ÄÄ 
IntPtr
ÄÄ $
OpenSCManager
ÄÄ% 2
(
ÄÄ2 3
string
ÄÄ3 9
lpMachineName
ÄÄ: G
,
ÄÄG H
string
ÄÄI O
lpDatabaseName
ÅÅ 
,
ÅÅ "
ServiceManagerRights
ÅÅ ,
dwDesiredAccess
ÅÅ- <
)
ÅÅ< =
;
ÅÅ= >
[
ÇÇ 	
	DllImport
ÇÇ	 
(
ÇÇ 
$str
ÇÇ !
,
ÇÇ! "

EntryPoint
ÇÇ# -
=
ÇÇ. /
$str
ÇÇ0 >
,
ÇÇ> ?
CharSet
ÉÉ 
=
ÉÉ 
CharSet
ÉÉ 
.
ÉÉ 
Ansi
ÉÉ 
)
ÉÉ 
]
ÉÉ  
private
ÑÑ 
static
ÑÑ 
extern
ÑÑ 
IntPtr
ÑÑ $
OpenService
ÑÑ% 0
(
ÑÑ0 1
IntPtr
ÑÑ1 7

hSCManager
ÑÑ8 B
,
ÑÑB C
string
ÑÑD J
lpServiceName
ÖÖ 
,
ÖÖ 
ServiceRights
ÖÖ $
dwDesiredAccess
ÖÖ% 4
)
ÖÖ4 5
;
ÖÖ5 6
[
ÜÜ 	
	DllImport
ÜÜ	 
(
ÜÜ 
$str
ÜÜ !
,
ÜÜ! "

EntryPoint
ÜÜ# -
=
ÜÜ. /
$str
ÜÜ0 @
)
ÜÜ@ A
]
ÜÜA B
private
áá 
static
áá 
extern
áá 
IntPtr
áá $
CreateService
áá% 2
(
áá2 3
IntPtr
áá3 9

hSCManager
áá: D
,
ááD E
string
ááF L
lpServiceName
àà 
,
àà 
string
àà 
lpDisplayName
àà +
,
àà+ ,
ServiceRights
àà- :
dwDesiredAccess
àà; J
,
ààJ K
int
ààL O
dwServiceType
ââ 
,
ââ 
ServiceBootFlag
ââ &
dwStartType
ââ' 2
,
ââ2 3
ServiceError
ââ4 @
dwErrorControl
ââA O
,
ââO P
string
ää 
lpBinaryPathName
ää 
,
ää  
string
ää! '
lpLoadOrderGroup
ää( 8
,
ää8 9
IntPtr
ää: @
	lpdwTagId
ääA J
,
ääJ K
string
ääL R
lpDependencies
ãã 
,
ãã 
string
ãã 
lp
ãã !
,
ãã! "
string
ãã# )

lpPassword
ãã* 4
)
ãã4 5
;
ãã5 6
[
åå 	
	DllImport
åå	 
(
åå 
$str
åå !
)
åå! "
]
åå" #
private
çç 
static
çç 
extern
çç 
int
çç ! 
CloseServiceHandle
çç" 4
(
çç4 5
IntPtr
çç5 ;
	hSCObject
çç< E
)
ççE F
;
ççF G
[
éé 	
	DllImport
éé	 
(
éé 
$str
éé !
)
éé! "
]
éé" #
private
èè 
static
èè 
extern
èè 
int
èè ! 
QueryServiceStatus
èè" 4
(
èè4 5
IntPtr
èè5 ;
hService
èè< D
,
èèD E
SERVICE_STATUS
êê 
lpServiceStatus
êê &
)
êê& '
;
êê' (
[
ëë 	
	DllImport
ëë	 
(
ëë 
$str
ëë !
,
ëë! "
SetLastError
ëë# /
=
ëë0 1
true
ëë2 6
)
ëë6 7
]
ëë7 8
private
íí 
static
íí 
extern
íí 
int
íí !
DeleteService
íí" /
(
íí/ 0
IntPtr
íí0 6
hService
íí7 ?
)
íí? @
;
íí@ A
[
ìì 	
	DllImport
ìì	 
(
ìì 
$str
ìì !
)
ìì! "
]
ìì" #
private
îî 
static
îî 
extern
îî 
int
îî !
ControlService
îî" 0
(
îî0 1
IntPtr
îî1 7
hService
îî8 @
,
îî@ A
ServiceControl
îîB P
	dwControl
ïï 
,
ïï 
SERVICE_STATUS
ïï !
lpServiceStatus
ïï" 1
)
ïï1 2
;
ïï2 3
[
ññ 	
	DllImport
ññ	 
(
ññ 
$str
ññ !
,
ññ! "

EntryPoint
ññ# -
=
ññ. /
$str
ññ0 ?
)
ññ? @
]
ññ@ A
private
óó 
static
óó 
extern
óó 
int
óó !
StartService
óó" .
(
óó. /
IntPtr
óó/ 5
hService
óó6 >
,
óó> ?
int
óó@ C
dwNumServiceArgs
òò 
,
òò 
int
òò !
lpServiceArgVectors
òò 1
)
òò1 2
;
òò2 3
public
ùù 
SvcInstaller
ùù 
(
ùù 
)
ùù 
{
ûû 	
}
üü 	
public
•• 
static
•• 
void
•• 
	Uninstall
•• $
(
••$ %
string
••% +
ServiceName
••, 7
)
••7 8
{
¶¶ 	
IntPtr
ßß 
scman
ßß 
=
ßß 
OpenSCManager
ßß (
(
ßß( )"
ServiceManagerRights
ßß) =
.
ßß= >
Connect
ßß> E
)
ßßE F
;
ßßF G
try
®® 
{
©© 
IntPtr
™™ 
service
™™ 
=
™™  
OpenService
™™! ,
(
™™, -
scman
™™- 2
,
™™2 3
ServiceName
™™4 ?
,
™™? @
ServiceRights
´´ 
.
´´ $
StandardRightsRequired
´´ 4
|
´´5 6
ServiceRights
´´7 D
.
´´D E
Stop
´´E I
|
´´J K
ServiceRights
¨¨ 
.
¨¨ 
QueryStatus
¨¨ )
)
¨¨) *
;
¨¨* +
if
≠≠ 
(
≠≠ 
service
≠≠ 
==
≠≠ 
IntPtr
≠≠ %
.
≠≠% &
Zero
≠≠& *
)
≠≠* +
{
ÆÆ 
throw
ØØ 
new
ØØ "
ApplicationException
ØØ 2
(
ØØ2 3
$str
ØØ3 K
)
ØØK L
;
ØØL M
}
∞∞ 
try
±± 
{
≤≤ 
StopService
≥≥ 
(
≥≥  
service
≥≥  '
)
≥≥' (
;
≥≥( )
int
¥¥ 
ret
¥¥ 
=
¥¥ 
DeleteService
¥¥ +
(
¥¥+ ,
service
¥¥, 3
)
¥¥3 4
;
¥¥4 5
if
µµ 
(
µµ 
ret
µµ 
==
µµ 
$num
µµ  
)
µµ  !
{
∂∂ 
int
∑∑ 
error
∑∑ !
=
∑∑" #
Marshal
∑∑$ +
.
∑∑+ ,
GetLastWin32Error
∑∑, =
(
∑∑= >
)
∑∑> ?
;
∑∑? @
throw
∏∏ 
new
∏∏ !"
ApplicationException
∏∏" 6
(
∏∏6 7
$str
∏∏7 R
+
∏∏S T
error
∏∏U Z
)
∏∏Z [
;
∏∏[ \
}
ππ 
}
∫∫ 
finally
ªª 
{
ºº  
CloseServiceHandle
ΩΩ &
(
ΩΩ& '
service
ΩΩ' .
)
ΩΩ. /
;
ΩΩ/ 0
}
ææ 
}
øø 
finally
¿¿ 
{
¡¡  
CloseServiceHandle
¬¬ "
(
¬¬" #
scman
¬¬# (
)
¬¬( )
;
¬¬) *
}
√√ 
}
ƒƒ 	
public
ÀÀ 
static
ÀÀ 
bool
ÀÀ  
ServiceIsInstalled
ÀÀ -
(
ÀÀ- .
string
ÀÀ. 4
ServiceName
ÀÀ5 @
)
ÀÀ@ A
{
ÃÃ 	
IntPtr
ÕÕ 
scman
ÕÕ 
=
ÕÕ 
OpenSCManager
ÕÕ (
(
ÕÕ( )"
ServiceManagerRights
ÕÕ) =
.
ÕÕ= >
Connect
ÕÕ> E
)
ÕÕE F
;
ÕÕF G
try
ŒŒ 
{
œœ 
IntPtr
–– 
service
–– 
=
––  
OpenService
––! ,
(
––, -
scman
––- 2
,
––2 3
ServiceName
––4 ?
,
––? @
ServiceRights
—— 
.
—— 
QueryStatus
—— )
)
——) *
;
——* +
if
““ 
(
““ 
service
““ 
==
““ 
IntPtr
““ %
.
““% &
Zero
““& *
)
““* +
return
““, 2
false
““3 8
;
““8 9 
CloseServiceHandle
”” "
(
””" #
service
””# *
)
””* +
;
””+ ,
return
‘‘ 
true
‘‘ 
;
‘‘ 
}
’’ 
finally
÷÷ 
{
◊◊  
CloseServiceHandle
ÿÿ "
(
ÿÿ" #
scman
ÿÿ# (
)
ÿÿ( )
;
ÿÿ) *
}
ŸŸ 
}
⁄⁄ 	
public
‚‚ 
static
‚‚ 
void
‚‚ 
Install
‚‚ "
(
‚‚" #
string
‚‚# )
ServiceName
‚‚* 5
,
‚‚5 6
string
‚‚7 =
DisplayName
‚‚> I
,
‚‚I J
string
„„ 
FileName
„„ 
,
„„ 
bool
„„ 
start
„„ #
)
„„# $
{
‰‰ 	
IntPtr
ÂÂ 
scman
ÂÂ 
=
ÂÂ 
OpenSCManager
ÂÂ (
(
ÂÂ( )"
ServiceManagerRights
ÂÂ) =
.
ÂÂ= >
Connect
ÂÂ> E
|
ÂÂF G"
ServiceManagerRights
ÊÊ  
.
ÊÊ  !
CreateService
ÊÊ! .
)
ÊÊ. /
;
ÊÊ/ 0
try
ÁÁ 
{
ËË 
IntPtr
ÈÈ 
service
ÈÈ 
=
ÈÈ  
OpenService
ÈÈ! ,
(
ÈÈ, -
scman
ÈÈ- 2
,
ÈÈ2 3
ServiceName
ÈÈ4 ?
,
ÈÈ? @
ServiceRights
ÍÍ 
.
ÍÍ 
QueryStatus
ÍÍ )
|
ÍÍ* +
ServiceRights
ÍÍ, 9
.
ÍÍ9 :
Start
ÍÍ: ?
)
ÍÍ? @
;
ÍÍ@ A
if
ÎÎ 
(
ÎÎ 
service
ÎÎ 
==
ÎÎ 
IntPtr
ÎÎ %
.
ÎÎ% &
Zero
ÎÎ& *
)
ÎÎ* +
{
ÏÏ 
service
ÌÌ 
=
ÌÌ 
CreateService
ÌÌ +
(
ÌÌ+ ,
scman
ÌÌ, 1
,
ÌÌ1 2
ServiceName
ÌÌ3 >
,
ÌÌ> ?
DisplayName
ÌÌ@ K
,
ÌÌK L
ServiceRights
ÓÓ !
.
ÓÓ! "
QueryStatus
ÓÓ" -
|
ÓÓ. /
ServiceRights
ÓÓ0 =
.
ÓÓ= >
Start
ÓÓ> C
,
ÓÓC D'
SERVICE_WIN32_OWN_PROCESS
ÓÓE ^
,
ÓÓ^ _
ServiceBootFlag
ÔÔ #
.
ÔÔ# $
	AutoStart
ÔÔ$ -
,
ÔÔ- .
ServiceError
ÔÔ/ ;
.
ÔÔ; <
Normal
ÔÔ< B
,
ÔÔB C
FileName
ÔÔD L
,
ÔÔL M
null
ÔÔN R
,
ÔÔR S
IntPtr
ÔÔT Z
.
ÔÔZ [
Zero
ÔÔ[ _
,
ÔÔ_ `
null
 
,
 
null
 
,
 
null
  $
)
$ %
;
% &
}
ÒÒ 
if
ÚÚ 
(
ÚÚ 
service
ÚÚ 
==
ÚÚ 
IntPtr
ÚÚ %
.
ÚÚ% &
Zero
ÚÚ& *
)
ÚÚ* +
{
ÛÛ 
throw
ÙÙ 
new
ÙÙ "
ApplicationException
ÙÙ 2
(
ÙÙ2 3
$str
ÙÙ3 O
)
ÙÙO P
;
ÙÙP Q
}
ıı 
if
ˆˆ 
(
ˆˆ 
start
ˆˆ 
)
ˆˆ 
{
˜˜ 
try
¯¯ 
{
˘˘ 
StartService
˙˙ $
(
˙˙$ %
service
˙˙% ,
)
˙˙, -
;
˙˙- .
}
˚˚ 
finally
¸¸ 
{
˝˝  
CloseServiceHandle
˛˛ *
(
˛˛* +
service
˛˛+ 2
)
˛˛2 3
;
˛˛3 4
}
ˇˇ 
}
ÄÄ 
}
ÅÅ 
finally
ÇÇ 
{
ÉÉ  
CloseServiceHandle
ÑÑ "
(
ÑÑ" #
scman
ÑÑ# (
)
ÑÑ( )
;
ÑÑ) *
}
ÖÖ 
}
ÜÜ 	
public
çç 
static
çç 
void
çç 
StartService
çç '
(
çç' (
string
çç( .
Name
çç/ 3
)
çç3 4
{
éé 	
IntPtr
èè 
scman
èè 
=
èè 
OpenSCManager
èè (
(
èè( )"
ServiceManagerRights
èè) =
.
èè= >
Connect
èè> E
)
èèE F
;
èèF G
try
êê 
{
ëë 
IntPtr
íí 
hService
íí 
=
íí  !
OpenService
íí" -
(
íí- .
scman
íí. 3
,
íí3 4
Name
íí5 9
,
íí9 :
ServiceRights
íí; H
.
ííH I
QueryStatus
ííI T
|
ííU V
ServiceRights
ìì 
.
ìì 
Start
ìì #
)
ìì# $
;
ìì$ %
if
îî 
(
îî 
hService
îî 
==
îî 
IntPtr
îî  &
.
îî& '
Zero
îî' +
)
îî+ ,
{
ïï 
throw
ññ 
new
ññ "
ApplicationException
ññ 2
(
ññ2 3
$str
ññ3 L
)
ññL M
;
ññM N
}
óó 
try
òò 
{
ôô 
StartService
öö  
(
öö  !
hService
öö! )
)
öö) *
;
öö* +
}
õõ 
finally
úú 
{
ùù  
CloseServiceHandle
ûû &
(
ûû& '
hService
ûû' /
)
ûû/ 0
;
ûû0 1
}
üü 
}
†† 
finally
°° 
{
¢¢  
CloseServiceHandle
££ "
(
££" #
scman
££# (
)
££( )
;
££) *
}
§§ 
}
•• 	
public
´´ 
static
´´ 
void
´´ 
StopService
´´ &
(
´´& '
string
´´' -
Name
´´. 2
)
´´2 3
{
¨¨ 	
IntPtr
≠≠ 
scman
≠≠ 
=
≠≠ 
OpenSCManager
≠≠ (
(
≠≠( )"
ServiceManagerRights
≠≠) =
.
≠≠= >
Connect
≠≠> E
)
≠≠E F
;
≠≠F G
try
ÆÆ 
{
ØØ 
IntPtr
∞∞ 
hService
∞∞ 
=
∞∞  !
OpenService
∞∞" -
(
∞∞- .
scman
∞∞. 3
,
∞∞3 4
Name
∞∞5 9
,
∞∞9 :
ServiceRights
∞∞; H
.
∞∞H I
QueryStatus
∞∞I T
|
∞∞U V
ServiceRights
±± 
.
±± 
Stop
±± "
)
±±" #
;
±±# $
if
≤≤ 
(
≤≤ 
hService
≤≤ 
==
≤≤ 
IntPtr
≤≤  &
.
≤≤& '
Zero
≤≤' +
)
≤≤+ ,
{
≥≥ 
throw
¥¥ 
new
¥¥ "
ApplicationException
¥¥ 2
(
¥¥2 3
$str
¥¥3 L
)
¥¥L M
;
¥¥M N
}
µµ 
try
∂∂ 
{
∑∑ 
StopService
∏∏ 
(
∏∏  
hService
∏∏  (
)
∏∏( )
;
∏∏) *
}
ππ 
finally
∫∫ 
{
ªª  
CloseServiceHandle
ºº &
(
ºº& '
hService
ºº' /
)
ºº/ 0
;
ºº0 1
}
ΩΩ 
}
ææ 
finally
øø 
{
¿¿  
CloseServiceHandle
¡¡ "
(
¡¡" #
scman
¡¡# (
)
¡¡( )
;
¡¡) *
}
¬¬ 
}
√√ 	
private
…… 
static
…… 
void
…… 
StartService
…… (
(
……( )
IntPtr
……) /
hService
……0 8
)
……8 9
{
   	
SERVICE_STATUS
ÀÀ 
status
ÀÀ !
=
ÀÀ" #
new
ÀÀ$ '
SERVICE_STATUS
ÀÀ( 6
(
ÀÀ6 7
)
ÀÀ7 8
;
ÀÀ8 9
StartService
ÃÃ 
(
ÃÃ 
hService
ÃÃ !
,
ÃÃ! "
$num
ÃÃ# $
,
ÃÃ$ %
$num
ÃÃ& '
)
ÃÃ' (
;
ÃÃ( )"
WaitForServiceStatus
ÕÕ  
(
ÕÕ  !
hService
ÕÕ! )
,
ÕÕ) *
ServiceState
ÕÕ+ 7
.
ÕÕ7 8
Starting
ÕÕ8 @
,
ÕÕ@ A
ServiceState
ÕÕB N
.
ÕÕN O
Run
ÕÕO R
)
ÕÕR S
;
ÕÕS T
}
ŒŒ 	
private
‘‘ 
static
‘‘ 
void
‘‘ 
StopService
‘‘ '
(
‘‘' (
IntPtr
‘‘( .
hService
‘‘/ 7
)
‘‘7 8
{
’’ 	
SERVICE_STATUS
÷÷ 
status
÷÷ !
=
÷÷" #
new
÷÷$ '
SERVICE_STATUS
÷÷( 6
(
÷÷6 7
)
÷÷7 8
;
÷÷8 9
ControlService
◊◊ 
(
◊◊ 
hService
◊◊ #
,
◊◊# $
ServiceControl
◊◊% 3
.
◊◊3 4
Stop
◊◊4 8
,
◊◊8 9
status
◊◊: @
)
◊◊@ A
;
◊◊A B"
WaitForServiceStatus
ÿÿ  
(
ÿÿ  !
hService
ÿÿ! )
,
ÿÿ) *
ServiceState
ÿÿ+ 7
.
ÿÿ7 8
Stopping
ÿÿ8 @
,
ÿÿ@ A
ServiceState
ÿÿB N
.
ÿÿN O
Stop
ÿÿO S
)
ÿÿS T
;
ÿÿT U
}
ŸŸ 	
public
‡‡ 
static
‡‡ 
ServiceState
‡‡ "
GetServiceStatus
‡‡# 3
(
‡‡3 4
string
‡‡4 :
ServiceName
‡‡; F
)
‡‡F G
{
·· 	
IntPtr
‚‚ 
scman
‚‚ 
=
‚‚ 
OpenSCManager
‚‚ (
(
‚‚( )"
ServiceManagerRights
‚‚) =
.
‚‚= >
Connect
‚‚> E
)
‚‚E F
;
‚‚F G
try
„„ 
{
‰‰ 
IntPtr
ÂÂ 
hService
ÂÂ 
=
ÂÂ  !
OpenService
ÂÂ" -
(
ÂÂ- .
scman
ÂÂ. 3
,
ÂÂ3 4
ServiceName
ÂÂ5 @
,
ÂÂ@ A
ServiceRights
ÊÊ 
.
ÊÊ 
QueryStatus
ÊÊ )
)
ÊÊ) *
;
ÊÊ* +
if
ÁÁ 
(
ÁÁ 
hService
ÁÁ 
==
ÁÁ 
IntPtr
ÁÁ  &
.
ÁÁ& '
Zero
ÁÁ' +
)
ÁÁ+ ,
{
ËË 
return
ÈÈ 
ServiceState
ÈÈ '
.
ÈÈ' (
NotFound
ÈÈ( 0
;
ÈÈ0 1
}
ÍÍ 
try
ÎÎ 
{
ÏÏ 
return
ÌÌ 
GetServiceStatus
ÌÌ +
(
ÌÌ+ ,
hService
ÌÌ, 4
)
ÌÌ4 5
;
ÌÌ5 6
}
ÓÓ 
finally
ÔÔ 
{
  
CloseServiceHandle
ÒÒ &
(
ÒÒ& '
scman
ÒÒ' ,
)
ÒÒ, -
;
ÒÒ- .
}
ÚÚ 
}
ÛÛ 
finally
ÙÙ 
{
ıı  
CloseServiceHandle
ˆˆ "
(
ˆˆ" #
scman
ˆˆ# (
)
ˆˆ( )
;
ˆˆ) *
}
˜˜ 
}
¯¯ 	
private
ˇˇ 
static
ˇˇ 
ServiceState
ˇˇ #
GetServiceStatus
ˇˇ$ 4
(
ˇˇ4 5
IntPtr
ˇˇ5 ;
hService
ˇˇ< D
)
ˇˇD E
{
ÄÄ 	
SERVICE_STATUS
ÅÅ 
ssStatus
ÅÅ #
=
ÅÅ$ %
new
ÅÅ& )
SERVICE_STATUS
ÅÅ* 8
(
ÅÅ8 9
)
ÅÅ9 :
;
ÅÅ: ;
if
ÇÇ 
(
ÇÇ  
QueryServiceStatus
ÇÇ "
(
ÇÇ" #
hService
ÇÇ# +
,
ÇÇ+ ,
ssStatus
ÇÇ- 5
)
ÇÇ5 6
==
ÇÇ7 9
$num
ÇÇ: ;
)
ÇÇ; <
{
ÉÉ 
throw
ÑÑ 
new
ÑÑ "
ApplicationException
ÑÑ .
(
ÑÑ. /
$str
ÑÑ/ P
)
ÑÑP Q
;
ÑÑQ R
}
ÖÖ 
return
ÜÜ 
ssStatus
ÜÜ 
.
ÜÜ 
dwCurrentState
ÜÜ *
;
ÜÜ* +
}
áá 	
private
ëë 
static
ëë 
bool
ëë "
WaitForServiceStatus
ëë 0
(
ëë0 1
IntPtr
ëë1 7
hService
ëë8 @
,
ëë@ A
ServiceState
ëëB N

WaitStatus
íí 
,
íí 
ServiceState
íí  
DesiredStatus
íí! .
)
íí. /
{
ìì 	
SERVICE_STATUS
îî 
ssStatus
îî #
=
îî$ %
new
îî& )
SERVICE_STATUS
îî* 8
(
îî8 9
)
îî9 :
;
îî: ;
int
ïï 
dwOldCheckPoint
ïï 
;
ïï  
int
ññ 
dwStartTickCount
ññ  
;
ññ  ! 
QueryServiceStatus
òò 
(
òò 
hService
òò '
,
òò' (
ssStatus
òò) 1
)
òò1 2
;
òò2 3
if
ôô 
(
ôô 
ssStatus
ôô 
.
ôô 
dwCurrentState
ôô '
==
ôô( *
DesiredStatus
ôô+ 8
)
ôô8 9
return
ôô: @
true
ôôA E
;
ôôE F
dwStartTickCount
öö 
=
öö 
Environment
öö *
.
öö* +
	TickCount
öö+ 4
;
öö4 5
dwOldCheckPoint
õõ 
=
õõ 
ssStatus
õõ &
.
õõ& '
dwCheckPoint
õõ' 3
;
õõ3 4
while
ùù 
(
ùù 
ssStatus
ùù 
.
ùù 
dwCurrentState
ùù *
==
ùù+ -

WaitStatus
ùù. 8
)
ùù8 9
{
ûû 
int
££ 

dwWaitTime
££ 
=
££  
ssStatus
££! )
.
££) *

dwWaitHint
££* 4
/
££5 6
$num
££7 9
;
££9 :
if
•• 
(
•• 

dwWaitTime
•• 
<
••  
$num
••! %
)
••% &

dwWaitTime
••' 1
=
••2 3
$num
••4 8
;
••8 9
else
¶¶ 
if
¶¶ 
(
¶¶ 

dwWaitTime
¶¶ #
>
¶¶$ %
$num
¶¶& +
)
¶¶+ ,

dwWaitTime
¶¶- 7
=
¶¶8 9
$num
¶¶: ?
;
¶¶? @
System
®® 
.
®® 
	Threading
®®  
.
®®  !
Thread
®®! '
.
®®' (
Sleep
®®( -
(
®®- .

dwWaitTime
®®. 8
)
®®8 9
;
®®9 :
if
¨¨ 
(
¨¨  
QueryServiceStatus
¨¨ &
(
¨¨& '
hService
¨¨' /
,
¨¨/ 0
ssStatus
¨¨1 9
)
¨¨9 :
==
¨¨; =
$num
¨¨> ?
)
¨¨? @
break
¨¨A F
;
¨¨F G
if
ÆÆ 
(
ÆÆ 
ssStatus
ÆÆ 
.
ÆÆ 
dwCheckPoint
ÆÆ )
>
ÆÆ* +
dwOldCheckPoint
ÆÆ, ;
)
ÆÆ; <
{
ØØ 
dwStartTickCount
±± $
=
±±% &
Environment
±±' 2
.
±±2 3
	TickCount
±±3 <
;
±±< =
dwOldCheckPoint
≤≤ #
=
≤≤$ %
ssStatus
≤≤& .
.
≤≤. /
dwCheckPoint
≤≤/ ;
;
≤≤; <
}
≥≥ 
else
¥¥ 
{
µµ 
if
∂∂ 
(
∂∂ 
Environment
∂∂ #
.
∂∂# $
	TickCount
∂∂$ -
-
∂∂. /
dwStartTickCount
∂∂0 @
>
∂∂A B
ssStatus
∂∂C K
.
∂∂K L

dwWaitHint
∂∂L V
)
∂∂V W
{
∑∑ 
break
ππ 
;
ππ 
}
∫∫ 
}
ªª 
}
ºº 
return
ΩΩ 
(
ΩΩ 
ssStatus
ΩΩ 
.
ΩΩ 
dwCurrentState
ΩΩ +
==
ΩΩ, .
DesiredStatus
ΩΩ/ <
)
ΩΩ< =
;
ΩΩ= >
}
ææ 	
private
≈≈ 
static
≈≈ 
IntPtr
≈≈ 
OpenSCManager
≈≈ +
(
≈≈+ ,"
ServiceManagerRights
≈≈, @
Rights
≈≈A G
)
≈≈G H
{
∆∆ 	
IntPtr
«« 
scman
«« 
=
«« 
OpenSCManager
«« (
(
««( )
null
««) -
,
««- .
null
««/ 3
,
««3 4
Rights
««5 ;
)
««; <
;
««< =
if
»» 
(
»» 
scman
»» 
==
»» 
IntPtr
»» 
.
»»  
Zero
»»  $
)
»»$ %
{
…… 
throw
   
new
   "
ApplicationException
   .
(
  . /
$str
  / ^
)
  ^ _
;
  _ `
}
ÀÀ 
return
ÃÃ 
scman
ÃÃ 
;
ÃÃ 
}
ÕÕ 	
[
ŒŒ 	
	DllImport
ŒŒ	 
(
ŒŒ 
$str
ŒŒ 
)
ŒŒ 
]
ŒŒ  
static
œœ 
extern
œœ 
int
œœ &
CoWaitForMultipleHandles
œœ 2
(
œœ2 3
uint
œœ3 7
dwFlags
œœ8 ?
,
œœ? @
uint
œœA E
	dwTimeout
œœF O
,
œœO P
uint
–– 
cHandles
–– 
,
–– 
IntPtr
––  
[
––  !
]
––! "
pHandles
––# +
,
––+ ,
out
––- 0
uint
––1 5
	lpdwindex
––6 ?
)
––? @
;
––@ A
public
““ 
static
““ 
void
““ 
ServisInstall
““ (
(
““( )
String
““) /
ServiceName
““0 ;
,
““; <
bool
““= A
	ReInstall
““B K
,
““K L
bool
““M Q
Start
““R W
,
““W X
string
““Y _
path
““` d
)
““d e
{
”” 	
if
‘‘ 
(
‘‘ 
	ReInstall
‘‘ 
)
‘‘ 
{
’’ 
ServisUnInstall
÷÷ 
(
÷÷  
ServiceName
÷÷  +
)
÷÷+ ,
;
÷÷, -
SvcInstaller
◊◊ 
.
◊◊ 
Install
◊◊ $
(
◊◊$ %
ServiceName
◊◊% 0
,
◊◊0 1
ServiceName
◊◊2 =
,
◊◊= >
path
◊◊? C
,
◊◊C D
true
◊◊E I
)
◊◊I J
;
◊◊J K
}
ÿÿ 
else
ŸŸ 
{
⁄⁄ 
var
€€ 
s
€€ 
=
€€ 
SvcInstaller
€€ $
.
€€$ %
GetServiceStatus
€€% 5
(
€€5 6
ServiceName
€€6 A
)
€€A B
;
€€B C
if
‹‹ 
(
‹‹ 
s
‹‹ 
==
‹‹ 
ServiceState
‹‹ %
.
‹‹% &
NotFound
‹‹& .
)
‹‹. /
SvcInstaller
››  
.
››  !
Install
››! (
(
››( )
ServiceName
››) 4
,
››4 5
ServiceName
››6 A
,
››A B
path
››C G
,
››G H
true
››I M
)
››M N
;
››N O
}
ﬁﬁ 
if
ﬂﬂ 
(
ﬂﬂ 
Start
ﬂﬂ 
)
ﬂﬂ 
ServisStart
‡‡ 
(
‡‡ 
ServiceName
‡‡ '
,
‡‡' (
false
‡‡) .
,
‡‡. /
$str
‡‡0 2
)
‡‡2 3
;
‡‡3 4
}
·· 	
public
„„ 
static
„„ 
void
„„ 
ServisUnInstall
„„ *
(
„„* +
String
„„+ 1
ServiceName
„„2 =
)
„„= >
{
‰‰ 	
var
ÂÂ 
s
ÂÂ 
=
ÂÂ 
SvcInstaller
ÂÂ  
.
ÂÂ  !
GetServiceStatus
ÂÂ! 1
(
ÂÂ1 2
ServiceName
ÂÂ2 =
)
ÂÂ= >
;
ÂÂ> ?
if
ÊÊ 
(
ÊÊ 
s
ÊÊ 
!=
ÊÊ 
ServiceState
ÊÊ !
.
ÊÊ! "
NotFound
ÊÊ" *
)
ÊÊ* +
{
ÁÁ 
if
ËË 
(
ËË 
s
ËË 
==
ËË 
ServiceState
ËË %
.
ËË% &
Run
ËË& )
)
ËË) *
SvcInstaller
ÈÈ  
.
ÈÈ  !
StopService
ÈÈ! ,
(
ÈÈ, -
ServiceName
ÈÈ- 8
)
ÈÈ8 9
;
ÈÈ9 :
SvcInstaller
ÍÍ 
.
ÍÍ 
	Uninstall
ÍÍ &
(
ÍÍ& '
ServiceName
ÍÍ' 2
)
ÍÍ2 3
;
ÍÍ3 4
}
ÎÎ 
}
ÏÏ 	
public
ÓÓ 
static
ÓÓ 
void
ÓÓ 
ServisStart
ÓÓ &
(
ÓÓ& '
String
ÓÓ' -
ServiceName
ÓÓ. 9
,
ÓÓ9 :
bool
ÓÓ; ?
Install
ÓÓ@ G
,
ÓÓG H
string
ÓÓI O
path
ÓÓP T
)
ÓÓT U
{
ÔÔ 	
if
 
(
 
Install
 
)
 
ServisInstall
ÒÒ 
(
ÒÒ 
ServiceName
ÒÒ )
,
ÒÒ) *
false
ÒÒ+ 0
,
ÒÒ0 1
true
ÒÒ2 6
,
ÒÒ6 7
path
ÒÒ8 <
)
ÒÒ< =
;
ÒÒ= >
else
ÚÚ 
{
ÛÛ 
var
ÙÙ 
s
ÙÙ 
=
ÙÙ 
SvcInstaller
ÙÙ $
.
ÙÙ$ %
GetServiceStatus
ÙÙ% 5
(
ÙÙ5 6
ServiceName
ÙÙ6 A
)
ÙÙA B
;
ÙÙB C
{
ˆˆ 
if
˜˜ 
(
˜˜ 
s
˜˜ 
==
˜˜ 
ServiceState
˜˜ )
.
˜˜) *
Stop
˜˜* .
)
˜˜. /
SvcInstaller
¯¯ $
.
¯¯$ %
StartService
¯¯% 1
(
¯¯1 2
ServiceName
¯¯2 =
)
¯¯= >
;
¯¯> ?
}
˘˘ 
}
˙˙ 
}
˚˚ 	
public
˝˝ 
static
˝˝ 
void
˝˝ 

ServisStop
˝˝ %
(
˝˝% &
String
˝˝& ,
ServiceName
˝˝- 8
)
˝˝8 9
{
˛˛ 	
var
ˇˇ 
s
ˇˇ 
=
ˇˇ 
SvcInstaller
ˇˇ  
.
ˇˇ  !
GetServiceStatus
ˇˇ! 1
(
ˇˇ1 2
ServiceName
ˇˇ2 =
)
ˇˇ= >
;
ˇˇ> ?
{
ÅÅ 
if
ÇÇ 
(
ÇÇ 
s
ÇÇ 
==
ÇÇ 
ServiceState
ÇÇ %
.
ÇÇ% &
Run
ÇÇ& )
||
ÇÇ) +
s
ÇÇ, -
==
ÇÇ. 0
ServiceState
ÇÇ1 =
.
ÇÇ= >
Starting
ÇÇ> F
)
ÇÇG H
SvcInstaller
ÉÉ  
.
ÉÉ  !
StopService
ÉÉ! ,
(
ÉÉ, -
ServiceName
ÉÉ- 8
)
ÉÉ8 9
;
ÉÉ9 :
}
ÑÑ 
}
ÖÖ 	
static
áá 
void
áá 
ServisReStart
áá !
(
áá! "
String
áá" (
ServiceName
áá) 4
,
áá4 5
string
áá6 <
path
áá= A
)
ááA B
{
àà 	

ServisStop
ââ 
(
ââ 
ServiceName
ââ "
)
ââ" #
;
ââ# $
ServisStart
ää 
(
ää 
ServiceName
ää #
,
ää# $
true
ää% )
,
ää) *
path
ää+ /
)
ää/ 0
;
ää0 1
}
ãã 	
public
åå 
static
åå 
bool
åå !
IsUserAdministrator
åå /
(
åå/ 0
)
åå0 1
{
çç 	
bool
éé 
isAdmin
éé 
;
éé 
try
èè 
{
êê 
WindowsIdentity
ëë 
user
ëë  $
=
ëë% &
WindowsIdentity
ëë' 6
.
ëë6 7

GetCurrent
ëë7 A
(
ëëA B
)
ëëB C
;
ëëC D
WindowsPrincipal
íí  
	principal
íí! *
=
íí+ ,
new
íí- 0
WindowsPrincipal
íí1 A
(
ííA B
user
ííB F
)
ííF G
;
ííG H
isAdmin
ìì 
=
ìì 
	principal
ìì #
.
ìì# $
IsInRole
ìì$ ,
(
ìì, - 
WindowsBuiltInRole
ìì- ?
.
ìì? @
Administrator
ìì@ M
)
ììM N
;
ììN O
}
îî 
catch
ïï 
{
ññ 
isAdmin
óó 
=
óó 
false
óó 
;
óó  
}
òò 
return
ôô 
isAdmin
ôô 
;
ôô 
}
öö 	
}
úú 
}üü ’y
äD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\ServiceModel\CallContextBehavior.cs
	namespace 	
Infoline
 
. 
ServiceModel 
{ 
public 

class 
CallContextBehavior $
:% &
	Attribute' 0
,0 1
IContractBehavior2 C
,C D#
ICallContextInitializerE \
,\ ]#
IClientMessageInspector^ u
,u v&
IDispatchMessageInspector	w ê
{ 
public 
string 

CookieName  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 
CallContextBehavior "
(" #
)# $
{ 	

CookieName 
= 
$str 
;  
} 	
public 
void  
AddBindingParameters (
(( )
ContractDescription) <
contractDescription= P
,P Q
ServiceEndpointR a
endpointb j
,j k'
BindingParameterCollection	l Ü
bindingParameters
á ò
)
ò ô
{ 	
} 	
public 
void 
ApplyClientBehavior '
(' (
ContractDescription( ;
contractDescription< O
,O P
ServiceEndpointQ `
endpointa i
,i j
Systemk q
.q r
ServiceModelr ~
.~ 

Dispatcher	 â
.
â ä
ClientRuntime
ä ó
clientRuntime
ò •
)
• ¶
{ 	
clientRuntime 
. 
MessageInspectors +
.+ ,
Add, /
(/ 0
this0 4
)4 5
;5 6
} 	
public 
void !
ApplyDispatchBehavior )
() *
ContractDescription* =
contractDescription> Q
,Q R
ServiceEndpointS b
endpointc k
,k l
Systemm s
.s t
ServiceModel	t Ä
.
Ä Å

Dispatcher
Å ã
.
ã å
DispatchRuntime
å õ
dispatchRuntime
ú ´
)
´ ¨
{   	
dispatchRuntime!! 
.!! 
MessageInspectors!! -
.!!- .
Add!!. 1
(!!1 2
this!!2 6
)!!6 7
;!!7 8
foreach"" 
("" 
var"" 
o"" 
in"" 
dispatchRuntime"" -
.""- .

Operations"". 8
)""8 9
{## 
o$$ 
.$$ #
CallContextInitializers$$ )
.$$) *
Add$$* -
($$- .
this$$. 2
)$$2 3
;$$3 4
}%% 
}&& 	
public)) 
void)) 
Validate)) 
()) 
ContractDescription)) 0
contractDescription))1 D
,))D E
ServiceEndpoint))F U
endpoint))V ^
)))^ _
{** 	
}++ 	
const00 
string00 
CookieHeader00 !
=00" #
$str00$ ,
;00, -
string22 
	GetCookie22 
(22 
WebHeaderCollection22 ,
headers22- 4
,224 5
string226 <
name22= A
)22A B
{33 	
var44 
cookies44 
=44 
headers44 !
[44! "
CookieHeader44" .
]44. /
;44/ 0
if55 
(55 
!55 
string55 
.55 
IsNullOrEmpty55 %
(55% &
cookies55& -
)55- .
)55. /
{66 
if77 
(77 
!77 
string77 
.77 
IsNullOrEmpty77 )
(77) *
cookies77* 1
)771 2
)772 3
{88 
return99 
cookies99 "
.99" #
Split99# (
(99( )
$char99) ,
)99, -
.99- .
Select99. 4
(994 5
a995 6
=>997 9
{:: 
var;; 
nv;; 
=;;  
a;;! "
.;;" #
Split;;# (
(;;( )
$char;;) ,
);;, -
;;;- .
return<< 
new<< "
{<<# $
name<<% )
=<<* +
nv<<, .
[<<. /
$num<</ 0
]<<0 1
.<<1 2
Trim<<2 6
(<<6 7
)<<7 8
,<<8 9
value<<: ?
=<<@ A
nv<<B D
[<<D E
$num<<E F
]<<F G
.<<G H
Trim<<H L
(<<L M
)<<M N
}<<O P
;<<P Q
}== 
)== 
.== 
Where== 
(== 
a== 
=>== !
a==" #
.==# $
name==$ (
====) +
name==, 0
)==0 1
.==1 2
Select==2 8
(==8 9
a==9 :
=>==; =
a==> ?
.==? @
value==@ E
)==E F
.==F G
FirstOrDefault==G U
(==U V
)==V W
;==W X
}>> 
}?? 
return@@ 
null@@ 
;@@ 
}AA 	
voidBB 
	SetCookieBB 
(BB 
WebHeaderCollectionBB *
headersBB+ 2
,BB2 3
stringBB4 :
nameBB; ?
,BB? @
stringBBA G
valueBBH M
)BBM N
{CC 	
stringDD 
cookiesDD 
=DD 
headersDD $
[DD$ %
CookieHeaderDD% 1
]DD1 2
;DD2 3
varFF 
sbFF 
=FF 
newFF 
StringBuilderFF &
(FF& '
)FF' (
;FF( )
ifGG 
(GG 
!GG 
stringGG 
.GG 
IsNullOrEmptyGG %
(GG% &
cookiesGG& -
)GG- .
)GG. /
{HH 
foreachII 
(II 
varII 
cII 
inII !
cookiesII" )
.II) *
SplitII* /
(II/ 0
$charII0 3
)II3 4
.II4 5
SelectII5 ;
(II; <
aII< =
=>II> @
{JJ 
varKK 
nvKK 
=KK 
aKK 
.KK 
SplitKK $
(KK$ %
$charKK% (
)KK( )
;KK) *
returnLL 
newLL 
{LL  
nameLL! %
=LL& '
nvLL( *
[LL* +
$numLL+ ,
]LL, -
.LL- .
TrimLL. 2
(LL2 3
)LL3 4
,LL4 5
valueLL6 ;
=LL< =
nvLL> @
[LL@ A
$numLLA B
]LLB C
.LLC D
TrimLLD H
(LLH I
)LLI J
}LLK L
;LLL M
}MM 
)MM 
.MM 
WhereMM 
(MM 
aMM 
=>MM 
aMM 
.MM  
nameMM  $
!=MM% '
nameMM( ,
)MM, -
)MM- .
{NN 
sbOO 
.OO 
AppendFormatOO #
(OO# $
$strOO$ .
,OO. /
cOO0 1
.OO1 2
nameOO2 6
,OO6 7
cOO8 9
.OO9 :
valueOO: ?
)OO? @
;OO@ A
}PP 
}QQ 
sbSS 
.SS 
AppendFormatSS 
(SS 
$strSS &
,SS& '
nameSS( ,
,SS, -
valueSS. 3
)SS3 4
;SS4 5
headersTT 
[TT 
CookieHeaderTT  
]TT  !
=TT" #
sbTT$ &
.TT& '
ToStringTT' /
(TT/ 0
)TT0 1
;TT1 2
}UU 	
voidYY 
CallBeginRequestYY 
(YY 
dynamicYY %
instanceYY& .
)YY. /
{ZZ 	
try[[ 
{\\ 
instance]] 
.]] 
BeginRequest]] %
(]]% &
)]]& '
;]]' (
}^^ 
catch__ 
{__ 
}__ 
}`` 	
objectaa #
ICallContextInitializeraa &
.aa& '
BeforeInvokeaa' 3
(aa3 4
InstanceContextaa4 C
instanceContextaaD S
,aaS T
IClientChannelaaU c
channelaad k
,aak l
Messageaam t
messageaau |
)aa| }
{bb 	
messagedd 
.dd 

Propertiesdd 
.dd 
Adddd "
(dd" #
$strdd# -
,dd- .
$strdd/ 3
)dd3 4
;dd4 5
CallBeginRequestff 
(ff 
instanceContextff ,
.ff, -
GetServiceInstanceff- ?
(ff? @
)ff@ A
)ffA B
;ffB C
varhh 
cookiehh 
=hh 
	GetCookiehh "
(hh" #
WebOperationContexthh# 6
.hh6 7
Currenthh7 >
.hh> ?
IncomingRequesthh? N
.hhN O
HeadershhO V
,hhV W

CookieNamehhX b
)hhb c
;hhc d
ifjj 
(jj 
!jj 
stringjj 
.jj 
IsNullOrEmptyjj %
(jj% &
cookiejj& ,
)jj, -
)jj- .
{kk 
varll 
cll 
=ll 
Applicationll #
.ll# $
Currentll$ +
.ll+ ,
SecurityServicell, ;
.ll; <

LoadTicketll< F
(llF G
newllG J
GuidllK O
(llO P
cookiellP V
)llV W
)llW X
;llX Y
ifmm 
(mm 
cmm 
!=mm 
nullmm 
)mm 
{nn 
coo 
.oo 
Activateoo 
(oo 
)oo  
;oo  !
returnpp 
cpp 
.pp 
TicketIdpp %
;pp% &
}qq 
}rr 
returnss 
Guidss 
.ss 
Emptyss 
;ss 
}tt 	
voiduu #
ICallContextInitializeruu $
.uu$ %
AfterInvokeuu% 0
(uu0 1
objectuu1 7
correlationStateuu8 H
)uuH I
{vv 	
ifww 
(ww 
CallContextww 
.ww 
IsReadyww #
)ww# $
{xx 
	SetCookieyy 
(yy 
WebOperationContextyy -
.yy- .
Currentyy. 5
.yy5 6
OutgoingResponseyy6 F
.yyF G
HeadersyyG N
,yyN O

CookieNameyyP Z
,yyZ [
CallContextyy\ g
.yyg h
Currentyyh o
.yyo p
TicketIdyyp x
.yyx y
ToString	yyy Å
(
yyÅ Ç
)
yyÇ É
)
yyÉ Ñ
;
yyÑ Ö
varzz 
idzz 
=zz 
(zz 
Guidzz 
)zz 
correlationStatezz /
;zz/ 0
if{{ 
({{ 
id{{ 
!={{ 
CallContext{{ %
.{{% &
Current{{& -
.{{- .
TicketId{{. 6
){{6 7
{|| 
WebOperationContext}} '
.}}' (
Current}}( /
.}}/ 0
OutgoingResponse}}0 @
.}}@ A
Headers}}A H
[}}H I
$str}}I V
]}}V W
=}}X Y
Infoline}}Z b
.}}b c
Helper}}c i
.}}i j
Json}}j n
.}}n o
	Serialize}}o x
(}}x y
CallContext	}}y Ñ
.
}}Ñ Ö
Current
}}Ö å
)
}}å ç
;
}}ç é
} 
CallContext
ÄÄ 
.
ÄÄ 
Current
ÄÄ #
.
ÄÄ# $

Deactivate
ÄÄ$ .
(
ÄÄ. /
)
ÄÄ/ 0
;
ÄÄ0 1
}
ÅÅ 
}
ÇÇ 	
object
ÉÉ '
IDispatchMessageInspector
ÉÉ (
.
ÉÉ( )!
AfterReceiveRequest
ÉÉ) <
(
ÉÉ< =
ref
ÉÉ= @
Message
ÉÉA H
request
ÉÉI P
,
ÉÉP Q
IClientChannel
ÉÉR `
channel
ÉÉa h
,
ÉÉh i
InstanceContext
ÉÉj y
instanceContextÉÉz â
)ÉÉâ ä
{
ÑÑ 	
return
ÜÜ 
null
ÜÜ 
;
ÜÜ 
}
áá 	
void
ââ '
IDispatchMessageInspector
ââ &
.
ââ& '
BeforeSendReply
ââ' 6
(
ââ6 7
ref
ââ7 :
Message
ââ; B
reply
ââC H
,
ââH I
object
ââJ P
correlationState
ââQ a
)
ââa b
{
ää 	
}
åå 	
void
èè %
IClientMessageInspector
èè $
.
èè$ %
AfterReceiveReply
èè% 6
(
èè6 7
ref
èè7 :
Message
èè; B
reply
èèC H
,
èèH I
object
èèJ P
correlationState
èèQ a
)
èèa b
{
êê 	
if
ëë 
(
ëë 
!
ëë 
CallContext
ëë 
.
ëë 
IsReady
ëë $
)
ëë$ %
{
íí 
var
îî 
httpRes
îî 
=
îî 
(
îî )
HttpResponseMessageProperty
îî :
)
îî: ;
reply
îî; @
.
îî@ A

Properties
îîA K
[
îîK L)
HttpResponseMessageProperty
îîL g
.
îîg h
Name
îîh l
]
îîl m
;
îîm n
var
ïï 
ctx
ïï 
=
ïï 
httpRes
ïï !
.
ïï! "
Headers
ïï" )
[
ïï) *
$str
ïï* 7
]
ïï7 8
;
ïï8 9
if
ññ 
(
ññ 
!
ññ 
string
ññ 
.
ññ 
IsNullOrEmpty
ññ )
(
ññ) *
ctx
ññ* -
)
ññ- .
)
ññ. /
{
óó 
var
òò 
cc
òò 
=
òò 
Infoline
òò %
.
òò% &
Helper
òò& ,
.
òò, -
Json
òò- 1
.
òò1 2
Deserialize
òò2 =
<
òò= >
CallContext
òò> I
>
òòI J
(
òòJ K
ctx
òòK N
)
òòN O
;
òòO P
cc
ôô 
.
ôô 
Activate
ôô 
(
ôô  
)
ôô  !
;
ôô! "
}
öö 
}
õõ 
}
úú 	
object
ûû %
IClientMessageInspector
ûû &
.
ûû& '
BeforeSendRequest
ûû' 8
(
ûû8 9
ref
ûû9 <
Message
ûû= D
request
ûûE L
,
ûûL M
IClientChannel
ûûN \
channel
ûû] d
)
ûûd e
{
üü 	
if
†† 
(
†† 
CallContext
†† 
.
†† 
IsReady
†† #
)
††# $
{
°° (
HttpRequestMessageProperty
¢¢ *
httpReq
¢¢+ 2
=
¢¢3 4
(
¢¢5 6(
HttpRequestMessageProperty
¢¢6 P
)
¢¢P Q
request
¢¢Q X
.
¢¢X Y

Properties
¢¢Y c
[
¢¢c d(
HttpRequestMessageProperty
¢¢d ~
.
¢¢~ 
Name¢¢ É
]¢¢É Ñ
;¢¢Ñ Ö
	SetCookie
§§ 
(
§§ 
httpReq
§§ !
.
§§! "
Headers
§§" )
,
§§) *

CookieName
§§+ 5
,
§§5 6
CallContext
§§7 B
.
§§B C
Current
§§C J
.
§§J K
TicketId
§§K S
.
§§S T
ToString
§§T \
(
§§\ ]
)
§§] ^
)
§§^ _
;
§§_ `
}
•• 
return
¶¶ 
null
¶¶ 
;
¶¶ 
}
ßß 	
}
ØØ 
}∞∞ ¯2
çD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\ServiceModel\JsonSerializerBehavior.cs
	namespace

 	
Infoline


 
.

 
ServiceModel

 
{ 
class 	"
JsonSerializerBehavior
  
:! "
IContractBehavior# 4
{ 
public 
void  
AddBindingParameters (
(( )
ContractDescription) <
contractDescription= P
,P Q
ServiceEndpointR a
endpointb j
,j k
Systeml r
.r s
ServiceModels 
.	 Ä
Channels
Ä à
.
à â(
BindingParameterCollection
â £
bindingParameters
§ µ
)
µ ∂
{ 	
} 	
public 
void 
ApplyClientBehavior '
(' (
ContractDescription( ;
contractDescription< O
,O P
ServiceEndpointQ `
endpointa i
,i j
Systemk q
.q r
ServiceModelr ~
.~ 

Dispatcher	 â
.
â ä
ClientRuntime
ä ó
clientRuntime
ò •
)
• ¶
{ 	
} 	
public 
void !
ApplyDispatchBehavior )
() *
ContractDescription* =
contractDescription> Q
,Q R
ServiceEndpointS b
endpointc k
,k l
Systemm s
.s t
ServiceModel	t Ä
.
Ä Å

Dispatcher
Å ã
.
ã å
DispatchRuntime
å õ
dispatchRuntime
ú ´
)
´ ¨
{ 	
} 	
void!! %
ChannelDispatcher_Opening!! &
(!!& '
object!!' -
sender!!. 4
,!!4 5
	EventArgs!!6 ?
e!!@ A
)!!A B
{"" 	
}$$ 	
public&& 
void&& 
Validate&& 
(&& 
ContractDescription&& 0
contractDescription&&1 D
,&&D E
ServiceEndpoint&&F U
endpoint&&V ^
)&&^ _
{'' 	
})) 	
class** 
Formater** 
:** %
IDispatchMessageFormatter** 2
{++ 	%
IDispatchMessageFormatter,, %
sink,,& *
;,,* +
public-- 
Formater-- 
(-- %
IDispatchMessageFormatter-- 5
sink--6 :
)--: ;
{.. 
this// 
.// 
sink// 
=// 
sink//  
;//  !
}00 
void11 %
IDispatchMessageFormatter11 *
.11* +
DeserializeRequest11+ =
(11= >
System11> D
.11D E
ServiceModel11E Q
.11Q R
Channels11R Z
.11Z [
Message11[ b
message11c j
,11j k
object11l r
[11r s
]11s t

parameters11u 
)	11 Ä
{22 
sink33 
.33 
DeserializeRequest33 '
(33' (
message33( /
,33/ 0

parameters331 ;
)33; <
;33< =
}44 
System66 
.66 
ServiceModel66 
.66  
Channels66  (
.66( )
Message66) 0%
IDispatchMessageFormatter661 J
.66J K
SerializeReply66K Y
(66Y Z
System66Z `
.66` a
ServiceModel66a m
.66m n
Channels66n v
.66v w
MessageVersion	66w Ö
messageVersion
66Ü î
,
66î ï
object
66ñ ú
[
66ú ù
]
66ù û

parameters
66ü ©
,
66© ™
object
66´ ±
result
66≤ ∏
)
66∏ π
{77 
return:: 
new:: 
JsonMessage:: &
(::& '
sink::' +
.::+ ,
SerializeReply::, :
(::: ;
messageVersion::; I
,::I J

parameters::K U
,::U V
result::W ]
)::] ^
)::^ _
;::_ `
};; 
}<< 	
class== 
JsonMessage== 
:== 
Message== #
{>> 	
MessageProperties?? 
_props?? $
;??$ %
public@@ 
override@@ 
MessageProperties@@ -

Properties@@. 8
{AA 
getBB 
{BB 
returnBB 
_propsBB #
;BB# $
}BB% &
}CC 
MessageHeadersDD 
_headerDD "
;DD" #
publicEE 
overrideEE 
MessageHeadersEE *
HeadersEE+ 2
{FF 
getGG 
{GG 
returnGG 
_headerGG $
;GG$ %
}GG& '
}HH 
MessageVersionII 
_verII 
;II  
publicJJ 
overrideJJ 
MessageVersionJJ *
VersionJJ+ 2
{KK 
getLL 
{LL 
returnLL 
_verLL !
;LL! "
}LL# $
}MM 
MessageNN 
_sinkNN 
;NN 
publicOO 
JsonMessageOO 
(OO 
MessageOO &
sinkOO' +
)OO+ ,
:OO, -
thisOO- 1
(OO1 2
sinkOO2 6
.OO6 7
VersionOO7 >
)OO> ?
{PP 
thisQQ 
.QQ 
_sinkQQ 
=QQ 
sinkQQ !
;QQ! "
_propsRR 
=RR 
sinkRR 
.RR 

PropertiesRR (
;RR( )
_headerSS 
=SS 
sinkSS 
.SS 
HeadersSS &
;SS& '
}VV 
publicWW 
JsonMessageWW 
(WW 
MessageVersionWW -
verWW. 1
)WW1 2
{XX 
_propsYY 
=YY 
newYY 
MessagePropertiesYY .
(YY. /
)YY/ 0
;YY0 1
_headerZZ 
=ZZ 
newZZ 
MessageHeadersZZ ,
(ZZ, -
_verZZ- 1
=ZZ2 3
verZZ4 7
)ZZ7 8
;ZZ8 9
}[[ 
	protected\\ 
override\\ 
void\\ #
OnWriteBodyContents\\$ 7
(\\7 8
System\\8 >
.\\> ?
Xml\\? B
.\\B C
XmlDictionaryWriter\\C V
writer\\W ]
)\\] ^
{]] 
}__ 
}aa 	
}bb 
}cc ÷π
ôD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\CodeGeneration\CodeGenerators\SQLClassGenerator.cs
	namespace		 	
Infoline		
 
.		 
	Framework		 
.		 
CodeGeneration		 +
.		+ ,
CodeGenerators		, :
{

 
public 

class 
SQLClassGenerator "
{ 
SqlTypeConverter 
typeConverter &
=' (
new) ,
SqlTypeConverter- =
(= >
)> ?
;? @
public 
class 
TableDescription %
{ 	
public 
string 
Table 
{  !
get" %
;% &
set' *
;* +
}, -
public 
string 
Column  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 
string 
Description %
{& '
get( +
;+ ,
set- 0
;0 1
}2 3
} 	
private 
List 
< 
TableDescription %
>% & 
tableDescriptionList' ;
(; <
SqlConnection< I
conJ M
)M N
{ 	
var 
list 
= 
new 
List 
<  
TableDescription  0
>0 1
(1 2
)2 3
;3 4
using 
( 
var 
cmd 
= 
new  

SqlCommand! +
{, -

Connection. 8
=9 :
con; >
}? @
)@ A
{ 
cmd 
. 
CommandText 
=  !
$str/" 
;// 
cmd00 
.00 

Parameters00 
.00 
Clear00 $
(00$ %
)00% &
;00& '
var11 
dt11 
=11 
new11 
	DataTable11 &
(11& '
)11' (
;11( )
dt22 
.22 
Load22 
(22 
cmd22 
.22 
ExecuteReader22 )
(22) *
)22* +
)22+ ,
;22, -
foreach33 
(33 
DataRow33  
row33! $
in33% '
dt33( *
.33* +
Rows33+ /
)33/ 0
{44 
list55 
.55 
Add55 
(55 
new55  
TableDescription55! 1
{66 
Table77 
=77 
(77  !
string77! '
)77' (
row77( +
[77+ ,
$str77, 3
]773 4
,774 5
Description88 #
=88$ %
(88& '
string88' -
)88- .
row88. 1
[881 2
$str882 ?
]88? @
,88@ A
Column99 
=99  
(99! "
string99" (
)99( )
row99) ,
[99, -
$str99- 5
]995 6
,996 7
}:: 
);; 
;;; 
}<< 
}== 
return>> 
list>> 
;>> 
}?? 	
publicBB 

DictionaryBB 
<BB 
stringBB  
,BB  !
stringBB" (
>BB( )
GenerateMultiFileBB* ;
(BB; <
stringBB< B
strConnBBC J
)BBJ K
{CC 	
varEE 
resultEE 
=EE 
newEE 

DictionaryEE '
<EE' (
stringEE( .
,EE. /
stringEE0 6
>EE6 7
(EE7 8
)EE8 9
;EE9 :
usingFF 
(FF 
varFF 
conFF 
=FF 
newFF  
SqlConnectionFF! .
(FF. /
strConnFF/ 6
)FF6 7
)FF7 8
{GG 
conHH 
.HH 
OpenHH 
(HH 
)HH 
;HH 
varII 
	_listDescII 
=II  
tableDescriptionListII  4
(II4 5
conII5 8
)II8 9
;II9 :
stringJJ 
[JJ 
]JJ 
objArrRestrictJJ '
;JJ' (
	DataTableKK 
	schemaTblKK #
;KK# $
	schemaTblLL 
=LL 
conLL 
.LL  
	GetSchemaLL  )
(LL) *
$strLL* 2
,LL2 3
nullLL4 8
)LL8 9
;LL9 :
foreachNN 
(NN 
DataRowNN  
rowNN! $
inNN% '
	schemaTblNN( 1
.NN1 2
RowsNN2 6
)NN6 7
{OO 
StringBuilderPP !
sbPP" $
=PP% &
newPP' *
StringBuilderPP+ 8
(PP8 9
)PP9 :
;PP: ;
boolQQ 
hasnameQQ  
=QQ! "
falseQQ# (
;QQ( )
varRR 
	tablenameRR !
=RR" #
(RR$ %
stringRR% +
)RR+ ,
rowRR, /
[RR/ 0
$strRR0 <
]RR< =
;RR= >
varSS 
skipColumnsSS #
=SS$ %
newSS& )
[SS) *
]SS* +
{SS, -
$strSS. 2
,SS2 3
$strSS4 =
,SS= >
$strSS? H
,SSH I
$strSSJ U
,SSU V
$strSSW b
,SSb c
$strSSd k
,SSk l
$strSSm t
}SSu v
;SSv w
ifUU 
(UU 
	tablenameUU !
.UU! "
IndexOfUU" )
(UU) *
$strUU* 1
)UU1 2
>UU3 4
-UU5 6
$numUU6 7
)UU7 8
continueUU9 A
;UUA B
objArrRestrictWW "
=WW# $
newWW% (
stringWW) /
[WW/ 0
]WW0 1
{WW2 3
nullWW4 8
,WW8 9
nullWW: >
,WW> ?
	tablenameWW@ I
,WWI J
nullWWK O
}WWP Q
;WWQ R
varXX 
tblXX 
=XX 
conXX !
.XX! "
	GetSchemaXX" +
(XX+ ,
$strXX, 5
,XX5 6
objArrRestrictXX7 E
)XXE F
;XXF G
foreachYY 
(YY 
DataRowYY $
colrowYY% +
inYY, .
tblYY/ 2
.YY2 3
RowsYY3 7
)YY7 8
hasnameZZ 
|=ZZ  "
(ZZ# $
stringZZ$ *
)ZZ* +
colrowZZ+ 1
[ZZ1 2
$strZZ2 ?
]ZZ? @
==ZZA C
$strZZD I
;ZZI J
var\\ 
_description\\ $
=\\% &
	_listDesc\\' 0
.\\0 1
Where\\1 6
(\\6 7
a\\7 8
=>\\9 ;
a\\< =
.\\= >
Table\\> C
==\\D F
	tablename\\G P
&&\\Q S
string\\T Z
.\\Z [
IsNullOrEmpty\\[ h
(\\h i
a\\i j
.\\j k
Column\\k q
)\\q r
)\\r s
.\\s t
Select\\t z
(\\z {
b\\{ |
=>\\} 
b
\\Ä Å
.
\\Å Ç
Description
\\Ç ç
)
\\ç é
.
\\é è
FirstOrDefault
\\è ù
(
\\ù û
)
\\û ü
;
\\ü †
if^^ 
(^^ 
!^^ 
string^^ 
.^^  
IsNullOrEmpty^^  -
(^^- .
_description^^. :
)^^: ;
)^^; <
{__ 
varaa 
satiraa !
=aa" #
_descriptionaa$ 0
.aa0 1
Splitaa1 6
(aa6 7
newaa7 :
stringaa; A
[aaA B
]aaB C
{aaD E
$straaF J
,aaJ K
$straaL P
}aaQ R
,aaR S
StringSplitOptionsaaT f
.aaf g
Noneaag k
)aak l
;aal m
sbcc 
.cc 
AppendFormatcc '
(cc' (
$strcc( ?
)cc? @
;cc@ A
sbdd 
.dd 

AppendLinedd %
(dd% &
)dd& '
;dd' (
foreachee 
(ee  !
varee! $
itemee% )
inee* ,
satiree- 2
)ee2 3
{ff 
sbgg 
.gg 
AppendFormatgg +
(gg+ ,
$strgg, =
,gg= >
itemgg? C
)ggC D
;ggD E
sbhh 
.hh 

AppendLinehh )
(hh) *
)hh* +
;hh+ ,
}jj 
sbkk 
.kk 
AppendFormatkk '
(kk' (
$strkk( @
)kk@ A
;kkA B
sbll 
.ll 

AppendLinell %
(ll% &
)ll& '
;ll' (
}mm 
sbpp 
.pp 
AppendFormatpp #
(pp# $
$strpp$ R
,ppR S
	tablenameppT ]
)pp] ^
;pp^ _
sbpp` b
.ppb c

AppendLineppc m
(ppm n
)ppn o
;ppo p
sbqq 
.qq 

AppendLineqq !
(qq! "
$strqq" )
)qq) *
;qq* +
foreachrr 
(rr 
DataRowrr $
colrowrr% +
inrr, .
tblrr/ 2
.rr2 3
Rowsrr3 7
)rr7 8
{ss 
vartt 
cnamett !
=tt" #
(tt$ %
stringtt% +
)tt+ ,
colrowtt, 2
[tt2 3
$strtt3 @
]tt@ A
;ttA B
_descriptionuu $
=uu% &
	_listDescuu' 0
.uu0 1
Whereuu1 6
(uu6 7
auu7 8
=>uu9 ;
auu< =
.uu= >
Tableuu> C
==uuD F
	tablenameuuG P
&&uuQ S
auuT U
.uuU V
ColumnuuV \
==uu] _
cnameuu` e
)uue f
.uuf g
Selectuug m
(uum n
buun o
=>uup r
buus t
.uut u
Description	uuu Ä
)
uuÄ Å
.
uuÅ Ç
FirstOrDefault
uuÇ ê
(
uuê ë
)
uuë í
;
uuí ì
ifvv 
(vv 
skipColumnsvv '
.vv' (
Containsvv( 0
(vv0 1
cnamevv1 6
)vv6 7
)vv7 8
continuevv9 A
;vvA B
ifxx 
(xx 
!xx 
stringxx #
.xx# $
IsNullOrEmptyxx$ 1
(xx1 2
_descriptionxx2 >
)xx> ?
)xx? @
{yy 
var{{ 
satir{{  %
={{& '
_description{{( 4
.{{4 5
Split{{5 :
({{: ;
new{{; >
string{{? E
[{{E F
]{{F G
{{{H I
$str{{J N
,{{N O
$str{{P T
}{{U V
,{{V W
StringSplitOptions{{X j
.{{j k
None{{k o
){{o p
;{{p q
sb}} 
.}} 
AppendFormat}} +
(}}+ ,
$str}}, C
)}}C D
;}}D E
sb~~ 
.~~ 

AppendLine~~ )
(~~) *
)~~* +
;~~+ ,
foreach #
($ %
var% (
item) -
in. 0
satir1 6
)6 7
{
ÄÄ 
sb
ÅÅ  "
.
ÅÅ" #
AppendFormat
ÅÅ# /
(
ÅÅ/ 0
$str
ÅÅ0 A
,
ÅÅA B
item
ÅÅC G
)
ÅÅG H
;
ÅÅH I
sb
ÇÇ  "
.
ÇÇ" #

AppendLine
ÇÇ# -
(
ÇÇ- .
)
ÇÇ. /
;
ÇÇ/ 0
}
ÑÑ 
sb
ÖÖ 
.
ÖÖ 
AppendFormat
ÖÖ +
(
ÖÖ+ ,
$str
ÖÖ, D
)
ÖÖD E
;
ÖÖE F
sb
ÜÜ 
.
ÜÜ 

AppendLine
ÜÜ )
(
ÜÜ) *
)
ÜÜ* +
;
ÜÜ+ ,
}
áá 
if
ââ 
(
ââ 
(
ââ 
string
ââ #
)
ââ# $
colrow
ââ$ *
[
ââ* +
$str
ââ+ 6
]
ââ6 7
!=
ââ8 :
$str
ââ; F
)
ââF G
{
ää 
Type
ãã  
stype
ãã! &
=
ãã' (
typeConverter
ãã) 6
.
ãã6 7
Convert
ãã7 >
(
ãã> ?
(
ãã? @
string
ãã@ F
)
ããF G
colrow
ããG M
[
ããM N
$str
ããN Y
]
ããY Z
)
ããZ [
;
ãã[ \
string
åå "
alias
åå# (
=
åå) *
typeConverter
åå+ 8
.
åå8 9
GetAlias
åå9 A
(
ååA B
stype
ååB G
)
ååG H
;
ååH I
alias
çç !
+=
çç" $
(
çç% &
(
çç& '
string
çç' -
)
çç- .
colrow
çç. 4
[
çç4 5
$str
çç5 B
]
ççB C
)
ççC D
==
ççE G
$str
ççH M
&&
ççN P
!
ççQ R
stype
ççR W
.
ççW X
IsClass
ççX _
?
çç` a
$str
ççb e
:
ççf g
$str
ççh j
;
ççj k
sb
ëë 
.
ëë 
AppendFormat
ëë +
(
ëë+ ,
$str
ëë, S
,
ëëS T
alias
ëëU Z
,
ëëZ [
cname
ëë\ a
)
ëëa b
;
ëëb c
sb
ìì 
.
ìì 

AppendLine
ìì )
(
ìì) *
)
ìì* +
;
ìì+ ,
}
îî 
else
ïï 
{
ññ 
sb
óó 
.
óó 
AppendFormat
óó +
(
óó+ ,
$str
óó, S
,
óóS T
$str
óóU a
,
óóa b
cname
óóc h
)
óóh i
;
óói j
sb
òò 
.
òò 

AppendLine
òò )
(
òò) *
)
òò* +
;
òò+ ,
}
ôô 
}
õõ 
sb
úú 
.
úú 

AppendLine
úú !
(
úú! "
$str
úú" )
)
úú) *
;
úú* +
result
ùù 
.
ùù 
Add
ùù 
(
ùù 
	tablename
ùù (
,
ùù( )
sb
ùù* ,
.
ùù, -
ToString
ùù- 5
(
ùù5 6
)
ùù6 7
)
ùù7 8
;
ùù8 9
}
ûû 
result
üü 
.
üü 
Add
üü 
(
üü 
$str
üü *
,
üü* +
GetBaseTable
üü, 8
(
üü8 9
)
üü9 :
)
üü: ;
;
üü; <
}
†† 
return
°° 
result
°° 
;
°° 
}
¢¢ 	
public
££ 
string
££ 
	GetObject
££ 
(
££  
string
££  &
strConn
££' .
,
££. /
string
££0 6
	tablename
££7 @
)
££@ A
{
§§ 	
string
•• 
result
•• 
=
•• 
$str
•• 
;
•• 
var
¶¶ 
con
¶¶ 
=
¶¶ 
new
¶¶ 
SqlConnection
¶¶ '
(
¶¶' (
strConn
¶¶( /
)
¶¶/ 0
;
¶¶0 1
con
ßß 
.
ßß 
Open
ßß 
(
ßß 
)
ßß 
;
ßß 
string
®® 
[
®® 
]
®® 
objArrRestrict
®® #
;
®®# $
	DataTable
©© 
	schemaTbl
©© 
;
©©  
	schemaTbl
™™ 
=
™™ 
con
™™ 
.
™™ 
	GetSchema
™™ %
(
™™% &
$str
™™& .
,
™™. /
null
™™0 4
)
™™4 5
;
™™5 6
foreach
´´ 
(
´´ 
DataRow
´´ 
row
´´  
in
´´! #
	schemaTbl
´´$ -
.
´´- .
Rows
´´. 2
)
´´2 3
{
¨¨ 
if
≠≠ 
(
≠≠ 
(
≠≠ 
string
≠≠ 
)
≠≠ 
row
≠≠ 
[
≠≠  
$str
≠≠  ,
]
≠≠, -
==
≠≠. 0
	tablename
≠≠1 :
)
≠≠: ;
{
ÆÆ 
StringBuilder
ØØ !
sb
ØØ" $
=
ØØ% &
new
ØØ' *
StringBuilder
ØØ+ 8
(
ØØ8 9
)
ØØ9 :
;
ØØ: ;
bool
∞∞ 
hasname
∞∞  
=
∞∞! "
false
∞∞# (
;
∞∞( )
var
±± 
	_listDesc
±± !
=
±±" #"
tableDescriptionList
±±$ 8
(
±±8 9
con
±±9 <
)
±±< =
;
±±= >
objArrRestrict
≤≤ "
=
≤≤# $
new
≤≤% (
string
≤≤) /
[
≤≤/ 0
]
≤≤0 1
{
≤≤2 3
null
≤≤4 8
,
≤≤8 9
null
≤≤: >
,
≤≤> ?
	tablename
≤≤@ I
,
≤≤I J
null
≤≤K O
}
≤≤P Q
;
≤≤Q R
var
≥≥ 
tbl
≥≥ 
=
≥≥ 
con
≥≥ !
.
≥≥! "
	GetSchema
≥≥" +
(
≥≥+ ,
$str
≥≥, 5
,
≥≥5 6
objArrRestrict
≥≥7 E
)
≥≥E F
;
≥≥F G
foreach
¥¥ 
(
¥¥ 
DataRow
¥¥ $
colrow
¥¥% +
in
¥¥, .
tbl
¥¥/ 2
.
¥¥2 3
Rows
¥¥3 7
)
¥¥7 8
hasname
µµ 
|=
µµ  "
(
µµ# $
string
µµ$ *
)
µµ* +
colrow
µµ+ 1
[
µµ1 2
$str
µµ2 ?
]
µµ? @
==
µµA C
$str
µµD I
;
µµI J
sb
∂∂ 
.
∂∂ 
AppendFormat
∂∂ #
(
∂∂# $
$str
∂∂$ :
,
∂∂: ;
	tablename
∂∂< E
)
∂∂E F
;
∂∂F G
sb
∂∂H J
.
∂∂J K

AppendLine
∂∂K U
(
∂∂U V
)
∂∂V W
;
∂∂W X
sb
∑∑ 
.
∑∑ 

AppendLine
∑∑ !
(
∑∑! "
$str
∑∑" )
)
∑∑) *
;
∑∑* +
foreach
∏∏ 
(
∏∏ 
DataRow
∏∏ $
colrow
∏∏% +
in
∏∏, .
tbl
∏∏/ 2
.
∏∏2 3
Rows
∏∏3 7
)
∏∏7 8
{
ππ 
var
∫∫ 
cname
∫∫ !
=
∫∫" #
(
∫∫$ %
string
∫∫% +
)
∫∫+ ,
colrow
∫∫, 2
[
∫∫2 3
$str
∫∫3 @
]
∫∫@ A
;
∫∫A B
var
ªª 
_description
ªª (
=
ªª) *
	_listDesc
ªª+ 4
.
ªª4 5
Where
ªª5 :
(
ªª: ;
a
ªª; <
=>
ªª= ?
a
ªª@ A
.
ªªA B
Table
ªªB G
==
ªªH J
	tablename
ªªK T
&&
ªªU W
a
ªªX Y
.
ªªY Z
Column
ªªZ `
==
ªªa c
cname
ªªd i
)
ªªi j
.
ªªj k
Select
ªªk q
(
ªªq r
b
ªªr s
=>
ªªt v
b
ªªw x
.
ªªx y
Descriptionªªy Ñ
)ªªÑ Ö
.ªªÖ Ü
FirstOrDefaultªªÜ î
(ªªî ï
)ªªï ñ
;ªªñ ó
if
ΩΩ 
(
ΩΩ 
!
ΩΩ 
string
ΩΩ #
.
ΩΩ# $
IsNullOrEmpty
ΩΩ$ 1
(
ΩΩ1 2
_description
ΩΩ2 >
)
ΩΩ> ?
)
ΩΩ? @
{
ææ 
var
¿¿ 
satir
¿¿  %
=
¿¿& '
_description
¿¿( 4
.
¿¿4 5
Split
¿¿5 :
(
¿¿: ;
new
¿¿; >
string
¿¿? E
[
¿¿E F
]
¿¿F G
{
¿¿H I
$str
¿¿J N
,
¿¿N O
$str
¿¿P T
}
¿¿U V
,
¿¿V W 
StringSplitOptions
¿¿X j
.
¿¿j k
None
¿¿k o
)
¿¿o p
;
¿¿p q
sb
¬¬ 
.
¬¬ 
AppendFormat
¬¬ +
(
¬¬+ ,
$str
¬¬, C
)
¬¬C D
;
¬¬D E
sb
√√ 
.
√√ 

AppendLine
√√ )
(
√√) *
)
√√* +
;
√√+ ,
foreach
ƒƒ #
(
ƒƒ$ %
var
ƒƒ% (
item
ƒƒ) -
in
ƒƒ. 0
satir
ƒƒ1 6
)
ƒƒ6 7
{
≈≈ 
sb
∆∆  "
.
∆∆" #
AppendFormat
∆∆# /
(
∆∆/ 0
$str
∆∆0 A
,
∆∆A B
item
∆∆C G
)
∆∆G H
;
∆∆H I
sb
««  "
.
««" #

AppendLine
««# -
(
««- .
)
««. /
;
««/ 0
}
…… 
sb
   
.
   
AppendFormat
   +
(
  + ,
$str
  , D
)
  D E
;
  E F
sb
ÀÀ 
.
ÀÀ 

AppendLine
ÀÀ )
(
ÀÀ) *
)
ÀÀ* +
;
ÀÀ+ ,
}
ÃÃ 
if
œœ 
(
œœ 
(
œœ 
string
œœ #
)
œœ# $
colrow
œœ$ *
[
œœ* +
$str
œœ+ 6
]
œœ6 7
!=
œœ8 :
$str
œœ; F
)
œœF G
{
–– 
Type
——  
stype
——! &
=
——' (
typeConverter
——) 6
.
——6 7
Convert
——7 >
(
——> ?
(
——? @
string
——@ F
)
——F G
colrow
——G M
[
——M N
$str
——N Y
]
——Y Z
)
——Z [
;
——[ \
string
““ "
alias
““# (
=
““) *
typeConverter
““+ 8
.
““8 9
GetAlias
““9 A
(
““A B
stype
““B G
)
““G H
;
““H I
alias
”” !
+=
””" $
(
””% &
(
””& '
string
””' -
)
””- .
colrow
””. 4
[
””4 5
$str
””5 B
]
””B C
)
””C D
==
””E G
$str
””H M
&&
””N P
!
””Q R
stype
””R W
.
””W X
IsClass
””X _
?
””` a
$str
””b e
:
””f g
$str
””h j
;
””j k
sb
‘‘ 
.
‘‘ 
AppendFormat
‘‘ +
(
‘‘+ ,
$str
‘‘, S
,
‘‘S T
alias
‘‘U Z
,
‘‘Z [
cname
‘‘\ a
)
‘‘a b
;
‘‘b c
sb
’’ 
.
’’ 

AppendLine
’’ )
(
’’) *
)
’’* +
;
’’+ ,
}
÷÷ 
else
◊◊ 
{
ÿÿ 
sb
ŸŸ 
.
ŸŸ 
AppendFormat
ŸŸ +
(
ŸŸ+ ,
$str
ŸŸ, S
,
ŸŸS T
$str
ŸŸU d
,
ŸŸd e
cname
ŸŸf k
)
ŸŸk l
;
ŸŸl m
sb
⁄⁄ 
.
⁄⁄ 

AppendLine
⁄⁄ )
(
⁄⁄) *
)
⁄⁄* +
;
⁄⁄+ ,
}
€€ 
}
›› 
sb
ﬁﬁ 
.
ﬁﬁ 

AppendLine
ﬁﬁ !
(
ﬁﬁ! "
$str
ﬁﬁ" )
)
ﬁﬁ) *
;
ﬁﬁ* +
result
ﬂﬂ 
=
ﬂﬂ 
sb
ﬂﬂ 
.
ﬂﬂ  
ToString
ﬂﬂ  (
(
ﬂﬂ( )
)
ﬂﬂ) *
;
ﬂﬂ* +
}
‡‡ 
}
·· 
return
‚‚ 
result
‚‚ 
;
‚‚ 
}
„„ 	
public
‰‰ 
string
‰‰ 
GetBaseTable
‰‰ "
(
‰‰" #
)
‰‰# $
{
ÂÂ 	
var
ÊÊ 
str
ÊÊ 
=
ÊÊ 
$str
ÊÑ 
;
ÑÑ 
return
ÖÖ 
str
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
public
àà 
string
àà 
Generate
àà 
(
àà 
string
àà %
strConn
àà& -
)
àà- .
{
ââ 	
var
ää 
classes
ää 
=
ää 
GenerateMultiFile
ää +
(
ää+ ,
strConn
ää, 3
)
ää3 4
;
ää4 5
return
ãã 
string
ãã 
.
ãã 
Join
ãã 
(
ãã 
$str
ãã %
,
ãã% &
classes
ãã' .
.
ãã. /
OrderBy
ãã/ 6
(
ãã6 7
a
ãã7 8
=>
ãã9 ;
a
ãã< =
.
ãã= >
Key
ãã> A
)
ããA B
.
ããB C
Select
ããC I
(
ããI J
a
ããJ K
=>
ããL N
a
ããO P
.
ããP Q
Value
ããQ V
)
ããV W
)
ããW X
;
ããX Y
}
åå 	
}
éé 
}èè B
yD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\ShapeFileHelper.cs
	namespace

 	
Infoline


 
.

 
	Framework

 
{ 
public 

class 
ShapeFileHelper  
{ 
public 
static 
void 
	SaveShape $
($ % 
FeatureCollectionExt% 9
data: >
,> ?
string@ F
pathG K
,K L
stringM S
nameT X
,X Y
boolZ ^
zip_ b
=c d
truee i
)i j
{ 	
	SaveShape 
( 
data 
, 
data  
.  !
	TableInfo! *
,* +
name, 0
,0 1
path2 6
,6 7
zip8 ;
); <
;< =
} 	
public 
static 
void 
	SaveShape $
($ %
FeatureCollection% 6

collection7 A
,A B
	TableInfoC L
infoM Q
,Q R
stringS Y
filenameZ b
=c d
nulle i
,i j
stringk q
outpathr y
=z {
null	| Ä
,
Ä Å
bool
Ç Ü
zip
á ä
=
ã å
true
ç ë
)
ë í
{ 	
string 
	_filename 
= 
$str !
;! "
if 
( 
! 
string 
. 
IsNullOrEmpty %
(% &
outpath& -
)- .
). /
{ 
	_filename 
= 
Path  
.  !
Combine! (
(( )
outpath) 0
,0 1
string2 8
.8 9
Format9 ?
(? @
$str@ I
,I J
filenameK S
)S T
)T U
;U V
} 
var 
fields 
= 
info 
. 
Columns %
.% &
Select& ,
(, -
a- .
=>/ 1
new2 5 
DbaseFieldDescriptor6 J
{ 
Name 
= 
( 
a 
. 

ColumnName $
.$ %
Length% +
>, -
$num. 0
?1 2
a3 4
.4 5

ColumnName5 ?
.? @
	Substring@ I
(I J
$numJ K
,K L
$numM O
)O P
:Q R
aS T
.T U

ColumnNameU _
)_ `
,` a
	DbaseType 
= 
ToDbaseType '
(' (
a( )
.) *
Type* .
). /
,/ 0
Length   
=   
a   
.   
Length   !
??  " $
$num  % &
}!! 
)!! 
.!! 
ToArray!! 
(!! 
)!! 
;!! 
var## 

_shpWriter## 
=## 
new##  
ShapefileDataWriter##! 4
(##4 5
	_filename##5 >
,##> ?
NetTopologySuite##@ P
.##P Q
NtsGeometryServices##Q d
.##d e
Instance##e m
.##m n"
CreateGeometryFactory	##n É
(
##É Ñ
)
##Ñ Ö
)
##Ö Ü
;
##Ü á

_shpWriter$$ 
.$$ 
Header$$ 
=$$ 
ShapefileDataWriter$$  3
.$$3 4
	GetHeader$$4 =
($$= >
fields$$> D
,$$D E

collection$$F P
.$$P Q
Count$$Q V
)$$V W
;$$W X

_shpWriter%% 
.%% 
Write%% 
(%% 

collection%% '
.%%' (
Features%%( 0
)%%0 1
;%%1 2
var'' 

defaultCRS'' 
='' 

SRIDReader'' '
.''' (
	GetCSbyID''( 1
(''1 2
$num''2 6
)''6 7
;''7 8
File(( 
.(( 
WriteAllText(( 
((( 
	_filename(( '
.((' (
Replace((( /
(((/ 0
$str((0 6
,((6 7
$str((8 >
)((> ?
,((? @

defaultCRS((A K
.((K L
WKT((L O
)((O P
;((P Q
File)) 
.)) 
WriteAllText)) 
()) 
	_filename)) '
.))' (
Replace))( /
())/ 0
$str))0 6
,))6 7
$str))8 >
)))> ?
,))? @
$str))A L
)))L M
;))M N
var++ 
_zip++ 
=++ 
Path++ 
.++ 
Combine++ #
(++# $
outpath++$ +
,+++ ,
string++- 3
.++3 4
Format++4 :
(++: ;
$str++; D
,++D E
filename++F N
)++N O
)++O P
;++P Q
if,, 
(,, 
zip,, 
),, 
{-- 
	Framework.. 
... 
Helper..  
...  !
Zip..! $
...$ %
Created..% ,
(.., -
_zip..- 1
,..1 2
new..3 6
string..7 =
[..= >
]..> ?
{// 
	_filename00 
,00 
	_filename11 
.11 
Replace11 %
(11% &
$str11& ,
,11, -
$str11. 4
)114 5
,115 6
	_filename22 
.22 
Replace22 %
(22% &
$str22& ,
,22, -
$str22. 4
)224 5
,225 6
	_filename33 
.33 
Replace33 %
(33% &
$str33& ,
,33, -
$str33. 4
)334 5
,335 6
	_filename44 
.44 
Replace44 %
(44% &
$str44& ,
,44, -
$str44. 4
)444 5
,445 6
}55 
,55 
zip55 
)55 
;55 
}66 
}77 	
static99 
char99 
ToDbaseType99 
(99  
Type99  $
type99% )
)99) *
{:: 	
if;; 
(;; 
type;; 
==;; 
typeof;; 
(;; 
double;; %
);;% &
||;;' )
type;;* .
==;;/ 1
typeof;;2 8
(;;8 9
float;;9 >
);;> ?
||;;@ B
type<< 
==<< 
typeof<< 
(<< 
short<< $
)<<$ %
||<<& (
type<<) -
==<<. 0
typeof<<1 7
(<<7 8
ushort<<8 >
)<<> ?
||<<@ B
type== 
==== 
typeof== 
(== 
int== "
)==" #
||==$ &
type==' +
====, .
typeof==/ 5
(==5 6
uint==6 :
)==: ;
||==< >
type>> 
==>> 
typeof>> 
(>> 
long>> #
)>># $
||>>% '
type>>( ,
==>>- /
typeof>>0 6
(>>6 7
ulong>>7 <
)>>< =
||>>> @
type?? 
==?? 
typeof?? 
(?? 
byte?? #
)??# $
)??$ %
return@@ 
$char@@ 
;@@ 
elseAA 
ifAA 
(AA 
typeAA 
==AA 
typeofAA #
(AA# $
stringAA$ *
)AA* +
||AA, .
typeAA/ 3
==AA4 6
typeofAA7 =
(AA= >
GuidAA> B
)AAB C
)AAC D
returnBB 
$charBB 
;BB 
elseCC 
ifCC 
(CC 
typeCC 
==CC 
typeofCC #
(CC# $
boolCC$ (
)CC( )
)CC) *
returnDD 
$charDD 
;DD 
elseEE 
ifEE 
(EE 
typeEE 
==EE 
typeofEE #
(EE# $
DateTimeEE$ ,
)EE, -
)EE- .
returnFF 
$charFF 
;FF 
elseGG 
throwGG 
newGG 
ArgumentExceptionGG ,
(GG, -
$strGG- 4
+GG5 6
typeGG7 ;
.GG; <
NameGG< @
+GGA B
$strGGC S
)GGS T
;GGT U
}HH 	
}II 
}JJ €&
ÄD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Web\AspContextProvider.cs
	namespace 	
Infoline
 
. 
Web 
{ 
class		 	
AspContextProvider		
 
:		  
ICallContextProvider		 3
{

 
class 
WFCContextExtension !
:" #

IExtension$ .
<. /
OperationContext/ ?
>? @
{ 	
public 
void 
Attach 
( 
OperationContext /
owner0 5
)5 6
{ 
} 
public 
void 
Detach 
( 
OperationContext /
owner0 5
)5 6
{ 
} 
public 
CallContext 
CallContext *
{+ ,
get- 0
;0 1
set2 5
;5 6
}7 8
} 	
public 
AspContextProvider !
(! "
)" #
{ 	
} 	
[ 	
ThreadStatic	 
] 
CallContext 
cc 
; 
public 
CallContext 
Context "
{ 	
get 
{ 
var   
octx   
=   
OperationContext   +
.  + ,
Current  , 3
;  3 4
if!! 
(!! 
octx!! 
!=!! 
null!!  
)!!  !
{"" 
var## 
cp## 
=## 
octx## !
.##! "

Extensions##" ,
.##, -
Find##- 1
<##1 2
WFCContextExtension##2 E
>##E F
(##F G
)##G H
;##H I
return$$ 
cp$$ 
==$$  
null$$! %
?$$& '
null$$( ,
:$$- .
cp$$/ 1
.$$1 2
CallContext$$2 =
;$$= >
}%% 
var&& 
ctx&& 
=&& 
System&&  
.&&  !
Web&&! $
.&&$ %
HttpContext&&% 0
.&&0 1
Current&&1 8
;&&8 9
if'' 
('' 
ctx'' 
!='' 
null'' 
)''  
{(( 
var)) 
dic)) 
=)) 
System)) $
.))$ %
Web))% (
.))( )
HttpContext))) 4
.))4 5
Current))5 <
.))< =
Items))= B
;))B C
return** 
dic** 
.** 
Contains** '
(**' (
$str**( 5
)**5 6
?**7 8
dic**9 <
[**< =
$str**= J
]**J K
as**L N
CallContext**O Z
:**[ \
null**] a
;**a b
}++ 
return-- 
cc-- 
;-- 
}// 
set00 
{11 
var22 
octx22 
=22 
OperationContext22 +
.22+ ,
Current22, 3
;223 4
if33 
(33 
octx33 
!=33 
null33  
)33  !
{44 
var55 
cp55 
=55 
octx55 !
.55! "

Extensions55" ,
.55, -
Find55- 1
<551 2
WFCContextExtension552 E
>55E F
(55F G
)55G H
;55H I
if66 
(66 
cp66 
==66 
null66 "
)66" #
octx77 
.77 

Extensions77 '
.77' (
Add77( +
(77+ ,
new77, /
WFCContextExtension770 C
{77D E
CallContext77F Q
=77R S
value77T Y
}77Z [
)77[ \
;77\ ]
else88 
cp99 
.99 
CallContext99 &
=99' (
value99) .
;99. /
return;; 
;;; 
}<< 
var== 
ctx== 
=== 
System==  
.==  !
Web==! $
.==$ %
HttpContext==% 0
.==0 1
Current==1 8
;==8 9
if>> 
(>> 
ctx>> 
!=>> 
null>> 
)>>  
{?? 
System@@ 
.@@ 
Web@@ 
.@@ 
HttpContext@@ *
.@@* +
Current@@+ 2
.@@2 3
Items@@3 8
[@@8 9
$str@@9 F
]@@F G
=@@H I
value@@J O
;@@O P
}AA 
elseBB 
ccCC 
=CC 
valueCC 
;CC 
}DD 
}EE 	
publicHH 
boolHH 
IsReadyHH 
{II 	
getJJ 
{KK 
returnMM 
ContextMM 
!=MM !
nullMM" &
;MM& '
}OO 
}PP 	
}SS 
}TT º˛
áD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Web\Handlers\BaseSmartHandler.cs
	namespace 	
Infoline
 
. 
Web 
. 
SmartHandlers $
{ 
public 

abstract 
class 
BaseSmartHandler *
:+ ,
ISmartHandler- :
{ 
string 
name 
; 
string 
[ 
] 

parameters 
; 
public 
string 
Name 
{ 	
get 
{ 
return 
name 
; 
}  
} 	
public 
string 
[ 
] 

Parameters "
{ 	
get 
{ 
return 

parameters #
;# $
}% &
}   	
public"" 
BaseSmartHandler"" 
(""  
string""  &
name""' +
)""+ ,
:""- .
this""/ 3
(""3 4
name""4 8
,""8 9
new"": =
string""> D
[""D E
$num""E F
]""F G
)""G H
{""I J
}""K L
public$$ 
BaseSmartHandler$$ 
($$  
string$$  &
name$$' +
,$$+ ,
string$$- 3
[$$3 4
]$$4 5

parameters$$6 @
)$$@ A
{%% 	
this&& 
.&& 
name&& 
=&& 
name&& 
;&& 
this'' 
.'' 

parameters'' 
='' 

parameters'' (
;''( )
}(( 	
	protected** 
static** 
string** 

HandlerUrl**  *
(*** +
string**+ 1
name**2 6
,**6 7
params**8 >
object**? E
[**E F
]**F G

parameters**H R
)**R S
{++ 	
return,, 
Application,, 
.,, 
Current,, &
.,,& '

GetService,,' 1
<,,1 2 
ISmartHandlerService,,2 F
>,,F G
(,,G H
),,H I
.,,I J

HandlerUrl,,J T
(,,T U
name,,U Y
,,,Y Z

parameters,,[ e
),,e f
;,,f g
}-- 	
virtual// 
public// 
void// 
ProcessRequest// *
(//* +
HttpContext//+ 6
context//7 >
,//> ?
IDictionary//@ K
<//K L
string//L R
,//R S
object//T Z
>//Z [
	paramters//\ e
)//e f
{00 	
}22 	
public33 
static33 
void33 
RenderResponse33 )
(33) *
HttpContext33* 5
context336 =
,33= >
object33? E
data33F J
)33J K
{44 	
data55 
=55 
CheckIsNull55 
(55 
data55 #
)55# $
;55$ %
data66 
=66 
CheckException66 !
(66! "
context66" )
,66) *
data66+ /
)66/ 0
;660 1
string77 
header77 
=77 
$str	77 €
;
77€ ‹
var88 

bodyStream88 
=88 
new88  
StreamReader88! -
(88- .
context88. 5
.885 6
Request886 =
.88= >
InputStream88> I
)88I J
;88J K

bodyStream99 
.99 

BaseStream99 !
.99! "
Seek99" &
(99& '
$num99' (
,99( )

SeekOrigin99* 4
.994 5
Begin995 :
)99: ;
;99; <
var:: 
bodyText:: 
=:: 

bodyStream:: %
.::% &
	ReadToEnd::& /
(::/ 0
)::0 1
;::1 2
ReturnTypeConverter;; 
(;;  
context;;  '
,;;' (
data;;) -
,;;- .
header;;/ 5
);;5 6
;;;6 7
}<< 	
private== 
static== 
void== 
ReturnTypeConverter== /
(==/ 0
HttpContext==0 ;
context==< C
,==C D
object==E K
d==L M
,==M N
string==O U
header==V \
)==\ ]
{>> 	
if?? 
(?? 
context?? 
.?? 
Request?? 
.??  
QueryString??  +
[??+ ,
$str??, /
]??/ 0
==??1 3
$str??4 9
)??9 :
{@@ 
ReturnTypeTxtAA 
(AA 
contextAA %
,AA% &
dAA' (
,AA( )
headerAA* 0
)AA0 1
;AA1 2
}BB 
elseCC 
ifCC 
(CC 
contextCC 
.CC 
RequestCC $
.CC$ %
QueryStringCC% 0
[CC0 1
$strCC1 4
]CC4 5
==CC6 8
$strCC9 >
)CC> ?
{DD 
ReturnTypeXlsEE 
(EE 
contextEE %
,EE% &
dEE' (
,EE( )
headerEE* 0
)EE0 1
;EE1 2
}FF 
elseGG 
ifGG 
(GG 
contextGG 
.GG 
RequestGG $
.GG$ %
QueryStringGG% 0
[GG0 1
$strGG1 4
]GG4 5
==GG6 8
$strGG9 >
)GG> ?
{HH 
ReturnTypeXmlII 
(II 
contextII %
,II% &
dII' (
,II( )
headerII* 0
)II0 1
;II1 2
}JJ 
elseKK 
ifKK 
(KK 
contextKK 
.KK 
RequestKK $
.KK$ %
QueryStringKK% 0
[KK0 1
$strKK1 4
]KK4 5
==KK6 8
$strKK9 >
)KK> ?
{LL 
ReturnTypeCsvMM 
(MM 
contextMM %
,MM% &
dMM' (
,MM( )
headerMM* 0
)MM0 1
;MM1 2
}NN 
elseOO 
ifOO 
(OO 
contextOO 
.OO 
RequestOO $
.OO$ %
QueryStringOO% 0
[OO0 1
$strOO1 4
]OO4 5
==OO6 8
$strOO9 @
)OO@ A
{PP 
ReturnTypeRjsonQQ 
(QQ  
contextQQ  '
,QQ' (
dQQ) *
,QQ* +
headerQQ, 2
)QQ2 3
;QQ3 4
}RR 
elseSS 
ifSS 
(SS 
contextSS 
.SS 
RequestSS $
.SS$ %
QueryStringSS% 0
[SS0 1
$strSS1 4
]SS4 5
==SS6 8
$strSS9 E
)SSE F
{TT  
ReturnTypeCsvSpecialUU $
(UU$ %
contextUU% ,
,UU, -
dUU. /
,UU/ 0
headerUU1 7
)UU7 8
;UU8 9
}VV 
elseWW 
{XX 
ReturnTypeJsonYY 
(YY 
contextYY &
,YY& '
dYY( )
,YY) *
headerYY+ 1
)YY1 2
;YY2 3
}ZZ 
}[[ 	
	protected\\ 
static\\ 
void\\ 
RenderResponse\\ ,
(\\, -
HttpContext\\- 8
context\\9 @
,\\@ A
	DataTable\\B K
d\\L M
)\\M N
{]] 	
if^^ 
(^^ 
context^^ 
.^^ 
Request^^ 
.^^  
QueryString^^  +
[^^+ ,
$str^^, /
]^^/ 0
==^^1 3
$str^^4 9
||^^: <
context^^= D
.^^D E
Request^^E L
.^^L M
QueryString^^M X
[^^X Y
$str^^Y \
]^^\ ]
==^^^ `
$str^^a f
)^^f g
{__ 
context`` 
.`` 
Response``  
.``  !
ContentType``! ,
=``- .
$str``/ @
;``@ A
daa 
.aa 
	TableNameaa 
=aa 
$straa $
;aa$ %
forbb 
(bb 
intbb 
ibb 
=bb 
$numbb 
;bb 
ibb  !
<bb" #
dbb$ %
.bb% &
Columnsbb& -
.bb- .
Countbb. 3
;bb3 4
ibb5 6
++bb6 8
)bb8 9
dcc 
.cc 
Columnscc 
[cc 
icc 
]cc  
.cc  !
ColumnMappingcc! .
=cc/ 0
MappingTypecc1 <
.cc< =
	Attributecc= F
;ccF G
usingdd 
(dd 
StringWriterdd #
swdd$ &
=dd' (
newdd) ,
StringWriterdd- 9
(dd9 :
)dd: ;
)dd; <
{ee 
dff 
.ff 
WriteXmlff 
(ff 
swff !
,ff! "
XmlWriteModeff# /
.ff/ 0
IgnoreSchemaff0 <
)ff< =
;ff= >
contextgg 
.gg 
Responsegg $
.gg$ %
Writegg% *
(gg* +
swgg+ -
.gg- .
ToStringgg. 6
(gg6 7
)gg7 8
.gg8 9
Replacegg9 @
(gg@ A
$strggA R
,ggR S
$strggT [
)gg[ \
)gg\ ]
;gg] ^
}hh 
}ii 
elsejj 
ifjj 
(jj 
contextjj 
.jj 
Responsejj %
.jj% &
ContentTypejj& 1
.jj1 2
ToLowerjj2 9
(jj9 :
)jj: ;
==jj< >
$strjj? K
)jjK L
{kk 
}mm 
elsenn 
{oo 
contextpp 
.pp 
Responsepp  
.pp  !
ContentTypepp! ,
=pp- .
$strpp/ A
;ppA B
contextqq 
.qq 
Responseqq  
.qq  !
Writeqq! &
(qq& '

Newtonsoftqq' 1
.qq1 2
Jsonqq2 6
.qq6 7
JsonConvertqq7 B
.qqB C
SerializeObjectqqC R
(qqR S
dqqS T
,qqT U
newqqV Y"
JsonIGeometryConverterqqZ p
(qqp q
)qqq r
,qqr s
newqqt w%
JsonSqlGeometryConverter	qqx ê
(
qqê ë
)
qqë í
)
qqí ì
)
qqì î
;
qqî ï
}rr 
}tt 	
	protecteduu 
staticuu 
Tuu 
ParseRequestuu '
<uu' (
Tuu( )
>uu) *
(uu* +
HttpContextuu+ 6
contextuu7 >
)uu> ?
{vv 	
varww 
readedContentww 
=ww 
newww  #
Systemww$ *
.ww* +
IOww+ -
.ww- .
StreamReaderww. :
(ww: ;
contextww; B
.wwB C
RequestwwC J
.wwJ K
InputStreamwwK V
,wwV W
contextwwX _
.ww_ `
Requestww` g
.wwg h
ContentEncodingwwh w
)www x
.wwx y
	ReadToEnd	wwy Ç
(
wwÇ É
)
wwÉ Ñ
;
wwÑ Ö
contextxx 
.xx 
Responsexx 
.xx 
ContentTypexx (
=xx) *
$strxx+ =
;xx= >
returnyy 
(yy 
Tyy 
)yy 
Infolineyy 
.yy 
Helperyy %
.yy% &
Jsonyy& *
.yy* +
Deserializeyy+ 6
<yy6 7
Tyy7 8
>yy8 9
(yy9 :
readedContentyy: G
,yyG H
newyyI L"
JsonIGeometryConverteryyM c
(yyc d
)yyd e
,yye f
newyyg j%
JsonSqlGeometryConverter	yyk É
(
yyÉ Ñ
)
yyÑ Ö
)
yyÖ Ü
;
yyÜ á
}zz 	
	protected{{ 
static{{ 
T{{ 
ParseString{{ &
<{{& '
T{{' (
>{{( )
({{) *
string{{* 0
str{{1 4
,{{4 5
string{{6 <
format{{= C
={{D E
$str{{F L
){{L M
{|| 	
if}} 
(}} 
format}} 
==}} 
$str}} 
)}}  
{~~ 
return 
( 
T 
) 
new 
System $
.$ %
Xml% (
.( )
Serialization) 6
.6 7
XmlSerializer7 D
(D E
typeofE K
(K L
TL M
)M N
)N O
.O P
DeserializeP [
([ \
new\ _
System` f
.f g
IOg i
.i j
MemoryStreamj v
(v w
Systemw }
.} ~
Text	~ Ç
.
Ç É
Encoding
É ã
.
ã å
UTF8
å ê
.
ê ë
GetBytes
ë ô
(
ô ö
str
ö ù
??
û †
$str
° £
)
£ §
)
§ •
)
• ¶
;
¶ ß
}
ÄÄ 
else
ÅÅ 
{
ÇÇ 
return
ÉÉ 
(
ÉÉ 
T
ÉÉ 
)
ÉÉ 

Newtonsoft
ÉÉ $
.
ÉÉ$ %
Json
ÉÉ% )
.
ÉÉ) *
JsonConvert
ÉÉ* 5
.
ÉÉ5 6
DeserializeObject
ÉÉ6 G
<
ÉÉG H
T
ÉÉH I
>
ÉÉI J
(
ÉÉJ K
str
ÉÉK N
)
ÉÉN O
;
ÉÉO P
}
ÑÑ 
}
ÖÖ 	
	protected
ÜÜ 
static
ÜÜ 
T
ÜÜ "
ParseRequestGeometry
ÜÜ /
<
ÜÜ/ 0
T
ÜÜ0 1
>
ÜÜ1 2
(
ÜÜ2 3
HttpContext
ÜÜ3 >
context
ÜÜ? F
,
ÜÜF G
ref
ÜÜH K
string
ÜÜL R
data
ÜÜS W
)
ÜÜW X
{
áá 	
if
àà 
(
àà 
context
àà 
.
àà 
Request
àà 
.
àà  
QueryString
àà  +
[
àà+ ,
$str
àà, /
]
àà/ 0
==
àà1 3
$str
àà4 9
)
àà9 :
{
ââ 
context
ää 
.
ää 
Request
ää 
.
ää  
InputStream
ää  +
.
ää+ ,
Position
ää, 4
=
ää5 6
$num
ää7 8
;
ää8 9
var
ãã 
reader
ãã 
=
ãã 
new
ãã  
StreamReader
ãã! -
(
ãã- .
context
ãã. 5
.
ãã5 6
Request
ãã6 =
.
ãã= >
InputStream
ãã> I
)
ããI J
;
ããJ K
var
åå 
text
åå 
=
åå 
reader
åå !
.
åå! "
	ReadToEnd
åå" +
(
åå+ ,
)
åå, -
;
åå- .
return
çç 
ParseString
çç "
<
çç" #
T
çç# $
>
çç$ %
(
çç% &
text
çç& *
,
çç* +
$str
çç, 1
)
çç1 2
;
çç2 3
}
éé 
else
èè 
{
êê 
data
ëë 
+=
ëë 
$str
ëë ,
+
ëë- .
context
ëë/ 6
.
ëë6 7
Request
ëë7 >
.
ëë> ?
InputStream
ëë? J
.
ëëJ K
Length
ëëK Q
.
ëëQ R
ToString
ëëR Z
(
ëëZ [
)
ëë[ \
+
ëë] ^
$str
ëë_ b
;
ëëb c
context
ìì 
.
ìì 
Response
ìì  
.
ìì  !
ContentType
ìì! ,
=
ìì- .
$str
ìì/ A
;
ììA B
var
îî 
readedContent
îî !
=
îî" #
new
îî$ '
System
îî( .
.
îî. /
IO
îî/ 1
.
îî1 2
StreamReader
îî2 >
(
îî> ?
context
îî? F
.
îîF G
Request
îîG N
.
îîN O
InputStream
îîO Z
,
îîZ [
context
îî\ c
.
îîc d
Request
îîd k
.
îîk l
ContentEncoding
îîl {
)
îî{ |
.
îî| }
	ReadToEndîî} Ü
(îîÜ á
)îîá à
;îîà â
data
ññ 
+=
ññ 
$str
ññ 
+
ññ 
readedContent
ññ +
+
ññ, -
$str
ññ. 2
;
ññ2 3
return
öö 
(
öö 
T
öö 
)
öö 

Newtonsoft
öö $
.
öö$ %
Json
öö% )
.
öö) *
JsonConvert
öö* 5
.
öö5 6
DeserializeObject
öö6 G
<
ööG H
T
ööH I
>
ööI J
(
ööJ K
readedContent
ööK X
)
ööX Y
;
ööY Z
}
õõ 
}
úú 	
private
ùù 
static
ùù 
void
ùù 
ReturnTypeJson
ùù *
(
ùù* +
HttpContext
ùù+ 6
context
ùù7 >
,
ùù> ?
object
ùù@ F
d
ùùG H
,
ùùH I
string
ùùJ P
header
ùùQ W
)
ùùW X
{
ûû 	
context
üü 
.
üü 
Response
üü 
.
üü 
ContentType
üü (
=
üü) *
$str
üü+ =
;
üü= >
context
†† 
.
†† 
Response
†† 
.
†† 
Write
†† "
(
††" #
JsonConvert
††# .
.
††. /
SerializeObject
††/ >
(
††> ?
d
††? @
,
††@ A
new
††B E,
FeatureCollectionJsonConverter
††F d
(
††d e
)
††e f
,
††f g
new
††h k#
FeatureJsonConverter††l Ä
(††Ä Å
)††Å Ç
,††Ç É
new††Ñ á%
GeometryJsonConverter††à ù
(††ù û
)††û ü
,††ü †
new††° §%
EnvelopeJsonConverter††• ∫
(††∫ ª
)††ª º
)††º Ω
)††Ω æ
;††æ ø
}
°° 	
private
¢¢ 
static
¢¢ 
void
¢¢ 
ReturnTypeRjson
¢¢ +
(
¢¢+ ,
HttpContext
¢¢, 7
context
¢¢8 ?
,
¢¢? @
object
¢¢A G
d
¢¢H I
,
¢¢I J
string
¢¢K Q
header
¢¢R X
)
¢¢X Y
{
££ 	
context
§§ 
.
§§ 
Response
§§ 
.
§§ 
ContentType
§§ (
=
§§) *
$str
§§+ =
;
§§= >
var
•• 
str
•• 
=
•• 
JsonConvert
•• !
.
••! "
SerializeObject
••" 1
(
••1 2
d
••2 3
,
••3 4
new
••5 8$
JsonIGeometryConverter
••9 O
(
••O P
)
••P Q
,
••Q R
new
••S V&
JsonSqlGeometryConverter
••W o
(
••o p
)
••p q
)
••q r
;
••r s
Infoline
¶¶ 
.
¶¶ 
	Framework
¶¶ 
.
¶¶ 
Helper
¶¶ %
.
¶¶% &
JsonFormatter
¶¶& 3
	formatter
¶¶4 =
=
¶¶> ?
new
¶¶@ C
Infoline
¶¶D L
.
¶¶L M
	Framework
¶¶M V
.
¶¶V W
Helper
¶¶W ]
.
¶¶] ^
JsonFormatter
¶¶^ k
(
¶¶k l
)
¶¶l m
;
¶¶m n
str
ßß 
=
ßß 
	formatter
ßß 
.
ßß 
PrettyPrint
ßß '
(
ßß' (
str
ßß( +
)
ßß+ ,
;
ßß, -
context
®® 
.
®® 
Response
®® 
.
®® 
Write
®® "
(
®®" #
str
®®# &
)
®®& '
;
®®' (
}
©© 	
private
™™ 
static
™™ 
void
™™ 
ReturnTypeXml
™™ )
(
™™) *
HttpContext
™™* 5
context
™™6 =
,
™™= >
object
™™? E
d
™™F G
,
™™G H
string
™™I O
header
™™P V
)
™™V W
{
´´ 	
context
¨¨ 
.
¨¨ 
Response
¨¨ 
.
¨¨ 
Clear
¨¨ "
(
¨¨" #
)
¨¨# $
;
¨¨$ %
context
≠≠ 
.
≠≠ 
Response
≠≠ 
.
≠≠ 
ContentType
≠≠ (
=
≠≠) *
$str
≠≠+ F
;
≠≠F G
context
ÆÆ 
.
ÆÆ 
Response
ÆÆ 
.
ÆÆ 
ContentEncoding
ÆÆ ,
=
ÆÆ- .
System
ÆÆ/ 5
.
ÆÆ5 6
Text
ÆÆ6 :
.
ÆÆ: ;
Encoding
ÆÆ; C
.
ÆÆC D
UTF8
ÆÆD H
;
ÆÆH I#
XmlAttributeOverrides
∞∞ !#
xmlAttributeOverrides
∞∞" 7
=
∞∞8 9
new
∞∞: =#
XmlAttributeOverrides
∞∞> S
(
∞∞S T
)
∞∞T U
;
∞∞U V*
CheckUnnownTypeAndAddXmlAttr
±± (
(
±±( )
d
±±) *
,
±±* +#
xmlAttributeOverrides
±±, A
)
±±A B
;
±±B C
var
¥¥ 

serializer
¥¥ 
=
¥¥ 
new
¥¥  
XmlSerializer
¥¥! .
(
¥¥. /
d
¥¥/ 0
!=
¥¥1 3
null
¥¥4 8
?
¥¥9 :
d
¥¥; <
.
¥¥< =
GetType
¥¥= D
(
¥¥D E
)
¥¥E F
:
¥¥G H
typeof
¥¥I O
(
¥¥O P
string
¥¥P V
)
¥¥V W
,
¥¥W X#
xmlAttributeOverrides
¥¥Y n
)
¥¥n o
;
¥¥o p
var
µµ 
stringWriter
µµ 
=
µµ 
new
µµ "
StringWriter
µµ# /
(
µµ/ 0
)
µµ0 1
;
µµ1 2
using
∂∂ 
(
∂∂ 
StringWriter
∂∂ 
writer
∂∂  &
=
∂∂' (
new
∂∂) ,
StringWriter
∂∂- 9
(
∂∂9 :
)
∂∂: ;
)
∂∂; <
{
∑∑ 

serializer
∏∏ 
.
∏∏ 
	Serialize
∏∏ $
(
∏∏$ %
writer
∏∏% +
,
∏∏+ ,
d
∏∏- .
)
∏∏. /
;
∏∏/ 0
stringWriter
ππ 
=
ππ 
writer
ππ %
;
ππ% &
}
∫∫ 
context
ªª 
.
ªª 
Response
ªª 
.
ªª 
Write
ªª "
(
ªª" #
stringWriter
ªª# /
.
ªª/ 0
ToString
ªª0 8
(
ªª8 9
)
ªª9 :
)
ªª: ;
;
ªª; <
}
ºº 	
private
ΩΩ 
static
ΩΩ 
void
ΩΩ 
ReturnTypeCsv
ΩΩ )
(
ΩΩ) *
HttpContext
ΩΩ* 5
context
ΩΩ6 =
,
ΩΩ= >
object
ΩΩ? E
d
ΩΩF G
,
ΩΩG H
string
ΩΩI O
header
ΩΩP V
)
ΩΩV W
{
ææ 	
var
øø 

_separator
øø 
=
øø 
$str
øø  
;
øø  !
context
¡¡ 
.
¡¡ 
Response
¡¡ 
.
¡¡ 
Clear
¡¡ "
(
¡¡" #
)
¡¡# $
;
¡¡$ %
context
¬¬ 
.
¬¬ 
Response
¬¬ 
.
¬¬ 
ContentEncoding
¬¬ ,
=
¬¬- .
System
¬¬/ 5
.
¬¬5 6
Text
¬¬6 :
.
¬¬: ;
Encoding
¬¬; C
.
¬¬C D
GetEncoding
¬¬D O
(
¬¬O P
$str
¬¬P ^
)
¬¬^ _
;
¬¬_ `
context
√√ 
.
√√ 
Response
√√ 
.
√√ 
Charset
√√ $
=
√√% &
$str
√√' 5
;
√√5 6
context
≈≈ 
.
≈≈ 
Response
≈≈ 
.
≈≈ 
ContentType
≈≈ (
=
≈≈) *
$str
≈≈+ 5
;
≈≈5 6
context
∆∆ 
.
∆∆ 
Response
∆∆ 
.
∆∆ 
	AddHeader
∆∆ &
(
∆∆& '
$str
∆∆' <
,
∆∆< =
$str
∆∆> V
+
∆∆W X
$str
∆∆Y ^
+
∆∆_ `
$str
∆∆a i
)
∆∆i j
;
∆∆j k
var
»» 
jsonRes
»» 
=
»» 
JsonConvert
»» %
.
»»% &
SerializeObject
»»& 5
(
»»5 6
d
»»6 7
,
»»7 8
new
»»9 <$
JsonIGeometryConverter
»»= S
(
»»S T
)
»»T U
,
»»U V
new
»»W Z&
JsonSqlGeometryConverter
»»[ s
(
»»s t
)
»»t u
)
»»u v
;
»»v w
if
   
(
   
!
   
d
   
.
   
GetType
   
(
   
)
   
.
   
IsArray
   $
)
  $ %
{
ÀÀ 
if
ÃÃ 
(
ÃÃ 
d
ÃÃ 
.
ÃÃ 
GetType
ÃÃ 
(
ÃÃ 
)
ÃÃ 
.
ÃÃ  
IsAssignableFrom
ÃÃ  0
(
ÃÃ0 1
typeof
ÃÃ1 7
(
ÃÃ7 8
string
ÃÃ8 >
)
ÃÃ> ?
)
ÃÃ? @
)
ÃÃ@ A
{
ÕÕ 
context
ŒŒ 
.
ŒŒ 
Response
ŒŒ $
.
ŒŒ$ %
Write
ŒŒ% *
(
ŒŒ* +
d
ŒŒ+ ,
)
ŒŒ, -
;
ŒŒ- .
}
œœ 
else
–– 
{
—— 
context
““ 
.
““ 
Response
““ $
.
““$ %
Write
““% *
(
““* +
jsonRes
““+ 2
)
““2 3
;
““3 4
}
”” 
return
‘‘ 
;
‘‘ 
}
’’ 
var
◊◊ 
sb
◊◊ 
=
◊◊ 
new
◊◊ 
StringBuilder
◊◊ &
(
◊◊& '
)
◊◊' (
;
◊◊( )
var
ÿÿ 
dt
ÿÿ 
=
ÿÿ 
JsonConvert
ÿÿ  
.
ÿÿ  !
DeserializeObject
ÿÿ! 2
<
ÿÿ2 3
	DataTable
ÿÿ3 <
>
ÿÿ< =
(
ÿÿ= >
jsonRes
ÿÿ> E
)
ÿÿE F
;
ÿÿF G
var
ŸŸ 
headers
ŸŸ 
=
ŸŸ 
$str
ŸŸ 
;
ŸŸ 
foreach
€€ 
(
€€ 

DataColumn
€€ 
col
€€  #
in
€€$ &
dt
€€' )
.
€€) *
Columns
€€* 1
)
€€1 2
{
‹‹ 
headers
›› 
+=
›› 

_separator
›› %
+
››& '
col
››( +
.
››+ ,

ColumnName
››, 6
;
››6 7
}
ﬁﬁ 
sb
‡‡ 
.
‡‡ 

AppendLine
‡‡ 
(
‡‡ 
headers
‡‡ !
.
‡‡! "
	Substring
‡‡" +
(
‡‡+ ,
$num
‡‡, -
)
‡‡- .
)
‡‡. /
;
‡‡/ 0
foreach
‚‚ 
(
‚‚ 
DataRow
‚‚ 
row
‚‚  
in
‚‚! #
dt
‚‚$ &
.
‚‚& '
Rows
‚‚' +
)
‚‚+ ,
{
„„ 
for
‰‰ 
(
‰‰ 
int
‰‰ 
i
‰‰ 
=
‰‰ 
$num
‰‰ 
;
‰‰ 
i
‰‰  !
<
‰‰" #
dt
‰‰$ &
.
‰‰& '
Columns
‰‰' .
.
‰‰. /
Count
‰‰/ 4
;
‰‰4 5
i
‰‰6 7
++
‰‰7 9
)
‰‰9 :
{
ÂÂ 
sb
ÊÊ 
.
ÊÊ 
Append
ÊÊ 
(
ÊÊ 
row
ÊÊ !
[
ÊÊ! "
i
ÊÊ" #
]
ÊÊ# $
+
ÊÊ% &
(
ÊÊ' (
i
ÊÊ( )
!=
ÊÊ* ,
dt
ÊÊ- /
.
ÊÊ/ 0
Columns
ÊÊ0 7
.
ÊÊ7 8
Count
ÊÊ8 =
-
ÊÊ> ?
$num
ÊÊ@ A
?
ÊÊB C
$str
ÊÊD G
:
ÊÊH I
$str
ÊÊJ L
)
ÊÊL M
)
ÊÊM N
;
ÊÊN O
}
ÁÁ 
sb
ËË 
.
ËË 

AppendLine
ËË 
(
ËË 
)
ËË 
;
ËË  
}
ÈÈ 
context
ÎÎ 
.
ÎÎ 
Response
ÎÎ 
.
ÎÎ 
Write
ÎÎ "
(
ÎÎ" #
sb
ÎÎ# %
.
ÎÎ% &
ToString
ÎÎ& .
(
ÎÎ. /
)
ÎÎ/ 0
)
ÎÎ0 1
;
ÎÎ1 2
}
ÏÏ 	
private
ÌÌ 
static
ÌÌ 
void
ÌÌ 
ReturnTypeXls
ÌÌ )
(
ÌÌ) *
HttpContext
ÌÌ* 5
context
ÌÌ6 =
,
ÌÌ= >
object
ÌÌ? E
d
ÌÌF G
,
ÌÌG H
string
ÌÌI O
header
ÌÌP V
)
ÌÌV W
{
ÓÓ 	
context
ÔÔ 
.
ÔÔ 
Response
ÔÔ 
.
ÔÔ 
Clear
ÔÔ "
(
ÔÔ" #
)
ÔÔ# $
;
ÔÔ$ %
context
 
.
 
Response
 
.
 
ContentEncoding
 ,
=
- .
System
/ 5
.
5 6
Text
6 :
.
: ;
Encoding
; C
.
C D
GetEncoding
D O
(
O P
$str
P ^
)
^ _
;
_ `
context
ÒÒ 
.
ÒÒ 
Response
ÒÒ 
.
ÒÒ 
Charset
ÒÒ $
=
ÒÒ% &
$str
ÒÒ' 5
;
ÒÒ5 6
context
ÛÛ 
.
ÛÛ 
Response
ÛÛ 
.
ÛÛ 
Buffer
ÛÛ #
=
ÛÛ$ %
true
ÛÛ& *
;
ÛÛ* +
context
ÙÙ 
.
ÙÙ 
Response
ÙÙ 
.
ÙÙ 
ContentType
ÙÙ (
=
ÙÙ) *
$str
ÙÙ+ E
;
ÙÙE F
context
ıı 
.
ıı 
Response
ıı 
.
ıı 
AppendHeader
ıı )
(
ıı) *
$str
ıı* ?
,
ıı? @
$str
ııA X
+
ııY Z
$str
ıı[ d
+
ııe f
$str
ııg i
)
ııi j
;
ııj k
var
¯¯ 
jsonRes
¯¯ 
=
¯¯ 
JsonConvert
¯¯ %
.
¯¯% &
SerializeObject
¯¯& 5
(
¯¯5 6
d
¯¯6 7
,
¯¯7 8
new
¯¯9 <$
JsonIGeometryConverter
¯¯= S
(
¯¯S T
)
¯¯T U
,
¯¯U V
new
¯¯W Z&
JsonSqlGeometryConverter
¯¯[ s
(
¯¯s t
)
¯¯t u
)
¯¯u v
;
¯¯v w
if
˙˙ 
(
˙˙ 
!
˙˙ 
d
˙˙ 
.
˙˙ 
GetType
˙˙ 
(
˙˙ 
)
˙˙ 
.
˙˙ 
IsArray
˙˙ $
)
˙˙$ %
{
˚˚ 
if
¸¸ 
(
¸¸ 
d
¸¸ 
.
¸¸ 
GetType
¸¸ 
(
¸¸ 
)
¸¸ 
.
¸¸  
IsAssignableFrom
¸¸  0
(
¸¸0 1
typeof
¸¸1 7
(
¸¸7 8
string
¸¸8 >
)
¸¸> ?
)
¸¸? @
)
¸¸@ A
{
˝˝ 
context
˛˛ 
.
˛˛ 
Response
˛˛ $
.
˛˛$ %
Write
˛˛% *
(
˛˛* +
d
˛˛+ ,
)
˛˛, -
;
˛˛- .
}
ˇˇ 
else
ÄÄ 
{
ÅÅ 
context
ÇÇ 
.
ÇÇ 
Response
ÇÇ $
.
ÇÇ$ %
Write
ÇÇ% *
(
ÇÇ* +
jsonRes
ÇÇ+ 2
)
ÇÇ2 3
;
ÇÇ3 4
}
ÉÉ 
return
ÑÑ 
;
ÑÑ 
}
ÖÖ 
var
áá 
tw
áá 
=
áá 
new
áá 
System
áá 
.
áá  
IO
áá  "
.
áá" #
StringWriter
áá# /
(
áá/ 0
)
áá0 1
;
áá1 2
var
àà 
hw
àà 
=
àà 
new
àà 
System
àà 
.
àà  
Web
àà  #
.
àà# $
UI
àà$ &
.
àà& '
HtmlTextWriter
àà' 5
(
àà5 6
tw
àà6 8
)
àà8 9
;
àà9 :
var
ää 
dGrid
ää 
=
ää 
new
ää 
DataGrid
ää $
(
ää$ %
)
ää% &
;
ää& '
dGrid
ãã 
.
ãã 

DataSource
ãã 
=
ãã 
d
ãã  
;
ãã  !
dGrid
åå 
.
åå 
DataBind
åå 
(
åå 
)
åå 
;
åå 
dGrid
çç 
.
çç 
RenderControl
çç 
(
çç  
hw
çç  "
)
çç" #
;
çç# $
context
èè 
.
èè 
Response
èè 
.
èè 
Write
èè "
(
èè" #
tw
èè# %
)
èè% &
;
èè& '
}
êê 	
private
ëë 
static
ëë 
void
ëë 
ReturnTypeTxt
ëë )
(
ëë) *
HttpContext
ëë* 5
context
ëë6 =
,
ëë= >
object
ëë? E
d
ëëF G
,
ëëG H
string
ëëI O
header
ëëP V
)
ëëV W
{
íí 	
context
ìì 
.
ìì 
Response
ìì 
.
ìì 
Clear
ìì "
(
ìì" #
)
ìì# $
;
ìì$ %
context
îî 
.
îî 
Response
îî 
.
îî 
ContentEncoding
îî ,
=
îî- .
System
îî/ 5
.
îî5 6
Text
îî6 :
.
îî: ;
Encoding
îî; C
.
îîC D
GetEncoding
îîD O
(
îîO P
$str
îîP ^
)
îî^ _
;
îî_ `
context
ïï 
.
ïï 
Response
ïï 
.
ïï 
Charset
ïï $
=
ïï% &
$str
ïï' 5
;
ïï5 6
context
ññ 
.
ññ 
Response
ññ 
.
ññ 
Buffer
ññ #
=
ññ$ %
true
ññ& *
;
ññ* +
string
òò 
filename
òò 
=
òò 
string
òò $
.
òò$ %
Format
òò% +
(
òò+ ,
$str
òò, 5
,
òò5 6
d
òò7 8
.
òò8 9
GetType
òò9 @
(
òò@ A
)
òòA B
.
òòB C
Name
òòC G
.
òòG H
Replace
òòH O
(
òòO P
$str
òòP S
,
òòS T
$str
òòU W
)
òòW X
.
òòX Y
Replace
òòY `
(
òò` a
$str
òòa d
,
òòd e
$str
òòf h
)
òòh i
)
òòi j
;
òòj k
System
öö 
.
öö 
IO
öö 
.
öö 
StringWriter
öö "
stream
öö# )
=
öö* +
new
öö, /
System
öö0 6
.
öö6 7
IO
öö7 9
.
öö9 :
StringWriter
öö: F
(
ööF G
)
ööG H
;
ööH I
System
õõ 
.
õõ 
Web
õõ 
.
õõ 
UI
õõ 
.
õõ 
HtmlTextWriter
õõ (
hw
õõ) +
=
õõ, -
new
õõ. 1
System
õõ2 8
.
õõ8 9
Web
õõ9 <
.
õõ< =
UI
õõ= ?
.
õõ? @
HtmlTextWriter
õõ@ N
(
õõN O
stream
õõO U
)
õõU V
;
õõV W
DataGrid
ùù 
dgGrid
ùù 
=
ùù 
new
ùù !
DataGrid
ùù" *
(
ùù* +
)
ùù+ ,
;
ùù, -
dgGrid
ûû 
.
ûû 

DataSource
ûû 
=
ûû 
d
ûû  !
;
ûû! "
dgGrid
üü 
.
üü 
DataBind
üü 
(
üü 
)
üü 
;
üü 
dgGrid
†† 
.
†† 
RenderControl
††  
(
††  !
hw
††! #
)
††# $
;
††$ %
context
¢¢ 
.
¢¢ 
Response
¢¢ 
.
¢¢ 
ContentType
¢¢ (
=
¢¢) *
$str
¢¢+ 7
;
¢¢7 8
context
££ 
.
££ 
Response
££ 
.
££ 
	AddHeader
££ &
(
££& '
$str
££' <
,
££< =
$str
££> U
+
££V W
filename
££X `
+
££a b
$str
££c e
)
££e f
;
££f g
context
§§ 
.
§§ 
Response
§§ 
.
§§ 
Write
§§ "
(
§§" #
stream
§§# )
)
§§) *
;
§§* +
stream
¶¶ 
.
¶¶ 
Close
¶¶ 
(
¶¶ 
)
¶¶ 
;
¶¶ 
context
ßß 
.
ßß 
Response
ßß 
.
ßß 
End
ßß  
(
ßß  !
)
ßß! "
;
ßß" #
}
®® 	
private
™™ 
static
™™ 
void
™™ "
ReturnTypeCsvSpecial
™™ 0
(
™™0 1
HttpContext
™™1 <
context
™™= D
,
™™D E
object
™™F L
d
™™M N
,
™™N O
string
™™P V
header
™™W ]
)
™™] ^
{
´´ 	
var
¨¨ 

_separator
¨¨ 
=
¨¨ 
$str
¨¨  
;
¨¨  !
context
ÆÆ 
.
ÆÆ 
Response
ÆÆ 
.
ÆÆ 
Clear
ÆÆ "
(
ÆÆ" #
)
ÆÆ# $
;
ÆÆ$ %
context
ØØ 
.
ØØ 
Response
ØØ 
.
ØØ 
ContentEncoding
ØØ ,
=
ØØ- .
System
ØØ/ 5
.
ØØ5 6
Text
ØØ6 :
.
ØØ: ;
Encoding
ØØ; C
.
ØØC D
GetEncoding
ØØD O
(
ØØO P
$str
ØØP ^
)
ØØ^ _
;
ØØ_ `
context
∞∞ 
.
∞∞ 
Response
∞∞ 
.
∞∞ 
Charset
∞∞ $
=
∞∞% &
$str
∞∞' 5
;
∞∞5 6
context
≤≤ 
.
≤≤ 
Response
≤≤ 
.
≤≤ 
ContentType
≤≤ (
=
≤≤) *
$str
≤≤+ 5
;
≤≤5 6
context
≥≥ 
.
≥≥ 
Response
≥≥ 
.
≥≥ 
	AddHeader
≥≥ &
(
≥≥& '
$str
≥≥' <
,
≥≥< =
$str
≥≥> V
+
≥≥W X
$str
≥≥Y ^
+
≥≥_ `
$str
≥≥a i
)
≥≥i j
;
≥≥j k
var
µµ 
jsonRes
µµ 
=
µµ 
JsonConvert
µµ %
.
µµ% &
SerializeObject
µµ& 5
(
µµ5 6
d
µµ6 7
,
µµ7 8
new
µµ9 <$
JsonIGeometryConverter
µµ= S
(
µµS T
)
µµT U
,
µµU V
new
µµW Z&
JsonSqlGeometryConverter
µµ[ s
(
µµs t
)
µµt u
)
µµu v
;
µµv w
if
∑∑ 
(
∑∑ 
!
∑∑ 
d
∑∑ 
.
∑∑ 
GetType
∑∑ 
(
∑∑ 
)
∑∑ 
.
∑∑ 
IsArray
∑∑ $
)
∑∑$ %
{
∏∏ 
if
ππ 
(
ππ 
d
ππ 
.
ππ 
GetType
ππ 
(
ππ 
)
ππ 
.
ππ  
IsAssignableFrom
ππ  0
(
ππ0 1
typeof
ππ1 7
(
ππ7 8
string
ππ8 >
)
ππ> ?
)
ππ? @
)
ππ@ A
{
∫∫ 
context
ªª 
.
ªª 
Response
ªª $
.
ªª$ %
Write
ªª% *
(
ªª* +
d
ªª+ ,
)
ªª, -
;
ªª- .
}
ºº 
else
ΩΩ 
{
ææ 
context
øø 
.
øø 
Response
øø $
.
øø$ %
Write
øø% *
(
øø* +
jsonRes
øø+ 2
)
øø2 3
;
øø3 4
}
¿¿ 
return
¡¡ 
;
¡¡ 
}
¬¬ 
var
ƒƒ 
sb
ƒƒ 
=
ƒƒ 
new
ƒƒ 
StringBuilder
ƒƒ &
(
ƒƒ& '
)
ƒƒ' (
;
ƒƒ( )
var
≈≈ 
dt
≈≈ 
=
≈≈ 
JsonConvert
≈≈  
.
≈≈  !
DeserializeObject
≈≈! 2
<
≈≈2 3
	DataTable
≈≈3 <
>
≈≈< =
(
≈≈= >
jsonRes
≈≈> E
)
≈≈E F
;
≈≈F G
var
∆∆ 
headers
∆∆ 
=
∆∆ 
$str
∆∆ 
;
∆∆ 
foreach
»» 
(
»» 

DataColumn
»» 
col
»»  #
in
»»$ &
dt
»»' )
.
»») *
Columns
»»* 1
)
»»1 2
{
…… 
headers
   
+=
   

_separator
   %
+
  & '
col
  ( +
.
  + ,

ColumnName
  , 6
;
  6 7
}
ÀÀ 
headers
ÃÃ 
+=
ÃÃ 
$str
ÃÃ 
;
ÃÃ 
sb
ŒŒ 
.
ŒŒ 

AppendLine
ŒŒ 
(
ŒŒ 
headers
ŒŒ !
.
ŒŒ! "
	Substring
ŒŒ" +
(
ŒŒ+ ,
$num
ŒŒ, -
)
ŒŒ- .
)
ŒŒ. /
;
ŒŒ/ 0
foreach
–– 
(
–– 
DataRow
–– 
row
––  
in
––! #
dt
––$ &
.
––& '
Rows
––' +
)
––+ ,
{
—— 
for
““ 
(
““ 
int
““ 
i
““ 
=
““ 
$num
““ 
;
““ 
i
““  !
<
““" #
dt
““$ &
.
““& '
Columns
““' .
.
““. /
Count
““/ 4
;
““4 5
i
““6 7
++
““7 9
)
““9 :
{
”” 
sb
‘‘ 
.
‘‘ 
Append
‘‘ 
(
‘‘ 
row
‘‘ !
[
‘‘! "
i
‘‘" #
]
‘‘# $
+
‘‘% &
(
‘‘' (
i
‘‘( )
!=
‘‘* ,
dt
‘‘- /
.
‘‘/ 0
Columns
‘‘0 7
.
‘‘7 8
Count
‘‘8 =
-
‘‘> ?
$num
‘‘@ A
?
‘‘B C
$str
‘‘D G
:
‘‘H I
$str
‘‘J L
)
‘‘L M
)
‘‘M N
;
‘‘N O
}
’’ 
sb
÷÷ 
.
÷÷ 

AppendLine
÷÷ 
(
÷÷ 
)
÷÷ 
;
÷÷  
}
◊◊ 
context
ŸŸ 
.
ŸŸ 
Response
ŸŸ 
.
ŸŸ 
Write
ŸŸ "
(
ŸŸ" #
sb
ŸŸ# %
.
ŸŸ% &
ToString
ŸŸ& .
(
ŸŸ. /
)
ŸŸ/ 0
)
ŸŸ0 1
;
ŸŸ1 2
}
€€ 	
private
›› 
static
›› 
void
›› *
CheckUnnownTypeAndAddXmlAttr
›› 8
(
››8 9
object
››9 ?
d
››@ A
,
››A B#
XmlAttributeOverrides
››C X#
xmlAttributeOverrides
››Y n
)
››n o
{
ﬁﬁ 	
XmlAttributes
ﬂﬂ 
xmlAttributes
ﬂﬂ '
=
ﬂﬂ( )
new
ﬂﬂ* -
XmlAttributes
ﬂﬂ. ;
(
ﬂﬂ; <
)
ﬂﬂ< =
;
ﬂﬂ= >
xmlAttributes
‡‡ 
.
‡‡ 
	XmlIgnore
‡‡ #
=
‡‡$ %
true
‡‡& *
;
‡‡* +
if
„„ 
(
„„ 
d
„„ 
.
„„ 
GetType
„„ 
(
„„ 
)
„„ 
.
„„ 
IsArray
„„ #
)
„„# $
{
‰‰ 
var
ÂÂ 
dictionaryOfCheck
ÂÂ %
=
ÂÂ& '
new
ÂÂ( +

Dictionary
ÂÂ, 6
<
ÂÂ6 7
string
ÂÂ7 =
,
ÂÂ= >
int
ÂÂ? B
>
ÂÂB C
(
ÂÂC D
)
ÂÂD E
;
ÂÂE F
IEnumerable
ÊÊ 

enumerable
ÊÊ &
=
ÊÊ' (
d
ÊÊ) *
as
ÊÊ+ -
IEnumerable
ÊÊ. 9
;
ÊÊ9 :
foreach
ÁÁ 
(
ÁÁ 
var
ÁÁ 
item
ÁÁ !
in
ÁÁ" $

enumerable
ÁÁ% /
)
ÁÁ/ 0
{
ËË 
foreach
ÈÈ 
(
ÈÈ 
var
ÈÈ  
prob
ÈÈ! %
in
ÈÈ& (
item
ÈÈ) -
.
ÈÈ- .
GetType
ÈÈ. 5
(
ÈÈ5 6
)
ÈÈ6 7
.
ÈÈ7 8
GetProperties
ÈÈ8 E
(
ÈÈE F
)
ÈÈF G
)
ÈÈG H
{
ÍÍ 
if
ÎÎ 
(
ÎÎ 
(
ÎÎ 
prob
ÎÎ !
.
ÎÎ! "
PropertyType
ÎÎ" .
==
ÎÎ/ 1
typeof
ÎÎ2 8
(
ÎÎ8 9
	IGeometry
ÎÎ9 B
)
ÎÎB C
||
ÎÎD F
prob
ÎÎG K
.
ÎÎK L
PropertyType
ÎÎL X
==
ÎÎY [
typeof
ÎÎ\ b
(
ÎÎb c
SqlGeography
ÎÎc o
)
ÎÎo p
||
ÎÎq s
prob
ÎÎt x
.
ÎÎx y
PropertyTypeÎÎy Ö
==ÎÎÜ à
typeofÎÎâ è
(ÎÎè ê
SqlGeometryÎÎê õ
)ÎÎõ ú
)ÎÎú ù
&&ÎÎû †!
dictionaryOfCheckÎÎ° ≤
.ÎÎ≤ ≥
WhereÎÎ≥ ∏
(ÎÎ∏ π
aÎÎπ ∫
=>ÎÎª Ω
aÎÎæ ø
.ÎÎø ¿
KeyÎÎ¿ √
==ÎÎƒ ∆
probÎÎ« À
.ÎÎÀ Ã
NameÎÎÃ –
)ÎÎ– —
.ÎÎ— “
FirstOrDefaultÎÎ“ ‡
(ÎÎ‡ ·
)ÎÎ· ‚
.ÎÎ‚ „
ValueÎÎ„ Ë
==ÎÎÈ Î
$numÎÎÏ Ì
)ÎÎÌ Ó
{
ÏÏ #
xmlAttributeOverrides
ÌÌ 1
.
ÌÌ1 2
Add
ÌÌ2 5
(
ÌÌ5 6
item
ÌÌ6 :
.
ÌÌ: ;
GetType
ÌÌ; B
(
ÌÌB C
)
ÌÌC D
,
ÌÌD E
prob
ÌÌF J
.
ÌÌJ K
Name
ÌÌK O
,
ÌÌO P
xmlAttributes
ÌÌQ ^
)
ÌÌ^ _
;
ÌÌ_ `
dictionaryOfCheck
ÓÓ -
.
ÓÓ- .
Add
ÓÓ. 1
(
ÓÓ1 2
prob
ÓÓ2 6
.
ÓÓ6 7
Name
ÓÓ7 ;
,
ÓÓ; <
$num
ÓÓ= >
)
ÓÓ> ?
;
ÓÓ? @
}
ÔÔ 
}
 
}
ÒÒ 
}
ÚÚ 
else
ÛÛ 
if
ÛÛ 
(
ÛÛ 
d
ÛÛ 
.
ÛÛ 
GetType
ÛÛ 
(
ÛÛ 
)
ÛÛ  
==
ÛÛ! #
typeof
ÛÛ$ *
(
ÛÛ* +
ResultStatus
ÛÛ+ 7
)
ÛÛ7 8
)
ÛÛ8 9
{
ÙÙ 
try
ıı 
{
ˆˆ 
var
˜˜ 
dictionaryOfCheck
˜˜ )
=
˜˜* +
new
˜˜, /

Dictionary
˜˜0 :
<
˜˜: ;
string
˜˜; A
,
˜˜A B
int
˜˜C F
>
˜˜F G
(
˜˜G H
)
˜˜H I
;
˜˜I J
ResultStatus
¯¯  
dd
¯¯! #
=
¯¯$ %
(
¯¯& '
ResultStatus
¯¯' 3
)
¯¯3 4
d
¯¯4 5
;
¯¯5 6
IEnumerable
˙˙ 

enumerable
˙˙  *
=
˙˙+ ,
dd
˙˙- /
.
˙˙/ 0
objects
˙˙0 7
as
˙˙8 :
IEnumerable
˙˙; F
;
˙˙F G
foreach
˚˚ 
(
˚˚ 
var
˚˚  
item
˚˚! %
in
˚˚& (

enumerable
˚˚) 3
)
˚˚3 4
{
¸¸ 
foreach
˝˝ 
(
˝˝  !
var
˝˝! $
prob
˝˝% )
in
˝˝* ,
item
˝˝- 1
.
˝˝1 2
GetType
˝˝2 9
(
˝˝9 :
)
˝˝: ;
.
˝˝; <
GetProperties
˝˝< I
(
˝˝I J
)
˝˝J K
)
˝˝K L
{
˛˛ 
if
ˇˇ 
(
ˇˇ  
(
ˇˇ  !
prob
ˇˇ! %
.
ˇˇ% &
PropertyType
ˇˇ& 2
==
ˇˇ3 5
typeof
ˇˇ6 <
(
ˇˇ< =
	IGeometry
ˇˇ= F
)
ˇˇF G
||
ˇˇH J
prob
ˇˇK O
.
ˇˇO P
PropertyType
ˇˇP \
==
ˇˇ] _
typeof
ˇˇ` f
(
ˇˇf g
SqlGeography
ˇˇg s
)
ˇˇs t
||
ˇˇu w
prob
ˇˇx |
.
ˇˇ| }
PropertyTypeˇˇ} â
==ˇˇä å
typeofˇˇç ì
(ˇˇì î
SqlGeometryˇˇî ü
)ˇˇü †
)ˇˇ† °
&&ˇˇ¢ §!
dictionaryOfCheckˇˇ• ∂
.ˇˇ∂ ∑
Whereˇˇ∑ º
(ˇˇº Ω
aˇˇΩ æ
=>ˇˇø ¡
aˇˇ¬ √
.ˇˇ√ ƒ
Keyˇˇƒ «
==ˇˇ»  
probˇˇÀ œ
.ˇˇœ –
Nameˇˇ– ‘
)ˇˇ‘ ’
.ˇˇ’ ÷
FirstOrDefaultˇˇ÷ ‰
(ˇˇ‰ Â
)ˇˇÂ Ê
.ˇˇÊ Á
ValueˇˇÁ Ï
==ˇˇÌ Ô
$numˇˇ Ò
)ˇˇÒ Ú
{
ÄÄ #
xmlAttributeOverrides
ÅÅ  5
.
ÅÅ5 6
Add
ÅÅ6 9
(
ÅÅ9 :
item
ÅÅ: >
.
ÅÅ> ?
GetType
ÅÅ? F
(
ÅÅF G
)
ÅÅG H
,
ÅÅH I
prob
ÅÅJ N
.
ÅÅN O
Name
ÅÅO S
,
ÅÅS T
xmlAttributes
ÅÅU b
)
ÅÅb c
;
ÅÅc d
dictionaryOfCheck
ÇÇ  1
.
ÇÇ1 2
Add
ÇÇ2 5
(
ÇÇ5 6
prob
ÇÇ6 :
.
ÇÇ: ;
Name
ÇÇ; ?
,
ÇÇ? @
$num
ÇÇA B
)
ÇÇB C
;
ÇÇC D
}
ÉÉ 
}
ÑÑ 
}
ÖÖ 
}
ÜÜ 
catch
áá 
{
àà 
}
ää 
}
ãã 
else
åå 
{
çç 
var
éé 
dictionaryOfCheck
éé %
=
éé& '
new
éé( +

Dictionary
éé, 6
<
éé6 7
string
éé7 =
,
éé= >
int
éé? B
>
ééB C
(
ééC D
)
ééD E
;
ééE F
foreach
èè 
(
èè 
var
èè 
prob
èè !
in
èè" $
d
èè% &
.
èè& '
GetType
èè' .
(
èè. /
)
èè/ 0
.
èè0 1
GetProperties
èè1 >
(
èè> ?
)
èè? @
)
èè@ A
{
êê 
if
ëë 
(
ëë 
prob
ëë 
.
ëë 
PropertyType
ëë )
==
ëë* ,
typeof
ëë- 3
(
ëë3 4
	IGeometry
ëë4 =
)
ëë= >
&&
ëë? A
dictionaryOfCheck
ëëB S
.
ëëS T
Where
ëëT Y
(
ëëY Z
a
ëëZ [
=>
ëë\ ^
a
ëë_ `
.
ëë` a
Key
ëëa d
==
ëëe g
prob
ëëh l
.
ëël m
Name
ëëm q
)
ëëq r
.
ëër s
FirstOrDefaultëës Å
(ëëÅ Ç
)ëëÇ É
.ëëÉ Ñ
ValueëëÑ â
==ëëä å
$numëëç é
)ëëé è
{
íí #
xmlAttributeOverrides
ìì -
.
ìì- .
Add
ìì. 1
(
ìì1 2
d
ìì2 3
.
ìì3 4
GetType
ìì4 ;
(
ìì; <
)
ìì< =
,
ìì= >
prob
ìì? C
.
ììC D
Name
ììD H
,
ììH I
xmlAttributes
ììJ W
)
ììW X
;
ììX Y
dictionaryOfCheck
îî )
.
îî) *
Add
îî* -
(
îî- .
prob
îî. 2
.
îî2 3
Name
îî3 7
,
îî7 8
$num
îî9 :
)
îî: ;
;
îî; <
}
ïï 
}
ññ 
}
óó 
}
òò 	
private
ôô 
static
ôô 
object
ôô 
CheckIsNull
ôô )
(
ôô) *
object
ôô* 0
data
ôô1 5
)
ôô5 6
{
öö 	
if
õõ 
(
õõ 
data
õõ 
==
õõ 
null
õõ 
||
õõ 
(
õõ  !
data
õõ! %
.
õõ% &
GetType
õõ& -
(
õõ- .
)
õõ. /
.
õõ/ 0
IsArray
õõ0 7
&&
õõ8 :
(
õõ; <
(
õõ< =
Array
õõ= B
)
õõB C
data
õõC G
)
õõG H
.
õõH I
Length
õõI O
<
õõP Q
$num
õõR S
)
õõS T
)
õõT U
data
úú 
=
úú 
new
úú 
ResultStatus
úú '
{
úú( )
message
úú* 1
=
úú2 3
$str
úú4 B
,
úúB C
result
úúD J
=
úúK L
true
úúM Q
,
úúQ R
objects
úúS Z
=
úú[ \
null
úú] a
}
úúb c
;
úúc d
return
ùù 
data
ùù 
;
ùù 
}
ûû 	
private
†† 
static
†† 
object
†† 
CheckException
†† ,
(
††, -
HttpContext
††- 8
context
††9 @
,
††@ A
object
††B H
data
††I M
)
††M N
{
°° 	
if
¢¢ 
(
¢¢ 
context
¢¢ 
.
¢¢ 
Request
¢¢ 
.
¢¢  
QueryString
¢¢  +
[
¢¢+ ,
$str
¢¢, :
]
¢¢: ;
==
¢¢< >
$str
¢¢? B
&&
¢¢C E
data
¢¢F J
.
¢¢J K
GetType
¢¢K R
(
¢¢R S
)
¢¢S T
!=
¢¢U W
typeof
¢¢X ^
(
¢¢^ _
ResultStatus
¢¢_ k
)
¢¢k l
)
¢¢l m
{
££ 
if
§§ 
(
§§ 
data
§§ 
.
§§ 
GetType
§§  
(
§§  !
)
§§! "
.
§§" #
Name
§§# '
.
§§' (
Contains
§§( 0
(
§§0 1
$str
§§1 ;
)
§§; <
)
§§< =
data
•• 
=
•• 
new
•• 
ResultStatus
•• +
{
••, -
message
••. 5
=
••6 7
data
••8 <
.
••< =
ToString
••= E
(
••E F
)
••F G
,
••G H
result
••I O
=
••P Q
false
••R W
,
••W X
objects
••Y `
=
••a b
null
••c g
}
••h i
;
••i j
else
ßß 
if
ßß 
(
ßß 
data
ßß 
.
ßß 
GetType
ßß %
(
ßß% &
)
ßß& '
==
ßß( *
typeof
ßß+ 1
(
ßß1 2
string
ßß2 8
)
ßß8 9
&&
ßß: <
data
ßß= A
.
ßßA B
ToString
ßßB J
(
ßßJ K
)
ßßK L
.
ßßL M
Contains
ßßM U
(
ßßU V
$str
ßßV d
)
ßßd e
)
ßße f
data
®® 
=
®® 
new
®® 
ResultStatus
®® +
{
®®, -
message
®®. 5
=
®®6 7
data
®®8 <
.
®®< =
ToString
®®= E
(
®®E F
)
®®F G
,
®®G H
result
®®I O
=
®®P Q
false
®®R W
,
®®W X
objects
®®Y `
=
®®a b
null
®®c g
}
®®h i
;
®®i j
else
©© 
data
™™ 
=
™™ 
new
™™ 
ResultStatus
™™ +
{
™™, -
message
™™. 5
=
™™6 7
$str
™™8 E
,
™™E F
result
™™G M
=
™™N O
true
™™P T
,
™™T U
objects
™™V ]
=
™™^ _
data
™™` d
}
™™e f
;
™™f g
}
´´ 
return
¨¨ 
data
¨¨ 
;
¨¨ 
}
≠≠ 	
}
ÆÆ 
public
∞∞ 

class
∞∞  
BaseServiceHandler
∞∞ #
:
∞∞$ %
BaseSmartHandler
∞∞& 6
{
±± 
public
≤≤  
BaseServiceHandler
≤≤ !
(
≤≤! "
string
≤≤" (
name
≤≤) -
)
≤≤- .
:
≥≥ 
base
≥≥ 
(
≥≥ 
name
≥≥ 
,
≥≥ 
new
≥≥ 
string
≥≥ #
[
≥≥# $
]
≥≥$ %
{
≥≥& '
$str
≥≥( -
}
≥≥. /
)
≥≥/ 0
{
¥¥ 	
}
∂∂ 	
public
∏∏ 
override
∏∏ 
void
∏∏ 
ProcessRequest
∏∏ +
(
∏∏+ ,
HttpContext
∏∏, 7
context
∏∏8 ?
,
∏∏? @
IDictionary
∏∏A L
<
∏∏L M
string
∏∏M S
,
∏∏S T
object
∏∏U [
>
∏∏[ \
	paramters
∏∏] f
)
∏∏f g
{
ππ 	
var
∫∫ 
cmd
∫∫ 
=
∫∫ 
	paramters
∫∫ 
[
∫∫  
$str
∫∫  %
]
∫∫% &
.
∫∫& '
ToString
∫∫' /
(
∫∫/ 0
)
∫∫0 1
.
∫∫1 2
ToLower
∫∫2 9
(
∫∫9 :
System
∫∫: @
.
∫∫@ A
Globalization
∫∫A N
.
∫∫N O
CultureInfo
∫∫O Z
.
∫∫Z [
InvariantCulture
∫∫[ k
)
∫∫k l
;
∫∫l m
foreach
ºº 
(
ºº 
var
ºº 
func
ºº 
in
ºº  
this
ºº! %
.
ºº% &
GetType
ºº& -
(
ºº- .
)
ºº. /
.
ΩΩ 

GetMethods
ΩΩ 
(
ΩΩ 
System
ΩΩ "
.
ΩΩ" #

Reflection
ΩΩ# -
.
ΩΩ- .
BindingFlags
ΩΩ. :
.
ΩΩ: ;
Instance
ΩΩ; C
|
ΩΩD E
System
ΩΩF L
.
ΩΩL M

Reflection
ΩΩM W
.
ΩΩW X
BindingFlags
ΩΩX d
.
ΩΩd e
Public
ΩΩe k
|
ΩΩl m
System
ΩΩn t
.
ΩΩt u

Reflection
ΩΩu 
.ΩΩ Ä
BindingFlagsΩΩÄ å
.ΩΩå ç 
FlattenHierarchyΩΩç ù
)ΩΩù û
.
ææ 
Where
ææ 
(
ææ 
a
ææ 
=>
ææ 
a
ææ 
.
ææ 
Name
ææ "
.
ææ" #
ToLower
ææ# *
(
ææ* +
System
ææ+ 1
.
ææ1 2
Globalization
ææ2 ?
.
ææ? @
CultureInfo
ææ@ K
.
ææK L
InvariantCulture
ææL \
)
ææ\ ]
==
ææ^ `
cmd
ææa d
)
ææd e
)
ææe f
{
øø 
var
¿¿ 
ps
¿¿ 
=
¿¿ 
func
¿¿ 
.
¿¿ 
GetParameters
¿¿ +
(
¿¿+ ,
)
¿¿, -
;
¿¿- .
var
¡¡ 
pvalues
¡¡ 
=
¡¡ 
new
¡¡ !
List
¡¡" &
<
¡¡& '
object
¡¡' -
>
¡¡- .
(
¡¡. /
)
¡¡/ 0
;
¡¡0 1
var
¬¬ 
keys
¬¬ 
=
¬¬ 
context
¬¬ "
.
¬¬" #
Request
¬¬# *
.
¬¬* +
QueryString
¬¬+ 6
.
¬¬6 7
AllKeys
¬¬7 >
.
¬¬> ?
Select
¬¬? E
(
¬¬E F
a
¬¬F G
=>
¬¬H J
a
¬¬K L
.
¬¬L M
ToLower
¬¬M T
(
¬¬T U
)
¬¬U V
)
¬¬V W
.
¬¬W X
ToArray
¬¬X _
(
¬¬_ `
)
¬¬` a
;
¬¬a b
foreach
ƒƒ 
(
ƒƒ 
var
ƒƒ 
p
ƒƒ 
in
ƒƒ !
ps
ƒƒ" $
)
ƒƒ$ %
{
≈≈ 
var
∆∆ 
pname
∆∆ 
=
∆∆ 
p
∆∆  !
.
∆∆! "
Name
∆∆" &
.
∆∆& '
ToLower
∆∆' .
(
∆∆. /
)
∆∆/ 0
;
∆∆0 1
if
«« 
(
«« 
keys
«« 
.
«« 
Contains
«« %
(
««% &
pname
««& +
)
««+ ,
)
««, -
{
»» 
if
…… 
(
…… 
p
…… 
.
…… 
ParameterType
…… +
==
……, .
typeof
……/ 5
(
……5 6
Guid
……6 :
)
……: ;
)
……; <
pvalues
   #
.
  # $
Add
  $ '
(
  ' (
string
  ( .
.
  . /
IsNullOrEmpty
  / <
(
  < =
context
  = D
.
  D E
Request
  E L
.
  L M
QueryString
  M X
[
  X Y
pname
  Y ^
]
  ^ _
)
  _ `
?
  a b
Guid
  c g
.
  g h
Empty
  h m
:
  n o
new
  p s
Guid
  t x
(
  x y
context  y Ä
.  Ä Å
Request  Å à
.  à â
QueryString  â î
[  î ï
pname  ï ö
]  ö õ
)  õ ú
)  ú ù
;  ù û
else
ÀÀ 
pvalues
ÃÃ #
.
ÃÃ# $
Add
ÃÃ$ '
(
ÃÃ' (
Convert
ÃÃ( /
.
ÃÃ/ 0

ChangeType
ÃÃ0 :
(
ÃÃ: ;
context
ÃÃ; B
.
ÃÃB C
Request
ÃÃC J
.
ÃÃJ K
QueryString
ÃÃK V
[
ÃÃV W
pname
ÃÃW \
]
ÃÃ\ ]
,
ÃÃ] ^
p
ÃÃ_ `
.
ÃÃ` a
ParameterType
ÃÃa n
)
ÃÃn o
)
ÃÃo p
;
ÃÃp q
}
ÕÕ 
}
ŒŒ 
if
œœ 
(
œœ 
pvalues
œœ 
.
œœ 
Count
œœ !
==
œœ" $
ps
œœ% '
.
œœ' (
Length
œœ( .
)
œœ. /
{
–– 
RenderResponse
—— "
(
——" #
context
——# *
,
——* +
func
——, 0
.
——0 1
Invoke
——1 7
(
——7 8
this
——8 <
,
——< =
pvalues
——> E
.
——E F
ToArray
——F M
(
——M N
)
——N O
)
——O P
)
——P Q
;
——Q R
break
““ 
;
““ 
}
”” 
}
‘‘ 
}
’’ 	
}
÷÷ 
public
◊◊ 

class
◊◊ &
JsonSqlGeometryConverter
◊◊ )
:
◊◊* +

Newtonsoft
◊◊, 6
.
◊◊6 7
Json
◊◊7 ;
.
◊◊; <
JsonConverter
◊◊< I
{
ÿÿ 
public
ŸŸ 
override
ŸŸ 
bool
ŸŸ 

CanConvert
ŸŸ '
(
ŸŸ' (
Type
ŸŸ( ,

objectType
ŸŸ- 7
)
ŸŸ7 8
{
⁄⁄ 	
return
€€ 
typeof
€€ 
(
€€ 
SqlGeography
€€ &
)
€€& '
.
€€' (
IsAssignableFrom
€€( 8
(
€€8 9

objectType
€€9 C
)
€€C D
;
€€D E
}
‹‹ 	
public
ﬁﬁ 
override
ﬁﬁ 
object
ﬁﬁ 
ReadJson
ﬁﬁ '
(
ﬁﬁ' (

JsonReader
ﬁﬁ( 2
reader
ﬁﬁ3 9
,
ﬁﬁ9 :
Type
ﬁﬁ; ?

objectType
ﬁﬁ@ J
,
ﬁﬁJ K
object
ﬁﬁL R
existingValue
ﬁﬁS `
,
ﬁﬁ` a
JsonSerializer
ﬁﬁb p

serializer
ﬁﬁq {
)
ﬁﬁ{ |
{
ﬂﬂ 	
if
‡‡ 
(
‡‡ 
reader
‡‡ 
.
‡‡ 
Value
‡‡ 
==
‡‡ 
null
‡‡  $
)
‡‡$ %
return
‡‡& ,
null
‡‡- 1
;
‡‡1 2
var
·· 
result
·· 
=
·· 
SqlGeography
·· %
.
··% &
Parse
··& +
(
··+ ,
reader
··, 2
.
··2 3
Value
··3 8
.
··8 9
ToString
··9 A
(
··A B
)
··B C
)
··C D
;
··D E
return
‚‚ 
result
‚‚ 
;
‚‚ 
}
„„ 	
public
ÂÂ 
override
ÂÂ 
void
ÂÂ 
	WriteJson
ÂÂ &
(
ÂÂ& '

JsonWriter
ÂÂ' 1
writer
ÂÂ2 8
,
ÂÂ8 9
object
ÂÂ: @
value
ÂÂA F
,
ÂÂF G
JsonSerializer
ÂÂH V

serializer
ÂÂW a
)
ÂÂa b
{
ÊÊ 	
if
ÁÁ 
(
ÁÁ 
value
ÁÁ 
!=
ÁÁ 
null
ÁÁ 
)
ÁÁ 

serializer
ËË 
.
ËË 
	Serialize
ËË $
(
ËË$ %
writer
ËË% +
,
ËË+ ,
value
ËË- 2
.
ËË2 3
ToString
ËË3 ;
(
ËË; <
)
ËË< =
)
ËË= >
;
ËË> ?
else
ÈÈ 

serializer
ÈÈ 
.
ÈÈ 
	Serialize
ÈÈ %
(
ÈÈ% &
writer
ÈÈ& ,
,
ÈÈ, -
value
ÈÈ. 3
)
ÈÈ3 4
;
ÈÈ4 5
}
ÍÍ 	
}
ÎÎ 
public
ÏÏ 

class
ÏÏ $
JsonIGeometryConverter
ÏÏ '
:
ÏÏ( )

Newtonsoft
ÏÏ* 4
.
ÏÏ4 5
Json
ÏÏ5 9
.
ÏÏ9 :
JsonConverter
ÏÏ: G
{
ÌÌ 
public
ÓÓ 
override
ÓÓ 
bool
ÓÓ 

CanConvert
ÓÓ '
(
ÓÓ' (
Type
ÓÓ( ,

objectType
ÓÓ- 7
)
ÓÓ7 8
{
ÔÔ 	
return
 
typeof
 
(
 
	IGeometry
 #
)
# $
.
$ %
IsAssignableFrom
% 5
(
5 6

objectType
6 @
)
@ A
;
A B
}
ÒÒ 	
public
ÛÛ 
override
ÛÛ 
object
ÛÛ 
ReadJson
ÛÛ '
(
ÛÛ' (

JsonReader
ÛÛ( 2
reader
ÛÛ3 9
,
ÛÛ9 :
Type
ÛÛ; ?

objectType
ÛÛ@ J
,
ÛÛJ K
object
ÛÛL R
existingValue
ÛÛS `
,
ÛÛ` a
JsonSerializer
ÛÛb p

serializer
ÛÛq {
)
ÛÛ{ |
{
ÙÙ 	
if
ıı 
(
ıı 
reader
ıı 
.
ıı 
Value
ıı 
==
ıı 
null
ıı  $
)
ıı$ %
return
ıı& ,
null
ıı- 1
;
ıı1 2
var
ˆˆ 
	wktReader
ˆˆ 
=
ˆˆ 
new
ˆˆ 
	WKTReader
ˆˆ  )
(
ˆˆ) *
)
ˆˆ* +
;
ˆˆ+ ,
var
˜˜ 
result
˜˜ 
=
˜˜ 
	wktReader
˜˜ "
.
˜˜" #
Read
˜˜# '
(
˜˜' (
reader
˜˜( .
.
˜˜. /
Value
˜˜/ 4
.
˜˜4 5
ToString
˜˜5 =
(
˜˜= >
)
˜˜> ?
)
˜˜? @
;
˜˜@ A
return
¯¯ 
result
¯¯ 
;
¯¯ 
}
˘˘ 	
public
˚˚ 
override
˚˚ 
void
˚˚ 
	WriteJson
˚˚ &
(
˚˚& '

JsonWriter
˚˚' 1
writer
˚˚2 8
,
˚˚8 9
object
˚˚: @
value
˚˚A F
,
˚˚F G
JsonSerializer
˚˚H V

serializer
˚˚W a
)
˚˚a b
{
¸¸ 	
if
˝˝ 
(
˝˝ 
value
˝˝ 
!=
˝˝ 
null
˝˝ 
)
˝˝ 

serializer
˛˛ 
.
˛˛ 
	Serialize
˛˛ $
(
˛˛$ %
writer
˛˛% +
,
˛˛+ ,
(
˛˛- .
(
˛˛. /
	IGeometry
˛˛/ 8
)
˛˛8 9
value
˛˛9 >
)
˛˛> ?
.
˛˛? @
AsText
˛˛@ F
(
˛˛F G
)
˛˛G H
)
˛˛H I
;
˛˛I J
else
ˇˇ 

serializer
ˇˇ 
.
ˇˇ 
	Serialize
ˇˇ %
(
ˇˇ% &
writer
ˇˇ& ,
,
ˇˇ, -
value
ˇˇ. 3
)
ˇˇ3 4
;
ˇˇ4 5
}
ÄÄ 	
}
ÅÅ 
}ÉÉ É
ÑD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Web\Handlers\ISmartHandler.cs
	namespace 	
Infoline
 
. 
Web 
. 
SmartHandlers $
{ 
public 

	interface 
ISmartHandler "
{ 
void		 
ProcessRequest		 
(		 
HttpContext		 '
context		( /
,		/ 0
IDictionary		1 <
<		< =
string		= C
,		C D
object		E K
>		K L
	paramters		M V
)		V W
;		W X
string

 
Name

 
{

 
get

 
;

 
}

 
string 
[ 
] 

Parameters 
{ 
get !
;! "
}# $
} 
} ‚
ãD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Web\Handlers\ISmartHandlerService.cs
	namespace 	
Infoline
 
. 
Web 
. 
SmartHandlers $
{ 
public 

	interface  
ISmartHandlerService )
:* +
IService, 4
{ 
Action		 
<		 
HttpContext		 
>		 
OnProcessRequest		 ,
{		- .
get		/ 2
;		2 3
set		4 7
;		7 8
}		9 :
string 

HandlerUrl 
( 
string  
handler! (
,( )
params* 0
object1 7
[7 8
]8 9
	paramters: C
)C D
;D E
} 
} ƒ*
ÅD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Web\Handlers\JobHandler.cs
	namespace 	
Infoline
 
. 
Web 
. 
SmartHandlers $
{		 
[

 
Export

 
(

 
typeof

 
(

 
ISmartHandler

  
)

  !
)

! "
]

" #
class 	

JobHandler
 
: 
ISmartHandler $
{ 
public 
static 
string 
	CancelURL &
(& '
Guid' +
id, .
). /
{ 	
return 
Application 
. 
Current &
.& '

GetService' 1
<1 2 
ISmartHandlerService2 F
>F G
(G H
)H I
.I J

HandlerUrlJ T
(T U
$strU Z
,Z [
id\ ^
,^ _
$str` h
)h i
;i j
} 	
public 
static 
string 
	StatusURL &
(& '
Guid' +
id, .
). /
{ 	
return 
Application 
. 
Current &
.& '

GetService' 1
<1 2 
ISmartHandlerService2 F
>F G
(G H
)H I
.I J

HandlerUrlJ T
(T U
$strU Z
,Z [
id\ ^
,^ _
$str` h
)h i
;i j
} 	
public 
void 
ProcessRequest "
(" #
HttpContext# .
context/ 6
,6 7
IDictionary8 C
<C D
stringD J
,J K
objectL R
>R S
	paramtersT ]
)] ^
{ 	
Guid 
id 
= 
new 
Guid 
( 
(  
string  &
)& '
	paramters' 0
[0 1
$str1 5
]5 6
)6 7
;7 8
var 
service 
= 
Application %
.% &
Current& -
.- .

GetService. 8
<8 9
IJobService9 D
>D E
(E F
)F G
;G H
var 
item 
= 
service 
. 
GetJob %
(% &
id& (
)( )
;) *
if 
( 
item 
!= 
null 
) 
{ 
string 
cmd 
= 
	paramters &
[& '
$str' ,
], -
as. 0
string1 7
;7 8
if   
(   
cmd   
==   
$str   #
&&  $ &
!  ' (
item  ( ,
.  , -
CancellationToken  - >
.  > ?#
IsCancellationRequested  ? V
)  V W
{!! 
item"" 
."" 
Cancel"" 
(""  
)""  !
;""! "
}## 
lock$$ 
($$ 
item$$ 
)$$ 
context%% 
.%% 
Response%% $
.%%$ %
Write%%% *
(%%* +
Json%%+ /
.%%/ 0
	Serialize%%0 9
(%%9 :
new%%: =
{&& 
IsCompleted'' #
=''$ %
item''& *
.''* +
Complete''+ 3
,''3 4
Status(( 
=((  
item((! %
.((% &
StatusMessage((& 3
,((3 4
Progress))  
=))! "
item))# '
.))' (
Progress))( 0
,))0 1
ProgressMessage** '
=**( )
item*** .
.**. /
ProgressMessage**/ >
,**> ?
Error++ 
=++ 
item++  $
.++$ %
	Exception++% .
!=++/ 1
null++2 6
?++7 8
item,, 
.,, 
	Exception,, &
.,,& '
Message,,' .
:,,/ 0
item,,1 5
.,,5 6
	Exception,,6 ?
.,,? @
ToString,,@ H
(,,H I
),,I J
,,,J K

NextUpdate-- "
=--# $
item--% )
.--) *

NextUpdate--* 4
,--4 5
Script.. 
=..  
item..! %
...% &
	ExtraData..& /
}// 
)// 
)// 
;// 
if00 
(00 
item00 
.00 
Complete00 !
)00! "
service11 
.11 
CollectJobs11 '
(11' (
)11( )
;11) *
}22 
}33 	
public55 
string55 
Name55 
{66 	
get77 
{77 
return77 
$str77 
;77 
}77  !
}88 	
public:: 
string:: 
[:: 
]:: 

Parameters:: "
{;; 	
get<< 
{<< 
return<< 
new<< 
string<< #
[<<# $
]<<$ %
{<<& '
$str<<( ,
,<<, -
$str<<. 3
}<<4 5
;<<5 6
}<<7 8
}== 	
}>> 
}@@ í#
äD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Web\Handlers\Reflector\Reflector.cs
	namespace 	
Infoline
 
. 
Web 
{ 
public 

static 
class 
	Reflector !
{ 
internal 
static 

Dictionary "
<" #
Guid# '
,' (
ReflectedItem) 6
>6 7
items8 =
=> ?
new@ C

DictionaryD N
<N O
GuidO S
,S T
ReflectedItemU b
>b c
(c d
)d e
;e f
public 
static 
string 
Reflect $
($ %
Action% +
<+ ,
HttpContext, 7
,7 8
ReflectedItem9 F
>F G
handlerH O
,O P
FuncQ U
<U V
objectV \
>\ ]
task^ b
)b c
{ 	
Guid 
id 
= 
Guid 
. 
NewGuid "
(" #
)# $
;$ %
Task 
< 
object 
> 
ts 
= 
task "
!=# %
null& *
?+ ,
Task- 1
.1 2
Factory2 9
.9 :
StartNew: B
<B C
objectC I
>I J
(J K
taskK O
)O P
:Q R
nullS W
;W X
if 
( 
ts 
!= 
null 
) 
items 
[ 
id 
] 
= 
new 
ReflectedItem )
{* +
Id, .
=/ 0
id1 3
,3 4
Task5 9
=: ;
ts< >
,> ?
Handler@ G
=H I
handlerJ Q
}R S
;S T
return 
Application 
. 
Current &
.& '

GetService' 1
<1 2 
ISmartHandlerService2 F
>F G
(G H
)H I
.I J

HandlerUrlJ T
(T U
$strU ^
,^ _
id` b
)b c
;c d
} 	
public 
static 
string 
Reflect $
($ %
Action% +
<+ ,
HttpContext, 7
,7 8
ReflectedItem9 F
>F G
handlerH O
)O P
{ 	
return 
Reflect 
( 
handler "
," #
null$ (
)( )
;) *
} 	
public 
static 
string 
Reflect $
($ %
Func% )
<) *
object* 0
>0 1
task2 6
)6 7
{   	
return!! 
Reflect!! 
(!! 
(!! 
c!! 
,!! 
i!!  
)!!  !
=>!!" $
{!!% &
c!!' (
.!!( )
Response!!) 1
.!!1 2
Write!!2 7
(!!7 8
i!!8 9
.!!9 :
Task!!: >
.!!> ?
Result!!? E
)!!E F
;!!F G
}!!H I
,!!I J
task!!K O
)!!O P
;!!P Q
}"" 	
public## 
static## 
string## 
Reflect## $
(##$ %
string##% +
result##, 2
)##2 3
{$$ 	
return%% 
Reflect%% 
(%% 
(%% 
)%% 
=>%%  
result%%! '
)%%' (
;%%( )
}&& 	
}'' 
public(( 

class(( 
ReflectedItem(( 
{)) 
public** 
Guid** 
Id** 
{** 
get** 
;** 
set** !
;**! "
}**# $
public++ 
Task++ 
<++ 
object++ 
>++ 
Task++  
{++! "
get++# &
;++& '
set++( +
;+++ ,
}++- .
internal,, 
Action,, 
<,, 
HttpContext,, #
,,,# $
ReflectedItem,,% 2
>,,2 3
Handler,,4 ;
;,,; <
}-- 
}.. “
ëD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Web\Handlers\Reflector\ReflectorHandler.cs
	namespace

 	
Infoline


 
.

 
Web

 
.

 
SmartHandlers

 $
{ 
[ 
Export 
( 
typeof 
( 
ISmartHandler  
)  !
)! "
]" #
class 	
ReflectorHandler
 
: 
ISmartHandler *
{ 
public 
void 
ProcessRequest "
(" #
HttpContext# .
context/ 6
,6 7
IDictionary8 C
<C D
stringD J
,J K
objectL R
>R S
	paramtersT ]
)] ^
{ 	
Guid 
id 
= 
new 
Guid 
( 
(  
string  &
)& '
	paramters' 0
[0 1
$str1 <
]< =
)= >
;> ?
ReflectedItem 
item 
; 
lock 
( 
	Reflector 
. 
items !
)! "
{ 
if 
( 
	Reflector 
. 
items #
.# $
TryGetValue$ /
(/ 0
id0 2
,2 3
out4 7
item8 <
)< =
)= >
	Reflector 
. 
items #
.# $
Remove$ *
(* +
id+ -
)- .
;. /
} 
if 
( 
item 
!= 
null 
) 
{ 
if 
( 
item 
. 
Task 
!=  
null! %
&&& (
!) *
item* .
.. /
Task/ 3
.3 4
IsCompleted4 ?
)? @
item 
. 
Task 
. 
Wait "
(" #
)# $
;$ %
item 
. 
Handler 
( 
context $
,$ %
item& *
)* +
;+ ,
} 
} 	
public   
string   
Name   
{!! 	
get"" 
{"" 
return"" 
$str"" "
;""" #
}""$ %
}## 	
public%% 
string%% 
[%% 
]%% 

Parameters%% "
{&& 	
get'' 
{'' 
return'' 
new'' 
string'' #
[''# $
]''$ %
{''& '
$str''( 3
}''4 5
;''5 6
}''7 8
}(( 	
})) 
}++ ç9
D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Web\Handlers\Security.cs
	namespace 	
Infoline
 
{		 
public

 

static

 
class

 
Security

  
{ 
static 
readonly 
string 
PasswordHash +
=, -
$str. 8
;8 9
static 
readonly 
string 
SaltKey &
=' (
$str) 3
;3 4
static 
readonly 
string 
VIKey $
=% &
$str' 9
;9 :
public 
static 
string 
Encrypt $
($ %
)% &
{ 	
var 
	plainText 
= 
DateTime $
.$ %
Now% (
.( )
ToString) 1
(1 2
$str2 G
)G H
;H I
byte 
[ 
] 
plainTextBytes !
=" #
Encoding$ ,
., -
UTF8- 1
.1 2
GetBytes2 :
(: ;
	plainText; D
)D E
;E F
byte 
[ 
] 
keyBytes 
= 
new !
Rfc2898DeriveBytes" 4
(4 5
PasswordHash5 A
,A B
EncodingC K
.K L
ASCIIL Q
.Q R
GetBytesR Z
(Z [
SaltKey[ b
)b c
)c d
.d e
GetBytese m
(m n
$numn q
/r s
$numt u
)u v
;v w
var 
symmetricKey 
= 
new "
RijndaelManaged# 2
(2 3
)3 4
{5 6
Mode7 ;
=< =

CipherMode> H
.H I
CBCI L
,L M
PaddingN U
=V W
PaddingModeX c
.c d
Zerosd i
}j k
;k l
var 
	encryptor 
= 
symmetricKey (
.( )
CreateEncryptor) 8
(8 9
keyBytes9 A
,A B
EncodingC K
.K L
ASCIIL Q
.Q R
GetBytesR Z
(Z [
VIKey[ `
)` a
)a b
;b c
byte 
[ 
] 
cipherTextBytes "
;" #
using 
( 
var 
memoryStream #
=$ %
new& )
MemoryStream* 6
(6 7
)7 8
)8 9
{ 
using 
( 
var 
cryptoStream '
=( )
new* -
CryptoStream. :
(: ;
memoryStream; G
,G H
	encryptorI R
,R S
CryptoStreamModeT d
.d e
Writee j
)j k
)k l
{ 
cryptoStream  
.  !
Write! &
(& '
plainTextBytes' 5
,5 6
$num7 8
,8 9
plainTextBytes: H
.H I
LengthI O
)O P
;P Q
cryptoStream    
.    !
FlushFinalBlock  ! 0
(  0 1
)  1 2
;  2 3
cipherTextBytes!! #
=!!$ %
memoryStream!!& 2
.!!2 3
ToArray!!3 :
(!!: ;
)!!; <
;!!< =
cryptoStream""  
.""  !
Close""! &
(""& '
)""' (
;""( )
}## 
memoryStream$$ 
.$$ 
Close$$ "
($$" #
)$$# $
;$$$ %
}%% 
return&& 
Convert&& 
.&& 
ToBase64String&& )
(&&) *
cipherTextBytes&&* 9
)&&9 :
;&&: ;
}'' 	
public** 
static** 
string** 
Decrypt** $
(**$ %
string**% +
encryptedText**, 9
)**9 :
{++ 	
byte,, 
[,, 
],, 
cipherTextBytes,, "
=,,# $
Convert,,% ,
.,,, -
FromBase64String,,- =
(,,= >
encryptedText,,> K
),,K L
;,,L M
byte-- 
[-- 
]-- 
keyBytes-- 
=-- 
new-- !
Rfc2898DeriveBytes--" 4
(--4 5
PasswordHash--5 A
,--A B
Encoding--C K
.--K L
ASCII--L Q
.--Q R
GetBytes--R Z
(--Z [
SaltKey--[ b
)--b c
)--c d
.--d e
GetBytes--e m
(--m n
$num--n q
/--r s
$num--t u
)--u v
;--v w
var.. 
symmetricKey.. 
=.. 
new.. "
RijndaelManaged..# 2
(..2 3
)..3 4
{..5 6
Mode..7 ;
=..< =

CipherMode..> H
...H I
CBC..I L
,..L M
Padding..N U
=..V W
PaddingMode..X c
...c d
None..d h
}..i j
;..j k
var00 
	decryptor00 
=00 
symmetricKey00 (
.00( )
CreateDecryptor00) 8
(008 9
keyBytes009 A
,00A B
Encoding00C K
.00K L
ASCII00L Q
.00Q R
GetBytes00R Z
(00Z [
VIKey00[ `
)00` a
)00a b
;00b c
var11 
memoryStream11 
=11 
new11 "
MemoryStream11# /
(11/ 0
cipherTextBytes110 ?
)11? @
;11@ A
var22 
cryptoStream22 
=22 
new22 "
CryptoStream22# /
(22/ 0
memoryStream220 <
,22< =
	decryptor22> G
,22G H
CryptoStreamMode22I Y
.22Y Z
Read22Z ^
)22^ _
;22_ `
byte33 
[33 
]33 
plainTextBytes33 !
=33" #
new33$ '
byte33( ,
[33, -
cipherTextBytes33- <
.33< =
Length33= C
]33C D
;33D E
int55 
decryptedByteCount55 "
=55# $
cryptoStream55% 1
.551 2
Read552 6
(556 7
plainTextBytes557 E
,55E F
$num55G H
,55H I
plainTextBytes55J X
.55X Y
Length55Y _
)55_ `
;55` a
memoryStream66 
.66 
Close66 
(66 
)66  
;66  !
cryptoStream77 
.77 
Close77 
(77 
)77  
;77  !
return88 
Encoding88 
.88 
UTF888  
.88  !
	GetString88! *
(88* +
plainTextBytes88+ 9
,889 :
$num88; <
,88< =
decryptedByteCount88> P
)88P Q
.88Q R
TrimEnd88R Y
(88Y Z
$str88Z ^
.88^ _
ToCharArray88_ j
(88j k
)88k l
)88l m
;88m n
}99 	
}>> 
}?? Œä
äD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Web\Handlers\SmartHandlerService.cs
	namespace 	
Infoline
 
. 
Web 
. 
SmartHandlers $
{ 
[ 
Export 
( 
typeof 
( 
IService 
) 
) 
] 
[ 
ExportMetadata 
( 
$str !
,! "
typeof# )
() * 
ISmartHandlerService* >
)> ?
)? @
]@ A
class 	
SmartHandlerService
 
:  
ISmartHandlerService  4
,4 5-
!IPartImportsSatisfiedNotification6 W
,W X
IRouteHandlerY f
,f g
IHttpHandlerh t
{ 
public 
Action 
< 
HttpContext !
>! "
OnProcessRequest# 3
{4 5
get6 9
;9 :
set; >
;> ?
}@ A
[ 	

ImportMany	 
] 
IEnumerable 
< 
ISmartHandler !
>! "
handlers# +
=, -
null. 2
;2 3
public 
SmartHandlerService "
(" #
)# $
{ 	
} 	
internal 
ISmartHandler 
GetHandlerByName /
(/ 0
string0 6
name7 ;
); <
{ 	
return 
handlers 
. 
FirstOrDefault *
(* +
a+ ,
=>- /
a0 1
.1 2
Name2 6
==7 9
name: >
)> ?
;? @
} 	

Dictionary 
< 
	RouteBase 
, 
RouteHandler *
>* +
routes, 2
=3 4
new5 8

Dictionary9 C
<C D
	RouteBaseD M
,M N
RouteHandlerO [
>[ \
(\ ]
)] ^
;^ _
class 
RouteHandler 
{   	
public!! 
ISmartHandler!!  
Handler!!! (
{!!) *
get!!+ .
;!!. /
set!!0 3
;!!3 4
}!!5 6
public"" 

MethodInfo"" 
Method"" $
{""% &
get""' *
;""* +
set"", /
;""/ 0
}""1 2
}## 	
public$$ 
void$$ 
OnImportsSatisfied$$ &
($$& '
)$$' (
{%% 	
var'' 
hnds'' 
='' 
handlers'' 
.''  
OrderByDescending''  1
(''1 2
a''2 3
=>''4 6
a''7 8
.''8 9
GetType''9 @
(''@ A
)''A B
.''B C
FullName''C K
.''K L
Split''L Q
(''Q R
$char''R U
)''U V
.''V W
Length''W ]
)''] ^
.''^ _
ThenBy''_ e
(''e f
a''f g
=>''h j
a''k l
.''l m
GetType''m t
(''t u
)''u v
.''v w
Name''w {
.''{ |
Length	''| Ç
)
''Ç É
.
''É Ñ
ThenBy
''Ñ ä
(
''ä ã
a
''ã å
=>
''ç è
a
''ê ë
.
''ë í
GetType
''í ô
(
''ô ö
)
''ö õ
.
''õ ú
Name
''ú †
)
''† °
;
''° ¢
foreach)) 
()) 
var)) 
item)) 
in))  
hnds))! %
)))% &
{** 
string++ 
rname++ 
=++ 
$str++ '
+++( )
item++* .
.++. /
Name++/ 3
;++3 4
lock,, 
(,, 

RouteTable,,  
.,,  !
Routes,,! '
),,' (
{-- 
AddRoute.. 
(.. 
new..  
RouteHandler..! -
{... /
Handler..0 7
=..8 9
item..: >
}..? @
,..@ A
rname..B G
,..G H
string..I O
...O P
Format..P V
(..V W
$str..W _
,.._ `
item..a e
...e f
Name..f j
,..j k
item..l p
...p q

Parameters..q {
...{ |

FormatJoin	..| Ü
(
..Ü á
$str
..á ë
)
..ë í
)
..í ì
)
..ì î
;
..î ï
foreach00 
(00 
var00  
h00! "
in00# %
item00& *
.00* +
GetType00+ 2
(002 3
)003 4
.004 5

GetMethods005 ?
(00? @
BindingFlags00@ L
.00L M
Instance00M U
|00V W
BindingFlags00X d
.00d e
	NonPublic00e n
|00o p
BindingFlags00q }
.00} ~
Public	00~ Ñ
)
00Ñ Ö
.11 
Where11 
(11 
a11  
=>11! #
a11$ %
.11% &
GetParameters11& 3
(113 4
)114 5
.115 6
Length116 <
==11= ?
$num11@ A
)11A B
.22 
Select22 
(22  
a22  !
=>22" $
new22% (
{22) *
mi22+ -
=22. /
a220 1
,221 2
at223 5
=226 7
a228 9
.229 :
GetCustomAttributes22: M
(22M N
true22N R
)22R S
.22S T
OfType22T Z
<22Z [#
HandleFunctionAttribute22[ r
>22r s
(22s t
)22t u
.22u v
FirstOrDefault	22v Ñ
(
22Ñ Ö
)
22Ö Ü
}
22á à
)
22à â
.33 
Where33 
(33 
a33  
=>33! #
a33$ %
.33% &
at33& (
!=33) +
null33, 0
)330 1
)331 2
{44 
AddRoute55  
(55  !
new55! $
RouteHandler55% 1
{552 3
Handler554 ;
=55< =
item55> B
,55B C
Method55D J
=55K L
h55M N
.55N O
mi55O Q
}55R S
,55S T
rname55U Z
+55[ \
h55] ^
.55^ _
mi55_ a
.55a b
Name55b f
,55f g
h55h i
.55i j
at55j l
.55l m
Route55m r
)55r s
;55s t
}66 
}77 
}88 
}99 	
private;; 
void;; 
AddRoute;; 
(;; 
RouteHandler;; *
item;;+ /
,;;/ 0
string;;1 7
rname;;8 =
,;;= >
string;;? E
url;;F I
);;I J
{<< 	
if== 
(== 

RouteTable== 
.== 
Routes== !
.==! "
Count==" '
(==' (
a==( )
=>==* ,
(==- .
(==. /
System==/ 5
.==5 6
Web==6 9
.==9 :
Routing==: A
.==A B
Route==B G
)==G H
a==H I
)==I J
.==J K
Url==K N
====O Q
url==R U
)==U V
====W Y
$num==Z [
)==[ \
{>> 
Route?? 
rt?? 
=?? 

RouteTable?? %
.??% &
Routes??& ,
[??, -
rname??- 2
]??2 3
as??4 6
Route??7 <
;??< =
ifAA 
(AA 
rtAA 
!=AA 
nullAA 
)AA 

RouteTableBB 
.BB 
RoutesBB %
.BB% &
RemoveBB& ,
(BB, -
rtBB- /
)BB/ 0
;BB0 1
rtCC 
=CC 
newCC 
RouteCC 
(CC 
urlCC "
,CC" #
thisCC$ (
)CC( )
;CC) *

RouteTableDD 
.DD 
RoutesDD !
.DD! "
AddDD" %
(DD% &
rnameDD& +
,DD+ ,
rtDD- /
)DD/ 0
;DD0 1
routesEE 
.EE 
AddEE 
(EE 
rtEE 
,EE 
itemEE #
)EE# $
;EE$ %
}FF 
}GG 	
publicII 
stringII 

HandlerUrlII  
(II  !
stringII! '
handlerII( /
,II/ 0
paramsII1 7
objectII8 >
[II> ?
]II? @

parametersIIA K
)IIK L
{JJ 	
varLL 
rtLL 
=LL 
handlersLL 
.LL 
FirstOrDefaultLL ,
(LL, -
aLL- .
=>LL/ 1
aLL2 3
.LL3 4
NameLL4 8
==LL9 ;
handlerLL< C
)LLC D
;LLD E
ifMM 
(MM 
rtMM 
==MM 
nullMM 
)MM 
throwNN 
newNN 
ArgumentExceptionNN +
(NN+ ,
$strNN, >
,NN> ?
handlerNN@ G
)NNG H
;NNH I
ifPP 
(PP 

parametersPP 
.PP 
LengthPP !
!=PP" $
rtPP% '
.PP' (

ParametersPP( 2
.PP2 3
LengthPP3 9
)PP9 :
throwQQ 
newQQ 
ArgumentExceptionQQ +
(QQ+ ,
$strQQ, A
,QQA B
handlerQQC J
)QQJ K
;QQK L
varSS 
dicSS 
=SS 
newSS  
RouteValueDictionarySS .
(SS. /
)SS/ 0
;SS0 1
forTT 
(TT 
intTT 
iTT 
=TT 
$numTT 
;TT 
iTT 
<TT 
rtTT  "
.TT" #

ParametersTT# -
.TT- .
LengthTT. 4
;TT4 5
iTT6 7
++TT7 9
)TT9 :
dicUU 
.UU 
AddUU 
(UU 
rtUU 
.UU 

ParametersUU %
[UU% &
iUU& '
]UU' (
,UU( )

parametersUU* 4
[UU4 5
iUU5 6
]UU6 7
)UU7 8
;UU8 9
VirtualPathDataWW 
dataWW  
=WW! "

RouteTableWW# -
.WW- .
RoutesWW. 4
.WW4 5
GetVirtualPathWW5 C
(WWC D
HttpContextWWD O
.WWO P
CurrentWWP W
.WWW X
RequestWWX _
.WW_ `
RequestContextWW` n
,WWn o
$strWWp x
+WWy z
handler	WW{ Ç
,
WWÇ É
dic
WWÑ á
)
WWá à
;
WWà â
ifXX 
(XX 
dataXX 
!=XX 
nullXX 
)XX 
returnYY 
dataYY 
.YY 
VirtualPathYY '
;YY' (
returnZZ 
nullZZ 
;ZZ 
}[[ 	
public]] 
IHttpHandler]] 
GetHttpHandler]] *
(]]* +
RequestContext]]+ 9
requestContext]]: H
)]]H I
{^^ 	
return__ 
this__ 
;__ 
}`` 	
publicaa 
boolaa 

IsReusableaa 
{aa  
getaa! $
{aa% &
returnaa' -
falseaa. 3
;aa3 4
}aa5 6
}aa7 8
publicbb 
voidbb 
ProcessRequestbb "
(bb" #
HttpContextbb# .
contextbb/ 6
)bb6 7
{cc 	
ifee 
(ee 
(ff 
HttpContextff 
.ff 
Currentff $
.ff$ %
Requestff% ,
.ff, -
Urlff- 0
.ff0 1
	LocalPathff1 :
.ff: ;

StartsWithff; E
(ffE F
$strffF N
)ffN O
||ffP R
HttpContextffS ^
.ff^ _
Currentff_ f
.fff g
Requestffg n
.ffn o
Urlffo r
.ffr s
	LocalPathffs |
.ff| }

StartsWith	ff} á
(
ffá à
$str
ffà ê
)
ffê ë
)
ffë í
&&
ffì ï
HttpContextgg 
.gg 
Currentgg #
.gg# $
Requestgg$ +
.gg+ ,

HttpMethodgg, 6
!=gg7 9
$strgg: @
)gg@ A
{hh 
BaseSmartHandlerii  
.ii  !
RenderResponseii! /
(ii/ 0
contextii0 7
,ii7 8
newii9 <
ResultStatusii= I
{iiJ K
resultiiL R
=iiS T
falseiiU Z
,iiZ [
objectsii\ c
=iid e
nulliif j
,iij k
messageiil s
=iit u
$str	iiv ç
}
iié è
)
iiè ê
;
iiê ë
returnjj 
;jj 
}kk 
OnProcessRequestmm 
?mm 
.mm 
Invokemm $
(mm$ %
contextmm% ,
)mm, -
;mm- .
RouteHandleroo 
hoo 
=oo 
nulloo !
;oo! "
trypp 
{qq 
varrr 
drr 
=rr 

RouteTablerr "
.rr" #
Routesrr# )
.rr) *
GetRouteDatarr* 6
(rr6 7
newrr7 :
HttpContextWrapperrr; M
(rrM N
contextrrN U
)rrU V
)rrV W
;rrW X
varss 
stss 
=ss 
DateTimess !
.ss! "
Nowss" %
;ss% &
TimeSpantt 
diftt 
;tt 
ifuu 
(uu 
routesuu 
.uu 
TryGetValueuu &
(uu& '
duu' (
.uu( )
Routeuu) .
,uu. /
outuu0 3
huu4 5
)uu5 6
)uu6 7
{vv 
difww 
=ww 
(ww 
DateTimeww #
.ww# $
Nowww$ '
-ww( )
stww* ,
)ww, -
;ww- .
ifxx 
(xx 
hxx 
.xx 
Methodxx  
==xx! #
nullxx$ (
)xx( )
hyy 
.yy 
Handleryy !
.yy! "
ProcessRequestyy" 0
(yy0 1
contextyy1 8
,yy8 9
dyy: ;
.yy; <
Valuesyy< B
)yyB C
;yyC D
elsezz 
h{{ 
.{{ 
Method{{  
.{{  !
Invoke{{! '
({{' (
h{{( )
.{{) *
Handler{{* 1
,{{1 2
new{{3 6
object{{7 =
[{{= >
]{{> ?
{{{@ A
context{{B I
}{{J K
){{K L
;{{L M
}|| 
dif}} 
=}} 
(}} 
DateTime}} 
.}}  
Now}}  #
-}}$ %
st}}& (
)}}( )
;}}) *
}~~ 
catch 
( 
	Exception 
ex 
)  
{
ÄÄ 
var
ÇÇ 
resultStatus
ÇÇ  
=
ÇÇ! "
new
ÇÇ# &
ResultStatus
ÇÇ' 3
(
ÇÇ3 4
)
ÇÇ4 5
{
ÉÉ 
result
ÑÑ 
=
ÑÑ 
false
ÑÑ "
,
ÑÑ" #
message
ÖÖ 
=
ÖÖ 
ex
ÖÖ  
.
ÖÖ  !
InnerException
ÖÖ! /
!=
ÖÖ0 2
null
ÖÖ3 7
?
ÖÖ8 9
ex
ÖÖ: <
.
ÖÖ< =
InnerException
ÖÖ= K
.
ÖÖK L
Message
ÖÖL S
:
ÖÖT U
$str
ÖÖV X
}
ÜÜ 
;
ÜÜ 
BaseSmartHandler
áá  
.
áá  !
RenderResponse
áá! /
(
áá/ 0
context
áá0 7
,
áá7 8
resultStatus
áá9 E
)
ááE F
;
ááF G
}
àà 
}
ââ 	
public
ãã 
ISmartHandler
ãã 
Get
ãã  
(
ãã  !
string
ãã! '
name
ãã( ,
)
ãã, -
{
åå 	
var
çç 
d
çç 
=
çç 
routes
çç 
.
çç 
Where
çç  
(
çç  !
a
çç! "
=>
çç# %
a
çç& '
.
çç' (
Value
çç( -
.
çç- .
Handler
çç. 5
.
çç5 6
Name
çç6 :
==
çç; =
name
çç> B
)
ççB C
.
ççC D
FirstOrDefault
ççD R
(
ççR S
)
ççS T
;
ççT U
return
éé 
d
éé 
.
éé 
Value
éé 
.
éé 
Handler
éé "
;
éé" #
}
èè 	
}
êê 
public
ëë 

class
ëë !
SmartHandlerManager
ëë $
{
íí 
public
ìì 
static
ìì "
ISmartHandlerService
ìì *
Service
ìì+ 2
{
îî 	
get
ïï 
{
ññ 
return
óó 
Application
óó "
.
óó" #
Current
óó# *
.
óó* +

GetService
óó+ 5
<
óó5 6"
ISmartHandlerService
óó6 J
>
óóJ K
(
óóK L
)
óóL M
;
óóM N
}
òò 
}
ôô 	
}
öö 
public
õõ 

class
õõ %
HandleFunctionAttribute
õõ (
:
õõ) *
	Attribute
õõ+ 4
{
úú 
public
ùù 
string
ùù 
Route
ùù 
{
ùù 
get
ùù !
;
ùù! "
set
ùù# &
;
ùù& '
}
ùù( )
public
ûû %
HandleFunctionAttribute
ûû &
(
ûû& '
string
ûû' -
route
ûû. 3
)
ûû3 4
{
üü 	
Route
†† 
=
†† 
route
†† 
;
†† 
}
°° 	
}
¢¢ 
}§§ √©
îD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Web\PathProviders\AssemblyResourceProvider.cs
	namespace 	
Infoline
 
. 
Web 
. 
PathProviders $
{ 
[ 
Export 
( 
typeof 
( 
IService 
) 
) 
] 
[ 
ExportMetadata 
( 
$str !
,! "
typeof# )
() *%
IAssemblyResourceProvider* C
)C D
)D E
]E F
public 

class $
AssemblyResourceProvider )
:* +
System, 2
.2 3
Web3 6
.6 7
Hosting7 >
.> ?
VirtualPathProvider? R
,R S%
IAssemblyResourceProviderT m
{ 

Dictionary 
< 
string 
, 
ResourceAssembly +
>+ ,
paths- 2
=3 4
new5 8

Dictionary9 C
<C D
stringD J
,J K
ResourceAssemblyL \
>\ ]
(] ^
)^ _
;_ `
public 
string 
GetPath 
( 
Assembly &
asm' *
)* +
{ 	
var 
ret 
= 
paths 
. 
Values "
." #
FirstOrDefault# 1
(1 2
a2 3
=>4 6
a7 8
.8 9
Assembly9 A
==B D
asmE H
)H I
;I J
if   
(   
ret   
==   
null   
)   
throw!! 
new!! 
	Exception!! #
(!!# $
$str!!$ a
+!!b c
asm!!d g
.!!g h
ToString!!h p
(!!p q
)!!q r
)!!r s
;!!s t
return"" 
string"" 
."" 
Concat""  
(""  !
ret""! $
.""$ %
	Attribute""% .
."". /
Path""/ 3
,""3 4
$str""5 8
)""8 9
;""9 :
}## 	
public$$ 
string$$ 
GetPath$$ 
($$ 
Type$$ "
type$$# '
,$$' (
string$$) /
postfix$$0 7
)$$7 8
{%% 	
var&& 
asm&& 
=&& 
type&& 
.&& 
Assembly&& #
;&&# $
var'' 
ret'' 
='' 
paths'' 
.'' 
Values'' "
.''" #
FirstOrDefault''# 1
(''1 2
a''2 3
=>''4 6
a''7 8
.''8 9
Assembly''9 A
==''B D
asm''E H
)''H I
;''I J
if(( 
((( 
ret(( 
!=(( 
null(( 
)(( 
{)) 
var** 
fn** 
=** 
type** 
.** 
FullName** &
;**& '
var++ 
ix++ 
=++ 
fn++ 
.++ 
IndexOf++ #
(++# $
$str++$ +
)+++ ,
+++- .
$num++/ 0
;++0 1
if,, 
(,, 
ix,, 
>,, 
$num,, 
),, 
return-- 
string-- !
.--! "
Concat--" (
(--( )
$str--) ,
,--, -
ret--. 1
.--1 2
	Attribute--2 ;
.--; <
Path--< @
,--@ A
fn.. 
... 
	Substring.. $
(..$ %
ix..% '
,..' (
fn..) +
...+ ,
Length.., 2
>..3 4
postfix..5 <
...< =
Length..= C
&&..D F
fn..G I
...I J
EndsWith..J R
(..R S
postfix..S Z
)..Z [
?..\ ]
fn..^ `
...` a
Length..a g
-..h i
postfix..j q
...q r
Length..r x
-..y z
ix..{ }
:..~ 
fn
..Ä Ç
.
..Ç É
Length
..É â
-
..ä ã
ix
..å é
)
..é è
.
..è ê
Replace
..ê ó
(
..ó ò
$str
..ò õ
,
..õ ú
$str
..ù †
)
..† °
)
..° ¢
;
..¢ £
}00 
return11 
null11 
;11 
}22 	
public33 
Type33 
GetType33 
(33 
string33 "
url33# &
,33& '
string33( .
postfix33/ 6
)336 7
{44 	
var55 
path55 
=55 
url55 
;55 
var77 
root77 
=77 
GetRoot77 
(77 
ref77 "
path77# '
)77' (
;77( )
if88 
(88 
root88 
!=88 
null88 
)88 
{99 
ResourceAssembly::  
res::! $
=::% &
null::' +
;::+ ,
if;; 
(;; 
paths;; 
.;; 
TryGetValue;; %
(;;% &
root;;& *
.;;* +
ToLower;;+ 2
(;;2 3
);;3 4
,;;4 5
out;;6 9
res;;: =
);;= >
);;> ?
{<< 
var== 
tname== 
=== 
string==  &
.==& '
Format==' -
(==- .
$str==. >
,==> ?
res>> 
.>> 
Assembly>> !
.>>! "
FullName>>" *
.>>* +
Split>>+ 0
(>>0 1
$char>>1 4
)>>4 5
.>>5 6
FirstOrDefault>>6 D
(>>D E
)>>E F
,>>F G
res?? 
.?? 
	Attribute?? "
.??" #
RootPath??# +
,??+ ,
path@@ 
.@@ 
Replace@@ !
(@@! "
$str@@" %
,@@% &
$str@@' *
)@@* +
.@@+ ,
Replace@@, 3
(@@3 4
$str@@4 ;
,@@; <
$str@@= ?
)@@? @
,@@@ A
postfix@@B I
)@@I J
;@@J K
returnAA 
resAA 
.AA 
AssemblyAA '
.AA' (
GetTypeAA( /
(AA/ 0
tnameAA0 5
,AA5 6
falseAA7 <
,AA< =
trueAA> B
)AAB C
;AAC D
}BB 
}CC 
returnDD 
nullDD 
;DD 
}EE 	
publicGG $
AssemblyResourceProviderGG '
(GG' (
)GG( )
{HH 	
pathsII 
=II 
	AppDomainII 
.II 
CurrentDomainII +
.II+ ,
GetAssembliesII, 9
(II9 :
)II: ;
.II; <
WhereII< A
(IIA B
aIIB C
=>IID F
!IIG H
aIIH I
.III J
GlobalAssemblyCacheIIJ ]
)II] ^
.JJ 
SelectJJ 
(JJ 
aJJ 
=>JJ 
newJJ !
ResourceAssemblyJJ" 2
{JJ3 4
AssemblyJJ5 =
=JJ> ?
aJJ@ A
,JJA B
	AttributeJJC L
=JJM N
aJJO P
.JJP Q
GetCustomAttributesJJQ d
(JJd e
typeofJJe k
(JJk l!
ResorcePathAttribute	JJl Ä
)
JJÄ Å
,
JJÅ Ç
true
JJÉ á
)
JJá à
.
JJà â
OfType
JJâ è
<
JJè ê"
ResorcePathAttribute
JJê §
>
JJ§ •
(
JJ• ¶
)
JJ¶ ß
.
JJß ®
FirstOrDefault
JJ® ∂
(
JJ∂ ∑
)
JJ∑ ∏
}
JJπ ∫
)
JJ∫ ª
.KK 
WhereKK 
(KK 
aKK 
=>KK 
aKK 
.KK 
	AttributeKK (
!=KK) +
nullKK, 0
)KK0 1
.KK1 2
ToDictionaryKK2 >
(KK> ?
aKK? @
=>KKA C
aKKD E
.KKE F
	AttributeKKF O
.KKO P
PathKKP T
.KKT U
ToLowerKKU \
(KK\ ]
)KK] ^
,KK^ _
aKK` a
=>KKb d
aKKe f
)KKf g
;KKg h
ifLL 
(LL 
SystemLL 
.LL 
WebLL 
.LL 
HostingLL "
.LL" #
HostingEnvironmentLL# 5
.LL5 6
IsHostedLL6 >
)LL> ?
{MM 
SystemNN 
.NN 
WebNN 
.NN 
HostingNN "
.NN" #
HostingEnvironmentNN# 5
.NN5 6'
RegisterVirtualPathProviderNN6 Q
(NNQ R
thisNNR V
)NNV W
;NNW X
}OO 
}QQ 	
staticRR 
stringRR 
GetRootRR 
(RR 
refRR !
stringRR" (
pathRR) -
)RR- .
{SS 	
stringTT 
rootTT 
=TT 
nullTT 
;TT 
intVV 
ixVV 
=VV 
pathVV 
.VV 
IndexOfVV !
(VV! "
$charVV" %
)VV% &
,VV& '
startVV( -
=VV. /
$numVV0 1
;VV1 2
ifXX 
(XX 
ixXX 
==XX 
$numXX 
&&XX 
pathXX 
.XX  
LengthXX  &
>XX' (
$numXX) *
)XX* +
{YY 
startZZ 
=ZZ 
$numZZ 
;ZZ 
ix[[ 
=[[ 
path[[ 
.[[ 
IndexOf[[ !
([[! "
$char[[" %
,[[% &
$num[[' (
)[[( )
;[[) *
}\\ 
if]] 
(]] 
ix]] 
!=]] 
-]] 
$num]] 
&&]] 
path]]  
.]]  !
Length]]! '
>]]( )
ix]]* ,
+]]- .
$num]]/ 0
)]]0 1
{^^ 
root__ 
=__ 
path__ 
.__ 
	Substring__ %
(__% &
start__& +
,__+ ,
ix__- /
-__0 1
start__2 7
)__7 8
.__8 9
ToLower__9 @
(__@ A
)__A B
;__B C
path`` 
=`` 
path`` 
.`` 
	Substring`` %
(``% &
ix``& (
+``) *
$num``+ ,
)``, -
;``- .
}aa 
returnbb 
rootbb 
;bb 
}dd 	
Resourceee 
ConvertPathee 
(ee 
stringee #
pathee$ (
)ee( )
{ff 	
ifgg 
(gg 
pathgg 
.gg 

StartsWithgg 
(gg  
$strgg  #
)gg# $
)gg$ %
pathhh 
=hh 
pathhh 
.hh 
	Substringhh %
(hh% &
$numhh& '
)hh' (
;hh( )
stringjj 
rootjj 
=jj 
GetRootjj !
(jj! "
refjj" %
pathjj& *
)jj* +
;jj+ ,
ifkk 
(kk 
rootkk 
!=kk 
nullkk 
)kk 
{ll 
ResourceAssemblymm  
asmmm! $
;mm$ %
varnn 
resnn 
=nn 
newnn 
Resourcenn &
(nn& '
)nn' (
;nn( )
ifoo 
(oo 
rootoo 
==oo 
$stroo *
)oo* +
{pp 
stringqq 
[qq 
]qq 
partsqq "
=qq# $
pathqq% )
.qq) *
Splitqq* /
(qq/ 0
$charqq0 3
)qq3 4
;qq4 5
resrr 
.rr 
ResourceNamerr $
=rr% &
partsrr' ,
[rr, -
$numrr- .
]rr. /
;rr/ 0
resss 
.ss 
Asmss 
=ss 
Systemss $
.ss$ %

Reflectionss% /
.ss/ 0
Assemblyss0 8
.ss8 9
LoadFiless9 A
(ssA B
PathssB F
.ssF G
CombinessG N
(ssN O
HttpRuntimessO Z
.ssZ [
BinDirectoryss[ g
,ssg h
partsssi n
[ssn o
$numsso p
]ssp q
)ssq r
)ssr s
;sss t
}tt 
elseuu 
ifvv 
(vv 
pathsvv 
.vv 
TryGetValuevv )
(vv) *
rootvv* .
,vv. /
outvv0 3
asmvv4 7
)vv7 8
)vv8 9
{ww 
resyy 
.yy 
Asmyy 
=yy  !
asmyy" %
.yy% &
Assemblyyy& .
;yy. /
reszz 
.zz 
ResourceNamezz (
=zz) *
string{{ 
.{{ 
Format{{ %
({{% &
$str{{& 3
,{{3 4
asm{{5 8
.{{8 9
Assembly{{9 A
.{{A B
FullName{{B J
.{{J K
Split{{K P
({{P Q
$char{{Q T
){{T U
.{{U V
FirstOrDefault{{V d
({{d e
){{e f
,{{f g
path|| 
.||  
Replace||  '
(||' (
$char||( +
,||+ ,
$char||- 0
)||0 1
,}} 
asm}}  
.}}  !
	Attribute}}! *
.}}* +
RootPath}}+ 3
)}}3 4
;}}4 5
}~~ 
if 
( 
res 
. 
Asm 
!= 
null #
&&$ &
res' *
.* +
ResourceName+ 7
!=8 :
null; ?
)? @
{
ÄÄ 
res
ÅÅ 
.
ÅÅ 
ResourceName
ÅÅ $
=
ÅÅ% &
res
ÅÅ' *
.
ÅÅ* +
Asm
ÅÅ+ .
.
ÅÅ. /&
GetManifestResourceNames
ÅÅ/ G
(
ÅÅG H
)
ÅÅH I
.
ÅÅI J
Where
ÅÅJ O
(
ÅÅO P
a
ÅÅP Q
=>
ÅÅR T
a
ÅÅU V
.
ÅÅV W
ToLower
ÅÅW ^
(
ÅÅ^ _
)
ÅÅ_ `
==
ÅÅa c
res
ÅÅd g
.
ÅÅg h
ResourceName
ÅÅh t
.
ÅÅt u
ToLower
ÅÅu |
(
ÅÅ| }
)
ÅÅ} ~
)
ÅÅ~ 
.ÅÅ Ä
FirstOrDefaultÅÅÄ é
(ÅÅé è
)ÅÅè ê
;ÅÅê ë
if
ÇÇ 
(
ÇÇ 
res
ÇÇ 
.
ÇÇ 
ResourceName
ÇÇ (
!=
ÇÇ) +
null
ÇÇ, 0
)
ÇÇ0 1
return
ÉÉ 
res
ÉÉ "
;
ÉÉ" #
}
ÖÖ 
}
áá 
return
ââ 
null
ââ 
;
ââ 
}
ãã 	
private
åå 
bool
åå 
IsAppResourcePath
åå &
(
åå& '
string
åå' -
virtualPath
åå. 9
)
åå9 :
{
çç 	
String
éé 
	checkPath
éé 
=
éé  
VirtualPathUtility
èè !
.
èè! "
ToAppRelative
èè" /
(
èè/ 0
virtualPath
èè0 ;
)
èè; <
;
èè< =
return
êê 
	checkPath
êê 
.
êê 

StartsWith
êê '
(
êê' (
$str
êê( 9
,
êê9 :
StringComparison
êê; K
.
êêK L(
InvariantCultureIgnoreCase
êêL f
)
êêf g
;
êêg h
}
ëë 	
public
ìì 
override
ìì 
bool
ìì 

FileExists
ìì '
(
ìì' (
string
ìì( .
virtualPath
ìì/ :
)
ìì: ;
{
îî 	
return
ïï 
base
ïï 
.
ïï 

FileExists
ïï "
(
ïï" #
virtualPath
ïï# .
)
ïï. /
||
ïï0 2
ConvertPath
ïï3 >
(
ïï> ?
virtualPath
ïï? J
)
ïïJ K
!=
ïïL N
null
ïïO S
;
ïïS T
}
óó 	
public
òò 
override
òò 
VirtualFile
òò #
GetFile
òò$ +
(
òò+ ,
string
òò, 2
virtualPath
òò3 >
)
òò> ?
{
ôô 	
if
öö 
(
öö 
base
öö 
.
öö 

FileExists
öö 
(
öö  
virtualPath
öö  +
)
öö+ ,
)
öö, -
return
õõ 
base
õõ 
.
õõ 
GetFile
õõ #
(
õõ# $
virtualPath
õõ$ /
)
õõ/ 0
;
õõ0 1
var
úú 
res
úú 
=
úú 
ConvertPath
úú !
(
úú! "
virtualPath
úú" -
)
úú- .
;
úú. /
if
ùù 
(
ùù 
res
ùù 
!=
ùù 
null
ùù 
)
ùù 
{
ûû 
return
üü 
new
üü )
AssemblyResourceVirtualFile
üü 6
(
üü6 7
virtualPath
üü7 B
,
üüB C
res
üüD G
)
üüG H
;
üüH I
}
†† 
else
°° 
return
¢¢ 
base
¢¢ 
.
¢¢ 
GetFile
¢¢ #
(
¢¢# $
virtualPath
¢¢$ /
)
¢¢/ 0
;
¢¢0 1
}
££ 	
public
§§ 
override
§§ 
System
§§ 
.
§§ 
Web
§§ "
.
§§" #
Caching
§§# *
.
§§* +
CacheDependency
§§+ : 
GetCacheDependency
§§; M
(
§§M N
string
§§N T
virtualPath
§§U `
,
§§` a
System
§§b h
.
§§h i
Collections
§§i t
.
§§t u
IEnumerable§§u Ä'
virtualPathDependencies§§Å ò
,§§ò ô
DateTime§§ö ¢
utcStart§§£ ´
)§§´ ¨
{
•• 	
if
¶¶ 
(
¶¶ 
ConvertPath
¶¶ 
(
¶¶ 
virtualPath
¶¶ '
)
¶¶' (
!=
¶¶) +
null
¶¶, 0
)
¶¶0 1
return
ßß 
new
ßß 
PermenantDep
ßß '
(
ßß' (
)
ßß( )
;
ßß) *
else
®® 
return
©© 
base
©© 
.
©©  
GetCacheDependency
©© .
(
©©. /
virtualPath
©©/ :
,
©©: ;%
virtualPathDependencies
©©< S
,
©©S T
utcStart
©©U ]
)
©©] ^
;
©©^ _
}
™™ 	
public
´´ 
override
´´ 
string
´´ 
GetCacheKey
´´ *
(
´´* +
string
´´+ 1
virtualPath
´´2 =
)
´´= >
{
¨¨ 	
return
≠≠ 
base
≠≠ 
.
≠≠ 
GetCacheKey
≠≠ #
(
≠≠# $
virtualPath
≠≠$ /
)
≠≠/ 0
;
≠≠0 1
}
ÆÆ 	
public
ØØ 
override
ØØ 
string
ØØ 
GetFileHash
ØØ *
(
ØØ* +
string
ØØ+ 1
virtualPath
ØØ2 =
,
ØØ= >
System
ØØ? E
.
ØØE F
Collections
ØØF Q
.
ØØQ R
IEnumerable
ØØR ]%
virtualPathDependencies
ØØ^ u
)
ØØu v
{
∞∞ 	
return
±± 
base
±± 
.
±± 
GetFileHash
±± #
(
±±# $
virtualPath
±±$ /
,
±±/ 0%
virtualPathDependencies
±±1 H
)
±±H I
;
±±I J
}
≤≤ 	
class
≥≥ 
PermenantDep
≥≥ 
:
≥≥ 
CacheDependency
≥≥ ,
{
¥¥ 	
public
µµ 
PermenantDep
µµ 
(
µµ  
)
µµ  !
{
∂∂ 
}
∏∏ 
}
ππ 	
}
∫∫ 
class
ªª 	
Resource
ªª
 
{
ºº 
public
ΩΩ 
Assembly
ΩΩ 
Asm
ΩΩ 
{
ΩΩ 
get
ΩΩ !
;
ΩΩ! "
set
ΩΩ# &
;
ΩΩ& '
}
ΩΩ( )
public
ææ 
string
ææ 
ResourceName
ææ "
{
ææ# $
get
ææ% (
;
ææ( )
set
ææ* -
;
ææ- .
}
ææ/ 0
}
øø 
class
¿¿ 	)
AssemblyResourceVirtualFile
¿¿
 %
:
¿¿& '
VirtualFile
¿¿( 3
{
¡¡ 
Resource
¬¬ 
res
¬¬ 
;
¬¬ 
public
√√ )
AssemblyResourceVirtualFile
√√ *
(
√√* +
string
√√+ 1
virtualPath
√√2 =
,
√√= >
Resource
√√? G
res
√√H K
)
√√K L
:
ƒƒ 
base
ƒƒ 
(
ƒƒ 
virtualPath
ƒƒ 
)
ƒƒ 
{
≈≈ 	
this
∆∆ 
.
∆∆ 
res
∆∆ 
=
∆∆ 
res
∆∆ 
;
∆∆ 
}
«« 	
public
   
override
   
System
   
.
   
IO
   !
.
  ! "
Stream
  " (
Open
  ) -
(
  - .
)
  . /
{
ÀÀ 	
return
ÃÃ 
res
ÃÃ 
.
ÃÃ 
Asm
ÃÃ 
.
ÃÃ '
GetManifestResourceStream
ÃÃ 4
(
ÃÃ4 5
res
ÃÃ5 8
.
ÃÃ8 9
ResourceName
ÃÃ9 E
)
ÃÃE F
;
ÃÃF G
}
ŒŒ 	
}
œœ 
class
–– 	
ResourceAssembly
––
 
{
—— 
public
““ 
Assembly
““ 
Assembly
““  
{
““! "
get
““# &
;
““& '
set
““( +
;
““+ ,
}
““- .
public
”” "
ResorcePathAttribute
”” #
	Attribute
””$ -
{
””. /
get
””0 3
;
””3 4
set
””5 8
;
””8 9
}
””: ;
}
‘‘ 
}÷÷ ú
ïD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Web\PathProviders\IAssemblyResourceProvider.cs
	namespace 	
Infoline
 
. 
Web 
. 
PathProviders $
{ 
public 

	interface %
IAssemblyResourceProvider .
:/ 0
IService1 9
{ 
Type 
GetType 
( 
string 
url 
,  
string! '
postfix( /
)/ 0
;0 1
string 
GetPath 
( 
Type 
type  
,  !
string" (
postfix) 0
)0 1
;1 2
string 
GetPath 
( 
Assembly 
asm  #
)# $
;$ %
} 
} …
êD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Web\PathProviders\ResorcePathAttribute.cs
	namespace 	
Infoline
 
. 
Web 
. 
PathProviders $
{ 
[ 
AttributeUsage 
( 
AttributeTargets $
.$ %
Assembly% -
,- .
	Inherited/ 8
=9 :
false; @
,@ A
AllowMultipleB O
=P Q
falseR W
)W X
]X Y
public 

sealed 
class  
ResorcePathAttribute ,
:- .
	Attribute/ 8
{ 
readonly 
string 
path 
; 
public  
ResorcePathAttribute #
(# $
string$ *
path+ /
,/ 0
string1 7
rootpath8 @
=A B
$strC H
)H I
{ 	
this 
. 
path 
= 
path 
; 
RootPath 
= 
rootpath 
;  
} 	
public!! 
string!! 
Path!! 
{"" 	
get## 
{## 
return## 
path## 
;## 
}##  
}$$ 	
public%% 
string%% 
RootPath%% 
{&& 	
get'' 
;'' 
private(( 
set(( 
;(( 
})) 	
}++ 
}// ‡â
|D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Web\SecurityModule.cs
	namespace 	
Infoline
 
. 
Web 
{		 
public

 

class

 (
SecurityAuthenticationModule

 -
:

. /
IHttpModule

0 ;
{ 
public (
SecurityAuthenticationModule +
(+ ,
), -
{ 	
} 	
HttpApplication 
_context  
;  !
static 
public 
SecurityWebConfig '
Config( .
{/ 0
get1 4
;4 5
private6 =
set> A
;A B
}C D
string 
	LoginPage 
{ 	
get 
{ 
string 
lp 
= 
Config "
." #
	LoginPage# ,
;, -
return 
ApplicationPath &
+' (
() *
lp* ,
=- .
!/ 0
lp0 2
.2 3

StartsWith3 =
(= >
$str> A
)A B
?C D
$strE H
+I J
lpK M
:N O
lpP R
)R S
;S T
} 
}   	
string!! 
ApplicationPath!! 
{"" 	
get## 
{$$ 
string%% 
s%% 
=%% 
_context%% #
.%%# $
Request%%$ +
.%%+ ,
ApplicationPath%%, ;
;%%; <
return&& 
s&& 
==&& 
$str&& 
?&&  !
$str&&" $
:&&% &
s&&' (
;&&( )
}'' 
}(( 	
string** 

CookieName** 
{++ 	
get,, 
{-- 
return.. 
Config.. 
... 

CookieName.. (
;..( )
}// 
}00 	
string11 

PublicPath11 
{22 	
get33 
{44 
return55 
ApplicationPath55 &
+55' (
$str55) 3
;553 4
}66 
}77 	
TimeSpan:: 
Time:: 
{;; 	
get<< 
{== 
var>> 
timer>> 
=>> 
_context>> $
.>>$ %
Context>>% ,
.>>, -
Items>>- 2
[>>2 3
$str>>3 :
]>>: ;
as>>< >
System>>? E
.>>E F
Diagnostics>>F Q
.>>Q R
	Stopwatch>>R [
;>>[ \
if?? 
(?? 
timer?? 
==?? 
null?? !
)??! "
{@@ 
_contextAA 
.AA 
ContextAA $
.AA$ %
ItemsAA% *
[AA* +
$strAA+ 2
]AA2 3
=AA4 5
timerAA6 ;
=AA< =
newAA> A
SystemAAB H
.AAH I
DiagnosticsAAI T
.AAT U
	StopwatchAAU ^
(AA^ _
)AA_ `
;AA` a
timerBB 
.BB 
StartBB 
(BB  
)BB  !
;BB! "
}CC 
returnDD 
timerDD 
.DD 
ElapsedDD $
;DD$ %
}FF 
}GG 	
staticII (
SecurityAuthenticationModuleII +
(II+ ,
)II, -
{JJ 	
ConfigKK 
=KK 
SecurityWebConfigKK &
.KK& '
	GetConfigKK' 0
;KK0 1
ApplicationLL 
.LL 
CurrentLL 
.LL  
SecurityServiceLL  /
.LL/ 0

TicketLifeLL0 :
=LL; <
ConfigLL= C
.LLC D

TicketLifeLLD N
;LLN O
ApplicationMM 
.MM 
CurrentMM 
.MM  
ContextProviderMM  /
=MM0 1
newMM2 5
AspContextProviderMM6 H
(MMH I
)MMI J
;MMJ K
}NN 	
publicPP 
voidPP 
InitPP 
(PP 
HttpApplicationPP (
contextPP) 0
)PP0 1
{QQ 	
_contextRR 
=RR 
contextRR 
;RR 
_contextSS 
.SS 
AuthorizeRequestSS %
+=SS& (
newSS) ,
EventHandlerSS- 9
(SS9 :'
context_AuthenticateRequestSS: U
)SSU V
;SSV W
_contextTT 
.TT 
BeginRequestTT !
+=TT" $
newTT% (
EventHandlerTT) 5
(TT5 6!
_context_BeginRequestTT6 K
)TTK L
;TTL M
_contextUU 
.UU 

EndRequestUU 
+=UU  "
newUU# &
EventHandlerUU' 3
(UU3 4
_context_EndRequestUU4 G
)UUG H
;UUH I
_contextVV 
.VV !
PreSendRequestHeadersVV *
+=VV+ -
newVV. 1
EventHandlerVV2 >
(VV> ?*
_context_PreSendRequestHeadersVV? ]
)VV] ^
;VV^ _
_contextWW 
.WW 
ErrorWW 
+=WW 
newWW !
EventHandlerWW" .
(WW. /
_context_ErrorWW/ =
)WW= >
;WW> ?
}YY 	
void[[ 
_context_Error[[ 
([[ 
object[[ "
sender[[# )
,[[) *
	EventArgs[[+ 4
e[[5 6
)[[6 7
{\\ 	
var]] 
ex]] 
=]] 
_context]] 
.]] 
Server]] $
.]]$ %
GetLastError]]% 1
(]]1 2
)]]2 3
;]]3 4
if^^ 
(^^ 
ex^^ 
!=^^ 
null^^ 
&&^^ 
ex^^  
.^^  !
InnerException^^! /
!=^^0 2
null^^3 7
)^^7 8
{__ 
ApplicationLog`` 
.`` 
LogError`` '
(``' (
ex``( *
.``* +
InnerException``+ 9
)``9 :
;``: ;
}aa 
}bb 	
publicdd 
voiddd 
Disposedd 
(dd 
)dd 
{ee 	
ifff 
(ff 
_contextff 
!=ff 
nullff  
)ff  !
{gg 
tryhh 
{ii 
_contextjj 
.jj 
AuthorizeRequestjj -
-=jj. 0
newjj1 4
EventHandlerjj5 A
(jjA B'
context_AuthenticateRequestjjB ]
)jj] ^
;jj^ _
}kk 
catchll 
{mm 
}oo 
}pp 
}qq 	
boolss 
IsPublicPathss 
(ss 
stringss  
pathss! %
)ss% &
{tt 	
returnuu 
pathuu 
.uu 
ToLoweruu 
(uu  
)uu  !
.uu! "

StartsWithuu" ,
(uu, -

PublicPathuu- 7
.uu7 8
ToLoweruu8 ?
(uu? @
)uu@ A
)uuA B
||uuC E
pathuuF J
.uuJ K
ToLoweruuK R
(uuR S
)uuS T
==uuU W
	LoginPageuuX a
.uua b
ToLoweruub i
(uui j
)uuj k
;uuk l
}vv 	
privatexx 
voidxx '
context_AuthenticateRequestxx 0
(xx0 1
objectxx1 7
senderxx8 >
,xx> ?
	EventArgsxx@ I
exxJ K
)xxK L
{yy 	
AuthenticateRequestzz 
(zz  
)zz  !
;zz! "
}{{ 	
public}} 
class}} 
AToken}} 
{~~ 	
public 
Guid 
? 
TicketId !
{" #
get$ '
;' (
set) ,
;, -
}. /
public
ÄÄ 
Guid
ÄÄ 
?
ÄÄ 
DeviceId
ÄÄ !
{
ÄÄ" #
get
ÄÄ$ '
;
ÄÄ' (
set
ÄÄ) ,
;
ÄÄ, -
}
ÄÄ. /
}
ÅÅ 	
void
ÉÉ !
AuthenticateRequest
ÉÉ  
(
ÉÉ  !
)
ÉÉ! "
{
ÑÑ 	
Guid
ÖÖ 
?
ÖÖ 
ticketId
ÖÖ 
=
ÖÖ 
null
ÖÖ !
;
ÖÖ! "
if
ÜÜ 
(
ÜÜ 
_context
ÜÜ 
.
ÜÜ 
Request
ÜÜ  
.
ÜÜ  !
Cookies
ÜÜ! (
[
ÜÜ( )

CookieName
ÜÜ) 3
]
ÜÜ3 4
!=
ÜÜ5 7
null
ÜÜ8 <
)
ÜÜ< =
{
áá 
ticketId
àà 
=
àà 
Guid
àà 
.
àà  
Parse
àà  %
(
àà% &
_context
àà& .
.
àà. /
Request
àà/ 6
.
àà6 7
Cookies
àà7 >
[
àà> ?

CookieName
àà? I
]
ààI J
.
ààJ K
Value
ààK P
)
ààP Q
;
ààQ R
}
ää 
else
ãã 
if
ãã 
(
ãã 
_context
ãã 
.
ãã 
Request
ãã %
.
ãã% &
Headers
ãã& -
[
ãã- .
$str
ãã. 6
]
ãã6 7
!=
ãã8 :
null
ãã; ?
)
ãã? @
{
åå 
try
çç 
{
éé 
var
èè 
tokenEncryptd
èè %
=
èè& '
_context
èè( 0
.
èè0 1
Request
èè1 8
.
èè8 9
Headers
èè9 @
[
èè@ A
$str
èèA I
]
èèI J
;
èèJ K
var
êê 
tokenDecrypted
êê &
=
êê' (
new
êê) , 
CryptographyHelper
êê- ?
(
êê? @
)
êê@ A
.
êêA B
Decrypt
êêB I
(
êêI J
tokenEncryptd
êêJ W
)
êêW X
;
êêX Y
var
ëë 
token
ëë 
=
ëë 
Json
ëë  $
.
ëë$ %
Deserialize
ëë% 0
<
ëë0 1
AToken
ëë1 7
>
ëë7 8
(
ëë8 9
tokenDecrypted
ëë9 G
)
ëëG H
;
ëëH I
ticketId
íí 
=
íí 
token
íí $
.
íí$ %
TicketId
íí% -
;
íí- .
}
ìì 
catch
îî 
{
ïï 
var
ññ 
token
ññ 
=
ññ 
Json
ññ  $
.
ññ$ %
Deserialize
ññ% 0
<
ññ0 1
AToken
ññ1 7
>
ññ7 8
(
ññ8 9
_context
ññ9 A
.
ññA B
Request
ññB I
.
ññI J
Headers
ññJ Q
[
ññQ R
$str
ññR Z
]
ññZ [
)
ññ[ \
;
ññ\ ]
ticketId
óó 
=
óó 
token
óó $
.
óó$ %
TicketId
óó% -
;
óó- .
}
òò 
}
ôô 
if
õõ 
(
õõ 
ticketId
õõ 
.
õõ 
HasValue
õõ !
)
õõ! "
{
úú 
var
ùù 
cc
ùù 
=
ùù 
Application
ùù $
.
ùù$ %
Current
ùù% ,
.
ùù, -
SecurityService
ùù- <
.
ùù< =

LoadTicket
ùù= G
(
ùùG H
ticketId
ùùH P
.
ùùP Q
Value
ùùQ V
,
ùùV W
_context
ùùX `
.
ùù` a
Request
ùùa h
.
ùùh i
Path
ùùi m
)
ùùm n
;
ùùn o
if
ûû 
(
ûû 
cc
ûû 
!=
ûû 
null
ûû 
)
ûû 
{
üü 
cc
†† 
.
†† 
Activate
†† 
(
††  
)
††  !
;
††! "
_context
°° 
.
°° 
Context
°° $
.
°°$ %
User
°°% )
=
°°* +
System
°°, 2
.
°°2 3
	Threading
°°3 <
.
°°< =
Thread
°°= C
.
°°C D
CurrentPrincipal
°°D T
;
°°T U
}
¢¢ 
}
££ 
string
•• 
path
•• 
=
•• 
_context
•• "
.
••" #
Request
••# *
.
••* +
Path
••+ /
;
••/ 0
if
¶¶ 
(
¶¶ 
_context
¶¶ 
.
¶¶ 
Request
¶¶  
.
¶¶  !
ApplicationPath
¶¶! 0
!=
¶¶1 3
$str
¶¶4 7
)
¶¶7 8
{
ßß 
path
®® 
=
®® 
path
®® 
.
®® 
Remove
®® "
(
®®" #
$num
®®# $
,
®®$ %
_context
®®& .
.
®®. /
Request
®®/ 6
.
®®6 7
ApplicationPath
®®7 F
.
®®F G
Length
®®G M
)
®®M N
;
®®N O
}
©© 
_context
´´ 
.
´´ 
Context
´´ 
.
´´ 
SkipAuthorization
´´ .
=
´´/ 0
true
´´1 5
;
´´5 6
if
¨¨ 
(
¨¨ 
Config
¨¨ 
.
¨¨ 
IsSecurePath
¨¨ #
(
¨¨# $
path
¨¨$ (
)
¨¨( )
&&
¨¨* ,
!
¨¨- .
CallContext
¨¨. 9
.
¨¨9 :
IsReady
¨¨: A
)
¨¨A B
{
≠≠ 
_context
ÆÆ 
.
ÆÆ 
Response
ÆÆ !
.
ÆÆ! "

StatusCode
ÆÆ" ,
=
ÆÆ- .
$num
ÆÆ/ 2
;
ÆÆ2 3
_context
ØØ 
.
ØØ 
Response
ØØ !
.
ØØ! "
End
ØØ" %
(
ØØ% &
)
ØØ& '
;
ØØ' (
}
∞∞ 
}
±± 	
void
≥≥ #
_context_BeginRequest
≥≥ "
(
≥≥" #
object
≥≥# )
sender
≥≥* 0
,
≥≥0 1
	EventArgs
≥≥2 ;
e
≥≥< =
)
≥≥= >
{
¥¥ 	
}
∑∑ 	
void
ππ 
	AddCookie
ππ 
(
ππ 
string
ππ 
ticket
ππ $
)
ππ$ %
{
∫∫ 	
try
ªª 
{
ºº 
var
ΩΩ 
cc
ΩΩ 
=
ΩΩ 
_context
ΩΩ !
.
ΩΩ! "
Request
ΩΩ" )
.
ΩΩ) *
Cookies
ΩΩ* 1
[
ΩΩ1 2

CookieName
ΩΩ2 <
]
ΩΩ< =
;
ΩΩ= >
if
ææ 
(
ææ 
(
ææ 
cc
ææ 
==
ææ 
null
ææ 
||
ææ  "
cc
ææ# %
.
ææ% &
Value
ææ& +
!=
ææ, .
ticket
ææ/ 5
)
ææ5 6
&&
ææ7 9
!
ææ: ;
_context
ææ; C
.
ææC D
Response
ææD L
.
ææL M
Cookies
ææM T
.
ææT U
AllKeys
ææU \
.
ææ\ ]
Contains
ææ] e
(
ææe f

CookieName
ææf p
)
ææp q
)
ææq r
{
øø 

HttpCookie
¿¿ 
c
¿¿  
=
¿¿! "
new
¿¿# &

HttpCookie
¿¿' 1
(
¿¿1 2

CookieName
¿¿2 <
,
¿¿< =
ticket
¿¿> D
)
¿¿D E
;
¿¿E F
c
¡¡ 
.
¡¡ 
Expires
¡¡ 
=
¡¡ 
DateTime
¡¡  (
.
¡¡( )
Now
¡¡) ,
.
¡¡, -
	AddMonths
¡¡- 6
(
¡¡6 7
$num
¡¡7 9
)
¡¡9 :
;
¡¡: ;
_context
¬¬ 
.
¬¬ 
Response
¬¬ %
.
¬¬% &
Cookies
¬¬& -
.
¬¬- .
Add
¬¬. 1
(
¬¬1 2
c
¬¬2 3
)
¬¬3 4
;
¬¬4 5
}
√√ 
}
ƒƒ 
catch
≈≈ 
(
≈≈ 
	Exception
≈≈ 
ex
≈≈ 
)
≈≈  
{
∆∆ 
ApplicationLog
«« 
.
«« 

LogMessage
«« )
(
««) *
LogLevel
««* 2
.
««2 3
Error
««3 8
,
««8 9
string
««: @
.
««@ A
Format
««A G
(
««G H
$str
««H ]
,
««] ^
_context
««_ g
.
««g h
Request
««h o
.
««o p
Url
««p s
,
««s t
ex
««u w
)
««w x
)
««x y
;
««y z
}
…… 
}
   	
void
ÃÃ ,
_context_PreSendRequestHeaders
ÃÃ +
(
ÃÃ+ ,
object
ÃÃ, 2
sender
ÃÃ3 9
,
ÃÃ9 :
	EventArgs
ÃÃ; D
e
ÃÃE F
)
ÃÃF G
{
ÕÕ 	
if
ŒŒ 
(
ŒŒ 
CallContext
ŒŒ 
.
ŒŒ 
IsReady
ŒŒ #
&&
ŒŒ$ &
CallContext
ŒŒ' 2
.
ŒŒ2 3
Current
ŒŒ3 :
!=
ŒŒ; =
null
ŒŒ> B
)
ŒŒB C
	AddCookie
œœ 
(
œœ 
CallContext
œœ %
.
œœ% &
Current
œœ& -
.
œœ- .
TicketId
œœ. 6
.
œœ6 7
ToString
œœ7 ?
(
œœ? @
)
œœ@ A
)
œœA B
;
œœB C
}
–– 	
private
““ 
void
““ !
_context_EndRequest
““ (
(
““( )
object
““) /
sender
““0 6
,
““6 7
	EventArgs
““8 A
e
““B C
)
““C D
{
”” 	
CallContext
‘‘ 
cc
‘‘ 
=
‘‘ 
CallContext
‘‘ (
.
‘‘( )
IsReady
‘‘) 0
?
‘‘1 2
CallContext
‘‘3 >
.
‘‘> ?
Current
‘‘? F
:
‘‘G H
null
‘‘I M
;
‘‘M N
if
’’ 
(
’’ 
cc
’’ 
!=
’’ 
null
’’ 
)
’’ 
{
÷÷ 
	AddCookie
◊◊ 
(
◊◊ 
cc
◊◊ 
.
◊◊ 
TicketId
◊◊ %
.
◊◊% &
ToString
◊◊& .
(
◊◊. /
)
◊◊/ 0
)
◊◊0 1
;
◊◊1 2
cc
ÿÿ 
.
ÿÿ 

Deactivate
ÿÿ 
(
ÿÿ 
)
ÿÿ 
;
ÿÿ  
}
ŸŸ 
}
⁄⁄ 	
}
€€ 
}‹‹ ‹`
D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Web\SecurityWebConfig.cs
	namespace 	
Infoline
 
. 
Web 
{ 
public		 

class		 
SecurityWebConfig		 "
:		# $(
IConfigurationSectionHandler		% A
{

 
public 
SecurityWebConfig  
(  !
)! "
{ 	
} 	
static 
SecurityWebConfig  
_config! (
=) *
null+ /
;/ 0
public 
static 
SecurityWebConfig '
	GetConfig( 1
{ 	
get 
{ 
if 
( 
_config 
== 
null #
)# $
_config 
= 
System $
.$ %
Configuration% 2
.2 3 
ConfigurationManager3 G
.G H

GetSectionH R
(R S
$strS `
)` a
asb d
SecurityWebConfige v
;v w
if 
( 
_config 
== 
null #
)# $
throw% *
new+ .
	Exception/ 8
(8 9
$str9 e
)e f
;f g
return 
_config 
; 
} 
} 	
NameValueCollection 
	_settings %
=& '
new( +
NameValueCollection, ?
(? @
)@ A
;A B
public 
NameValueCollection "
Settings# +
{ 	
get 
{   
return!! 
	_settings!!  
;!!  !
}"" 
}## 	
const$$ 
string$$ 
LoginPageKey$$ !
=$$" #
$str$$$ /
;$$/ 0
const%% 
string%% 
CookieNameKey%% "
=%%# $
$str%%% 1
;%%1 2
const&& 
string&& 
PopupPageURLKey&& $
=&&% &
$str&&' 5
;&&5 6
private'' 
const'' 
string'' 
TicketLifeKey'' *
=''+ ,
$str''- 9
;''9 :
public(( 
object(( 
Create(( 
((( 
object(( #
parent(($ *
,((* +
object((, 2
configContext((3 @
,((@ A
XmlNode((B I
section((J Q
)((Q R
{)) 	

XmlElement** 
element** 
=**  
section**! (
as**) +

XmlElement**, 6
;**6 7
foreach,, 
(,, 
XmlAttribute,, !
att,," %
in,,& (
section,,) 0
.,,0 1

Attributes,,1 ;
),,; <
{-- 
	_settings.. 
[.. 
att.. 
... 
Name.. "
].." #
=..$ %
att..& )
...) *
Value..* /
;../ 0
}// 
if00 
(00 
element00 
.00 
HasAttribute00 $
(00$ %
LoginPageKey00% 1
)001 2
)002 3
_loginaPage004 ?
=00@ A
element00B I
.00I J
GetAttribute00J V
(00V W
LoginPageKey00W c
)00c d
;00d e
if11 
(11 
element11 
.11 
HasAttribute11 $
(11$ %
PopupPageURLKey11% 4
)114 5
)115 6
_popURL117 >
=11? @
element11A H
.11H I
GetAttribute11I U
(11U V
PopupPageURLKey11V e
)11e f
;11f g
if22 
(22 
element22 
.22 
HasAttribute22 $
(22$ %
CookieNameKey22% 2
)222 3
)223 4
_cookieName225 @
=22A B
element22C J
.22J K
GetAttribute22K W
(22W X
CookieNameKey22X e
)22e f
;22f g
if33 
(33 
element33 
.33 
HasAttribute33 $
(33$ %
TicketLifeKey33% 2
)332 3
)333 4
_ticketLife335 @
=33A B
Convert33C J
.33J K
ToInt3233K R
(33R S
element33S Z
.33Z [
GetAttribute33[ g
(33g h
TicketLifeKey33h u
)33u v
)33v w
;33w x
_publicpaths44 
.44 
Add44 
(44 
$str44 /
)44/ 0
;440 1
foreach55 
(55 

XmlElement55 
pathelement55  +
in55, .
section55/ 6
.556 7

ChildNodes557 A
)55A B
{66 
if77 
(77 
pathelement77 
.77  
Name77  $
==77% '
$str77( 4
)774 5
{88 
if99 
(99 
pathelement99 #
.99# $
	InnerText99$ -
.99- .
Length99. 4
>995 6
$num997 8
)998 9
_securePaths:: $
.::$ %
Add::% (
(::( )
pathelement::) 4
.::4 5
	InnerText::5 >
)::> ?
;::? @
};; 
else<< 
if<< 
(<< 
pathelement<< $
.<<$ %
Name<<% )
==<<* ,
$str<<- 9
)<<9 :
{== 
if>> 
(>> 
pathelement>> #
.>># $
	InnerText>>$ -
.>>- .
Length>>. 4
>>>5 6
$num>>7 8
)>>8 9
_publicpaths?? $
.??$ %
Add??% (
(??( )
pathelement??) 4
.??4 5
	InnerText??5 >
)??> ?
;??? @
}@@ 
}AA 
returnBB 
thisBB 
;BB 
}CC 	
internalFF 
SystemFF 
.FF 
CollectionsFF #
.FF# $
GenericFF$ +
.FF+ ,
ListFF, 0
<FF0 1
stringFF1 7
>FF7 8
_securePathsFF9 E
=FFF G
newFFH K
SystemFFL R
.FFR S
CollectionsFFS ^
.FF^ _
GenericFF_ f
.FFf g
ListFFg k
<FFk l
stringFFl r
>FFr s
(FFs t
)FFt u
;FFu v
internalGG 
SystemGG 
.GG 
CollectionsGG #
.GG# $
GenericGG$ +
.GG+ ,
ListGG, 0
<GG0 1
stringGG1 7
>GG7 8
_publicpathsGG9 E
=GGF G
newGGH K
SystemGGL R
.GGR S
CollectionsGGS ^
.GG^ _
GenericGG_ f
.GGf g
ListGGg k
<GGk l
stringGGl r
>GGr s
(GGs t
)GGt u
;GGu v
publicHH 
boolHH 
IsSecurePathHH  
(HH  !
stringHH! '
pathHH( ,
)HH, -
{II 	
intJJ 
ppJJ 
=JJ 
$numJJ 
,JJ 
spJJ 
=JJ 
$numJJ 
;JJ 
foreachKK 
(KK 
stringKK 
pKK 
inKK  
_publicpathsKK! -
)KK- .
{LL 
ifNN 
(NN 
pNN 
!=NN 
nullNN 
&&NN  
pathNN! %
.NN% &

StartsWithNN& 0
(NN0 1
pNN1 2
,NN2 3
StringComparisonNN4 D
.NND E&
InvariantCultureIgnoreCaseNNE _
)NN_ `
&&NNa c
ppNNd f
<NNg h
pNNi j
.NNj k
LengthNNk q
)NNq r
ppOO 
=OO 
pOO 
.OO 
LengthOO !
;OO! "
}PP 
foreachRR 
(RR 
stringRR 
pRR 
inRR  
_securePathsRR! -
)RR- .
{SS 
ifTT 
(TT 
pTT 
!=TT 
nullTT 
&&TT  
pathTT! %
.TT% &

StartsWithTT& 0
(TT0 1
pTT1 2
,TT2 3
StringComparisonTT4 D
.TTD E&
InvariantCultureIgnoreCaseTTE _
)TT_ `
&&TTa c
spTTd f
<TTg h
pTTi j
.TTj k
LengthTTk q
)TTq r
spUU 
=UU 
pUU 
.UU 
LengthUU !
;UU! "
}VV 
returnWW 
(WW 
spWW 
>WW 
$numWW 
&&WW 
ppWW  
==WW! #
$numWW$ %
)WW% &
||WW' )
(WW* +
ppWW+ -
>WW. /
$numWW0 1
&&WW2 4
spWW5 7
>WW8 9
ppWW: <
)WW< =
;WW= >
}XX 	
publicYY 
voidYY 
AddPublicPathYY !
(YY! "
stringYY" (
pathYY) -
)YY- .
{ZZ 	
if[[ 
([[ 
![[ 
path[[ 
.[[ 

StartsWith[[  
([[  !
$str[[! $
)[[$ %
)[[% &
path\\ 
=\\ 
$str\\ 
+\\ 
path\\ !
;\\! "
if]] 
(]] 
!]] 
path]] 
.]] 
EndsWith]] 
(]] 
$str]] "
)]]" #
)]]# $
path^^ 
=^^ 
path^^ 
+^^ 
$str^^ !
;^^! "
if__ 
(__ 
!__ 
_publicpaths__ 
.__ 
Contains__ &
(__& '
path__' +
)__+ ,
)__, -
_publicpaths`` 
.`` 
Add``  
(``  !
path``! %
)``% &
;``& '
}aa 	
publicbb 
voidbb 
RemovePublicPathbb $
(bb$ %
stringbb% +
pathbb, 0
)bb0 1
{cc 	
ifdd 
(dd 
!dd 
pathdd 
.dd 

StartsWithdd  
(dd  !
$strdd! $
)dd$ %
)dd% &
pathee 
=ee 
$stree 
+ee 
pathee !
;ee! "
ifff 
(ff 
!ff 
pathff 
.ff 
EndsWithff 
(ff 
$strff "
)ff" #
)ff# $
pathgg 
=gg 
pathgg 
+gg 
$strgg !
;gg! "
ifhh 
(hh 
!hh 
_publicpathshh 
.hh 
Containshh &
(hh& '
pathhh' +
)hh+ ,
)hh, -
_publicpathsii 
.ii 
Removeii #
(ii# $
pathii$ (
)ii( )
;ii) *
}jj 	
publicll 
Listll 
<ll 
stringll 
>ll 
GetPublicPathll )
(ll) *
)ll* +
{mm 	
returnnn 
_publicpathsnn 
;nn  
}oo 	
stringqq 
_popURLqq 
=qq 
$strqq #
;qq# $
publicrr 
stringrr 
PopupURLrr 
{ss 	
gettt 
{uu 
returnvv 
_popURLvv 
;vv 
}ww 
}xx 	
stringyy 
_cookieNameyy 
=yy 
$stryy .
;yy. /
publiczz 
stringzz 

CookieNamezz  
{{{ 	
get|| 
{}} 
return~~ 
_cookieName~~ "
;~~" #
} 
}
ÄÄ 	
string
ÅÅ 
_loginaPage
ÅÅ 
=
ÅÅ 
$str
ÅÅ )
;
ÅÅ) *
public
ÇÇ 
string
ÇÇ 
	LoginPage
ÇÇ 
{
ÉÉ 	
get
ÑÑ 
{
ÖÖ 
return
ÜÜ 
_loginaPage
ÜÜ "
;
ÜÜ" #
}
áá 
}
àà 	
private
ää 
int
ää 
_ticketLife
ää 
=
ää  !
$num
ää" $
;
ää$ %
public
ãã 
int
ãã 

TicketLife
ãã 
{
åå 	
get
çç 
{
éé 
return
èè 
_ticketLife
èè "
;
èè" #
}
êê 
}
ëë 	
}
ìì 
}îî ™Â
ÇD:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\ServiceModel\ServiceHost.cs
	namespace 	
Infoline
 
. 
ServiceModel 
{ 
[ 
Export 
( 
typeof 
( 
IService 
) 
) 
] 
[ 
ExportMetadata 
( 
$str !
,! "
typeof# )
() *
IServiceHost* 6
)6 7
)7 8
]8 9
class 	
ServiceHostService
 
: 
IServiceHost +
{ 
public 
ServiceHostService !
(! "
)" #
{ 	
Application 
. 
ApplicationStarted *
+=+ -
new. 1
Action2 8
<8 9
Application9 D
>D E
(E F*
Application_ApplicationStartedF d
)d e
;e f
} 	
void *
Application_ApplicationStarted +
(+ ,
Application, 7
app8 ;
); <
{ 	
foreach 
( 
var 
servicetype $
in% '
app( +
.+ ,
Services, 4
)4 5
{ 
var 
service 
= 
app !
.! "

GetService" ,
(, -
servicetype- 8
)8 9
;9 :
if   
(   
service   
.   
GetType   $
(  $ %
)  % &
.  & '
GetCustomAttributes  ' :
(  : ;
typeof  ; A
(  A B$
RegisterServiceAttribute  B Z
)  Z [
,  [ \
true  ] a
)  a b
!=  c e
null  f j
)  j k
{!! 
var"" 
att"" 
="" 
servicetype"" )
."") *
GetCustomAttributes""* =
(""= >
typeof""> D
(""D E 
ServicePathAttribute""E Y
)""Y Z
,""Z [
true""\ `
)""` a
.## 
FirstOrDefault## '
(##' (
)##( )
as##* , 
ServicePathAttribute##- A
;##A B
if$$ 
($$ 
att$$ 
!=$$ 
null$$ #
)$$# $
{%% 
this&& 
.&& 
RegisterService&& ,
(&&, -
servicetype&&- 8
,&&8 9
service&&: A
,&&A B
att&&C F
.&&F G
Path&&G K
)&&K L
;&&L M
}'' 
}(( 
})) 
}** 	
public++ 
void++ 
RegisterService++ #
(++# $
Type++$ (
servicetype++) 4
,++4 5
object++6 <
service++= D
,++D E
string++F L
relativeurl++M X
)++X Y
{,, 	
Web-- 
.-- (
SecurityAuthenticationModule-- ,
.--, -
Config--- 3
.--3 4
AddPublicPath--4 A
(--A B
relativeurl--B M
)--M N
;--N O
System00 
.00 
Web00 
.00 
Routing00 
.00 

RouteTable00 )
.00) *
Routes00* 0
.000 1
Add001 4
(004 5
new11 
ServiceRoute11  
(11  !
relativeurl11! ,
,11, -
new11. 1$
CustomServiceHostFactory112 J
(11J K
service11K R
)11R S
,11S T
servicetype11U `
)11` a
)11a b
;11b c
}22 	
public44 
void44 
UnregisterService44 %
(44% &
string44& ,
relativeurl44- 8
)448 9
{55 	
var66 
rt66 
=66 
System66 
.66 
Web66 
.66  
Routing66  '
.66' (

RouteTable66( 2
.662 3
Routes663 9
.669 :
OfType66: @
<66@ A
ServiceRoute66A M
>66M N
(66N O
)66O P
.66P Q
FirstOrDefault66Q _
(66_ `
a66` a
=>66b d
a66e f
.66f g
Url66g j
==66k m
relativeurl66n y
)66y z
;66z {
if77 
(77 
rt77 
!=77 
null77 
)77 
{88 
System99 
.99 
Web99 
.99 
Routing99 "
.99" #

RouteTable99# -
.99- .
Routes99. 4
.994 5
Remove995 ;
(99; <
rt99< >
)99> ?
;99? @
Web:: 
.:: (
SecurityAuthenticationModule:: 0
.::0 1
Config::1 7
.::7 8
RemovePublicPath::8 H
(::H I
relativeurl::I T
)::T U
;::U V
};; 
}<< 	
public>> 
string>> 
BaseUrl>> 
{?? 	
get@@ 
{@@ 
throw@@ 
new@@ #
NotImplementedException@@ 3
(@@3 4
)@@4 5
;@@5 6
}@@7 8
}AA 	
classCC $
CustomServiceHostFactoryCC &
:CC' (!
WebServiceHostFactoryCC) >
{DD 	
objectEE 
	singletonEE 
;EE 
publicFF $
CustomServiceHostFactoryFF +
(FF+ ,
objectFF, 2
	singletonFF3 <
)FF< =
{GG 
thisHH 
.HH 
	singletonHH 
=HH  
	singletonHH! *
;HH* +
}II 
	protectedJJ 
overrideJJ 
SystemJJ %
.JJ% &
ServiceModelJJ& 2
.JJ2 3
ServiceHostJJ3 >
CreateServiceHostJJ? P
(JJP Q
TypeJJQ U
serviceTypeJJV a
,JJa b
UriJJc f
[JJf g
]JJg h
baseAddressesJJi v
)JJv w
{KK 
varLL 
hostLL 
=LL 
newLL 
ServiceHostLL *
(LL* +
thisLL+ /
.LL/ 0
	singletonLL0 9
,LL9 :
baseAddressesLL; H
)LLH I
;LLI J
varNN 
sbNN 
=NN 
hostNN 
.NN 
DescriptionNN )
.NN) *
	BehaviorsNN* 3
.NN3 4
OfTypeNN4 :
<NN: ;$
ServiceBehaviorAttributeNN; S
>NNS T
(NNT U
)NNU V
.NNV W
FirstOrDefaultNNW e
(NNe f
)NNf g
;NNg h
sbOO 
.OO 
InstanceContextModeOO &
=OO' (
InstanceContextModeOO) <
.OO< =
SingleOO= C
;OOC D
sbPP 
.PP *
IncludeExceptionDetailInFaultsPP 1
=PP2 3
truePP4 8
;PP8 9
varRR 
acRR 
=RR 
hostRR 
.RR 
DescriptionRR )
.RR) *
	BehaviorsRR* 3
.RR3 4
OfTypeRR4 :
<RR: ;4
(AspNetCompatibilityRequirementsAttributeRR; c
>RRc d
(RRd e
)RRe f
.RRf g
FirstOrDefaultRRg u
(RRu v
)RRv w
;RRw x
ifRRy {
(RR| }
acRR} 
==
RRÄ Ç
null
RRÉ á
)
RRá à
hostSS 
.SS 
DescriptionSS $
.SS$ %
	BehaviorsSS% .
.SS. /
AddSS/ 2
(SS2 3
acTT 
=TT  
newTT! $4
(AspNetCompatibilityRequirementsAttributeTT% M
{TTN O
RequirementsModeTTP `
=TTa b0
#AspNetCompatibilityRequirementsMode	TTc Ü
.
TTÜ á
Allowed
TTá é
}
TTè ê
)
TTê ë
;
TTë í
acUU 
.UU 
RequirementsModeUU #
=UU$ %/
#AspNetCompatibilityRequirementsModeUU& I
.UUI J
AllowedUUJ Q
;UUQ R
varVV 
cdVV 
=VV 
ContractDescriptionVV ,
.VV, -
GetContractVV- 8
(VV8 9
serviceTypeVV9 D
)VVD E
;VVE F
hostWW 
.WW 
AddServiceEndpointWW '
(WW' (
serviceTypeWW( 3
,WW3 4
newWW5 8
JsonWebHttpBindingWW9 K
(WWK L
)WWL M
,WWM N
baseAddressesWWO \
.WW\ ]
FirstOrDefaultWW] k
(WWk l
)WWl m
)WWm n
.XX 
	BehaviorsXX 
.XX 
AddXX "
(XX" #
newXX# &
WebHttpBehaviorXX' 6
{XX7 8)
DefaultOutgoingResponseFormatXX9 V
=XXW X
WebMessageFormatXXY i
.XXi j
JsonXXj n
,XXn o
DefaultBodyStyle	XXp Ä
=
XXÅ Ç!
WebMessageBodyStyle
XXÉ ñ
.
XXñ ó
Wrapped
XXó û
}
XXü †
)
XX† °
;
XX° ¢
foreachYY 
(YY 
varYY 
epYY 
inYY  "
hostYY# '
.YY' (
DescriptionYY( 3
.YY3 4
	EndpointsYY4 =
)YY= >
{ZZ 
ep\\ 
.\\ 
Contract\\ 
.\\  
	Behaviors\\  )
.\\) *
Add\\* -
(\\- .
new\\. 1
CallContextBehavior\\2 E
(\\E F
)\\F G
)\\G H
;\\H I
ep]] 
.]] 
Contract]] 
.]]  
	Behaviors]]  )
.]]) *
Add]]* -
(]]- .
new]]. 1"
JsonSerializerBehavior]]2 H
(]]H I
)]]I J
)]]J K
;]]K L
}^^ 
return__ 
host__ 
;__ 
}aa 
}ee 	
}ff 
classii 	 
DataEndPointBehaviorii
 
:ii  
IEndpointBehaviorii! 2
{jj 
classnn 
DataInvokernn 
:nn 
IOperationInvokernn -
{oo 	
IOperationInvokerpp 
sinkpp "
;pp" #
publicqq 
DataInvokerqq 
(qq 
IOperationInvokerqq 0
sinkqq1 5
)qq5 6
{rr 
thisss 
.ss 
sinkss 
=ss 
sinkss  
;ss  !
}tt 
publicvv 
objectvv 
[vv 
]vv 
AllocateInputsvv *
(vv* +
)vv+ ,
{ww 
returnxx 
newxx 
objectxx !
[xx! "
$numxx" #
]xx# $
;xx$ %
}yy 
public{{ 
object{{ 
Invoke{{  
({{  !
object{{! '
instance{{( 0
,{{0 1
object{{2 8
[{{8 9
]{{9 :
inputs{{; A
,{{A B
out{{C F
object{{G M
[{{M N
]{{N O
outputs{{P W
){{W X
{|| 
return~~ 
sink~~ 
.~~ 
Invoke~~ "
(~~" #
instance~~# +
,~~+ ,
inputs~~- 3
,~~3 4
out~~5 8
outputs~~9 @
)~~@ A
;~~A B
} 
public
ÅÅ 
IAsyncResult
ÅÅ 
InvokeBegin
ÅÅ  +
(
ÅÅ+ ,
object
ÅÅ, 2
instance
ÅÅ3 ;
,
ÅÅ; <
object
ÅÅ= C
[
ÅÅC D
]
ÅÅD E
inputs
ÅÅF L
,
ÅÅL M
AsyncCallback
ÅÅN [
callback
ÅÅ\ d
,
ÅÅd e
object
ÅÅf l
state
ÅÅm r
)
ÅÅr s
{
ÇÇ 
throw
ÉÉ 
new
ÉÉ %
NotImplementedException
ÉÉ 1
(
ÉÉ1 2
)
ÉÉ2 3
;
ÉÉ3 4
}
ÑÑ 
public
ÜÜ 
object
ÜÜ 
	InvokeEnd
ÜÜ #
(
ÜÜ# $
object
ÜÜ$ *
instance
ÜÜ+ 3
,
ÜÜ3 4
out
ÜÜ5 8
object
ÜÜ9 ?
[
ÜÜ? @
]
ÜÜ@ A
outputs
ÜÜB I
,
ÜÜI J
IAsyncResult
ÜÜK W
result
ÜÜX ^
)
ÜÜ^ _
{
áá 
throw
àà 
new
àà %
NotImplementedException
àà 1
(
àà1 2
)
àà2 3
;
àà3 4
}
ââ 
public
ãã 
bool
ãã 
IsSynchronous
ãã %
{
åå 
get
çç 
{
çç 
return
çç 
true
çç !
;
çç! "
}
çç# $
}
éé 
}
ëë 	
public
ìì 
void
ìì "
AddBindingParameters
ìì (
(
ìì( )
ServiceEndpoint
ìì) 8
endpoint
ìì9 A
,
ììA B
System
ììC I
.
ììI J
ServiceModel
ììJ V
.
ììV W
Channels
ììW _
.
ìì_ `(
BindingParameterCollection
ìì` z 
bindingParametersìì{ å
)ììå ç
{
îî 	
}
ïï 	
public
óó 
void
óó !
ApplyClientBehavior
óó '
(
óó' (
ServiceEndpoint
óó( 7
endpoint
óó8 @
,
óó@ A
ClientRuntime
óóB O
clientRuntime
óóP ]
)
óó] ^
{
òò 	
}
öö 	
public
úú 
void
úú #
ApplyDispatchBehavior
úú )
(
úú) *
ServiceEndpoint
úú* 9
endpoint
úú: B
,
úúB C 
EndpointDispatcher
úúD V 
endpointDispatcher
úúW i
)
úúi j
{
ùù 	
var
ûû 
udo
ûû 
=
ûû  
endpointDispatcher
ûû (
.
ûû( )
DispatchRuntime
ûû) 8
.
ûû8 9(
UnhandledDispatchOperation
ûû9 S
;
ûûS T
udo
üü 
.
üü  
DeserializeRequest
üü "
=
üü# $
false
üü% *
;
üü* +
udo
†† 
.
†† 
SerializeReply
†† 
=
††  
false
††! &
;
††& '
udo
°° 
.
°° 
Invoker
°° 
=
°° 
new
°° 
DataInvoker
°° )
(
°°) *
udo
°°* -
.
°°- .
Invoker
°°. 5
)
°°5 6
;
°°6 7
}
¢¢ 	
public
§§ 
void
§§ 
Validate
§§ 
(
§§ 
ServiceEndpoint
§§ ,
endpoint
§§- 5
)
§§5 6
{
•• 	
}
ßß 	
}
™™ 
class
¨¨ 	 
JsonWebHttpBinding
¨¨
 
:
¨¨ 
WebHttpBinding
¨¨ -
{
≠≠ 
public
ÆÆ 
override
ÆÆ &
BindingElementCollection
ÆÆ 0#
CreateBindingElements
ÆÆ1 F
(
ÆÆF G
)
ÆÆG H
{
ØØ 	
var
±± 
ret
±± 
=
±± 
base
±± 
.
±± #
CreateBindingElements
±± 0
(
±±0 1
)
±±1 2
;
±±2 3
ret
≤≤ 
[
≤≤ 
$num
≤≤ 
]
≤≤ 
=
≤≤ 
new
≤≤ /
!JsonMessageEncodingBindingElement
≤≤ :
(
≤≤: ;
)
≤≤; <
;
≤≤< =
return
≥≥ 
ret
≥≥ 
;
≥≥ 
}
¥¥ 	
}
∂∂ 
class
∑∑ 	/
!JsonMessageEncodingBindingElement
∑∑
 +
:
∑∑, -+
MessageEncodingBindingElement
∑∑. K
{
∏∏ 
public
ππ /
!JsonMessageEncodingBindingElement
ππ 0
(
ππ0 1/
!JsonMessageEncodingBindingElement
ππ1 R
clone
ππS X
)
ππX Y
:
ππY Z
base
ππZ ^
(
ππ^ _
clone
ππ_ d
)
ππd e
{
∫∫ 	
}
ºº 	
public
ææ 
override
ææ 
BindingElement
ææ &
Clone
ææ' ,
(
ææ, -
)
ææ- .
{
øø 	
return
¿¿ 
new
¿¿ /
!JsonMessageEncodingBindingElement
¿¿ 8
(
¿¿8 9
this
¿¿9 =
)
¿¿= >
;
¿¿> ?
}
¡¡ 	
public
¬¬ /
!JsonMessageEncodingBindingElement
¬¬ 0
(
¬¬0 1
)
¬¬1 2
{
√√ 	
}
≈≈ 	
public
«« 
override
«« 
MessageVersion
«« &
MessageVersion
««' 5
{
»» 	
get
…… 
{
   
return
ÀÀ 
MessageVersion
ÀÀ %
.
ÀÀ% &
None
ÀÀ& *
;
ÀÀ* +
}
ÃÃ 
set
ÕÕ 
{
ŒŒ 
}
œœ 
}
–– 	
public
—— 
override
—— #
MessageEncoderFactory
—— -)
CreateMessageEncoderFactory
——. I
(
——I J
)
——J K
{
““ 	
return
”” 
new
”” '
JsonMessageEncoderFactory
”” 0
(
””0 1
)
””1 2
;
””2 3
}
‘‘ 	
public
’’ 
override
’’ 
T
’’ 
GetProperty
’’ %
<
’’% &
T
’’& '
>
’’' (
(
’’( )
BindingContext
’’) 7
context
’’8 ?
)
’’? @
{
÷÷ 	
return
◊◊ 
base
◊◊ 
.
◊◊ 
GetProperty
◊◊ #
<
◊◊# $
T
◊◊$ %
>
◊◊% &
(
◊◊& '
context
◊◊' .
)
◊◊. /
;
◊◊/ 0
}
ÿÿ 	
class
ŸŸ '
JsonMessageEncoderFactory
ŸŸ '
:
ŸŸ( )#
MessageEncoderFactory
ŸŸ* ?
{
⁄⁄ 	
private
€€ 
MessageEncoder
€€ "
encoder
€€# *
;
€€* +
private
‹‹ 
MessageVersion
‹‹ "
version
‹‹# *
;
‹‹* +
private
›› 
string
›› 
	mediaType
›› $
;
››$ %
private
ﬁﬁ 
string
ﬁﬁ 
charSet
ﬁﬁ "
;
ﬁﬁ" #
public
‡‡ '
JsonMessageEncoderFactory
‡‡ ,
(
‡‡, -
)
‡‡- .
{
·· 
this
‚‚ 
.
‚‚ 
version
‚‚ 
=
‚‚ 
MessageVersion
‚‚ -
.
‚‚- .
None
‚‚. 2
;
‚‚2 3
this
‰‰ 
.
‰‰ 
	mediaType
‰‰ 
=
‰‰  
$str
‰‰! ,
;
‰‰, -
this
ÂÂ 
.
ÂÂ 
charSet
ÂÂ 
=
ÂÂ 
$str
ÂÂ &
;
ÂÂ& '
this
ÊÊ 
.
ÊÊ 
encoder
ÊÊ 
=
ÊÊ 
new
ÊÊ " 
JsonMessageEncoder
ÊÊ# 5
(
ÊÊ5 6
this
ÊÊ6 :
)
ÊÊ: ;
;
ÊÊ; <
}
ËË 
internal
ÈÈ '
JsonMessageEncoderFactory
ÈÈ .
(
ÈÈ. /
string
ÈÈ/ 5
	mediaType
ÈÈ6 ?
,
ÈÈ? @
string
ÈÈA G
charSet
ÈÈH O
,
ÈÈO P
MessageVersion
ÍÍ 
version
ÍÍ &
)
ÍÍ& '
{
ÎÎ 
this
ÏÏ 
.
ÏÏ 
version
ÏÏ 
=
ÏÏ 
version
ÏÏ &
;
ÏÏ& '
this
ÌÌ 
.
ÌÌ 
	mediaType
ÌÌ 
=
ÌÌ  
	mediaType
ÌÌ! *
;
ÌÌ* +
this
ÓÓ 
.
ÓÓ 
charSet
ÓÓ 
=
ÓÓ 
charSet
ÓÓ &
;
ÓÓ& '
this
ÔÔ 
.
ÔÔ 
encoder
ÔÔ 
=
ÔÔ 
new
ÔÔ " 
JsonMessageEncoder
ÔÔ# 5
(
ÔÔ5 6
this
ÔÔ6 :
)
ÔÔ: ;
;
ÔÔ; <
}
 
public
ÚÚ 
override
ÚÚ 
MessageEncoder
ÚÚ *
Encoder
ÚÚ+ 2
{
ÛÛ 
get
ÙÙ 
{
ıı 
return
ˆˆ 
this
ˆˆ 
.
ˆˆ  
encoder
ˆˆ  '
;
ˆˆ' (
}
˜˜ 
}
¯¯ 
public
˙˙ 
override
˙˙ 
MessageVersion
˙˙ *
MessageVersion
˙˙+ 9
{
˚˚ 
get
¸¸ 
{
˝˝ 
return
˛˛ 
this
˛˛ 
.
˛˛  
version
˛˛  '
;
˛˛' (
}
ˇˇ 
}
ÄÄ 
internal
ÇÇ 
string
ÇÇ 
	MediaType
ÇÇ %
{
ÉÉ 
get
ÑÑ 
{
ÖÖ 
return
ÜÜ 
this
ÜÜ 
.
ÜÜ  
	mediaType
ÜÜ  )
;
ÜÜ) *
}
áá 
}
àà 
internal
ää 
string
ää 
CharSet
ää #
{
ãã 
get
åå 
{
çç 
return
éé 
this
éé 
.
éé  
charSet
éé  '
;
éé' (
}
èè 
}
êê 
}
ëë 	
class
íí  
JsonMessageEncoder
íí  
:
íí! "
MessageEncoder
íí# 1
{
ìì 	
private
îî '
JsonMessageEncoderFactory
îî -
factory
îî. 5
;
îî5 6
private
ïï 
XmlWriterSettings
ïï %
writerSettings
ïï& 4
;
ïï4 5
private
ññ 
string
ññ 
contentType
ññ &
;
ññ& '
public
òò  
JsonMessageEncoder
òò %
(
òò% &'
JsonMessageEncoderFactory
òò& ?
factory
òò@ G
)
òòG H
{
ôô 
this
öö 
.
öö 
factory
öö 
=
öö 
factory
öö &
;
öö& '
this
úú 
.
úú 
writerSettings
úú #
=
úú$ %
new
úú& )
XmlWriterSettings
úú* ;
(
úú; <
)
úú< =
;
úú= >
this
ùù 
.
ùù 
writerSettings
ùù #
.
ùù# $
Encoding
ùù$ ,
=
ùù- .
Encoding
ùù/ 7
.
ùù7 8
GetEncoding
ùù8 C
(
ùùC D
factory
ùùD K
.
ùùK L
CharSet
ùùL S
)
ùùS T
;
ùùT U
this
ûû 
.
ûû 
contentType
ûû  
=
ûû! "
string
ûû# )
.
ûû) *
Format
ûû* 0
(
ûû0 1
$str
ûû1 C
,
ûûC D
this
üü 
.
üü 
factory
üü  
.
üü  !
	MediaType
üü! *
,
üü* +
this
üü, 0
.
üü0 1
writerSettings
üü1 ?
.
üü? @
Encoding
üü@ H
.
üüH I

HeaderName
üüI S
)
üüS T
;
üüT U
}
†† 
public
¢¢ 
override
¢¢ 
string
¢¢ "
ContentType
¢¢# .
{
££ 
get
§§ 
{
•• 
return
¶¶ 
this
¶¶ 
.
¶¶  
contentType
¶¶  +
;
¶¶+ ,
}
ßß 
}
®® 
public
™™ 
override
™™ 
string
™™ "
	MediaType
™™# ,
{
´´ 
get
¨¨ 
{
≠≠ 
return
ÆÆ 
factory
ÆÆ "
.
ÆÆ" #
	MediaType
ÆÆ# ,
;
ÆÆ, -
}
ØØ 
}
∞∞ 
public
≤≤ 
override
≤≤ 
MessageVersion
≤≤ *
MessageVersion
≤≤+ 9
{
≥≥ 
get
¥¥ 
{
µµ 
return
∂∂ 
this
∂∂ 
.
∂∂  
factory
∂∂  '
.
∂∂' (
MessageVersion
∂∂( 6
;
∂∂6 7
}
∑∑ 
}
∏∏ 
public
∫∫ 
override
∫∫ 
Message
∫∫ #
ReadMessage
∫∫$ /
(
∫∫/ 0
ArraySegment
∫∫0 <
<
∫∫< =
byte
∫∫= A
>
∫∫A B
buffer
∫∫C I
,
∫∫I J
BufferManager
∫∫K X
bufferManager
∫∫Y f
,
∫∫f g
string
∫∫h n
contentType
∫∫o z
)
∫∫z {
{
ªª 
byte
ºº 
[
ºº 
]
ºº 
msgContents
ºº "
=
ºº# $
new
ºº% (
byte
ºº) -
[
ºº- .
buffer
ºº. 4
.
ºº4 5
Count
ºº5 :
]
ºº: ;
;
ºº; <
Array
ΩΩ 
.
ΩΩ 
Copy
ΩΩ 
(
ΩΩ 
buffer
ΩΩ !
.
ΩΩ! "
Array
ΩΩ" '
,
ΩΩ' (
buffer
ΩΩ) /
.
ΩΩ/ 0
Offset
ΩΩ0 6
,
ΩΩ6 7
msgContents
ΩΩ8 C
,
ΩΩC D
$num
ΩΩE F
,
ΩΩF G
msgContents
ΩΩH S
.
ΩΩS T
Length
ΩΩT Z
)
ΩΩZ [
;
ΩΩ[ \
bufferManager
ææ 
.
ææ 
ReturnBuffer
ææ *
(
ææ* +
buffer
ææ+ 1
.
ææ1 2
Array
ææ2 7
)
ææ7 8
;
ææ8 9
MemoryStream
¿¿ 
stream
¿¿ #
=
¿¿$ %
new
¿¿& )
MemoryStream
¿¿* 6
(
¿¿6 7
msgContents
¿¿7 B
)
¿¿B C
;
¿¿C D
return
¡¡ 
ReadMessage
¡¡ "
(
¡¡" #
stream
¡¡# )
,
¡¡) *
int
¡¡+ .
.
¡¡. /
MaxValue
¡¡/ 7
)
¡¡7 8
;
¡¡8 9
}
¬¬ 
public
ƒƒ 
override
ƒƒ 
Message
ƒƒ #
ReadMessage
ƒƒ$ /
(
ƒƒ/ 0
Stream
ƒƒ0 6
stream
ƒƒ7 =
,
ƒƒ= >
int
ƒƒ? B
maxSizeOfHeaders
ƒƒC S
,
ƒƒS T
string
ƒƒU [
contentType
ƒƒ\ g
)
ƒƒg h
{
≈≈ 
	XmlReader
∆∆ 
reader
∆∆  
=
∆∆! "
	XmlReader
∆∆# ,
.
∆∆, -
Create
∆∆- 3
(
∆∆3 4
stream
∆∆4 :
)
∆∆: ;
;
∆∆; <
return
«« 
Message
«« 
.
«« 
CreateMessage
«« ,
(
««, -
reader
««- 3
,
««3 4
maxSizeOfHeaders
««5 E
,
««E F
this
««G K
.
««K L
MessageVersion
««L Z
)
««Z [
;
««[ \
}
»» 
public
   
override
   
ArraySegment
   (
<
  ( )
byte
  ) -
>
  - .
WriteMessage
  / ;
(
  ; <
Message
  < C
message
  D K
,
  K L
int
  M P
maxMessageSize
  Q _
,
  _ `
BufferManager
  a n
bufferManager
  o |
,
  | }
int  ~ Å
messageOffset  Ç è
)  è ê
{
ÀÀ 
MemoryStream
ÃÃ 
stream
ÃÃ #
=
ÃÃ$ %
new
ÃÃ& )
MemoryStream
ÃÃ* 6
(
ÃÃ6 7
)
ÃÃ7 8
;
ÃÃ8 9
	XmlWriter
ÕÕ 
writer
ÕÕ  
=
ÕÕ! "
	XmlWriter
ÕÕ# ,
.
ÕÕ, -
Create
ÕÕ- 3
(
ÕÕ3 4
stream
ÕÕ4 :
,
ÕÕ: ;
this
ÕÕ< @
.
ÕÕ@ A
writerSettings
ÕÕA O
)
ÕÕO P
;
ÕÕP Q
message
ŒŒ 
.
ŒŒ 
WriteMessage
ŒŒ $
(
ŒŒ$ %
writer
ŒŒ% +
)
ŒŒ+ ,
;
ŒŒ, -
writer
œœ 
.
œœ 
Close
œœ 
(
œœ 
)
œœ 
;
œœ 
byte
—— 
[
—— 
]
—— 
messageBytes
—— #
=
——$ %
stream
——& ,
.
——, -
	GetBuffer
——- 6
(
——6 7
)
——7 8
;
——8 9
int
““ 
messageLength
““ !
=
““" #
(
““$ %
int
““% (
)
““( )
stream
““) /
.
““/ 0
Position
““0 8
;
““8 9
stream
”” 
.
”” 
Close
”” 
(
”” 
)
”” 
;
”” 
int
’’ 
totalLength
’’ 
=
’’  !
messageLength
’’" /
+
’’0 1
messageOffset
’’2 ?
;
’’? @
byte
÷÷ 
[
÷÷ 
]
÷÷ 

totalBytes
÷÷ !
=
÷÷" #
bufferManager
÷÷$ 1
.
÷÷1 2

TakeBuffer
÷÷2 <
(
÷÷< =
totalLength
÷÷= H
)
÷÷H I
;
÷÷I J
Array
◊◊ 
.
◊◊ 
Copy
◊◊ 
(
◊◊ 
messageBytes
◊◊ '
,
◊◊' (
$num
◊◊) *
,
◊◊* +

totalBytes
◊◊, 6
,
◊◊6 7
messageOffset
◊◊8 E
,
◊◊E F
messageLength
◊◊G T
)
◊◊T U
;
◊◊U V
ArraySegment
ŸŸ 
<
ŸŸ 
byte
ŸŸ !
>
ŸŸ! "
	byteArray
ŸŸ# ,
=
ŸŸ- .
new
ŸŸ/ 2
ArraySegment
ŸŸ3 ?
<
ŸŸ? @
byte
ŸŸ@ D
>
ŸŸD E
(
ŸŸE F

totalBytes
ŸŸF P
,
ŸŸP Q
messageOffset
ŸŸR _
,
ŸŸ_ `
messageLength
ŸŸa n
)
ŸŸn o
;
ŸŸo p
return
⁄⁄ 
	byteArray
⁄⁄  
;
⁄⁄  !
}
€€ 
public
›› 
override
›› 
void
››  
WriteMessage
››! -
(
››- .
Message
››. 5
message
››6 =
,
››= >
Stream
››? E
stream
››F L
)
››L M
{
ﬁﬁ 
	XmlWriter
ﬂﬂ 
writer
ﬂﬂ  
=
ﬂﬂ! "
	XmlWriter
ﬂﬂ# ,
.
ﬂﬂ, -
Create
ﬂﬂ- 3
(
ﬂﬂ3 4
stream
ﬂﬂ4 :
,
ﬂﬂ: ;
this
ﬂﬂ< @
.
ﬂﬂ@ A
writerSettings
ﬂﬂA O
)
ﬂﬂO P
;
ﬂﬂP Q
message
‡‡ 
.
‡‡ 
WriteMessage
‡‡ $
(
‡‡$ %
writer
‡‡% +
)
‡‡+ ,
;
‡‡, -
writer
·· 
.
·· 
Close
·· 
(
·· 
)
·· 
;
·· 
}
‚‚ 
}
„„ 	
}
‰‰ 
}ÂÂ ¢ê
D:\PROJELER\Infoline-Bilgi-Teknolojileri\WorkOfTime-Web-Server\Infoline.FrameworkV3\Infoline.Framework\Web\StaticFileHandler.cs
	namespace 	
Infoline
 
. 
Web 
{ 
public 

class 
StaticFileHandler "
:# $
IHttpHandler% 1
{ 
IHttpHandler 
handler 
; 
public 
StaticFileHandler  
(  !
)! "
{ 	
handler 
= 
typeof 
( 
System #
.# $
Web$ '
.' (
IHttpHandler( 4
)4 5
.5 6
Assembly6 >
.> ?
GetType? F
(F G
$strG e
)e f
. 
GetConstructors  
(  !
System! '
.' (

Reflection( 2
.2 3
BindingFlags3 ?
.? @
Instance@ H
|I J
SystemK Q
.Q R

ReflectionR \
.\ ]
BindingFlags] i
.i j
	NonPublicj s
)s t
[t u
$numu v
]v w
. 
Invoke 
( 
new 
object "
[" #
$num# $
]$ %
)% &
as' )
IHttpHandler* 6
;6 7
} 	
public 
bool 

IsReusable 
{ 	
get 
{ 
return 
handler  
.  !

IsReusable! +
;+ ,
}- .
} 	
public 
void 
ProcessRequest "
(" #
HttpContext# .
context/ 6
)6 7
{ 	
VirtualFile!! 
virtualFile!! #
=!!$ %
null!!& *
;!!* +
String"" 
virtualPath"" 
=""  
context""! (
.""( )
Request"") 0
.""0 1
FilePath""1 9
;""9 :
if$$ 
($$ 
HostingEnvironment$$ "
.$$" #
VirtualPathProvider$$# 6
.$$6 7

FileExists$$7 A
($$A B
virtualPath$$B M
)$$M N
)$$N O
{%% 
virtualFile&& 
=&& 
HostingEnvironment&& 0
.&&0 1
VirtualPathProvider&&1 D
.&&D E
GetFile&&E L
(&&L M
virtualPath&&M X
)&&X Y
;&&Y Z
byte'' 
['' 
]'' 
buff'' 
='' 
new'' !
byte''" &
[''& '
$num''' +
]''+ ,
;'', -
var(( 
st(( 
=(( 
virtualFile(( $
.(($ %
Open((% )
((() *
)((* +
;((+ ,
int)) 
	bytesRead)) 
=)) 
-))  !
$num))! "
;))" #
context** 
.** 
Response**  
.**  !
ContentType**! ,
=**- .
MimeMapping**/ :
.**: ;
GetMimeMapping**; I
(**I J
virtualPath**J U
)**U V
;**V W
context++ 
.++ 
Response++  
.++  !
Cache++! &
.++& '

SetExpires++' 1
(++1 2
DateTime++2 :
.++: ;
Now++; >
.++> ?
AddDays++? F
(++F G
$num++G H
)++H I
)++I J
;++J K
context,, 
.,, 
Response,,  
.,,  !
Expires,,! (
=,,) *
$num,,+ -
;,,- .
context-- 
.-- 
Response--  
.--  !
Cache--! &
.--& '
	SetMaxAge--' 0
(--0 1
new--1 4
TimeSpan--5 =
(--= >
$num--> ?
,--? @
$num--A B
,--B C
$num--D E
)--E F
)--F G
;--G H
context.. 
... 
Response..  
...  !
Cache..! &
...& '
SetLastModified..' 6
(..6 7
DateTime..7 ?
...? @
Now..@ C
...C D
AddDays..D K
(..K L
-..L M
$num..M N
)..N O
)..O P
;..P Q
while00 
(00 
(00 
	bytesRead00 !
=00" #
st00$ &
.00& '
Read00' +
(00+ ,
buff00, 0
,000 1
$num002 3
,003 4
buff005 9
.009 :
Length00: @
)00@ A
)00A B
>00C D
$num00E F
)00F G
{11 
context22 
.22 
Response22 $
.22$ %
OutputStream22% 1
.221 2
Write222 7
(227 8
buff228 <
,22< =
$num22> ?
,22? @
	bytesRead22A J
)22J K
;22K L
}33 
context44 
.44 
Response44  
.44  !
Flush44! &
(44& '
)44' (
;44( )
}66 
else77 
{88 
try99 
{:: 
context;; 
.;; 
Response;; $
.;;$ %
Cache;;% *
.;;* +

SetExpires;;+ 5
(;;5 6
DateTime;;6 >
.;;> ?
Now;;? B
.;;B C

AddMinutes;;C M
(;;M N
$num;;N P
);;P Q
);;Q R
;;;R S
handler== 
.== 
ProcessRequest== *
(==* +
context==+ 2
)==2 3
;==3 4
}>> 
catch?? 
{@@ 
contextAA 
.AA 
ResponseAA $
.AA$ %

StatusCodeAA% /
=AA0 1
$numAA2 5
;AA5 6
}BB 
}CC 
}DD 	
}EE 
internalII 
classII 
MimeMappingII 
{JJ 
privateLL 
staticLL 
	HashtableLL  (
_extensionToMimeMappingTableLL! =
=LL> ?
newLL@ C
	HashtableLLD M
(LLM N
$numLLN Q
,LLQ R
StringComparerLLS a
.LLa b$
CurrentCultureIgnoreCaseLLb z
)LLz {
;LL{ |
staticOO 
MimeMappingOO 
(OO 
)OO 
{PP 	
AddMimeMappingQQ 
(QQ 
$strQQ !
,QQ! "
$strQQ# .
)QQ. /
;QQ/ 0
AddMimeMappingRR 
(RR 
$strRR !
,RR! "
$strRR# 3
)RR3 4
;RR4 5
AddMimeMappingSS 
(SS 
$strSS !
,SS! "
$strSS# I
)SSI J
;SSJ K
AddMimeMappingTT 
(TT 
$strTT  
,TT  !
$strTT" :
)TT: ;
;TT; <
AddMimeMappingUU 
(UU 
$strUU !
,UU! "
$strUU# 1
)UU1 2
;UU2 3
AddMimeMappingVV 
(VV 
$strVV "
,VV" #
$strVV$ 0
)VV0 1
;VV1 2
AddMimeMappingWW 
(WW 
$strWW !
,WW! "
$strWW# :
)WW: ;
;WW; <
AddMimeMappingXX 
(XX 
$strXX "
,XX" #
$strXX$ 0
)XX0 1
;XX1 2
AddMimeMappingYY 
(YY 
$strYY !
,YY! "
$strYY# 3
)YY3 4
;YY4 5
AddMimeMappingZZ 
(ZZ 
$strZZ !
,ZZ! "
$strZZ# 4
)ZZ4 5
;ZZ5 6
AddMimeMapping[[ 
([[ 
$str[[ !
,[[! "
$str[[# 3
)[[3 4
;[[4 5
AddMimeMapping\\ 
(\\ 
$str\\  
,\\  !
$str\\" /
)\\/ 0
;\\0 1
AddMimeMapping]] 
(]] 
$str]] )
,]]) *
$str]]+ I
)]]I J
;]]J K
AddMimeMapping^^ 
(^^ 
$str^^ !
,^^! "
$str^^# =
)^^= >
;^^> ?
AddMimeMapping__ 
(__ 
$str__ !
,__! "
$str__# /
)__/ 0
;__0 1
AddMimeMapping`` 
(`` 
$str`` #
,``# $
$str``% :
)``: ;
;``; <
AddMimeMappingaa 
(aa 
$straa !
,aa! "
$straa# .
)aa. /
;aa/ 0
AddMimeMappingbb 
(bb 
$strbb !
,bb! "
$strbb# 6
)bb6 7
;bb7 8
AddMimeMappingcc 
(cc 
$strcc !
,cc! "
$strcc# @
)cc@ A
;ccA B
AddMimeMappingdd 
(dd 
$strdd !
,dd! "
$strdd# ?
)dd? @
;dd@ A
AddMimeMappingee 
(ee 
$stree 
,ee  
$stree! -
)ee- .
;ee. /
AddMimeMappingff 
(ff 
$strff !
,ff! "
$strff# -
)ff- .
;ff. /
AddMimeMappinggg 
(gg 
$strgg !
,gg! "
$strgg# ?
)gg? @
;gg@ A
AddMimeMappinghh 
(hh 
$strhh !
,hh! "
$strhh# 9
)hh9 :
;hh: ;
AddMimeMappingii 
(ii 
$strii !
,ii! "
$strii# 0
)ii0 1
;ii1 2
AddMimeMappingjj 
(jj 
$strjj !
,jj! "
$strjj# 6
)jj6 7
;jj7 8
AddMimeMappingkk 
(kk 
$strkk !
,kk! "
$strkk# 2
)kk2 3
;kk3 4
AddMimeMappingll 
(ll 
$strll "
,ll" #
$strll$ 8
)ll8 9
;ll9 :
AddMimeMappingmm 
(mm 
$strmm !
,mm! "
$strmm# 9
)mm9 :
;mm: ;
AddMimeMappingnn 
(nn 
$strnn !
,nn! "
$strnn# =
)nn= >
;nn> ?
AddMimeMappingoo 
(oo 
$stroo $
,oo$ %
$stroo& @
)oo@ A
;ooA B
AddMimeMappingpp 
(pp 
$strpp !
,pp! "
$strpp# =
)pp= >
;pp> ?
AddMimeMappingqq 
(qq 
$strqq !
,qq! "
$strqq# 7
)qq7 8
;qq8 9
AddMimeMappingrr 
(rr 
$strrr !
,rr! "
$strrr# 7
)rr7 8
;rr8 9
AddMimeMappingss 
(ss 
$strss !
,ss! "
$strss# 6
)ss6 7
;ss7 8
AddMimeMappingtt 
(tt 
$strtt !
,tt! "
$strtt# ;
)tt; <
;tt< =
AddMimeMappinguu 
(uu 
$struu !
,uu! "
$struu# ;
)uu; <
;uu< =
AddMimeMappingvv 
(vv 
$strvv !
,vv! "
$strvv# ?
)vv? @
;vv@ A
AddMimeMappingww 
(ww 
$strww !
,ww! "
$strww# .
)ww. /
;ww/ 0
AddMimeMappingxx 
(xx 
$strxx !
,xx! "
$strxx# ;
)xx; <
;xx< =
AddMimeMappingyy 
(yy 
$stryy #
,yy# $
$stryy% /
)yy/ 0
;yy0 1
AddMimeMappingzz 
(zz 
$strzz !
,zz! "
$strzz# =
)zz= >
;zz> ?
AddMimeMapping{{ 
({{ 
$str{{ !
,{{! "
$str{{# 2
){{2 3
;{{3 4
AddMimeMapping|| 
(|| 
$str|| !
,||! "
$str||# 6
)||6 7
;||7 8
AddMimeMapping}} 
(}} 
$str}} !
,}}! "
$str}}# 3
)}}3 4
;}}4 5
AddMimeMapping~~ 
(~~ 
$str~~ !
,~~! "
$str~~# ;
)~~; <
;~~< =
AddMimeMapping 
( 
$str !
,! "
$str# 3
)3 4
;4 5
AddMimeMapping
ÄÄ 
(
ÄÄ 
$str
ÄÄ !
,
ÄÄ! "
$str
ÄÄ# 9
)
ÄÄ9 :
;
ÄÄ: ;
AddMimeMapping
ÅÅ 
(
ÅÅ 
$str
ÅÅ "
,
ÅÅ" #
$str
ÅÅ$ 8
)
ÅÅ8 9
;
ÅÅ9 :
AddMimeMapping
ÇÇ 
(
ÇÇ 
$str
ÇÇ !
,
ÇÇ! "
$str
ÇÇ# .
)
ÇÇ. /
;
ÇÇ/ 0
AddMimeMapping
ÉÉ 
(
ÉÉ 
$str
ÉÉ  
,
ÉÉ  !
$str
ÉÉ" 6
)
ÉÉ6 7
;
ÉÉ7 8
AddMimeMapping
ÑÑ 
(
ÑÑ 
$str
ÑÑ !
,
ÑÑ! "
$str
ÑÑ# 4
)
ÑÑ4 5
;
ÑÑ5 6
AddMimeMapping
ÖÖ 
(
ÖÖ 
$str
ÖÖ !
,
ÖÖ! "
$str
ÖÖ# 5
)
ÖÖ5 6
;
ÖÖ6 7
AddMimeMapping
ÜÜ 
(
ÜÜ 
$str
ÜÜ !
,
ÜÜ! "
$str
ÜÜ# 5
)
ÜÜ5 6
;
ÜÜ6 7
AddMimeMapping
áá 
(
áá 
$str
áá 
,
áá  
$str
áá! -
)
áá- .
;
áá. /
AddMimeMapping
àà 
(
àà 
$str
àà !
,
àà! "
$str
àà# 6
)
àà6 7
;
àà7 8
AddMimeMapping
ââ 
(
ââ 
$str
ââ !
,
ââ! "
$str
ââ# 7
)
ââ7 8
;
ââ8 9
AddMimeMapping
ää 
(
ää 
$str
ää "
,
ää" #
$str
ää$ /
)
ää/ 0
;
ää0 1
AddMimeMapping
ãã 
(
ãã 
$str
ãã !
,
ãã! "
$str
ãã# .
)
ãã. /
;
ãã/ 0
AddMimeMapping
åå 
(
åå 
$str
åå !
,
åå! "
$str
åå# =
)
åå= >
;
åå> ?
AddMimeMapping
çç 
(
çç 
$str
çç !
,
çç! "
$str
çç# B
)
ççB C
;
ççC D
AddMimeMapping
éé 
(
éé 
$str
éé !
,
éé! "
$str
éé# 9
)
éé9 :
;
éé: ;
AddMimeMapping
èè 
(
èè 
$str
èè !
,
èè! "
$str
èè# .
)
èè. /
;
èè/ 0
AddMimeMapping
êê 
(
êê 
$str
êê !
,
êê! "
$str
êê# 0
)
êê0 1
;
êê1 2
AddMimeMapping
ëë 
(
ëë 
$str
ëë !
,
ëë! "
$str
ëë# B
)
ëëB C
;
ëëC D
AddMimeMapping
íí 
(
íí 
$str
íí !
,
íí! "
$str
íí# 1
)
íí1 2
;
íí2 3
AddMimeMapping
ìì 
(
ìì 
$str
ìì !
,
ìì! "
$str
ìì# .
)
ìì. /
;
ìì/ 0
AddMimeMapping
îî 
(
îî 
$str
îî !
,
îî! "
$str
îî# /
)
îî/ 0
;
îî0 1
AddMimeMapping
ïï 
(
ïï 
$str
ïï "
,
ïï" #
$str
ïï$ 1
)
ïï1 2
;
ïï2 3
AddMimeMapping
ññ 
(
ññ 
$str
ññ !
,
ññ! "
$str
ññ# /
)
ññ/ 0
;
ññ0 1
AddMimeMapping
óó 
(
óó 
$str
óó "
,
óó" #
$str
óó$ 0
)
óó0 1
;
óó1 2
AddMimeMapping
òò 
(
òò 
$str
òò  
,
òò  !
$str
òò" :
)
òò: ;
;
òò; <
AddMimeMapping
ôô 
(
ôô 
$str
ôô !
,
ôô! "
$str
ôô# 3
)
ôô3 4
;
ôô4 5
AddMimeMapping
öö 
(
öö 
$str
öö #
,
öö# $
$str
öö% :
)
öö: ;
;
öö; <
AddMimeMapping
õõ 
(
õõ 
$str
õõ !
,
õõ! "
$str
õõ# 3
)
õõ3 4
;
õõ4 5
AddMimeMapping
úú 
(
úú 
$str
úú &
,
úú& '
$str
úú( C
)
úúC D
;
úúD E
AddMimeMapping
ùù 
(
ùù 
$str
ùù #
,
ùù# $
$str
ùù% 5
)
ùù5 6
;
ùù6 7
AddMimeMapping
ûû 
(
ûû 
$str
ûû !
,
ûû! "
$str
ûû# :
)
ûû: ;
;
ûû; <
AddMimeMapping
üü 
(
üü 
$str
üü !
,
üü! "
$str
üü# 3
)
üü3 4
;
üü4 5
AddMimeMapping
†† 
(
†† 
$str
†† !
,
††! "
$str
††# .
)
††. /
;
††/ 0
AddMimeMapping
°° 
(
°° 
$str
°° "
,
°°" #
$str
°°$ 0
)
°°0 1
;
°°1 2
AddMimeMapping
¢¢ 
(
¢¢ 
$str
¢¢ !
,
¢¢! "
$str
¢¢# <
)
¢¢< =
;
¢¢= >
AddMimeMapping
££ 
(
££ 
$str
££ !
,
££! "
$str
££# >
)
££> ?
;
££? @
AddMimeMapping
§§ 
(
§§ 
$str
§§ "
,
§§" #
$str
§§$ 0
)
§§0 1
;
§§1 2
AddMimeMapping
•• 
(
•• 
$str
•• !
,
••! "
$str
••# 4
)
••4 5
;
••5 6
AddMimeMapping
¶¶ 
(
¶¶ 
$str
¶¶ !
,
¶¶! "
$str
¶¶# ;
)
¶¶; <
;
¶¶< =
AddMimeMapping
ßß 
(
ßß 
$str
ßß !
,
ßß! "
$str
ßß# ?
)
ßß? @
;
ßß@ A
AddMimeMapping
®® 
(
®® 
$str
®® !
,
®®! "
$str
®®# /
)
®®/ 0
;
®®0 1
AddMimeMapping
©© 
(
©© 
$str
©© !
,
©©! "
$str
©©# /
)
©©/ 0
;
©©0 1
AddMimeMapping
™™ 
(
™™ 
$str
™™  
,
™™  !
$str
™™" :
)
™™: ;
;
™™; <
AddMimeMapping
´´ 
(
´´ 
$str
´´ !
,
´´! "
$str
´´# >
)
´´> ?
;
´´? @
AddMimeMapping
¨¨ 
(
¨¨ 
$str
¨¨ #
,
¨¨# $
$str
¨¨% 8
)
¨¨8 9
;
¨¨9 :
AddMimeMapping
≠≠ 
(
≠≠ 
$str
≠≠ !
,
≠≠! "
$str
≠≠# >
)
≠≠> ?
;
≠≠? @
AddMimeMapping
ÆÆ 
(
ÆÆ 
$str
ÆÆ !
,
ÆÆ! "
$str
ÆÆ# /
)
ÆÆ/ 0
;
ÆÆ0 1
AddMimeMapping
ØØ 
(
ØØ 
$str
ØØ !
,
ØØ! "
$str
ØØ# /
)
ØØ/ 0
;
ØØ0 1
AddMimeMapping
∞∞ 
(
∞∞ 
$str
∞∞ !
,
∞∞! "
$str
∞∞# 4
)
∞∞4 5
;
∞∞5 6
AddMimeMapping
±± 
(
±± 
$str
±± !
,
±±! "
$str
±±# /
)
±±/ 0
;
±±0 1
AddMimeMapping
≤≤ 
(
≤≤ 
$str
≤≤ !
,
≤≤! "
$str
≤≤# /
)
≤≤/ 0
;
≤≤0 1
AddMimeMapping
≥≥ 
(
≥≥ 
$str
≥≥  
,
≥≥  !
$str
≥≥" :
)
≥≥: ;
;
≥≥; <
AddMimeMapping
¥¥ 
(
¥¥ 
$str
¥¥  
,
¥¥  !
$str
¥¥" 8
)
¥¥8 9
;
¥¥9 :
AddMimeMapping
µµ 
(
µµ 
$str
µµ !
,
µµ! "
$str
µµ# 3
)
µµ3 4
;
µµ4 5
AddMimeMapping
∂∂ 
(
∂∂ 
$str
∂∂ !
,
∂∂! "
$str
∂∂# 4
)
∂∂4 5
;
∂∂5 6
AddMimeMapping
∑∑ 
(
∑∑ 
$str
∑∑ !
,
∑∑! "
$str
∑∑# :
)
∑∑: ;
;
∑∑; <
AddMimeMapping
∏∏ 
(
∏∏ 
$str
∏∏ !
,
∏∏! "
$str
∏∏# :
)
∏∏: ;
;
∏∏; <
AddMimeMapping
ππ 
(
ππ 
$str
ππ !
,
ππ! "
$str
ππ# D
)
ππD E
;
ππE F
AddMimeMapping
∫∫ 
(
∫∫ 
$str
∫∫ !
,
∫∫! "
$str
∫∫# E
)
∫∫E F
;
∫∫F G
AddMimeMapping
ªª 
(
ªª 
$str
ªª !
,
ªª! "
$str
ªª# @
)
ªª@ A
;
ªªA B
AddMimeMapping
ºº 
(
ºº 
$str
ºº !
,
ºº! "
$str
ºº# :
)
ºº: ;
;
ºº; <
AddMimeMapping
ΩΩ 
(
ΩΩ 
$str
ΩΩ  
,
ΩΩ  !
$str
ΩΩ" :
)
ΩΩ: ;
;
ΩΩ; <
AddMimeMapping
ææ 
(
ææ 
$str
ææ !
,
ææ! "
$str
ææ# ;
)
ææ; <
;
ææ< =
AddMimeMapping
øø 
(
øø 
$str
øø !
,
øø! "
$str
øø# <
)
øø< =
;
øø= >
AddMimeMapping
¿¿ 
(
¿¿ 
$str
¿¿ !
,
¿¿! "
$str
¿¿# <
)
¿¿< =
;
¿¿= >
AddMimeMapping
¡¡ 
(
¡¡ 
$str
¡¡ !
,
¡¡! "
$str
¡¡# >
)
¡¡> ?
;
¡¡? @
AddMimeMapping
¬¬ 
(
¬¬ 
$str
¬¬ !
,
¬¬! "
$str
¬¬# <
)
¬¬< =
;
¬¬= >
AddMimeMapping
√√ 
(
√√ 
$str
√√ !
,
√√! "
$str
√√# :
)
√√: ;
;
√√; <
AddMimeMapping
ƒƒ 
(
ƒƒ 
$str
ƒƒ !
,
ƒƒ! "
$str
ƒƒ# 7
)
ƒƒ7 8
;
ƒƒ8 9
AddMimeMapping
≈≈ 
(
≈≈ 
$str
≈≈ !
,
≈≈! "
$str
≈≈# 9
)
≈≈9 :
;
≈≈: ;
AddMimeMapping
∆∆ 
(
∆∆ 
$str
∆∆ !
,
∆∆! "
$str
∆∆# 9
)
∆∆9 :
;
∆∆: ;
AddMimeMapping
«« 
(
«« 
$str
«« !
,
««! "
$str
««# 4
)
««4 5
;
««5 6
AddMimeMapping
»» 
(
»» 
$str
»» !
,
»»! "
$str
»»# B
)
»»B C
;
»»C D
AddMimeMapping
…… 
(
…… 
$str
…… !
,
……! "
$str
……# ;
)
……; <
;
……< =
AddMimeMapping
   
(
   
$str
   !
,
  ! "
$str
  # =
)
  = >
;
  > ?
AddMimeMapping
ÀÀ 
(
ÀÀ 
$str
ÀÀ !
,
ÀÀ! "
$str
ÀÀ# B
)
ÀÀB C
;
ÀÀC D
AddMimeMapping
ÃÃ 
(
ÃÃ 
$str
ÃÃ !
,
ÃÃ! "
$str
ÃÃ# :
)
ÃÃ: ;
;
ÃÃ; <
AddMimeMapping
ÕÕ 
(
ÕÕ 
$str
ÕÕ !
,
ÕÕ! "
$str
ÕÕ# :
)
ÕÕ: ;
;
ÕÕ; <
AddMimeMapping
ŒŒ 
(
ŒŒ 
$str
ŒŒ !
,
ŒŒ! "
$str
ŒŒ# B
)
ŒŒB C
;
ŒŒC D
AddMimeMapping
œœ 
(
œœ 
$str
œœ !
,
œœ! "
$str
œœ# ;
)
œœ; <
;
œœ< =
AddMimeMapping
–– 
(
–– 
$str
–– !
,
––! "
$str
––# =
)
––= >
;
––> ?
AddMimeMapping
—— 
(
—— 
$str
——  
,
——  !
$str
——" 3
)
——3 4
;
——4 5
AddMimeMapping
““ 
(
““ 
$str
““  
,
““  !
$str
““" 8
)
““8 9
;
““9 :
AddMimeMapping
”” 
(
”” 
$str
”” !
,
””! "
$str
””# 0
)
””0 1
;
””1 2
AddMimeMapping
‘‘ 
(
‘‘ 
$str
‘‘ !
,
‘‘! "
$str
‘‘# 9
)
‘‘9 :
;
‘‘: ;
AddMimeMapping
’’ 
(
’’ 
$str
’’ !
,
’’! "
$str
’’# .
)
’’. /
;
’’/ 0
AddMimeMapping
÷÷ 
(
÷÷ 
$str
÷÷ !
,
÷÷! "
$str
÷÷# 7
)
÷÷7 8
;
÷÷8 9
AddMimeMapping
◊◊ 
(
◊◊ 
$str
◊◊ "
,
◊◊" #
$str
◊◊$ 9
)
◊◊9 :
;
◊◊: ;
AddMimeMapping
ÿÿ 
(
ÿÿ 
$str
ÿÿ !
,
ÿÿ! "
$str
ÿÿ# 4
)
ÿÿ4 5
;
ÿÿ5 6
AddMimeMapping
ŸŸ 
(
ŸŸ 
$str
ŸŸ !
,
ŸŸ! "
$str
ŸŸ# 2
)
ŸŸ2 3
;
ŸŸ3 4
AddMimeMapping
⁄⁄ 
(
⁄⁄ 
$str
⁄⁄ $
,
⁄⁄$ %
$str
⁄⁄& <
)
⁄⁄< =
;
⁄⁄= >
AddMimeMapping
€€ 
(
€€ 
$str
€€ !
,
€€! "
$str
€€# E
)
€€E F
;
€€F G
AddMimeMapping
‹‹ 
(
‹‹ 
$str
‹‹ $
,
‹‹$ %
$str
‹‹& O
)
‹‹O P
;
‹‹P Q
AddMimeMapping
›› 
(
›› 
$str
›› !
,
››! "
$str
››# 0
)
››0 1
;
››1 2
AddMimeMapping
ﬁﬁ 
(
ﬁﬁ 
$str
ﬁﬁ !
,
ﬁﬁ! "
$str
ﬁﬁ# =
)
ﬁﬁ= >
;
ﬁﬁ> ?
AddMimeMapping
ﬂﬂ 
(
ﬂﬂ 
$str
ﬂﬂ $
,
ﬂﬂ$ %
$str
ﬂﬂ& J
)
ﬂﬂJ K
;
ﬂﬂK L
AddMimeMapping
‡‡ 
(
‡‡ 
$str
‡‡ !
,
‡‡! "
$str
‡‡# .
)
‡‡. /
;
‡‡/ 0
AddMimeMapping
·· 
(
·· 
$str
·· "
,
··" #
$str
··$ 8
)
··8 9
;
··9 :
AddMimeMapping
‚‚ 
(
‚‚ 
$str
‚‚  
,
‚‚  !
$str
‚‚" 4
)
‚‚4 5
;
‚‚5 6
AddMimeMapping
„„ 
(
„„ 
$str
„„ !
,
„„! "
$str
„„# :
)
„„: ;
;
„„; <
AddMimeMapping
‰‰ 
(
‰‰ 
$str
‰‰ !
,
‰‰! "
$str
‰‰# =
)
‰‰= >
;
‰‰> ?
AddMimeMapping
ÂÂ 
(
ÂÂ 
$str
ÂÂ !
,
ÂÂ! "
$str
ÂÂ# 3
)
ÂÂ3 4
;
ÂÂ4 5
AddMimeMapping
ÊÊ 
(
ÊÊ 
$str
ÊÊ !
,
ÊÊ! "
$str
ÊÊ# =
)
ÊÊ= >
;
ÊÊ> ?
AddMimeMapping
ÁÁ 
(
ÁÁ 
$str
ÁÁ !
,
ÁÁ! "
$str
ÁÁ# C
)
ÁÁC D
;
ÁÁD E
AddMimeMapping
ËË 
(
ËË 
$str
ËË !
,
ËË! "
$str
ËË# >
)
ËË> ?
;
ËË? @
AddMimeMapping
ÈÈ 
(
ÈÈ 
$str
ÈÈ %
,
ÈÈ% &
$str
ÈÈ' >
)
ÈÈ> ?
;
ÈÈ? @
AddMimeMapping
ÍÍ 
(
ÍÍ 
$str
ÍÍ !
,
ÍÍ! "
$str
ÍÍ# 6
)
ÍÍ6 7
;
ÍÍ7 8
AddMimeMapping
ÎÎ 
(
ÎÎ 
$str
ÎÎ !
,
ÎÎ! "
$str
ÎÎ# =
)
ÎÎ= >
;
ÎÎ> ?
AddMimeMapping
ÏÏ 
(
ÏÏ 
$str
ÏÏ 
,
ÏÏ  
$str
ÏÏ! 6
)
ÏÏ6 7
;
ÏÏ7 8
AddMimeMapping
ÌÌ 
(
ÌÌ 
$str
ÌÌ !
,
ÌÌ! "
$str
ÌÌ# 6
)
ÌÌ6 7
;
ÌÌ7 8
AddMimeMapping
ÓÓ 
(
ÓÓ 
$str
ÓÓ  
,
ÓÓ  !
$str
ÓÓ" 7
)
ÓÓ7 8
;
ÓÓ8 9
AddMimeMapping
ÔÔ 
(
ÔÔ 
$str
ÔÔ !
,
ÔÔ! "
$str
ÔÔ# /
)
ÔÔ/ 0
;
ÔÔ0 1
AddMimeMapping
 
(
 
$str
 !
,
! "
$str
# /
)
/ 0
;
0 1
AddMimeMapping
ÒÒ 
(
ÒÒ 
$str
ÒÒ %
,
ÒÒ% &
$str
ÒÒ' >
)
ÒÒ> ?
;
ÒÒ? @
AddMimeMapping
ÚÚ 
(
ÚÚ 
$str
ÚÚ !
,
ÚÚ! "
$str
ÚÚ# =
)
ÚÚ= >
;
ÚÚ> ?
AddMimeMapping
ÛÛ 
(
ÛÛ 
$str
ÛÛ "
,
ÛÛ" #
$str
ÛÛ$ 0
)
ÛÛ0 1
;
ÛÛ1 2
AddMimeMapping
ÙÙ 
(
ÙÙ 
$str
ÙÙ !
,
ÙÙ! "
$str
ÙÙ# 6
)
ÙÙ6 7
;
ÙÙ7 8
AddMimeMapping
ıı 
(
ıı 
$str
ıı "
,
ıı" #
$str
ıı$ ;
)
ıı; <
;
ıı< =
AddMimeMapping
ˆˆ 
(
ˆˆ 
$str
ˆˆ !
,
ˆˆ! "
$str
ˆˆ# >
)
ˆˆ> ?
;
ˆˆ? @
AddMimeMapping
˜˜ 
(
˜˜ 
$str
˜˜ #
,
˜˜# $
$str
˜˜% :
)
˜˜: ;
;
˜˜; <
AddMimeMapping
¯¯ 
(
¯¯ 
$str
¯¯ !
,
¯¯! "
$str
¯¯# .
)
¯¯. /
;
¯¯/ 0
AddMimeMapping
˘˘ 
(
˘˘ 
$str
˘˘ !
,
˘˘! "
$str
˘˘# 1
)
˘˘1 2
;
˘˘2 3
AddMimeMapping
˙˙ 
(
˙˙ 
$str
˙˙ !
,
˙˙! "
$str
˙˙# =
)
˙˙= >
;
˙˙> ?
AddMimeMapping
˚˚ 
(
˚˚ 
$str
˚˚ !
,
˚˚! "
$str
˚˚# .
)
˚˚. /
;
˚˚/ 0
AddMimeMapping
¸¸ 
(
¸¸ 
$str
¸¸ !
,
¸¸! "
$str
¸¸# 3
)
¸¸3 4
;
¸¸4 5
AddMimeMapping
˝˝ 
(
˝˝ 
$str
˝˝ !
,
˝˝! "
$str
˝˝# :
)
˝˝: ;
;
˝˝; <
AddMimeMapping
˛˛ 
(
˛˛ 
$str
˛˛ !
,
˛˛! "
$str
˛˛# =
)
˛˛= >
;
˛˛> ?
AddMimeMapping
ˇˇ 
(
ˇˇ 
$str
ˇˇ !
,
ˇˇ! "
$str
ˇˇ# =
)
ˇˇ= >
;
ˇˇ> ?
AddMimeMapping
ÄÄ 
(
ÄÄ 
$str
ÄÄ !
,
ÄÄ! "
$str
ÄÄ# =
)
ÄÄ= >
;
ÄÄ> ?
AddMimeMapping
ÅÅ 
(
ÅÅ 
$str
ÅÅ !
,
ÅÅ! "
$str
ÅÅ# 3
)
ÅÅ3 4
;
ÅÅ4 5
AddMimeMapping
ÇÇ 
(
ÇÇ 
$str
ÇÇ !
,
ÇÇ! "
$str
ÇÇ# =
)
ÇÇ= >
;
ÇÇ> ?
AddMimeMapping
ÉÉ 
(
ÉÉ 
$str
ÉÉ "
,
ÉÉ" #
$str
ÉÉ$ .
)
ÉÉ. /
;
ÉÉ/ 0
AddMimeMapping
ÑÑ 
(
ÑÑ 
$str
ÑÑ !
,
ÑÑ! "
$str
ÑÑ# -
)
ÑÑ- .
;
ÑÑ. /
AddMimeMapping
ÖÖ 
(
ÖÖ 
$str
ÖÖ !
,
ÖÖ! "
$str
ÖÖ# =
)
ÖÖ= >
;
ÖÖ> ?
AddMimeMapping
ÜÜ 
(
ÜÜ 
$str
ÜÜ !
,
ÜÜ! "
$str
ÜÜ# 3
)
ÜÜ3 4
;
ÜÜ4 5
AddMimeMapping
áá 
(
áá 
$str
áá !
,
áá! "
$str
áá# =
)
áá= >
;
áá> ?
AddMimeMapping
àà 
(
àà 
$str
àà !
,
àà! "
$str
àà# =
)
àà= >
;
àà> ?
AddMimeMapping
ââ 
(
ââ 
$str
ââ !
,
ââ! "
$str
ââ# 3
)
ââ3 4
;
ââ4 5
AddMimeMapping
ää 
(
ää 
$str
ää !
,
ää! "
$str
ää# =
)
ää= >
;
ää> ?
AddMimeMapping
ãã 
(
ãã 
$str
ãã !
,
ãã! "
$str
ãã# =
)
ãã= >
;
ãã> ?
AddMimeMapping
åå 
(
åå 
$str
åå !
,
åå! "
$str
åå# -
)
åå- .
;
åå. /
AddMimeMapping
çç 
(
çç 
$str
çç !
,
çç! "
$str
çç# 4
)
çç4 5
;
çç5 6
AddMimeMapping
éé 
(
éé 
$str
éé !
,
éé! "
$str
éé# =
)
éé= >
;
éé> ?
AddMimeMapping
èè 
(
èè 
$str
èè !
,
èè! "
$str
èè# 4
)
èè4 5
;
èè5 6
AddMimeMapping
êê 
(
êê 
$str
êê !
,
êê! "
$str
êê# 8
)
êê8 9
;
êê9 :
AddMimeMapping
ëë 
(
ëë 
$str
ëë !
,
ëë! "
$str
ëë# -
)
ëë- .
;
ëë. /
AddMimeMapping
íí 
(
íí 
$str
íí 
,
íí  
$str
íí! 9
)
íí9 :
;
íí: ;
AddMimeMapping
ìì 
(
ìì 
$str
ìì !
,
ìì! "
$str
ìì# A
)
ììA B
;
ììB C
AddMimeMapping
îî 
(
îî 
$str
îî 
,
îî  
$str
îî! ;
)
îî; <
;
îî< =
}
ïï 	
private
óó 
MimeMapping
óó 
(
óó 
)
óó 
{
òò 	
}
ôô 	
private
õõ 
static
õõ 
void
õõ 
AddMimeMapping
õõ *
(
õõ* +
string
õõ+ 1
	extension
õõ2 ;
,
õõ; <
string
õõ= C
MimeType
õõD L
)
õõL M
{
úú 	*
_extensionToMimeMappingTable
ùù (
.
ùù( )
Add
ùù) ,
(
ùù, -
	extension
ùù- 6
,
ùù6 7
MimeType
ùù8 @
)
ùù@ A
;
ùùA B
}
ûû 	
internal
†† 
static
†† 
string
†† 
GetMimeMapping
†† -
(
††- .
string
††. 4
FileName
††5 =
)
††= >
{
°° 	
string
¢¢ 
str
¢¢ 
=
¢¢ 
null
¢¢ 
;
¢¢ 
int
££ 

startIndex
££ 
=
££ 
FileName
££ %
.
££% &
LastIndexOf
££& 1
(
££1 2
$char
££2 5
)
££5 6
;
££6 7
if
§§ 
(
§§ 
(
§§ 
$num
§§ 
<
§§ 

startIndex
§§ 
)
§§  
)
§§  !
{
•• 
str
¶¶ 
=
¶¶ 
(
¶¶ 
string
¶¶ 
)
¶¶ *
_extensionToMimeMappingTable
¶¶ :
[
¶¶: ;
FileName
¶¶; C
.
¶¶C D
	Substring
¶¶D M
(
¶¶M N

startIndex
¶¶N X
)
¶¶X Y
]
¶¶Y Z
;
¶¶Z [
}
ßß 
if
®® 
(
®® 
str
®® 
==
®® 
null
®® 
)
®® 
{
©© 
str
™™ 
=
™™ 
(
™™ 
string
™™ 
)
™™ *
_extensionToMimeMappingTable
™™ :
[
™™: ;
$str
™™; ?
]
™™? @
;
™™@ A
}
´´ 
return
¨¨ 
str
¨¨ 
;
¨¨ 
}
≠≠ 	
}
ÆÆ 
}≤≤ 